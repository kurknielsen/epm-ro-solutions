CREATE OR REPLACE TYPE BODY FORMULA_DETERMINANT_ACCESSOR IS
-------------------------------------------------------------------------------
-- This object just "wraps" the current accessor defined in the RETAIL_PRICING
-- package. All methods delegate to this accessor instance.

-- Determinant status values returned by accessor are recorded in RETAIL_PRICING
-- package.
-------------------------------------------------------------------------------
OVERRIDING MEMBER FUNCTION GET_TAXABLE_CHARGES
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SERVICE_POINT_ID IN NUMBER
	) RETURN PRICING_RESULT_TABLE AS
v_ACCESSOR	DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
BEGIN
	RETURN v_ACCESSOR.GET_TAXABLE_CHARGES(p_BEGIN_DATE, p_END_DATE, p_SERVICE_POINT_ID);
END GET_TAXABLE_CHARGES;
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE ADD_TAXABLE_CHARGE
	(
	p_PRICING_RESULT IN PRICING_RESULT
	) AS
v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
BEGIN
	v_ACCESSOR.ADD_TAXABLE_CHARGE(p_PRICING_RESULT);
END ADD_TAXABLE_CHARGE;
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE CLEAR_TAXABLE_CHARGES AS
v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
BEGIN
	v_ACCESSOR.CLEAR_TAXABLE_CHARGES;
END CLEAR_TAXABLE_CHARGES;
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE GET_PEAK_DETERMINANT
	(
	p_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_UOM IN VARCHAR2 := NULL, -- NULL interpreted as GA.DEFAULT_UNIT_OF_MEASUREMENT
	p_TEMPLATE_ID IN NUMBER := NULL,
	p_PERIOD_ID IN NUMBER := NULL,
	p_LOSS_ADJ_TYPE IN NUMBER := NULL,
	p_INTEGRATION_INTERVAL IN VARCHAR2 := NULL,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	) IS
v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
BEGIN
	v_ACCESSOR.GET_PEAK_DETERMINANT(p_INTERVAL, p_BEGIN_DATE, p_END_DATE, P_UOM,
								p_TEMPLATE_ID, p_PERIOD_ID, p_LOSS_ADJ_TYPE,
								p_INTEGRATION_INTERVAL,p_RETURN_VALUE, p_RETURN_STATUS);
	RETAIL_PRICING.ADD_DETERMINANT_STATUS(p_RETURN_STATUS);
END GET_PEAK_DETERMINANT;
-------------------------------------------------------------------------------
MEMBER FUNCTION GET_PEAK_DETERMINANT
	(
	p_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_UOM IN VARCHAR2 := NULL, -- NULL interpreted as GA.DEFAULT_UNIT_OF_MEASUREMENT
	p_TEMPLATE_ID IN NUMBER := NULL,
	p_PERIOD_ID IN NUMBER := NULL,
	p_LOSS_ADJ_TYPE IN NUMBER := NULL,
	p_INTEGRATION_INTERVAL IN VARCHAR2 := NULL
	) RETURN NUMBER AS
v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
v_RET	NUMBER;
v_STAT	PLS_INTEGER;
BEGIN
	v_ACCESSOR.GET_PEAK_DETERMINANT(p_INTERVAL, p_BEGIN_DATE, p_END_DATE, P_UOM,
									p_TEMPLATE_ID, p_PERIOD_ID, p_LOSS_ADJ_TYPE,
									p_INTEGRATION_INTERVAL, v_RET, v_STAT);
	RETAIL_PRICING.ADD_DETERMINANT_STATUS(v_STAT);
	RETURN v_RET;
END GET_PEAK_DETERMINANT;
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE GET_SUM_DETERMINANTS
	(
	p_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_UOM IN VARCHAR2 := NULL, -- NULL interpreted as GA.DEFAULT_UNIT_OF_MEASUREMENT
	p_TEMPLATE_ID IN NUMBER := NULL,
	p_PERIOD_ID IN NUMBER := NULL,
	p_LOSS_ADJ_TYPE IN NUMBER := NULL,
	p_INTERVAL_MINIMUM_QTY IN NUMBER := NULL,
	p_OPERATION_CODE IN VARCHAR2 := NULL,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	) IS
v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
BEGIN
	v_ACCESSOR.GET_SUM_DETERMINANTS(p_INTERVAL, p_BEGIN_DATE, p_END_DATE, P_UOM,
									p_TEMPLATE_ID, p_PERIOD_ID, p_LOSS_ADJ_TYPE,
									p_INTERVAL_MINIMUM_QTY, p_OPERATION_CODE, p_RETURN_VALUE, p_RETURN_STATUS);
	RETAIL_PRICING.ADD_DETERMINANT_STATUS(p_RETURN_STATUS);
END GET_SUM_DETERMINANTS;
-------------------------------------------------------------------------------
MEMBER FUNCTION GET_SUM_DETERMINANTS
	(
	p_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_UOM IN VARCHAR2 := NULL, -- NULL interpreted as GA.DEFAULT_UNIT_OF_MEASUREMENT
	p_TEMPLATE_ID IN NUMBER := NULL,
	p_PERIOD_ID IN NUMBER := NULL,
	p_LOSS_ADJ_TYPE IN NUMBER := NULL,
	p_INTERVAL_MINIMUM_QTY IN NUMBER := NULL,
  	p_OPERATION_CODE IN VARCHAR2 := NULL
	) RETURN NUMBER IS
v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
v_RET	NUMBER;
v_STAT	PLS_INTEGER;
BEGIN
	v_ACCESSOR.GET_SUM_DETERMINANTS(p_INTERVAL, p_BEGIN_DATE, p_END_DATE, P_UOM,
									p_TEMPLATE_ID, p_PERIOD_ID, p_LOSS_ADJ_TYPE,
									p_INTERVAL_MINIMUM_QTY, p_OPERATION_CODE, v_RET, v_STAT);
	RETAIL_PRICING.ADD_DETERMINANT_STATUS(v_STAT);
	RETURN v_RET;
END GET_SUM_DETERMINANTS;
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE GET_EFFECTIVE_ANC_SVC
	(
	p_DATE IN DATE,
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	) IS
v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
BEGIN
	v_ACCESSOR.GET_EFFECTIVE_ANC_SVC(p_DATE, p_ANCILLARY_SERVICE_ID,
									p_RETURN_VALUE, p_RETURN_STATUS);
	RETAIL_PRICING.ADD_DETERMINANT_STATUS(p_RETURN_STATUS);
END GET_EFFECTIVE_ANC_SVC;
-------------------------------------------------------------------------------
MEMBER FUNCTION GET_EFFECTIVE_ANC_SVC
	(
	p_DATE IN DATE,
	p_ANCILLARY_SERVICE_ID IN NUMBER
	) RETURN NUMBER IS
v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
v_RET	NUMBER;
v_STAT	PLS_INTEGER;
BEGIN
	v_ACCESSOR.GET_EFFECTIVE_ANC_SVC(p_DATE, p_ANCILLARY_SERVICE_ID,
										v_RET, v_STAT);
	RETAIL_PRICING.ADD_DETERMINANT_STATUS(v_STAT);
	RETURN v_RET;
END GET_EFFECTIVE_ANC_SVC;
-------------------------------------------------------------------------------
OVERRIDING MEMBER FUNCTION GET_METER_TYPE_TEMPLATE_ID
	(
	p_DATE IN DATE
	) RETURN NUMBER IS
v_ACCESSOR	DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
BEGIN
	RETURN v_ACCESSOR.GET_METER_TYPE_TEMPLATE_ID(p_DATE);
END GET_METER_TYPE_TEMPLATE_ID;
-------------------------------------------------------------------------------
OVERRIDING MEMBER FUNCTION GET_FORMULA_CONTEXTS RETURN MAP_ENTRY_TABLE AS
v_ACCESSOR	DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
BEGIN
	RETURN v_ACCESSOR.GET_FORMULA_CONTEXTS;
END GET_FORMULA_CONTEXTS;
-------------------------------------------------------------------------------
CONSTRUCTOR FUNCTION FORMULA_DETERMINANT_ACCESSOR RETURN SELF AS RESULT AS
BEGIN
	-- Since field access can't "delegate" to another instance, we must "copy"
	-- this field value from the source accessor - just in case it is referenced
	-- via a formula
	SELF.TIME_ZONE := RETAIL_PRICING.GET_CURRENT_ACCESSOR().TIME_ZONE;
	RETURN;
END FORMULA_DETERMINANT_ACCESSOR;
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE GET_AVERAGE_INTERVAL_COUNT
(
	p_INVOICE_LINE_BEGIN_DATE 	IN DATE,
	p_INVOICE_LINE_END_DATE 	IN DATE,
	p_UOM 						IN VARCHAR2 := NULL, 
	p_QUALITY_CODE 				IN VARCHAR2 := NULL,
	p_STATUS_CODE 				IN VARCHAR2 := NULL,
	p_DATE_RANGE_INTERVAL		IN VARCHAR2 := NULL,
	p_RETURN_VALUE 				OUT NUMBER,
	p_RETURN_STATUS 			OUT PLS_INTEGER
) IS
	v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
BEGIN
	v_ACCESSOR.GET_AVERAGE_INTERVAL_COUNT
				(
					p_INVOICE_LINE_BEGIN_DATE,
					p_INVOICE_LINE_END_DATE,
					p_UOM,
					p_QUALITY_CODE,
					p_STATUS_CODE,
					p_DATE_RANGE_INTERVAL,
					p_RETURN_VALUE,
					p_RETURN_STATUS
				);
	RETAIL_PRICING.ADD_DETERMINANT_STATUS(p_RETURN_STATUS);
END GET_AVERAGE_INTERVAL_COUNT;
-------------------------------------------------------------------------------
MEMBER FUNCTION GET_AVERAGE_INTERVAL_COUNT
(
	p_INVOICE_LINE_BEGIN_DATE 	IN DATE,
	p_INVOICE_LINE_END_DATE 	IN DATE,
	p_UOM 						IN VARCHAR2 := NULL, 
	p_QUALITY_CODE 				IN VARCHAR2 := NULL,
	p_STATUS_CODE 				IN VARCHAR2 := NULL,
	p_DATE_RANGE_INTERVAL		IN VARCHAR2 := NULL
) RETURN NUMBER IS
	v_ACCESSOR DETERMINANT_ACCESSOR := RETAIL_PRICING.GET_CURRENT_ACCESSOR();
	v_RET	NUMBER;
	v_STAT	PLS_INTEGER;
BEGIN
	v_ACCESSOR.GET_AVERAGE_INTERVAL_COUNT
				(
					p_INVOICE_LINE_BEGIN_DATE,
					p_INVOICE_LINE_END_DATE,
					p_UOM,
					p_QUALITY_CODE,
					p_STATUS_CODE,
					p_DATE_RANGE_INTERVAL,
					v_RET,
					v_STAT
				);
	RETAIL_PRICING.ADD_DETERMINANT_STATUS(v_STAT);
	RETURN v_RET;
END GET_AVERAGE_INTERVAL_COUNT;
-------------------------------------------------------------------------------
END;
/
