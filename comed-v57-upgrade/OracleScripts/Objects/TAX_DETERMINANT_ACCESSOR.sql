CREATE OR REPLACE TYPE TAX_DETERMINANT_ACCESSOR UNDER DETERMINANT_ACCESSOR
(

/*  None of the following methods are actually implemented, they just throw
    an exception when called because they require an account or service point
    as context.  The TAX_DETERMINANT_ACCESSOR only supplies taxable components. */
OVERRIDING MEMBER PROCEDURE GET_PEAK_DETERMINANT
	(
	p_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_UOM IN VARCHAR2 := NULL,
	p_TEMPLATE_ID IN NUMBER := NULL,
	p_PERIOD_ID IN NUMBER := NULL,
	p_LOSS_ADJ_TYPE IN NUMBER := NULL,
	p_INTEGRATION_INTERVAL IN VARCHAR2 := NULL,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	),
    
OVERRIDING MEMBER PROCEDURE GET_SUM_DETERMINANTS
	(
	p_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_UOM IN VARCHAR2 := NULL,
	p_TEMPLATE_ID IN NUMBER := NULL,
	p_PERIOD_ID IN NUMBER := NULL,
	p_LOSS_ADJ_TYPE IN NUMBER := NULL,
	p_INTERVAL_MINIMUM_QTY IN NUMBER := NULL,
	p_OPERATION_CODE IN VARCHAR2 := NULL,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	),
    
OVERRIDING MEMBER PROCEDURE GET_EFFECTIVE_ANC_SVC
	(
	p_DATE IN DATE,
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	),
    
OVERRIDING MEMBER FUNCTION GET_METER_TYPE_TEMPLATE_ID
	(
	p_DATE IN DATE
	) RETURN NUMBER,

-- Creates a new determinant accessor instance.
-- %parm p_TIME_ZONE        The time zone to use for determining which
--                            sets of intervals belong to which calendar
--                            days
-- %return                    New accessor instance
CONSTRUCTOR FUNCTION TAX_DETERMINANT_ACCESSOR
    (
    p_TIME_ZONE                IN VARCHAR2
	) RETURN SELF AS RESULT,
	
OVERRIDING MEMBER PROCEDURE GET_AVERAGE_INTERVAL_COUNT

(
	p_INVOICE_LINE_BEGIN_DATE 	IN DATE,
	p_INVOICE_LINE_END_DATE 	IN DATE,
	p_UOM 						IN VARCHAR2 := NULL, 
	p_QUALITY_CODE 				IN VARCHAR2 := NULL,
	p_STATUS_CODE 				IN VARCHAR2 := NULL,
	p_DATE_RANGE_INTERVAL		IN VARCHAR2 := NULL,
	p_RETURN_VALUE 				OUT NUMBER,
	p_RETURN_STATUS 			OUT PLS_INTEGER
)	
)
/
CREATE OR REPLACE TYPE BODY TAX_DETERMINANT_ACCESSOR IS
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE GET_PEAK_DETERMINANT
    (
    p_INTERVAL IN VARCHAR2,
    p_BEGIN_DATE IN DATE,
    p_END_DATE IN DATE,
    p_UOM IN VARCHAR2 := NULL,
    p_TEMPLATE_ID IN NUMBER := NULL,
    p_PERIOD_ID IN NUMBER := NULL,
    p_LOSS_ADJ_TYPE IN NUMBER := NULL,
    p_INTEGRATION_INTERVAL IN VARCHAR2 := NULL,	
    p_RETURN_VALUE OUT NUMBER,
    p_RETURN_STATUS OUT PLS_INTEGER
	) IS 
    
BEGIN

    -- THIS METHOD IS NOT VALID FOR THE TAX_DETERMINANT_ACCESSOR, THROW
    -- AN EXCEPTION
    ERRS.RAISE(MSGCODES.c_ERR_INVALID_CHARGE);
    
END GET_PEAK_DETERMINANT;
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE GET_SUM_DETERMINANTS
	(
	p_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_UOM IN VARCHAR2 := NULL,
	p_TEMPLATE_ID IN NUMBER := NULL,
	p_PERIOD_ID IN NUMBER := NULL,
	p_LOSS_ADJ_TYPE IN NUMBER := NULL,
	p_INTERVAL_MINIMUM_QTY IN NUMBER := NULL,
	p_OPERATION_CODE IN VARCHAR2 := NULL,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	) IS 
    
BEGIN

    -- THIS METHOD IS NOT VALID FOR THE TAX_DETERMINANT_ACCESSOR, THROW
    -- AN EXCEPTION
    ERRS.RAISE(MSGCODES.c_ERR_INVALID_CHARGE);
    
END GET_SUM_DETERMINANTS;
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE GET_EFFECTIVE_ANC_SVC
	(
	p_DATE IN DATE,
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	) IS 
    
BEGIN

    -- THIS METHOD IS NOT VALID FOR THE TAX_DETERMINANT_ACCESSOR, THROW
    -- AN EXCEPTION
    ERRS.RAISE(MSGCODES.c_ERR_INVALID_CHARGE);
    
END GET_EFFECTIVE_ANC_SVC;
-------------------------------------------------------------------------------
OVERRIDING MEMBER FUNCTION GET_METER_TYPE_TEMPLATE_ID
	(
	p_DATE IN DATE
	) RETURN NUMBER IS 
    
BEGIN

    -- THIS METHOD IS NOT VALID FOR THE TAX_DETERMINANT_ACCESSOR, THROW
    -- AN EXCEPTION
    ERRS.RAISE(MSGCODES.c_ERR_INVALID_CHARGE);
    
END GET_METER_TYPE_TEMPLATE_ID;
-------------------------------------------------------------------------------
CONSTRUCTOR FUNCTION TAX_DETERMINANT_ACCESSOR
    (
    p_TIME_ZONE                IN VARCHAR2
	) RETURN SELF AS RESULT IS
    
BEGIN

    SELF.TIME_ZONE := NVL(p_TIME_ZONE, GA.LOCAL_TIME_ZONE);
    
    -- Done!
    RETURN;

END TAX_DETERMINANT_ACCESSOR;
-------------------------------------------------------------------------------
OVERRIDING MEMBER PROCEDURE GET_AVERAGE_INTERVAL_COUNT
(
	p_INVOICE_LINE_BEGIN_DATE 	IN DATE,
	p_INVOICE_LINE_END_DATE 	IN DATE,
	p_UOM 						IN VARCHAR2 := NULL, 
	p_QUALITY_CODE 				IN VARCHAR2 := NULL,
	p_STATUS_CODE 				IN VARCHAR2 := NULL,
	p_DATE_RANGE_INTERVAL		IN VARCHAR2 := NULL,
	p_RETURN_VALUE 				OUT NUMBER,
	p_RETURN_STATUS 			OUT PLS_INTEGER
) IS
BEGIN
	-- THIS METHOD IS NOT VALID FOR THE TAX_DETERMINANT_ACCESSOR, THROW
    -- AN EXCEPTION
    ERRS.RAISE(MSGCODES.c_ERR_UNSUPPORTED_OPERATION);
END GET_AVERAGE_INTERVAL_COUNT;
-------------------------------------------------------------------------------
END;
/
