CREATE OR REPLACE TYPE MEX_CREDENTIALS AS OBJECT
(
	-- flag
	IS_USING_UNAME_PW	NUMBER(1),
	-- plain-text username
	USERNAME			VARCHAR2(32),
	-- base64-encoded and encrypted password
	PASSWORD			VARCHAR2(32),
	-- between zero and two (inclusive)
	NUMBER_OF_CERTS		NUMBER(1),
	-- certificates
	CERTIFICATES		MEX_CERTIFICATE_TBL,
	-- external account name (aka ISO account name)
	EXTERNAL_ACCOUNT_NAME	VARCHAR2(64),

	MEMBER PROCEDURE ADD_TO_REQUEST(SELF IN MEX_CREDENTIALS, p_REQUEST IN OUT CLOB, p_PRETTY_REQUEST IN OUT CLOB),
	CONSTRUCTOR FUNCTION MEX_CREDENTIALS RETURN SELF AS RESULT,
	CONSTRUCTOR FUNCTION MEX_CREDENTIALS
    	(
    	p_USER_NAME IN VARCHAR2,
    	p_PASSWORD IN VARCHAR2,
    	p_PASSWORD_IS_ENCRYPTED IN BOOLEAN := FALSE
    	) RETURN SELF AS RESULT,
    CONSTRUCTOR FUNCTION MEX_CREDENTIALS
    	(
    	p_CERTIFICATE IN BLOB,
    	p_PASSWORD IN VARCHAR2
    	) RETURN SELF AS RESULT,
    CONSTRUCTOR FUNCTION MEX_CREDENTIALS
    	(
    	p_CERTIFICATE IN CLOB,
    	p_PASSWORD IN VARCHAR2
    	) RETURN SELF AS RESULT
);
/
CREATE OR REPLACE TYPE BODY MEX_CREDENTIALS IS
----------------------------------------------------------------------------
MEMBER PROCEDURE ADD_TO_REQUEST(SELF IN MEX_CREDENTIALS, p_REQUEST IN OUT CLOB, p_PRETTY_REQUEST IN OUT CLOB) IS
v_IDX BINARY_INTEGER;
BEGIN
   	CD.BUILD_QUERY_STRING('isUsingUnamePw', SELF.IS_USING_UNAME_PW, p_REQUEST, p_PRETTY_REQUEST);
	IF SELF.IS_USING_UNAME_PW <> 0 THEN
	    CD.BUILD_QUERY_STRING('userName', SELF.USERNAME, p_REQUEST, p_PRETTY_REQUEST, FALSE, NULL, TRUE);
	   	CD.BUILD_QUERY_STRING('password', SELF.PASSWORD, p_REQUEST, p_PRETTY_REQUEST, TRUE);
	END IF;

   	CD.BUILD_QUERY_STRING('numberOfCertificates', SELF.NUMBER_OF_CERTS, p_REQUEST, p_PRETTY_REQUEST);
	v_IDX := CERTIFICATES.FIRST;
	WHILE CERTIFICATES.EXISTS(v_IDX) LOOP
        CD.BUILD_QUERY_STRING('certificate'||SELF.CERTIFICATES(v_IDX).CERT_TYPE, SELF.CERTIFICATES(v_IDX).CERTIFICATE, p_REQUEST, p_PRETTY_REQUEST, FALSE, TO_CLOB('(certificate)'));
       	CD.BUILD_QUERY_STRING('certPassword'||SELF.CERTIFICATES(v_IDX).CERT_TYPE, SELF.CERTIFICATES(v_IDX).CERT_PASSWORD, p_REQUEST, p_PRETTY_REQUEST, TRUE);
		v_IDX := SELF.CERTIFICATES.NEXT(v_IDX);
	END LOOP;
END ADD_TO_REQUEST;
----------------------------------------------------------------------------
-- Black credentials - no usernames, passwords, or certificates
CONSTRUCTOR FUNCTION MEX_CREDENTIALS RETURN SELF AS RESULT AS
BEGIN
	SELF.IS_USING_UNAME_PW := 0;
	SELF.NUMBER_OF_CERTS := 0;
	SELF.CERTIFICATES := MEX_CERTIFICATE_TBL();
	RETURN;
END;
----------------------------------------------------------------------------
-- Simple username+password credentials
CONSTRUCTOR FUNCTION MEX_CREDENTIALS
	(
	p_USER_NAME IN VARCHAR2,
	p_PASSWORD IN VARCHAR2,
	p_PASSWORD_IS_ENCRYPTED IN BOOLEAN := FALSE
	) RETURN SELF AS RESULT AS
BEGIN
	SELF.IS_USING_UNAME_PW := 1;
	SELF.USERNAME := p_USER_NAME;
	IF p_PASSWORD_IS_ENCRYPTED THEN
		SELF.PASSWORD := p_PASSWORD;
	ELSE
		SELF.PASSWORD := SECURITY_CONTROLS.ENCODE(p_PASSWORD);
	END IF;
	SELF.NUMBER_OF_CERTS := 0;
	SELF.CERTIFICATES := MEX_CERTIFICATE_TBL();
	RETURN;
END;
----------------------------------------------------------------------------
-- Single certificate credentials - this version takes *UN*encrypted cert and password
CONSTRUCTOR FUNCTION MEX_CREDENTIALS
	(
	p_CERTIFICATE IN BLOB,
	p_PASSWORD IN VARCHAR2
	) RETURN SELF AS RESULT AS
BEGIN
	SELF.IS_USING_UNAME_PW := 0;
	SELF.NUMBER_OF_CERTS := 1;
	SELF.CERTIFICATES := MEX_CERTIFICATE_TBL(
							MEX_CERTIFICATE(
								SECURITY_CONTROLS.ENCODE(p_CERTIFICATE),
								SECURITY_CONTROLS.ENCODE(p_PASSWORD),
								SECURITY_CONTROLS.g_AUTH_CERT_TYPE
								)
							);
	RETURN;
END;
----------------------------------------------------------------------------
-- Single certificate credentials - this version takes *en*crypted cert and password
CONSTRUCTOR FUNCTION MEX_CREDENTIALS
	(
	p_CERTIFICATE IN CLOB,
	p_PASSWORD IN VARCHAR2
	) RETURN SELF AS RESULT AS
BEGIN
	SELF.IS_USING_UNAME_PW := 0;
	SELF.NUMBER_OF_CERTS := 1;
	SELF.CERTIFICATES := MEX_CERTIFICATE_TBL(
							MEX_CERTIFICATE(
								p_CERTIFICATE,
								p_PASSWORD,
								SECURITY_CONTROLS.g_AUTH_CERT_TYPE
								)
							);
	RETURN;
END;
----------------------------------------------------------------------------
END;
/

CREATE OR REPLACE TYPE MEX_CREDENTIALS_TBL IS TABLE OF MEX_CREDENTIALS;
/

