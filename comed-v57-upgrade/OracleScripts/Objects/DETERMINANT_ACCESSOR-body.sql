CREATE OR REPLACE TYPE BODY DETERMINANT_ACCESSOR IS
-------------------------------------------------------------------------------
MEMBER FUNCTION GET_TAXABLE_CHARGES
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SERVICE_POINT_ID IN NUMBER
	) RETURN PRICING_RESULT_TABLE IS
BEGIN
	IF TAXED_COMPONENTS IS NULL THEN
		RETURN PRICING_RESULT_TABLE();
	ELSE
		RETURN TAXED_COMPONENTS;
	END IF;
END GET_TAXABLE_CHARGES;
-------------------------------------------------------------------------------
MEMBER PROCEDURE ADD_TAXABLE_CHARGE
	(
	p_PRICING_RESULT IN PRICING_RESULT
	) IS
BEGIN
	IF p_PRICING_RESULT IS NOT NULL THEN
		IF TAXED_COMPONENTS IS NULL THEN
			TAXED_COMPONENTS := PRICING_RESULT_TABLE();
		END IF;
		TAXED_COMPONENTS.EXTEND;
		TAXED_COMPONENTS(TAXED_COMPONENTS.LAST) := p_PRICING_RESULT;
	END IF;
END ADD_TAXABLE_CHARGE;
-------------------------------------------------------------------------------
MEMBER PROCEDURE CLEAR_TAXABLE_CHARGES IS
BEGIN
	IF TAXED_COMPONENTS IS NOT NULL THEN
		TAXED_COMPONENTS.DELETE;
	END IF;
END CLEAR_TAXABLE_CHARGES;
-------------------------------------------------------------------------------
MEMBER PROCEDURE GET_PEAK_DETERMINANT
	(
	p_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_UOM IN VARCHAR2 := NULL,
	p_TEMPLATE_ID IN NUMBER := NULL,
	p_PERIOD_ID IN NUMBER := NULL,
	p_LOSS_ADJ_TYPE IN NUMBER := NULL,
	p_INTEGRATION_INTERVAL IN VARCHAR2 := NULL,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	) IS
BEGIN
	p_RETURN_VALUE := 0;
	p_RETURN_STATUS := RETAIL_DETERMINANTS.c_STATUS_MISSING;
END GET_PEAK_DETERMINANT;
-------------------------------------------------------------------------------
MEMBER PROCEDURE GET_SUM_DETERMINANTS
	(
	p_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_UOM IN VARCHAR2 := NULL,
	p_TEMPLATE_ID IN NUMBER := NULL,
	p_PERIOD_ID IN NUMBER := NULL,
	p_LOSS_ADJ_TYPE IN NUMBER := NULL,
	p_INTERVAL_MINIMUM_QTY IN NUMBER := NULL,
	p_OPERATION_CODE IN VARCHAR2 := NULL,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	) IS
BEGIN
	p_RETURN_VALUE := 0;
	p_RETURN_STATUS := RETAIL_DETERMINANTS.c_STATUS_MISSING;
END GET_SUM_DETERMINANTS;
-------------------------------------------------------------------------------
MEMBER PROCEDURE GET_EFFECTIVE_ANC_SVC
	(
	p_DATE IN DATE,
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_RETURN_VALUE OUT NUMBER,
	p_RETURN_STATUS OUT PLS_INTEGER
	) IS
BEGIN
	p_RETURN_VALUE := 0;
	p_RETURN_STATUS := RETAIL_DETERMINANTS.c_STATUS_MISSING;
END GET_EFFECTIVE_ANC_SVC;
-------------------------------------------------------------------------------
MEMBER FUNCTION GET_METER_TYPE_TEMPLATE_ID
	(
	p_DATE IN DATE
	) RETURN NUMBER IS
BEGIN
	RETURN NULL;
END GET_METER_TYPE_TEMPLATE_ID;
-------------------------------------------------------------------------------
MEMBER FUNCTION GET_FORMULA_CONTEXTS RETURN MAP_ENTRY_TABLE IS
BEGIN
	RETURN NULL;
END GET_FORMULA_CONTEXTS;
-------------------------------------------------------------------------------
MEMBER PROCEDURE GET_AVERAGE_INTERVAL_COUNT
(
	p_INVOICE_LINE_BEGIN_DATE 	IN DATE,
	p_INVOICE_LINE_END_DATE 	IN DATE,
	p_UOM 						IN VARCHAR2 := NULL, 
	p_QUALITY_CODE 				IN VARCHAR2 := NULL,
	p_STATUS_CODE 				IN VARCHAR2 := NULL,
	p_DATE_RANGE_INTERVAL		IN VARCHAR2 := NULL,
	p_RETURN_VALUE 				OUT NUMBER,
	p_RETURN_STATUS 			OUT PLS_INTEGER
)IS
BEGIN
	p_RETURN_VALUE := 0;
	p_RETURN_STATUS := RETAIL_DETERMINANTS.c_STATUS_MISSING;
END GET_AVERAGE_INTERVAL_COUNT;
END;
/
