CREATE OR REPLACE PACKAGE BODY MM AS
----------------------------------------------------------------------------------------------------
g_NO_OP_AFFECTS_STATUS BOOLEAN;
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
     RETURN '$Revision: 1.4 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
PROCEDURE MARKET_MESSAGE_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
    p_TIME_ZONE IN VARCHAR2,
    p_NOTUSED_ID1 IN NUMBER,
    p_NOTUSED_ID2 IN NUMBER,
    p_NOTUSED_ID3 IN NUMBER,
	p_REPORT_NAME IN VARCHAR2,
	p_MARKET_OPERATOR IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

	p_STATUS := GA.SUCCESS;

	MEX_UTIL.GET_MARKET_MESSAGES(p_MARKET_OPERATOR, 1, p_CURSOR);

EXCEPTION
		WHEN OTHERS THEN
			  RAISE;

END MARKET_MESSAGE_REPORT;
-------------------------------------------------------------------------------------
PROCEDURE DISPATCH_SUMMARY_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
    p_TIME_ZONE IN VARCHAR2,
    p_NOTUSED_ID1 IN NUMBER,
    p_NOTUSED_ID2 IN NUMBER,
    p_NOTUSED_ID3 IN NUMBER,
	p_REPORT_NAME IN VARCHAR2,
	p_SC_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	 	SELECT B.TRANSACTION_ID, B.TRANSACTION_NAME,
			FROM_CUT_AS_HED(A.SCHEDULE_DATE, p_TIME_ZONE, 'MI15') "SCHEDULE_DATE",
			A.AMOUNT
	 	FROM IT_SCHEDULE A, INTERCHANGE_TRANSACTION B
	 	WHERE B.TRANSACTION_TYPE = 'Generation'
			AND (p_SC_ID = -1 OR B.SC_ID = p_SC_ID)
			AND B.TRANSACTION_INTERVAL = '15 Minute'
			AND A.TRANSACTION_ID = B.TRANSACTION_ID
			AND A.SCHEDULE_DATE BETWEEN p_BEGIN_DATE + 1/86400 AND p_END_DATE + 1
		ORDER BY 2,3;

EXCEPTION
		WHEN OTHERS THEN
			  RAISE;

END DISPATCH_SUMMARY_REPORT;
-------------------------------------------------------------------------------------
PROCEDURE UNAPPROVED_BILATERALS_RPT(p_MODEL_ID         IN NUMBER,
																		p_SCHEDULE_TYPE    IN NUMBER,
																		p_BEGIN_DATE       IN DATE,
																		p_END_DATE         IN DATE,
																		p_AS_OF_DATE       IN DATE,
																		p_TIME_ZONE        IN VARCHAR2,
																		p_NOTUSED_ID1      IN NUMBER,
																		p_NOTUSED_ID2      IN NUMBER,
																		p_NOTUSED_ID3      IN NUMBER,
																		p_REPORT_NAME      IN VARCHAR2,
																		p_SC_ID            IN NUMBER,
																		p_STATUS           OUT NUMBER,
																		p_CURSOR           IN OUT REF_CURSOR) IS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT 0 DUMMY, S.SC_NAME, T.TRANSACTION_NAME
			FROM INTERCHANGE_TRANSACTION T, SCHEDULE_COORDINATOR S, IT_STATUS TS
		 WHERE T.TRANSACTION_TYPE IN ('Purchase', 'Sale')
     AND T.SC_ID = S.SC_ID
     AND T.TRANSACTION_ID = TS.TRANSACTION_ID
			 AND (p_SC_ID = g_ALL OR T.SC_ID = p_SC_ID)
       AND TS.TRANSACTION_STATUS_NAME<>'Approved'
       ORDER BY S.SC_NAME, T.TRANSACTION_NAME;
END UNAPPROVED_BILATERALS_RPT;
-------------------------------------------------------------------------------------
PROCEDURE UNAPPROVED_EXT_BILATERALS(p_MODEL_ID      IN NUMBER,
																		p_SCHEDULE_TYPE IN NUMBER,
																		p_BEGIN_DATE    IN DATE,
																		p_END_DATE      IN DATE,
																		p_AS_OF_DATE    IN DATE,
																		p_TIME_ZONE     IN VARCHAR2,
																		p_NOTUSED_ID1   IN NUMBER,
																		p_NOTUSED_ID2   IN NUMBER,
																		p_NOTUSED_ID3   IN NUMBER,
																		p_REPORT_NAME   IN VARCHAR2,
																		p_SC_ID         IN NUMBER,
																		p_STATUS        OUT NUMBER,
																		p_CURSOR        IN OUT REF_CURSOR) IS
	v_SOMETHING_DONE BOOLEAN := FALSE;
	v_MESSAGE        VARCHAR2(256);
  v_SC_ID SC.SC_ID%TYPE;
BEGIN
	p_STATUS := GA.SUCCESS;
  SELECT SC_ID INTO v_SC_ID FROM SC WHERE SC_ALIAS = 'MISO';
	IF p_SC_ID = g_ALL OR p_SC_ID = v_SC_ID THEN
		MM_MISO.MARKET_EXCHANGE(p_BEGIN_DATE            => p_BEGIN_DATE,
								p_END_DATE              => p_END_DATE,
								p_EXCHANGE_TYPE         => MM_MISO.g_ET_QRY_FCONTR_INTERNAL,
								p_ENTITY_LIST           => NULL,
								p_ENTITY_LIST_DELIMITER => ',',
								p_LOG_ONLY 				=> 0,
								p_LOG_TYPE 				=> NULL,
								p_TRACE_ON 				=> NULL,
								p_STATUS                => p_STATUS,
								p_MESSAGE               => v_MESSAGE);
	END IF;
  SELECT SC_ID INTO v_SC_ID FROM SC WHERE SC_ALIAS = 'PJM';
	IF p_SC_ID = g_ALL OR p_SC_ID = v_SC_ID THEN
		MM_PJM_ESCHED.MARKET_EXCHANGE(p_BEGIN_DATE            => p_BEGIN_DATE,
									p_END_DATE              => p_END_DATE,
									p_EXCHANGE_TYPE         => MM_PJM_ESCHED.g_ET_QUERY_CONTR_TO_INTER,
									p_ENTITY_LIST           => NULL,
									p_ENTITY_LIST_DELIMITER => ',',
									p_LOG_ONLY 				=>	0,
									p_LOG_TYPE 				=> NULL,
									p_TRACE_ON 				=> NULL,
									p_STATUS                => p_STATUS,
									p_MESSAGE               => v_MESSAGE);
	END IF;

  OPEN p_CURSOR FOR
		SELECT 0 DUMMY, S.SC_NAME, T.TRANSACTION_NAME
			FROM INTERCHANGE_TRANSACTION T, SCHEDULE_COORDINATOR S, IT_STATUS TS
		 WHERE T.TRANSACTION_TYPE IN ('Purchase', 'Sale')
			 AND T.SC_ID = S.SC_ID
			 AND T.TRANSACTION_ID = TS.TRANSACTION_ID
			 AND (p_SC_ID = g_ALL OR T.SC_ID = p_SC_ID)
			 AND TS.TRANSACTION_STATUS_NAME <> 'Approved'
		 ORDER BY S.SC_NAME, T.TRANSACTION_NAME;
END UNAPPROVED_EXT_BILATERALS;
-------------------------------------------------------------------------------------
PROCEDURE BILAT_CONTRACT_VALIDAT_RPT
	(
	p_MODEL_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
    p_TIME_ZONE IN VARCHAR2,
    p_NOTUSED_ID1 IN NUMBER,
    p_NOTUSED_ID2 IN NUMBER,
    p_NOTUSED_ID3 IN NUMBER,
	p_REPORT_NAME IN VARCHAR2,
	p_SC_ID IN NUMBER,
	p_COUNTER_PARTY_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		--FIRST GET EXTERNAL WHERE NO INTERNAL EXISTS.
	 	SELECT 0 "OVERRIDE_INTERNAL",
			1 "HAS_DIFFERENCES",
			A.TRANSACTION_NAME,
			0 "TRANSACTION_ID_INT",
			A.TRANSACTION_ID "TRANSACTION_ID_EXT",
			A.TRANSACTION_IDENTIFIER,
			0 "INTERNAL_EXISTS"
	 	FROM INTERCHANGE_TRANSACTION_EXT A, IT_COMMODITY B
		WHERE NOT EXISTS(SELECT 1 FROM INTERCHANGE_TRANSACTION WHERE TRANSACTION_NAME = A.TRANSACTION_NAME)
			AND A.TRANSACTION_TYPE IN('Purchase','Sale')
			AND A.IS_IMPORT_EXPORT = 0
			AND A.SC_ID = p_SC_ID
			AND (p_COUNTER_PARTY_ID = g_ALL OR A.PURCHASER_ID = p_COUNTER_PARTY_ID OR A.SELLER_ID = p_COUNTER_PARTY_ID)
			AND B.COMMODITY_TYPE = 'Energy'
			AND A.COMMODITY_ID = B.COMMODITY_ID
		--GET TXNS WHERE INTERNAL AND EXTERNAL EXIST.
		UNION ALL
	 	SELECT 0 "OVERRIDE_INTERNAL",
			CASE WHEN A.PURCHASER_ID = C.PURCHASER_ID
					AND A.SELLER_ID = C.SELLER_ID
					AND A.AGREEMENT_TYPE = C.AGREEMENT_TYPE
					AND A.APPROVAL_TYPE = C.APPROVAL_TYPE
					AND A.BEGIN_DATE = C.BEGIN_DATE
					AND A.END_DATE = C.END_DATE
					AND A.POD_ID = C.POD_ID
				THEN 0	ELSE 1 END	"HAS_DIFFERENCES",
			A.TRANSACTION_NAME,
			A.TRANSACTION_ID "TRANSACTION_ID_INT",
			C.TRANSACTION_ID "TRANSACTION_ID_EXT",
			A.TRANSACTION_IDENTIFIER,
			1 "INTERNAL_EXISTS"
	 	FROM INTERCHANGE_TRANSACTION A, INTERCHANGE_TRANSACTION_EXT C, IT_COMMODITY D
		WHERE A.TRANSACTION_TYPE IN('Purchase','Sale')
			AND A.IS_IMPORT_EXPORT = 0
			AND A.SC_ID = p_SC_ID
--			AND B.TRANSACTION_STATUS_NAME = 'Active'
--			AND A.TRANSACTION_ID = B.TRANSACTION_ID
			AND (p_COUNTER_PARTY_ID = g_ALL OR A.PURCHASER_ID = p_COUNTER_PARTY_ID OR A.SELLER_ID = p_COUNTER_PARTY_ID)
			AND C.TRANSACTION_NAME = A.TRANSACTION_NAME
			AND D.COMMODITY_TYPE = 'Energy'
			AND A.COMMODITY_ID = D.COMMODITY_ID
		ORDER BY 2 DESC,3 ASC;

EXCEPTION
		WHEN OTHERS THEN
			  RAISE;

END BILAT_CONTRACT_VALIDAT_RPT;
-------------------------------------------------------------------------------------
PROCEDURE PUT_BILAT_CONTRACT_VALIDAT_RPT
	(
	p_TRANSACTION_ID_INT IN NUMBER,
	p_TRANSACTION_ID_EXT IN NUMBER,
	p_OVERRIDE_INTERNAL IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
v_TRANSACTION_ID NUMBER(9);
v_TXN INTERCHANGE_TRANSACTION%ROWTYPE;
BEGIN

	IF p_OVERRIDE_INTERNAL = 1 THEN
		SELECT * INTO v_TXN
		FROM INTERCHANGE_TRANSACTION_EXT
		WHERE TRANSACTION_ID = p_TRANSACTION_ID_EXT;

		IF p_TRANSACTION_ID_INT > 0 THEN
			v_TXN.TRANSACTION_ID := p_TRANSACTION_ID_INT;
		ELSE
			v_TXN.TRANSACTION_ID := 0;
		END IF;
		MM_UTIL.PUT_TRANSACTION(v_TRANSACTION_ID, v_TXN, GA.INTERNAL_STATE, MM_UTIL.g_BILAT_REQUIRES_APPROVAL);
	END IF;

END PUT_BILAT_CONTRACT_VALIDAT_RPT;
-------------------------------------------------------------------------------------
PROCEDURE BILAT_CONTRACT_DRILL_DOWN
	(
	p_TRANSACTION_ID_INT IN NUMBER,
	p_TRANSACTION_ID_EXT IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS
v_TXN INTERCHANGE_TRANSACTION%ROWTYPE;
v_TXN_EXT INTERCHANGE_TRANSACTION_EXT%ROWTYPE;
BEGIN

	p_STATUS := GA.SUCCESS;

	BEGIN
		SELECT * INTO v_TXN
		FROM INTERCHANGE_TRANSACTION
		WHERE TRANSACTION_ID = p_TRANSACTION_ID_INT;
	EXCEPTION
		WHEN OTHERS THEN
			NULL;
	END;

	BEGIN
		SELECT * INTO v_TXN_EXT
		FROM INTERCHANGE_TRANSACTION_EXT
		WHERE TRANSACTION_ID = p_TRANSACTION_ID_EXT;
	EXCEPTION
		WHEN OTHERS THEN
			NULL;
	END;

	OPEN p_CURSOR FOR
	 	SELECT 'Name' "FIELD", v_TXN.TRANSACTION_NAME "INTERNAL", v_TXN_EXT.TRANSACTION_NAME "EXTERNAL" FROM DUAL
		UNION ALL
		SELECT 'Purchaser' "FIELD", C.PSE_NAME "INTERNAL", D.PSE_NAME "EXTERNAL"
	 	FROM PURCHASING_SELLING_ENTITY C, PURCHASING_SELLING_ENTITY D
		WHERE C.PSE_ID = NVL(v_TXN.PURCHASER_ID, 0)
			AND D.PSE_ID = NVL(v_TXN_EXT.PURCHASER_ID, 0)
		UNION ALL
		SELECT 'Seller' "FIELD", C.PSE_NAME "INTERNAL", D.PSE_NAME "EXTERNAL"
	 	FROM PURCHASING_SELLING_ENTITY C, PURCHASING_SELLING_ENTITY D
		WHERE C.PSE_ID = NVL(v_TXN.SELLER_ID, 0)
			AND D.PSE_ID = NVL(v_TXN_EXT.SELLER_ID, 0)
		UNION ALL
		SELECT 'Delivery Point' "FIELD", C.SERVICE_POINT_NAME "INTERNAL", D.SERVICE_POINT_NAME "EXTERNAL"
	 	FROM SERVICE_POINT C, SERVICE_POINT D
		WHERE C.SERVICE_POINT_ID = NVL(v_TXN.POD_ID, 0)
			AND D.SERVICE_POINT_ID = NVL(v_TXN_EXT.POD_ID, 0)
		UNION ALL
	 	SELECT 'Agreement Type' "FIELD", v_TXN.AGREEMENT_TYPE "INTERNAL", v_TXN_EXT.AGREEMENT_TYPE "EXTERNAL" FROM DUAL
		UNION ALL
	 	SELECT 'Approval Type' "FIELD", v_TXN.APPROVAL_TYPE "INTERNAL", v_TXN_EXT.APPROVAL_TYPE "EXTERNAL" FROM DUAL
		UNION ALL
	 	SELECT 'Begin Date' "FIELD", TO_CHAR(v_TXN.BEGIN_DATE,'DD-MON-YYYY') "INTERNAL", TO_CHAR(v_TXN_EXT.BEGIN_DATE,'DD-MON-YYYY') "EXTERNAL" FROM DUAL
		UNION ALL
	 	SELECT 'End Date' "FIELD", TO_CHAR(v_TXN.END_DATE,'DD-MON-YYYY') "INTERNAL", TO_CHAR(v_TXN_EXT.END_DATE,'DD-MON-YYYY') "EXTERNAL" FROM DUAL;
EXCEPTION
		WHEN OTHERS THEN
			  RAISE;

END BILAT_CONTRACT_DRILL_DOWN;
-------------------------------------------------------------------------------------
PROCEDURE MARKET_MESSAGE_REPORT(p_MODEL_ID      IN NUMBER,
																p_SCHEDULE_TYPE IN NUMBER,
																p_BEGIN_DATE    IN DATE,
																p_END_DATE      IN DATE,
																p_AS_OF_DATE    IN DATE,
																p_TIME_ZONE     IN VARCHAR2,
																p_NOTUSED_ID1   IN NUMBER,
																p_NOTUSED_ID2   IN NUMBER,
																p_NOTUSED_ID3   IN NUMBER,
																p_REPORT_NAME   IN VARCHAR2,
																p_SC_ID         IN NUMBER,
																p_STATUS        OUT NUMBER,
																p_CURSOR        IN OUT REF_CURSOR) AS

BEGIN
	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
		SELECT *
			FROM MEX_MESSAGE
		--   WHERE (p_SC_ID = -1 OR SC_ID = p_SC_ID)
		 ORDER BY 1, 2, 3, 4, 5;
EXCEPTION
	WHEN OTHERS THEN
		RAISE;
END MARKET_MESSAGE_REPORT;
-------------------------------------------------------------------------------------
PROCEDURE GET_AGREEMENT_TYPE_LIST
	(
	p_TRANSACTION_TYPE IN VARCHAR2,
	p_IS_IMPORT_EXPORT IN NUMBER,
	p_SC_ID IN NUMBER,
	p_COMMODITY_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS
--RETURN CURSOR TO POPULATE AGREEMENT TYPE DROPDOWN IN TXN DIALOG
BEGIN
	--@TODO: Dispatch based on Market corresponding to SC_ID
	IF p_SC_ID = MM_MISO_UTIL.GET_MISO_SC_ID THEN
		MM_MISO.GET_AGREEMENT_TYPE_LIST(p_COMMODITY_ID, p_CURSOR);
	ELSE
		OPEN p_CURSOR FOR
			SELECT NULL FROM DUAL WHERE 1 = 0;
	END IF;
END GET_AGREEMENT_TYPE_LIST;
-------------------------------------------------------------------------------------
PROCEDURE PARSE_EXCHANGE_TYPE
	(
	p_EXCHANGE_TYPE IN VARCHAR2,
	p_MKT OUT VARCHAR2,
	p_MKT_APP OUT VARCHAR2,
	p_MKT_EXCHANGE_TYPE OUT VARCHAR2
	) AS
v_STRING_TABLE   GA.STRING_TABLE;
BEGIN
    UT.TOKENS_FROM_STRING(p_EXCHANGE_TYPE, ':', v_STRING_TABLE);

    CASE v_STRING_TABLE.COUNT
        WHEN 3 THEN
            p_MKT := v_STRING_TABLE(1);
            p_MKT_APP := v_STRING_TABLE(2);
            p_MKT_EXCHANGE_TYPE := v_STRING_TABLE(3);
        WHEN 2 THEN
            p_MKT := v_STRING_TABLE(1);
            p_MKT_APP := '';
            p_MKT_EXCHANGE_TYPE := v_STRING_TABLE(2);
        WHEN 1 THEN
            p_MKT := '';
            p_MKT_APP := '';
            p_MKT_EXCHANGE_TYPE := v_STRING_TABLE(1);
        ELSE
			IF v_STRING_TABLE.COUNT > 3 THEN
	            p_MKT := v_STRING_TABLE(1);
	            p_MKT_APP := v_STRING_TABLE(2);
	            p_MKT_EXCHANGE_TYPE := v_STRING_TABLE(3);
				DECLARE
				v_IDX BINARY_INTEGER;
				BEGIN
					v_IDX := 4;
					WHILE v_STRING_TABLE.EXISTS(v_IDX) LOOP
						p_MKT_EXCHANGE_TYPE := p_MKT_EXCHANGE_TYPE||':'||v_STRING_TABLE(v_IDX);
						v_IDX := v_STRING_TABLE.NEXT(v_IDX);
					END LOOP;
				END;
			ELSE
                p_MKT := '';
                p_MKT_APP := '';
                p_MKT_EXCHANGE_TYPE := p_EXCHANGE_TYPE;
			END IF;
    END CASE;
END PARSE_EXCHANGE_TYPE;
-------------------------------------------------------------------------------------
PROCEDURE SYSTEM_ACTION_USES_HOURS
	(
    p_ACTION IN VARCHAR2,
	p_SHOW_HOURS OUT NUMBER
    ) AS
v_MKT VARCHAR2(32);
v_MKT_APP VARCHAR2(32);
v_ACTION VARCHAR2(256);
BEGIN
	PARSE_EXCHANGE_TYPE(p_ACTION,v_MKT,v_MKT_APP,v_ACTION);

    CASE UPPER(v_MKT)
        WHEN 'PJM' THEN
			MM_PJM.SYSTEM_ACTION_USES_HOURS(v_MKT_APP,v_ACTION,p_SHOW_HOURS);
        WHEN 'MISO' THEN
			MM_MISO.SYSTEM_ACTION_USES_HOURS(v_ACTION,p_SHOW_HOURS);
--        WHEN 'NY' THEN
--			MM_NYISO.SYSTEM_ACTION_USES_HOURS(v_MKT_APP,v_ACTION,p_SHOW_HOURS);
--		WHEN 'NE' THEN
--			MM_ISONE.SYSTEM_ACTION_USES_HOURS(v_MKT_APP,v_ACTION,p_SHOW_HOURS);
		ELSE
			p_SHOW_HOURS := 0; -- default
	END CASE;
END SYSTEM_ACTION_USES_HOURS;
-------------------------------------------------------------------------------------
FUNCTION IS_SUPPORTED_EXCHANGE_TYPE
	(
	P_MKT IN VARCHAR2,
	p_MKT_APP IN VARCHAR2,
	p_EXCHANGE_TYPE IN VARCHAR2
	) RETURN BOOLEAN IS
BEGIN
	RETURN TRUE;
END IS_SUPPORTED_EXCHANGE_TYPE;

----------------------------------------------------------------------------------------------------
FUNCTION GET_BID_OFFER_INTERVAL
	(
	p_TRANSACTION IN INTERCHANGE_TRANSACTION%ROWTYPE
	) RETURN VARCHAR2 IS
v_MKT VARCHAR2(16);
BEGIN
	SELECT SUBSTR(MAX(SC_ALIAS),1,16)
	INTO v_MKT
	FROM SCHEDULE_COORDINATOR
	WHERE SC_ID = p_TRANSACTION.SC_ID;

    CASE UPPER(v_MKT)
        WHEN 'PJM' THEN
			RETURN MM_PJM.GET_BID_OFFER_INTERVAL(p_TRANSACTION);
        WHEN 'MISO' THEN
			RETURN MM_MISO.GET_BID_OFFER_INTERVAL(p_TRANSACTION);
--      WHEN 'NYISO' THEN
--			RETURN MM_NYISO.GET_BID_OFFER_INTERVAL(p_TRANSACTION);
--		WHEN 'OASIS' THEN
--			RETURN MM_OASIS.GET_BID_OFFER_INTERVAL(p_TRANSACTION);
        WHEN 'SEM' THEN
           RETURN MM_SEM.GET_BID_OFFER_INTERVAL(p_TRANSACTION);
		ELSE
			RETURN
				CASE
				WHEN NVL(p_TRANSACTION.EXTERNAL_INTERVAL, CONSTANTS.UNDEFINED_ATTRIBUTE) = CONSTANTS.UNDEFINED_ATTRIBUTE THEN
					p_TRANSACTION.TRANSACTION_INTERVAL
				ELSE
					p_TRANSACTION.EXTERNAL_INTERVAL
				END;

			
	END CASE;
END GET_BID_OFFER_INTERVAL;
----------------------------------------------------------------------------------------------------
FUNCTION GET_BID_OFFER_INTERVAL
	(
	p_TRANSACTION_ID IN  NUMBER
	) RETURN VARCHAR2 IS
	v_TRANSACTION INTERCHANGE_TRANSACTION%ROWTYPE;
BEGIN
	SELECT * INTO v_TRANSACTION FROM INTERCHANGE_TRANSACTION WHERE TRANSACTION_ID = p_TRANSACTION_ID;
	RETURN GET_BID_OFFER_INTERVAL(v_TRANSACTION);
END GET_BID_OFFER_INTERVAL;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_TRAITS_FOR_TRANSACTION
	(
	p_TRANSACTION_ID IN NUMBER,
	p_REPORT_TYPE IN VARCHAR2,
	p_TRAIT_GROUP_FILTER IN VARCHAR2,
	p_INTERVAL IN VARCHAR2,
	p_WORK_ID OUT NUMBER
	) AS
	v_TRANSACTION INTERCHANGE_TRANSACTION%ROWTYPE;
	v_MKT VARCHAR2(16);
BEGIN
	--Return the list of Trait Groups that should be associated with this transaction.
	--By default, match Trait Category and SC_ID.  This can be overridden by
	--market-specific code in the non-stub version of this package.

	SELECT SUBSTR(MAX(S.SC_ALIAS),1,16)
	INTO v_MKT
	FROM SCHEDULE_COORDINATOR S, INTERCHANGE_TRANSACTION T
	WHERE T.TRANSACTION_ID = p_TRANSACTION_ID
	AND  T.SC_ID = S.SC_ID;

    CASE UPPER(v_MKT)
        /*WHEN 'NYISO' THEN
			MM_NYISO.GET_TRAITS_FOR_TRANSACTION(p_TRANSACTION_ID, p_REPORT_TYPE, p_TRAIT_GROUP_FILTER, p_INTERVAL, p_WORK_ID);*/
        WHEN 'SEM' THEN
			MM_SEM.GET_TRAITS_FOR_TRANSACTION(p_TRANSACTION_ID, p_REPORT_TYPE, p_TRAIT_GROUP_FILTER, p_INTERVAL, p_WORK_ID);
		ELSE -- all other ISOs

			UT.GET_RTO_WORK_ID(p_WORK_ID);

    		SELECT * INTO v_TRANSACTION
			FROM INTERCHANGE_TRANSACTION
			WHERE TRANSACTION_ID = p_TRANSACTION_ID;

			INSERT INTO RTO_WORK(WORK_ID, WORK_SEQ, WORK_XID)
			SELECT p_WORK_ID, B.TRAIT_INDEX, A.TRAIT_GROUP_ID
			FROM TRANSACTION_TRAIT_GROUP A, TRANSACTION_TRAIT B
			WHERE (A.SC_ID = -1 OR A.SC_ID = v_TRANSACTION.SC_ID)
				AND v_TRANSACTION.TRAIT_CATEGORY LIKE A.TRAIT_CATEGORY
				AND (A.TRAIT_GROUP_TYPE = '%' OR A.TRAIT_GROUP_TYPE LIKE p_TRAIT_GROUP_FILTER)
				AND B.TRAIT_GROUP_ID = A.TRAIT_GROUP_ID;
	END CASE;

END GET_TRAITS_FOR_TRANSACTION;
----------------------------------------------------------------------------------------------------
FUNCTION GET_DEFAULT_NUMBER_OF_SETS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_TRAIT_GROUP_ID IN NUMBER
	) RETURN NUMBER IS
	v_TRANSACTION INTERCHANGE_TRANSACTION%ROWTYPE;
BEGIN
	--Return the max number of sets -- to be used by the fill dialog.
	IF p_TRAIT_GROUP_ID = TG.g_TG_OFFER_CURVE THEN
		RETURN 20;
	ELSIF p_TRAIT_GROUP_ID = TG.g_TG_RAMP_CURVE THEN
		RETURN 10;
	ELSE
		RETURN 3;
	END IF;

END GET_DEFAULT_NUMBER_OF_SETS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_DEFAULT_SYSTEM_ACTION
	(
	p_CONTEXT_ID IN NUMBER,
    p_CONTEXT_TYPE IN VARCHAR,
	p_ACTION_TYPE IN VARCHAR,
    p_MODULE_NAME IN VARCHAR,
	p_ACTION_ID OUT NUMBER,
    p_STATUS OUT NUMBER
	) AS
	v_MKT VARCHAR2(16);
BEGIN

	SELECT SUBSTR(MAX(SC_ALIAS),1,16)
	INTO v_MKT
	FROM SCHEDULE_COORDINATOR A, INTERCHANGE_TRANSACTION B
	WHERE B.TRANSACTION_ID = p_CONTEXT_ID
		AND A.SC_ID = B.SC_ID;

	--DELEGATE TO MARKETS BASED ON SC.  CURRENTLY THIS IS ONLY IMPLEMENTED FOR PJM.
	CASE UPPER(v_MKT)
		WHEN 'PJM' THEN
			MM_PJM.GET_DEFAULT_SYSTEM_ACTION(p_CONTEXT_ID, p_CONTEXT_TYPE, p_ACTION_TYPE, p_MODULE_NAME, p_ACTION_ID, p_STATUS);
		ELSE
			NULL;
	END CASE;

END GET_DEFAULT_SYSTEM_ACTION;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_AFFECTED_DATE_RANGE
	(
	p_TRANSACTION_ID IN NUMBER,
	p_CUT_DATE IN OUT DATE,
	p_IS_SUB_DAILY IN BOOLEAN,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE
	) AS
v_LOCAL_DATE DATE := FROM_CUT(p_CUT_DATE, LOCAL_TIME_ZONE);
v_MKT VARCHAR2(16);
BEGIN
	SELECT SUBSTR(MAX(S.SC_ALIAS),1,16)
	INTO v_MKT
	FROM SCHEDULE_COORDINATOR S, INTERCHANGE_TRANSACTION T
	WHERE T.TRANSACTION_ID = p_TRANSACTION_ID
	AND  T.SC_ID = S.SC_ID;

    CASE UPPER(v_MKT)
        WHEN 'SEM' THEN
			MM_SEM.GET_AFFECTED_DATE_RANGE(p_TRANSACTION_ID, p_CUT_DATE, p_IS_SUB_DAILY, p_BEGIN_DATE, p_END_DATE);
		ELSE
            p_BEGIN_DATE := p_CUT_DATE;
            p_END_DATE := p_CUT_DATE;
	END CASE;
END GET_AFFECTED_DATE_RANGE;
----------------------------------------------------------------------------------------------------
FUNCTION TRAIT_AFFECTS_STATUS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_TRAIT_GROUP_ID IN NUMBER,
	p_TRAIT_INDEX IN NUMBER
	) RETURN BOOLEAN IS
v_MKT VARCHAR2(16);
BEGIN
	SELECT SUBSTR(MAX(S.SC_ALIAS),1,16)
	INTO v_MKT
	FROM SCHEDULE_COORDINATOR S, INTERCHANGE_TRANSACTION T
	WHERE T.TRANSACTION_ID = p_TRANSACTION_ID
	AND  T.SC_ID = S.SC_ID;

    CASE UPPER(v_MKT)
        WHEN 'SEM' THEN
			RETURN MM_SEM.TRAIT_AFFECTS_STATUS(p_TRANSACTION_ID, p_TRAIT_GROUP_ID, p_TRAIT_INDEX);
		ELSE
			-- default is yes
			RETURN TRUE;
		END CASE;

END TRAIT_AFFECTS_STATUS;
----------------------------------------------------------------------------------------------------
FUNCTION NO_OP_UPDATE_AFFECTS_STATUS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_TRAIT_GROUP_ID IN NUMBER,
	p_TRAIT_INDEX IN NUMBER
	) RETURN BOOLEAN IS
BEGIN
	-- TODO delegate to other market packages? or leave all markets on this default logic
	-- that simply allows for a single flag in system dictionary
	RETURN g_NO_OP_AFFECTS_STATUS;
END NO_OP_UPDATE_AFFECTS_STATUS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_MARKET_MESSAGES
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_MARKET_OPERATOR IN VARCHAR2,
	p_MESSAGE_SOURCE IN VARCHAR2,
	p_MESSAGE_DESTINATION IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT REF_CURSOR
	) AS
v_MKT_OPERATORS STRING_COLLECTION;
v_MSG_SOURCES STRING_COLLECTION;
v_MSG_DESTS STRING_COLLECTION;
BEGIN
	p_STATUS := GA.SUCCESS;

	IF p_MARKET_OPERATOR IS NOT NULL THEN
		UT.STRING_COLLECTION_FROM_STRING(p_MARKET_OPERATOR, ',', v_MKT_OPERATORS);
		IF UT.STRING_COLLECTION_CONTAINS(v_MKT_OPERATORS, g_ALL_STRING) THEN
			v_MKT_OPERATORS := STRING_COLLECTION('%');
		END IF;
	ELSE
		v_MKT_OPERATORS := STRING_COLLECTION('%');
	END IF;

	IF p_MESSAGE_SOURCE IS NOT NULL THEN
		UT.STRING_COLLECTION_FROM_STRING(p_MESSAGE_SOURCE, ',', v_MSG_SOURCES);
		IF UT.STRING_COLLECTION_CONTAINS(v_MSG_SOURCES, g_ALL_STRING) THEN
			v_MSG_SOURCES := STRING_COLLECTION('%');
		END IF;
	ELSE
		v_MSG_SOURCES := STRING_COLLECTION('%');
	END IF;

	IF p_MESSAGE_DESTINATION IS NOT NULL THEN
		UT.STRING_COLLECTION_FROM_STRING(p_MESSAGE_DESTINATION, ',', v_MSG_DESTS);
		IF UT.STRING_COLLECTION_CONTAINS(v_MSG_DESTS, g_ALL_STRING) THEN
			v_MSG_DESTS := STRING_COLLECTION('%');
		END IF;
	ELSE
		v_MSG_DESTS := STRING_COLLECTION('%');
	END IF;

	OPEN p_CURSOR FOR
		SELECT MARKET_OPERATOR,
				MESSAGE_SOURCE,
				MESSAGE_DESTINATION,
				MESSAGE_REALM,
				MESSAGE_PRIORITY,
				EFFECTIVE_DATE,
				TERMINATION_DATE,
				MESSAGE_DATE,
				MESSAGE_TEXT
		FROM MEX_MESSAGE A
		WHERE NVL(A.EFFECTIVE_DATE,LOW_DATE) <= p_END_DATE
			AND NVL(A.TERMINATION_DATE,HIGH_DATE) >= p_BEGIN_DATE
			AND EXISTS (SELECT 1 FROM TABLE(CAST(v_MKT_OPERATORS AS STRING_COLLECTION)) X WHERE NVL(A.MARKET_OPERATOR,'?') LIKE X.COLUMN_VALUE)
			AND EXISTS (SELECT 1 FROM TABLE(CAST(v_MSG_SOURCES AS STRING_COLLECTION)) X WHERE NVL(A.MESSAGE_SOURCE,'?') LIKE X.COLUMN_VALUE)
			AND EXISTS (SELECT 1 FROM TABLE(CAST(v_MSG_DESTS AS STRING_COLLECTION)) X WHERE NVL(A.MESSAGE_DESTINATION,'?') LIKE X.COLUMN_VALUE)
		ORDER BY 1, 2, 3, 4, 5, 6, 7, 8, 9;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;
END GET_MARKET_MESSAGES;
----------------------------------------------------------------------------------------------------
PROCEDURE MKT_MSG_OPERATORS
	(
	p_STATUS OUT NUMBER,
	p_CURSOR OUT REF_CURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
      	SELECT g_ALL_STRING as MARKET_OPERATOR
    	FROM DUAL
    	UNION ALL
    	SELECT MARKET_OPERATOR
    	FROM (SELECT DISTINCT MARKET_OPERATOR
    		    FROM MEX_MESSAGE
    			WHERE TRIM(MARKET_OPERATOR) IS NOT NULL
    			ORDER BY 1);

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;
END MKT_MSG_OPERATORS;
----------------------------------------------------------------------------------------------------
PROCEDURE MKT_MSG_SOURCES
	(
	p_MARKET_OPERATOR IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT REF_CURSOR
	) AS
v_MKT_OPERATORS STRING_COLLECTION;
BEGIN
	p_STATUS := GA.SUCCESS;

	IF p_MARKET_OPERATOR IS NOT NULL THEN
		UT.STRING_COLLECTION_FROM_STRING(p_MARKET_OPERATOR, ',', v_MKT_OPERATORS);
		IF UT.STRING_COLLECTION_CONTAINS(v_MKT_OPERATORS, g_ALL_STRING) THEN
			v_MKT_OPERATORS := STRING_COLLECTION('%');
		END IF;
	ELSE
		v_MKT_OPERATORS := STRING_COLLECTION('%');
	END IF;

	OPEN p_CURSOR FOR
      	SELECT g_ALL_STRING as MESSAGE_SOURCE
    	FROM DUAL
    	UNION ALL
    	SELECT MESSAGE_SOURCE
    	FROM (SELECT DISTINCT MESSAGE_SOURCE
    		    FROM MEX_MESSAGE A
    			WHERE TRIM(MESSAGE_SOURCE) IS NOT NULL
					AND EXISTS (SELECT 1 FROM TABLE(CAST(v_MKT_OPERATORS AS STRING_COLLECTION)) X WHERE NVL(A.MARKET_OPERATOR,'?') LIKE X.COLUMN_VALUE)
    			ORDER BY 1);

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;
END MKT_MSG_SOURCES;
----------------------------------------------------------------------------------------------------
PROCEDURE MKT_MSG_DESTINATIONS
	(
	p_MARKET_OPERATOR IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT REF_CURSOR
	) AS
v_MKT_OPERATORS STRING_COLLECTION;
BEGIN
	p_STATUS := GA.SUCCESS;

	IF p_MARKET_OPERATOR IS NOT NULL THEN
		UT.STRING_COLLECTION_FROM_STRING(p_MARKET_OPERATOR, ',', v_MKT_OPERATORS);
		IF UT.STRING_COLLECTION_CONTAINS(v_MKT_OPERATORS, g_ALL_STRING) THEN
			v_MKT_OPERATORS := STRING_COLLECTION('%');
		END IF;
	ELSE
		v_MKT_OPERATORS := STRING_COLLECTION('%');
	END IF;

	OPEN p_CURSOR FOR
      	SELECT g_ALL_STRING as MESSAGE_DESTINATION
    	FROM DUAL
    	UNION ALL
    	SELECT MESSAGE_DESTINATION
    	FROM (SELECT DISTINCT MESSAGE_DESTINATION
    		    FROM MEX_MESSAGE A
    			WHERE TRIM(MESSAGE_DESTINATION) IS NOT NULL
					AND EXISTS (SELECT 1 FROM TABLE(CAST(v_MKT_OPERATORS AS STRING_COLLECTION)) X WHERE NVL(A.MARKET_OPERATOR,'?') LIKE X.COLUMN_VALUE)
    			ORDER BY 1);

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;
END MKT_MSG_DESTINATIONS;
----------------------------------------------------------------------------------------------------
BEGIN
	g_NO_OP_AFFECTS_STATUS := UPPER(SUBSTR(NVL(GET_DICTIONARY_VALUE('Change status on NoOp Update',0,'MarketExchange'),'N'),1,1)) IN ('1','T','Y');
END MM;
/