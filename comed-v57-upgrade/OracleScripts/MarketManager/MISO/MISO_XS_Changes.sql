PROCEDURE DATA_EXCHANGE_ENTITY_LIST
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_ENTITY_LABEL OUT VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT REF_CURSOR
	) AS

--THIS CURSOR SHOULD RETURN DATA IN EITHER NAME, ID FORMAT OR JUST NAME FORMAT. --IF NAME AND ID ARE USED, NAME MUST COME BEFORE ID. --FOR EXAMPLE, THE FOLLOWING TWO SELECT STATEMENTS WOULD BE VALID. 
--SELECT PSE_NAME, PSE_ID FROM PURCHASING_SELLING_ENTITY; --SELECT PSE_NAME FROM PURCHASING_SELLING_ENTITY; --THE FIRST ONE WILL RETURN A LIST OF IDS TO DATA_EXCHANGE, AND THE SECOND WILL RETURN A LIST OF NAMES.

--YOU MUST GIVE A VALUE FOR THE p_ENTITY_LABEL PARAMETER.  IT IS WHAT --IS DISPLAYED ON TOP OF THE LIST ON THE DIALOG. BEGIN
v_EXCHANGE_TYPE VARCHAR2(64) := REPLACE(p_EXCHANGE_TYPE, 'MISO: TEST', 'MISO:');
BEGIN
    p_STATUS := Ga.SUCCESS;

	 IF v_EXCHANGE_TYPE IN ('MISO: DefaultLimits','MISO: DefaultStartupCosts','MISO: DefaultStatus','MISO: RampRate') THEN
	 	 p_ENTITY_LABEL := 'Resources';
		 OPEN p_CURSOR FOR
		 		SELECT RESOURCE_NAME, RESOURCE_ID
				FROM SUPPLY_RESOURCE
				WHERE RESOURCE_ID > 0
				ORDER BY 1;
	 ELSIF v_EXCHANGE_TYPE IN ('MISO: ConfirmFinSchedule', 'MISO: RejectFinSchedule', 'MISO: FTRBidProfile','MISO: FinContract', 'MISO: ConfirmFinContract', 'MISO: RejectFinContract') THEN
	 	 p_ENTITY_LABEL := 'Transactions';
		 OPEN p_CURSOR FOR
		 		SELECT TRANSACTION_NAME, TRANSACTION_ID
				FROM INTERCHANGE_TRANSACTION
				WHERE TRANSACTION_ID > 0
				ORDER BY 1;
	 ELSIF v_EXCHANGE_TYPE IN ('MISO: CreatePortfolio', 'MISO: UpdatePortfolio', 'MISO: QueryIntegratedLMPByPortfolio') THEN
	 	 p_ENTITY_LABEL := 'Portfolios';
		 OPEN p_CURSOR FOR
		 		SELECT PORTFOLIO_NAME, PORTFOLIO_ID
				FROM PORTFOLIO
				WHERE PORTFOLIO_ID > 0
				ORDER BY 1;
	 ELSIF v_EXCHANGE_TYPE IN ('MISO: QueryIntegratedLMPByLocation') THEN
	 	 p_ENTITY_LABEL := 'Service Points';
		 OPEN p_CURSOR FOR
		 		SELECT SERVICE_POINT_NAME, SERVICE_POINT_ID
				FROM SERVICE_POINT
				WHERE SERVICE_POINT_ID > 0
				ORDER BY 1;
	 ELSIF v_EXCHANGE_TYPE IN ('MISO: WeatherForecast') THEN
	 	 p_ENTITY_LABEL := 'Weather Stations';
		 OPEN p_CURSOR FOR
		 		SELECT STATION_NAME, STATION_ID
				FROM WEATHER_STATION
				WHERE STATION_ID > 0
				ORDER BY 1;
	 ELSE
	 	  OPEN p_CURSOR FOR
		  SELECT NULL FROM DUAL;
	 END IF;

END DATA_EXCHANGE_ENTITY_LIST;
----------------------------------------------------------------------------------------------------
PROCEDURE DATA_EXCHANGE
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN CHAR,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	) AS

-- p_ENTITY_LIST IS A LIST OF IDS OR NAMES DELIMITED BY p_ENTITY_LIST_DELIMITER.
-- AN ENTITY LIST CAN BE SHOWN ON THE DATA EXCHANGE DIALOG BY IMPLEMENTING THE
-- DATA_EXCHANGE_ENTITY_LIST PROCEDURE IN THIS PACKAGE FOR THE GIVEN EXCHANGE TYPE.
-- IF THE CURSOR FROM DATA_EXCHANGE_ENTITY_LIST IS NAME, ID, THEN THE SELECTED IDS WILL BE RETURNED.
-- IF THE CURSOR FROM DATA_EXCHANGE_ENTITY_LIST IS JUST NAME, THEN THE SELECTED NAMES WILL BE RETURNED. BEGIN
BEGIN
    p_STATUS := GA.SUCCESS;
	 
	 MISO_EXCHANGE.DATA_EXCHANGE_SUBMIT(p_BEGIN_DATE, p_END_DATE, p_EXCHANGE_TYPE,p_ENTITY_LIST,p_ENTITY_LIST_DELIMITER,p_STATUS,p_MESSAGE);

END DATA_EXCHANGE;
----------------------------------------------------------------------------------------------------
PROCEDURE DATA_IMPORT
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_RECORD_DELIMITER IN CHAR,
	p_RECORDS IN VARCHAR,
	p_FILE_PATH IN VARCHAR,
	p_LAST_TIME IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	) AS

BEGIN

    p_STATUS := GA.SUCCESS;
	
	IF LTRIM(RTRIM(UPPER(p_EXCHANGE_TYPE))) = 'CINERGY METER IMPORT' THEN
		v_FILENAME := SUBSTR(p_FILE_PATH,INSTR(p_FILE_PATH,'\',-1,1)+1);
		
		UT.TOKENS_FROM_STRING(p_RECORDS, p_RECORD_DELIMITER, v_RECORDS);
		FOR v_INDEX IN v_RECORDS.FIRST .. v_RECORDS.LAST LOOP
			CIN_INTERFACES.IMPORT_FILE(v_FILENAME,v_INDEX, ',' ,v_RECORDS(v_INDEX),p_MESSAGE);
			IF p_MESSAGE IS NOT NULL THEN
				p_STATUS := -1;
				RETURN;
			END IF;
		END LOOP;
	ELSIF SUBSTR(p_EXCHANGE_TYPE, 1, 5) = 'MISO:' THEN
		MISO_EXCHANGE.DATA_IMPORT(p_REQUEST_TYPE, p_BEGIN_DATE, p_END_DATE, p_AS_OF_DATE, p_EXCHANGE_TYPE, p_MODULE_NAME,
			p_RECORD_DELIMITER, p_RECORDS, p_FILE_PATH, p_LAST_TIME, p_STATUS, p_MESSAGE);
	END IF;

END DATA_IMPORT;
----------------------------------------------------------------------------------------------------

PROCEDURE BID_OFFER_SUBMIT
	(
	p_BID_OFFER_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_ACTION IN VARCHAR,
	p_IS_TEST_MODE IN NUMBER,
	p_TRANSACTION_IDS IN VARCHAR,
	p_SUBMIT_HOURS IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	) AS

BEGIN

    p_STATUS := Ga.SUCCESS;
	IF SUBSTR(p_ACTION,1,5) = 'MISO:' THEN
		MISO_EXCHANGE.BID_OFFER_SUBMIT(p_BID_OFFER_ID, p_BEGIN_DATE, p_END_DATE, p_ACTION, p_IS_TEST_MODE,
			p_TRANSACTION_IDS, p_SUBMIT_HOURS, LOCAL_TIME_ZONE, p_STATUS, p_MESSAGE);
	END IF;			

END BID_OFFER_SUBMIT;
----------------------------------------------------------------------------------------------------


