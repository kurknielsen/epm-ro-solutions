CREATE OR REPLACE PACKAGE BODY MM_MISO_SHADOW_BILL IS
---------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.1 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
FUNCTION GET_LP_LOSS_DIST_FCT
	(
	p_CHARGE_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_POD_NAME IN VARCHAR2
	) RETURN NUMBER IS
v_POD_ID NUMBER(9);
v_POOL_ID NUMBER(9);
v_RET NUMBER;
BEGIN
	SELECT SERVICE_POINT_ID INTO v_POD_ID
	FROM SERVICE_POINT WHERE SERVICE_POINT_NAME = p_POD_NAME;

	SELECT POOL_ID INTO v_POOL_ID
	FROM INTERCHANGE_TRANSACTION
	WHERE POD_ID = v_POD_ID
		AND TRANSACTION_TYPE = 'Asset Loss Dist'
		AND CONTRACT_ID = p_CONTRACT_ID
		AND ROWNUM=1;

	SELECT AVG(AMOUNT)
	INTO v_RET
	FROM INTERCHANGE_TRANSACTION A,
		IT_SCHEDULE B
	WHERE A.POOL_ID = v_POOL_ID
		AND A.TRANSACTION_TYPE = 'LP Loss Dist'
		AND B.TRANSACTION_ID = A.TRANSACTION_ID
		AND B.SCHEDULE_STATE = 1
		AND B.SCHEDULE_TYPE = p_STATEMENT_TYPE
		AND B.SCHEDULE_DATE = p_CHARGE_DATE
		AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_SCHEDULE
							WHERE TRANSACTION_ID = B.TRANSACTION_ID
								AND SCHEDULE_STATE = B.SCHEDULE_STATE
								AND SCHEDULE_TYPE = B.SCHEDULE_TYPE
								AND SCHEDULE_DATE = B.SCHEDULE_DATE
								AND AS_OF_DATE <= SYSDATE);

	RETURN NVL(v_RET,0);

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_LP_LOSS_DIST_FCT;
---------------------------------------------------------------------------------------------------
FUNCTION GET_UD_TRAIT_AMT
  (
  p_CHARGE_DATE IN DATE,
  p_STATEMENT_TYPE IN NUMBER,
  p_CONTRACT_ID IN NUMBER,
  p_POD_NAME IN VARCHAR2,
  p_UD_TRAIT_NAME IN VARCHAR2
  ) RETURN NUMBER IS
v_POD_ID NUMBER(9);
v_RET NUMBER;
BEGIN
	SELECT SERVICE_POINT_ID INTO v_POD_ID
	FROM SERVICE_POINT WHERE SERVICE_POINT_NAME = p_POD_NAME;

	SELECT SUM(AMOUNT)
	INTO v_RET
	FROM INTERCHANGE_TRANSACTION A,
		IT_STATUS B,
		--IT_COMMODITY C,
		IT_SCHEDULE D
	WHERE A.CONTRACT_ID = p_CONTRACT_ID
    AND A.Transaction_Identifier = 'MISO:' || p_UD_TRAIT_NAME
    AND A.POD_ID = v_POD_ID
		AND B.TRANSACTION_ID = A.TRANSACTION_ID
		AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_STATUS
							WHERE TRANSACTION_ID = B.TRANSACTION_ID)
		AND B.TRANSACTION_IS_ACTIVE = 1
		--AND C.COMMODITY_ID = A.COMMODITY_ID
		--AND C.MARKET_TYPE = 'RealTime'
		--AND C.COMMODITY_TYPE = 'Energy'
		AND D.TRANSACTION_ID = A.TRANSACTION_ID
		AND D.SCHEDULE_STATE = 1
		AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
		AND D.SCHEDULE_DATE = p_CHARGE_DATE
		AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_SCHEDULE
							WHERE TRANSACTION_ID = D.TRANSACTION_ID
								AND SCHEDULE_STATE = D.SCHEDULE_STATE
								AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
								AND SCHEDULE_DATE = D.SCHEDULE_DATE
								AND AS_OF_DATE <= SYSDATE);
	RETURN NVL(v_RET,0);

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_UD_TRAIT_AMT;
---------------------------------------------------------------------------------------------------
FUNCTION GET_RT_LMP
	(
	p_CHARGE_DATE IN DATE,
	p_POD_NAME IN VARCHAR2
	) RETURN NUMBER IS
v_POD_ID NUMBER(9);
v_RET NUMBER;
BEGIN
	SELECT SERVICE_POINT_ID INTO v_POD_ID
	FROM SERVICE_POINT WHERE SERVICE_POINT_NAME = p_POD_NAME;

	SELECT AVG(PRICE)
	INTO v_RET
	FROM MARKET_PRICE A,
		MARKET_PRICE_VALUE B
	WHERE A.MARKET_PRICE_TYPE = 'Locational Marginal Price'
		AND A.POD_ID = v_POD_ID
		AND B.MARKET_PRICE_ID = A.MARKET_PRICE_ID
		AND B.PRICE_DATE = p_CHARGE_DATE
        AND B.PRICE_CODE =
        	(SELECT DECODE(MAX(DECODE(PRICE_CODE,'F',1,'P',2,'A',3)),1,'F',2,'P',3,'A')
        	FROM MARKET_PRICE_VALUE
            WHERE MARKET_PRICE_ID = B.MARKET_PRICE_ID
            	AND PRICE_CODE IN ('F','P','A')
                AND PRICE_DATE = B.PRICE_DATE)
		AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM MARKET_PRICE_VALUE
							WHERE MARKET_PRICE_ID = B.MARKET_PRICE_ID
								AND PRICE_CODE = B.PRICE_CODE
								AND PRICE_DATE = B.PRICE_DATE
								AND AS_OF_DATE <= SYSDATE);

	RETURN NVL(v_RET,0);

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_RT_LMP;
---------------------------------------------------------------------------------------------------
FUNCTION GET_RT_VOL
	(
	p_CHARGE_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_POD_NAME IN VARCHAR2
	) RETURN NUMBER IS
v_POD_ID NUMBER(9);
v_RET NUMBER;
BEGIN
	SELECT SERVICE_POINT_ID INTO v_POD_ID
	FROM SERVICE_POINT WHERE SERVICE_POINT_NAME = p_POD_NAME;

	SELECT SUM(AMOUNT)
	INTO v_RET
	FROM INTERCHANGE_TRANSACTION A,
		IT_STATUS B,
		IT_COMMODITY C,
		IT_SCHEDULE D
	WHERE A.TRANSACTION_TYPE = 'Generation'
		AND A.CONTRACT_ID = p_CONTRACT_ID
    AND A.POD_ID = v_POD_ID
		AND B.TRANSACTION_ID = A.TRANSACTION_ID
		AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_STATUS
							WHERE TRANSACTION_ID = B.TRANSACTION_ID)
		AND B.TRANSACTION_IS_ACTIVE = 1
		AND C.COMMODITY_ID = A.COMMODITY_ID
		AND C.MARKET_TYPE = 'RealTime'
		AND C.COMMODITY_TYPE = 'Energy'
		AND D.TRANSACTION_ID = A.TRANSACTION_ID
		AND D.SCHEDULE_STATE = 1
		AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
		AND D.SCHEDULE_DATE = p_CHARGE_DATE
		AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_SCHEDULE
							WHERE TRANSACTION_ID = D.TRANSACTION_ID
								AND SCHEDULE_STATE = D.SCHEDULE_STATE
								AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
								AND SCHEDULE_DATE = D.SCHEDULE_DATE
								AND AS_OF_DATE <= SYSDATE);
	RETURN NVL(v_RET,0);

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_RT_VOL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_GEN_TRAIT
	(
	p_CHARGE_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_POD_NAME IN VARCHAR2,
	p_TRAIT_NAME IN VARCHAR2
	) RETURN NUMBER IS
v_POD_ID NUMBER(9);
v_RET NUMBER;
--USED TO RETURN REG UP AND REG DOWN FOR UD CHARGE.
BEGIN
	SELECT SERVICE_POINT_ID INTO v_POD_ID
	FROM SERVICE_POINT WHERE SERVICE_POINT_NAME = p_POD_NAME;

	SELECT SUM(TO_NUMBER(TRAIT_VAL))
	INTO v_RET
	FROM INTERCHANGE_TRANSACTION A,
		IT_STATUS B,
		TRANSACTION_TRAIT_GROUP C,
		IT_TRAIT_SCHEDULE D
	WHERE A.TRANSACTION_TYPE = 'Generation'
		AND A.CONTRACT_ID = p_CONTRACT_ID
		AND A.POD_ID = v_POD_ID
		AND B.TRANSACTION_ID = A.TRANSACTION_ID
		AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_STATUS
							WHERE TRANSACTION_ID = B.TRANSACTION_ID)
		AND B.TRANSACTION_IS_ACTIVE = 1
		AND C.TRAIT_GROUP_NAME = p_TRAIT_NAME
		AND D.TRANSACTION_ID = A.TRANSACTION_ID
		AND D.SCHEDULE_STATE = 1
		AND D.SCHEDULE_DATE = p_CHARGE_DATE
		AND D.TRAIT_GROUP_ID = C.TRAIT_GROUP_ID
		AND D.TRAIT_INDEX = 1
		AND D.SET_NUMBER = 1
		AND D.STATEMENT_TYPE_ID = 0;
	RETURN NVL(v_RET,0);

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_GEN_TRAIT;
---------------------------------------------------------------------------------------------------
FUNCTION GET_FTR_VOL
  (
  p_CHARGE_DATE IN DATE,
  p_STATEMENT_TYPE IN NUMBER,
  p_CONTRACT_ID IN NUMBER
  ) RETURN NUMBER IS

v_RET NUMBER;
BEGIN
	SELECT SUM(AMOUNT)
	INTO v_RET
	FROM INTERCHANGE_TRANSACTION A,
		IT_STATUS B,
		IT_COMMODITY C,
		IT_SCHEDULE D
	WHERE A.CONTRACT_ID = p_CONTRACT_ID
    AND A.AGREEMENT_TYPE IN ('FTR Obligation', 'FTR Option')
		AND B.TRANSACTION_ID = A.TRANSACTION_ID
		AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_STATUS
							WHERE TRANSACTION_ID = B.TRANSACTION_ID)
		AND B.TRANSACTION_IS_ACTIVE = 1
		AND C.COMMODITY_ID = A.COMMODITY_ID
		AND UPPER(C.COMMODITY_ALIAS) = 'TRANSMISSION'
		AND D.TRANSACTION_ID = A.TRANSACTION_ID
		AND D.SCHEDULE_STATE = 1
		AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
		AND D.SCHEDULE_DATE = p_CHARGE_DATE
		AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_SCHEDULE
							WHERE TRANSACTION_ID = D.TRANSACTION_ID
								AND SCHEDULE_STATE = D.SCHEDULE_STATE
								AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
								AND SCHEDULE_DATE = D.SCHEDULE_DATE
								AND AS_OF_DATE <= SYSDATE);
	RETURN NVL(v_RET,0);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 0;
END GET_FTR_VOL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_ADMIN_VOL(p_CHARGE_DATE    IN DATE,
											p_STATEMENT_TYPE IN NUMBER,
											p_CONTRACT_ID    IN NUMBER,
											p_TXN_TYPE       IN VARCHAR2,
                      p_SERVICE_POINT_NAME IN VARCHAR2,
											p_NODE_TYPE      IN VARCHAR2 := 'NonInterface',
                      p_COMMODITY IN VARCHAR2 := 'DA') RETURN NUMBER IS
	v_VOLUME       NUMBER;
	v_TXN_TYPE     VARCHAR2(32);
	v_COMMODITY_ID NUMBER(9);
	v_IS_IMP_EXP   NUMBER(1);
  v_IS_GFACO     NUMBER(1);
BEGIN
  IF p_COMMODITY = 'DA' THEN
  	ID.ID_FOR_COMMODITY('DayAhead Energy', FALSE, v_COMMODITY_ID);
  ELSE
  	ID.ID_FOR_COMMODITY('RealTime Energy', FALSE, v_COMMODITY_ID);
  END IF;

	v_IS_IMP_EXP := 0;
  v_IS_GFACO := 0;
	CASE p_TXN_TYPE
		WHEN 'Generation' THEN
			v_TXN_TYPE := 'Generation';
		WHEN 'Load' THEN
			v_TXN_TYPE := 'Load';
		WHEN 'Import' THEN
			v_TXN_TYPE   := 'Sale';
			v_IS_IMP_EXP := 1;
		WHEN 'Export' THEN
			v_TXN_TYPE   := 'Purchase';
			v_IS_IMP_EXP := 1;
		WHEN 'Sale' THEN
			v_TXN_TYPE := 'Sale';
		WHEN 'Purchase' THEN
			v_TXN_TYPE := 'Purchase';
		WHEN 'GFACO_Purchases' THEN
			v_TXN_TYPE := 'Purchase';
      v_IS_GFACO := 1;
		WHEN 'GFACO_Sales' THEN
			v_TXN_TYPE := 'Sale';
      v_IS_GFACO := 1;
		WHEN 'Virtual' THEN
			v_TXN_TYPE := 'Virtual';
			ID.ID_FOR_COMMODITY('Virtual Energy', FALSE, v_COMMODITY_ID);
	END CASE;

  IF v_TXN_TYPE IN ('Purchase', 'Sale') THEN
  	SELECT SUM(AMOUNT)
  		INTO v_VOLUME
  		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_SCHEDULE D
  	 WHERE (A.TRANSACTION_TYPE = v_TXN_TYPE OR v_TXN_TYPE = 'Virtual')
  		 AND A.IS_IMPORT_EXPORT = v_IS_IMP_EXP
      AND ((v_IS_GFACO = 1 AND A.AGREEMENT_TYPE = 'GrandFathered')
           OR (v_IS_GFACO = 0 AND A.AGREEMENT_TYPE <> 'GrandFathered'))
       AND CASE WHEN v_TXN_TYPE = 'Sale' THEN SOURCE_ID
                WHEN v_TXN_TYPE = 'Purchase' THEN SINK_ID
                ELSE POD_ID END
  		 IN (SELECT S.SERVICE_POINT_ID
  												FROM SERVICE_POINT S, MISO_CPNODES M
  											 WHERE S.EXTERNAL_IDENTIFIER = M.NODE_NAME
  												 AND (( UPPER(p_NODE_TYPE) = 'INTERFACE' AND UPPER(M.NODE_TYPE) = 'INTERFACE')
                           OR (UPPER(p_NODE_TYPE) <> 'INTERFACE' AND UPPER(M.NODE_TYPE)<> 'INTERFACE')))
       AND CASE WHEN v_TXN_TYPE = 'Sale' THEN SOURCE_ID
                WHEN v_TXN_TYPE = 'Purchase' THEN SINK_ID
                ELSE POD_ID END
  		 IN (SELECT S.SERVICE_POINT_ID FROM SERVICE_POINT S WHERE S.SERVICE_POINT_NAME = p_SERVICE_POINT_NAME)
       --AND A.POD_ID = (SELECT S.SERVICE_POINT_ID FROM SERVICE_POINT S WHERE S.EXTERNAL_IDENTIFIER = p_SERVICE_POINT_NAME)
  		 AND A.CONTRACT_ID = p_CONTRACT_ID
         AND A.END_DATE >= p_CHARGE_DATE
  		 AND B.TRANSACTION_ID = A.TRANSACTION_ID
  		 AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE)
  													 FROM IT_STATUS
  													WHERE TRANSACTION_ID = B.TRANSACTION_ID)
  		 AND B.TRANSACTION_IS_ACTIVE = 1
  		 AND A.COMMODITY_ID = v_COMMODITY_ID
  		 AND D.TRANSACTION_ID = A.TRANSACTION_ID
  		 AND D.SCHEDULE_STATE = 1
  		 AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
  		 AND D.SCHEDULE_DATE = p_CHARGE_DATE
  		 AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE)
  													FROM IT_SCHEDULE
  													WHERE TRANSACTION_ID = D.TRANSACTION_ID
  													AND SCHEDULE_STATE = D.SCHEDULE_STATE
  													AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
  												  AND SCHEDULE_DATE = D.SCHEDULE_DATE
  													AND AS_OF_DATE <= SYSDATE);
  ELSE
    -- the only difference between this and the above query is that it doesn't
    -- filter interface or non-interface nodes (we don't care about the node type
    -- for gen, load, or virtual transactions)
  	SELECT SUM(AMOUNT)
  		INTO v_VOLUME
  		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_SCHEDULE D
  	 WHERE (A.TRANSACTION_TYPE = v_TXN_TYPE OR v_TXN_TYPE = 'Virtual')
  		 AND A.IS_IMPORT_EXPORT = v_IS_IMP_EXP
       AND CASE WHEN v_TXN_TYPE = 'Sale' THEN SOURCE_ID
                WHEN v_TXN_TYPE = 'Purchase' THEN SINK_ID
                ELSE POD_ID END
  		 IN (SELECT S.SERVICE_POINT_ID
  												FROM SERVICE_POINT S, MISO_CPNODES M
  											 WHERE S.EXTERNAL_IDENTIFIER = M.NODE_NAME)
                         AND A.POD_ID = (SELECT S.SERVICE_POINT_ID FROM SERVICE_POINT S WHERE S.SERVICE_POINT_NAME = p_SERVICE_POINT_NAME)
  		 AND A.CONTRACT_ID = p_CONTRACT_ID
         AND A.END_DATE >= p_CHARGE_DATE
  		 AND B.TRANSACTION_ID = A.TRANSACTION_ID
  		 AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE)
  													FROM IT_STATUS
  													WHERE TRANSACTION_ID = B.TRANSACTION_ID)
  		 AND B.TRANSACTION_IS_ACTIVE = 1
  		 AND A.COMMODITY_ID = v_COMMODITY_ID
  		 AND D.TRANSACTION_ID = A.TRANSACTION_ID
  		 AND D.SCHEDULE_STATE = 1
  		 AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
  		 AND D.SCHEDULE_DATE = p_CHARGE_DATE
  		 AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE)
  													 FROM IT_SCHEDULE
  													WHERE TRANSACTION_ID = D.TRANSACTION_ID
  														AND SCHEDULE_STATE = D.SCHEDULE_STATE
  														AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
  														AND SCHEDULE_DATE = D.SCHEDULE_DATE
  														AND AS_OF_DATE <= SYSDATE);
  END IF;
	RETURN NVL(v_VOLUME, 0);

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_ADMIN_VOL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_GFACO_VOL
	(
	p_CHARGE_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
  p_TXN_TYPE IN VARCHAR2,
  p_COMMODITY IN VARCHAR2,
  p_POD_NAME IN VARCHAR2,
  p_POR_NAME IN VARCHAR2
	) RETURN NUMBER IS
v_VOLUME NUMBER;
v_COMMODITY_ID NUMBER;
BEGIN
  IF p_COMMODITY = 'DA' THEN
  	ID.ID_FOR_COMMODITY('DayAhead Energy', FALSE, v_COMMODITY_ID);
  ELSE
  	ID.ID_FOR_COMMODITY('RealTime Energy', FALSE, v_COMMODITY_ID);
  END IF;

	SELECT SUM(AMOUNT)
		INTO v_VOLUME
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_SCHEDULE D
	 WHERE A.TRANSACTION_TYPE = p_TXN_TYPE
    AND A.AGREEMENT_TYPE = 'GrandFathered'
     AND (CASE p_TXN_TYPE WHEN 'Purchase' THEN SINK_ID ELSE SOURCE_ID END)
      = (SELECT S.SERVICE_POINT_ID
												FROM SERVICE_POINT S
											 WHERE S.EXTERNAL_IDENTIFIER = p_POR_NAME)
     AND POD_ID = (SELECT S.SERVICE_POINT_ID
												FROM SERVICE_POINT S
											 WHERE S.EXTERNAL_IDENTIFIER = p_POD_NAME)
		 AND A.CONTRACT_ID = p_CONTRACT_ID
		 AND B.TRANSACTION_ID = A.TRANSACTION_ID
		 AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE)
													 FROM IT_STATUS
													WHERE TRANSACTION_ID = B.TRANSACTION_ID)
		 AND B.TRANSACTION_IS_ACTIVE = 1
		 AND A.COMMODITY_ID = v_COMMODITY_ID
		 AND D.TRANSACTION_ID = A.TRANSACTION_ID
		 AND D.SCHEDULE_STATE = 1
		 AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
		 AND D.SCHEDULE_DATE = p_CHARGE_DATE
		 AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE)
													 FROM IT_SCHEDULE
													WHERE TRANSACTION_ID = D.TRANSACTION_ID
														AND SCHEDULE_STATE = D.SCHEDULE_STATE
														AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
														AND SCHEDULE_DATE = D.SCHEDULE_DATE
														AND AS_OF_DATE <= SYSDATE);

  RETURN NVL(v_VOLUME, 0);
EXCEPTION
	WHEN OTHERS THEN
		RETURN 0;
END GET_GFACO_VOL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_LMP
	(
	p_CHARGE_DATE IN DATE,
	p_MARKET_TYPE IN VARCHAR2,
	p_MARKET_PRICE_TYPE IN VARCHAR2,
	p_SVC_PT_NAME IN VARCHAR2
	) RETURN NUMBER IS
v_POD_ID NUMBER(9);
v_MARKET_PRICE_TYPE VARCHAR2(32);
v_MARKET_TYPE VARCHAR2(32);
v_RET NUMBER;
BEGIN
	SELECT SERVICE_POINT_ID INTO v_POD_ID
	FROM SERVICE_POINT WHERE SERVICE_POINT_NAME = p_SVC_PT_NAME;

  CASE p_MARKET_PRICE_TYPE
    WHEN 'LMP' THEN v_MARKET_PRICE_TYPE := 'Locational Marginal Price';
    WHEN 'MLC' THEN v_MARKET_PRICE_TYPE := 'Marginal Loss Component';
    WHEN 'MCC' THEN v_MARKET_PRICE_TYPE := 'Marginal Congestion Component';
  END CASE;

  IF p_MARKET_TYPE = 'DA' THEN
    v_MARKET_TYPE := 'DayAhead';
  ELSE
    v_MARKET_TYPE := 'RealTime';
  END IF;

	SELECT AVG(PRICE)
	INTO v_RET
	FROM MARKET_PRICE A,
		MARKET_PRICE_VALUE B
	WHERE A.MARKET_PRICE_TYPE = v_MARKET_PRICE_TYPE
    AND A.MARKET_TYPE = v_MARKET_TYPE
		AND A.POD_ID = v_POD_ID
		AND B.MARKET_PRICE_ID = A.MARKET_PRICE_ID
		AND B.PRICE_DATE = p_CHARGE_DATE
        AND B.PRICE_CODE =
        	(SELECT DECODE(MAX(DECODE(PRICE_CODE,'F',1,'P',2,'A',3)),1,'F',2,'P',3,'A')
        	FROM MARKET_PRICE_VALUE
            WHERE MARKET_PRICE_ID = B.MARKET_PRICE_ID
            	AND PRICE_CODE IN ('F','P','A')
                AND PRICE_DATE = B.PRICE_DATE)
		AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM MARKET_PRICE_VALUE
							WHERE MARKET_PRICE_ID = B.MARKET_PRICE_ID
								AND PRICE_CODE = B.PRICE_CODE
								AND PRICE_DATE = B.PRICE_DATE
								AND AS_OF_DATE <= SYSDATE);

	RETURN NVL(v_RET,0);

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_LMP;
---------------------------------------------------------------------------------------------------
FUNCTION GET_AO_FTR_MN_SHORTFALL
	(
	p_BILLING_ENTITY_ID IN NUMBER,
	p_STATEMENT_TYPE_ID IN NUMBER,
	p_STATEMENT_DATE IN DATE
	) RETURN NUMBER IS
	v_COMPONENT_ID NUMBER(9);
	v_AO_FTR_MN_SHORTFALL NUMBER;
BEGIN
	LOGS.LOG_DEBUG('GET_AO_FTR_MN_SHORTFALL');

	--GET COMPONENT ID.
	SELECT COMPONENT_ID
	INTO v_COMPONENT_ID
	FROM COMPONENT A
	WHERE A.EXTERNAL_IDENTIFIER = 'FTR_HR_ALC';

	SELECT -1 * NVL(SUM((1-ALLOC_FACTOR)*LEAST((PRICE1-PRICE2)*(PURCHASES-SALES),0)),0)
	INTO v_AO_FTR_MN_SHORTFALL
	FROM BILLING_STATEMENT A, FTR_CHARGE B
	WHERE A.ENTITY_ID = p_BILLING_ENTITY_ID
--		AND A.PRODUCT_ID = v_PRODUCT_ID
		AND COMPONENT_ID = v_COMPONENT_ID
		AND STATEMENT_TYPE = p_STATEMENT_TYPE_ID
		AND STATEMENT_STATE = 1
		AND TRUNC(p_STATEMENT_DATE, 'MM') = TRUNC(A.STATEMENT_DATE, 'MM')
		AND B.CHARGE_ID = A.CHARGE_ID;

	RETURN v_AO_FTR_MN_SHORTFALL;
END GET_AO_FTR_MN_SHORTFALL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_AO_FTR_YR_SHORTFALL
	(
	p_BILLING_ENTITY_ID IN NUMBER,
	p_STATEMENT_TYPE_ID IN NUMBER,
	p_STATEMENT_DATE IN DATE
	) RETURN NUMBER IS
	v_PRODUCT_ID NUMBER(9);
	v_COMPONENT_ID NUMBER(9);
	v_STATEMENT_TYPE_NAME VARCHAR2(32);
	v_AO_FTR_YR_SHORTFALL NUMBER;
BEGIN

	--ONLY RETURN A VALUE IF THIS IS S105.
	SELECT STATEMENT_TYPE_NAME
	INTO v_STATEMENT_TYPE_NAME
	FROM STATEMENT_TYPE
	WHERE STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID;

	IF NOT v_STATEMENT_TYPE_NAME LIKE '%MISO S105%' THEN
		v_AO_FTR_YR_SHORTFALL := 0;
	ELSE
		--GET COMPONENT ID.
		SELECT COMPONENT_ID
		INTO v_COMPONENT_ID
		FROM COMPONENT A
		WHERE A.EXTERNAL_IDENTIFIER = 'FTR_MN_ALC';

		SELECT SUM(B.CHARGE_AMOUNT + C.VARIABLE_VAL)
		INTO v_AO_FTR_YR_SHORTFALL
		FROM BILLING_STATEMENT A, FORMULA_CHARGE B, FORMULA_CHARGE_VARIABLE C
		WHERE A.ENTITY_ID = p_BILLING_ENTITY_ID
--			AND A.PRODUCT_ID = v_PRODUCT_ID
			AND COMPONENT_ID = v_COMPONENT_ID
			AND STATEMENT_TYPE = p_STATEMENT_TYPE_ID
			AND STATEMENT_STATE = 1
			AND TRUNC(p_STATEMENT_DATE, 'Y') = TRUNC(A.STATEMENT_DATE, 'Y')
			AND B.CHARGE_ID = A.CHARGE_ID
			AND C.CHARGE_ID = B.CHARGE_ID
			AND C.VARIABLE_NAME = 'AOFTRShortfall';
	END IF;

	RETURN v_AO_FTR_YR_SHORTFALL;

END GET_AO_FTR_YR_SHORTFALL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_DA_RSG_VOL
	(
	p_CHARGE_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_POSITIVE_TXN_TYPE IN VARCHAR2,
	p_NEGATIVE_TXN_TYPE IN VARCHAR2,
	p_MARKET_TYPE IN VARCHAR2,
	p_IS_VIRTUAL IN NUMBER,
	p_IS_IMPORT_EXPORT IN NUMBER
	) RETURN NUMBER IS
	v_RET NUMBER;
--Used in DA_RSG_DIST charge to get both AssetDemand and VirtualDemand.
BEGIN

	SELECT SUM(
			CASE A.TRANSACTION_TYPE WHEN p_NEGATIVE_TXN_TYPE THEN ABS(LEAST(0, AMOUNT))
			ELSE GREATEST(0, AMOUNT) END)
	INTO v_RET
	FROM INTERCHANGE_TRANSACTION A,
		IT_STATUS B,
		IT_COMMODITY C,
		IT_SCHEDULE D
	WHERE A.TRANSACTION_TYPE IN(p_POSITIVE_TXN_TYPE, p_NEGATIVE_TXN_TYPE)
		AND A.CONTRACT_ID = p_CONTRACT_ID
		AND A.IS_IMPORT_EXPORT = p_IS_IMPORT_EXPORT
		AND B.TRANSACTION_ID = A.TRANSACTION_ID
		AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_STATUS
							WHERE TRANSACTION_ID = B.TRANSACTION_ID)
		AND B.TRANSACTION_IS_ACTIVE = 1
		AND C.COMMODITY_ID = A.COMMODITY_ID
		AND C.MARKET_TYPE = p_MARKET_TYPE
		AND C.IS_VIRTUAL = p_IS_VIRTUAL
		AND C.COMMODITY_TYPE = 'Energy'
		AND D.TRANSACTION_ID = A.TRANSACTION_ID
		AND D.SCHEDULE_STATE = 1
		AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
		AND D.SCHEDULE_DATE = p_CHARGE_DATE
		AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_SCHEDULE
							WHERE TRANSACTION_ID = D.TRANSACTION_ID
								AND SCHEDULE_STATE = D.SCHEDULE_STATE
								AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
								AND SCHEDULE_DATE = D.SCHEDULE_DATE
								AND AS_OF_DATE <= SYSDATE);
	RETURN NVL(v_RET,0);

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_DA_RSG_VOL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_LOAD_IMB
	(
	p_CHARGE_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_POSITIVE_TXN_TYPE IN VARCHAR2,
	p_NEGATIVE_TXN_TYPE IN VARCHAR2,
	p_MARKET_TYPE_RT IN VARCHAR2,
	p_MARKET_TYPE_DA IN VARCHAR2,
	p_IS_VIRTUAL IN NUMBER,
	p_IS_IMPORT_EXPORT IN NUMBER
	) RETURN NUMBER IS
	v_RET NUMBER;
--Used in RT_RSG_DIST charge
BEGIN

	SELECT	ABS(SUM(
			CASE WHEN p_IS_IMPORT_EXPORT = 1 THEN
				(RT_AMT-DA_AMT) * CASE TRANSACTION_TYPE WHEN p_NEGATIVE_TXN_TYPE THEN -1 ELSE 1 END
			ELSE
				CASE TRANSACTION_TYPE WHEN p_NEGATIVE_TXN_TYPE THEN
					CASE WHEN DA_AMT < 0 OR RT_AMT < 0 THEN ABS(RT_AMT-DA_AMT) ELSE 0 END
				ELSE
					CASE WHEN DA_AMT > 0 OR RT_AMT > 0 THEN ABS(RT_AMT-DA_AMT) ELSE 0 END
				END
			END))
	INTO v_RET
	FROM
		(SELECT A.POD_ID,
			A.TRANSACTION_TYPE,
			NVL(SUM(CASE WHEN MARKET_TYPE = p_MARKET_TYPE_DA THEN D.AMOUNT ELSE 0 END), 0) "DA_AMT",
			NVL(SUM(CASE WHEN MARKET_TYPE = p_MARKET_TYPE_RT THEN D.AMOUNT ELSE 0 END), 0) "RT_AMT"
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_COMMODITY C, IT_SCHEDULE D
		WHERE A.TRANSACTION_TYPE IN(p_POSITIVE_TXN_TYPE, p_NEGATIVE_TXN_TYPE)
			AND A.CONTRACT_ID = p_CONTRACT_ID
			AND A.IS_IMPORT_EXPORT = p_IS_IMPORT_EXPORT
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_STATUS
								WHERE TRANSACTION_ID = B.TRANSACTION_ID)
			AND B.TRANSACTION_IS_ACTIVE = 1
			AND C.COMMODITY_ID = A.COMMODITY_ID
			AND C.MARKET_TYPE IN (p_MARKET_TYPE_DA, p_MARKET_TYPE_RT)
			AND C.IS_VIRTUAL = p_IS_VIRTUAL
			AND C.COMMODITY_TYPE = 'Energy'
			AND D.TRANSACTION_ID = A.TRANSACTION_ID
			AND D.SCHEDULE_STATE = 1
			AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
			AND D.SCHEDULE_DATE = p_CHARGE_DATE
			AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_SCHEDULE
							WHERE TRANSACTION_ID = D.TRANSACTION_ID
								AND SCHEDULE_STATE = D.SCHEDULE_STATE
								AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
								AND SCHEDULE_DATE = D.SCHEDULE_DATE
								AND AS_OF_DATE <= SYSDATE)
		GROUP BY A.POD_ID, A.TRANSACTION_TYPE
		);

	RETURN NVL(v_RET, 0);
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_LOAD_IMB;
---------------------------------------------------------------------------------------------------
FUNCTION GET_RT_UNDER_OVER_GEN
	(
	p_CHARGE_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_REG_TRAIT_NAME IN VARCHAR2
	) RETURN NUMBER IS
	v_RET NUMBER;
--Used in RT_RSG_DIST charge
v_IS_UNDER_GEN NUMBER(1) := CASE WHEN UPPER(p_REG_TRAIT_NAME) LIKE '%UP REG' THEN 1 ELSE 0 END;
v_TRAIT_GROUP_ID NUMBER(9);
v_STATUS NUMBER;
v_MESSAGE VARCHAR2(4000);
BEGIN

	EI.GET_ID_FROM_NAME(p_REG_TRAIT_NAME, EC.ED_TRANSACTION_TRAIT_GROUP, v_TRAIT_GROUP_ID, v_STATUS, v_MESSAGE);
	IF v_STATUS < 0 THEN
		RAISE_APPLICATION_ERROR(-20998, 'The Trait Group called ' || p_REG_TRAIT_NAME || ' does not exist.  '
			|| ' MM_MISO_SHADOW_BILL.GET_RT_UNDER_OVER_GEN has failed to execute.  Message=' || v_MESSAGE);
	END IF;

	SELECT SUM(CASE WHEN UD_XMPT = 1 THEN 0
			ELSE
				CASE WHEN v_IS_UNDER_GEN = 1 THEN
					GREATEST(0, GEN_SP - TO_NUMBER(NVL(TRT.TRAIT_VAL,'0')) - GEN_PERF)
				ELSE
					GREATEST(0, GEN_PERF - GEN_SP - TO_NUMBER(NVL(TRT.TRAIT_VAL,'0')))
				END
			END)
	INTO v_RET
	FROM
		(
		SELECT 	MAX(CASE TRANSACTION_TYPE WHEN 'Generation' THEN
						CASE WHEN C.MARKET_TYPE = 'RealTime' AND C.COMMODITY_TYPE = 'Energy'
						THEN A.TRANSACTION_ID ELSE 0 END ELSE 0 END) "RT_TX_ID",
				SUM(CASE TRANSACTION_TYPE WHEN 'Generation' THEN
						CASE WHEN C.MARKET_TYPE = 'RealTime' AND C.COMMODITY_TYPE = 'Energy'
						THEN D.AMOUNT ELSE 0 END ELSE 0 END) "GEN_PERF",
				SUM(CASE TRANSACTION_TYPE WHEN 'Dispatch Instr' THEN D.AMOUNT ELSE 0 END) "GEN_SP",
				MAX(CASE TRANSACTION_TYPE WHEN 'UD Exempt Flag' THEN D.AMOUNT ELSE 0 END) "UD_XMPT"
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_COMMODITY C, IT_SCHEDULE D
		WHERE A.TRANSACTION_TYPE IN ('Generation', 'Dispatch Instr.', 'UD Exempt Flag')
			AND A.CONTRACT_ID = p_CONTRACT_ID
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_STATUS
								WHERE TRANSACTION_ID = B.TRANSACTION_ID)
			AND B.TRANSACTION_IS_ACTIVE = 1
			AND C.COMMODITY_ID = A.COMMODITY_ID
			AND D.TRANSACTION_ID = A.TRANSACTION_ID
			AND D.SCHEDULE_STATE = 1
			AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
			AND D.SCHEDULE_DATE = p_CHARGE_DATE
			AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_SCHEDULE
						WHERE TRANSACTION_ID = D.TRANSACTION_ID
							AND SCHEDULE_STATE = D.SCHEDULE_STATE
							AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
							AND SCHEDULE_DATE = D.SCHEDULE_DATE
							AND AS_OF_DATE <= SYSDATE)
		GROUP BY POD_ID
		) A, IT_TRAIT_SCHEDULE TRT
	WHERE TRT.TRANSACTION_ID(+) = A.RT_TX_ID
		AND TRT.SCHEDULE_STATE(+) = 1
		AND TRT.SCHEDULE_DATE(+) = p_CHARGE_DATE
		AND TRT.TRAIT_GROUP_ID(+) = v_TRAIT_GROUP_ID
		AND TRT.TRAIT_INDEX(+) = 1
		AND TRT.SET_NUMBER(+) = 1
		AND TRT.STATEMENT_TYPE_ID(+) = 0;

	RETURN NVL(v_RET, 0);
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_RT_UNDER_OVER_GEN;
---------------------------------------------------------------------------------------------------
FUNCTION GET_RT_DERATE_MR_VOL
	(
	p_CHARGE_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_TRAIT_NAME IN VARCHAR2
	) RETURN NUMBER IS
	v_RET NUMBER;
--Used in RT_RSG_DIST charge
v_IS_DERATE_VOL NUMBER(1) := CASE WHEN UPPER(p_TRAIT_NAME) LIKE '%MAX%' THEN 1 ELSE 0 END;
v_TRAIT_GROUP_ID NUMBER(9);
v_STATUS NUMBER;
v_MESSAGE VARCHAR2(4000);
BEGIN

	EI.GET_ID_FROM_NAME(p_TRAIT_NAME, EC.ED_TRANSACTION_TRAIT_GROUP, v_TRAIT_GROUP_ID, v_STATUS, v_MESSAGE);
	IF v_STATUS < 0 THEN
		RAISE_APPLICATION_ERROR(-20998, 'The Trait Group called ' || p_TRAIT_NAME || ' could not be found.  '
			|| ' MM_MISO_SHADOW_BILL.GET_RT_DERATE_MR_VOL has failed to execute.  Message=' || v_MESSAGE);
	END IF;

	SELECT SUM(CASE WHEN UD_XMPT = 1 THEN 0
			ELSE
				CASE WHEN v_IS_DERATE_VOL = 1 THEN
					ABS(LEAST(0, DA_GEN + TO_NUMBER(NVL(TRT.TRAIT_VAL,'0'))))
				ELSE
					CASE WHEN NVL(RSG_ELIG,0) = 1 THEN 0 ELSE
						GREATEST(0, DA_GEN + TO_NUMBER(NVL(TRT.TRAIT_VAL,'0')))
					END
				END
			END)
	INTO v_RET
	FROM
		(
		SELECT 	MAX(CASE TRANSACTION_TYPE WHEN 'Generation' THEN
						CASE WHEN C.MARKET_TYPE = 'RealTime' AND C.COMMODITY_TYPE = 'Energy'
						THEN A.TRANSACTION_ID ELSE 0 END ELSE 0 END) "RT_TX_ID",
				SUM(CASE TRANSACTION_TYPE WHEN 'Generation' THEN
						CASE WHEN C.MARKET_TYPE = 'DayAhead' AND C.COMMODITY_TYPE = 'Energy'
						THEN D.AMOUNT ELSE 0 END ELSE 0 END) "DA_GEN",
				MAX(CASE TRANSACTION_TYPE WHEN 'RSG Elig Flag' THEN D.AMOUNT ELSE 0 END) "RSG_ELIG",
				MAX(CASE TRANSACTION_TYPE WHEN 'UD Exempt Flag' THEN D.AMOUNT ELSE 0 END) "UD_XMPT"
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_COMMODITY C, IT_SCHEDULE D
		WHERE A.TRANSACTION_TYPE IN ('Generation', 'RSG Elig Flag', 'UD Exempt Flag')
			AND A.CONTRACT_ID = p_CONTRACT_ID
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND B.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_STATUS
								WHERE TRANSACTION_ID = B.TRANSACTION_ID)
			AND B.TRANSACTION_IS_ACTIVE = 1
			AND C.COMMODITY_ID = A.COMMODITY_ID
			AND D.TRANSACTION_ID = A.TRANSACTION_ID
			AND D.SCHEDULE_STATE = 1
			AND D.SCHEDULE_TYPE = p_STATEMENT_TYPE
			AND D.SCHEDULE_DATE = p_CHARGE_DATE
			AND D.AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_SCHEDULE
						WHERE TRANSACTION_ID = D.TRANSACTION_ID
							AND SCHEDULE_STATE = D.SCHEDULE_STATE
							AND SCHEDULE_TYPE = D.SCHEDULE_TYPE
							AND SCHEDULE_DATE = D.SCHEDULE_DATE
							AND AS_OF_DATE <= SYSDATE)
		GROUP BY POD_ID
		) A, IT_TRAIT_SCHEDULE TRT
	WHERE TRT.TRANSACTION_ID(+) = A.RT_TX_ID
		AND TRT.SCHEDULE_STATE(+) = 1
		AND TRT.SCHEDULE_DATE(+) = p_CHARGE_DATE
		AND TRT.TRAIT_GROUP_ID(+) = v_TRAIT_GROUP_ID
		AND TRT.TRAIT_INDEX(+) = 1
		AND TRT.SET_NUMBER(+) = 1
		AND TRT.STATEMENT_TYPE_ID(+) = 0;

	RETURN NVL(v_RET, 0);
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
END GET_RT_DERATE_MR_VOL;
---------------------------------------------------------------------------------------------------
END MM_MISO_SHADOW_BILL;
/
