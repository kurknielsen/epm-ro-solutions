CREATE OR REPLACE PACKAGE BODY MM_SEM_CFD_ALERTS IS

 	-- Private type declarations

  	-- Private constant declarations
	g_CFD_DATA_SYS_ALERT CONSTANT VARCHAR2(64) := 'SEM CFD Settlement Data Alert';
	g_ENERGY_MARKET_NAME CONSTANT VARCHAR2(2) := 'EN';
	g_CAPACITY_MARKET_NAME CONSTANT VARCHAR2(2) := 'CA';
	g_SMP_VARIABLE_TYPE CONSTANT VARCHAR2(16) := 'SMP';
	g_CPDP_VARIABLE_TYPE CONSTANT VARCHAR2(16) := 'CPDP';
	g_CPGP_VARIABLE_TYPE CONSTANT VARCHAR2(16) := 'CPGP';

  	-- Private variable declarations

  	-- Function and procedure implementations
	----------------------------------------------------------------------------------------
	FUNCTION WHAT_VERSION RETURN VARCHAR IS
	BEGIN
		RETURN '$Revision: 1.1 $';
	END WHAT_VERSION;
	--------------------------------------------------------------------------------------
	PROCEDURE SETTLEMENT_DATA_COMPARISON
	(
		p_ENTITY_ID IN NUMBER,
		p_MARKET_NAME IN VARCHAR2,
		p_STATEMENT_DATE IN DATE,
		p_STATEMENT_TYPE1 IN NUMBER,
		p_STATEMENT_TYPE2 IN NUMBER,
		p_VARIABLE_TYPE IN VARCHAR2,
		p_IS_SETTLEMENT_DATA_DIFFERENT OUT BOOLEAN,
		p_DISPLAY_STATEMENT_DATE OUT VARCHAR2,
		p_DISPLAY_STATEMENT_TYPE1_NAME OUT VARCHAR2,
		p_DISPLAY_STATEMENT_TYPE2_NAME OUT VARCHAR2,
		p_DISPLAY_VARIABLE_TYPE OUT VARCHAR2
	) AS
		v_COUNT NUMBER;
		v_BEGIN_DATE DATE;
		v_END_DATE DATE;
	BEGIN
		IF p_MARKET_NAME = MM_SEM_SETTLEMENT_CALENDAR.c_MARKET_CAPACITY THEN
			v_BEGIN_DATE := TRUNC(p_STATEMENT_DATE, 'MM');
		ELSE
			v_BEGIN_DATE := p_STATEMENT_DATE;
		END IF;
		v_END_DATE := p_STATEMENT_DATE;

		-- Compare the PIR data for Statement Type1 and Statement Type2 for a Billing Entity
		SELECT COUNT(*) INTO v_COUNT
		FROM (SELECT CHARGE_DATE, VALUE
			 FROM SEM_SETTLEMENT_ENTITY E,
				SEM_MP_STATEMENT S,
				SEM_MP_INFO MP
			 WHERE E.SETTLEMENT_PSE_ID = p_ENTITY_ID
				AND E.SETTLEMENT_PSE_ID = S.ENTITY_ID
				AND S.STATEMENT_TYPE = p_STATEMENT_TYPE1
				AND S.STATEMENT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
				AND VARIABLE_TYPE = p_VARIABLE_TYPE
				AND MP.STATEMENT_ID = S.STATEMENT_ID) COMP1,
			(SELECT CHARGE_DATE, VALUE
			 FROM SEM_SETTLEMENT_ENTITY E,
				SEM_MP_STATEMENT S,
				SEM_MP_INFO MP
			 WHERE E.SETTLEMENT_PSE_ID = p_ENTITY_ID
				AND E.SETTLEMENT_PSE_ID = S.ENTITY_ID
				AND S.STATEMENT_TYPE = p_STATEMENT_TYPE2
				AND S.STATEMENT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
				AND VARIABLE_TYPE = p_VARIABLE_TYPE
				AND MP.STATEMENT_ID = S.STATEMENT_ID) COMP2
		WHERE COMP2.CHARGE_DATE = COMP1.CHARGE_DATE
			AND COMP2.VALUE <> COMP1.VALUE;

		IF v_COUNT > 0 THEN
			p_IS_SETTLEMENT_DATA_DIFFERENT := TRUE;
			p_DISPLAY_STATEMENT_DATE := TO_CHAR(p_STATEMENT_DATE, 'YYYY-MM-DD');
			p_DISPLAY_STATEMENT_TYPE1_NAME := EI.GET_ENTITY_NAME(EC.ED_STATEMENT_TYPE, p_STATEMENT_TYPE1);
			p_DISPLAY_STATEMENT_TYPE2_NAME := EI.GET_ENTITY_NAME(EC.ED_STATEMENT_TYPE, p_STATEMENT_TYPE2);
			p_DISPLAY_VARIABLE_TYPE := p_VARIABLE_TYPE;
		ELSE
			p_IS_SETTLEMENT_DATA_DIFFERENT := FALSE;
			p_DISPLAY_STATEMENT_DATE := NULL;
			p_DISPLAY_STATEMENT_TYPE1_NAME := NULL;
			p_DISPLAY_STATEMENT_TYPE2_NAME := NULL;
			p_DISPLAY_VARIABLE_TYPE := NULL;
		END IF;
	END;
	--------------------------------------------------------------------------------------
	FUNCTION GET_BILLING_ENTITY_FOR_MARKET
	(
		p_MARKET_NAME IN VARCHAR2
	) RETURN NUMBER IS
		v_BILLING_ENTITY_ID NUMBER;
	BEGIN
		-- Pick one of the Billing Entity from the Settlement Entity Table
		SELECT BILLING_ENTITY_ID INTO v_BILLING_ENTITY_ID
		FROM (SELECT DISTINCT E.SETTLEMENT_PSE_ID AS BILLING_ENTITY_ID
			  FROM SEM_SETTLEMENT_ENTITY E,
					SEM_MP_STATEMENT S
			  WHERE MARKET_NAME = p_MARKET_NAME
				AND S.ENTITY_ID = E.SETTLEMENT_PSE_ID
			   ORDER BY 1)
		WHERE ROWNUM = 1;

		RETURN v_BILLING_ENTITY_ID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN NULL;
	END;
	--------------------------------------------------------------------------------------
	PROCEDURE RESETTLEMENT_DATA_ALERTS
	(
		p_OPERATING_DAY IN DATE,
		p_STATUS OUT NUMBER
	) AS
		v_F_STATEMENT_TYPE_ID NUMBER;
		v_F1_STATEMENT_TYPE_ID NUMBER;
		v_F2_STATEMENT_TYPE_ID NUMBER;
		v_EN_ENTITY_ID PURCHASING_SELLING_ENTITY.PSE_ID%TYPE;
		v_CA_ENTITY_ID PURCHASING_SELLING_ENTITY.PSE_ID%TYPE;
		v_RAISE_ALERT BOOLEAN := FALSE;
		v_DISPLAY_STATEMENT_DAY VARCHAR2(10);
		v_DISPLAY_STATEMENT_TYPE1_NAME STATEMENT_TYPE.STATEMENT_TYPE_NAME%TYPE;
		v_DISPLAY_STATEMENT_TYPE2_NAME STATEMENT_TYPE.STATEMENT_TYPE_NAME%TYPE;
		v_DISPLAY_VARIABLE_TYPE SEM_MP_INFO.VARIABLE_NAME%TYPE;

		-- Get the SEM_SETTLEMENT_CALENDAR records for the selected Market & Operating Day
		CURSOR c_SEM_SETTLEMENT_CALENDAR(v_MARKET IN VARCHAR2) IS
			SELECT C.BEGIN_DATE, C.END_DATE, C.RUN_IDENTIFIER
            FROM SEM_SETTLEMENT_CALENDAR C
            WHERE C.PUBLICATION_DATE = 	TRUNC(p_OPERATING_DAY, 'DD')
              AND C.PUBLICATION_TYPE =  MM_SEM_SETTLEMENT_CALENDAR.c_PUBLICATION_TYPE_REPORT
              AND C.MARKET = v_MARKET
              AND C.RUN_IDENTIFIER IN (MM_SEM_UTIL.g_EXTID_SETTLEMENT_F1, MM_SEM_UTIL.g_EXTID_SETTLEMENT_F2)
			ORDER BY C.BEGIN_DATE;

	BEGIN
		p_STATUS := GA.SUCCESS;
		
		-- Get the Statement Type ID for F, F(1) and F(2)
		v_F_STATEMENT_TYPE_ID := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(MM_SEM_UTIL.g_EXTID_SETTLEMENT_F,
        							  EC.ED_STATEMENT_TYPE,
                                      EC.ES_SEM,
                                      MM_SEM_UTIL.g_STATEMENT_TYPE_SETTLEMENT);

		v_F1_STATEMENT_TYPE_ID := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(MM_SEM_UTIL.g_EXTID_SETTLEMENT_F1,
        							  EC.ED_STATEMENT_TYPE,
                                      EC.ES_SEM,
                                      MM_SEM_UTIL.g_STATEMENT_TYPE_SETTLEMENT);

		v_F2_STATEMENT_TYPE_ID := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(MM_SEM_UTIL.g_EXTID_SETTLEMENT_F2,
        							  EC.ED_STATEMENT_TYPE,
                                      EC.ES_SEM,
                                      MM_SEM_UTIL.g_STATEMENT_TYPE_SETTLEMENT);

		-- Get Billing Entity
		v_EN_ENTITY_ID := GET_BILLING_ENTITY_FOR_MARKET(g_ENERGY_MARKET_NAME);
		v_CA_ENTITY_ID := GET_BILLING_ENTITY_FOR_MARKET(g_CAPACITY_MARKET_NAME);

		-- When Comparing various statement type, we first compare F2 and F1 for the F2 statement day
		-- and then compare F1 and F for the F1 statement day.
		-- Compare SMP
		FOR v_SETTLE_CAL_REC IN c_SEM_SETTLEMENT_CALENDAR(MM_SEM_SETTLEMENT_CALENDAR.c_MARKET_ENERGY) LOOP
			FOR v_STATEMENT_DAY IN (SELECT X.COLUMN_VALUE AS STATEMENT_DATE
									FROM TABLE(CAST(DATE_UTIL.DATES_IN_INTERVAL_RANGE(v_SETTLE_CAL_REC.BEGIN_DATE,v_SETTLE_CAL_REC.END_DATE,DATE_UTIL.c_ABBR_DAY) AS DATE_COLLECTION)) X) LOOP
    			IF v_EN_ENTITY_ID IS NOT NULL THEN
    				-- If statement is available for F2
    				IF v_SETTLE_CAL_REC.RUN_IDENTIFIER = MM_SEM_UTIL.g_EXTID_SETTLEMENT_F2 THEN
    					-- Compare F2 and F1 Statement type
    					SETTLEMENT_DATA_COMPARISON(v_EN_ENTITY_ID, MM_SEM_SETTLEMENT_CALENDAR.c_MARKET_ENERGY, v_STATEMENT_DAY.STATEMENT_DATE, v_F2_STATEMENT_TYPE_ID, v_F1_STATEMENT_TYPE_ID, g_SMP_VARIABLE_TYPE,
    												v_RAISE_ALERT, v_DISPLAY_STATEMENT_DAY, v_DISPLAY_STATEMENT_TYPE1_NAME, v_DISPLAY_STATEMENT_TYPE2_NAME, v_DISPLAY_VARIABLE_TYPE);
    				-- Else statement is available for F1
    				ELSE
    					-- Compare F1 and F Statement type
    					IF v_RAISE_ALERT = FALSE THEN
    						SETTLEMENT_DATA_COMPARISON(v_EN_ENTITY_ID, MM_SEM_SETTLEMENT_CALENDAR.c_MARKET_ENERGY, v_STATEMENT_DAY.STATEMENT_DATE, v_F1_STATEMENT_TYPE_ID, v_F_STATEMENT_TYPE_ID, g_SMP_VARIABLE_TYPE,
    													v_RAISE_ALERT, v_DISPLAY_STATEMENT_DAY, v_DISPLAY_STATEMENT_TYPE1_NAME, v_DISPLAY_STATEMENT_TYPE2_NAME, v_DISPLAY_VARIABLE_TYPE);
    					END IF;
    				END IF;
    			END IF;
			END LOOP;
		END LOOP;

		-- Compare CPDP and CPGP
		IF v_RAISE_ALERT = FALSE THEN
			FOR v_SETTLE_CAL_REC IN c_SEM_SETTLEMENT_CALENDAR(MM_SEM_SETTLEMENT_CALENDAR.c_MARKET_CAPACITY) LOOP
				IF v_CA_ENTITY_ID IS NOT NULL THEN
					-- Compare CPDP
					-- If statement is available for F2
					IF v_SETTLE_CAL_REC.RUN_IDENTIFIER = MM_SEM_UTIL.g_EXTID_SETTLEMENT_F2 THEN

						-- Compare F2 and F1 Statement type
						IF v_RAISE_ALERT = FALSE THEN
							SETTLEMENT_DATA_COMPARISON(v_CA_ENTITY_ID, MM_SEM_SETTLEMENT_CALENDAR.c_MARKET_CAPACITY, v_SETTLE_CAL_REC.END_DATE, v_F2_STATEMENT_TYPE_ID, v_F1_STATEMENT_TYPE_ID, g_CPDP_VARIABLE_TYPE,
														v_RAISE_ALERT, v_DISPLAY_STATEMENT_DAY, v_DISPLAY_STATEMENT_TYPE1_NAME, v_DISPLAY_STATEMENT_TYPE2_NAME, v_DISPLAY_VARIABLE_TYPE);
						END IF;
					-- Else statement type is F1
					ELSE
						-- Compare F1 and F Statement type
						IF v_RAISE_ALERT = FALSE THEN
							SETTLEMENT_DATA_COMPARISON(v_CA_ENTITY_ID, MM_SEM_SETTLEMENT_CALENDAR.c_MARKET_CAPACITY, v_SETTLE_CAL_REC.END_DATE, v_F1_STATEMENT_TYPE_ID, v_F_STATEMENT_TYPE_ID, g_CPDP_VARIABLE_TYPE,
														v_RAISE_ALERT, v_DISPLAY_STATEMENT_DAY, v_DISPLAY_STATEMENT_TYPE1_NAME, v_DISPLAY_STATEMENT_TYPE2_NAME, v_DISPLAY_VARIABLE_TYPE);
						END IF;
					END IF;

					-- Compare CPGP
					-- If statement is available for F2
					IF v_SETTLE_CAL_REC.RUN_IDENTIFIER = MM_SEM_UTIL.g_EXTID_SETTLEMENT_F2 THEN
						-- Compare F2 and F1 Statement type
						IF v_RAISE_ALERT = FALSE THEN
							SETTLEMENT_DATA_COMPARISON(v_CA_ENTITY_ID, MM_SEM_SETTLEMENT_CALENDAR.c_MARKET_CAPACITY, v_SETTLE_CAL_REC.END_DATE, v_F2_STATEMENT_TYPE_ID, v_F1_STATEMENT_TYPE_ID, g_CPGP_VARIABLE_TYPE,
														v_RAISE_ALERT, v_DISPLAY_STATEMENT_DAY, v_DISPLAY_STATEMENT_TYPE1_NAME, v_DISPLAY_STATEMENT_TYPE2_NAME, v_DISPLAY_VARIABLE_TYPE);
						END IF;
					-- Else statement type is F1
					ELSE
						-- Compare F1 and F Statement type
						IF v_RAISE_ALERT = FALSE THEN
							SETTLEMENT_DATA_COMPARISON(v_CA_ENTITY_ID, MM_SEM_SETTLEMENT_CALENDAR.c_MARKET_CAPACITY, v_SETTLE_CAL_REC.END_DATE, v_F1_STATEMENT_TYPE_ID, v_F_STATEMENT_TYPE_ID, g_CPGP_VARIABLE_TYPE,
														v_RAISE_ALERT, v_DISPLAY_STATEMENT_DAY, v_DISPLAY_STATEMENT_TYPE1_NAME, v_DISPLAY_STATEMENT_TYPE2_NAME, v_DISPLAY_VARIABLE_TYPE);
						END IF;
					END IF;
				END IF;
			END LOOP;
		END IF;

		-- Raise Alert
		IF v_RAISE_ALERT THEN
		
			ALERTS.TRIGGER_ALERTS(p_TRIGGER_VALUE 	=> g_CFD_DATA_SYS_ALERT,
								p_TRIGGER_LEVEL 	=> LOGS.c_Level_Success,
								p_ALERT_MESSAGE 	=> 'Resettlement Data changed for Statement Day: ' || v_DISPLAY_STATEMENT_DAY || UTL_TCP.CRLF
										|| 'Statements compared: ' || v_DISPLAY_STATEMENT_TYPE1_NAME || ' and '	|| v_DISPLAY_STATEMENT_TYPE2_NAME || UTL_TCP.CRLF
										|| 'Variable Type: ' || v_DISPLAY_VARIABLE_TYPE || UTL_TCP.CRLF
							  			|| 'Recalculation and resettement needs to be initiated.');
		END IF;

	END;
	--------------------------------------------------------------------------------------
END MM_SEM_CFD_ALERTS;
/
