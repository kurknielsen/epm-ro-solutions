CREATE OR REPLACE PACKAGE BODY MM_SEM_CFD_UI IS
	-- Private constant declarations
  	g_ALL CONSTANT VARCHAR2(32) := '<ALL>';
	g_TRANSACTION_TYPE_PURCHASE CONSTANT VARCHAR2(32) := 'Purchase';
	g_TRANSACTION_TYPE_SALE CONSTANT VARCHAR2(32) := 'Sale';
	g_CONTRACT_TYPE_DIRECTED CONSTANT VARCHAR2(32) := 'DC';
	g_CONTRACT_TYPE_NON_DIRECTED CONSTANT VARCHAR2(32) := 'NDC';

	--ID That the UI uses to determine whether an index has been set to the "ESTSEM" index.
	--A NULL will actually be inserted into the SEM_CFD_DEAL table if this option is selected.
	k_ESTSEM_DUMMY_MP_ID CONSTANT NUMBER(3) := -10;

	-- Function and procedure implementations
	--------------------------------------------------------------------------------
	FUNCTION WHAT_VERSION RETURN VARCHAR IS
	BEGIN
		RETURN '$Revision: 1.1 $';
	END WHAT_VERSION;
	--------------------------------------------------------------------------------
	PROCEDURE NULL_CURSOR(p_CURSOR IN OUT REF_CURSOR) AS
	BEGIN
		OPEN p_CURSOR FOR
			SELECT NULL
			FROM DUAL;
	END NULL_CURSOR;
	--------------------------------------------------------------------------------
	FUNCTION GET_CONTRACT_TYPE
	(
		p_CONTRACT_ID IN VARCHAR
	) RETURN VARCHAR2
	IS
	v_CONTRACT_TYPE INTERCHANGE_CONTRACT.CONTRACT_TYPE%TYPE;
	BEGIN

		SELECT C.CONTRACT_TYPE INTO v_CONTRACT_TYPE
		FROM INTERCHANGE_CONTRACT C
		WHERE C.CONTRACT_ID = p_CONTRACT_ID;

		RETURN v_CONTRACT_TYPE;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN NULL;

	END GET_CONTRACT_TYPE;
	------------------------------------------------------------------------------
	FUNCTION GET_TEMPLATE_STRING
	(
		p_TEMPLATE_NAME IN VARCHAR2
	) RETURN VARCHAR2
	AS
		v_INTERIOR_PERIOD SEM_SCHEDULE_TEMPLATE.INTERIOR_PERIOD%TYPE;
		v_DAY_OF_WEEK SEM_SCHEDULE_TEMPLATE.DAY_OF_WEEK%TYPE;
		v_INCLUDE_HOLIDAYS SEM_SCHEDULE_TEMPLATE.INCLUDE_HOLIDAYS%TYPE;
	BEGIN

		SELECT INTERIOR_PERIOD, DAY_OF_WEEK, INCLUDE_HOLIDAYS
		INTO v_INTERIOR_PERIOD, v_DAY_OF_WEEK, v_INCLUDE_HOLIDAYS
		FROM SEM_SCHEDULE_TEMPLATE
		WHERE UPPER(TEMPLATE_NAME) = UPPER(p_TEMPLATE_NAME);

		RETURN '0' || -- Any Day
			   '0' || -- Week Day
			   '0' || -- Week End
			   v_DAY_OF_WEEK || -- Days of the week
			   '0' || -- All Hour
			   CASE WHEN v_INTERIOR_PERIOD = 1 THEN '1' ELSE '0' END || -- On Interior Period
			   CASE WHEN v_INTERIOR_PERIOD = 0 THEN '1' ELSE '0' END || -- Off Interior Period
			   '0'; -- Delete Existing Entries. Default set to false
	END;
	--------------------------------------------------------------------------------
	FUNCTION GET_CONTRACT_ATTRIBUTE
	(
		p_ATTRIBUTE_NAME IN VARCHAR,
		p_OWNER_ENTITY_ID IN NUMBER
	) RETURN VARCHAR2 IS
	BEGIN
		RETURN RO.GET_ENTITY_ATTRIBUTE(p_ATTRIBUTE_NAME, EC.ED_INTERCHANGE_CONTRACT,p_OWNER_ENTITY_ID, LOW_DATE);
	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_CONTRACTS
	(
		p_CONTRACT_TYPE IN VARCHAR,
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS

	BEGIN

		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT C.CONTRACT_NAME, C.CONTRACT_ID
			FROM INTERCHANGE_CONTRACT C
			WHERE (C.CONTRACT_TYPE = p_CONTRACT_TYPE OR p_CONTRACT_TYPE = g_ALL)
				  AND C.CONTRACT_TYPE IN (g_CONTRACT_TYPE_DIRECTED, g_CONTRACT_TYPE_NON_DIRECTED)
			ORDER BY C.CONTRACT_NAME;

	END GET_CONTRACTS;
	--------------------------------------------------------------------------------
	PROCEDURE GET_COMPANY_NAMES
	(
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS

	BEGIN

		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT DISTINCT P.PSE_NAME, S.PARTICIPANT_PSE_ID
			FROM SEM_SETTLEMENT_ENTITY S, PURCHASING_SELLING_ENTITY P
			WHERE P.PSE_ID = S.PARTICIPANT_PSE_ID
			ORDER BY P.PSE_NAME;

	END GET_COMPANY_NAMES;
	------------------------------------------------------------------------------
	PROCEDURE GET_FILL_TEMPLATES
	(
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS

	BEGIN

		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT T.TEMPLATE_NAME
			FROM SEM_SCHEDULE_TEMPLATE T
			ORDER BY T.TEMPLATE_NAME;

	END;
	------------------------------------------------------------------------------
	PROCEDURE GET_CFD_MONTH
	(
		p_TXN_BEGIN_DATE IN DATE,
		p_TXN_END_DATE IN DATE,
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS

	v_NUMBER_OF_MONTHS NUMBER;
	BEGIN
		p_STATUS := GA.SUCCESS;

		v_NUMBER_OF_MONTHS := MONTHS_BETWEEN(TRUNC(p_TXN_END_DATE, 'MM'), TRUNC(p_TXN_BEGIN_DATE, 'MM')) + 1;

		OPEN p_CURSOR FOR
			-- Instead of using SYSTEM_DATE_TIME, Monthly CFD terms
			-- are created using the query below
			SELECT to_CHAR(S.SCHEDULE_DATE, 'MON YYYY') AS MONTH_NAME, TO_NUMBER(TO_CHAR(S.SCHEDULE_DATE, 'YYYYMMDD')) AS MONTH_ID
			FROM (SELECT ADD_MONTHS(TRUNC(p_TXN_BEGIN_DATE, 'MM'),(LEVEL-1) * 1) AS SCHEDULE_DATE
				FROM DUAL CONNECT BY LEVEL <= v_NUMBER_OF_MONTHS) S;

	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_ESTSEM_COEFF_QUARTERS
	(
		p_BEGIN_DATE IN DATE,
		p_END_DATE IN DATE,
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS

	v_NUMBER_OF_QUARTERS NUMBER;
	v_MONTHS_IN_QUARTER NUMBER;
	BEGIN
		p_STATUS := GA.SUCCESS;

		v_MONTHS_IN_QUARTER := 3;
		v_NUMBER_OF_QUARTERS := MONTHS_BETWEEN(TRUNC(p_END_DATE, 'Q'), TRUNC(p_BEGIN_DATE, 'Q'))/v_MONTHS_IN_QUARTER + 1;

		OPEN p_CURSOR FOR
			-- Instead of using SYSTEM_DATE_TIME, Monthly CFD terms
			-- are created using the query below
			SELECT 'Q' || to_CHAR(S.SCHEDULE_DATE, 'Q YYYY') AS QUARTER_NAME, TO_NUMBER(TO_CHAR(TRUNC(S.SCHEDULE_DATE,'Q'), 'YYYYMMDD')) AS QUARTER_ID
			FROM (SELECT ADD_MONTHS(TRUNC(p_BEGIN_DATE, 'MM'),(LEVEL-1) * v_MONTHS_IN_QUARTER) AS SCHEDULE_DATE
				FROM DUAL CONNECT BY LEVEL <= v_NUMBER_OF_QUARTERS) S;

	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_PRODUCTS
	(
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS

	BEGIN
		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT DISTINCT S.VALUE
			FROM SYSTEM_LABEL S
			WHERE MODEL_ID = 0
			  AND UPPER(MODULE) = UPPER('MarketExchange')
			  AND UPPER(KEY1) = UPPER('SEM')
			  AND UPPER(KEY2) = UPPER('CFD Product')
			  AND NVL(IS_HIDDEN,0) = 0
			ORDER BY S.VALUE;
	END;
	--------------------------------------------------------------------------------

	PROCEDURE GET_BUYERS
	(
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS

	BEGIN

		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT DISTINCT P.PSE_NAME AS BUYER_NAME, P.PSE_ID AS BUYER_ID
			FROM PURCHASING_SELLING_ENTITY P
			ORDER BY P.PSE_NAME;

	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_SELLERS
	(
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS

	BEGIN

		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT DISTINCT P.PSE_NAME AS SELLER_NAME, P.PSE_ID AS SELLER_ID
			FROM PURCHASING_SELLING_ENTITY P
			ORDER BY P.PSE_NAME;
	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_BILLING_ENTITIES
	(
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS
	BEGIN
		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT DISTINCT P.PSE_NAME AS BILLING_ENTITY_NAME, P.PSE_ID AS BILLING_ENTITY_ID
			FROM PURCHASING_SELLING_ENTITY P
			WHERE P.IS_BILLING_ENTITY = 1
			ORDER BY P.PSE_NAME;
	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_COMMODITIES
	(
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT REF_CURSOR
	) AS
	BEGIN
		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT C.COMMODITY_NAME, C.COMMODITY_ID
			FROM IT_COMMODITY C
			ORDER BY C.COMMODITY_NAME;
	END;
	----------------------------------------------------------
	FUNCTION VALIDATE_DEAL_CAPTURE_DETAILS
	(
		p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE,
		p_TXN_BEGIN_DATE IN DATE,
		p_TXN_END_DATE IN DATE,
		p_TXN_TYPE_FROM_FILTER IN VARCHAR2,
		p_TXN_TYPE_FROM_GRID IN VARCHAR2,
		p_CONTRACT_ID IN NUMBER,
		p_TRADE_NUMBER IN VARCHAR2,
		p_PRODUCT IN VARCHAR2,
		p_COMMODITY_ID IN NUMBER,
		p_MESSAGE OUT VARCHAR2
	)
	RETURN BOOLEAN
	AS
	p_MISSING_REQ_FIELD VARCHAR2(1024);
	TYPE ARRAY IS VARRAY(10) OF VARCHAR2(64);
	v_REQ_FIELDS ARRAY := ARRAY();
	v_COMMA_OR_AND VARCHAR2(8);
	v_ORIG_PRODUCT INTERCHANGE_TRANSACTION.AGREEMENT_TYPE%TYPE;

	BEGIN

	    IF p_TXN_TYPE_FROM_GRID IS NULL AND p_TXN_TYPE_FROM_FILTER = g_ALL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Transaction Type';
		END IF;

		IF p_CONTRACT_ID IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Contract Name';
		END IF;

		IF TRIM(p_TRADE_NUMBER) IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) :=  'Trade Number';
		END IF;

		IF p_PRODUCT IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Product';
		END IF;

		IF p_TXN_BEGIN_DATE IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Start Date';
		END IF;

		IF p_TXN_END_DATE IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'End Date';
		END IF;

		IF p_COMMODITY_ID IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Commodity';
		END IF;

		IF v_REQ_FIELDS.COUNT > 0 THEN
			FOR I IN v_REQ_FIELDS.FIRST .. v_REQ_FIELDS.LAST LOOP
				IF I = v_REQ_FIELDS.LAST THEN
					v_COMMA_OR_AND := ' and';
				ELSE
					v_COMMA_OR_AND := ',';
				END IF;

				IF I = v_REQ_FIELDS.FIRST THEN
					p_MISSING_REQ_FIELD := p_MISSING_REQ_FIELD || v_REQ_FIELDS(I);
				ELSE
					p_MISSING_REQ_FIELD := p_MISSING_REQ_FIELD || v_COMMA_OR_AND || ' ' || v_REQ_FIELDS(I);
				END IF;

			END LOOP;
			p_MESSAGE := 'One or more of the following required fields are missing: '
						 || UTL_TCP.CRLF
						 || p_MISSING_REQ_FIELD || '.';
			RETURN FALSE;
		END IF;

		IF p_TRANSACTION_ID IS NOT NULL THEN
			SELECT 	AGREEMENT_TYPE INTO v_ORIG_PRODUCT
			FROM   	INTERCHANGE_TRANSACTION
			WHERE 	TRANSACTION_ID = p_TRANSACTION_ID;

			IF v_ORIG_PRODUCT <> p_PRODUCT THEN
				p_MESSAGE := 'Cfd Product information cannot be changed for this transaction.';
				RETURN FALSE;
			END IF;
		END IF;

		RETURN TRUE;
	END VALIDATE_DEAL_CAPTURE_DETAILS;
	----------------------------------------------------------
	PROCEDURE PUT_DEAL_CAPTURE_INFO_RPT
	(
		p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE,
		p_TXN_BEGIN_DATE IN DATE,
		p_TXN_END_DATE IN DATE,
		p_TXN_TYPE_FROM_FILTER IN VARCHAR2,
		p_TXN_TYPE_FROM_GRID IN VARCHAR2,
		p_CONTRACT_ID IN NUMBER,
		p_TRADE_NUMBER IN VARCHAR2,
		p_PRODUCT IN VARCHAR2,
		p_COMMODITY_ID IN NUMBER,
		p_DIFF_PMT_INDEX_MP_ID IN NUMBER,
		p_DIFF_PMT_SPARE_NUM_1 IN NUMBER,
		p_DIFF_PMT_SPARE_NUM_2 IN NUMBER,
		p_DIFF_PMT_SPARE_STR IN VARCHAR2,
		p_DIFF_PMT_VAT_TXN_ID IN NUMBER,
		p_CC_VAT_TXN_ID IN NUMBER,
		p_CC_PI_MP_ID IN NUMBER,
		p_CC_PERCENTAGE IN NUMBER,
		p_CC_INDEX_MP_ID IN NUMBER,
		p_M2M_INDEX_MP_ID IN NUMBER,
		p_NETTING_AGREEMENT_PERCENTAGE IN NUMBER,
		p_EXECUTION_DATE IN DATE,
		p_TRADER IN VARCHAR2,
		p_ADDITIONAL_AUTHORISER IN VARCHAR2,
		p_STATUS OUT NUMBER,
		p_MESSAGE OUT VARCHAR2
	)
	AS
	v_TRANSACTION_ID INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE;
	v_TXN_NAME INTERCHANGE_TRANSACTION.TRANSACTION_NAME%TYPE;
	v_CONTRACT_NAME INTERCHANGE_CONTRACT.CONTRACT_NAME%TYPE;
	v_TXN_TYPE INTERCHANGE_TRANSACTION.TRANSACTION_TYPE%TYPE;
	v_PURCHASER_ID INTERCHANGE_TRANSACTION.PURCHASER_ID%TYPE;
	v_SELLER_ID INTERCHANGE_TRANSACTION.SELLER_ID%TYPE;
	v_IS_VALID BOOLEAN := FALSE;

	BEGIN
		p_STATUS := GA.SUCCESS;

		-- TODO: Allow users to create Entities SECURITY_CONTROLS.SET_IS_INTERFACE(TRUE)

		v_IS_VALID := VALIDATE_DEAL_CAPTURE_DETAILS(p_TRANSACTION_ID, p_TXN_BEGIN_DATE, p_TXN_END_DATE,
													p_TXN_TYPE_FROM_FILTER, p_TXN_TYPE_FROM_GRID,
													p_CONTRACT_ID, p_TRADE_NUMBER,
										 			p_PRODUCT, p_COMMODITY_ID, p_MESSAGE);

		-- Validate the Deal Capture details
		IF v_IS_VALID THEN

			-- Contract Name is used to create contract
			-- Copy Purchaser and Seller from the Contract to the deal.
			SELECT C.CONTRACT_NAME, C.PURCHASER_ID, C.SELLER_ID
			INTO v_CONTRACT_NAME, v_PURCHASER_ID, v_SELLER_ID
			FROM INTERCHANGE_CONTRACT C
			WHERE CONTRACT_ID = p_CONTRACT_ID;

			-- Transaction Type
			v_TXN_TYPE := NVL(p_TXN_TYPE_FROM_GRID, p_TXN_TYPE_FROM_FILTER);

			--Create transaction name as:  CFD:<P/S>:<Contract Name>:<Trade Number>
			v_TXN_NAME := 'CFD' || ':' || SUBSTR(v_TXN_TYPE, 1,1) || ':' || v_CONTRACT_NAME || ':' || p_TRADE_NUMBER;

			--ID.ID_FOR_COMMODITY('Power', TRUE, v_COMMODITY_ID);

			--Create the transaction
			EM.PUT_TRANSACTION(
					v_TRANSACTION_ID,--O_OID,
					v_TXN_NAME,--P_TRANSACTION_NAME,
					TRIM(p_TRADE_NUMBER),--P_TRANSACTION_ALIAS,
					'Transaction created by MarketManager via Deal Capture report',--P_TRANSACTION_DESC,
					NVL(p_TRANSACTION_ID,0),--P_TRANSACTION_ID,
					'Active',--P_TRANSACTION_STATUS
					v_TXN_TYPE,
					NULL,--P_TRANSACTION_IDENTIFIER,
					0, -- NVL(p_IS_MONTHLY_SHAPED, 0),--P_IS_FIRM,
					0,--P_IS_IMPORT_SCHEDULE,
					0,--P_IS_EXPORT_SCHEDULE,
					0,--P_IS_BALANCE_TRANSACTION,
					0,--P_IS_BID_OFFER,
					0,--P_IS_EXCLUDE_FROM_POSITION,
					0,--P_IS_IMPORT_EXPORT,
					0,--P_IS_DISPATCHABLE,
					'30 Minute',--P_TRANSACTION_INTERVAL,
					NULL,--P_EXTERNAL_INTERVAL,
					NULL,--P_ETAG_CODE,
					p_TXN_BEGIN_DATE,--P_BEGIN_DATE,
					p_TXN_END_DATE,--p_END_DATE,
					v_PURCHASER_ID,--P_PURCHASER_ID,
					v_SELLER_ID,--P_SELLER_ID,
					p_CONTRACT_ID,--P_CONTRACT_ID,
					0,--P_SC_ID,
					0,--P_POR_ID,
					0,--P_POD_ID,
					p_COMMODITY_ID,-- P_COMMODITY_ID,
					0,--P_SERVICE_TYPE_ID,
					0,--P_TX_TRANSACTION_ID,
					0,--P_PATH_ID,
					0,--P_LINK_TRANSACTION_ID,
					0,--P_EDC_ID,
					NULL, --P_PSE_ID,
					0,--P_ESP_ID,
					0,--P_POOL_ID,
					0,--P_SCHEDULE_GROUP_ID,
					0,--P_MARKET_PRICE_ID,
					0,--P_ZOR_ID,
					0,--P_ZOD_ID,
					0,--P_SOURCE_ID,
					0,--P_SINK_ID,
					0,--P_RESOURCE_ID,
					p_PRODUCT,--P_AGREEMENT_TYPE,
					NULL,--P_APPROVAL_TYPE,
					NULL,--P_LOSS_OPTION,
					NULL,--P_TRAIT_CATEGORY,
					0--P_TP_ID
					);

				IF v_TRANSACTION_ID > 0 THEN
					UPDATE SEM_CFD_DEAL SET
						DIFF_PMT_INDEX_MP_ID = CASE p_DIFF_PMT_INDEX_MP_ID WHEN 0 THEN NULL ELSE p_DIFF_PMT_INDEX_MP_ID END,
						DIFF_PMT_SPARE_NUM_1 = p_DIFF_PMT_SPARE_NUM_1,
						DIFF_PMT_SPARE_NUM_2 = p_DIFF_PMT_SPARE_NUM_2,
						DIFF_PMT_SPARE_STR = p_DIFF_PMT_SPARE_STR,
						DIFF_PMT_VAT_TXN_ID = CASE p_DIFF_PMT_VAT_TXN_ID WHEN 0 THEN NULL ELSE p_DIFF_PMT_VAT_TXN_ID END,
						CC_VAT_TXN_ID = CASE p_CC_VAT_TXN_ID WHEN 0 THEN NULL ELSE p_CC_VAT_TXN_ID END,
						CC_PI_MP_ID = CASE p_CC_PI_MP_ID WHEN 0 THEN NULL ELSE p_CC_PI_MP_ID END,
						CC_PERCENTAGE = p_CC_PERCENTAGE,
						CC_INDEX_MP_ID = CASE p_CC_INDEX_MP_ID WHEN 0 THEN NULL ELSE p_CC_INDEX_MP_ID END,
						M2M_INDEX_MP_ID = CASE p_M2M_INDEX_MP_ID WHEN k_ESTSEM_DUMMY_MP_ID THEN NULL ELSE p_M2M_INDEX_MP_ID END,
						EXECUTION_DATE = p_EXECUTION_DATE,
						TRADER = p_TRADER,
						ADDITIONAL_AUTHORISER = p_ADDITIONAL_AUTHORISER,
						NETTING_AGREEMENT_PERCENTAGE = p_NETTING_AGREEMENT_PERCENTAGE,
						LAST_UPDATE_DATE = SYSDATE,
						LAST_UPDATED_BY = SECURITY_INFO.CURRENT_USER
					WHERE TRANSACTION_ID = v_TRANSACTION_ID;

				IF SQL%NOTFOUND THEN
						INSERT INTO SEM_CFD_DEAL
						(
						TRANSACTION_ID,
						DIFF_PMT_INDEX_MP_ID,
						DIFF_PMT_SPARE_NUM_1,
						DIFF_PMT_SPARE_NUM_2,
						DIFF_PMT_SPARE_STR,
						DIFF_PMT_VAT_TXN_ID,
						CC_VAT_TXN_ID,
						CC_PI_MP_ID,
						CC_PERCENTAGE,
						CC_INDEX_MP_ID,
						M2M_INDEX_MP_ID,
						EXECUTION_DATE,
						TRADER,
						ADDITIONAL_AUTHORISER,
						NETTING_AGREEMENT_PERCENTAGE,
						CREATE_DATE,
						LAST_UPDATE_DATE,
						LAST_UPDATED_BY
						)
						VALUES
						(
						v_TRANSACTION_ID,
						CASE p_DIFF_PMT_INDEX_MP_ID WHEN 0 THEN NULL ELSE p_DIFF_PMT_INDEX_MP_ID END,
						p_DIFF_PMT_SPARE_NUM_1,
						p_DIFF_PMT_SPARE_NUM_2,
						p_DIFF_PMT_SPARE_STR,
						CASE p_DIFF_PMT_VAT_TXN_ID WHEN 0 THEN NULL ELSE p_DIFF_PMT_VAT_TXN_ID END,
						CASE p_CC_VAT_TXN_ID WHEN 0 THEN NULL ELSE p_CC_VAT_TXN_ID END,
						CASE p_CC_PI_MP_ID WHEN 0 THEN NULL ELSE p_CC_PI_MP_ID END,
						p_CC_PERCENTAGE,
						CASE p_CC_INDEX_MP_ID WHEN 0 THEN NULL ELSE p_CC_INDEX_MP_ID END,
						CASE p_M2M_INDEX_MP_ID WHEN k_ESTSEM_DUMMY_MP_ID THEN NULL ELSE p_M2M_INDEX_MP_ID END,
						p_EXECUTION_DATE,
						p_TRADER,
						p_ADDITIONAL_AUTHORISER,
						p_NETTING_AGREEMENT_PERCENTAGE,
						SYSDATE,
						SYSDATE,
						SECURITY_INFO.CURRENT_USER
						);
					END IF;
				END IF;
		END IF;

	END PUT_DEAL_CAPTURE_INFO_RPT;
	--------------------------------------------------------------------------------
	PROCEDURE GET_DEAL_CAPTURE_INFO_RPT
	(
		p_BEGIN_DATE IN DATE,
		p_END_DATE IN DATE,
		p_CONTRACT_TYPE IN VARCHAR2,
		p_TXN_TYPE_FROM_FILTER IN VARCHAR2,
		p_STATUS OUT NUMBER,
		p_CURSOR OUT REF_CURSOR
	) AS
    v_IDs ID_TABLE;

	BEGIN
		p_STATUS := GA.SUCCESS;

		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE('Select Electric Scheduling');

		OPEN p_CURSOR FOR
			SELECT 	I.TRANSACTION_ID,
					I.TRANSACTION_TYPE AS TXN_TYPE_FROM_GRID,
					I.CONTRACT_ID AS CONTRACT_ID,
					I.TRANSACTION_ALIAS AS TRADE_NUMBER,
					I.AGREEMENT_TYPE AS PRODUCT,
					I.BEGIN_DATE AS TXN_BEGIN_DATE,
					I.END_DATE AS TXN_END_DATE,
					I.COMMODITY_ID,
					SCD.DIFF_PMT_INDEX_MP_ID,
					SCD.DIFF_PMT_SPARE_NUM_1,
					SCD.DIFF_PMT_SPARE_NUM_2,
					SCD.DIFF_PMT_SPARE_STR,
					SCD.DIFF_PMT_VAT_TXN_ID,
					SCD.CC_VAT_TXN_ID,
					SCD.CC_PI_MP_ID,
					SCD.CC_PERCENTAGE,
					SCD.CC_INDEX_MP_ID,
					SCD.EXECUTION_DATE,
					SCD.TRADER,
					SCD.ADDITIONAL_AUTHORISER,
					NVL(SCD.M2M_INDEX_MP_ID, k_ESTSEM_DUMMY_MP_ID) AS M2M_INDEX_MP_ID,
					SCD.NETTING_AGREEMENT_PERCENTAGE
			FROM   	INTERCHANGE_TRANSACTION I,
					SEM_CFD_DEAL SCD,
					INTERCHANGE_CONTRACT IC,
					IT_COMMODITY C,
					TABLE(CAST(v_IDs AS ID_TABLE)) IDs
			WHERE 	(I.TRANSACTION_TYPE = p_TXN_TYPE_FROM_FILTER OR p_TXN_TYPE_FROM_FILTER = g_ALL)
					AND I.TRANSACTION_TYPE IN (g_TRANSACTION_TYPE_PURCHASE, g_TRANSACTION_TYPE_SALE)
					AND I.BEGIN_DATE <= p_END_DATE
					AND I.END_DATE >= p_BEGIN_DATE
					AND IC.CONTRACT_ID = I.CONTRACT_ID
					AND (IC.CONTRACT_TYPE = p_CONTRACT_TYPE OR p_CONTRACT_TYPE = g_ALL)
					AND IC.CONTRACT_TYPE IN (g_CONTRACT_TYPE_DIRECTED, g_CONTRACT_TYPE_NON_DIRECTED)
					AND C.COMMODITY_ID = I.COMMODITY_ID
					AND (IDs.ID = SD.g_ALL_DATA_ENTITY_ID OR I.TRANSACTION_ID = IDs.ID)
					AND SCD.TRANSACTION_ID = I.TRANSACTION_ID
			ORDER BY IC.CONTRACT_TYPE,
					 I.TRANSACTION_TYPE,
					 IC.CONTRACT_NAME,
					 I.TRANSACTION_ALIAS;

	END GET_DEAL_CAPTURE_INFO_RPT;
	------------------------------------------------------------------------------
	PROCEDURE DELETE_DEAL_CAPTURE_INFO_RPT
	(
		p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE,
		p_STATUS OUT NUMBER
	)
	IS

	BEGIN
		p_STATUS := GA.SUCCESS;

		DE.DEL_TRANSACTION(p_TRANSACTION_ID, p_STATUS);

	END DELETE_DEAL_CAPTURE_INFO_RPT;
	--------------------------------------------------------------------------------
	FUNCTION VALIDATE_CFD_TERMS
	(
		p_QUARTER_MONTH_ID IN NUMBER,
		p_CONTRACT_QUANTITY IN NUMBER,
		p_STRIKE_PRICE IN NUMBER,
		p_FILL_TEMPLATE IN VARCHAR2,
		p_TEMPLATE_ORDER IN NUMBER,
		p_MESSAGE OUT VARCHAR2
	)
	RETURN BOOLEAN
	AS
	p_MISSING_REQ_FIELD VARCHAR2(1024);
	TYPE ARRAY IS VARRAY(10) OF VARCHAR2(64);
	v_REQ_FIELDS ARRAY := ARRAY();
	v_COMMA_OR_AND VARCHAR2(8);
	BEGIN

	    IF p_QUARTER_MONTH_ID IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Month';
		END IF;

		IF p_CONTRACT_QUANTITY IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Contract Quantity';
		END IF;

		IF p_STRIKE_PRICE IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Strike Price';
		END IF;

		IF p_FILL_TEMPLATE IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) :=  'Fill Template';
		END IF;

		IF p_TEMPLATE_ORDER IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Template Order';
		END IF;

		IF v_REQ_FIELDS.COUNT > 0 THEN
			FOR I IN v_REQ_FIELDS.FIRST .. v_REQ_FIELDS.LAST LOOP
				IF I = v_REQ_FIELDS.LAST THEN
					v_COMMA_OR_AND := ' and';
				ELSE
					v_COMMA_OR_AND := ',';
				END IF;

				IF I = v_REQ_FIELDS.FIRST THEN
					p_MISSING_REQ_FIELD := p_MISSING_REQ_FIELD || v_REQ_FIELDS(I);
				ELSE
					p_MISSING_REQ_FIELD := p_MISSING_REQ_FIELD || v_COMMA_OR_AND || ' ' || v_REQ_FIELDS(I);
				END IF;

			END LOOP;
			p_MESSAGE := 'One or more of the following required fields are missing: '
						 || UTL_TCP.CRLF
						 || p_MISSING_REQ_FIELD || '.';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_CFD_TERMS_RPT
	(
		p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE,
		p_IS_MONTHLY_SHAPED IN INTERCHANGE_TRANSACTION.IS_FIRM%TYPE,
		p_STATUS OUT NUMBER,
		p_CURSOR OUT REF_CURSOR
	)
	IS

	BEGIN
		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT 	S.TRANSACTION_ID AS TXN_ID,
					TO_NUMBER(TO_CHAR(S.SCHEDULE_DATE, 'YYYYMMDD')) AS MONTH_ID,
					p_IS_MONTHLY_SHAPED AS IS_MONTHLY_SHAPED,
					S.CONTRACT_QUANTITY,
					S.STRIKE_PRICE,
					S.FILL_TEMPLATE,
					S.TEMPLATE_ORDER
			FROM 	SEM_TRANSACTION_CFD_TERMS S
			WHERE 	S.TRANSACTION_ID = p_TRANSACTION_ID
			ORDER BY S.SCHEDULE_DATE,
						S.CONTRACT_QUANTITY,
						S.STRIKE_PRICE;

	END GET_CFD_TERMS_RPT;
	--------------------------------------------------------------------------------
	PROCEDURE PUT_CFD_TERMS_RPT
	(
		p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE,
		p_MONTH_ID IN NUMBER,
		p_FILL_TEMPLATE IN SEM_TRANSACTION_CFD_TERMS.FILL_TEMPLATE%TYPE,
		p_TEMPLATE_ORDER IN SEM_TRANSACTION_CFD_TERMS.TEMPLATE_ORDER%TYPE,
		p_CONTRACT_QUANTITY IN SEM_TRANSACTION_CFD_TERMS.CONTRACT_QUANTITY%TYPE,
		p_STRIKE_PRICE IN SEM_TRANSACTION_CFD_TERMS.STRIKE_PRICE%TYPE,
		p_OLD_FILL_TEMPLATE IN SEM_TRANSACTION_CFD_TERMS.FILL_TEMPLATE%TYPE,
		p_STATUS OUT NUMBER,
		p_MESSAGE OUT VARCHAR2
	)
	IS
	v_SCHEDULE_DATE DATE;
	v_IS_VALID BOOLEAN := FALSE;
	BEGIN
		p_STATUS := GA.SUCCESS;

		-- Validate the required fields
		v_IS_VALID := VALIDATE_CFD_TERMS(p_MONTH_ID, p_CONTRACT_QUANTITY, p_STRIKE_PRICE, p_FILL_TEMPLATE, p_TEMPLATE_ORDER, p_MESSAGE);

		IF v_IS_VALID THEN

			v_SCHEDULE_DATE := TO_DATE(TO_CHAR(p_MONTH_ID),'YYYYMMDD');

			--Check if we have sufficient privileges to save changes
			IF NOT SD.GET_ENTITY_IS_ALLOWED('Update Electric Scheduling', p_TRANSACTION_ID) THEN
				   p_STATUS := 1;
				   p_MESSAGE := 'Insufficient privileges to save changes to transaction '||
								ENTITY_NAME_FROM_IDs(EC.ED_TRANSACTION, p_TRANSACTION_ID);
				   RETURN;
			END IF;

			-- Delete the existing records in the CFD Terms table
			DELETE FROM SEM_TRANSACTION_CFD_TERMS
			WHERE TRANSACTION_ID = p_TRANSACTION_ID
				  AND SCHEDULE_DATE = v_SCHEDULE_DATE
					AND FILL_TEMPLATE = p_OLD_FILL_TEMPLATE
					AND TEMPLATE_ORDER = p_TEMPLATE_ORDER;

			-- Insert new values in the CFD Terms table
			INSERT INTO SEM_TRANSACTION_CFD_TERMS
			VALUES (p_TRANSACTION_ID, v_SCHEDULE_DATE, p_FILL_TEMPLATE, p_TEMPLATE_ORDER, p_CONTRACT_QUANTITY, p_STRIKE_PRICE);

		END IF;
	END PUT_CFD_TERMS_RPT;
	------------------------------------------------------------------------------
	PROCEDURE DELETE_CFD_TERMS
	(
		p_TXN_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE,
		p_MONTH_ID IN NUMBER,
		p_FILL_TEMPLATE IN SEM_TRANSACTION_CFD_TERMS.FILL_TEMPLATE%TYPE,
		p_TEMPLATE_ORDER IN SEM_TRANSACTION_CFD_TERMS.TEMPLATE_ORDER%TYPE,
		p_STATUS OUT NUMBER
	)
	IS
	v_SCHEDULE_DATE DATE;
	BEGIN
		p_STATUS := GA.SUCCESS;
		v_SCHEDULE_DATE := TO_DATE(TO_CHAR(p_MONTH_ID),'YYYYMMDD');
		-- Delete the existing records in the CFD Terms table
		DELETE FROM SEM_TRANSACTION_CFD_TERMS
		WHERE TRANSACTION_ID = p_TXN_ID
			  AND SCHEDULE_DATE = v_SCHEDULE_DATE
				AND FILL_TEMPLATE = p_FILL_TEMPLATE
				AND TEMPLATE_ORDER = p_TEMPLATE_ORDER;

	END;
	------------------------------------------------------------------------------
	PROCEDURE APPLY_CFD_TERMS
	(
		p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE,
		p_STATUS OUT NUMBER
	) AS
	v_IDs NUMBER_COLLECTION;
	v_TXN_BEGIN_DATE DATE;
	v_TXN_END_DATE DATE;
	BEGIN

		p_STATUS := GA.SUCCESS;

		-- Get the transaction Begin and End Date
		SELECT T.BEGIN_DATE, T.END_DATE
		INTO v_TXN_BEGIN_DATE, v_TXN_END_DATE
		FROM INTERCHANGE_TRANSACTION T
		WHERE T.TRANSACTION_ID = p_TRANSACTION_ID;

		-- Clear IT_SCHEDULE table for the entire date range of the transaction
		DELETE FROM IT_SCHEDULE S
		WHERE TRANSACTION_ID = p_TRANSACTION_ID
			AND S.SCHEDULE_DATE BETWEEN TO_CUT(v_TXN_BEGIN_DATE, MM_SEM_UTIL.g_TZ)
			AND  TO_CUT(v_TXN_END_DATE, MM_SEM_UTIL.g_TZ);


		v_IDs := EI.GET_IDs_FROM_IDENTIFIER_EXTSYS(MM_SEM_UTIL.g_EXTID_SETTLEMENT_F, EC.ED_STATEMENT_TYPE, EC.ES_SEM, MM_SEM_UTIL.g_STATEMENT_TYPE_SETTLEMENT);
		FOR v_CFD_TERMS IN
			(SELECT S.TRANSACTION_ID,
				S.SCHEDULE_DATE,
				S.FILL_TEMPLATE,
				S.SCHEDULE_DATE AS BEGIN_DATE,
				LAST_DAY(S.SCHEDULE_DATE) AS END_DATE,
				S.CONTRACT_QUANTITY,
				S.STRIKE_PRICE ,
				T.START_INTERVAL_END,
				T.STOP_INTERVAL_END,
				T.INCLUDE_HOLIDAYS
			FROM SEM_TRANSACTION_CFD_TERMS S,
				INTERCHANGE_TRANSACTION IT,
				SEM_SCHEDULE_TEMPLATE T
			WHERE IT.TRANSACTION_ID = S.TRANSACTION_ID AND
				T.TEMPLATE_NAME = S.FILL_TEMPLATE AND
				S.TRANSACTION_ID = p_TRANSACTION_ID
			ORDER BY S.TEMPLATE_ORDER,
				S.FILL_TEMPLATE)
		LOOP
			-- Use the Sem Schedule Fill procedure for populating the IT_SCHEDULE table
			-- for the CFD Terms
			SEM_CFD_SCHEDULE_FILL.SCHEDULE_FILL(p_TRANSACTION_ID => p_TRANSACTION_ID,
												p_BEGIN_DATE => v_CFD_TERMS.BEGIN_DATE,
												p_END_DATE => v_CFD_TERMS.END_DATE,
												p_AS_OF_DATE => LOW_DATE,
												p_TIME_ZONE => MM_SEM_UTIL.g_TZ,
												p_AMOUNT => v_CFD_TERMS.CONTRACT_QUANTITY,
												p_PRICE => v_CFD_TERMS.STRIKE_PRICE,
												p_TEMPLATE => GET_TEMPLATE_STRING(v_CFD_TERMS.FILL_TEMPLATE),
												p_BEGIN_INTERVAL => v_CFD_TERMS.START_INTERVAL_END,
												p_END_INTERVAL => v_CFD_TERMS.STOP_INTERVAL_END,
												p_INCLUDE_HOLIDAYS => v_CFD_TERMS.INCLUDE_HOLIDAYS,
												p_SCHEDULE_TYPE => v_IDs(v_IDs.FIRST),
												p_STATUS => p_STATUS);
		END LOOP;
	END;
	--------------------------------------------------------------------------------
	FUNCTION VALIDATE_CFD_CONTRACT
	(
		p_CONTRACT_NAME IN VARCHAR2,
		p_CONTRACT_NUMBER IN  VARCHAR2,
		p_CONTRACT_TYPE IN VARCHAR2,
		p_MESSAGE OUT VARCHAR2
	)
	RETURN BOOLEAN
	AS
	p_MISSING_REQ_FIELD VARCHAR2(1024);
	TYPE ARRAY IS VARRAY(10) OF VARCHAR2(64);
	v_REQ_FIELDS ARRAY := ARRAY();
	v_COMMA_OR_AND VARCHAR2(8);
	BEGIN

	    IF p_CONTRACT_NAME IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Contract Name';
		END IF;

		IF p_CONTRACT_NUMBER IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Contract Number';
		END IF;

		IF p_CONTRACT_TYPE IS NULL THEN
			v_REQ_FIELDS.EXTEND();
			v_REQ_FIELDS(v_REQ_FIELDS.LAST) := 'Trade Type';
		END IF;

		IF v_REQ_FIELDS.COUNT > 0 THEN
			FOR I IN v_REQ_FIELDS.FIRST .. v_REQ_FIELDS.LAST LOOP
				IF I = v_REQ_FIELDS.LAST THEN
					v_COMMA_OR_AND := ' and';
				ELSE
					v_COMMA_OR_AND := ',';
				END IF;

				IF I = v_REQ_FIELDS.FIRST THEN
					p_MISSING_REQ_FIELD := p_MISSING_REQ_FIELD || v_REQ_FIELDS(I);
				ELSE
					p_MISSING_REQ_FIELD := p_MISSING_REQ_FIELD || v_COMMA_OR_AND || ' ' || v_REQ_FIELDS(I);
				END IF;

			END LOOP;
			p_MESSAGE := 'One or more of the following required fields are missing: '
						 || UTL_TCP.CRLF
						 || p_MISSING_REQ_FIELD || '.';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_CFD_CONTRACTS_RPT
	(
		p_BEGIN_DATE IN DATE,
		p_END_DATE IN DATE,
		p_RESTRICT_DATES_FILTER IN NUMBER,
		p_STATUS OUT NUMBER,
		p_CURSOR OUT REF_CURSOR
	) AS

	BEGIN
		p_STATUS := GA.SUCCESS;

		-- TODO: Allow users to create Entities SECURITY_CONTROLS.SET_IS_INTERFACE(TRUE)

		OPEN p_CURSOR FOR
			SELECT C.CONTRACT_ID,
					C.CONTRACT_NAME,
					C.CONTRACT_ALIAS AS CONTRACT_NUMBER,
					C.PURCHASER_ID AS BUYER_ID,
					C.SELLER_ID,
					C.BILLING_ENTITY_ID,
					C.CONTRACT_TYPE,
					C.BEGIN_DATE,
					C.END_DATE,
					C.AGREEMENT_TYPE,
					SEMC.CURRENCY,
					SEMC.JURISDICTION,
					SEMC.EXECUTION_DATE,
					SEMC.HEDGE_TYPE,
					SEMC.WD_TO_INVOICE,
					SEMC.WD_TO_PAY,
					SEMC.RECEIVABLES_CUTOFF_OPTION,
					SEMC.WD_TO_RECEIVABLES_CUTOFF,
					SEMC.CREDIT_COVER_REGIME
			FROM INTERCHANGE_CONTRACT C, SEM_CFD_CONTRACT SEMC
			WHERE  (p_RESTRICT_DATES_FILTER = 0 OR (C.BEGIN_DATE <= p_END_DATE AND C.END_DATE >= p_BEGIN_DATE))
					AND	C.CONTRACT_TYPE IN (g_CONTRACT_TYPE_DIRECTED, g_CONTRACT_TYPE_NON_DIRECTED)
					AND C.CONTRACT_ID = SEMC.CONTRACT_ID
			ORDER BY C.CONTRACT_NAME,
						C.CONTRACT_ALIAS;

	END;
	--------------------------------------------------------------------------------
	PROCEDURE PUT_CFD_CONTRACT_RPT
	(
		p_CONTRACT_ID IN INTERCHANGE_CONTRACT.CONTRACT_ID%TYPE,
		p_CONTRACT_NAME IN INTERCHANGE_CONTRACT.CONTRACT_NAME%TYPE,
		p_CONTRACT_NUMBER IN INTERCHANGE_CONTRACT.CONTRACT_ALIAS%TYPE,
		p_BUYER_ID IN INTERCHANGE_CONTRACT.PURCHASER_ID%TYPE,
		p_SELLER_ID IN INTERCHANGE_CONTRACT.SELLER_ID%TYPE,
		p_BILLING_ENTITY_ID IN INTERCHANGE_CONTRACT.BILLING_ENTITY_ID%TYPE,
		p_CONTRACT_TYPE IN INTERCHANGE_CONTRACT.CONTRACT_TYPE%TYPE,
		p_BEGIN_DATE IN DATE,
		p_END_DATE IN DATE,
		p_AGREEMENT_TYPE IN INTERCHANGE_CONTRACT.AGREEMENT_TYPE%TYPE,
		p_CURRENCY IN VARCHAR2,
		p_JURISDICTION IN VARCHAR2,
		p_EXECUTION_DATE IN DATE,
		p_HEDGE_TYPE IN VARCHAR2,
		p_WD_TO_INVOICE IN NUMBER,
		p_WD_TO_PAY IN NUMBER,
		p_RECEIVABLES_CUTOFF_OPTION IN VARCHAR2,
		p_WD_TO_RECEIVABLES_CUTOFF IN NUMBER,
		p_CREDIT_COVER_REGIME IN VARCHAR2,
		p_MESSAGE OUT VARCHAR2
	)
	AS
	v_CONTRACT_ID INTERCHANGE_CONTRACT.CONTRACT_ID%TYPE;
	v_IS_VALID BOOLEAN := FALSE;

	BEGIN

		-- TODO: Should this be included here SECURITY_CONTROLS.SET_IS_INTERFACE(TRUE);
		v_IS_VALID := VALIDATE_CFD_CONTRACT(p_CONTRACT_NAME, p_CONTRACT_NUMBER, p_CONTRACT_TYPE, p_MESSAGE);

		IF v_IS_VALID THEN
			IO.PUT_INTERCHANGE_CONTRACT
					(v_CONTRACT_ID, --OID
					p_CONTRACT_NAME, --CONTRACT_NAME
					p_CONTRACT_NUMBER, --CONTRACT_ALIAS
					NULL, --CONTRACT_DESC
					NVL(p_CONTRACT_ID, 0), -- CONTRACT_ID
					NULL, --CONTRACT_STATUS
					p_BEGIN_DATE, -- BEGIN_DATE
					p_END_DATE, -- END_DATE
					0, --IS_EVERGREEN
					p_CONTRACT_TYPE, -- CONTRACT_TYPE
					p_BILLING_ENTITY_ID, -- BILLING_ENTITY_ID
					p_BUYER_ID, -- PURCHASER_ID
					p_SELLER_ID, -- SELLER_ID
					0, -- SOURCE_ID
					0, -- SINK_ID
					0, -- POR_ID
					0, -- POD_ID
					0, -- SC_ID
					p_AGREEMENT_TYPE, -- AGREEMENT_TYPE
					NULL, -- APPROVAL_TYPE
					NULL, -- MARKET_TYPE
					NULL, -- LOSS_OPTION
					NULL, -- CONTRACT_FILE_NAME
					0, -- PIPELINE_ID IN NUMBER,
					NULL); -- PIPELINE_TARIFF_TYPE

				IF v_CONTRACT_ID > 0 THEN
					-- Add the Currency attribute
					UPDATE SEM_CFD_CONTRACT SET
						CURRENCY = p_CURRENCY,
						JURISDICTION = p_JURISDICTION,
						EXECUTION_DATE = p_EXECUTION_DATE,
						HEDGE_TYPE = p_HEDGE_TYPE,
						WD_TO_INVOICE = p_WD_TO_INVOICE,
						WD_TO_PAY = p_WD_TO_PAY,
						RECEIVABLES_CUTOFF_OPTION = p_RECEIVABLES_CUTOFF_OPTION,
						WD_TO_RECEIVABLES_CUTOFF = p_WD_TO_RECEIVABLES_CUTOFF,
						CREDIT_COVER_REGIME = p_CREDIT_COVER_REGIME,
						LAST_UPDATE_DATE = SYSDATE,
						LAST_UPDATED_BY = SECURITY_INFO.CURRENT_USER
					WHERE CONTRACT_ID = p_CONTRACT_ID;

					IF SQL%NOTFOUND THEN
						INSERT INTO SEM_CFD_CONTRACT (
						CONTRACT_ID,
						CURRENCY,
						JURISDICTION,
						EXECUTION_DATE,
						HEDGE_TYPE,
						WD_TO_INVOICE,
						WD_TO_PAY,
						RECEIVABLES_CUTOFF_OPTION,
						WD_TO_RECEIVABLES_CUTOFF,
						CREDIT_COVER_REGIME,
						CREATE_DATE,
						LAST_UPDATE_DATE,
						LAST_UPDATED_BY
						)
						VALUES (
						v_CONTRACT_ID,
						p_CURRENCY,
						p_JURISDICTION,
						p_EXECUTION_DATE,
						p_HEDGE_TYPE,
						p_WD_TO_INVOICE,
						p_WD_TO_PAY,
						p_RECEIVABLES_CUTOFF_OPTION,
						p_WD_TO_RECEIVABLES_CUTOFF,
						p_CREDIT_COVER_REGIME,
						SYSDATE,
						SYSDATE,
						SECURITY_INFO.CURRENT_USER
						);
					END IF;
				END IF;
		END IF;

	END;
	------------------------------------------------------------------------------
	PROCEDURE DELETE_CFD_CONTRACT
	(
		p_CONTRACT_ID IN INTERCHANGE_CONTRACT.CONTRACT_ID%TYPE,
		p_STATUS OUT NUMBER
	)
	IS
	BEGIN
		p_STATUS := GA.SUCCESS;

		DE.DEL_INTERCHANGE_CONTRACT(p_CONTRACT_ID, p_STATUS);
	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_ESTSMP_COEFFICIENT_RPT
	(
		p_BEGIN_DATE IN DATE,
		p_END_DATE IN DATE,
		p_STATUS OUT NUMBER,
		p_CURSOR OUT REF_CURSOR
	) AS

	BEGIN
		p_STATUS := GA.SUCCESS;

		-- TODO: Allow users to create Entities SECURITY_CONTROLS.SET_IS_INTERFACE(TRUE)

		OPEN p_CURSOR FOR
			SELECT S.PRODUCT,
				TO_NUMBER(TO_CHAR(S.SCHEDULE_DATE, 'YYYYMMDD')) AS QUARTER_ID,
				S.ALPHA,
				S.BETA,
				S.GAMMA,
				S.DELTA,
				S.EPSILON,
				S.ZETA,
				S.ETA,
				S.PI
			FROM MM_CFD_ESTSEM_COEFF S
			WHERE S.SCHEDULE_DATE BETWEEN TRUNC(p_BEGIN_DATE, 'Q') AND TRUNC(p_END_DATE, 'Q')
			ORDER BY 1,2;

	END;
	--------------------------------------------------------------------------------
	PROCEDURE PUT_ESTSMP_COEFFICIENT_RPT
	(
		p_PRODUCT IN VARCHAR2,
		p_QUARTER_ID IN NUMBER,
		p_ALPHA IN NUMBER,
		p_BETA IN NUMBER,
		p_GAMMA IN NUMBER,
		p_DELTA IN NUMBER,
		p_EPSILON	IN NUMBER,
		p_ZETA IN NUMBER,
		p_ETA IN NUMBER,
		p_PI IN NUMBER,
		p_OLD_PRODUCT IN VARCHAR2,
		p_OLD_QUARTER_ID IN NUMBER,
		p_STATUS OUT NUMBER
	)
	IS
	BEGIN
		p_STATUS := GA.SUCCESS;

		-- Try to update an existing record
		UPDATE MM_CFD_ESTSEM_COEFF S SET
			S.PRODUCT = p_PRODUCT,
			S.SCHEDULE_DATE = TO_DATE(p_QUARTER_ID, 'YYYYMMDD'),
			S.ALPHA = NVL(p_ALPHA, 0),
			S.BETA = NVL(p_BETA, 0),
			S.GAMMA = NVL(p_GAMMA, 0),
			S.DELTA = NVL(p_DELTA, 0),
			S.EPSILON = NVL(p_EPSILON, 0),
			S.ZETA = NVL(p_ZETA, 0),
			S.ETA = NVL(p_ETA, 0),
			S.PI = NVL(p_PI, 0)
		WHERE S.PRODUCT = LTRIM(RTRIM(p_OLD_PRODUCT))
			AND S.SCHEDULE_DATE = TO_DATE(p_OLD_QUARTER_ID, 'YYYYMMDD');

		-- If the previous update did not find a match, then insert a new record.
		IF SQL%NOTFOUND THEN
			INSERT INTO MM_CFD_ESTSEM_COEFF
				(PRODUCT,
				SCHEDULE_DATE,
				ALPHA,
				BETA,
				GAMMA,
				DELTA,
				EPSILON,
				ZETA,
				ETA,
				PI)
			VALUES(
				p_PRODUCT,
				TO_DATE(p_QUARTER_ID, 'YYYYMMDD'),
				NVL(p_ALPHA, 0),
				NVL(p_BETA, 0),
				NVL(p_GAMMA, 0),
				NVL(p_DELTA, 0),
				NVL(p_EPSILON, 0),
				NVL(p_ZETA, 0),
				NVL(p_ETA, 0),
				NVL(p_PI, 0));
		END IF;
	END;
	------------------------------------------------------------------------------
	PROCEDURE DELETE_ESTSMP_COEFFICIENT
	(
		p_PRODUCT IN VARCHAR2,
		p_QUARTER_ID IN NUMBER,
		p_STATUS OUT NUMBER
	)
	IS
	v_SCHEDULE_DATE DATE;
	BEGIN
		p_STATUS := GA.SUCCESS;
		v_SCHEDULE_DATE := TO_DATE(TO_CHAR(p_QUARTER_ID),'YYYYMMDD');

		DELETE FROM MM_CFD_ESTSEM_COEFF
		WHERE PRODUCT = p_PRODUCT
			  AND SCHEDULE_DATE = v_SCHEDULE_DATE;

	END;
	------------------------------------------------------------------------------

	PROCEDURE GET_INDEX_PRICE_LIST_W_ESTSEM
	(
		p_STATUS OUT NUMBER,
		p_CURSOR OUT SYS_REFCURSOR
	) AS
	BEGIN
		p_STATUS := GA.SUCCESS;
		OPEN p_CURSOR FOR
		SELECT '<ESTSEM>' AS INDEX_PRICE_NAME,
			k_ESTSEM_DUMMY_MP_ID AS INDEX_PRICE_ID
		FROM DUAL
		UNION ALL
		SELECT MARKET_PRICE_NAME AS INDEX_PRICE_NAME,
			MARKET_PRICE_ID AS INDEX_PRICE_ID
		FROM MARKET_PRICE
		WHERE MARKET_PRICE_INTERVAL = 'Month'
		ORDER BY 1;
	END GET_INDEX_PRICE_LIST_W_ESTSEM;
	------------------------------------------------------------------------------
	PROCEDURE GET_INDEX_PRICE_LIST
	(
		p_INTERVAL IN VARCHAR2,
		p_STATUS OUT NUMBER,
		p_CURSOR OUT SYS_REFCURSOR
	) AS
	BEGIN
		p_STATUS := GA.SUCCESS;
		OPEN p_CURSOR FOR
		SELECT NULL "INDEX_PRICE_NAME", 0 "INDEX_PRICE_ID" FROM DUAL
		UNION ALL
		SELECT MARKET_PRICE_NAME "INDEX_PRICE_NAME", MARKET_PRICE_ID "INDEX_PRICE_ID"
		FROM MARKET_PRICE
		WHERE MARKET_PRICE_INTERVAL = p_INTERVAL
		ORDER BY 1 NULLS FIRST;
	END GET_INDEX_PRICE_LIST;
	------------------------------------------------------------------------------
	PROCEDURE GET_VAT_TXN_LIST
	(
		p_STATUS OUT NUMBER,
		p_CURSOR OUT SYS_REFCURSOR
	) AS
	BEGIN
		p_STATUS := GA.SUCCESS;
		OPEN p_CURSOR FOR
		SELECT NULL TRANSACTION_NAME, 0 TRANSACTION_ID FROM DUAL
		UNION ALL
		SELECT TRANSACTION_NAME, TRANSACTION_ID
		FROM INTERCHANGE_TRANSACTION
		WHERE TRANSACTION_TYPE = 'VAT Schedule'
			AND TRANSACTION_INTERVAL = 'Day'
		ORDER BY 1 NULLS FIRST;
	END GET_VAT_TXN_LIST;
	------------------------------------------------------------------------------

	PROCEDURE GET_AGREEMENT_FOR_TYPE_FILTER
	(
	  p_CONTRACT_TYPE_FILTER IN VARCHAR2,
	  p_CURSOR OUT SYS_REFCURSOR
	) IS
	BEGIN

	   OPEN p_CURSOR FOR
		  SELECT MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER AS AGREEMENT_TYPE FROM DUAL
		  UNION
		  SELECT AGREEMENT_TYPE
		  FROM INTERCHANGE_CONTRACT C
		  WHERE (C.CONTRACT_TYPE = p_CONTRACT_TYPE_FILTER OR p_CONTRACT_TYPE_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER)
			 AND C.CONTRACT_TYPE IN (MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_DIRECTED, MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_NON_DIRECTED)
		  ORDER BY 1;

	END GET_AGREEMENT_FOR_TYPE_FILTER;

	------------------------------------------------------------------------------
	PROCEDURE GET_CP_FOR_TYPE_FILTER
	(
	p_CONTRACT_TYPE_FILTER IN VARCHAR2,
	p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
	p_REPORT_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT SYS_REFCURSOR
	) IS
	BEGIN
		--DO NOT REMOVE p_STATUS!  p_REPORT_NAME WILL CEASE TO WORK!
		p_STATUS := GA.SUCCESS;

	   OPEN p_CURSOR FOR
		  SELECT MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER AS COUNTERPARTY_NAME, MM_SEM_CFD_UTIL.k_ALL_INT_FILTER AS CP_ID  FROM DUAL
		  UNION ALL
		  SELECT * FROM
		  (
			 SELECT COUNTERPARTY_NAME, CP_ID FROM
			 (
				SELECT
				   (SELECT PSE_NAME FROM PURCHASING_SELLING_ENTITY WHERE PSE_ID = C.PURCHASER_ID) AS COUNTERPARTY_NAME,
				   C.PURCHASER_ID AS CP_ID
				FROM INTERCHANGE_CONTRACT C, SEM_CFD_CONTRACT SEMC
				WHERE (C.CONTRACT_TYPE = p_CONTRACT_TYPE_FILTER OR p_CONTRACT_TYPE_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER)
					AND C.CONTRACT_TYPE IN (MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_DIRECTED, MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_NON_DIRECTED)
					AND (C.AGREEMENT_TYPE = p_AGREEMENT_TYPE_FILTER OR p_AGREEMENT_TYPE_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER)
					AND SEMC.CONTRACT_ID = C.CONTRACT_ID
					--This block uses the Report Name to filter entities by CC Regime for some CC reports.
					AND (p_REPORT_NAME IS NULL OR p_REPORT_NAME NOT IN ('INTRA_MONTH_THRESHOLD','REQUIRED_CREDIT_COVER') OR
						(p_REPORT_NAME = 'INTRA_MONTH_THRESHOLD' AND SEMC.CREDIT_COVER_REGIME = MM_SEM_CFD_UTIL.k_CC_REGIME_ESTSEM) OR
						(p_REPORT_NAME = 'REQUIRED_CREDIT_COVER' AND SEMC.CREDIT_COVER_REGIME IN (MM_SEM_CFD_UTIL.k_CC_REGIME_ESTSEM, MM_SEM_CFD_UTIL.k_CC_REGIME_INDEX, MM_SEM_CFD_UTIL.k_CC_REGIME_PERCENTAGE)))
				UNION
				SELECT
				   (SELECT PSE_NAME FROM PURCHASING_SELLING_ENTITY WHERE PSE_ID = C.SELLER_ID),
				   C.SELLER_ID
				FROM INTERCHANGE_CONTRACT C, SEM_CFD_CONTRACT SEMC
				WHERE (C.CONTRACT_TYPE = p_CONTRACT_TYPE_FILTER OR p_CONTRACT_TYPE_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER)
					AND C.CONTRACT_TYPE IN (MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_DIRECTED, MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_NON_DIRECTED)
					AND (C.AGREEMENT_TYPE = p_AGREEMENT_TYPE_FILTER OR p_AGREEMENT_TYPE_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER)
					AND SEMC.CONTRACT_ID = C.CONTRACT_ID
					--This block uses the Report Name to filter entities by CC Regime for some CC reports.
					AND (p_REPORT_NAME IS NULL OR p_REPORT_NAME NOT IN ('INTRA_MONTH_THRESHOLD','REQUIRED_CREDIT_COVER') OR
						(p_REPORT_NAME = 'INTRA_MONTH_THRESHOLD' AND SEMC.CREDIT_COVER_REGIME = MM_SEM_CFD_UTIL.k_CC_REGIME_ESTSEM) OR
						(p_REPORT_NAME = 'REQUIRED_CREDIT_COVER' AND SEMC.CREDIT_COVER_REGIME IN (MM_SEM_CFD_UTIL.k_CC_REGIME_ESTSEM, MM_SEM_CFD_UTIL.k_CC_REGIME_INDEX, MM_SEM_CFD_UTIL.k_CC_REGIME_PERCENTAGE)))
			 )
			 ORDER BY UPPER(COUNTERPARTY_NAME)
		  );

	END GET_CP_FOR_TYPE_FILTER;

	------------------------------------------------------------------------------
	PROCEDURE GET_CONTRACTS_FILTER
	(
	   p_CONTRACT_TYPE_FILTER IN VARCHAR2,
	   p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
	   p_COUNTERPARTY_ID_FILTER IN NUMBER,
	   p_REPORT_NAME IN VARCHAR2,
	   p_STATUS OUT NUMBER,
	   p_CURSOR OUT SYS_REFCURSOR
	) IS
	BEGIN
		--DO NOT REMOVE p_STATUS!  p_REPORT_NAME WILL CEASE TO WORK!
		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
		SELECT CONTRACT_NAME, C.CONTRACT_ID
		FROM INTERCHANGE_CONTRACT C, SEM_CFD_CONTRACT SEMC
		WHERE (C.CONTRACT_TYPE = p_CONTRACT_TYPE_FILTER OR p_CONTRACT_TYPE_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER)
			AND C.CONTRACT_TYPE IN (MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_DIRECTED, MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_NON_DIRECTED)
			AND (C.AGREEMENT_TYPE = p_AGREEMENT_TYPE_FILTER OR p_AGREEMENT_TYPE_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER)
			AND (p_COUNTERPARTY_ID_FILTER = MM_SEM_CFD_UTIL.k_ALL_INT_FILTER OR C.PURCHASER_ID = p_COUNTERPARTY_ID_FILTER OR C.SELLER_ID = p_COUNTERPARTY_ID_FILTER)
			AND SEMC.CONTRACT_ID = C.CONTRACT_ID
			--This block uses the Report Name to filter contracts by CC Regime for some CC reports.
			AND (p_REPORT_NAME IS NULL OR p_REPORT_NAME NOT IN ('INTRA_MONTH_THRESHOLD','REQUIRED_CREDIT_COVER') OR
				(p_REPORT_NAME = 'INTRA_MONTH_THRESHOLD' AND SEMC.CREDIT_COVER_REGIME = MM_SEM_CFD_UTIL.k_CC_REGIME_ESTSEM) OR
				(p_REPORT_NAME = 'REQUIRED_CREDIT_COVER' AND SEMC.CREDIT_COVER_REGIME IN (MM_SEM_CFD_UTIL.k_CC_REGIME_ESTSEM, MM_SEM_CFD_UTIL.k_CC_REGIME_INDEX, MM_SEM_CFD_UTIL.k_CC_REGIME_PERCENTAGE)))
		ORDER BY UPPER(CONTRACT_NAME);

	END GET_CONTRACTS_FILTER;
	------------------------------------------------------------------------------
END MM_SEM_CFD_UI;
/
