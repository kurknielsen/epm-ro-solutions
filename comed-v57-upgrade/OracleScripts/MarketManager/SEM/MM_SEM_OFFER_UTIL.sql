CREATE OR REPLACE PACKAGE MM_SEM_OFFER_UTIL IS
-- RSA -- 04/04/2007 -- Utility package for SEM Offer
-------------------------------------------------------
-- Data Structure for importing traits
-------------------------------------------------------
TYPE STRING_SET IS TABLE OF BOOLEAN INDEX BY VARCHAR2(64);
TYPE MAP_OF_STRING_SETS IS TABLE OF STRING_SET INDEX BY VARCHAR2(64);

-- Attribute Details
TYPE ATTR_DETAILS IS RECORD (
  TRAIT_GROUP_ID    TRANSACTION_TRAIT.TRAIT_GROUP_ID%TYPE,
  TRAIT_IDX         TRANSACTION_TRAIT.TRAIT_INDEX%TYPE,
  ATTR_TYPE         SMALLINT);
-- Attribute Details Map
TYPE ATTR_DETAILS_MAP IS TABLE OF ATTR_DETAILS INDEX BY VARCHAR2(64);

-- Tag Details
TYPE TAG_DETAILS IS RECORD (
  TAG_TYPE              SMALLINT,
  INTERVAL              SMALLINT,
  ATTR_INFO_MAP       ATTR_DETAILS_MAP);
-- Tag Details Map
TYPE TYPE_OF_OPERATIONS IS TABLE OF TAG_DETAILS INDEX BY VARCHAR2(64);
TYPE MAP_OF_SET_NUMBERS IS TABLE OF BINARY_INTEGER INDEX BY VARCHAR2(64);

------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR;

FUNCTION PARSE_SUBMISSION_XML
  (
  p_XML IN XMLType,
  p_XPATH IN VARCHAR2 := '//error|//fatal'
  ) RETURN VARCHAR2;

FUNCTION GET_TRANSACTION_ID_FOR_RES
  (
  p_TRANSACTION_TYPE IN VARCHAR2,
  p_EXTERNAL_ACCOUNT_NAME IN VARCHAR2,
  p_GATE_WINDOW IN VARCHAR2,
  p_RESPONSE IN XMLTYPE
  ) RETURN NUMBER;

FUNCTION GET_STANDING
(
    p_CUT_TIME       IN DATE,
    p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN XMLTYPE;

FUNCTION GET_EXTERNAL_ID
(
    p_CUT_DATE       DATE,
    p_TRANSACTION_ID INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN XMLType;

/*
** GET_GATE_WINDOW is used to retrieve the agreement_type attribute
** from the INTERCHANGE_TRANSACTION table when trying to process
** a gate_window specific offere
*/
FUNCTION GET_GATE_WINDOW
(
    p_TRANSACTION_ID INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN INTERCHANGE_TRANSACTION.AGREEMENT_TYPE%TYPE;

FUNCTION GET_FORECAST
(
    p_CUT_BEGIN_DATE IN DATE,
    p_CUT_END_DATE   IN DATE,
    p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN XMLType;

FUNCTION GET_SECONDARY_FORECAST
(
    p_CUT_BEGIN_DATE IN DATE,
    p_CUT_END_DATE   IN DATE,
    p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN XMLTYPE;

FUNCTION GET_LOAD_GEN_PQ_CURVE
(
    p_CUT_DATE       DATE,
    p_TRANSACTION_ID INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN XMLType;

FUNCTION GET_LOAD_GEN_NOM_PROFILE
(
    p_CUT_BEGIN_DATE IN DATE,
    p_CUT_END_DATE   IN DATE,
    p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN XMLType;

FUNCTION GET_LOAD_GEN_2ND_NOM_PROFILE
(
    p_CUT_BEGIN_DATE IN DATE,
    p_CUT_END_DATE   IN DATE,
    p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN XMLTYPE;

FUNCTION GET_LOAD_GEN_FUEL_USE
(
    p_CUT_BEGIN_DATE IN DATE,
    p_CUT_END_DATE   IN DATE,
    p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN XMLTYPE;

FUNCTION GET_LOAD_GEN_DEC_PRICE
(
    p_CUT_BEGIN_DATE IN DATE,
    p_CUT_END_DATE   IN DATE,
    p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE
) RETURN XMLType;

PROCEDURE IMPORT_TRAITS
  (
  p_RESPONSE IN XMLTYPE,
  p_TRADING_DATE IN DATE,
  p_IS_SERIES IN BOOLEAN,
  p_TXN_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE,
  p_ALLOWED_TAGS IN MAP_OF_STRING_SETS,
  p_TAG_OPERATIONS IN TYPE_OF_OPERATIONS,
  p_START_HR NUMBER,
    p_START_INT NUMBER,
    p_END_HR NUMBER,
    p_END_INT NUMBER,
  p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER
  );

PROCEDURE PURGE_IT_TRAIT_SCHEDULE
  (
  p_TRADING_DATE DATE,
  p_TXN_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE);

-- Tag Types
g_TAG_TYPE_NO_OP CONSTANT SMALLINT := 0;
g_TAG_TYPE_DATA CONSTANT SMALLINT := 1;
g_TAG_TYPE_CONTAINER CONSTANT SMALLINT := 2;
g_TAG_TYPE_SERIES CONSTANT SMALLINT := 3;

-- Attribute Types
g_ATTR_TYPE_STRING CONSTANT SMALLINT := 0;
g_ATTR_TYPE_BOOLEAN CONSTANT SMALLINT := 1;

-- Interval Types
g_DAILY_INTERVAL CONSTANT SMALLINT := 0;
g_30MINUTES_INTERVAL CONSTANT SMALLINT := 1;
g_30MINUTES_NOOP_INTERVAL CONSTANT SMALLINT := 2;

g_TI_DEFAULT CONSTANT PLS_INTEGER := 1;

-- Query Offer Tags/Attributes
g_TAG_SEM_GEN_OFFER CONSTANT VARCHAR2(64) := 'sem_gen_offer';
g_TAG_SEM_INTERCONNECTOR_OFFER CONSTANT VARCHAR2(64) := 'sem_interconnector_offer';
g_TAG_SEM_LOAD_OFFER CONSTANT VARCHAR2(64) := 'sem_demand_offer';
g_TAG_IDENTIFIER CONSTANT VARCHAR2(64) := 'identifier';
g_TAG_FORECAST CONSTANT VARCHAR2(64) := 'forecast';
g_TAG_FUEL_USE CONSTANT VARCHAR2(64) := 'fuel_use';
g_TAG_SECONDARY_FORECAST CONSTANT VARCHAR2(64) := 'secondary_forecast';
g_TAG_PRICE_MAKER_DETAIL CONSTANT VARCHAR2(64) := 'price_maker_detail';
g_TAG_PRICE_TAKER_DETAIL CONSTANT VARCHAR2(64) := 'price_taker_detail';
g_TAG_PQ_CURVE CONSTANT VARCHAR2(64) := 'pq_curve';
g_TAG_POINT CONSTANT VARCHAR2(64) := 'point';
g_TAG_STARTUP_COST CONSTANT VARCHAR2(64) := 'startup_cost';
g_TAG_NO_LOAD_COST CONSTANT VARCHAR2(64) := 'no_load_cost';
g_TAG_NOMINATION_PROFILE CONSTANT VARCHAR2(64) := 'nomination_profile';
g_TAG_SEC_NOMINATION_PROFILE CONSTANT VARCHAR2(64) := 'secondary_nomination_profile';
g_TAG_DECREMENTAL_PRICE CONSTANT VARCHAR2(64) := 'decremental_price';
g_TAG_PUMP_STORAGE_DETAIL CONSTANT VARCHAR2(64) := 'pump_storage_detail';
g_TAG_ENERGY_LIMIT_DETAIL CONSTANT VARCHAR2(64) := 'energy_limit_detail';
g_TAG_ENERGY_LIMIT_PERIOD_FLAG CONSTANT VARCHAR2(64) := 'energy_limit_period_flag';
g_TAG_INTERCONNECTOR_CAP CONSTANT VARCHAR2(64) := 'interconnector_capacity';
g_TAG_STANDING CONSTANT VARCHAR2(64) := 'standing';
g_TAG_SHUTDOWN_COST CONSTANT VARCHAR2(64) := 'shutdown_cost';
g_TAG_MESSAGES CONSTANT VARCHAR2(64) := 'messages';

g_ATTR_EXT_ID CONSTANT VARCHAR2(64) := 'external_id';
g_ATTR_PRICE CONSTANT VARCHAR2(64) := 'price';
g_ATTR_QTY CONSTANT VARCHAR2(64) := 'quantity';
g_ATTR_HOT_STARTUP_COST CONSTANT VARCHAR2(64) := 'hot';
g_ATTR_WARM_STARTUP_COST CONSTANT VARCHAR2(64) := 'warm';
g_ATTR_COLD_STARTUP_COST CONSTANT VARCHAR2(64) := 'cold';
g_ATTR_VALUE CONSTANT VARCHAR2(64) := 'value';
g_ATTR_START_HR CONSTANT VARCHAR2(64) := 'start_hr';
g_ATTR_END_HR CONSTANT VARCHAR2(64) := 'end_hr';
g_ATTR_START_INT CONSTANT VARCHAR2(64) := 'start_int';
g_ATTR_END_INT CONSTANT VARCHAR2(64) := 'end_int';
g_ATTR_MAX_MW CONSTANT VARCHAR2(64) := 'maximum_mw';
g_ATTR_MIN_MW CONSTANT VARCHAR2(64) := 'minimum_mw';
g_ATTR_MIN_OP_MW CONSTANT VARCHAR2(64) := 'minimum_output_mw';
g_ATTR_TARGET_RESV_LEVEL_MWH CONSTANT VARCHAR2(64) := 'target_reservoir_level_mwh';
g_ATTR_TARGET_RESV_LEVEL_PCT CONSTANT VARCHAR2(64) := 'target_reservoir_level_percent';
g_ATTR_PRIOR_DAY_END_RESV_MWH CONSTANT VARCHAR2(64) := 'prior_day_end_reservoir_level_mwh';
g_ATTR_OPER_RESV_CAP_LIMIT_MWH CONSTANT VARCHAR2(64) := 'operational_reservoir_capacity_limit_mwh';
g_ATTR_SPIN_GENERATION_COST CONSTANT VARCHAR2(64) := 'spin_generation_cost';
g_ATTR_SPIN_PUMP_COST CONSTANT VARCHAR2(64) := 'spin_pump_cost';
g_ATTR_MINIMUM_GENERATION_COST CONSTANT VARCHAR2(64) := 'minimum_generation_cost';
g_ATTR_LIMIT_FLAG CONSTANT VARCHAR2(64) := 'limit_flag';
g_ATTR_LIMIT_MWH CONSTANT VARCHAR2(64) := 'limit_mwh';
g_ATTR_LIMIT_FACTOR CONSTANT VARCHAR2(64) := 'limit_factor';
g_ATTR_MAX_IMPORT_CAPACITY_MW CONSTANT VARCHAR2(64) := 'maximum_import_capacity_mw';
g_ATTR_MAX_EXPORT_CAPACITY_MW CONSTANT VARCHAR2(64) := 'maximum_export_capacity_mw';
g_ATTR_EXPIRY CONSTANT VARCHAR2(64) := 'expiry_date';
g_ATTR_TYPE CONSTANT VARCHAR2(64) := 'type';

g_XPATH_START_HR CONSTANT VARCHAR2(64) := '/@start_hr';
g_XPATH_END_HR CONSTANT VARCHAR2(64) := '/@end_hr';
g_XPATH_START_INTERVAL CONSTANT VARCHAR2(64) := '/@start_int';
g_XPATH_END_INTERVAL CONSTANT VARCHAR2(64) := '/@end_int';

END MM_SEM_OFFER_UTIL;
/
