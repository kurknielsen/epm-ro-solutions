CREATE OR REPLACE PACKAGE BODY MM_SEM_CFD_CREDIT IS

	c_CFD_PRODUCT_ID                 CONSTANT NUMBER := EI.GET_ID_FROM_NAME('CfD Products', EC.ED_PRODUCT);
	c_CFD_COMPONENT_ID               CONSTANT NUMBER := EI.GET_ID_FROM_NAME('CFD', EC.ED_COMPONENT);

----------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.1 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------
FUNCTION GET_TODAY RETURN DATE IS
BEGIN
	--Override return value to set "Today" to a different date for testing.
	RETURN SYSDATE;
	--RETURN DATE '2008-03-12';
END;
----------------------------------------------------------------------------------------
FUNCTION GET_LAST_DAY_WITH_SMP RETURN DATE IS
	v_CUT_DATE DATE;
	v_SMP_PRICE_ID NUMBER := MM_SEM_UTIL.GET_MARKET_PRICE_ID('System Marginal Price Euro', 'Exchange Rate', '30 Minute', FALSE);
BEGIN
	SELECT MAX(PRICE_DATE)
	INTO v_CUT_DATE
	FROM MARKET_PRICE_VALUE
	WHERE MARKET_PRICE_ID = v_SMP_PRICE_ID
		AND PRICE_CODE = 'P';

	-- Override return value to set this date to a different one for testing.
	RETURN TRUNC(FROM_CUT(v_CUT_DATE, MM_SEM_CFD_UTIL.k_TIME_ZONE)- 1/86400);
	--RETURN DATE '2008-02-29';
END GET_LAST_DAY_WITH_SMP;
----------------------------------------------------------------------------------------
FUNCTION GET_PRICE
	(
	v_ASSESSMENT_DATE DATE,
	v_MONTH DATE,
	v_PRICE_ID MARKET_PRICE.MARKET_PRICE_ID%TYPE,
	v_PRICE MARKET_PRICE_VALUE.PRICE%TYPE
	)
RETURN NUMBER IS
v_RESULT NUMBER;
v_ASSESSMENT_BEGIN_DATE DATE;
v_ASSESSMENT_END_DATE DATE;
BEGIN
	-- First day of assessment month
	v_ASSESSMENT_BEGIN_DATE := FIRST_DAY(v_ASSESSMENT_DATE);
	-- Last day of the current quarter
	v_ASSESSMENT_END_DATE := ADD_MONTHS(TRUNC(v_ASSESSMENT_DATE, 'Q'),3) - 1;
	IF v_MONTH NOT BETWEEN v_ASSESSMENT_BEGIN_DATE AND v_ASSESSMENT_END_DATE THEN
		v_RESULT := v_PRICE;
	ELSE
		-- In the current quarter, commodity price is the average of the price in each month
		-- remaining in the quarter (including the current month)
		-- As an example, assume an assessment date in August. As of the assessment date,
		-- the August forward commodity price is 10, and the September commodity price is
		-- 12. The ESTSEM calculation would use 11 (the average of 10 and 12) for the
		-- effective commodity price for both August and September.
		SELECT AVG(V.PRICE) AS AVG_PRICE
		INTO v_RESULT
		FROM MARKET_PRICE_VALUE V
		WHERE V.MARKET_PRICE_ID = v_PRICE_ID
			AND V.PRICE_CODE = 'A'
			AND V.PRICE_DATE BETWEEN v_ASSESSMENT_BEGIN_DATE AND v_ASSESSMENT_END_DATE
			AND V.AS_OF_DATE = LOW_DATE;
	END IF;
	RETURN v_RESULT;
END GET_PRICE;
-------------------------------------------------------------
PROCEDURE FILL_ESTSEM_DAILY
	(
	p_ASSESSMENT_DATE IN DATE
	) AS
	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
	v_EXCH_EUR_TO_USD_ID NUMBER := EI.GET_ID_FROM_IDENTIFIER(MM_SEM_CFD_UTIL.k_PRICE_EXCH_EUR_TO_USD, EC.ED_MARKET_PRICE);
	v_EXCH_EUR_TO_GBP_ID NUMBER := EI.GET_ID_FROM_IDENTIFIER(MM_SEM_CFD_UTIL.k_PRICE_EXCH_EUR_TO_GBP, EC.ED_MARKET_PRICE);
	v_PRICE_NAT_GAS_ID NUMBER := EI.GET_ID_FROM_NAME(MM_SEM_CFD_UTIL.k_PRICE_NAT_GAS, EC.ED_MARKET_PRICE);
	v_PRICE_LOW_SULPH_ID NUMBER := EI.GET_ID_FROM_NAME(MM_SEM_CFD_UTIL.k_PRICE_LOW_SULPHUR_FUEL_USD, EC.ED_MARKET_PRICE);
	v_PRICE_GASOIL_CARGO_ID NUMBER := EI.GET_ID_FROM_NAME(MM_SEM_CFD_UTIL.k_PRICE_GASOIL_CARGO_USD, EC.ED_MARKET_PRICE);
	v_PRICE_GASOIL_FRONTLINE_ID NUMBER := EI.GET_ID_FROM_NAME(MM_SEM_CFD_UTIL.k_PRICE_GASOIL_FRONTLINE_USD, EC.ED_MARKET_PRICE);
	v_PRICE_CARBON_ID NUMBER := EI.GET_ID_FROM_NAME(MM_SEM_CFD_UTIL.k_PRICE_CARBON, EC.ED_MARKET_PRICE);

	v_EXCH_EUR_TO_USD_RATE NUMBER;
	v_EXCH_EUR_TO_GBP_RATE NUMBER;

	v_MIN_INTERVAL_NUM NUMBER := GET_INTERVAL_NUMBER('MM');

	FUNCTION GET_CURRENT_EXCH_RATE (p_PRICE_ID IN NUMBER, p_PRICE_NAME IN VARCHAR2) RETURN NUMBER IS
		v_RTN NUMBER;
	BEGIN
		SELECT PRICE
		INTO v_RTN
		FROM MARKET_PRICE_VALUE
		WHERE MARKET_PRICE_ID = p_PRICE_ID
			AND PRICE_CODE = 'A'
			AND PRICE_DATE = TRUNC(p_ASSESSMENT_DATE)
			AND AS_OF_DATE = MM_SEM_CFD_UTIL.k_LOW_DATE;
		RETURN v_RTN;
	EXCEPTION 
		WHEN NO_DATA_FOUND THEN --Error on Select
			RAISE_APPLICATION_ERROR(-20001, 'No Exchange Rate defined for ' || 
				TO_CHAR(p_ASSESSMENT_DATE, 'DD-MON-YYYY') || '.  Market Price Name: "' ||
				p_PRICE_NAME || '"');
	END GET_CURRENT_EXCH_RATE;
BEGIN

	--Get the exchange rates needed for the Assessment Date.
	v_EXCH_EUR_TO_USD_RATE := GET_CURRENT_EXCH_RATE(v_EXCH_EUR_TO_USD_ID, MM_SEM_CFD_UTIL.k_PRICE_EXCH_EUR_TO_USD);
	v_EXCH_EUR_TO_GBP_RATE := GET_CURRENT_EXCH_RATE(v_EXCH_EUR_TO_GBP_ID, MM_SEM_CFD_UTIL.k_PRICE_EXCH_EUR_TO_GBP);

	--For a given assessment date, we fill fourteen months back, and as far into the future as we have coefficients.
	v_BEGIN_DATE := ADD_MONTHS(TRUNC(p_ASSESSMENT_DATE, 'MM'), -14);

	--SCHEDULE DATE is a quarter, so set the END DATE to the end of the quarter.
	SELECT ADD_MONTHS(MAX(SCHEDULE_DATE), 3) - 1
	INTO v_END_DATE
	FROM MM_CFD_ESTSEM_COEFF;

	MERGE INTO SEM_CFD_ESTSEM_DAILY A
	USING
		(SELECT ASSESSMENT_DATE, PRODUCT, PRICE_MONTH, CURRENCY, CUT_BEGIN_DATE, CUT_END_DATE,
			(ALPHA
				+ BETA * CALC_NAT_GAS
				+ GAMMA * CALC_LOW_SULPH
				+ DELTA * CALC_NAT_GAS * CALC_LOW_SULPH
				+ EPSILON * (CALC_GASOIL_FRONTLINE + CALC_GASOIL_CARGO)
				+ ZETA * CALC_CARBON
				+ ETA * CALC_NAT_GAS * CALC_CARBON) * CASE CURRENCY WHEN MM_SEM_CFD_UTIL.k_CURRENCY_EUR THEN 1 ELSE v_EXCH_EUR_TO_GBP_RATE END "ESTSEM",
			ALPHA, BETA, GAMMA, DELTA, EPSILON, ZETA, ETA, PI,
			NAT_GAS, LOW_SULPH, GASOIL_FRONTLINE, GASOIL_CARGO, CARBON
		FROM
			(SELECT p_ASSESSMENT_DATE "ASSESSMENT_DATE",
				COEFF.PRODUCT,
				SDT.LOCAL_MONTH_TRUNC_DATE "PRICE_MONTH",
				CURR.ENCY "CURRENCY",
				TO_CUT(SDT.LOCAL_MONTH_TRUNC_DATE + 1/48, MM_SEM_CFD_UTIL.k_TIME_ZONE) "CUT_BEGIN_DATE",
				TO_CUT(ADD_MONTHS(SDT.LOCAL_MONTH_TRUNC_DATE, 1), MM_SEM_CFD_UTIL.k_TIME_ZONE) "CUT_END_DATE",
				COEFF.ALPHA,
				COEFF.BETA,
				COEFF.GAMMA,
				COEFF.DELTA,
				COEFF.EPSILON,
				COEFF.ZETA,
				COEFF.ETA,
				COEFF.PI,
				-- Actual Commodity Price
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_NAT_GAS_ID THEN PRICE ELSE 0 END
					* 1/v_EXCH_EUR_TO_GBP_RATE), 0)/100.0 "NAT_GAS",
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_LOW_SULPH_ID THEN PRICE ELSE 0 END
					* 1/v_EXCH_EUR_TO_USD_RATE), 0) "LOW_SULPH",
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_GASOIL_FRONTLINE_ID THEN PRICE ELSE 0 END
					* 1/v_EXCH_EUR_TO_USD_RATE), 0) "GASOIL_FRONTLINE",
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_GASOIL_CARGO_ID THEN PRICE ELSE 0 END
					* 1/v_EXCH_EUR_TO_USD_RATE), 0) "GASOIL_CARGO",
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_CARBON_ID THEN PRICE ELSE 0 END), 0) "CARBON",
				-- Calculated Commodity Price
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_NAT_GAS_ID
					THEN GET_PRICE(p_ASSESSMENT_DATE, SDT.LOCAL_MONTH_TRUNC_DATE, MPV.MARKET_PRICE_ID, PRICE) ELSE 0 END
							* 1/v_EXCH_EUR_TO_GBP_RATE), 0)/100.0 "CALC_NAT_GAS",
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_LOW_SULPH_ID
					THEN GET_PRICE(p_ASSESSMENT_DATE, SDT.LOCAL_MONTH_TRUNC_DATE, MPV.MARKET_PRICE_ID, PRICE) ELSE 0 END
							* 1/v_EXCH_EUR_TO_USD_RATE), 0) "CALC_LOW_SULPH",
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_GASOIL_FRONTLINE_ID
					THEN GET_PRICE(p_ASSESSMENT_DATE, SDT.LOCAL_MONTH_TRUNC_DATE, MPV.MARKET_PRICE_ID, PRICE) ELSE 0 END
							* 1/v_EXCH_EUR_TO_USD_RATE), 0) "CALC_GASOIL_FRONTLINE",
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_GASOIL_CARGO_ID
					THEN GET_PRICE(p_ASSESSMENT_DATE, SDT.LOCAL_MONTH_TRUNC_DATE, MPV.MARKET_PRICE_ID, PRICE) ELSE 0 END
							* 1/v_EXCH_EUR_TO_USD_RATE), 0) "CALC_GASOIL_CARGO",
				NVL(SUM(CASE WHEN MPV.MARKET_PRICE_ID = v_PRICE_CARBON_ID
					THEN GET_PRICE(p_ASSESSMENT_DATE, SDT.LOCAL_MONTH_TRUNC_DATE, MPV.MARKET_PRICE_ID, PRICE) ELSE 0 END), 0) "CALC_CARBON"
			FROM SYSTEM_DATE_TIME SDT, MM_CFD_ESTSEM_COEFF COEFF, MARKET_PRICE_VALUE MPV,
				(SELECT CASE LEVEL WHEN 1 THEN MM_SEM_CFD_UTIL.k_CURRENCY_EUR ELSE MM_SEM_CFD_UTIL.k_CURRENCY_GBP END "ENCY"
				FROM DUAL CONNECT BY LEVEL <= 2) CURR
			WHERE SDT.TIME_ZONE = MM_SEM_CFD_UTIL.k_TIME_ZONE
				AND SDT.DATA_INTERVAL_TYPE = 2
				AND SDT.DAY_TYPE = '1'
				AND SDT.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_MIN_INTERVAL_NUM
				AND COEFF.SCHEDULE_DATE = SDT.LOCAL_QUARTER_TRUNC_DATE
				AND MPV.MARKET_PRICE_ID IN (v_PRICE_NAT_GAS_ID, v_PRICE_LOW_SULPH_ID, v_PRICE_GASOIL_CARGO_ID, v_PRICE_GASOIL_FRONTLINE_ID, v_PRICE_CARBON_ID)
				AND MPV.PRICE_CODE = 'A'
				AND MPV.PRICE_DATE = SDT.LOCAL_MONTH_TRUNC_DATE
				AND MPV.AS_OF_DATE = MM_SEM_CFD_UTIL.k_LOW_DATE
			GROUP BY PRODUCT, LOCAL_MONTH_TRUNC_DATE, CURR.ENCY, TO_CUT(SDT.LOCAL_MONTH_TRUNC_DATE + 1/48, MM_SEM_CFD_UTIL.k_TIME_ZONE), TO_CUT(ADD_MONTHS(SDT.LOCAL_MONTH_TRUNC_DATE, 1), MM_SEM_CFD_UTIL.k_TIME_ZONE), ALPHA, BETA, GAMMA, DELTA, EPSILON, ZETA, ETA, PI)
		) B
	ON (A.ASSESSMENT_DATE = B.ASSESSMENT_DATE AND A.PRODUCT = B.PRODUCT AND A.PRICE_MONTH = B.PRICE_MONTH AND A.CURRENCY = B.CURRENCY)
	WHEN MATCHED THEN
		UPDATE SET
			A.CUT_BEGIN_DATE = B.CUT_BEGIN_DATE,
			A.CUT_END_DATE = B.CUT_END_DATE,
			A.ESTSEM = B.ESTSEM,
			A.ALPHA = B.ALPHA,
			A.BETA = B.BETA,
			A.GAMMA = B.GAMMA,
			A.DELTA = B.DELTA,
			A.EPSILON = B.EPSILON,
			A.ZETA = B.ZETA,
			A.ETA = B.ETA,
			A.PI = B.PI,
			A.NAT_GAS = B.NAT_GAS,
			A.LOW_SULPHUR_FUEL = B.LOW_SULPH,
			A.GASOIL_FRONTLINE = B.GASOIL_FRONTLINE,
			A.GASOIL_CARGO = B.GASOIL_CARGO,
			A.CARBON = B.CARBON
	WHEN NOT MATCHED THEN
		INSERT VALUES (B.ASSESSMENT_DATE,
			B.PRODUCT,
			B.PRICE_MONTH,
			B.CURRENCY,
			B.CUT_BEGIN_DATE,
			B.CUT_END_DATE,
			B.ESTSEM,
			B.ALPHA,
			B.BETA,
			B.GAMMA,
			B.DELTA,
			B.EPSILON,
			B.ZETA,
			B.ETA,
			B.PI,
			B.NAT_GAS,
			B.LOW_SULPH,
			B.GASOIL_FRONTLINE,
			B.GASOIL_CARGO,
			B.CARBON);

END FILL_ESTSEM_DAILY;
-------------------------------------------------------------
PROCEDURE GET_ESTSEM_SUMMARY_RPT
	(
    p_ASSESSMENT_DATE IN DATE,
	p_CURRENCY_FILTER IN VARCHAR2,
	p_CURSOR IN OUT SYS_REFCURSOR
	) AS
BEGIN

	OPEN p_CURSOR FOR
	SELECT * FROM SEM_CFD_ESTSEM_DAILY A
	WHERE A.ASSESSMENT_DATE = TRUNC(p_ASSESSMENT_DATE)
		AND (p_CURRENCY_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER OR A.CURRENCY = p_CURRENCY_FILTER)
	ORDER BY CURRENCY, ASSESSMENT_DATE, PRODUCT, PRICE_MONTH;

END GET_ESTSEM_SUMMARY_RPT;
-------------------------------------------------------------
FUNCTION GET_ESTSEM_ASSESSMENT_DATE RETURN DATE IS
	v_DATE DATE;
	v_COUNT BINARY_INTEGER;
BEGIN
	v_DATE := TRUNC(GET_TODAY);
	--v_DATE := TRUNC(GET_TODAY - 6/24);
	SELECT COUNT(1) INTO v_COUNT FROM SEM_CFD_ESTSEM_DAILY WHERE ASSESSMENT_DATE = v_DATE AND ROWNUM = 1;
	IF v_COUNT < 1 THEN
		RAISE_APPLICATION_ERROR(-20001, 'ESTSEM has not been calculated for ' || TO_CHAR(v_DATE, 'DD-MON-YYYY'));
	END IF;
	RETURN v_DATE;
END GET_ESTSEM_ASSESSMENT_DATE;
-------------------------------------------------------------
FUNCTION GET_ESTSEMM_ASSESSMENT_DATE RETURN DATE IS
	v_TODAY DATE;
	v_THIS_MONTH_BEGIN DATE;
	v_PREV_MONTH_BEGIN DATE;
	v_COUNT BINARY_INTEGER;
	v_DATE DATE;
BEGIN
	v_TODAY := TRUNC(GET_TODAY);
	v_THIS_MONTH_BEGIN := TRUNC(v_TODAY, 'MM');
	v_PREV_MONTH_BEGIN := ADD_MONTHS(v_THIS_MONTH_BEGIN, -1);

	--Get this month's 11th WD.
	v_DATE := MM_SEM_CREDIT_SHADOW.ADD_DAYS(v_THIS_MONTH_BEGIN - 1, 11, 'WD');

	--If this day has not yet occurred, get last month's 11th WD instead.
	IF v_TODAY <= v_DATE THEN
		v_DATE := MM_SEM_CREDIT_SHADOW.ADD_DAYS(v_PREV_MONTH_BEGIN - 1, 11, 'WD');
	END IF;

	SELECT COUNT(1) INTO v_COUNT FROM SEM_CFD_ESTSEM_DAILY WHERE ASSESSMENT_DATE = v_DATE AND ROWNUM = 1;
	IF v_COUNT < 1 THEN
		RAISE_APPLICATION_ERROR(-20001, 'ESTSEM has not been calculated for ' || TO_CHAR(v_DATE, 'DD-MON-YYYY'));
	END IF;
	RETURN v_DATE;
END GET_ESTSEMM_ASSESSMENT_DATE;
-------------------------------------------------------------
PROCEDURE CACHE_CREDIT_DATA
	(
	p_CONTRACT_IDS IN VARCHAR2,
	p_CONTRACT_TYPE_FILTER IN VARCHAR2,
	p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
	p_COUNTERPARTY_ID_FILTER IN NUMBER,
	p_CURRENCY_FILTER IN VARCHAR2,
	p_STATEMENT_TYPE IN NUMBER
	) AS
	v_THIS_MONTH_INVOICE_DATE DATE;
	v_THIS_MONTH_PAY_DATE DATE;
	v_THIS_MONTH_BEGIN DATE;
	v_PREV_MONTH_BEGIN DATE;
	v_TODAY DATE;
	v_WD_TO_CUTOFF PLS_INTEGER;
	v_DATA SEM_CFD_CREDIT_TEMP%ROWTYPE;
	v_LAST_DAY_WITH_SMP DATE := GET_LAST_DAY_WITH_SMP;
	v_VAT_SCHEDULE_DATE DATE := TRUNC(GET_TODAY) + 1/86400;

	v_TRANSACTION_IDS NUMBER_COLLECTION;

	CURSOR c_DEALS IS
		SELECT SEMC.*,
			T.TRANSACTION_ID,
			T.TRANSACTION_NAME,
			T.TRANSACTION_ALIAS,
			C.BILLING_ENTITY_ID,
			SEMD.CC_VAT_TXN_ID,
			T.AGREEMENT_TYPE
		FROM TABLE(CAST(v_TRANSACTION_IDS AS NUMBER_COLLECTION)) X,
			INTERCHANGE_CONTRACT C,
			SEM_CFD_CONTRACT SEMC,
			INTERCHANGE_TRANSACTION T,
			SEM_CFD_DEAL SEMD
		WHERE T.TRANSACTION_ID = X.COLUMN_VALUE
			AND C.CONTRACT_ID = T.CONTRACT_ID
			AND C.CONTRACT_ID = SEMC.CONTRACT_ID
			AND SEMD.TRANSACTION_ID = T.TRANSACTION_ID;

BEGIN

	--Get some initial variables.
	v_TODAY := TRUNC(GET_TODAY);
	v_THIS_MONTH_BEGIN := TRUNC(v_TODAY, 'MM');
	v_PREV_MONTH_BEGIN := ADD_MONTHS(v_THIS_MONTH_BEGIN, -1);

	v_TRANSACTION_IDS := MM_SEM_CFD_DIFF_PMTS.GET_FILTERED_TRANSACTION_IDS(v_PREV_MONTH_BEGIN, ADD_MONTHS(v_TODAY, 12), p_CONTRACT_IDS, p_CONTRACT_TYPE_FILTER, p_AGREEMENT_TYPE_FILTER, p_COUNTERPARTY_ID_FILTER, p_CURRENCY_FILTER);

	--Clear out temp table.
	EXECUTE IMMEDIATE 'TRUNCATE TABLE SEM_CFD_CREDIT_TEMP DROP STORAGE';

	--For each CFD Contract
	FOR v_DEAL IN c_DEALS LOOP
		v_DATA.TRANSACTION_ID := v_DEAL.TRANSACTION_ID;
		v_DATA.TRANSACTION_NAME := v_DEAL.TRANSACTION_NAME;
		v_DATA.TRANSACTION_ALIAS := v_DEAL.TRANSACTION_ALIAS;
		v_DATA.CONTRACT_ID := v_DEAL.CONTRACT_ID;
		v_DATA.RECEIVABLES_CUTOFF_OPTION := v_DEAL.RECEIVABLES_CUTOFF_OPTION;
		v_DATA.BILLING_ENTITY_ID := v_DEAL.BILLING_ENTITY_ID;
		v_DATA.CURRENCY := v_DEAL.CURRENCY;
		v_DATA.VAT_TXN_ID := v_DEAL.CC_VAT_TXN_ID;
		v_DATA.AGREEMENT_TYPE := v_DEAL.AGREEMENT_TYPE;

		v_THIS_MONTH_INVOICE_DATE := MM_SEM_CREDIT_SHADOW.ADD_DAYS(v_THIS_MONTH_BEGIN, v_DEAL.WD_TO_INVOICE, 'WD');
		v_THIS_MONTH_PAY_DATE := MM_SEM_CREDIT_SHADOW.ADD_DAYS(v_THIS_MONTH_INVOICE_DATE, v_DEAL.WD_TO_PAY, 'WD');

		--------------------------------------------
		-- Get the Billed Not Paid Period
		--------------------------------------------
		--If we are between the invoice date and the pay date, then last month is invoice not paid.
		IF v_TODAY BETWEEN v_THIS_MONTH_INVOICE_DATE + 1 AND v_THIS_MONTH_PAY_DATE THEN
			v_DATA.BILLED_NOT_PAID_BEGIN := v_PREV_MONTH_BEGIN;
			v_DATA.BILLED_NOT_PAID_END := LAST_DAY(v_PREV_MONTH_BEGIN);
		--Otherwise there is no Invoiced Not Paid period.
		ELSE
			v_DATA.BILLED_NOT_PAID_BEGIN := NULL;
			v_DATA.BILLED_NOT_PAID_END := NULL;
		END IF;

		--------------------------------------------
		-- Get the Consumed Not Billed Period
		--------------------------------------------
		v_DATA.CONSUMED_NOT_BILLED_BEGIN := NVL(v_DATA.BILLED_NOT_PAID_END + 1,
			CASE WHEN v_TODAY > v_THIS_MONTH_INVOICE_DATE THEN v_THIS_MONTH_BEGIN ELSE v_PREV_MONTH_BEGIN END);

		IF v_DEAL.RECEIVABLES_CUTOFF_OPTION = MM_SEM_CFD_UTIL.k_CUTOFF_INDEX_UNKNOWN THEN
			v_DATA.CONSUMED_NOT_BILLED_END := v_LAST_DAY_WITH_SMP;
		ELSE
			IF v_DEAL.RECEIVABLES_CUTOFF_OPTION = MM_SEM_CFD_UTIL.k_CUTOFF_END_OF_MONTH THEN
				v_WD_TO_CUTOFF := 0;
			ELSE
				v_WD_TO_CUTOFF := v_DEAL.WD_TO_RECEIVABLES_CUTOFF;
			END IF;
			v_DATA.CONSUMED_NOT_BILLED_END := MM_SEM_CREDIT_SHADOW.ADD_DAYS(TRUNC(v_LAST_DAY_WITH_SMP + 1, 'MM') - 1, v_WD_TO_CUTOFF, 'WD');
		END IF;

		--------------------------------------------
		-- Get the Future Date
		--------------------------------------------
		v_DATA.FUTURE_BEGIN := COALESCE(v_DATA.CONSUMED_NOT_BILLED_END + 1,
			v_DATA.BILLED_NOT_PAID_END + 1,
			CASE WHEN v_TODAY > v_THIS_MONTH_INVOICE_DATE THEN v_THIS_MONTH_BEGIN ELSE v_PREV_MONTH_BEGIN END);

		IF v_DATA.CONSUMED_NOT_BILLED_END = v_DATA.BILLED_NOT_PAID_END OR v_DATA.CONSUMED_NOT_BILLED_END <= v_DATA.CONSUMED_NOT_BILLED_BEGIN THEN
			v_DATA.CONSUMED_NOT_BILLED_BEGIN := NULL;
			v_DATA.CONSUMED_NOT_BILLED_END := NULL;
		END IF;

		--Get the CUT Dates for joins on the IT_SCHEDULE table.
		UT.CUT_DATE_RANGE(v_DATA.BILLED_NOT_PAID_BEGIN, v_DATA.BILLED_NOT_PAID_END, MM_SEM_CFD_UTIL.k_TIME_ZONE, v_DATA.CUT_BILLED_NOT_PAID_BEGIN, v_DATA.CUT_BILLED_NOT_PAID_END);
		UT.CUT_DATE_RANGE(v_DATA.CONSUMED_NOT_BILLED_BEGIN, v_DATA.CONSUMED_NOT_BILLED_END, MM_SEM_CFD_UTIL.k_TIME_ZONE, v_DATA.CUT_CONSUMED_NOT_BILLED_BEGIN, v_DATA.CUT_CONSUMED_NOT_BILLED_END);
		v_DATA.CUT_FUTURE_BEGIN := TO_CUT(v_DATA.FUTURE_BEGIN, MM_SEM_CFD_UTIL.k_TIME_ZONE) + 1/86400;

		--Insert the record
		INSERT INTO SEM_CFD_CREDIT_TEMP VALUES v_DATA;
	END LOOP;

	--Update all the records with their Receivables Amounts and VAT.
	IF p_STATEMENT_TYPE IS NOT NULL THEN
		UPDATE SEM_CFD_CREDIT_TEMP CRED
		SET BILLED_NOT_PAID_AMT =
				--Actual Billed Not Paid Amount according to regular schedule.
				ROUND((SELECT SUM(FC.CHARGE_AMOUNT)
				FROM BILLING_STATEMENT B, FORMULA_CHARGE_ITERATOR FCI, FORMULA_CHARGE FC
				WHERE B.ENTITY_ID = CRED.BILLING_ENTITY_ID
					AND B.PRODUCT_ID = c_CFD_PRODUCT_ID
					AND B.COMPONENT_ID = c_CFD_COMPONENT_ID
					AND B.STATEMENT_TYPE = p_STATEMENT_TYPE
					AND B.STATEMENT_STATE = GA.INTERNAL_STATE
					AND B.STATEMENT_DATE BETWEEN CRED.BILLED_NOT_PAID_BEGIN AND CRED.BILLED_NOT_PAID_END
					AND FCI.CHARGE_ID = B.CHARGE_ID
					AND FCI.ITERATOR2 = TO_CHAR(CRED.TRANSACTION_ID)
					AND FC.CHARGE_ID = B.CHARGE_ID
					AND FC.ITERATOR_ID = FCI.ITERATOR_ID),2)
				-
				--Payment Shortfall Amount from any Disputes for this month.
				(SELECT NVL(SUM(PAYMENT_SHORTFALL_AMOUNT),0)
				FROM SEM_CFD_ADJUSTMENT
				WHERE ADJUSTMENT_TYPE = MM_SEM_CFD_ADJUSTMENT.c_ADJ_TYPE_DIFF
					AND TRANSACTION_ID = CRED.TRANSACTION_ID
					AND REFERENCE_DATE = CRED.BILLED_NOT_PAID_BEGIN
					AND STATEMENT_TYPE_ID = p_STATEMENT_TYPE
					AND APPLY_SHORTFALL_TO_CC = 1),
			CONSUMED_NOT_BILLED_AMT =
				ROUND((SELECT SUM(FC.CHARGE_AMOUNT)
				FROM BILLING_STATEMENT B, FORMULA_CHARGE_ITERATOR FCI, FORMULA_CHARGE FC
				WHERE B.ENTITY_ID = CRED.BILLING_ENTITY_ID
					AND B.PRODUCT_ID = c_CFD_PRODUCT_ID
					AND B.COMPONENT_ID = c_CFD_COMPONENT_ID
					AND B.STATEMENT_TYPE = p_STATEMENT_TYPE
					AND B.STATEMENT_STATE = GA.INTERNAL_STATE
					AND B.STATEMENT_DATE BETWEEN CRED.CONSUMED_NOT_BILLED_BEGIN AND CRED.CONSUMED_NOT_BILLED_END
					AND FCI.CHARGE_ID = B.CHARGE_ID
					AND FCI.ITERATOR2 = TO_CHAR(CRED.TRANSACTION_ID)
					AND FC.CHARGE_ID = B.CHARGE_ID
					AND FC.ITERATOR_ID = FCI.ITERATOR_ID),2),
			VAT_RATE =
				(SELECT VAT.AMOUNT
				FROM IT_SCHEDULE VAT
				WHERE VAT.TRANSACTION_ID = CRED.VAT_TXN_ID
					AND VAT.SCHEDULE_TYPE = MM_SEM_CFD_UTIL.k_VAT_SCHEDULE_TYPE_ID
					AND VAT.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND VAT.SCHEDULE_DATE = v_VAT_SCHEDULE_DATE
					AND VAT.AS_OF_DATE = MM_SEM_CFD_UTIL.k_LOW_DATE),
			DISPUTE_TEXT =
				(SELECT ADJUSTMENT_TEXT
				FROM SEM_CFD_ADJUSTMENT
				WHERE ADJUSTMENT_TYPE = MM_SEM_CFD_ADJUSTMENT.c_ADJ_TYPE_CC
					AND TRANSACTION_ID = CRED.TRANSACTION_ID
					AND REFERENCE_DATE = v_THIS_MONTH_BEGIN
					AND STATEMENT_TYPE_ID = p_STATEMENT_TYPE),
			DISPUTE_REFERENCE_DATE = v_THIS_MONTH_BEGIN
			;
	END IF;

END CACHE_CREDIT_DATA;
-------------------------------------------------------------
PROCEDURE GET_CREDIT_DATE_RANGE_RPT
	(
	p_CONTRACT_IDS IN VARCHAR2,
	p_CONTRACT_TYPE_FILTER IN VARCHAR2,
	p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
	p_COUNTERPARTY_ID_FILTER IN NUMBER,
	p_CURRENCY_FILTER IN VARCHAR2,
	p_LAST_DAY_WITH_SMP_STR OUT VARCHAR2,
	p_CURRENT_ESTSEM_DATE_STR OUT VARCHAR2,
	p_CURRENT_ESTSEMM_DATE_STR OUT VARCHAR2,
	p_CURSOR IN OUT SYS_REFCURSOR
	) AS
BEGIN


	p_LAST_DAY_WITH_SMP_STR := TO_CHAR(GET_LAST_DAY_WITH_SMP, 'DD/MM/YYYY');
	p_CURRENT_ESTSEM_DATE_STR := TO_CHAR(GET_ESTSEM_ASSESSMENT_DATE, 'DD/MM/YYYY');
	p_CURRENT_ESTSEMM_DATE_STR := TO_CHAR(GET_ESTSEMM_ASSESSMENT_DATE, 'DD/MM/YYYY');

	--Cache the current set of credit date ranges to the SEM_CFD_CREDIT_DATES_TEMP table.
	CACHE_CREDIT_DATA(p_CONTRACT_IDS, p_CONTRACT_TYPE_FILTER, p_AGREEMENT_TYPE_FILTER, p_COUNTERPARTY_ID_FILTER, p_CURRENCY_FILTER, NULL);

	OPEN p_CURSOR FOR
		SELECT CRED.*
		FROM SEM_CFD_CREDIT_TEMP CRED
		ORDER BY TRANSACTION_NAME;

END GET_CREDIT_DATE_RANGE_RPT;
-------------------------------------------------------------
FUNCTION GET_EFF_RATE
	(
	p_AGREEMENT_TYPE IN VARCHAR2,
	p_VALUE IN NUMBER
	) RETURN NUMBER IS
BEGIN
	RETURN CASE
		WHEN p_AGREEMENT_TYPE = MM_SEM_CFD_UTIL.k_AGREEMENT_BUYER_PAYS THEN
			GREATEST(0.0, p_VALUE)
		WHEN p_AGREEMENT_TYPE = MM_SEM_CFD_UTIL.k_AGREEMENT_SELLER_PAYS THEN
			LEAST(0.0, p_VALUE)
		ELSE
			p_VALUE
		END;
END GET_EFF_RATE;
/*----------------------------------------------------------------------------*
 *   POPULATE_CFD_TEMP_TABLE                                                  *
 *----------------------------------------------------------------------------*/
PROCEDURE POPULATE_CFD_TEMP_TABLE
(
   p_BEGIN_DATE IN DATE,
   p_STATEMENT_TYPE IN NUMBER,
   p_CONTRACT_IDS IN VARCHAR2,
   p_CONTRACT_TYPE_FILTER IN VARCHAR2,
   p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
   p_COUNTERPARTY_ID_FILTER IN NUMBER,
   p_CURRENCY_FILTER IN VARCHAR2
) IS

   -- LOCAL VARIABLES --
   v_BEGIN_DATE             DATE := TRUNC(p_BEGIN_DATE, 'MONTH');
   v_STARTING_INTERVAL      DATE := TO_CUT(v_BEGIN_DATE, MM_SEM_CFD_UTIL.k_TIME_ZONE);
   v_ESTSEM_BASIS           DATE := MM_SEM_CFD_CREDIT.GET_ESTSEM_ASSESSMENT_DATE;
   v_ESTSEMM_BASIS          DATE := MM_SEM_CFD_CREDIT.GET_ESTSEMM_ASSESSMENT_DATE;
   v_CONTRACT_IDS           ID_TABLE;

BEGIN

   UT.ID_TABLE_FROM_STRING(p_CONTRACT_IDS, ',', v_CONTRACT_IDS);

   EXECUTE IMMEDIATE 'TRUNCATE TABLE SEM_CFD_FORWARD_TEMP DROP STORAGE';

   INSERT INTO SEM_CFD_FORWARD_TEMP
		(TRANSACTION_ID,
		TRANSACTION_NAME,
		PRODUCT,
		CONTRACT_ID,
		CONTRACT_NAME,
		CONTRACT_TYPE,
		CONTRACT_AGREEMENT_TYPE,
		PURCHASER_ID,
		SELLER_ID,
		PURCHASER_NAME,
		SELLER_NAME,
		CURRENCY,
		SCHEDULE_DATE,
		AMOUNT,
		STRIKE_PRICE,
		ESTSEM,
		VAT,
		Z_SIGN,
		LOCAL_DAY_TRUNC_DATE,
		LOCAL_MONTH_TRUNC_DATE,
		STATEMENT_MONTH_STR,
		MONTH_NAME,
		SELLER_PAYS,
		BUYER_PAYS,
		CC_PI_MP_ID,
		CC_PERCENTAGE,
		CC_INDEX_MP_ID,
		ESTSEMM,
		CC_PI_VALUE,
		CC_INDEX_VALUE,
		M2M_INDEX_MP_ID,
		M2M_INDEX_VALUE,
		NETTING_AGREEMENT_PERCENTAGE)
      SELECT
         T.TRANSACTION_ID,
         T.TRANSACTION_NAME,
         T.AGREEMENT_TYPE AS PRODUCT,
         C.CONTRACT_ID,
         C.CONTRACT_NAME,
         C.CONTRACT_TYPE,
         C.AGREEMENT_TYPE AS CONTRACT_AGREEMENT_TYPE,
         C.PURCHASER_ID,
         C.SELLER_ID,
         (SELECT PSE_NAME FROM PURCHASING_SELLING_ENTITY WHERE PSE_ID = C.PURCHASER_ID) AS PURCHASER_NAME,
         (SELECT PSE_NAME FROM PURCHASING_SELLING_ENTITY WHERE PSE_ID = C.SELLER_ID) AS SELLER_NAME,
         F.CURRENCY,
         S.SCHEDULE_DATE,
         S.AMOUNT,
         S.PRICE AS STRIKE_PRICE,
         E.ESTSEM,
         VAT.AMOUNT AS VAT,
         TO_NUMBER(DECODE(C.BILLING_ENTITY_ID, C.PURCHASER_ID, -1, 1)) AS Z_SIGN,
         SDT.LOCAL_DAY_TRUNC_DATE,
         SDT.LOCAL_MONTH_TRUNC_DATE,
         TO_CHAR(SDT.LOCAL_MONTH_TRUNC_DATE, 'YYYY-MM-DD') AS STATEMENT_MONTH_STR,
         TO_CHAR(SDT.LOCAL_MONTH_TRUNC_DATE, 'Month YYYY') AS MONTH_NAME,
         TO_NUMBER(DECODE(C.AGREEMENT_TYPE,MM_SEM_CFD_UTIL.k_AGREEMENT_SELLER_PAYS, 1, 0)) AS SELLER_PAYS,
         TO_NUMBER(DECODE(C.AGREEMENT_TYPE,MM_SEM_CFD_UTIL.k_AGREEMENT_BUYER_PAYS, 1, 0)) AS BUYER_PAYS,
         M.CC_PI_MP_ID,
         M.CC_PERCENTAGE,
         M.CC_INDEX_MP_ID,
         E2.ESTSEM AS ESTSEMM,
         CASE
            WHEN M.CC_PI_MP_ID IS NOT NULL THEN
            (
               SELECT PRICE
               FROM MARKET_PRICE_VALUE AA
               WHERE AA.MARKET_PRICE_ID = CC_PI_MP_ID
                  AND AA.PRICE_CODE = MM_SEM_CFD_UTIL.k_INDEX_PRICE_CODE
                  AND AA.PRICE_DATE = SDT.LOCAL_MONTH_TRUNC_DATE
                  AND AA.AS_OF_DATE = MM_SEM_CFD_UTIL.k_LOW_DATE
            )
         ELSE
            NULL
         END AS CC_PI_VALUE,
         CASE
            WHEN M.CC_INDEX_MP_ID IS NOT NULL THEN
            (
               SELECT PRICE
               FROM MARKET_PRICE_VALUE AA
               WHERE AA.MARKET_PRICE_ID = CC_INDEX_MP_ID
                  AND AA.PRICE_CODE = MM_SEM_CFD_UTIL.k_INDEX_PRICE_CODE
                  AND AA.PRICE_DATE = SDT.LOCAL_MONTH_TRUNC_DATE
                  AND AA.AS_OF_DATE = MM_SEM_CFD_UTIL.k_LOW_DATE
            )
         ELSE
            NULL
         END AS CC_INDEX_VALUE,
		 M.M2M_INDEX_MP_ID,
         CASE
            WHEN M.M2M_INDEX_MP_ID IS NOT NULL THEN
            (
               SELECT PRICE
               FROM MARKET_PRICE_VALUE AA
               WHERE AA.MARKET_PRICE_ID = M2M_INDEX_MP_ID
                  AND AA.PRICE_CODE = MM_SEM_CFD_UTIL.k_INDEX_PRICE_CODE
                  AND AA.PRICE_DATE = SDT.LOCAL_MONTH_TRUNC_DATE
                  AND AA.AS_OF_DATE = MM_SEM_CFD_UTIL.k_LOW_DATE
            )
         ELSE
            E.ESTSEM
         END AS M2M_INDEX_VALUE ,
		 M.NETTING_AGREEMENT_PERCENTAGE
      FROM
         TABLE(CAST(v_CONTRACT_IDS AS ID_TABLE)) X,
         INTERCHANGE_TRANSACTION T,
         INTERCHANGE_CONTRACT C,
         SEM_CFD_CONTRACT F,
         IT_SCHEDULE S,
         SEM_CFD_ESTSEM_DAILY E,
         SEM_CFD_ESTSEM_DAILY E2,
         SYSTEM_DATE_TIME SDT,
         SEM_CFD_DEAL M,
         IT_SCHEDULE VAT
      WHERE T.CONTRACT_ID = X.ID
         AND T.END_DATE >= v_BEGIN_DATE
         AND C.CONTRACT_ID = T.CONTRACT_ID
         AND (p_CONTRACT_TYPE_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER OR C.CONTRACT_TYPE = p_CONTRACT_TYPE_FILTER)
         AND (p_AGREEMENT_TYPE_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER OR C.AGREEMENT_TYPE = p_AGREEMENT_TYPE_FILTER)
         AND (p_COUNTERPARTY_ID_FILTER = MM_SEM_CFD_UTIL.k_ALL_INT_FILTER OR C.PURCHASER_ID = p_COUNTERPARTY_ID_FILTER OR C.SELLER_ID = p_COUNTERPARTY_ID_FILTER)
         AND (p_CURRENCY_FILTER = MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER OR F.CURRENCY = p_CURRENCY_FILTER)
         AND F.CONTRACT_ID = C.CONTRACT_ID
         AND S.TRANSACTION_ID = T.TRANSACTION_ID
         AND S.SCHEDULE_TYPE = p_STATEMENT_TYPE
         AND S.SCHEDULE_STATE = GA.INTERNAL_STATE
         AND S.SCHEDULE_DATE > v_STARTING_INTERVAL
         AND S.AS_OF_DATE = MM_SEM_CFD_UTIL.k_LOW_DATE
         AND E.ASSESSMENT_DATE = v_ESTSEM_BASIS
         AND E.PRODUCT = T.AGREEMENT_TYPE
         AND E.CURRENCY = F.CURRENCY
         AND S.SCHEDULE_DATE BETWEEN E.CUT_BEGIN_DATE AND E.CUT_END_DATE
         AND E2.ASSESSMENT_DATE = v_ESTSEMM_BASIS
         AND E2.PRODUCT = T.AGREEMENT_TYPE
         AND E2.CURRENCY = F.CURRENCY
         AND S.SCHEDULE_DATE BETWEEN E2.CUT_BEGIN_DATE AND E2.CUT_END_DATE
         AND SDT.TIME_ZONE = MM_SEM_CFD_UTIL.k_TIME_ZONE
         AND SDT.DATA_INTERVAL_TYPE = 1
         AND SDT.DAY_TYPE = '1'
         AND SDT.CUT_DATE = S.SCHEDULE_DATE
         AND M.TRANSACTION_ID = T.TRANSACTION_ID
         AND VAT.TRANSACTION_ID = M.DIFF_PMT_VAT_TXN_ID
         AND VAT.SCHEDULE_TYPE = MM_SEM_CFD_UTIL.k_VAT_SCHEDULE_TYPE_ID
         AND VAT.SCHEDULE_STATE = GA.INTERNAL_STATE
         AND VAT.SCHEDULE_DATE = SDT.LOCAL_DAY_TRUNC_DATE + MM_SEM_CFD_UTIL.k_ONE_SECOND
         AND VAT.AS_OF_DATE = MM_SEM_CFD_UTIL.k_LOW_DATE;

END POPULATE_CFD_TEMP_TABLE;
-------------------------------------------------------------
PROCEDURE GET_REQUIRED_CREDIT_COVER_RPT
	(
	p_CONTRACT_IDS IN VARCHAR2,
	p_CONTRACT_TYPE_FILTER IN VARCHAR2,
	p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
	p_COUNTERPARTY_ID_FILTER IN NUMBER,
	p_CURRENCY_FILTER IN VARCHAR2,
	p_STATEMENT_TYPE IN NUMBER,
	p_CURSOR IN OUT SYS_REFCURSOR
	) AS
	v_BEGIN_DATE DATE;
BEGIN

	--Cache the current set of credit date ranges and data to the SEM_CFD_CREDIT_TEMP table.
	CACHE_CREDIT_DATA(p_CONTRACT_IDS, p_CONTRACT_TYPE_FILTER, p_AGREEMENT_TYPE_FILTER, p_COUNTERPARTY_ID_FILTER, p_CURRENCY_FILTER, p_STATEMENT_TYPE);

	--Cache the forward data to the SEM_CFD_FORWARD_TEMP table.
	v_BEGIN_DATE := ADD_MONTHS(TRUNC(GET_TODAY, 'MM'), -1);
	POPULATE_CFD_TEMP_TABLE(v_BEGIN_DATE, p_STATEMENT_TYPE, p_CONTRACT_IDS, p_CONTRACT_TYPE_FILTER, p_AGREEMENT_TYPE_FILTER, p_COUNTERPARTY_ID_FILTER, p_CURRENCY_FILTER);

	OPEN p_CURSOR FOR
	SELECT CRED.TRANSACTION_NAME,
		CRED.CURRENCY,
		CRED.VAT_RATE,
		-1*CRED.BILLED_NOT_PAID_AMT "BILLED_NOT_PAID_AMT",
		-1*CRED.CONSUMED_NOT_BILLED_AMT "CONSUMED_NOT_BILLED_AMT",
		CASE SEMC.CREDIT_COVER_REGIME
			WHEN MM_SEM_CFD_UTIL.k_CC_REGIME_ESTSEM THEN
				SUM(ROUND(-0.5*GET_EFF_RATE(FWD.CONTRACT_AGREEMENT_TYPE,
					FWD.STRIKE_PRICE - (FWD.CC_PERCENTAGE/100) * (FWD.ESTSEM + NVL(FWD.CC_PI_VALUE,0))) * AMOUNT * Z_SIGN,2))
			WHEN MM_SEM_CFD_UTIL.k_CC_REGIME_INDEX THEN
				SUM(ROUND(-0.5*GET_EFF_RATE(FWD.CONTRACT_AGREEMENT_TYPE,
					(FWD.STRIKE_PRICE - ((FWD.CC_PERCENTAGE/100) * FWD.CC_INDEX_VALUE))) * AMOUNT * Z_SIGN,2))
			WHEN MM_SEM_CFD_UTIL.k_CC_REGIME_PERCENTAGE THEN
				SUM(ROUND(-0.5*GET_EFF_RATE(FWD.CONTRACT_AGREEMENT_TYPE,
					(FWD.STRIKE_PRICE * FWD.CC_PERCENTAGE/100)) * AMOUNT * Z_SIGN,2))
			END "FORWARD_EXPOSURE_AMT",
		CRED.DISPUTE_TEXT,
		CRED.TRANSACTION_ID,
		CRED.DISPUTE_REFERENCE_DATE
	FROM INTERCHANGE_CONTRACT C, SEM_CFD_CREDIT_TEMP CRED, SEM_CFD_CONTRACT SEMC, SEM_CFD_FORWARD_TEMP FWD
	WHERE CRED.CONTRACT_ID = C.CONTRACT_ID
		AND SEMC.CONTRACT_ID = C.CONTRACT_ID
		AND SEMC.CREDIT_COVER_REGIME IN (MM_SEM_CFD_UTIL.k_CC_REGIME_ESTSEM, MM_SEM_CFD_UTIL.k_CC_REGIME_INDEX, MM_SEM_CFD_UTIL.k_CC_REGIME_PERCENTAGE)
		AND FWD.TRANSACTION_ID = CRED.TRANSACTION_ID
		AND FWD.SCHEDULE_DATE >= CRED.CUT_FUTURE_BEGIN
	GROUP BY CRED.TRANSACTION_NAME,
		CRED.CURRENCY,
		CRED.VAT_RATE,
		CRED.BILLED_NOT_PAID_AMT,
		CRED.CONSUMED_NOT_BILLED_AMT,
		CRED.DISPUTE_TEXT,
		CRED.TRANSACTION_ID,
		CRED.DISPUTE_REFERENCE_DATE,
		SEMC.CREDIT_COVER_REGIME
	ORDER BY 2,1;

END GET_REQUIRED_CREDIT_COVER_RPT;
-------------------------------------------------------------
PROCEDURE GET_INTRA_MONTH_THRESHOLD_RPT
	(
	p_CONTRACT_IDS IN VARCHAR2,
	p_CONTRACT_TYPE_FILTER IN VARCHAR2,
	p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
	p_COUNTERPARTY_ID_FILTER IN NUMBER,
	p_CURRENCY_FILTER IN VARCHAR2,
	p_STATEMENT_TYPE IN NUMBER,
	p_CURSOR IN OUT SYS_REFCURSOR
	) AS
	v_BEGIN_DATE DATE;
BEGIN

	--Cache the current set of credit date ranges and data to the SEM_CFD_CREDIT_TEMP table.
	CACHE_CREDIT_DATA(p_CONTRACT_IDS, p_CONTRACT_TYPE_FILTER, p_AGREEMENT_TYPE_FILTER, p_COUNTERPARTY_ID_FILTER, p_CURRENCY_FILTER, p_STATEMENT_TYPE);

	--Cache the forward data to the SEM_CFD_FORWARD_TEMP table.
	v_BEGIN_DATE := ADD_MONTHS(TRUNC(GET_TODAY, 'MM'), -1);
	POPULATE_CFD_TEMP_TABLE(v_BEGIN_DATE, p_STATEMENT_TYPE, p_CONTRACT_IDS, p_CONTRACT_TYPE_FILTER, p_AGREEMENT_TYPE_FILTER, p_COUNTERPARTY_ID_FILTER, p_CURRENCY_FILTER);

	OPEN p_CURSOR FOR
	SELECT CRED.TRANSACTION_NAME,
		CRED.CURRENCY,
		CRED.VAT_RATE,
		-1*CRED.BILLED_NOT_PAID_AMT "BILLED_NOT_PAID_AMT",
		-1*CRED.CONSUMED_NOT_BILLED_AMT "CONSUMED_NOT_BILLED_AMT",
		-1*SUM(ROUND(-0.5 *
					(FWD.STRIKE_PRICE
					- (FWD.ESTSEM + NVL(FWD.CC_PI_VALUE,0))
					+ 0.03 * (FWD.ESTSEMM + NVL(FWD.CC_PI_VALUE,0))
				) * AMOUNT * Z_SIGN,2)) "FORWARD_EXPOSURE_AMT",
		CRED.DISPUTE_TEXT,
		CRED.TRANSACTION_ID,
		CRED.DISPUTE_REFERENCE_DATE
	FROM INTERCHANGE_CONTRACT C, SEM_CFD_CREDIT_TEMP CRED, SEM_CFD_CONTRACT SEMC, SEM_CFD_FORWARD_TEMP FWD
	WHERE CRED.CONTRACT_ID = C.CONTRACT_ID
		AND SEMC.CONTRACT_ID = C.CONTRACT_ID
		AND SEMC.CREDIT_COVER_REGIME = MM_SEM_CFD_UTIL.k_CC_REGIME_ESTSEM
		AND FWD.TRANSACTION_ID = CRED.TRANSACTION_ID
		AND FWD.SCHEDULE_DATE >= CRED.CUT_FUTURE_BEGIN
	GROUP BY CRED.TRANSACTION_NAME,
		CRED.CURRENCY,
		CRED.VAT_RATE,
		CRED.BILLED_NOT_PAID_AMT,
		CRED.CONSUMED_NOT_BILLED_AMT,
		CRED.DISPUTE_TEXT,
		CRED.TRANSACTION_ID,
		CRED.DISPUTE_REFERENCE_DATE
	ORDER BY 2,1;

END GET_INTRA_MONTH_THRESHOLD_RPT;
-------------------------------------------------------------
PROCEDURE PUT_DISPUTE_TEXT
	(
	p_TRANSACTION_ID IN NUMBER,
	p_DISPUTE_REFERENCE_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_DISPUTE_TEXT IN VARCHAR2
	) AS
BEGIN
	MM_SEM_CFD_ADJUSTMENT.PUT_ADJUSTMENT_TEXT(MM_SEM_CFD_ADJUSTMENT.c_ADJ_TYPE_CC, p_TRANSACTION_ID, p_DISPUTE_REFERENCE_DATE, p_STATEMENT_TYPE, p_DISPUTE_TEXT);
END PUT_DISPUTE_TEXT;
-------------------------------------------------------------
PROCEDURE GET_ACCRUALS_RPT
	(
	p_CONTRACT_IDS IN VARCHAR2,
	p_CONTRACT_TYPE_FILTER IN VARCHAR2,
	p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
	p_COUNTERPARTY_ID_FILTER IN NUMBER,
	p_CURRENCY_FILTER IN VARCHAR2,
	p_STATEMENT_TYPE IN NUMBER,
	p_CURSOR IN OUT SYS_REFCURSOR
	) AS
BEGIN

	--Cache the current set of credit date ranges and data to the SEM_CFD_CREDIT_TEMP table.
	CACHE_CREDIT_DATA(p_CONTRACT_IDS, p_CONTRACT_TYPE_FILTER, p_AGREEMENT_TYPE_FILTER, p_COUNTERPARTY_ID_FILTER, p_CURRENCY_FILTER, p_STATEMENT_TYPE);

	OPEN p_CURSOR FOR
	SELECT CRED.TRANSACTION_NAME,
		CRED.CURRENCY,
		CRED.VAT_RATE,
		CRED.BILLED_NOT_PAID_AMT,
		CRED.CONSUMED_NOT_BILLED_AMT
		FROM SEM_CFD_CREDIT_TEMP CRED
	ORDER BY 2,1;

END GET_ACCRUALS_RPT;
/*----------------------------------------------------------------------------*
 *   GET_M2M_SUMMARY_RPT                                                      *
 *----------------------------------------------------------------------------*/
PROCEDURE GET_M2M_SUMMARY_RPT
(
   p_BEGIN_DATE IN DATE,
   p_STATEMENT_TYPE IN NUMBER,
   p_CONTRACT_IDS IN VARCHAR2,
   p_CONTRACT_TYPE_FILTER IN VARCHAR2,
   p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
   p_COUNTERPARTY_ID_FILTER IN NUMBER,
   p_CURRENCY_FILTER IN VARCHAR2,
   p_CURSOR OUT SYS_REFCURSOR
) IS
BEGIN

   EXECUTE IMMEDIATE 'TRUNCATE TABLE SEM_M2M_DETAILS_TEMP DROP STORAGE';

   POPULATE_CFD_TEMP_TABLE
   (
      TRUNC(GET_TODAY, 'MM'),
      p_STATEMENT_TYPE,
      p_CONTRACT_IDS,
      p_CONTRACT_TYPE_FILTER,
      p_AGREEMENT_TYPE_FILTER,
      p_COUNTERPARTY_ID_FILTER,
      p_CURRENCY_FILTER
   );

   INSERT INTO SEM_M2M_DETAILS_TEMP
   (
      TRANSACTION_ID,
      TRANSACTION_NAME,
      PRODUCT,
      CONTRACT_ID,
      CONTRACT_NAME,
      CONTRACT_TYPE,
      CONTRACT_AGREEMENT_TYPE,
      PURCHASER_ID,
      SELLER_ID,
      PURCHASER_NAME,
      SELLER_NAME,
      CURRENCY,
      SCHEDULE_DATE,
      AMOUNT,
      STRIKE_PRICE,
      M2M_INDEX_VALUE,
      VAT,
      Z_SIGN,
      LOCAL_DAY_TRUNC_DATE,
      LOCAL_MONTH_TRUNC_DATE,
      STATEMENT_MONTH_STR,
      MONTH_NAME,
      SELLER_PAYS,
      BUYER_PAYS,
      EFFECTIVE_RATE,
      M2M_VALUATION,
      M2M_VAT
   )
   SELECT
      TRANSACTION_ID,
      TRANSACTION_NAME,
      PRODUCT,
      CONTRACT_ID,
      CONTRACT_NAME,
      CONTRACT_TYPE,
      CONTRACT_AGREEMENT_TYPE,
      PURCHASER_ID,
      SELLER_ID,
      PURCHASER_NAME,
      SELLER_NAME,
      CURRENCY,
      SCHEDULE_DATE,
      AMOUNT,
      STRIKE_PRICE,
      ESTSEM,
      VAT,
      Z_SIGN,
      LOCAL_DAY_TRUNC_DATE,
      LOCAL_MONTH_TRUNC_DATE,
      STATEMENT_MONTH_STR,
      MONTH_NAME,
      SELLER_PAYS,
      BUYER_PAYS,
      MM_SEM_CFD_CREDIT.GET_EFF_RATE(CONTRACT_AGREEMENT_TYPE, STRIKE_PRICE - M2M_INDEX_VALUE),
      MM_SEM_CFD_CREDIT.GET_EFF_RATE(CONTRACT_AGREEMENT_TYPE, STRIKE_PRICE - M2M_INDEX_VALUE) * 0.5 * AMOUNT * Z_SIGN AS M2M_VALUATION,
      MM_SEM_CFD_CREDIT.GET_EFF_RATE(CONTRACT_AGREEMENT_TYPE, STRIKE_PRICE - M2M_INDEX_VALUE) * 0.5 * AMOUNT * Z_SIGN * VAT AS M2M_VAT
   FROM SEM_CFD_FORWARD_TEMP;

   OPEN p_CURSOR FOR
      SELECT
         AA.CONTRACT_ID,
         AA.CONTRACT_NAME,
         AA.CONTRACT_TYPE,
         AA.CONTRACT_AGREEMENT_TYPE,
         AA.CURRENCY,
         AA.PURCHASER_ID,
         AA.SELLER_ID,
         AA.PURCHASER_NAME,
         AA.SELLER_NAME,
         AA.TRANSACTION_ID AS DEAL_TRANSACTION_ID,
         AA.TRANSACTION_NAME,
         AA.PRODUCT,
         SUM(M2M_VALUATION) AS M2M_VALUATION,
         SUM(M2M_VAT) AS M2M_VAT,
         AA.LOCAL_MONTH_TRUNC_DATE,
         AA.STATEMENT_MONTH_STR,
         AA.MONTH_NAME
      FROM SEM_M2M_DETAILS_TEMP AA
      GROUP BY
         AA.TRANSACTION_ID,
         AA.TRANSACTION_NAME,
         AA.PRODUCT,
         AA.CONTRACT_ID,
         AA.CONTRACT_NAME,
         AA.CONTRACT_TYPE,
         AA.CONTRACT_AGREEMENT_TYPE,
         AA.PURCHASER_ID,
         AA.SELLER_ID,
         AA.PURCHASER_NAME,
         AA.SELLER_NAME,
         AA.CURRENCY,
         AA.VAT,
         AA.LOCAL_MONTH_TRUNC_DATE,
         AA.STATEMENT_MONTH_STR,
         AA.MONTH_NAME;

END GET_M2M_SUMMARY_RPT;

/*----------------------------------------------------------------------------*
 *   GET_M2M_DETAIL_RPT                                                       *
 *----------------------------------------------------------------------------*/
PROCEDURE GET_M2M_DETAIL_RPT
(
   p_DEAL_TRANSACTION_ID IN NUMBER,
   p_CURSOR OUT SYS_REFCURSOR
) IS
BEGIN

   OPEN p_CURSOR FOR
      SELECT
         AA.CONTRACT_ID,
         AA.CONTRACT_NAME,
         AA.CONTRACT_TYPE,
         AA.CONTRACT_AGREEMENT_TYPE,
         AA.CURRENCY,
         AA.PURCHASER_ID,
         AA.SELLER_ID,
         AA.PURCHASER_NAME,
         AA.SELLER_NAME,
         AA.TRANSACTION_ID,
         AA.TRANSACTION_NAME,
         AA.PRODUCT,
         FROM_CUT_AS_HED(AA.SCHEDULE_DATE, MM_SEM_CFD_UTIL.k_TIME_ZONE, 'MI30') AS SCHEDULE_DATE,
         AA.AMOUNT,
         AA.STRIKE_PRICE,
         AA.M2M_INDEX_VALUE,
         AA.VAT,
         AA.Z_SIGN,
         AA.M2M_VALUATION,
         AA.LOCAL_DAY_TRUNC_DATE,
         AA.LOCAL_MONTH_TRUNC_DATE,
         AA.STATEMENT_MONTH_STR,
         AA.MONTH_NAME,
         AA.SELLER_PAYS,
         AA.BUYER_PAYS,
         AA.EFFECTIVE_RATE
      FROM SEM_M2M_DETAILS_TEMP AA
      WHERE AA.TRANSACTION_ID = p_DEAL_TRANSACTION_ID
      ORDER BY AA.SCHEDULE_DATE;

END GET_M2M_DETAIL_RPT;
-------------------------------------------------------------
PROCEDURE GET_NETTING_AGREEMENT_RPT
	(
	p_CONTRACT_IDS IN VARCHAR2,
	p_CONTRACT_TYPE_FILTER IN VARCHAR2,
	p_AGREEMENT_TYPE_FILTER IN VARCHAR2,
	p_COUNTERPARTY_ID_FILTER IN NUMBER,
	p_CURRENCY_FILTER IN VARCHAR2,
	p_STATEMENT_TYPE IN NUMBER,
	p_VAT_STYLE_FILTER IN VARCHAR2,
	p_CURSOR OUT SYS_REFCURSOR
	) AS
	v_BEGIN_DATE DATE;
BEGIN

	--Cache the current set of credit date ranges and data to the SEM_CFD_CREDIT_TEMP table.
	CACHE_CREDIT_DATA(p_CONTRACT_IDS, p_CONTRACT_TYPE_FILTER, p_AGREEMENT_TYPE_FILTER, p_COUNTERPARTY_ID_FILTER, p_CURRENCY_FILTER, p_STATEMENT_TYPE);

	--Cache the forward data to the SEM_CFD_FORWARD_TEMP table.
	v_BEGIN_DATE := ADD_MONTHS(TRUNC(GET_TODAY, 'MM'), -1);
	POPULATE_CFD_TEMP_TABLE(v_BEGIN_DATE, p_STATEMENT_TYPE, p_CONTRACT_IDS, p_CONTRACT_TYPE_FILTER, p_AGREEMENT_TYPE_FILTER, p_COUNTERPARTY_ID_FILTER, p_CURRENCY_FILTER);

	OPEN p_CURSOR FOR
	SELECT CRED.TRANSACTION_NAME,
		CRED.CURRENCY,
		CRED.VAT_RATE,
		-1*CRED.BILLED_NOT_PAID_AMT
			* CASE p_VAT_STYLE_FILTER WHEN 'Net' THEN 1 WHEN 'VAT' THEN CRED.VAT_RATE ELSE 1 + CRED.VAT_RATE END "BILLED_NOT_PAID_AMT",
		-1*CRED.CONSUMED_NOT_BILLED_AMT
			* CASE p_VAT_STYLE_FILTER WHEN 'Net' THEN 1 WHEN 'VAT' THEN CRED.VAT_RATE ELSE 1 + CRED.VAT_RATE END "CONSUMED_NOT_BILLED_AMT",
		SUM(ROUND(-0.5*GET_EFF_RATE(FWD.CONTRACT_AGREEMENT_TYPE,
				FWD.STRIKE_PRICE - (FWD.ESTSEM + NVL(FWD.CC_PI_VALUE,0))) * AMOUNT * Z_SIGN,2))
				* CASE p_VAT_STYLE_FILTER WHEN 'Net' THEN 1 WHEN 'VAT' THEN CRED.VAT_RATE ELSE 1 + CRED.VAT_RATE END "M2M_NETTING",
		SUM(ROUND(-0.5*GET_EFF_RATE(FWD.CONTRACT_AGREEMENT_TYPE,
				ABS(NVL(FWD.NETTING_AGREEMENT_PERCENTAGE/100,0.15)*(FWD.ESTSEM + NVL(FWD.CC_PI_VALUE,0)))) * AMOUNT * Z_SIGN,2))
				* CASE p_VAT_STYLE_FILTER WHEN 'Net' THEN 1 WHEN 'VAT' THEN CRED.VAT_RATE ELSE 1 + CRED.VAT_RATE END "POT_FUTURE_NETTING"
	FROM INTERCHANGE_CONTRACT C, SEM_CFD_CREDIT_TEMP CRED, SEM_CFD_CONTRACT SEMC, SEM_CFD_FORWARD_TEMP FWD
	WHERE CRED.CONTRACT_ID = C.CONTRACT_ID
		AND SEMC.CONTRACT_ID = C.CONTRACT_ID
		AND FWD.TRANSACTION_ID = CRED.TRANSACTION_ID
		AND FWD.SCHEDULE_DATE >= CRED.CUT_FUTURE_BEGIN
	GROUP BY CRED.TRANSACTION_NAME,
		CRED.CURRENCY,
		CRED.VAT_RATE,
		CRED.BILLED_NOT_PAID_AMT,
		CRED.CONSUMED_NOT_BILLED_AMT
	ORDER BY 2,1;

END GET_NETTING_AGREEMENT_RPT;
-------------------------------------------------------------
END MM_SEM_CFD_CREDIT;
/
