CREATE OR REPLACE PACKAGE BODY MM_SEM_CFD_INV IS
	----------------------------------------------------------------------------------------
	FUNCTION WHAT_VERSION RETURN VARCHAR IS
	BEGIN
		RETURN '$Revision: 1.1 $';
	END WHAT_VERSION;
	------------------------------------------------------------------------------
	PROCEDURE GET_COUNTER_PARTY_FILTER
	(
		p_ENTITY_ID NUMBER,
		p_STATUS OUT NUMBER,
		p_CURSOR OUT SYS_REFCURSOR
	) IS
	BEGIN
		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT MM_SEM_CFD_UTIL.k_ALL_TXT_FILTER AS COUNTERPARTY_NAME, MM_SEM_CFD_UTIL.k_ALL_INT_FILTER AS CP_ID  FROM DUAL
		  	UNION ALL
			SELECT PSE.PSE_NAME AS COUNTERPARTY_NAME, CP_ID AS CP_ID
			FROM (SELECT DISTINCT DECODE(C.BILLING_ENTITY_ID, C.PURCHASER_ID, C.SELLER_ID, C.SELLER_ID, C.PURCHASER_ID) AS CP_ID
				FROM INTERCHANGE_CONTRACT C
				WHERE C.BILLING_ENTITY_ID = p_ENTITY_ID
				AND C.CONTRACT_TYPE IN (MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_DIRECTED, MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_NON_DIRECTED)) X, PSE
			WHERE PSE.PSE_ID = X.CP_ID
			ORDER BY 1;

	END;
	------------------------------------------------------------------------------
	PROCEDURE GET_CONTRACTS_FILTER
	(
	   p_COUNTERPARTY_ID_FILTER IN NUMBER,
	   p_STATUS OUT NUMBER,
	   p_CURSOR OUT SYS_REFCURSOR
	) IS
	BEGIN
		p_STATUS := GA.SUCCESS;

		OPEN p_CURSOR FOR
			SELECT CONTRACT_NAME, C.CONTRACT_ID
			FROM INTERCHANGE_CONTRACT C, SEM_CFD_CONTRACT SEMC
			WHERE C.CONTRACT_TYPE IN (MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_DIRECTED, MM_SEM_CFD_UTIL.k_CONTRACT_TYPE_NON_DIRECTED)
				AND (p_COUNTERPARTY_ID_FILTER = MM_SEM_CFD_UTIL.k_ALL_INT_FILTER OR C.PURCHASER_ID = p_COUNTERPARTY_ID_FILTER OR C.SELLER_ID = p_COUNTERPARTY_ID_FILTER)
				AND SEMC.CONTRACT_ID = C.CONTRACT_ID			
			ORDER BY UPPER(CONTRACT_NAME);

	END GET_CONTRACTS_FILTER;
	------------------------------------------------------------------------------
	PROCEDURE GET_INVOICE_MONTH
	(
		p_BEGIN_DATE IN DATE,
		p_END_DATE IN DATE,
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT SYS_REFCURSOR
	) AS

	v_NUMBER_OF_MONTHS NUMBER;
	BEGIN
		p_STATUS := GA.SUCCESS;

		v_NUMBER_OF_MONTHS := MONTHS_BETWEEN(TRUNC(p_END_DATE, 'MM'), TRUNC(p_BEGIN_DATE, 'MM')) + 1;

		OPEN p_CURSOR FOR
			SELECT TO_CHAR(S.SCHEDULE_DATE, 'MON YYYY') AS MONTH_NAME, TO_NUMBER(TO_CHAR(S.SCHEDULE_DATE, 'YYYYMMDD')) AS MONTH_ID
			FROM (SELECT ADD_MONTHS(TRUNC(p_BEGIN_DATE, 'MM'),(LEVEL-1) * 1) AS SCHEDULE_DATE
				FROM DUAL CONNECT BY LEVEL <= v_NUMBER_OF_MONTHS) S;
	END;
	------------------------------------------------------------------------------
	FUNCTION IS_BUSINESS_DAY
	(
		p_DATE IN DATE
	) RETURN NUMBER
	AS		
	BEGIN
		-- Weekends and holidays are non-business days
		IF TO_CHAR(p_DATE, 'Dy') IN (DATE_CONST.k_SAT, DATE_CONST.k_SUN) OR IS_HOLIDAY(p_DATE) THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END;
	------------------------------------------------------------------------------
	PROCEDURE GEN_INV_WARNING_MESSAGE
	(
		p_MONTH_ID IN NUMBER,
		p_CONTRACT_ID IN NUMBER,
		p_STATEMENT_TYPE IN NUMBER,
		p_WARNING_MESSAGE OUT VARCHAR2
	)
	AS
		v_COUNT NUMBER;
	BEGIN
		SELECT COUNT(*) INTO v_COUNT
		FROM SEM_CFD_INVOICE I
		WHERE I.CONTRACT_ID = p_CONTRACT_ID
			AND I.STATEMENT_TYPE_ID = p_STATEMENT_TYPE
			AND I.INVOICE_MONTH = TO_DATE(TO_CHAR(p_MONTH_ID),'YYYYMMDD');

		IF v_COUNT > 0 THEN
			p_WARNING_MESSAGE := 'Generating the Invoice would overwrite exisiting invoice. Do you wish to continue?';
		END IF;
	END;
	------------------------------------------------------------------------------
	PROCEDURE GET_DISPUTE_DETAILS
	(
		p_TRANSACTION_ID NUMBER,
		p_MONTH DATE,
		p_STATEMENT_TYPE_ID SEM_CFD_ADJUSTMENT.STATEMENT_TYPE_ID%TYPE,
		p_IS_IN_DISPUTE IN OUT NUMBER,
		p_PAYMENT_SHORTFALL_AMOUNT IN OUT NUMBER,
		p_VAT_RATE IN OUT NUMBER
	)
	AS	
		v_COUNT NUMBER;	
	BEGIN
		SELECT COUNT(SEMA.PAYMENT_SHORTFALL_AMOUNT) INTO v_COUNT
		FROM SEM_CFD_ADJUSTMENT SEMA
		WHERE SEMA.TRANSACTION_ID = p_TRANSACTION_ID
			AND SEMA.REFERENCE_DATE = p_MONTH
			AND SEMA.STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID
			AND SEMA.APPLY_SUGGESTED_TO_INVOICE = 1
			AND SEMA.ADJUSTMENT_TYPE = MM_SEM_CFD_ADJUSTMENT.c_ADJ_TYPE_DIFF;
		
		IF v_COUNT > 0 THEN
			p_IS_IN_DISPUTE := 1;
			-- Get the Disputed Net amount
			SELECT SEMA.PAYMENT_SHORTFALL_AMOUNT INTO p_PAYMENT_SHORTFALL_AMOUNT
			FROM SEM_CFD_ADJUSTMENT SEMA
			WHERE SEMA.TRANSACTION_ID = p_TRANSACTION_ID
				AND SEMA.REFERENCE_DATE = p_MONTH
				AND SEMA.STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID
				AND SEMA.APPLY_SUGGESTED_TO_INVOICE = 1
				AND SEMA.ADJUSTMENT_TYPE = MM_SEM_CFD_ADJUSTMENT.c_ADJ_TYPE_DIFF;

			-- Get the VAT RATE for the last day of the month for the Dispute
			SELECT VAT.AMOUNT INTO p_VAT_RATE
			FROM SEM_CFD_DEAL SEMD,
				INTERCHANGE_TRANSACTION IT,
				IT_SCHEDULE VAT
			WHERE SEMD.TRANSACTION_ID = p_TRANSACTION_ID
				AND IT.TRANSACTION_ID = SEMD.DIFF_PMT_VAT_TXN_ID
				AND VAT.TRANSACTION_ID = IT.TRANSACTION_ID
				AND VAT.SCHEDULE_TYPE = MM_SEM_CFD_UTIL.k_VAT_SCHEDULE_TYPE_ID
				AND VAT.SCHEDULE_STATE = GA.INTERNAL_STATE
				AND VAT.SCHEDULE_DATE = LAST_DAY(p_MONTH) + 1/86400
				AND VAT.AS_OF_DATE = MM_SEM_CFD_UTIL.k_LOW_DATE;
		ELSE 
			p_IS_IN_DISPUTE := 0;
			p_PAYMENT_SHORTFALL_AMOUNT := NULL;
			p_VAT_RATE := NULL;
		END IF;
	END;
	---------------------------------------------------------------------------------------------------
	PROCEDURE PUT_SEM_CFD_INVOICE
	(
		p_INVOICE IN OUT NOCOPY SEM_CFD_INVOICE%ROWTYPE
	) AS
	v_HAVE_IT BOOLEAN := TRUE;
	BEGIN

	-- Invoice ID not specified? query for it
	IF NVL(p_INVOICE.SEM_CFD_INVOICE_ID,0) = 0 THEN
		BEGIN
			SELECT SEM_CFD_INVOICE_ID, CREATE_DATE
			INTO p_INVOICE.SEM_CFD_INVOICE_ID, p_INVOICE.CREATE_DATE
			FROM SEM_CFD_INVOICE
			WHERE CONTRACT_ID = p_INVOICE.CONTRACT_ID
				AND STATEMENT_TYPE_ID = p_INVOICE.STATEMENT_TYPE_ID
				AND INVOICE_MONTH = p_INVOICE.INVOICE_MONTH;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				v_HAVE_IT := FALSE;
		END;
	END IF;

	-- Have an invoice ID - then do update
	IF v_HAVE_IT THEN
		p_INVOICE.LAST_UPDATE_DATE := SYSDATE;

		UPDATE SEM_CFD_INVOICE SET ROW = p_INVOICE
		WHERE SEM_CFD_INVOICE_ID = p_INVOICE.SEM_CFD_INVOICE_ID;

		IF SQL%NOTFOUND THEN
			v_HAVE_IT := FALSE; -- didn't actually update anything
								-- so we don't already have an invoice
		END IF;
	END IF;

	-- No invoice updated? then create a new one
	IF NOT v_HAVE_IT THEN
		p_INVOICE.CREATE_DATE := SYSDATE;
		p_INVOICE.LAST_UPDATE_DATE := SYSDATE;

		SELECT SEM_CFD_INVOICE_ID.NEXTVAL INTO p_INVOICE.SEM_CFD_INVOICE_ID FROM DUAL;
		INSERT INTO SEM_CFD_INVOICE VALUES p_INVOICE;
	END IF;

	END PUT_SEM_CFD_INVOICE;
	---------------------------------------------------------------------------------------------------
	PROCEDURE PUT_SEM_CFD_INVOICE_LINE_ITEM
	(
		p_INVOICE_LINE_ITEM IN OUT NOCOPY SEM_CFD_INVOICE_LINE_ITEM%ROWTYPE
	) AS

	BEGIN

		UPDATE SEM_CFD_INVOICE_LINE_ITEM SET
			ROW = p_INVOICE_LINE_ITEM
		WHERE SEM_CFD_INVOICE_ID = p_INVOICE_LINE_ITEM.SEM_CFD_INVOICE_ID
            AND TRANSACTION_ID = p_INVOICE_LINE_ITEM.TRANSACTION_ID;

		IF SQL%NOTFOUND THEN
			INSERT INTO SEM_CFD_INVOICE_LINE_ITEM VALUES p_INVOICE_LINE_ITEM;
		END IF;

	END PUT_SEM_CFD_INVOICE_LINE_ITEM;
	-------------------------------------------------------------
	PROCEDURE GENERATE_MONTHLY_INVOICE
	(
		p_MONTH_ID IN NUMBER,
		p_CONTRACT_ID IN NUMBER,
		p_STATEMENT_TYPE IN NUMBER,
		p_STATUS OUT NUMBER,
		p_MESSAGE OUT VARCHAR2
	) AS
		v_TRANSACTION_IDS NUMBER_COLLECTION;
		v_INVOICE_MONTH DATE;
		v_COUNT NUMBER;
		v_SEM_CFD_INVOICE_REC SEM_CFD_INVOICE%ROWTYPE;
		v_SEM_CFD_INV_LINE_ITEM_REC SEM_CFD_INVOICE_LINE_ITEM%ROWTYPE;
		v_INVOICE_DATE DATE;
		v_PAYMENT_DUE_DATE DATE;
		v_WD_TO_INVOICE SEM_CFD_CONTRACT.WD_TO_INVOICE%TYPE;
		v_WD_TO_PAY SEM_CFD_CONTRACT.WD_TO_PAY%TYPE;
		v_IS_IN_DISPUTE NUMBER;
		v_VAT_RATE NUMBER;
		v_PAYMENT_SHORTFALL_AMOUNT NUMBER;

		CURSOR c_LINE_ITEMS IS
			SELECT v_SEM_CFD_INVOICE_REC.SEM_CFD_INVOICE_ID AS SEM_CFD_INVOICE_ID,
				IT.TRANSACTION_ID,
				IT.AGREEMENT_TYPE AS PRODUCT_TYPE,
				IT.TRANSACTION_NAME AS TRADE_NAME,										
				AVG(T.STRIKE_PRICE) AS STRIKE_PRICE,
				AVG(T.CONTRACT_LEVEL) AS CONTRACT_LEVEL,										
				AVG(DECODE(MM_SEM_CFD_INV.IS_BUSINESS_DAY(T.LOCAL_DAY), 1, T.SMP)) AS BD_AVG_SMP, 
				AVG(DECODE(MM_SEM_CFD_INV.IS_BUSINESS_DAY(T.LOCAL_DAY), 1, T.STRIKE_PRICE - T.SMP)) AS BD_DIFF_SP_SMP,
				SUM(DECODE(MM_SEM_CFD_INV.IS_BUSINESS_DAY(T.LOCAL_DAY), 1, 1)) AS BD_TRADING_PERIODS,
				SUM(DECODE(MM_SEM_CFD_INV.IS_BUSINESS_DAY(T.LOCAL_DAY), 1, T.CONTRACT_LEVEL * 0.5)) AS BD_VOLUME,
				AVG(DECODE(MM_SEM_CFD_INV.IS_BUSINESS_DAY(T.LOCAL_DAY), 0, T.SMP)) AS NBD_AVG_SMP,
				AVG(DECODE(MM_SEM_CFD_INV.IS_BUSINESS_DAY(T.LOCAL_DAY), 0, T.STRIKE_PRICE - T.SMP)) AS NBD_DIFF_SP_SMP,
				SUM(DECODE(MM_SEM_CFD_INV.IS_BUSINESS_DAY(T.LOCAL_DAY), 0, 1)) AS NBD_TRADING_PERIODS,
				SUM(DECODE(MM_SEM_CFD_INV.IS_BUSINESS_DAY(T.LOCAL_DAY), 0, T.CONTRACT_LEVEL * 0.5)) AS NBD_VOLUME,
				SUM(T.CHARGE_AMOUNT) AS NET,
				AVG(T.VAT_RATE) AS VAT_RATE, 
				ROUND(SUM(T.CHARGE_AMOUNT * T.VAT_RATE),2) AS VAT_AMOUNT, 
				SUM(T.CHARGE_AMOUNT * (1+ T.VAT_RATE)) AS GROSS
			FROM SEM_CFD_DIFF_PMTS_TEMP T,
				INTERCHANGE_TRANSACTION IT,
				PSE BUYER
			WHERE IT.TRANSACTION_ID = T.TRANSACTION_ID
				AND BUYER.PSE_ID = IT.PURCHASER_ID
				-- Compute using the non-zero values contributing to the trading period
				AND NVL(STRIKE_PRICE,0) > 0 AND NVL(CONTRACT_LEVEL, 0) > 0 
			GROUP BY IT.TRANSACTION_ID,
				IT.TRANSACTION_NAME,
				IT.AGREEMENT_TYPE;

	BEGIN
		p_STATUS := GA.SUCCESS;

		v_INVOICE_MONTH := TO_DATE(TO_CHAR(p_MONTH_ID),'YYYYMMDD');
		v_TRANSACTION_IDS := MM_SEM_CFD_DIFF_PMTS.GET_FILTERED_TRANSACTION_IDS
								(v_INVOICE_MONTH, LAST_DAY(v_INVOICE_MONTH), TO_CHAR(p_CONTRACT_ID), '<ALL>', '<ALL>', -1, '<ALL>');

		MM_SEM_CFD_DIFF_PMTS.CACHE_DIFF_PAYMENTS_DETAILS
			(v_INVOICE_MONTH,
			LAST_DAY(v_INVOICE_MONTH),
			v_TRANSACTION_IDS,
			p_STATEMENT_TYPE,
			NULL,
			'Net');
		
		SELECT COUNT(*) INTO v_COUNT FROM SEM_CFD_DIFF_PMTS_TEMP;
		IF v_COUNT > 0 THEN

			-- Calculate the Invoice Date and the Payment Due Date
			SELECT SEMC.WD_TO_INVOICE, SEMC.WD_TO_PAY
			INTO v_WD_TO_INVOICE, v_WD_TO_PAY
			FROM SEM_CFD_CONTRACT SEMC
			WHERE SEMC.CONTRACT_ID = p_CONTRACT_ID;	

			-- Invoice and Payment are offset from the beginning of the next month
			v_INVOICE_DATE := MM_SEM_CREDIT_SHADOW.ADD_DAYS(ADD_MONTHS(v_INVOICE_MONTH,1), v_WD_TO_INVOICE, 'WD');
			v_PAYMENT_DUE_DATE := MM_SEM_CREDIT_SHADOW.ADD_DAYS(v_INVOICE_DATE, v_WD_TO_PAY, 'WD');		

			-- Insert/Update SEM_CFD_INVOICE table			
			SELECT NULL AS SEM_CFD_INVOICE_ID,				
				v_INVOICE_MONTH AS INVOICE_MONTH,
				C.CONTRACT_ID,
				p_STATEMENT_TYPE AS STATEMENT_TYPE_ID,
				v_INVOICE_DATE AS INVOICE_DATE, 
				'CfD/' || COUNTER_PARTY_NAME || '/' || CONTRACT_TYPE || '/' ||TO_CHAR(v_INVOICE_MONTH , 'YYYY-MON') AS INVOICE_NUMBER,
				v_PAYMENT_DUE_DATE AS PAYMENT_DUE_DATE,
				C.CONTRACT_TYPE,
				SEMC.CURRENCY,
				BILLING_ENTITY_ID,
				BILLING_ENTITY_NAME,					
				BILLING_ENTITY_STREET,
				BILLING_ENTITY_CITY,
				BILLING_ENTITY_STATE_CODE,
				BILLING_ENTITY_POSTAL_CODE,
				BILLING_ENTITY_COUNTRY_CODE,
				BILLING_ENTITY_PHONE_NUMBER,
				BILLING_ENTITY_VAT_NUMBER,
				COUNTER_PARTY_ID,
				COUNTER_PARTY_NAME,
				COUNTER_PARTY_STREET,
				COUNTER_PARTY_CITY,
				COUNTER_PARTY_STATE_CODE,
				COUNTER_PARTY_POSTAL_CODE,
				COUNTER_PARTY_COUNTRY_CODE,				
				COUNTER_PARTY_VAT_NUMBER,
				NULL AS CREATE_DATE,
				SYSDATE AS LAST_UPDATED_DATE,
				SECURITY_CONTROLS.CURRENT_USER AS LAST_UPDATED_BY
			INTO v_SEM_CFD_INVOICE_REC.SEM_CFD_INVOICE_ID,
				v_SEM_CFD_INVOICE_REC.INVOICE_MONTH,
				v_SEM_CFD_INVOICE_REC.CONTRACT_ID,
				v_SEM_CFD_INVOICE_REC.STATEMENT_TYPE_ID,
				v_SEM_CFD_INVOICE_REC.INVOICE_DATE,
				v_SEM_CFD_INVOICE_REC.INVOICE_NUMBER,
				v_SEM_CFD_INVOICE_REC.PAYMENT_DUE_DATE,
				v_SEM_CFD_INVOICE_REC.CONTRACT_TYPE,
				v_SEM_CFD_INVOICE_REC.CURRENCY,
				v_SEM_CFD_INVOICE_REC.BILLING_ENTITY_ID,
				v_SEM_CFD_INVOICE_REC.BILLING_ENTITY_NAME,
				v_SEM_CFD_INVOICE_REC.BILLING_ENTITY_STREET,
				v_SEM_CFD_INVOICE_REC.BILLING_ENTITY_CITY,
				v_SEM_CFD_INVOICE_REC.BILLING_ENTITY_STATE_CODE,
				v_SEM_CFD_INVOICE_REC.BILLING_ENTITY_POSTAL_CODE,
				v_SEM_CFD_INVOICE_REC.BILLING_ENTITY_COUNTRY_CODE,
				v_SEM_CFD_INVOICE_REC.BILLING_ENTITY_PHONE_NUMBER,
				v_SEM_CFD_INVOICE_REC.BILLING_ENTITY_VAT_NUMBER,
				v_SEM_CFD_INVOICE_REC.COUNTER_PARTY_ID,
				v_SEM_CFD_INVOICE_REC.COUNTER_PARTY_NAME,
				v_SEM_CFD_INVOICE_REC.COUNTER_PARTY_STREET,
				v_SEM_CFD_INVOICE_REC.COUNTER_PARTY_CITY,
				v_SEM_CFD_INVOICE_REC.COUNTER_PARTY_STATE_CODE,
				v_SEM_CFD_INVOICE_REC.COUNTER_PARTY_POSTAL_CODE,
				v_SEM_CFD_INVOICE_REC.COUNTER_PARTY_COUNTRY_CODE,
				v_SEM_CFD_INVOICE_REC.COUNTER_PARTY_VAT_NUMBER,
				v_SEM_CFD_INVOICE_REC.CREATE_DATE,
				v_SEM_CFD_INVOICE_REC.LAST_UPDATE_DATE,
				v_SEM_CFD_INVOICE_REC.LAST_UPDATED_BY			
			FROM (SELECT CONTRACT_ID, 
						CONTRACT_TYPE, 
						DECODE(BILLING_ENTITY_ID, PURCHASER_ID, SELLER_ID, SELLER_ID, PURCHASER_ID) AS COUNTER_PARTY_ID,
						BILLING_ENTITY_ID
				  FROM INTERCHANGE_CONTRACT) C,
				SEM_CFD_CONTRACT SEMC,
				-- Counterparty Details - Address and Vat Reg. Number
				(SELECT PSE.PSE_ID,
					PSE.PSE_NAME AS COUNTER_PARTY_NAME,
					PSE.PSE_ACH_NUMBER AS COUNTER_PARTY_VAT_NUMBER,
					A.STREET AS COUNTER_PARTY_STREET,
					A.CITY AS COUNTER_PARTY_CITY,
					A.STATE_CODE AS COUNTER_PARTY_STATE_CODE,
					A.POSTAL_CODE AS COUNTER_PARTY_POSTAL_CODE,
					A.COUNTRY_CODE AS COUNTER_PARTY_COUNTRY_CODE
				FROM PSE LEFT OUTER JOIN ADDRESS_INFO A
				ON A.OWNER_ENTITY_ID = PSE_ID
					AND A.ENTITY_DOMAIN_ID = EC.ED_PSE
					AND TRIM(A.CATEGORY_NAME) = 'Invoice Primary') COUNTER_PARTY,
				-- Billing Entity Details - Address, Phone and Vat Reg. Number
				(SELECT PSE_ID,
					PSE_NAME AS BILLING_ENTITY_NAME,
					PSE_ACH_NUMBER AS BILLING_ENTITY_VAT_NUMBER,
					STREET AS BILLING_ENTITY_STREET,
					CITY AS BILLING_ENTITY_CITY,
					STATE_CODE AS BILLING_ENTITY_STATE_CODE,
					POSTAL_CODE AS BILLING_ENTITY_POSTAL_CODE,
					COUNTRY_CODE AS BILLING_ENTITY_COUNTRY_CODE,
					PHONE_NUMBER AS BILLING_ENTITY_PHONE_NUMBER
				FROM (SELECT * 
					  FROM PSE LEFT OUTER JOIN ADDRESS_INFO A
					  ON A.OWNER_ENTITY_ID = PSE_ID
					  	AND A.ENTITY_DOMAIN_ID = EC.ED_PSE
					  	AND TRIM(A.CATEGORY_NAME) = 'Invoice Primary') B LEFT OUTER JOIN CONTACT_AND_PHONE_INFO C
					  	ON C.OWNER_ENTITY_ID = PSE_ID
							AND C.ENTITY_DOMAIN_ID = EC.ED_PSE
							AND TRIM(C.CATEGORY_NAME) = 'Invoice Primary'
							AND TRIM(C.PHONE_TYPE) = 'Work') BILLING_ENTITY
			WHERE C.CONTRACT_ID = p_CONTRACT_ID
				AND SEMC.CONTRACT_ID = C.CONTRACT_ID
				AND COUNTER_PARTY.PSE_ID = C.COUNTER_PARTY_ID				
				AND BILLING_ENTITY.PSE_ID = C.BILLING_ENTITY_ID;

			PUT_SEM_CFD_INVOICE(v_SEM_CFD_INVOICE_REC);			

			-- Insert/Update SEM_CFD_INVOICE_LINE_ITEM table
			FOR v_LINE_ITEM IN c_LINE_ITEMS 
			LOOP
				v_SEM_CFD_INV_LINE_ITEM_REC.SEM_CFD_INVOICE_ID := v_LINE_ITEM.SEM_CFD_INVOICE_ID;
				v_SEM_CFD_INV_LINE_ITEM_REC.TRANSACTION_ID := v_LINE_ITEM.TRANSACTION_ID;
				v_SEM_CFD_INV_LINE_ITEM_REC.PRODUCT_TYPE := v_LINE_ITEM.PRODUCT_TYPE;
				v_SEM_CFD_INV_LINE_ITEM_REC.TRADE_NAME := v_LINE_ITEM.TRADE_NAME;
				v_SEM_CFD_INV_LINE_ITEM_REC.STRIKE_PRICE := v_LINE_ITEM.STRIKE_PRICE;
				v_SEM_CFD_INV_LINE_ITEM_REC.CONTRACT_LEVEL := v_LINE_ITEM.CONTRACT_LEVEL;
				v_SEM_CFD_INV_LINE_ITEM_REC.BD_AVG_SMP := v_LINE_ITEM.BD_AVG_SMP;
				v_SEM_CFD_INV_LINE_ITEM_REC.BD_DIFF_SP_SMP := v_LINE_ITEM.BD_DIFF_SP_SMP;
				v_SEM_CFD_INV_LINE_ITEM_REC.BD_TRADING_PERIODS := v_LINE_ITEM.BD_TRADING_PERIODS;
				v_SEM_CFD_INV_LINE_ITEM_REC.BD_VOLUME := v_LINE_ITEM.BD_VOLUME;
				v_SEM_CFD_INV_LINE_ITEM_REC.NBD_AVG_SMP := v_LINE_ITEM.NBD_AVG_SMP;
				v_SEM_CFD_INV_LINE_ITEM_REC.NBD_DIFF_SP_SMP := v_LINE_ITEM.NBD_DIFF_SP_SMP;
				v_SEM_CFD_INV_LINE_ITEM_REC.NBD_TRADING_PERIODS := v_LINE_ITEM.NBD_TRADING_PERIODS;
				v_SEM_CFD_INV_LINE_ITEM_REC.NBD_VOLUME := v_LINE_ITEM.NBD_VOLUME;
				
				-- Check for each trade if there exists a dispute 
				GET_DISPUTE_DETAILS(v_LINE_ITEM.TRANSACTION_ID, v_INVOICE_MONTH, p_STATEMENT_TYPE,
											  v_IS_IN_DISPUTE, v_PAYMENT_SHORTFALL_AMOUNT, v_VAT_RATE);
				
				IF v_IS_IN_DISPUTE = 1 THEN
					-- The Payment Shortfall amount corresponds to the NET amount
					v_SEM_CFD_INV_LINE_ITEM_REC.NET := v_PAYMENT_SHORTFALL_AMOUNT;
					v_SEM_CFD_INV_LINE_ITEM_REC.VAT_RATE := v_VAT_RATE;
					v_SEM_CFD_INV_LINE_ITEM_REC.VAT_AMOUNT := v_PAYMENT_SHORTFALL_AMOUNT * v_VAT_RATE;
					v_SEM_CFD_INV_LINE_ITEM_REC.GROSS := v_SEM_CFD_INV_LINE_ITEM_REC.NET + v_SEM_CFD_INV_LINE_ITEM_REC.VAT_AMOUNT;
				ELSE
					v_SEM_CFD_INV_LINE_ITEM_REC.NET := v_LINE_ITEM.NET;
					v_SEM_CFD_INV_LINE_ITEM_REC.VAT_RATE := v_LINE_ITEM.VAT_RATE;
					v_SEM_CFD_INV_LINE_ITEM_REC.VAT_AMOUNT := v_LINE_ITEM.VAT_AMOUNT;
					v_SEM_CFD_INV_LINE_ITEM_REC.GROSS := v_LINE_ITEM.GROSS;
				END IF;

				PUT_SEM_CFD_INVOICE_LINE_ITEM(v_SEM_CFD_INV_LINE_ITEM_REC);
			END LOOP;
		ELSE 
			p_MESSAGE := 'Unable to generate Invoice. ' 
						 || 'Cannot find Billing Statement for Contract - ' || EI.GET_ENTITY_NAME(EC.ED_INTERCHANGE_CONTRACT, p_CONTRACT_ID)
						 || ' and Month - ' || TO_CHAR(v_INVOICE_MONTH, 'MON YYYY') || '.' ;
		END IF;
	END;
	--------------------------------------------------------------------------------
	PROCEDURE GET_CFD_INVOICE
	(
		p_MONTH_ID IN NUMBER,
		p_STATEMENT_TYPE IN NUMBER,
		p_CONTRACT_ID IN NUMBER,
		p_STATUS OUT NUMBER,
		p_CURSOR IN OUT SYS_REFCURSOR
	) AS
		v_INVOICE_MONTH DATE;
	BEGIN
		p_STATUS := GA.SUCCESS;

		v_INVOICE_MONTH := TO_DATE(TO_CHAR(p_MONTH_ID),'YYYYMMDD');

		OPEN p_CURSOR FOR
			SELECT I.SEM_CFD_INVOICE_ID,
					I.COUNTER_PARTY_NAME,
					EI.GET_ENTITY_NAME(EC.ED_INTERCHANGE_CONTRACT, p_CONTRACT_ID) AS CONTRACT,
					TO_CHAR(I.INVOICE_MONTH, 'YYYY-MON') AS MONTH_STR,
					I.INVOICE_MONTH,
					I.INVOICE_NUMBER,
					I.PAYMENT_DUE_DATE
			FROM SEM_CFD_INVOICE I
			WHERE I.CONTRACT_ID = p_CONTRACT_ID
				AND I.STATEMENT_TYPE_ID = p_STATEMENT_TYPE
				AND I.INVOICE_MONTH = v_INVOICE_MONTH
			ORDER BY I.COUNTER_PARTY_ID, I.INVOICE_MONTH;

	END;
	--------------------------------------------------------------------------------
	PROCEDURE UPDATE_CFD_INVOICE
	(
		p_SEM_CFD_INVOICE_ID IN NUMBER,
		p_INVOICE_NUMBER IN VARCHAR2,
		p_PAYMENT_DUE_DATE IN DATE,
		p_STATUS OUT NUMBER
	)
	IS
	BEGIN
		p_STATUS := GA.SUCCESS;

		UPDATE SEM_CFD_INVOICE I SET
			I.INVOICE_NUMBER = p_INVOICE_NUMBER,
			I.PAYMENT_DUE_DATE = p_PAYMENT_DUE_DATE,
			I.LAST_UPDATE_DATE = SYSDATE,
			I.LAST_UPDATED_BY = SECURITY_CONTROLS.CURRENT_USER
		WHERE I.SEM_CFD_INVOICE_ID = p_SEM_CFD_INVOICE_ID;

	END;
	-------------------------------------------------------------
	PROCEDURE GET_MONTHLY_INVOICE_RPT
	(
		p_MONTH_ID IN NUMBER,
		p_CONTRACT_ID IN NUMBER,
		p_STATEMENT_TYPE IN NUMBER,
		p_REPORT_NAME IN VARCHAR2,
		p_SHOW_AS_CREDIT_NOTE IN NUMBER,
		p_CURSOR IN OUT SYS_REFCURSOR
	) AS
		v_INVOICE_SIGN NUMBER := 1;
	BEGIN
		

		IF p_REPORT_NAME = 'MONTHLY_INVOICE' THEN
			-- Reverse sign for Invoice when displaying as Credit Note
			IF p_SHOW_AS_CREDIT_NOTE = 1 THEN
				v_INVOICE_SIGN := -1;
			END IF;

			OPEN p_CURSOR FOR
				SELECT INVOICE_NUMBER, 
					CONTRACT_ID, 
					INVOICE_MONTH, 
					STATEMENT_TYPE_ID, 
					CONTRACT_TYPE, 
					CURRENCY,					
					INVOICE_DATE, 
					PAYMENT_DUE_DATE, 
					BILLING_ENTITY_NAME,
					BILLING_ENTITY_STREET,
					BILLING_ENTITY_CITY,
					BILLING_ENTITY_STATE_CODE,
					BILLING_ENTITY_POSTAL_CODE,
					BILLING_ENTITY_COUNTRY_CODE,
					BILLING_ENTITY_PHONE_NUMBER,
					BILLING_ENTITY_VAT_NUMBER,
					COUNTER_PARTY_NAME, 
					COUNTER_PARTY_STREET, 
					COUNTER_PARTY_CITY, 
					COUNTER_PARTY_STATE_CODE, 
					COUNTER_PARTY_POSTAL_CODE, 
					COUNTER_PARTY_COUNTRY_CODE, 
					COUNTER_PARTY_VAT_NUMBER, 
					TYPE, 
					v_INVOICE_SIGN * NET AS NET,
					v_INVOICE_SIGN * VAT AS VAT,
					v_INVOICE_SIGN * GROSS AS GROSS
				FROM SEM_CFD_MONTHLY_INVOICE I
				WHERE I.INVOICE_MONTH = TO_DATE(TO_CHAR(p_MONTH_ID),'YYYYMMDD')
					AND I.CONTRACT_ID = p_CONTRACT_ID
					AND I.STATEMENT_TYPE_ID = p_STATEMENT_TYPE;
		ELSIF p_REPORT_NAME = 'MONTHLY_INVOICE_DATA' THEN
			OPEN p_CURSOR FOR
				SELECT INVOICE_NUMBER, 
					TRADE_NAME, 
					CONTRACT_ID, 
					INVOICE_MONTH, 
					STATEMENT_TYPE_ID, 
					CONTRACT_TYPE, 
					PRODUCT_TYPE, 
					CURRENCY, 
					STRIKE_PRICE, 
					CONTRACT_LEVEL, 
					BD_AVG_SMP, 
					BD_DIFF_SP_SMP, 
					BD_TRADING_PERIODS, 
					BD_VOLUME, 
					NBD_AVG_SMP, 
					NBD_DIFF_SP_SMP, 
					NBD_TRADING_PERIODS, 
					NBD_VOLUME, 
					NET, 
					VAT_AMOUNT, 
					GROSS
				FROM SEM_CFD_MONTHLY_INVOICE_DATA I
				WHERE I.INVOICE_MONTH = TO_DATE(TO_CHAR(p_MONTH_ID),'YYYYMMDD')
					AND I.CONTRACT_ID = p_CONTRACT_ID
					AND I.STATEMENT_TYPE_ID = p_STATEMENT_TYPE;
		END IF;
	END;
	-------------------------------------------------------------
END MM_SEM_CFD_INV;
/
