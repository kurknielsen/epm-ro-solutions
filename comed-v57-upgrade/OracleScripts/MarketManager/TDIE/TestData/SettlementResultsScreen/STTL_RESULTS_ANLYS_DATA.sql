CREATE OR REPLACE PACKAGE STTL_RESULTS_ANLYS_DATA IS

PROCEDURE POPULATE_DATA;

END STTL_RESULTS_ANLYS_DATA;
/
CREATE OR REPLACE PACKAGE BODY STTL_RESULTS_ANLYS_DATA IS
----------------------------------------------------------------------------------
PROCEDURE PUT_EDC
(
	p_NAME IN VARCHAR2
) AS
	v_EDC_ID NUMBER(9);
BEGIN
	v_EDC_ID := EI.GET_ID_FROM_ALIAS(p_NAME, EC.ED_EDC, 1);
	IF v_EDC_ID IS NULL THEN
		IO.PUT_EDC(v_EDC_ID,
			p_NAME,
			p_NAME,
			p_NAME,
			0,
			'Active',
			NULL,
			NULL,
			NULL,
			'Combine',
			NULL,
			-1,
			-1,
			-1,
			0);
	END IF;
END;
----------------------------------------------------------------------------------
PROCEDURE PUT_ESP
(
	p_NAME IN VARCHAR2
) AS
	v_ESP_ID NUMBER(9);
BEGIN
	v_ESP_ID := EI.GET_ID_FROM_ALIAS(p_NAME, EC.ED_ESP, 1);
	IF v_ESP_ID IS NULL THEN
		IO.PUT_ESP(v_ESP_ID,
			p_NAME,
			p_NAME,
			p_NAME,
			0,
			NULL,
			NULL,
			'Active',
			'Ceritified',
			0);
	END IF;
END;
------------------------------------------------------------------------------
PROCEDURE PUT_COMPONENT
(
	p_ID OUT NUMBER,
	p_NAME IN VARCHAR2
) AS
BEGIN
	p_ID := EI.GET_ID_FROM_ALIAS(p_NAME, EC.ED_COMPONENT, 1);
	IF p_ID IS NULL THEN
		IO.PUT_COMPONENT(p_ID,
						p_NAME,
						p_NAME,
						p_NAME,
						0,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL);
	END IF;
END PUT_COMPONENT;
------------------------------------------------------------------------------
PROCEDURE PUT_PRODUCT
(
	p_ID OUT NUMBER,
	p_NAME IN VARCHAR2
) AS
BEGIN
	p_ID := EI.GET_ID_FROM_ALIAS(p_NAME, EC.ED_PRODUCT, 1);
	IF p_ID IS NULL THEN
		IO.PUT_PRODUCT(p_ID,
						p_NAME,
						p_NAME,
						p_NAME,
						0,
						p_NAME,
						'Product Category',
						DATE '2010-01-01',
						NULL);
	END IF;
END PUT_PRODUCT;
------------------------------------------------------------------------------
PROCEDURE PUT_PSE
(
	p_ID OUT NUMBER,
	p_NAME IN VARCHAR2
) AS
BEGIN
	p_ID := EI.GET_ID_FROM_ALIAS(p_NAME, EC.ED_PSE, 1);
	IF p_ID IS NULL THEN
		IO.PUT_PSE(p_ID,
					p_NAME,
					p_NAME,
					p_NAME,
					0,
					NULL,
					'Active',
					NULL,
					NULL,
					NULL,
					NULL,
					p_NAME,
					0,
					0,
					0,
					0,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					0,
					0,
					0,
					0,
					NULL,
					NULL,
					NULL,
					NULL);
	END IF;
END PUT_PSE;
------------------------------------------------------------------------------
PROCEDURE PUT_SERVICE_POINT
(
	p_ID OUT NUMBER,
	p_NAME IN VARCHAR2
) AS
BEGIN
	p_ID := EI.GET_ID_FROM_ALIAS(p_NAME, EC.ED_SERVICE_POINT, 1);
	IF p_ID IS NULL THEN
		IO.PUT_SERVICE_POINT(p_ID,
						p_NAME,
						p_NAME,
						p_NAME,
						0,
						'Retail',
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL,
						NULL);
	END IF;
END PUT_SERVICE_POINT;
------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_SL_METER_DATA AS
	v_BLOB BLOB;
	v_CLOB CLOB;
	v_DEST_OFFSET INTEGER := 1;
	v_SRC_OFFSET INTEGER := 1;
	v_LANG_CONTEXT NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;
	v_WARNING INTEGER;
	v_MESSAGE VARCHAR2(4000);
	v_PROCESS_ID VARCHAR2(32);
	v_PROCESS_STATUS NUMBER(9);
BEGIN
	-- Create ESP_INTV1, ESP_INTV2
	PUT_ESP('ESP_INTV1');
	PUT_ESP('ESP_PER2');

	-- Import Account, Service Location and Meter Heirarchy
	-- Account A1_INTV, SL1_INTV, M1_INTV and M2_INTV -- Interval Metered Account
	-- Account A2_PER, SL2_PER, M3_PER and M4_PER -- Non-Interval Metered Account
	v_CLOB := 'H4sIAAAAAAAAAO1XzW7bOBC+L7DvwAcQkNrdF2Ao2iFWfxCptOmlUG3BNWBLWcUONm+/I4mk+Ce3OXQvuz5EnO8bDocznCGDCcmrTKAMpzTCUsAJw1xLMeWkZIVgeaYxLrCoOLqnW5ahGAvqMjSLg7i1DuMIE8EeZySuMtCp0ntaaox+FrTMcIJYTDPBNszg0jymCcod5xhBBIhZi4IFJJ4KFzJMa+aeJZ5FcHRWzWDwCIOK4y0NqgwmaOwrVBuKClwKRliBM2FSpKQQLcSpEAlNYZ+oKPMNS8ILbPKSEsxnCxxcYoTae5RgRPJMlBDoKfhamrKsRTPNGgzFXpNG9ucJKu8aGfzmgqUAxgv0Iy23JaVZRGMyOTkM1DbkcRigcogRSTDno2g4MIjaOOWFNAODIs+TWXKNAmRaAdE7uYOrOnouaJeKQkMloziaYpYgHMcl5f7MDSv5wlIpi+OEhjkIycIsjpMKSi/oyY3CUjrFQ545x8qmnGJVJIEIbvPyae4p04adRiNBO4oKDUVRcVzAgREeTJjwlxxaD7U7gqKKHMgkzI1S+RQmb8VOG1AxUNWZ5GTMxBQED52i4MFmGDwygY+o4oC1JM+2CxRUI0VfIHs+FdqXp7TY60KaU6fFicJ8JQUUOfRWn/4EnfEBTHCxMN8oYH8/qpp9BjrGrU0OveAWn5aqy4wjw4lR1guPktN2RmwKDPT9GJEnAp2e4ARm4VL2aSWNxacls+kqbO6qCoHLQXaKJIeTuIGSzEsfMIyZsLY3ZjWgbOFhbbghKweanbJv4QAUeFjIG9vtzhNsrhPBzRlXqmErYYyiEgzzCprzNfukju5QltPYrMUJGVIZea8JfWwmZnr8SEE9ICLjWSJ3kTGhlJZfHL6CVYM+rV8L0hn5LPAi7UR4NuRf31LVLiEJ2nUjwwnOjG+9PHMNGHc6b/rX465BSberL8euRfyva903aNN1l/rQ+Dxu22t9QqRrX67n5wEK2Liez01/W2fTNHvQ4c3h3LSXgA0JfOnaJkqby2Dve922zQll1/O3pnfAKk8dhLUgvdYnB86fwbF9I8NBHnCWwXvW6viuL0XfHfr6jLL6HIiIYu+bw7FFcX25oUPb/aQRDxkazA0DY+YgWkpg6ljrPQ+IeHuWen/Dvlog+dvLpTmPGKlPTbuv+9m4RpxVNG4vtwMYberdpes9wDVhcZYZK2ImYFqApPhxMcCx20R8973ZX2Gdbd9dnyeLLwo7jNi30eh+mO8wsMMJr3e77tpeUN3ujqdT3b+hF5mjdjC4TBu2l5V+Yhk4iNcmOo9HccGJJdJwYUlFO7CkMC0PlXa8vMnYjGtaCBzW5tD1bzZqLG/has3ff8Orr9AwHyP3u7pb3a0/rD5Eq/XdRznEu8vxtYlWUTTVZRT4ZYzC39Bs6HSj6dUCH/7xRDrkD9TvJ42lN3ZmKbjfSG38obv2kW5Nf356z+o3f/+pNKx/lAap4H7/lTSsvxbDvybW59fkACyv35mCyR33+974f1zclMnbHx37qIA7rdv/H/X3Rv2PH0R94u3Pr436P3gwPn/MFAAA';
	v_BLOB := UTL_COMPRESS.LZ_UNCOMPRESS(CD.BASE64DECODE(v_CLOB));

	DBMS_LOB.CREATETEMPORARY(v_CLOB, TRUE);
	DBMS_LOB.OPEN(v_CLOB, DBMS_LOB.LOB_READWRITE);

	DBMS_LOB.CONVERTTOCLOB(v_CLOB,
		v_BLOB,
		DBMS_LOB.GETLENGTH(v_BLOB),
		v_DEST_OFFSET,
		v_SRC_OFFSET,
		1,
		v_LANG_CONTEXT,
		v_WARNING);

	DBMS_LOB.CLOSE(v_CLOB);

	DATA_IMPORT.STANDARD_IMPORT(NULL,
                                NULL,
                                v_CLOB,
								'Account Test Data',
								DATA_IMPORT.ACCOUNT_DATA_IMPORT_OPTION,
								',',
								',',
								v_PROCESS_STATUS,
								v_PROCESS_ID,
								v_MESSAGE,
                                1);

END IMPORT_ACCOUNT_SL_METER_DATA;
----------------------------------------------------------------------------------
PROCEDURE IMPORT_UOS_INVOICE AS
	v_BLOB BLOB;
	v_CLOB CLOB;
	v_DEST_OFFSET INTEGER := 1;
	v_SRC_OFFSET INTEGER := 1;
	v_LANG_CONTEXT NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;
	v_WARNING INTEGER;
	v_MESSAGE VARCHAR2(4000);
	v_PROCESS_ID VARCHAR2(32);
	v_PROCESS_STATUS NUMBER(9);
BEGIN

	v_CLOB := 'H4sIAAAAAAAAAK2TwW6DMAxA75X6J5ZlJ7EDR0ajtUJjE0Xtsf//F0vpSjMKJYeaCBlHelh+iYjSPYChPQT4+AxgiCku5tvG7ZMF2JNBY4CtWlQHBC4WxMYkfSyTdwqw3UjKN3CsoTKXn9BBDILxP4/c8kDor0VDKMXfm55hdUJrThU0u90iU0YoI3uQAmUO2Zz3D2TMj+G83iYhkVI5FNaJX995RLEuk9j2eUSj88AuVMkgu30s1DnEKFkWerya4cuh7U9vE33HrZrWf6ZVUMziGEfoimvLrFPdXGA52+4z+YVz71Wm2h2j83nkF+79cC1T+4ylLh+AkfuGE2CBDUxju/kFJT46W24EAAA=';
	v_BLOB := UTL_COMPRESS.LZ_UNCOMPRESS(CD.BASE64DECODE(v_CLOB));

	DBMS_LOB.CREATETEMPORARY(v_CLOB, TRUE);
	DBMS_LOB.OPEN(v_CLOB, DBMS_LOB.LOB_READWRITE);

	DBMS_LOB.CONVERTTOCLOB(v_CLOB,
		v_BLOB,
		DBMS_LOB.GETLENGTH(v_BLOB),
		v_DEST_OFFSET,
		v_SRC_OFFSET,
		1,
		v_LANG_CONTEXT,
		v_WARNING);

	DBMS_LOB.CLOSE(v_CLOB);
	SECURITY_CONTROLS.SET_CURRENT_ROLES(ID_TABLE(ID_TYPE(SECURITY_CONTROLS.g_SUPER_USER_ROLE_ID)));
	MM_TDIE_BACKING_SHEETS.IMPORT(v_CLOB,'UoS Test Invoice','UoS',v_PROCESS_ID, v_PROCESS_STATUS, v_MESSAGE);

END IMPORT_UOS_INVOICE;
----------------------------------------------------------------------------------
PROCEDURE IMPORT_DUOS_INVOICE AS
	v_BLOB BLOB;
	v_CLOB CLOB;
	v_DEST_OFFSET INTEGER := 1;
	v_SRC_OFFSET INTEGER := 1;
	v_LANG_CONTEXT NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;
	v_WARNING INTEGER;
	v_MESSAGE VARCHAR2(4000);
	v_PROCESS_ID VARCHAR2(32);
	v_PROCESS_STATUS NUMBER(9);
BEGIN
	v_CLOB := 'H4sIAAAAAAAAAH2OQWoEQQhF9w19ExG/lmW5HJgQZjMJ6ZDt3P8Wsaa7AyGQvyqtpz5QCGSmS6Pr9kbbxUlnD9LVmputi/6iulj9ZkSOLpMDXfC43T+/iLDR9bWfC3A8DGQWKlx4rUoeoMy+19o4hGpUwRpVjlm7s+whiD7Brs5egI9jcgj3QRgQDqtTNYPx1xZP25Ydp60+3l8+/pHVOOU8wTAyjEOeU6drnZRSgXEDuf64+o5VUpXdSr5FoetSgg2NPNKyfNu6fAOP9ZusfAEAAA==';
	v_BLOB := UTL_COMPRESS.LZ_UNCOMPRESS(CD.BASE64DECODE(v_CLOB));

	DBMS_LOB.CREATETEMPORARY(v_CLOB, TRUE);
	DBMS_LOB.OPEN(v_CLOB, DBMS_LOB.LOB_READWRITE);

	DBMS_LOB.CONVERTTOCLOB(v_CLOB,
		v_BLOB,
		DBMS_LOB.GETLENGTH(v_BLOB),
		v_DEST_OFFSET,
		v_SRC_OFFSET,
		1,
		v_LANG_CONTEXT,
		v_WARNING);

	DBMS_LOB.CLOSE(v_CLOB);
	SECURITY_CONTROLS.SET_CURRENT_ROLES(ID_TABLE(ID_TYPE(SECURITY_CONTROLS.g_SUPER_USER_ROLE_ID)));
	MM_TDIE_BACKING_SHEETS.IMPORT(v_CLOB,'DUoS Test Invoice','DUoS',v_PROCESS_ID, v_PROCESS_STATUS, v_MESSAGE);

END IMPORT_DUOS_INVOICE;
----------------------------------------------------------------------------------
PROCEDURE IMPORT_TUOS_INVOICE AS
	v_BLOB BLOB;
	v_CLOB CLOB;
	v_DEST_OFFSET INTEGER := 1;
	v_SRC_OFFSET INTEGER := 1;
	v_LANG_CONTEXT NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;
	v_WARNING INTEGER;
	v_MESSAGE VARCHAR2(4000);
	v_PROCESS_ID VARCHAR2(32);
	v_PROCESS_STATUS NUMBER(9);
BEGIN
	v_CLOB := 'H4sIAAAAAAAAAO2bW3OjNhiG7zvT/6CrTrsjU50AcUlsNvaOTVLA6eRqR0lozKwNGUy2dX99BfiU1k5lxwc8oxsPkj4E6HkRL3xyNLwJLepwGA2zKfCztHUbT8EXkQKCkAN7aVIkYgyukvFYhtyEZQi49UKIcEtGtTCCdLkVeH3PDb0ORLw1ELOyipDFFrYhhJHslSKM4VWWP4FrkUwhppybEHaisNUhVYCFOOFU9nbvu14QAjdod3uR146GgdsH4X0YeYMQ9CN5HNkldPHXnh/drXXpjZO/xUNcjAAY5g8iTcQ3iKcF+DzOshyAvnh5mYLfXsUMtpNiVm7lRZzDzuvDOEkBhu0s/wbKJtjL47FInyBEpPXF9VtySFaXOz/ldtcNrnv+Nbh1A3fgRfKUYSeeyN1AR8yAl8b58wxEuUinf8Q5+PR+I6GGZWGb2XDw+wjeVxe42KMKmyTTaSIhhHH+PXmM5bhigjElEMMSWQvRxcmWRdAC5QnPS7BiWPFeIYJXP/4QaRkcUQZ+8jwqtgthWzM1OGMOMXdUggmJVkJDlRBlhRy8rUrY1kxsw0SWZZMdpcAh1VJomhS68naP5REHsew4ls+BmuOn7Q1IYlekTk1sc8g09aZRH4i/ksnrBPQmL1legLZ4EY9lf9vqkUEIV+cu73ZGoam5N457lhaj8Qy0RyJ/jsFtnuWiKOHVQP+3HRmOHC51EZjQ0iI4pwgCN/JWzi8u/qz2nt/WC8yBKGKlGGZQSm3ovebZr4vJoKPy6Kf6faCBOlh6und0sDEGG45jOgsdjHYQgqVfBxokhHA2LeLJgtF0kw7eCyFyOkB4Hxk4+lWgSTJInmIwEKl4jidxWmyUwTsh0hwiax8ZMKzfDZoggzs3qkkuNyRSbMIdSDLt9hvg9r0QfL4JgNtu3wz9CPR8sHwJkCfnBXduH/4sfgHvez2VEIyIYbLqni9VMi8ualUeAVhbwktRzMN/5PAvV6gSYjLDWeqlKtQ1Klph2jVeilYel0LY7BwVIixmoJVU6tK8TkUstvaWlyKWp5UUNvpLhQhmcL7USlWoa1RMC9L280KUUhrTOXBY2lLGDYvPf9VYkws3qCZC9hvUDBHOLRiAn0AXdN1+fw0r+XrrBUemuuHCjrIEgXID2cSyeZVt9JU+PWPCbWfdX2IN/DzA91xs4BjEZCY3d2POybpP1MzPxHzPZQXMNiiRdzrdEbq57vc09FND33MBgRpfORA2XXdpmu+p+e6+VIBydcCSsIPWrZkGfHLAH1wTgOEOrMn6ggDN+pisj5r695UyA+X8jbQPPyvxgyX51ZFTbcPPgvzA6Xx14Ja24OcBftjEvTpwrj35aYFvTdErM3OwttkntdknTMZbZp0CkWIot6uyyjdSrr1Z8yRxkGy7wwxmLUVRl+Z1KvM71g6uecI4QGodY/nY4KvJoi4ualWUwbTVa54yDpBHtw2+eohUhbpGRRO2doON08TbjLkPOTYwn/+qUXUu3C9ii3L6BquNUbmWLOgOwXXfk6NWDl9wD9r94VVJ2KgRY4Tk9ZucENyoD7Uf+Bs/MZBtIrZLDp1QbtIP+cN/AOf+59nOQQAA';
	v_BLOB := UTL_COMPRESS.LZ_UNCOMPRESS(CD.BASE64DECODE(v_CLOB));

	DBMS_LOB.CREATETEMPORARY(v_CLOB, TRUE);
	DBMS_LOB.OPEN(v_CLOB, DBMS_LOB.LOB_READWRITE);

	DBMS_LOB.CONVERTTOCLOB(v_CLOB,
		v_BLOB,
		DBMS_LOB.GETLENGTH(v_BLOB),
		v_DEST_OFFSET,
		v_SRC_OFFSET,
		1,
		v_LANG_CONTEXT,
		v_WARNING);

	DBMS_LOB.CLOSE(v_CLOB);
	SECURITY_CONTROLS.SET_CURRENT_ROLES(ID_TABLE(ID_TYPE(SECURITY_CONTROLS.g_SUPER_USER_ROLE_ID)));
	MM_TDIE_BACKING_SHEETS.IMPORT(v_CLOB,'TUoS Test Invoice','TUoS',v_PROCESS_ID, v_PROCESS_STATUS, v_MESSAGE);

END IMPORT_TUOS_INVOICE;
----------------------------------------------------------------------------------
PROCEDURE IMPORT_INTV_DATA AS
	v_BLOB BLOB;
	v_CLOB CLOB;
	v_DEST_OFFSET INTEGER := 1;
	v_SRC_OFFSET INTEGER := 1;
	v_LANG_CONTEXT NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;
	v_WARNING INTEGER;
	v_MESSAGE VARCHAR2(4000);
	v_PROCESS_ID VARCHAR2(32);
	v_PROCESS_STATUS NUMBER(9);
BEGIN
	v_CLOB := 'H4sIAAAAAAAAAKWMPQrCQBQGe8E75AAD2e/t5q8M2FgkjWIrYXmFhQph9fwqegOrmWZmzPn+uJVqXq7O5MXXrx58fV6yV7ulOMKIJBpaOnoGFJCQoYgSalCLOtSjAQvYuzEsYmm7GXXez8cT04+qVVv4PP4cvwDeo6hgvgAAAA==';
	v_BLOB := UTL_COMPRESS.LZ_UNCOMPRESS(CD.BASE64DECODE(v_CLOB));

	DBMS_LOB.CREATETEMPORARY(v_CLOB, TRUE);
	DBMS_LOB.OPEN(v_CLOB, DBMS_LOB.LOB_READWRITE);

	DBMS_LOB.CONVERTTOCLOB(v_CLOB,
		v_BLOB,
		DBMS_LOB.GETLENGTH(v_BLOB),
		v_DEST_OFFSET,
		v_SRC_OFFSET,
		1,
		v_LANG_CONTEXT,
		v_WARNING);

	DBMS_LOB.CLOSE(v_CLOB);

	DATA_IMPORT.STANDARD_IMPORT(NULL,
                            NULL,
                            v_CLOB,
							'Interval Test Data',
							DATA_IMPORT.INTVL_METERD_USAGE_DATA,
							',',
							',',
							v_PROCESS_STATUS,
							v_PROCESS_ID,
							v_MESSAGE,
                            1);

END IMPORT_INTV_DATA;
----------------------------------------------------------------------------------
PROCEDURE IMPORT_NON_INTV_DATA AS
	v_BLOB BLOB;
	v_CLOB CLOB;
	v_DEST_OFFSET INTEGER := 1;
	v_SRC_OFFSET INTEGER := 1;
	v_LANG_CONTEXT NUMBER := DBMS_LOB.DEFAULT_LANG_CTX;
	v_WARNING INTEGER;
	v_MESSAGE VARCHAR2(4000);
	v_PROCESS_ID VARCHAR2(32);
	v_PROCESS_STATUS NUMBER(9);
BEGIN
	v_CLOB := 'H4sIAAAAAAAAAHNMTs4vzStR8EvMTdXxTS1JLYIwXYMDIAyn1PTMPAWXxBKgWF4KhOGUmZOTmqIQWpyYDtVUrBCUmpgCYcNkeLkcjeIDXIN0fI3BFNBICMNQ31DfyMDQAMgwhrF0jHSMERpMiNUAAHkROAG/AAAA';
	v_BLOB := UTL_COMPRESS.LZ_UNCOMPRESS(CD.BASE64DECODE(v_CLOB));

	DBMS_LOB.CREATETEMPORARY(v_CLOB, TRUE);
	DBMS_LOB.OPEN(v_CLOB, DBMS_LOB.LOB_READWRITE);

	DBMS_LOB.CONVERTTOCLOB(v_CLOB,
		v_BLOB,
		DBMS_LOB.GETLENGTH(v_BLOB),
		v_DEST_OFFSET,
		v_SRC_OFFSET,
		1,
		v_LANG_CONTEXT,
		v_WARNING);

	DBMS_LOB.CLOSE(v_CLOB);

	DATA_IMPORT.STANDARD_IMPORT(NULL,
                            NULL,
                            v_CLOB,
							'Non-Interval Test Data',
							DATA_IMPORT.NON_INTVL_METERD_USAGE_DATA,
							',',
							',',
							v_PROCESS_STATUS,
							v_PROCESS_ID,
							v_MESSAGE,
                            1);

END IMPORT_NON_INTV_DATA;
----------------------------------------------------------------------------------
PROCEDURE POPULATE_RETAIL_INVOICE_DATA AS
	v_COMPONENT1 NUMBER(9);
	v_COMPONENT2 NUMBER(9);
	v_COMPONENT3 NUMBER(9);
	v_COMPONENT4 NUMBER(9);
	v_COMPONENT5 NUMBER(9);

	v_PRODUCT1 NUMBER(9);
	v_PRODUCT2 NUMBER(9);
	v_PRODUCT3 NUMBER(9);

	v_SENDER_PSE1 NUMBER(9);
	v_SENDER_PSE2 NUMBER(9);
	v_RECIPIENT_PSE1 NUMBER(9);

	v_RETAIL_INVOICE1 NUMBER(9);
	v_RETAIL_INVOICE2 NUMBER(9);

	v_RETAIL_INVOICE_LINE1 NUMBER(9);

	v_RETAIL_INVOICE_LINE_COMP_ID1 NUMBER(9);

	v_INVOICE_LINE_VALIDATION_ID1 NUMBER(9);
	v_INVOICE_LINE_VALIDATION_ID2 NUMBER(9);

	v_SP1 NUMBER(9);


BEGIN
	PUT_COMPONENT(v_COMPONENT1, 'Component1');
	PUT_COMPONENT(v_COMPONENT2, 'Component2');
	PUT_COMPONENT(v_COMPONENT3, 'Component3');
	PUT_COMPONENT(v_COMPONENT4, 'Component4');
	PUT_COMPONENT(v_COMPONENT5, 'Component5');

	PUT_PRODUCT(v_PRODUCT1, 'Product1');
	PUT_PRODUCT(v_PRODUCT2, 'Product2');
	PUT_PRODUCT(v_PRODUCT3, 'Product3');

	PUT_PSE(v_SENDER_PSE1, 'Sender1');
	PUT_PSE(v_SENDER_PSE2, 'Sender2');
	PUT_PSE(v_RECIPIENT_PSE1, 'Recipient1');

	PUT_SERVICE_POINT(v_SP1, 'Service Point1');

	-- Retail Invoice
	DELETE FROM RETAIL_INVOICE;

	SELECT RETAIL_INVOICE_ID.NEXTVAL INTO v_RETAIL_INVOICE1 FROM DUAL;
	insert into RETAIL_INVOICE (RETAIL_INVOICE_ID, RECIPIENT_PSE_ID, SENDER_PSE_ID, INVOICE_NUMBER, INVOICE_DATE, PROCESS_ID, TIME_ZONE, SERVICE_CODE, STATEMENT_TYPE_ID)
	values (v_RETAIL_INVOICE1, v_RECIPIENT_PSE1, v_SENDER_PSE1, '11111', to_date('05-01-2010', 'dd-mm-yyyy'), LOGS.CURRENT_PROCESS_ID, 'EDT', 'A', 1);

	SELECT RETAIL_INVOICE_ID.NEXTVAL INTO v_RETAIL_INVOICE2 FROM DUAL;
	insert into RETAIL_INVOICE (RETAIL_INVOICE_ID, RECIPIENT_PSE_ID, SENDER_PSE_ID, INVOICE_NUMBER, INVOICE_DATE, PROCESS_ID, TIME_ZONE, SERVICE_CODE, STATEMENT_TYPE_ID)
	values (v_RETAIL_INVOICE2, v_RECIPIENT_PSE1, v_SENDER_PSE2, '22222', to_date('12-01-2010', 'dd-mm-yyyy'), LOGS.CURRENT_PROCESS_ID, 'EDT', 'A', 1);

	-- Retail Invoice Component
	DELETE FROM RETAIL_INVOICE_COMPONENT;

	insert into RETAIL_INVOICE_COMPONENT (RETAIL_INVOICE_ID, PRODUCT_ID, COMPONENT_ID, PERIOD_ID, TOTAL_INTERNAL_QUANTITY, TOTAL_INTERNAL_AMOUNT, TOTAL_EXTERNAL_QUANTITY, TOTAL_EXTERNAL_AMOUNT)
	values (v_RETAIL_INVOICE1, v_PRODUCT3, v_COMPONENT5, 3, 0.5, 0.75, 1, 1);

	insert into RETAIL_INVOICE_COMPONENT (RETAIL_INVOICE_ID, PRODUCT_ID, COMPONENT_ID, PERIOD_ID, TOTAL_INTERNAL_QUANTITY, TOTAL_INTERNAL_AMOUNT, TOTAL_EXTERNAL_QUANTITY, TOTAL_EXTERNAL_AMOUNT)
	values (v_RETAIL_INVOICE1, v_PRODUCT1, v_COMPONENT1, 1, 2, 3, 11, 11);

	insert into RETAIL_INVOICE_COMPONENT (RETAIL_INVOICE_ID, PRODUCT_ID, COMPONENT_ID, PERIOD_ID, TOTAL_INTERNAL_QUANTITY, TOTAL_INTERNAL_AMOUNT, TOTAL_EXTERNAL_QUANTITY, TOTAL_EXTERNAL_AMOUNT)
	values (v_RETAIL_INVOICE1, v_PRODUCT1, v_COMPONENT2, 1, null, 11, 13, 13);

	insert into RETAIL_INVOICE_COMPONENT (RETAIL_INVOICE_ID, PRODUCT_ID, COMPONENT_ID, PERIOD_ID, TOTAL_INTERNAL_QUANTITY, TOTAL_INTERNAL_AMOUNT, TOTAL_EXTERNAL_QUANTITY, TOTAL_EXTERNAL_AMOUNT)
	values (v_RETAIL_INVOICE2, v_PRODUCT2, v_COMPONENT3, 2, 2, 3, 10, 10);

	insert into RETAIL_INVOICE_COMPONENT (RETAIL_INVOICE_ID, PRODUCT_ID, COMPONENT_ID, PERIOD_ID, TOTAL_INTERNAL_QUANTITY, TOTAL_INTERNAL_AMOUNT, TOTAL_EXTERNAL_QUANTITY, TOTAL_EXTERNAL_AMOUNT)
	values (v_RETAIL_INVOICE2, v_PRODUCT2, v_COMPONENT4, 2, 4, 5, 10, 10);

	-- Retail Invoice Line
	DELETE FROM RETAIL_INVOICE_LINE;

	SELECT RETAIL_INVOICE_ID.NEXTVAL INTO v_RETAIL_INVOICE_LINE1 FROM DUAL;
	insert into RETAIL_INVOICE_LINE (RETAIL_INVOICE_LINE_ID, RETAIL_INVOICE_ID, ACCOUNT_ID, METER_ID, SERVICE_POINT_ID, METER_TYPE)
	values (v_RETAIL_INVOICE_LINE1, v_RETAIL_INVOICE1, EI.GET_ID_FROM_NAME('A2_PER',EC.ED_ACCOUNT), 0, 0, '');

	-- Retail Invoice Line Component
	DELETE FROM RETAIL_INVOICE_LINE_COMPONENT;

	SELECT RETAIL_INVOICE_ID.NEXTVAL INTO v_RETAIL_INVOICE_LINE_COMP_ID1 FROM DUAL;
	insert into RETAIL_INVOICE_LINE_COMPONENT (RETAIL_INVOICE_LINE_COMP_ID, RETAIL_INVOICE_LINE_ID, PRODUCT_ID, COMPONENT_ID, PERIOD_ID, BEGIN_DATE, END_DATE, CHARGE_STATE, INTERNAL_QUANTITY, INTERNAL_RATE, INTERNAL_AMOUNT, EXTERNAL_QUANTITY, EXTERNAL_RATE, EXTERNAL_AMOUNT, DETERMINANT_STATUS)
	values (v_RETAIL_INVOICE_LINE_COMP_ID1, v_RETAIL_INVOICE_LINE1, v_PRODUCT1, v_COMPONENT1, 1, to_date('05-01-2010', 'dd-mm-yyyy'), null, null, 1, 1, 1, 2, 2, 2, 1);

	-- Invoice Line Validation
	DELETE FROM TDIE_INVOICE_LINE_VALIDATION;

	SELECT RETAIL_INVOICE_ID.NEXTVAL INTO v_INVOICE_LINE_VALIDATION_ID1 FROM DUAL;
	insert into TDIE_INVOICE_LINE_VALIDATION (INVOICE_LINE_VALIDATION_ID, RETAIL_INVOICE_ID, MPRN, SERIAL_NUMBER, SUPPLY_UNIT, IS_VALID, ACCOUNT_ID, METER_ID, SERVICE_POINT_ID, IS_ACTIVE, HAS_SERVICE_LOCATION, JURISDICTION, INTERNAL_EDC_ID, EXTERNAL_EDC_ID, INTERNAL_PSE_ID, EXTERNAL_PSE_ID, INTERNAL_TARIFF_CODE, EXTERNAL_TARIFF_CODE, INTERNAL_MIC, EXTERNAL_MIC)
	values (v_INVOICE_LINE_VALIDATION_ID1, v_RETAIL_INVOICE1, 'Not Assigned', 'Not Assigned', 'SU1', 0, EI.GET_ID_FROM_NAME('A1_INTV',EC.ED_ACCOUNT), EI.GET_ID_FROM_NAME('M1_INTV',EC.ED_METER), null, null, null, '', EI.GET_ID_FROM_NAME('NIE',EC.ED_EDC), null, null, null, '', '', null, null);

	SELECT RETAIL_INVOICE_ID.NEXTVAL INTO v_INVOICE_LINE_VALIDATION_ID2 FROM DUAL;
	insert into TDIE_INVOICE_LINE_VALIDATION (INVOICE_LINE_VALIDATION_ID, RETAIL_INVOICE_ID, MPRN, SERIAL_NUMBER, SUPPLY_UNIT, IS_VALID, ACCOUNT_ID, METER_ID, SERVICE_POINT_ID, IS_ACTIVE, HAS_SERVICE_LOCATION, JURISDICTION, INTERNAL_EDC_ID, EXTERNAL_EDC_ID, INTERNAL_PSE_ID, EXTERNAL_PSE_ID, INTERNAL_TARIFF_CODE, EXTERNAL_TARIFF_CODE, INTERNAL_MIC, EXTERNAL_MIC)
	values (v_INVOICE_LINE_VALIDATION_ID2, v_RETAIL_INVOICE1, 'Not Assigned', 'Not Assigned', 'SU2', 1, null, null, null, null, null, '', null, null, null, null, '', '', null, null);

	-- Unmetered Account
	DELETE FROM TDIE_ACCOUNT;
	INSERT INTO TDIE_ACCOUNT
	VALUES (EI.GET_ID_FROM_NAME('A1_INTV',EC.ED_ACCOUNT), DATE '2010-01-01');

	-- Validate the UoS Invoice to check the 'Uninvoiced Accounts',
	-- 'Account Variances' and 'Metered Usage Variances' reports
	UPDATE TDIE_UOS_INVOICE U
	SET U.RETAIL_INVOICE_ID = v_RETAIL_INVOICE1
	WHERE U.INVOICE_NUMBER = '556000000000';

END POPULATE_RETAIL_INVOICE_DATA;
----------------------------------------------------------------------------------
PROCEDURE POPULATE_DATA AS
BEGIN
	SECURITY_CONTROLS.SET_CURRENT_USER(SECURITY_CONTROLS.c_SUSER_SYSTEM);
	IMPORT_ACCOUNT_SL_METER_DATA;
	IMPORT_UOS_INVOICE;
	IMPORT_DUOS_INVOICE;
	IMPORT_TUOS_INVOICE;
	IMPORT_INTV_DATA;
	IMPORT_NON_INTV_DATA;
	POPULATE_RETAIL_INVOICE_DATA;
END POPULATE_DATA;
----------------------------------------------------------------------------------
END STTL_RESULTS_ANLYS_DATA;
/
