--Revision: $Revision: 1.2 $
DECLARE
	v_SUPER_ID	NUMBER(9);
	v_POWER_ID	NUMBER(9);
	v_USER_ID	NUMBER(9);
	v_ADMIN_ID	NUMBER(9);
	v_READ_ID	NUMBER(9);

	v_ACTION_ID NUMBER(9);
	v_ROLES		UT.STRING_MAP;

	----------------------------------------------------------------------------------------------------
	PROCEDURE PUT_SYSTEM_ACTION_ROLE
		(
		p_ACTION_ID IN NUMBER,
		p_ROLE_ID IN NUMBER,
		p_REALM_ID IN NUMBER,
		p_ENTITY_DOMAIN_ID IN NUMBER,
		p_ENTRY_DATE IN DATE
		) AS
    
    	v_COUNT PLS_INTEGER;
    
	BEGIN
		IF p_ROLE_ID IS NULL THEN
			RETURN; -- no role? nothing to do...
		END IF;

		SELECT COUNT(1)
		INTO v_COUNT
		FROM SYSTEM_ACTION_ROLE
		WHERE ACTION_ID = p_ACTION_ID AND ROLE_ID = p_ROLE_ID AND REALM_ID = p_REALM_ID AND ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID;
		
		IF v_COUNT = 0 THEN
			INSERT INTO SYSTEM_ACTION_ROLE (ACTION_ID, ROLE_ID, REALM_ID, ENTITY_DOMAIN_ID, ENTRY_DATE)
			VALUES (p_ACTION_ID, p_ROLE_ID, p_REALM_ID, p_ENTITY_DOMAIN_ID, p_ENTRY_DATE);
		END IF;
	END PUT_SYSTEM_ACTION_ROLE;
	--------------------------------------------------------
	FUNCTION PUT_SYSTEM_ACTION
		(
		p_ACTION_ID OUT NUMBER,
		p_ACTION_NAME IN VARCHAR2,
		p_ACTION_ALIAS IN VARCHAR2,
		p_ACTION_DESC IN VARCHAR2,
		p_ENTITY_DOMAIN_ID IN NUMBER,
		p_MODULE IN VARCHAR2,
		p_ACTION_TYPE IN VARCHAR2
		) RETURN BOOLEAN AS
	BEGIN
		p_ACTION_ID := ID.ID_FOR_SYSTEM_ACTION(p_ACTION_NAME);

		IF p_ACTION_ID <= 0 THEN

			SELECT OID.NEXTVAL INTO p_ACTION_ID FROM DUAL;

			INSERT INTO SYSTEM_ACTION (ACTION_ID, ACTION_NAME, ACTION_ALIAS, ACTION_DESC, ENTITY_DOMAIN_ID, MODULE, ACTION_TYPE, ENTRY_DATE)
			VALUES (p_ACTION_ID, p_ACTION_NAME, p_ACTION_ALIAS, p_ACTION_DESC, p_ENTITY_DOMAIN_ID, p_MODULE, p_ACTION_TYPE, SYSDATE);

			RETURN TRUE;

		ELSE
			UPDATE SYSTEM_ACTION SET ACTION_NAME = p_ACTION_NAME, ACTION_ALIAS = p_ACTION_ALIAS, ACTION_DESC = p_ACTION_DESC, ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID, MODULE = p_MODULE, ACTION_TYPE = p_ACTION_TYPE, ENTRY_DATE = SYSDATE
			WHERE ACTION_ID = p_ACTION_ID;

			RETURN FALSE;
		END IF;
	END PUT_SYSTEM_ACTION;
	--------------------------------------------------------    
	PROCEDURE PUT_SYSTEM_ACTION_DOMAINS
		(
		p_ROLES IN UT.STRING_MAP,
		p_ACTION_NAME IN VARCHAR2,
		p_MODULE IN VARCHAR2,
		p_ACTION_TYPE IN VARCHAR2
		) AS
		
		v_ACTION_ID NUMBER(9);
		v_ROLES		UT.STRING_MAP := p_ROLES;
		v_ROLE		VARCHAR2(32);
		v_ROLE_ID	NUMBER(9);
		CURSOR cur_DOMAINS(p_REGEX_CATEGORY IN VARCHAR2) IS
			SELECT ENTITY_DOMAIN_ID
			FROM ENTITY_DOMAIN
			WHERE ((SUBSTR(p_REGEX_CATEGORY,1,1) <> '!' AND REGEXP_LIKE(NVL(ENTITY_DOMAIN_CATEGORY,'?'), p_REGEX_CATEGORY))
				OR (SUBSTR(p_REGEX_CATEGORY,1,1) = '!' AND NOT REGEXP_LIKE(NVL(ENTITY_DOMAIN_CATEGORY,'?'), SUBSTR(p_REGEX_CATEGORY,2))))
				AND NVL(IS_PSEUDO,0) = 0
				AND ENTITY_DOMAIN_ID <> 0;

	BEGIN
		IF NOT PUT_SYSTEM_ACTION(v_ACTION_ID, p_ACTION_NAME, SUBSTR(p_ACTION_NAME,1,32), p_ACTION_NAME, -1, p_MODULE, p_ACTION_TYPE) THEN
		    RETURN; -- if action already existed, return - don't bother changing role assignments
		END IF;

		IF v_ACTION_ID IS NOT NULL THEN

			-- super-user has access to everything
			v_ROLES('S') := '.';

			v_ROLE := v_ROLES.FIRST;
			WHILE v_ROLES.EXISTS(v_ROLE) LOOP
				v_ROLE_ID := CASE v_ROLE WHEN 'S' THEN v_SUPER_ID WHEN 'A' THEN v_ADMIN_ID WHEN 'P' THEN v_POWER_ID WHEN 'U' THEN v_USER_ID WHEN 'R' THEN v_READ_ID ELSE NULL END;
				FOR v_DOMAIN IN cur_DOMAINS(v_ROLES(v_ROLE)) LOOP
					PUT_SYSTEM_ACTION_ROLE(v_ACTION_ID, v_ROLE_ID, SD.g_ALL_DATA_REALM_ID, v_DOMAIN.ENTITY_DOMAIN_ID, SYSDATE);
				END LOOP;
				v_ROLE := v_ROLES.NEXT(v_ROLE);
			END LOOP;

		END IF;

	END PUT_SYSTEM_ACTION_DOMAINS;
	--------------------------------------------------------    
	PROCEDURE PUT_SYSTEM_ACTION_SIMPLE
		(
		p_ROLES IN VARCHAR2,
		p_ACTION_NAME IN VARCHAR2,
		p_ENTITY_DOMAIN_ID IN NUMBER,
		p_MODULE IN VARCHAR2,
		p_ACTION_TYPE IN VARCHAR2
		) AS
		v_ACTION_ID NUMBER(9);
		v_ROLES		UT.STRING_MAP;
		v_IDX		PLS_INTEGER;
	BEGIN
		IF p_ENTITY_DOMAIN_ID = -1 THEN
			FOR v_IDX IN 1..LENGTH(p_ROLES) LOOP
				v_ROLES(SUBSTR(p_ROLES,v_IDX,1)) := '.';
			END LOOP;
			PUT_SYSTEM_ACTION_DOMAINS(v_ROLES, p_ACTION_NAME, p_MODULE, p_ACTION_TYPE);
		ELSE
			IF NOT PUT_SYSTEM_ACTION(v_ACTION_ID, p_ACTION_NAME, SUBSTR(p_ACTION_NAME,1,32), p_ACTION_NAME, p_ENTITY_DOMAIN_ID, p_MODULE, p_ACTION_TYPE) THEN
			    RETURN; -- if action already existed, return - don't bother changing role assignments
			END IF;

			IF v_ACTION_ID IS NOT NULL THEN
				-- super-user has access to everything
				PUT_SYSTEM_ACTION_ROLE(v_ACTION_ID, v_SUPER_ID, SD.g_ALL_DATA_REALM_ID, p_ENTITY_DOMAIN_ID, SYSDATE);
			
				IF INSTR(p_ROLES, 'A') > 0 THEN
					PUT_SYSTEM_ACTION_ROLE(v_ACTION_ID, v_ADMIN_ID, SD.g_ALL_DATA_REALM_ID, p_ENTITY_DOMAIN_ID, SYSDATE);
				END IF;
				IF INSTR(p_ROLES, 'P') > 0 THEN
					PUT_SYSTEM_ACTION_ROLE(v_ACTION_ID, v_POWER_ID, SD.g_ALL_DATA_REALM_ID, p_ENTITY_DOMAIN_ID, SYSDATE);
				END IF;
				IF INSTR(p_ROLES, 'U') > 0 THEN
					PUT_SYSTEM_ACTION_ROLE(v_ACTION_ID, v_USER_ID, SD.g_ALL_DATA_REALM_ID, p_ENTITY_DOMAIN_ID, SYSDATE);
				END IF;
				IF INSTR(p_ROLES, 'R') > 0 THEN
					PUT_SYSTEM_ACTION_ROLE(v_ACTION_ID, v_READ_ID, SD.g_ALL_DATA_REALM_ID, p_ENTITY_DOMAIN_ID, SYSDATE);
				END IF;
			END IF;
		END IF;
	END PUT_SYSTEM_ACTION_SIMPLE;
	--------------------------------------------------------    

BEGIN
    -- get role IDs
	SELECT MAX(ROLE_ID) INTO v_SUPER_ID
	FROM APPLICATION_ROLE
	WHERE ROLE_NAME = 'Super-User';

	SELECT MAX(ROLE_ID) INTO v_ADMIN_ID
	FROM APPLICATION_ROLE
	WHERE ROLE_NAME = 'Administrator';

	SELECT MAX(ROLE_ID) INTO v_READ_ID
	FROM APPLICATION_ROLE
	WHERE ROLE_NAME = 'Read-Only';

	SELECT MAX(ROLE_ID) INTO v_USER_ID
	FROM APPLICATION_ROLE
	WHERE ROLE_NAME = 'User';

	SELECT MAX(ROLE_ID) INTO v_POWER_ID
	FROM APPLICATION_ROLE
	WHERE ROLE_NAME = 'Power-User';

-- MODULE-LEVEL SECURITY ACTIONS

	v_ROLES('S') := '.';
	v_ROLES('A') := '^Configuration$|^Security$'; -- Admins can only edit config and security entities
	v_ROLES('P') := '!^Security$'; -- Power-users can edit everything EXCEPT security entities
	v_ROLES('U') := '!^Calculations$|^Configuration$|^Security$'; -- Users can edit everything EXCEPT calculation, config, and security entities

	-- Update
	PUT_SYSTEM_ACTION_SIMPLE('SAPU', 'Import TDIE Files', CONSTANTS.NOT_ASSIGNED, 'Data Setup', 'Create');
	PUT_SYSTEM_ACTION_SIMPLE('SAPU', 'Run Any IE T&D Invoice Validation', CONSTANTS.NOT_ASSIGNED, 'Data Setup', 'Create');
	PUT_SYSTEM_ACTION_SIMPLE('SAPU', 'Run Any IE T&D Financial Settlement', CONSTANTS.NOT_ASSIGNED, 'Data Setup', 'Create');

	-- DONE!
	COMMIT;
END;
/

