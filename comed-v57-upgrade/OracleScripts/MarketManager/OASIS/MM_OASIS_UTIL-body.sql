CREATE OR REPLACE PACKAGE BODY MM_OASIS_UTIL IS

------------------------------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.1 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
PROCEDURE GET_ID_FOR_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_NAME IN VARCHAR2,
	p_ATTRIBUTE_ID IN OUT NUMBER
	) AS

BEGIN
	ID.ID_FOR_ENTITY_ATTRIBUTE(p_ATTRIBUTE_NAME,
							   'Transaction',
							   'String',
							    TRUE,
							    p_ATTRIBUTE_ID);

END GET_ID_FOR_ENTITY_ATTRIBUTE;

------------------------------------------------------------------------------------------------------------------------
PROCEDURE PUT_ENTITY_ATTRIBUTES(p_TRANSACTION_ID IN NUMBER,
								p_ATTRIBUTE_ID   IN NUMBER,
								p_ATTRIBUTE_VAL  IN VARCHAR2,
								p_START_DATE     IN DATE,
								p_STATUS         OUT NUMBER) AS

BEGIN
	p_STATUS := GA.SUCCESS;
-- FIRST TRY TO UPDATE AN EXISTING TEMPORAL ENTITY ATTRIBUTE FOR THE OWNING ENTITY
	UPDATE TEMPORAL_ENTITY_ATTRIBUTE SET
		ATTRIBUTE_VAL = NVL(p_ATTRIBUTE_VAL,0),
		ENTRY_DATE = SYSDATE
	WHERE OWNER_ENTITY_ID = p_TRANSACTION_ID AND
		ATTRIBUTE_ID = p_ATTRIBUTE_ID AND
		BEGIN_DATE = p_START_DATE;
-- IF THE UPDATE FAILED TO FIND AN EXISTING TEMPORAL ENTITY THEN INSERT A NEW TEMPORAL ENTITY
	IF SQL%NOTFOUND THEN
		INSERT INTO TEMPORAL_ENTITY_ATTRIBUTE (
			OWNER_ENTITY_ID,
			ATTRIBUTE_ID,
			BEGIN_DATE,
			ENTITY_DOMAIN_ID,
			END_DATE,
			ATTRIBUTE_VAL,
			ENTRY_DATE)
		VALUES (
			p_TRANSACTION_ID,
			p_ATTRIBUTE_ID,
			TRUNC(p_START_DATE),
			-200,
			NULL,
			NVL(p_ATTRIBUTE_VAL,0),
			SYSDATE);
	END IF;

END PUT_ENTITY_ATTRIBUTES;
------------------------------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_PSE_IDENT(p_PSE_IDENT           IN VARCHAR2,
						  p_CREATE_IF_NOT_FOUND IN BOOLEAN) RETURN NUMBER IS

	v_PSE_ID NUMBER(9);
BEGIN

	IF p_PSE_IDENT IS NULL THEN
		RETURN NULL;
	END IF;

	ID.ID_FOR_PSE_EXTERNAL_IDENTIFIER(p_PSE_IDENT, v_PSE_ID, TRUE);

	IF v_PSE_ID < 1 AND p_CREATE_IF_NOT_FOUND THEN
		-- don't use local_time_zone, use EST. Fixes bug 9021
		IO.PUT_PSE(v_PSE_ID,
				   p_PSE_IDENT,
				   p_PSE_IDENT,
				   'Generated by OASIS transstatus import.',
				   0,
				   NULL,
				   'Active',
				   NULL,
				   NULL,
				   NULL,
				   'Marketer',
				   p_PSE_IDENT,
				   0,
				   0,
				   0,
				   0,
				   'EST',
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
				   NULL,
					NULL,
					NULL,
					NULL);
	END IF;

	RETURN v_PSE_ID;
END ID_FOR_PSE_IDENT;
--------------------------------------------------------------------------------------------------------------------------
FUNCTION GENERATE_DEAL_REF(p_CUST_ALIAS IN VARCHAR2) RETURN VARCHAR2 IS
--THE FORMAT FOR DEAL_REF: <CUST PSE_ALIAS><UNIQUE SEQUENCE ID>

v_CUST_PSE_ALIAS    PSE.PSE_ALIAS%TYPE;
v_OID 				NUMBER;
v_DEAL_REF 			VARCHAR2(12);


BEGIN
--		SELECT PSE.PSE_ALIAS INTO v_CUST_PSE_ALIAS FROM PSE WHERE PSE.PSE_EXTERNAL_IDENTIFIER=p_CUST_ALIAS;
--		SELECT OID.NEXTVAL INTO v_OID FROM DUAL;
--		v_DEAL_REF := v_CUST_PSE_ALIAS || '-' || TO_CHAR(v_OID);

		RETURN NULL;

END GENERATE_DEAL_REF;
---------------------------------------------------------------------------------------------------------------------------
FUNCTION BUILD_TXN_NAME(p_TP_ID     IN NUMBER,
						p_POR       IN VARCHAR2,
						p_POD       IN VARCHAR2,
						p_TS_TYPE   IN VARCHAR2,
						p_INCREMENT IN VARCHAR2) RETURN VARCHAR2 IS

	v_OID      NUMBER;
	v_TXN_NAME INTERCHANGE_TRANSACTION.TRANSACTION_NAME%TYPE;
	v_POR VARCHAR2(16);
	v_POD VARCHAR2(16);
	v_TP_NAME TRANSMISSION_PROVIDER.TP_NAME%TYPE;
BEGIN

	--THE FORMAT OF THE OASIS TRANSACTION NAME IS:
	--     <TP_NAME>:<POR>-<POD>:<TS TYPE>:<SERVICE INCREMENT>:<TMPSequence>
	SELECT TP_NAME INTO v_TP_NAME FROM TRANSMISSION_PROVIDER WHERE TP_ID = p_TP_ID;

	SELECT OASISTMPID.NEXTVAL INTO v_OID FROM DUAL;
	IF LENGTH(p_POR)>16 THEN
		v_POR := SUBSTR(p_POR,1,8) || '~' || SUBSTR(p_POR, LENGTH(p_POR)-8, LENGTH(p_POR));
	ELSE
		v_POR := p_POR;
	END IF;

	IF LENGTH(p_POD) > 16 THEN
		v_POD := SUBSTR(p_POD,1,8) || '~' || SUBSTR(p_POD, LENGTH(p_POD)-8, LENGTH(p_POD));
	ELSE
		v_POD := p_POD;
	END IF;

	v_TXN_NAME := v_TP_NAME || ':' || v_POR || '-' || v_POD || ':' || p_TS_TYPE || ':' || p_INCREMENT || ':' ||
				  'TMP' || v_OID;

	RETURN v_TXN_NAME;

END BUILD_TXN_NAME;
---------------------------------------------------------------------------------------------------------------------------
FUNCTION GET_SELLER_ID_FOR_TP
	(
	p_TP_ID IN NUMBER
	) RETURN NUMBER IS
	v_TP_ALIAS TRANSMISSION_PROVIDER.TP_ALIAS%TYPE;
	v_SELLER_ID NUMBER(9);
BEGIN

	SELECT TP_ALIAS INTO v_TP_ALIAS FROM TRANSMISSION_PROVIDER WHERE TP_ID = p_TP_ID;
	v_SELLER_ID := MM_OASIS_UTIL.ID_FOR_PSE_IDENT(v_TP_ALIAS, TRUE);
	RETURN v_SELLER_ID;

END GET_SELLER_ID_FOR_TP;
---------------------------------------------------------------------------------------------------------------------------
BEGIN
	BEGIN
		g_LOG_ONLY := TO_NUMBER(NVL(GET_DICTIONARY_VALUE('Log Only',0,'MarketExchange','OASIS'),'0'))<>0;
	EXCEPTION
		WHEN OTHERS THEN
			g_LOG_ONLY := FALSE;
	END;
END MM_OASIS_UTIL;
/
