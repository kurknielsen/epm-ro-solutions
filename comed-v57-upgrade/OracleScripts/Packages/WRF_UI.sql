CREATE OR REPLACE PACKAGE WRF_UI IS
-- $Revision: 1.7 $

  -- Author  : JHUMPHRIES
  -- Created : 4/22/2008 10:49:46 AM
  -- Purpose : UI procedures for WRF Profiling layout

FUNCTION WHAT_VERSION RETURN VARCHAR2;

FUNCTION GET_PARAMETERS_FOR_TEMPLATE
	(
	p_TEMPLATE_ID IN NUMBER
	) RETURN VARCHAR2;

PROCEDURE GET_SEASON_DAY_TYPES_TO_RUN
	(
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_TEMPLATE_PARAMETERS
	(
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PUT_TEMPLATE_PARAMETER
	(
	p_TEMPLATE_ID IN NUMBER,
	p_BREAKPOINT_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_VARIABLE_NBR IN NUMBER
	);

PROCEDURE PUT_SEASON_DAY_TYPE_TO_RUN
	(
	p_TEMPLATE_ID IN NUMBER,
	p_IS_SELECTED IN NUMBER,
	p_OLD_IS_SELECTED IN NUMBER
	);

PROCEDURE GET_ACCOUNTS_TO_RUN
	(
	p_RUN_MODE_ID IN NUMBER,
	p_ACCOUNT_FILTER IN VARCHAR2,
	p_ACCOUNT_FILTER_TYPE_ID IN NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PUT_ACCOUNT_TO_RUN
	(
	p_ACCOUNT_ID IN NUMBER,
	p_IS_SELECTED IN NUMBER,
	p_OLD_IS_SELECTED IN NUMBER
	);

PROCEDURE GET_SEGMENT_RUN_OPTIONS
	(
	p_MIN_SEGMENTS IN NUMBER,
	p_SORT_ASCENDING IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_WRF_FCM_LIBRARIES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_WRF_FCM_PROFILES
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_WRF_FCM_HOURS
	(
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_NUM_SEGMENTS
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_WRF_FCM_CANDIDATES
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_HOUR_ID IN NUMBER,
	p_NUM_SEGMENTS_ID IN NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_WRF_FCM_CANDIDATES_W_COEFF
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_HOUR_ID IN NUMBER,
	p_NUM_SEGMENTS_ID IN NUMBER,
	p_CURSOR OUT SYS_REFCURSOR
	);

PROCEDURE GET_WRF_FCM_ACT_VS_FCAST
	(
	p_FCM_ID IN NUMBER,
	p_NUM_SEGMENTS IN NUMBER,
	p_HOUR_NUM IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_PARAMETER_NAME1 OUT VARCHAR2,
	p_PARAMETER_NAME2 OUT VARCHAR2,
	p_PARAMETER_NAME3 OUT VARCHAR2,
	p_PARAMETER_NAME4 OUT VARCHAR2,
	p_PARAMETER_NAME5 OUT VARCHAR2,
	p_NUM_OF_OBSERVATIONS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_WRF_FCM_OBSERVATIONS
	(
	p_FCM_ID IN NUMBER,
	p_NUM_SEGMENTS IN NUMBER,
	p_PARAMETER_NAME OUT VARCHAR2,
	p_CURSOR OUT GA.REFCURSOR
	);

END WRF_UI;
/
CREATE OR REPLACE PACKAGE BODY WRF_UI IS
------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.7 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
FUNCTION GET_PARAMETERS_FOR_TEMPLATE
	(
	p_TEMPLATE_ID IN NUMBER
	) RETURN VARCHAR2 AS
v_RET VARCHAR2(4000);
CURSOR cur_PARMS IS
	SELECT P.PARAMETER_NAME
	FROM TEMPLATE_BREAKPOINT T,
		WEATHER_PARAMETER P
	WHERE P.PARAMETER_ID = T.PARAMETER_ID
		AND T.TEMPLATE_ID = p_TEMPLATE_ID
		AND T.PARAMETER_ID <> 0
	ORDER BY T.VARIABLE_NBR;
BEGIN
	FOR v_PARM IN cur_PARMS LOOP
		IF v_RET IS NOT NULL THEN
			v_RET := v_RET||', ';
		END IF;
		v_RET := v_RET||v_PARM.PARAMETER_NAME;
	END LOOP;

	RETURN v_RET;
END GET_PARAMETERS_FOR_TEMPLATE;
------------------------------------------------------------------------------------------------
PROCEDURE GET_SEASON_DAY_TYPES_TO_RUN
	(
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN

	OPEN p_CURSOR FOR
		SELECT T.TEMPLATE_NAME, T.TEMPLATE_ID,
			CASE WHEN W.TEMPLATE_ID IS NULL THEN 0 ELSE 1 END as IS_SELECTED,
			GET_PARAMETERS_FOR_TEMPLATE(T.TEMPLATE_ID) as PARAMETERS
		FROM TEMPLATE T, WRF_TEMPLATES_TO_RUN_TEMP W
		WHERE T.IS_DAY_TYPE = 1
			AND W.TEMPLATE_ID(+) = T.TEMPLATE_ID
		ORDER BY T.TEMPLATE_NAME;

END GET_SEASON_DAY_TYPES_TO_RUN;
------------------------------------------------------------------------------------------------
PROCEDURE PUT_SEASON_DAY_TYPE_TO_RUN
	(
	p_TEMPLATE_ID IN NUMBER,
	p_IS_SELECTED IN NUMBER,
	p_OLD_IS_SELECTED IN NUMBER
	) AS
BEGIN
	IF NVL(p_IS_SELECTED,0) = NVL(p_OLD_IS_SELECTED,0) THEN
		RETURN; -- nothing changed
	END IF;

	IF NVL(p_IS_SELECTED,0) = 0 THEN
		-- unselected
		DELETE WRF_TEMPLATES_TO_RUN_TEMP
		WHERE TEMPLATE_ID = p_TEMPLATE_ID;
	ELSE
		-- selected
		INSERT INTO WRF_TEMPLATES_TO_RUN_TEMP (TEMPLATE_ID) VALUES (p_TEMPLATE_ID);
	END IF;
END PUT_SEASON_DAY_TYPE_TO_RUN;
------------------------------------------------------------------------------------------------
PROCEDURE GET_TEMPLATE_PARAMETERS
	(
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN

	OPEN p_CURSOR FOR
		SELECT T.TEMPLATE_ID, T.TEMPLATE_NAME, T.VARIABLE_NBR,
			'Parameter #'||T.VARIABLE_NBR as VARIABLE_NBR_STRING,
			CASE WHEN B.PARAMETER_ID = 0 THEN NULL ELSE B.PARAMETER_ID END as PARAMETER_ID,
			CASE WHEN B.BREAKPOINT_ID = 0 THEN NULL ELSE B.BREAKPOINT_ID END as BREAKPOINT_ID
		FROM (SELECT T.TEMPLATE_ID, T.TEMPLATE_NAME, R.VARIABLE_NBR
				FROM (SELECT TEMPLATE_ID, TEMPLATE_NAME
						FROM TEMPLATE
						WHERE IS_DAY_TYPE = 1) T,
					(SELECT LEVEL as VARIABLE_NBR
						FROM DUAL
						CONNECT BY LEVEL <= 5) R) T,
			TEMPLATE_BREAKPOINT B
		WHERE B.TEMPLATE_ID(+) = T.TEMPLATE_ID
			AND B.VARIABLE_NBR(+) = T.VARIABLE_NBR
		ORDER BY T.TEMPLATE_NAME, T.VARIABLE_NBR;

END GET_TEMPLATE_PARAMETERS;
------------------------------------------------------------------------------------------------
PROCEDURE PUT_TEMPLATE_PARAMETER
	(
	p_TEMPLATE_ID IN NUMBER,
	p_BREAKPOINT_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_VARIABLE_NBR IN NUMBER
	) AS
BEGIN
	IF p_PARAMETER_ID IS NULL OR p_PARAMETER_ID = 0 THEN
		DELETE TEMPLATE_BREAKPOINT
		WHERE TEMPLATE_ID = p_TEMPLATE_ID
			AND VARIABLE_NBR = p_VARIABLE_NBR;
	ELSE
		UPDATE TEMPLATE_BREAKPOINT SET
			BREAKPOINT_ID = NVL(p_BREAKPOINT_ID,0),
			PARAMETER_ID = p_PARAMETER_ID,
			ENTRY_DATE = SYSDATE
		WHERE TEMPLATE_ID = p_TEMPLATE_ID
			AND VARIABLE_NBR = p_VARIABLE_NBR;

		IF SQL%NOTFOUND THEN
			INSERT INTO TEMPLATE_BREAKPOINT
				(TEMPLATE_ID, VARIABLE_NBR, BREAKPOINT_ID, PARAMETER_ID, ENTRY_DATE)
			VALUES
				(p_TEMPLATE_ID, p_VARIABLE_NBR, NVL(p_BREAKPOINT_ID,0), p_PARAMETER_ID, SYSDATE);
		END IF;
	END IF;
END PUT_TEMPLATE_PARAMETER;
------------------------------------------------------------------------------------------------
PROCEDURE GET_ACCOUNTS_TO_RUN
	(
	p_RUN_MODE_ID IN NUMBER,
	p_ACCOUNT_FILTER IN VARCHAR2,
	p_ACCOUNT_FILTER_TYPE_ID IN NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN

	IF p_RUN_MODE_ID <> PF.c_BATCH_RUN_MODE_SELECTED THEN
		OPEN p_CURSOR FOR
			SELECT '<html><i>(No account selection necessary)</i></html>' as ACCOUNT_NAME, NULL as ACCOUNT_ID, NULL as IS_SELECTED
			FROM DUAL;
	ELSIF p_ACCOUNT_FILTER_TYPE_ID = 0 THEN -- filter by name
	    IF MDM.GET_MDR_BACKEND_SETTING = 'TRUE' THEN
		OPEN p_CURSOR FOR
			SELECT DISTINCT A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END as IS_SELECTED,
				MIN(LP.PROFILE_SOURCE_BEGIN_DATE) as SOURCE_BEGIN_DATE,
				MAX(LP.PROFILE_SOURCE_END_DATE) as SOURCE_END_DATE
			FROM ACCOUNT A, LOAD_PROFILE LP, WRF_ACCOUNTS_TO_RUN_TEMP W
			WHERE A.ACCOUNT_ID = CASE WHEN LP.PROFILE_ACCOUNT_REF = '?' THEN NULL ELSE TO_NUMBER(LP.PROFILE_ACCOUNT_REF) END
				AND LP.PROFILE_TYPE = 'Historical'
				AND A.ACCOUNT_NAME LIKE '%'||p_ACCOUNT_FILTER||'%'
				AND W.ACCOUNT_ID(+) = A.ACCOUNT_ID
			GROUP BY A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END
			UNION --If MDR Backend Flag is TRUE then get MDR accounts 
			SELECT DISTINCT A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END as IS_SELECTED,
				CONSTANTS.LOW_DATE as SOURCE_BEGIN_DATE,
				CONSTANTS.HIGH_DATE as SOURCE_END_DATE
			FROM ACCOUNT A, WRF_ACCOUNTS_TO_RUN_TEMP W
			WHERE (A.ACCOUNT_NAME LIKE '%'||p_ACCOUNT_FILTER||'%'
				AND W.ACCOUNT_ID(+) = A.ACCOUNT_ID
				AND A.ACCOUNT_METER_TYPE = ACCOUNTS_METERS.c_METER_TYPE_INTERVAL
				AND A.IS_AGGREGATE_ACCOUNT = 1)
			GROUP BY A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END
			ORDER BY 1;
		ELSE --If MDR Backend Flag is NOT TRUE get only Non-MDR accounts
		OPEN p_CURSOR FOR
			SELECT DISTINCT A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END as IS_SELECTED,
				MIN(LP.PROFILE_SOURCE_BEGIN_DATE) as SOURCE_BEGIN_DATE,
				MAX(LP.PROFILE_SOURCE_END_DATE) as SOURCE_END_DATE
			FROM ACCOUNT A, LOAD_PROFILE LP, WRF_ACCOUNTS_TO_RUN_TEMP W
			WHERE (A.ACCOUNT_ID = CASE WHEN LP.PROFILE_ACCOUNT_REF = '?' THEN NULL ELSE TO_NUMBER(LP.PROFILE_ACCOUNT_REF) END
				AND LP.PROFILE_TYPE = 'Historical'
				AND A.ACCOUNT_NAME LIKE '%'||p_ACCOUNT_FILTER||'%'
				AND W.ACCOUNT_ID(+) = A.ACCOUNT_ID)
			GROUP BY A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END
			ORDER BY A.ACCOUNT_NAME;
		END IF;
	ELSE -- filter by alias
		IF MDM.GET_MDR_BACKEND_SETTING = 'TRUE' THEN
		OPEN p_CURSOR FOR
			SELECT DISTINCT A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END as IS_SELECTED,
				MIN(LP.PROFILE_SOURCE_BEGIN_DATE) as SOURCE_BEGIN_DATE,
				MAX(LP.PROFILE_SOURCE_END_DATE) as SOURCE_END_DATE
			FROM ACCOUNT A, LOAD_PROFILE LP, WRF_ACCOUNTS_TO_RUN_TEMP W
			WHERE A.ACCOUNT_ID = CASE WHEN LP.PROFILE_ACCOUNT_REF = '?' THEN NULL ELSE TO_NUMBER(LP.PROFILE_ACCOUNT_REF) END
				AND LP.PROFILE_TYPE = 'Historical'
				AND A.ACCOUNT_ALIAS LIKE '%'||p_ACCOUNT_FILTER||'%'
				AND W.ACCOUNT_ID(+) = A.ACCOUNT_ID
			GROUP BY A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END
			UNION --If MDR Backend Flag is TRUE then get MDR accounts 
			SELECT DISTINCT A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END as IS_SELECTED,
				CONSTANTS.LOW_DATE as SOURCE_BEGIN_DATE,
				CONSTANTS.HIGH_DATE as SOURCE_END_DATE
			FROM ACCOUNT A, WRF_ACCOUNTS_TO_RUN_TEMP W
			WHERE (A.ACCOUNT_ALIAS LIKE '%'||p_ACCOUNT_FILTER||'%'
				AND W.ACCOUNT_ID(+) = A.ACCOUNT_ID
				AND A.ACCOUNT_METER_TYPE = ACCOUNTS_METERS.c_METER_TYPE_INTERVAL
				AND A.IS_AGGREGATE_ACCOUNT = 1)
			GROUP BY A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END
			ORDER BY 1;
			ELSE --If MDR Backend Flag is NOT TRUE get only Non-MDR accounts
		OPEN p_CURSOR FOR
			SELECT DISTINCT A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END as IS_SELECTED,
				MIN(LP.PROFILE_SOURCE_BEGIN_DATE) as SOURCE_BEGIN_DATE,
				MAX(LP.PROFILE_SOURCE_END_DATE) as SOURCE_END_DATE
			FROM ACCOUNT A, LOAD_PROFILE LP, WRF_ACCOUNTS_TO_RUN_TEMP W
			WHERE (A.ACCOUNT_ID = CASE WHEN LP.PROFILE_ACCOUNT_REF = '?' THEN NULL ELSE TO_NUMBER(LP.PROFILE_ACCOUNT_REF) END
				AND LP.PROFILE_TYPE = 'Historical'
				AND A.ACCOUNT_ALIAS LIKE '%'||p_ACCOUNT_FILTER||'%'
				AND W.ACCOUNT_ID(+) = A.ACCOUNT_ID)
			GROUP BY A.ACCOUNT_NAME, A.ACCOUNT_ID,
				CASE WHEN W.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END
			ORDER BY A.ACCOUNT_NAME;
		END IF;
	END IF;

END GET_ACCOUNTS_TO_RUN;
------------------------------------------------------------------------------------------------
PROCEDURE PUT_ACCOUNT_TO_RUN
	(
	p_ACCOUNT_ID IN NUMBER,
	p_IS_SELECTED IN NUMBER,
	p_OLD_IS_SELECTED IN NUMBER
	) AS
BEGIN
	IF NVL(p_IS_SELECTED,0) = NVL(p_OLD_IS_SELECTED,0) THEN
		RETURN; -- nothing changed
	END IF;

	IF NVL(p_IS_SELECTED,0) = 0 THEN
		-- unselected
		DELETE WRF_ACCOUNTS_TO_RUN_TEMP
		WHERE ACCOUNT_ID = p_ACCOUNT_ID;
	ELSE
		-- selected
		INSERT INTO WRF_ACCOUNTS_TO_RUN_TEMP (ACCOUNT_ID) VALUES (p_ACCOUNT_ID);
	END IF;
END PUT_ACCOUNT_TO_RUN;
------------------------------------------------------------------------------------------------
PROCEDURE GET_SEGMENT_RUN_OPTIONS
	(
	p_MIN_SEGMENTS IN NUMBER,
	p_SORT_ASCENDING IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_MIN NUMBER;
v_MAX NUMBER;
BEGIN
	p_STATUS := GA.SUCCESS;

	v_MIN := GREATEST(p_MIN_SEGMENTS, NVL(GET_DICTIONARY_VALUE('Min Segments', 0, 'Profiling', 'WRF', 'FCM'),2));
	v_MAX := NVL(GET_DICTIONARY_VALUE('Max Segments', 0, 'Profiling', 'WRF', 'FCM'),5);

	OPEN p_CURSOR FOR
		SELECT LEVEL
		FROM DUAL
		WHERE LEVEL >= v_MIN
		CONNECT BY LEVEL <= v_MAX
		ORDER BY CASE WHEN p_SORT_ASCENDING = 0 THEN LEVEL ELSE NULL END DESC,
 				CASE WHEN p_SORT_ASCENDING <> 0 THEN LEVEL ELSE NULL END ASC;

END GET_SEGMENT_RUN_OPTIONS;
------------------------------------------------------------------------------------------------
PROCEDURE GET_WRF_FCM_LIBRARIES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT DISTINCT L.PROFILE_LIBRARY_NAME, L.PROFILE_LIBRARY_ID
		FROM LOAD_PROFILE_LIBRARY L,
			LOAD_PROFILE P
		WHERE P.PROFILE_TYPE = 'WRF'
			AND L.PROFILE_LIBRARY_ID = P.PROFILE_LIBRARY_ID
		ORDER BY 1;

END GET_WRF_FCM_LIBRARIES;
------------------------------------------------------------------------------------------------
PROCEDURE GET_WRF_FCM_PROFILES
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT '<All>' as PROFILE_NAME, -1 as PROFILE_ID
		FROM DUAL
		UNION ALL
		SELECT PROFILE_NAME, PROFILE_ID
		FROM (SELECT DISTINCT P.PROFILE_NAME, P.PROFILE_ID
				FROM LOAD_PROFILE P
				WHERE P.PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
				ORDER BY 1);

END GET_WRF_FCM_PROFILES;
------------------------------------------------------------------------------------------------
PROCEDURE GET_WRF_FCM_HOURS
	(
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_NUM_HOURS BINARY_INTEGER;
BEGIN
	p_STATUS := GA.SUCCESS;

	IF GA.DEFAULT_MODEL = GA.GAS_MODEL THEN
		v_NUM_HOURS := 1;
	ELSE
		v_NUM_HOURS := 24;
	END IF;

	OPEN p_CURSOR FOR
		SELECT '<All>' as HOUR_NAME, -1 as HOUR_ID
		FROM DUAL
		UNION ALL
		SELECT TO_CHAR(LEVEL) as HOUR_NAME, LEVEL as HOUR_ID
		FROM DUAL
		CONNECT BY LEVEL <= v_NUM_HOURS;

END GET_WRF_FCM_HOURS;
------------------------------------------------------------------------------------------------
PROCEDURE GET_NUM_SEGMENTS
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT '<All>' as NUM_SEGMENTS_NAME, -1 as NUM_SEGMENTS_ID
		FROM DUAL
		UNION ALL
		SELECT '<Current>' as NUM_SEGMENTS_NAME, -2 as NUM_SEGMENTS_ID
		FROM DUAL
		UNION ALL
		SELECT TO_CHAR(NUM_SEGMENTS) as NUM_SEGMENTS_NAME, NUM_SEGMENTS as NUM_SEGMENTS_ID
		FROM (SELECT DISTINCT NUM_SEGMENTS
				FROM LOAD_PROFILE P,
					WRF_FCM W,
					WRF_FCM_CANDIDATE C
				WHERE P.PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
					AND p_PROFILE_ID IN (P.PROFILE_ID,-1)
					AND W.PROFILE_ID = P.PROFILE_ID
					AND C.FCM_ID = W.FCM_ID
				ORDER BY 1);

END GET_NUM_SEGMENTS;
------------------------------------------------------------------------------------------------
PROCEDURE GET_WRF_FCM_CANDIDATES
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_HOUR_ID IN NUMBER,
	p_NUM_SEGMENTS_ID IN NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN

	OPEN p_CURSOR FOR
		SELECT A.*,
			CASE WHEN A.NUM_SEGMENTS = A.CURRENT_NUM_SEGMENTS THEN '*  ' ELSE '' END || A.NUM_SEGMENTS as NUM_SEGMENTS_TEXT
		FROM (SELECT P.PROFILE_NAME,
					W.HOUR_NUM,
					-- the number of segments chosen for this profile
					(SELECT COUNT(1)
					 FROM LOAD_PROFILE_WRF WRF,
						LOAD_PROFILE_WRF_LINE WRFL
					 WHERE WRF.PROFILE_ID = P.PROFILE_ID
						AND WRFL.WRF_ID = WRF.WRF_ID
						AND WRFL.WRF_HOUR = W.HOUR_NUM) as CURRENT_NUM_SEGMENTS,
					-- and grab everything for this candidate
					C.*
				FROM LOAD_PROFILE P,
					WRF_FCM W,
					WRF_FCM_CANDIDATE C
				WHERE P.PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
					AND p_PROFILE_ID IN (P.PROFILE_ID,-1)
					AND W.PROFILE_ID IN P.PROFILE_ID
					AND p_HOUR_ID IN (W.HOUR_NUM,-1)
					AND C.FCM_ID = W.FCM_ID
					AND p_NUM_SEGMENTS_ID IN (C.NUM_SEGMENTS,-1,-2)) A
		WHERE p_NUM_SEGMENTS_ID <> -2 OR (p_NUM_SEGMENTS_ID = -2 AND A.CURRENT_NUM_SEGMENTS = A.NUM_SEGMENTS)
		ORDER BY A.PROFILE_NAME, A.HOUR_NUM, A.NUM_SEGMENTS;

END GET_WRF_FCM_CANDIDATES;
------------------------------------------------------------------------------------------------
PROCEDURE GET_WRF_FCM_CANDIDATES_W_COEFF
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_HOUR_ID IN NUMBER,
	p_NUM_SEGMENTS_ID IN NUMBER,
	p_CURSOR OUT SYS_REFCURSOR
	) AS
BEGIN
		
	OPEN p_CURSOR FOR
		-- Get info for FCM candidates
		SELECT A.PROFILE_NAME,
			A.PROFILE_ID,
			A.HOUR_NUM,
			TO_CHAR(A.HOUR_NUM,'0000') HOUR_NUM_TEXT,
			A.CURRENT_NUM_SEGMENTS,
			A.FCM_ID,
			A.NUM_SEGMENTS,
			A.NUM_ITERATIONS,
			A.MAPE,
			A.P_MAX,
			A.P_MIN,
			A.P_NZMIN,
			A.P_SUM,
			A.P_COUNT,
			A.P_ERR_SUM,
			A.R2MAX,
			A.R2MIN,
			A.R2TOTAL_COUNT,
			A.R2FAIL_COUNT,
			A.T_TEMP_COUNT,
			A.T_HUMID_COUNT,
			A.T_WIND_COUNT,
			CASE WHEN A.NUM_SEGMENTS = A.CURRENT_NUM_SEGMENTS THEN '*  ' ELSE '' END || A.NUM_SEGMENTS as NUM_SEGMENTS_TEXT,
			B.CLUSTER_NUM as SEGMENT_NBR,
			'Segment #'||B.CLUSTER_NUM as SEGMENT_LBL,
			B.SEGMENT_MIN,
			B.SEGMENT_MAX,
			B.COEFF_0,
			P1.PARAMETER_NAME as PARAMETER1_NAME,
			B.COEFF_1,
			P2.PARAMETER_NAME as PARAMETER2_NAME,
			B.COEFF_2,
			P3.PARAMETER_NAME as PARAMETER3_NAME,
			B.COEFF_3,
			P4.PARAMETER_NAME as PARAMETER4_NAME,
			B.COEFF_4,
			P5.PARAMETER_NAME as PARAMETER5_NAME,
			B.COEFF_5
		FROM (SELECT P.PROFILE_NAME,
					P.PROFILE_ID,
					W.HOUR_NUM,
					-- the number of segments chosen for this profile
					(SELECT COUNT(1)
					 FROM LOAD_PROFILE_WRF WRF,
						LOAD_PROFILE_WRF_LINE WRFL
					 WHERE WRF.PROFILE_ID = P.PROFILE_ID
						AND WRFL.WRF_ID = WRF.WRF_ID
						AND WRFL.WRF_HOUR = W.HOUR_NUM) as CURRENT_NUM_SEGMENTS,
					-- and grab everything for this candidate
					C.*
				FROM LOAD_PROFILE P,
					WRF_FCM W,
					WRF_FCM_CANDIDATE C
				WHERE P.PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
					AND p_PROFILE_ID IN (P.PROFILE_ID,-1)
					AND W.PROFILE_ID = P.PROFILE_ID
					AND p_HOUR_ID IN (W.HOUR_NUM,-1)
					AND C.FCM_ID = W.FCM_ID
					AND p_NUM_SEGMENTS_ID IN (C.NUM_SEGMENTS,-1,-2)) A,
			WRF_FCM_CLUSTER B,
			LOAD_PROFILE_WRF_WEATHER W1,
			WEATHER_PARAMETER P1,
			LOAD_PROFILE_WRF_WEATHER W2,
			WEATHER_PARAMETER P2,
			LOAD_PROFILE_WRF_WEATHER W3,
			WEATHER_PARAMETER P3,
			LOAD_PROFILE_WRF_WEATHER W4,
			WEATHER_PARAMETER P4,
			LOAD_PROFILE_WRF_WEATHER W5,
			WEATHER_PARAMETER P5
		WHERE (p_NUM_SEGMENTS_ID <> -2 OR (p_NUM_SEGMENTS_ID = -2 AND A.CURRENT_NUM_SEGMENTS = A.NUM_SEGMENTS))
			AND B.FCM_ID = A.FCM_ID
			AND B.NUM_SEGMENTS = A.NUM_SEGMENTS
			AND W1.PROFILE_ID(+) = A.PROFILE_ID
			AND W1.VARIABLE_NBR(+) = 0
			AND P1.PARAMETER_ID(+) = W1.PARAMETER_ID
			AND W2.PROFILE_ID(+) = A.PROFILE_ID
			AND W2.VARIABLE_NBR(+) = 1
			AND P2.PARAMETER_ID(+) = W2.PARAMETER_ID
			AND W3.PROFILE_ID(+) = A.PROFILE_ID
			AND W3.VARIABLE_NBR(+) = 2
			AND P3.PARAMETER_ID(+) = W3.PARAMETER_ID
			AND W4.PROFILE_ID(+) = A.PROFILE_ID
			AND W4.VARIABLE_NBR(+) = 3
			AND P4.PARAMETER_ID(+) = W4.PARAMETER_ID
			AND W5.PROFILE_ID(+) = A.PROFILE_ID
			AND W5.VARIABLE_NBR(+) = 4
			AND P5.PARAMETER_ID(+) = W5.PARAMETER_ID
		UNION ALL
		-- Get WRF profile data for profiles that do not have FCM candidates
		SELECT P.PROFILE_NAME,
			WRF.PROFILE_ID,
			WRFL.WRF_HOUR HOUR_NUM,
			TO_CHAR(WRFL.WRF_HOUR,'0000') HOUR_NUM_TEXT,
			A.NUM_SEGMENTS CURRENT_NUM_SEGMENTS,
			NULL FCM_ID,
			A.NUM_SEGMENTS,
			NULL NUM_ITERATIONS,
			LPS.PROFILE_MEAN_APE MAPE,
			LPS.PROFILE_MAX P_MAX,
			LPS.PROFILE_MIN P_MIN,
			LPS.PROFILE_NZ_MIN P_NZMIN,
			LPS.PROFILE_SUM P_SUM,
			LPS.PROFILE_COUNT P_COUNT,
			0 P_ERR_SUM,
			LPS.R_SQUARED_MAX R2MAX,
			LPS.R_SQUARED_MIN R2MIN,
			0 R2TOTAL_COUNT,
			LPS.R_SQUARED_FAIL_PCT R2FAIL_COUNT,
			LPS.T_STAT_TEMP_FAIL_PCT T_TEMP_COUNT,
			LPS.T_STAT_HUMID_FAIL_PCT T_HUMID_COUNT,
			LPS.T_STAT_WIND_FAIL_PCT T_WIND_COUNT,
			'*  ' || A.NUM_SEGMENTS as NUM_SEGMENTS_TEXT,
			WRF.WRF_LINE_NBR as SEGMENT_NBR,
			'Segment #'||WRF.WRF_LINE_NBR AS SEGMENT_LBL,
			WRFL.SEGMENT_MIN,
			WRFL.SEGMENT_MAX,
			WRFL.COEFF_0,
			P1.PARAMETER_NAME as PARAMETER1_NAME,
			WRFL.COEFF_1,
			P2.PARAMETER_NAME as PARAMETER2_NAME,
			WRFL.COEFF_2,
			P3.PARAMETER_NAME as PARAMETER3_NAME,
			WRFL.COEFF_3,
			P4.PARAMETER_NAME as PARAMETER4_NAME,
			WRFL.COEFF_4,
			P5.PARAMETER_NAME as PARAMETER5_NAME,
			WRFL.COEFF_5
		FROM LOAD_PROFILE P, 
			LOAD_PROFILE_WRF WRF,
			LOAD_PROFILE_WRF_LINE WRFL,
			LOAD_PROFILE_WRF_WEATHER W1,
			WEATHER_PARAMETER P1,
			LOAD_PROFILE_WRF_WEATHER W2,
			WEATHER_PARAMETER P2,
			LOAD_PROFILE_WRF_WEATHER W3,
			WEATHER_PARAMETER P3,
			LOAD_PROFILE_WRF_WEATHER W4,
			WEATHER_PARAMETER P4,
			LOAD_PROFILE_WRF_WEATHER W5,
			WEATHER_PARAMETER P5,
			(SELECT PROFILE_ID, MAX(WRF.WRF_LINE_NBR) NUM_SEGMENTS
				FROM LOAD_PROFILE_WRF WRF
			GROUP BY WRF.PROFILE_ID) A,
			LOAD_PROFILE_STATISTICS LPS
		WHERE p_PROFILE_ID IN (WRF.PROFILE_ID,-1)
			AND NOT EXISTS (SELECT 1 
						FROM WRF_FCM W
						WHERE W.PROFILE_ID = WRF.PROFILE_ID)
			AND P.PROFILE_ID = WRF.PROFILE_ID
			AND P.PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
			
			AND WRFL.WRF_ID = WRF.WRF_ID
			AND p_HOUR_ID IN (WRFL.WRF_HOUR,-1)
			AND A.PROFILE_ID = WRF.PROFILE_ID
			AND p_NUM_SEGMENTS_ID IN (A.NUM_SEGMENTS, -1, -2)
			
			AND LPS.PROFILE_ID = WRF.PROFILE_ID
			
			AND W1.PROFILE_ID(+) = WRF.PROFILE_ID
			AND W1.VARIABLE_NBR(+) = 0
			AND P1.PARAMETER_ID(+) = W1.PARAMETER_ID
			AND W2.PROFILE_ID(+) = WRF.PROFILE_ID
			AND W2.VARIABLE_NBR(+) = 1
			AND P2.PARAMETER_ID(+) = W2.PARAMETER_ID
			AND W3.PROFILE_ID(+) = WRF.PROFILE_ID
			AND W3.VARIABLE_NBR(+) = 2
			AND P3.PARAMETER_ID(+) = W3.PARAMETER_ID
			AND W4.PROFILE_ID(+) = WRF.PROFILE_ID
			AND W4.VARIABLE_NBR(+) = 3
			AND P4.PARAMETER_ID(+) = W4.PARAMETER_ID
			AND W5.PROFILE_ID(+) = WRF.PROFILE_ID
			AND W5.VARIABLE_NBR(+) = 4
			AND P5.PARAMETER_ID(+) = W5.PARAMETER_ID;

END GET_WRF_FCM_CANDIDATES_W_COEFF;
------------------------------------------------------------------------------------------------
PROCEDURE GET_PARAMETER_NAMES
	(
	p_PROFILE_ID IN NUMBER,
	p_PARAMETER_NAME1 OUT VARCHAR2,
	p_PARAMETER_NAME2 OUT VARCHAR2,
	p_PARAMETER_NAME3 OUT VARCHAR2,
	p_PARAMETER_NAME4 OUT VARCHAR2,
	p_PARAMETER_NAME5 OUT VARCHAR2
	) AS
v_NAMES GA.STRING_TABLE;
BEGIN
	SELECT P.PARAMETER_NAME
	BULK COLLECT INTO v_NAMES
	FROM LOAD_PROFILE_WRF_WEATHER LPW,
		WEATHER_PARAMETER P
	WHERE LPW.PROFILE_ID = p_PROFILE_ID
		AND LPW.PARAMETER_ID <> 0
		AND P.PARAMETER_ID = LPW.PARAMETER_ID
	ORDER BY VARIABLE_NBR ASC;

	IF v_NAMES.EXISTS(1) THEN
		p_PARAMETER_NAME1 := v_NAMES(1);
	END IF;
	IF v_NAMES.EXISTS(2) THEN
		p_PARAMETER_NAME2 := v_NAMES(2);
	END IF;
	IF v_NAMES.EXISTS(3) THEN
		p_PARAMETER_NAME3 := v_NAMES(3);
	END IF;
	IF v_NAMES.EXISTS(4) THEN
		p_PARAMETER_NAME4 := v_NAMES(4);
	END IF;
	IF v_NAMES.EXISTS(5) THEN
		p_PARAMETER_NAME5 := v_NAMES(5);
	END IF;
END GET_PARAMETER_NAMES;
------------------------------------------------------------------------------------------------
PROCEDURE GET_WRF_FCM_ACT_VS_FCAST
	(
	p_FCM_ID IN NUMBER,
	p_NUM_SEGMENTS IN NUMBER,
	p_HOUR_NUM IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_PARAMETER_NAME1 OUT VARCHAR2,
	p_PARAMETER_NAME2 OUT VARCHAR2,
	p_PARAMETER_NAME3 OUT VARCHAR2,
	p_PARAMETER_NAME4 OUT VARCHAR2,
	p_PARAMETER_NAME5 OUT VARCHAR2,
	p_NUM_OF_OBSERVATIONS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_MIN NUMBER(8,2);
v_MAX NUMBER(8,2);
v_NUM NUMBER(3,0);
v_FACTOR NUMBER(8,2);
v_START_POINT NUMBER(8,2);
v_WORK_ID NUMBER;
v_FORECAST_VAL NUMBER(24,8);

BEGIN
	-- get primary weather parameter
	GET_PARAMETER_NAMES(p_PROFILE_ID, p_PARAMETER_NAME1, p_PARAMETER_NAME2, p_PARAMETER_NAME3, p_PARAMETER_NAME4, p_PARAMETER_NAME5);
	
	-- If the profile is an imported WRF profile
	IF p_FCM_ID IS NULL THEN
		-- Get minimum and maximum values for wrf line
		SELECT MIN(SEGMENT_MIN), MAX(SEGMENT_MAX)
		INTO v_MIN, v_MAX
		FROM LOAD_PROFILE_WRF WRF
		WHERE WRF.PROFILE_ID = p_PROFILE_ID;
		
		-- Get n value from system dictionary
		SP.GET_SYSTEM_DICTIONARY_VALUE(0,
								'Profiling',
								'WRF',
								'?',
								'?',
								'Breakpoints for WRF Import',
								v_NUM);
								
		-- Break the data by v_NUM into v_NUM points
		v_FACTOR := (v_MAX - v_MIN)/v_NUM;
		v_START_POINT := v_MIN;
		UT.GET_RTO_WORK_ID(v_WORK_ID);
		
		-- Loop through the range of data and calculate forecast value by using
		-- the arbitrary number of breakpoints
		WHILE v_START_POINT < v_MAX LOOP			
			-- Find the segment corresponding to each breakpoint to calculate the forecast 
			-- value
			FOR v_REC IN (SELECT WRF_LINE.SEGMENT_MAX, WRF_LINE.COEFF_0, WRF_LINE.COEFF_1
					FROM LOAD_PROFILE_WRF WRF,
						LOAD_PROFILE_WRF_LINE WRF_LINE
					WHERE WRF.PROFILE_ID = p_PROFILE_ID
						AND WRF_LINE.WRF_ID = WRF.WRF_ID
						AND WRF_LINE.WRF_HOUR = p_HOUR_NUM 
					ORDER BY WRF_LINE.SEGMENT_MAX) LOOP
						
				IF v_START_POINT < v_REC.SEGMENT_MAX THEN
					v_FORECAST_VAL := v_REC.COEFF_0 + (v_REC.COEFF_1 * v_START_POINT);
						-- insert the breakpoint and corresponding forecast value into temporary table
					INSERT INTO RTO_WORK(WORK_ID,WORK_DATA, WORK_DATA2)
					VALUES (
					v_WORK_ID,
					TO_CHAR(v_START_POINT),
					TO_CHAR(v_FORECAST_VAL)
					);
					EXIT;
				END IF;
			END LOOP;
		
			
			v_START_POINT := v_START_POINT + v_FACTOR;
		END LOOP;	

		SELECT COUNT(*)
		INTO p_NUM_OF_OBSERVATIONS
		FROM RTO_WORK WRK
			WHERE WRK.WORK_ID = v_WORK_ID;
		
		OPEN p_CURSOR FOR
			SELECT CASE WHEN p_PARAMETER_NAME1 IS NULL THEN NULL ELSE WRK.WORK_DATA END P1,
				 CASE WHEN p_PARAMETER_NAME2 IS NULL THEN NULL ELSE 0 END P2,
				 CASE WHEN p_PARAMETER_NAME3 IS NULL THEN NULL ELSE 0 END P3,
				 CASE WHEN p_PARAMETER_NAME4 IS NULL THEN NULL ELSE 0 END P4,
				 CASE WHEN p_PARAMETER_NAME5 IS NULL THEN NULL ELSE  0 END P5,
				 NULL ACTUAL,
				 WRK.WORK_DATA2 FORECAST
			FROM RTO_WORK WRK
			WHERE WRK.WORK_ID = v_WORK_ID;
		
		UT.PURGE_RTO_WORK(v_WORK_ID);
	ELSE
		-- query actual and forecast values
		OPEN p_CURSOR FOR
			SELECT O.OBSERVATION_X as P1,
				O.OBSERVATION_P2 as P2,
				O.OBSERVATION_P3 as P3,
				O.OBSERVATION_P4 as P4,
				O.OBSERVATION_P5 as P5,
				O.OBSERVATION_Y as ACTUAL,
				-- use stored coefficients and observations to compute forecast
				NVL(C.COEFF_0,0) + NVL(C.COEFF_1,0)*NVL(O.OBSERVATION_X,0) + NVL(C.COEFF_2,0)*NVL(O.OBSERVATION_P2,0) +
					NVL(C.COEFF_3,0)*NVL(O.OBSERVATION_P3,0) + NVL(C.COEFF_4,0)*NVL(O.OBSERVATION_P4,0) + NVL(C.COEFF_5,0)*NVL(O.OBSERVATION_P5,0) as FORECAST
			FROM WRF_FCM_OBSERVATION O,
				WRF_FCM_CLUSTER C
			WHERE O.FCM_ID = p_FCM_ID
				AND C.FCM_ID = p_FCM_ID
				AND C.NUM_SEGMENTS = p_NUM_SEGMENTS
				AND ((C.CLUSTER_NUM = 1 AND C.SEGMENT_MIN <= O.OBSERVATION_X) OR (C.SEGMENT_MIN < O.OBSERVATION_X))
				AND C.SEGMENT_MAX >= O.OBSERVATION_X
			ORDER BY 1,2,3,4,5,6,7; 
	END IF;

END GET_WRF_FCM_ACT_VS_FCAST;
------------------------------------------------------------------------------------------------
PROCEDURE GET_WRF_FCM_OBSERVATIONS
	(
	p_FCM_ID IN NUMBER,
	p_NUM_SEGMENTS IN NUMBER,
	p_PARAMETER_NAME OUT VARCHAR2,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_DUMMY VARCHAR2(512);
BEGIN
	-- get primary weather parameter
	GET_PARAMETER_NAMES(p_FCM_ID, p_PARAMETER_NAME, v_DUMMY, v_DUMMY, v_DUMMY, v_DUMMY);

	OPEN p_CURSOR FOR
		SELECT O.OBSERVATION_X as X,
			O.OBSERVATION_Y as LOAD,
			M.CLUSTER_NUM,
			'Cluster '||M.CLUSTER_NUM as CLUSTER_LABEL,
			M.MEMBERSHIP,
			A.CLUSTER_NUM as ASSIGNED_CLUSTER,
			O.OBSERVATION_NUM
		FROM WRF_FCM_OBSERVATION O,
			WRF_FCM_CLUSTER_MEMBERSHIP M,
			WRF_FCM_CLUSTER_ASSIGNMENT A
		WHERE O.FCM_ID = p_FCM_ID
			AND A.FCM_ID = p_FCM_ID
			AND A.NUM_SEGMENTS = p_NUM_SEGMENTS
			AND A.OBSERVATION_NUM = O.OBSERVATION_NUM
			AND M.FCM_ID = p_FCM_ID
			AND M.NUM_SEGMENTS = p_NUM_SEGMENTS
			AND M.OBSERVATION_NUM = O.OBSERVATION_NUM;

END GET_WRF_FCM_OBSERVATIONS;
------------------------------------------------------------------------------------------------
END WRF_UI;
/
