CREATE OR REPLACE PACKAGE CSB AS
-- $Revision: 1.55 $
-- Author  : USJAHYM
-- Created : 2/21/2012 12:24:38 PM
-- Purpose : Bill Case related behavior

c_PRODUCT_CATEGORY_TUOS CONSTANT BILL_CASE.PRODUCT_CATEGORY%TYPE := 'TUOS';
c_PRODUCT_CATEGORY_DUOS CONSTANT BILL_CASE.PRODUCT_CATEGORY%TYPE := 'DUOS';
c_PRODUCT_CATEGORY_UOS 	CONSTANT BILL_CASE.PRODUCT_CATEGORY%TYPE := 'UOS';

c_GROUP_CATEGORY_TX_GRP		CONSTANT VARCHAR2(20) := 'Transmission Group';
c_GROUP_CATEGORY_DX_GRP		CONSTANT VARCHAR2(20) := 'Distribution Group';

c_RUN_TYPE_GLOBAL 			CONSTANT BILL_CASE.RUN_TYPE%TYPE := 'Global';
c_RUN_TYPE_PARTIAL_INCLUDE	CONSTANT BILL_CASE.RUN_TYPE%TYPE := 'Partial - Include';
c_RUN_TYPE_PARTIAL_EXCLUDE	CONSTANT BILL_CASE.RUN_TYPE%TYPE := 'Partial - Exclude';
c_NULL_SELECTION_ID			CONSTANT BILL_CASE.BILL_CASE_ID%TYPE	 := -9999;
c_NULL_ACCOUNT_IDENTIFIER 	CONSTANT VARCHAR2(1)					 := '-';

c_COMPONENT_CHARGE_TYPE_TAX			CONSTANT VARCHAR2(3) := 'Tax';
c_COMPONENT_CHARGE_TYPE_MANUAL 		CONSTANT VARCHAR2(20) := 'Manual Line Item';

c_STATUS_APPROVED			CONSTANT BILL_CASE.APPROVAL_STATE%TYPE := 'Approved';
c_STATUS_UNAPPROVED			CONSTANT BILL_CASE.APPROVAL_STATE%TYPE := 'Unapproved';
c_STATUS_RELEASED			CONSTANT BILL_CASE.RELEASE_STATE%TYPE  := 'Released';

c_BILL_CASE_STATUS_TEST		CONSTANT BILL_CASE.BILL_CASE_STATUS%TYPE  := 'Test';

FUNCTION WHAT_VERSION RETURN VARCHAR2;

	-- Return a cursor to fill the Bill Cases grid based on specified time range,
	-- product category (scheme), statement type, and case name search pattern.
PROCEDURE GET_BILL_CASES
(
	p_BEGIN_DATE 			IN DATE,
	p_END_DATE 				IN DATE,
	p_PRODUCT_CATEGORY 		IN VARCHAR2,
	p_STATEMENT_TYPE_ID 	IN NUMBER,
	p_BILL_CASE_NAME 		IN VARCHAR2,
	p_CURSOR 			   OUT GA.REFCURSOR
);

  -- Insert/update a Bill Case
PROCEDURE PUT_BILL_CASE
(
	o_OID 					   OUT NUMBER,
	p_BILL_CASE_ID 				IN NUMBER,
	p_BILL_CASE_NAME 			IN VARCHAR2,
	p_BILL_CASE_ALIAS 			IN VARCHAR2,
	p_BILL_CASE_DESC 			IN VARCHAR2,
	p_BILL_CASE_EXT_IDENTIFIER 	IN VARCHAR2,
	p_SENDER_PSE_ID 			IN NUMBER,
	p_PRODUCT_CATEGORY 			IN VARCHAR2,
	p_STATEMENT_TYPE_ID 		IN NUMBER,
	p_PERIOD_BEGIN_DATE 		IN DATE,
	p_PERIOD_END_DATE 			IN DATE,
	p_BILL_CASE_STATUS 			IN VARCHAR2,
	p_RUN_TYPE 					IN VARCHAR2,
	p_RUN_STATUS 				IN VARCHAR2,
	p_RUN_BY 					IN VARCHAR2,
	p_RUN_DATE 					IN DATE,
	p_APPROVAL_STATE 			IN VARCHAR2,
	p_APPROVAL_BY 				IN VARCHAR2,
	p_APPROVAL_DATE 			IN DATE,
	p_RELEASE_STATE 			IN VARCHAR2,
	p_RELEASE_BY 				IN VARCHAR2,
	p_RELEASE_DATE 				IN DATE
);

  -- Delete a Bill Case
PROCEDURE DELETE_BILL_CASE(p_BILL_CASE_ID IN NUMBER);

  -- Return a cursor to fill the Sender list:  PSE's whose type=Billing Agent
PROCEDURE GET_SENDER_LIST(p_CURSOR OUT GA.REFCURSOR);

  -- Return a cursor to fill the Schemes list in the grid:  distinct product categories
PROCEDURE GET_SCHEMES(p_CURSOR OUT GA.REFCURSOR);

  -- Return a cursor to fill the Statement Types list in the grid and report filter:
  -- Statement Types ordered by Statement Type Order
PROCEDURE GET_STATEMENT_TYPES(p_CURSOR OUT GA.REFCURSOR);

  -- Return a cursor to fill the Schemes list for the report filter:
  -- distinct Bill Case schemes (product categories) union distinct product categories
PROCEDURE GET_SCHEMES_FOR_FILTER
(
  p_INCLUDE_ALL IN NUMBER,
  p_CURSOR OUT GA.REFCURSOR
);

  -- Return a cursor to fill the Bill Case list for the
  -- manual line item report filter
PROCEDURE GET_BILL_CASE_FOR_SCHEME_STATE
(
  p_PRODUCT_CATEGORY IN VARCHAR2,
  p_STATEMENT_TYPE_ID IN NUMBER,
  p_CURSOR OUT GA.REFCURSOR
);

PROCEDURE GET_PRODUCTS
(
  p_BILL_CASE_ID IN BILL_CASE.BILL_CASE_ID%TYPE,
  p_CURSOR OUT GA.REFCURSOR
);

PROCEDURE GET_COMPONENTS
(
  p_PRODUCT_ID IN PRODUCT.PRODUCT_ID%TYPE,
  p_BILL_CASE_ID IN BILL_CASE.BILL_CASE_ID%TYPE,
  p_IS_MANUAL IN NUMBER,
  p_CURSOR OUT GA.REFCURSOR
);

PROCEDURE GET_PSE_FILTER
(
  p_BILL_CASE_ID IN NUMBER, 
  p_CURSOR OUT GA.REFCURSOR
);

PROCEDURE GET_RETAIL_INVOICE_LINES
(
	p_BILL_CASE_ID             IN BILL_CASE.BILL_CASE_ID%TYPE,
	p_RECIPIENT_PSE_ID         IN PSE.PSE_ID%TYPE,
	p_SEARCH_OPTION            IN VARCHAR2, -- 'By Name' or 'By External Identifier'
	p_SEARCH_STRING            IN VARCHAR2,
	p_CURSOR                  OUT GA.REFCURSOR
);

PROCEDURE PUT_MANUAL_RET_INV_LINE_COMP
(
	p_RETAIL_INVOICE_ID				IN RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE,
	p_RETAIL_INVOICE_LINE_ID       	IN RETAIL_INVOICE_LINE.RETAIL_INVOICE_LINE_ID%TYPE,
	p_RETAIL_INVOICE_LINE_COMP_ID  	IN RETAIL_INVOICE_LINE_COMPONENT.RETAIL_INVOICE_LINE_COMP_ID%TYPE,
	p_PRODUCT_ID                   	IN PRODUCT.PRODUCT_ID%TYPE,
	p_COMPONENT_ID                 	IN COMPONENT.COMPONENT_ID%TYPE,
	p_RILC_BEGIN_DATE              	IN DATE,
	p_RILC_END_DATE                	IN DATE,
	p_QUANTITY                     	IN RETAIL_INVOICE_LINE_COMPONENT.INTERNAL_QUANTITY%TYPE,
	p_RATE                         	IN RETAIL_INVOICE_LINE_COMPONENT.INTERNAL_RATE%TYPE,
	p_AMOUNT                       	IN RETAIL_INVOICE_LINE_COMPONENT.INTERNAL_AMOUNT%TYPE
);

PROCEDURE GET_MANUAL_RET_INV_LINE_COMPS
(
	p_RETAIL_INVOICE_LINE_ID   IN RETAIL_INVOICE_LINE.RETAIL_INVOICE_LINE_ID%TYPE,
	p_CURSOR                  OUT GA.REFCURSOR
);

PROCEDURE DEL_MANUAL_RET_INV_LINE_COMP
(
	p_RETAIL_INVOICE_ID				IN RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE,
	p_RETAIL_INVOICE_LINE_COMP_ID   IN RETAIL_INVOICE_LINE_COMPONENT.RETAIL_INVOICE_LINE_COMP_ID%TYPE
);

PROCEDURE RUN_BILL_CASE_SELECTIONS
(
	p_BILL_CASE_IDS		IN NUMBER_COLLECTION,
	p_TIME_ZONE			IN VARCHAR2,
	p_PROCESS_ID       OUT VARCHAR2,
	p_PROCESS_STATUS   OUT NUMBER,
	p_MESSAGE          OUT VARCHAR2,
	p_TRACE_ON			IN NUMBER := 0
);

PROCEDURE GET_BILL_CASE_SELECTIONS
(
	p_BILL_CASE_ID 	IN NUMBER,
	p_CURSOR       OUT GA.REFCURSOR
);

PROCEDURE PUT_BILL_CASE_SELECTION
(
	o_OID             		   OUT NUMBER,
	p_BILL_CASE_SELECTIONS_ID 	IN NUMBER,
	p_BILL_CASE_ID    			IN NUMBER,
	p_PSE_ID          			IN NUMBER,
	p_ACCOUNT_NAME  			IN VARCHAR,
	p_PRODUCT_ID      			IN NUMBER,
	p_COMPONENT_ID    			IN NUMBER
);

PROCEDURE DELETE_BILL_CASE_SELECTION
(
	p_BILL_CASE_SELECTIONS_ID 	IN NUMBER
);

FUNCTION IS_BILL_CASE_LOCKED
(
	p_BILL_CASE_ID BILL_CASE.BILL_CASE_ID%TYPE
) RETURN BOOLEAN;

PROCEDURE PUT_BILL_CASE_APPROVAL_STATUS
(
	p_BILL_CASE_ID 	IN BILL_CASE.BILL_CASE_ID%TYPE,
	p_APPROVAL_TYPE IN VARCHAR2 DEFAULT c_STATUS_APPROVED -- c_STATUS_APPROVED, c_STATUS_UNAPPROVED, c_STATUS_RELEASED
);

PROCEDURE RERUN_PSE
(
    p_BILL_CASE_ID IN NUMBER,
    p_TIME_ZONE IN VARCHAR2,
    p_TRACE_ON IN NUMBER,
    p_RECIPIENT_PSE_ID IN NUMBER,
    p_PROCESS_ID OUT NUMBER,
    p_PROCESS_STATUS OUT NUMBER,
    p_MESSAGE OUT VARCHAR2
);

PROCEDURE RERUN_ACCOUNT
(
    p_BILL_CASE_ID IN NUMBER,
    p_TIME_ZONE IN VARCHAR2,
    p_TRACE_ON IN NUMBER,
    p_RECIPIENT_PSE_ID IN NUMBER,
    p_ACCOUNT_ID IN NUMBER,
    p_PROCESS_ID OUT NUMBER,
    p_PROCESS_STATUS OUT NUMBER,
    p_MESSAGE OUT VARCHAR2
);

PROCEDURE SET_SUBDAILY_ENT_RELATIONSHIPS
(
	p_ENABLE_SUBDAILY	IN NUMBER DEFAULT 1
);

$if $$UNIT_TEST_MODE = 1 $then
PROCEDURE INS_BILL_CASE_TEMP_DEFAULT
(
	p_BILL_CASE_REC	IN BILL_CASE%ROWTYPE,
	p_RECIPIENT_PSE_ID IN NUMBER DEFAULT NULL,
	p_ACCOUNT_ID IN NUMBER DEFAULT NULL,
	p_CHARGE_STATE		IN NUMBER DEFAULT RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL
);

PROCEDURE INS_BILL_CASE_TEMP_TUOS
(
	p_BILL_CASE_REC		IN BILL_CASE%ROWTYPE,
	p_RECIPIENT_PSE_ID IN NUMBER DEFAULT NULL,
	p_ACCOUNT_ID IN NUMBER DEFAULT NULL,
	p_CHARGE_STATE		IN NUMBER DEFAULT RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL
);

PROCEDURE INS_BILL_CASE_TEMP_RESETTLE
(
	p_BILL_CASE_REC		IN BILL_CASE%ROWTYPE,
	p_CHARGE_STATE		IN NUMBER DEFAULT RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLATION
);

FUNCTION IS_BILL_CASE_MODIFIED
(
	p_BILL_CASE_REC IN OUT NOCOPY BILL_CASE%ROWTYPE,
	p_APPROVAL_TYPE IN VARCHAR2
) RETURN BOOLEAN;

FUNCTION VALIDATE_FOR_RERUN
(
    p_BILL_CASE_ID IN NUMBER,
    p_RECIPIENT_PSE_ID IN NUMBER,
    p_ACCOUNT_ID IN NUMBER
) RETURN BOOLEAN;

PROCEDURE DEL_EXISTING_RI_FOR_RERUN
(
    p_BILL_CASE_ID IN NUMBER,
    p_RECIPIENT_PSE_ID IN NUMBER,
    p_ACCOUNT_ID IN NUMBER
);
$end

END CSB;
/
CREATE OR REPLACE PACKAGE BODY CSB AS
--------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.55 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
FUNCTION GET_CURRENT_USER_NAME
RETURN VARCHAR2
IS
	v_USER_ID NUMBER(9);
	v_USER_NAME APPLICATION_USER.USER_DISPLAY_NAME%TYPE;
BEGIN
	-- Get the current User Id
	v_USER_ID := SECURITY_CONTROLS.CURRENT_USER_ID;

	-- Use User's Display Name OR else use the username
	SELECT NVL(AU.USER_DISPLAY_NAME, AU.USER_NAME)
	INTO v_USER_NAME
	FROM APPLICATION_USER AU
	WHERE AU.USER_ID = v_USER_ID;

	RETURN v_USER_NAME;
END GET_CURRENT_USER_NAME;
---------------------------------------------------------------------------------------------------
-- Return a cursor to fill the Bill Cases grid based on specified time range,
-- product category (scheme), statement type, and case name search pattern.
PROCEDURE GET_BILL_CASES
(
	p_BEGIN_DATE 			IN DATE,
	p_END_DATE 				IN DATE,
	p_PRODUCT_CATEGORY 		IN VARCHAR2,
	p_STATEMENT_TYPE_ID 	IN NUMBER,
	p_BILL_CASE_NAME 		IN VARCHAR2,
	p_CURSOR 			   OUT GA.REFCURSOR
) AS
BEGIN
  -- verify read access
  SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_BILL_CASE_VIEW);

  -- open cursor
  OPEN p_CURSOR FOR
  SELECT BC.BILL_CASE_ID,
         BC.BILL_CASE_NAME,
         BC.BILL_CASE_ALIAS,
         BC.BILL_CASE_DESC,
         BC.BILL_CASE_EXT_IDENTIFIER,
         BC.SENDER_PSE_ID,
         PSE.PSE_NAME,
         BC.PRODUCT_CATEGORY,
         BC.PERIOD_BEGIN_DATE,
         BC.PERIOD_END_DATE,
         BC.STATEMENT_TYPE_ID,
         ST.STATEMENT_TYPE_NAME,
         BC.RUN_TYPE,
         BC.BILL_CASE_STATUS,
         BC.RUN_STATUS,
         BC.RUN_BY,
         BC.RUN_DATE,
         BC.APPROVAL_STATE,
         BC.APPROVAL_BY,
         BC.APPROVAL_DATE,
         BC.RELEASE_STATE,
         BC.RELEASE_BY,
         BC.RELEASE_DATE
  FROM BILL_CASE BC,
       PURCHASING_SELLING_ENTITY PSE,
       STATEMENT_TYPE ST
  WHERE BC.SENDER_PSE_ID = PSE.PSE_ID
        AND BC.STATEMENT_TYPE_ID = ST.STATEMENT_TYPE_ID
        AND BC.PERIOD_END_DATE >= p_BEGIN_DATE
        AND BC.PERIOD_BEGIN_DATE <= p_END_DATE
        AND BC.PRODUCT_CATEGORY = p_PRODUCT_CATEGORY
        AND BC.STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID
        AND BC.BILL_CASE_NAME LIKE NVL(TRIM(p_BILL_CASE_NAME), '%');
END GET_BILL_CASES;
--------------------------------------------------------------------------------
-- Insert/update a Bill Case
PROCEDURE PUT_BILL_CASE
(
	o_OID 					   OUT NUMBER,
	p_BILL_CASE_ID 				IN NUMBER,
	p_BILL_CASE_NAME 			IN VARCHAR2,
	p_BILL_CASE_ALIAS 			IN VARCHAR2,
	p_BILL_CASE_DESC 			IN VARCHAR2,
	p_BILL_CASE_EXT_IDENTIFIER 	IN VARCHAR2,
	p_SENDER_PSE_ID 			IN NUMBER,
	p_PRODUCT_CATEGORY 			IN VARCHAR2,
	p_STATEMENT_TYPE_ID 		IN NUMBER,
	p_PERIOD_BEGIN_DATE 		IN DATE,
	p_PERIOD_END_DATE 			IN DATE,
	p_BILL_CASE_STATUS 			IN VARCHAR2,
	p_RUN_TYPE 					IN VARCHAR2,
	p_RUN_STATUS 				IN VARCHAR2,
	p_RUN_BY 					IN VARCHAR2,
	p_RUN_DATE 					IN DATE,
	p_APPROVAL_STATE 			IN VARCHAR2,
	p_APPROVAL_BY 				IN VARCHAR2,
	p_APPROVAL_DATE 			IN DATE,
	p_RELEASE_STATE 			IN VARCHAR2,
	p_RELEASE_BY 				IN VARCHAR2,
	p_RELEASE_DATE 				IN DATE
) AS
v_REC BILL_CASE%ROWTYPE;
BEGIN
  -- verify edit access
  SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_BILL_CASE_EDIT);

  IF TRIM(p_BILL_CASE_NAME) IS NULL THEN
    ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Bill Case Name is required.');
  END IF;
  IF p_SENDER_PSE_ID IS NULL THEN
    ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Sender is required.');
  END IF;
  IF TRIM(p_PRODUCT_CATEGORY) IS NULL THEN
    ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Scheme is required.');
  END IF;
  IF p_STATEMENT_TYPE_ID IS NULL THEN
    ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Statement Type is required.');
  END IF;
  IF p_PERIOD_BEGIN_DATE IS NULL THEN
    ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Begin Date is required.');
  END IF;
  IF p_PERIOD_END_DATE IS NULL THEN
    ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'End Date is required.');
  END IF;
  IF TRIM(p_BILL_CASE_STATUS) IS NULL THEN
    ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Bill Case Status is required.');
  END IF;
  IF TRIM(p_RUN_TYPE) IS NULL THEN
    ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Run Type is required.');
  END IF;

  -- build row, trimming and providing nvl's where necessary
  v_REC.BILL_CASE_ID := p_BILL_CASE_ID;
  v_REC.BILL_CASE_NAME := TRIM(p_BILL_CASE_NAME);
  v_REC.BILL_CASE_ALIAS := TRIM(NVL(p_BILL_CASE_ALIAS,CONSTANTS.UNDEFINED_ATTRIBUTE));
  v_REC.BILL_CASE_DESC := TRIM(NVL(p_BILL_CASE_DESC,CONSTANTS.UNDEFINED_ATTRIBUTE));
  v_REC.BILL_CASE_EXT_IDENTIFIER := TRIM(NVL(p_BILL_CASE_EXT_IDENTIFIER,CONSTANTS.UNDEFINED_ATTRIBUTE));
  v_REC.SENDER_PSE_ID := p_SENDER_PSE_ID;
  v_REC.PRODUCT_CATEGORY := p_PRODUCT_CATEGORY;
  v_REC.STATEMENT_TYPE_ID := p_STATEMENT_TYPE_ID;
  v_REC.PERIOD_BEGIN_DATE := p_PERIOD_BEGIN_DATE;
  v_REC.PERIOD_END_DATE := p_PERIOD_END_DATE;
  v_REC.BILL_CASE_STATUS := p_BILL_CASE_STATUS;
  v_REC.RUN_TYPE := p_RUN_TYPE;
  v_REC.RUN_STATUS := p_RUN_STATUS;
  v_REC.RUN_BY := p_RUN_BY;
  v_REC.RUN_DATE := p_RUN_DATE;
  v_REC.APPROVAL_STATE := p_APPROVAL_STATE;
  v_REC.APPROVAL_BY := p_APPROVAL_BY;
  v_REC.APPROVAL_DATE := p_APPROVAL_DATE;
  v_REC.RELEASE_STATE := p_RELEASE_STATE;
  v_REC.RELEASE_BY := p_RELEASE_BY;
  v_REC.RELEASE_DATE := p_RELEASE_DATE;

  IF p_BILL_CASE_ID IS NULL THEN
    -- inserting
    SELECT OID.NEXTVAL INTO o_OID FROM DUAL;
		v_REC.BILL_CASE_ID := o_OID;
		INSERT INTO BILL_CASE VALUES v_REC;
  ELSE
	-- If it is locked, log a warning and exit
	IF IS_BILL_CASE_LOCKED(p_BILL_CASE_ID) THEN
		LOGS.LOG_WARN('Bill Case ' || p_BILL_CASE_NAME || ' is locked (Approved/Released). Editing the Bill Case is prohibited.');

		ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Bill Case ' || p_BILL_CASE_NAME || ' is locked (Approved/Released). Editing the Bill Case is prohibited.');
		RETURN;
	END IF;

    -- updating
    UPDATE BILL_CASE
		SET ROW = v_REC
		WHERE BILL_CASE_ID = p_BILL_CASE_ID;
		o_OID := p_BILL_CASE_ID;
  END IF;
END PUT_BILL_CASE;
--------------------------------------------------------------------------------
PROCEDURE DEL_EXISTING_FCV
(
    p_BILL_CASE_ID IN NUMBER
) AS
  BEGIN
     DELETE FROM FORMULA_CHARGE_VARIABLE FCV
     WHERE FCV.CHARGE_ID IN (SELECT RIPR.FML_CHARGE_ID 
     FROM RETAIL_INVOICE_PRICING_RESULT RIPR, RETAIL_INVOICE_LINE_COMPONENT RILC,
     RETAIL_INVOICE_LINE RIL, RETAIL_INVOICE RI, BILL_CASE_INVOICE BCI
     WHERE BCI.BILL_CASE_ID = p_BILL_CASE_ID
          AND BCI.RETAIL_INVOICE_ID = RI.RETAIL_INVOICE_ID
          AND RI.RETAIL_INVOICE_ID = RIL.RETAIL_INVOICE_ID
          AND RIL.RETAIL_INVOICE_LINE_ID = RILC.RETAIL_INVOICE_LINE_ID
          AND RILC.RETAIL_INVOICE_LINE_COMP_ID = RIPR.RETAIL_INVOICE_LINE_COMP_ID);
     COMMIT;
	 
END DEL_EXISTING_FCV;
--------------------------------------------------------------------------------
-- Delete a Bill Case
PROCEDURE DELETE_BILL_CASE(p_BILL_CASE_ID IN NUMBER) AS
	v_BILL_CASE_NAME BILL_CASE.BILL_CASE_NAME%TYPE;
BEGIN
	-- verify edit access
	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_BILL_CASE_EDIT);

	-- Check if this is locked before running
	SELECT A.BILL_CASE_NAME
	  INTO v_BILL_CASE_NAME
	  FROM BILL_CASE A
	 WHERE A.BILL_CASE_ID = p_BILL_CASE_ID;

	-- If it is locked, log a warning and exit
	IF IS_BILL_CASE_LOCKED(p_BILL_CASE_ID) THEN
		LOGS.LOG_WARN('Bill Case ' || v_BILL_CASE_NAME || ' is locked (Approved/Released). Editing the Bill Case is prohibited.');

		ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Bill Case ' || v_BILL_CASE_NAME || ' is locked (Approved/Released). Editing the Bill Case is prohibited.');
		RETURN;
	END IF;
	
	-- delete results from the Formula_Charge_Variable table
	DEL_EXISTING_FCV(p_BILL_CASE_ID);

	-- delete all the RETAIL_INVOICE entries
	DELETE
	FROM RETAIL_INVOICE RI
	WHERE EXISTS (SELECT NULL
				FROM BILL_CASE_INVOICE BCI
				WHERE BCI.BILL_CASE_ID = p_BILL_CASE_ID
				AND   BCI.RETAIL_INVOICE_ID = RI.RETAIL_INVOICE_ID);

	-- delete the bill case (this also deletes the BILL_CASE_INVOICE entries
	DELETE FROM BILL_CASE WHERE BILL_CASE_ID = p_BILL_CASE_ID;
END DELETE_BILL_CASE;
--------------------------------------------------------------------------------
-- Return a cursor to fill the Sender list:  PSE's whose type=Billing Agent
PROCEDURE GET_SENDER_LIST(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
  OPEN p_CURSOR FOR
  SELECT PSE.PSE_ID,
         PSE.PSE_NAME
    FROM PURCHASING_SELLING_ENTITY PSE
    WHERE PSE.PSE_TYPE = 'Billing Agent'
  ORDER BY UPPER(PSE.PSE_NAME);
END GET_SENDER_LIST;
--------------------------------------------------------------------------------
-- Return a cursor to fill the Schemes list in the grid:  distinct product categories
PROCEDURE GET_SCHEMES(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
  OPEN p_CURSOR FOR
    SELECT DISTINCT PRODUCT_CATEGORY
    FROM PRODUCT
  WHERE PRODUCT_CATEGORY IS NOT NULL
        AND PRODUCT_CATEGORY<>CONSTANTS.UNDEFINED_ATTRIBUTE
  ORDER BY UPPER(PRODUCT_CATEGORY);
END GET_SCHEMES;
--------------------------------------------------------------------------------
-- Return a cursor to fill the Statement Types list in the grid and report filter:
-- Statement Types ordered by Statement Type Order
PROCEDURE GET_STATEMENT_TYPES(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
  OPEN p_CURSOR FOR
  SELECT STATEMENT_TYPE_ID,
         STATEMENT_TYPE_NAME
    FROM STATEMENT_TYPE
    WHERE STATEMENT_TYPE_ID <> CONSTANTS.NOT_ASSIGNED
  ORDER BY STATEMENT_TYPE_ORDER;
END GET_STATEMENT_TYPES;
--------------------------------------------------------------------------------
-- Return a cursor to fill the Schemes list for the report filter:
-- distinct Bill Case schemes (product categories) union distinct product categories
PROCEDURE GET_SCHEMES_FOR_FILTER
(
  p_INCLUDE_ALL IN NUMBER,
  p_CURSOR OUT GA.REFCURSOR
) AS
BEGIN
  OPEN p_CURSOR FOR
  -- conditional <all>
  SELECT CONSTANTS.ALL_STRING AS PRODUCT_CATEGORY
  FROM DUAL
  WHERE NVL(p_INCLUDE_ALL, 0) = 1
  UNION
  -- categories from existing bill cases
  SELECT DISTINCT PRODUCT_CATEGORY
  FROM BILL_CASE
  UNION
  -- other categories
  SELECT DISTINCT PRODUCT_CATEGORY
  FROM PRODUCT
  WHERE PRODUCT_CATEGORY IS NOT NULL
    AND PRODUCT_CATEGORY<>CONSTANTS.UNDEFINED_ATTRIBUTE
  ORDER BY PRODUCT_CATEGORY;
END GET_SCHEMES_FOR_FILTER;
--------------------------------------------------------------------------------
-- Return a cursor to fill the Bill Case list for the
-- manual line item report filter
PROCEDURE GET_BILL_CASE_FOR_SCHEME_STATE
(
  p_PRODUCT_CATEGORY IN VARCHAR2,
  p_STATEMENT_TYPE_ID IN NUMBER,
  p_CURSOR OUT GA.REFCURSOR
) AS
BEGIN
  -- verify read access
  SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_BILL_CASE_VIEW);

  OPEN p_CURSOR FOR
    SELECT BC.BILL_CASE_ID,
           BC.BILL_CASE_NAME
    FROM BILL_CASE BC
    WHERE BC.STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID
      AND (   (BC.PRODUCT_CATEGORY = p_PRODUCT_CATEGORY)
	       OR (p_PRODUCT_CATEGORY = CONSTANTS.ALL_STRING))
    ORDER BY BC.BILL_CASE_NAME;
END GET_BILL_CASE_FOR_SCHEME_STATE;
--------------------------------------------------------------------------------
PROCEDURE GET_PRODUCTS
(
  p_BILL_CASE_ID IN BILL_CASE.BILL_CASE_ID%TYPE,
  p_CURSOR OUT GA.REFCURSOR
) AS
BEGIN
  OPEN p_CURSOR FOR
  SELECT P.PRODUCT_ID,
         P.PRODUCT_NAME
  FROM BILL_CASE BC,
       PRODUCT P
  WHERE BC.BILL_CASE_ID = p_BILL_CASE_ID
    AND BC.PRODUCT_CATEGORY = P.PRODUCT_CATEGORY
  ORDER BY P.PRODUCT_NAME;
END GET_PRODUCTS;
--------------------------------------------------------------------------------
PROCEDURE GET_COMPONENTS
(
  p_PRODUCT_ID IN PRODUCT.PRODUCT_ID%TYPE,
  p_BILL_CASE_ID IN BILL_CASE.BILL_CASE_ID%TYPE,
  p_IS_MANUAL IN NUMBER,
  p_CURSOR OUT GA.REFCURSOR
) AS
BEGIN
  IF (p_PRODUCT_ID = c_NULL_SELECTION_ID OR p_PRODUCT_ID IS NULL) AND p_BILL_CASE_ID IS NULL THEN
    OPEN p_CURSOR FOR
    SELECT NULL,
           NULL
    FROM DUAL;
  END IF;

  IF p_PRODUCT_ID = c_NULL_SELECTION_ID OR p_PRODUCT_ID IS NULL THEN
    OPEN p_CURSOR FOR
    SELECT DISTINCT C.COMPONENT_ID,
           C.COMPONENT_NAME
    FROM BILL_CASE BC,
         PRODUCT P,
         PRODUCT_COMPONENT PC,
         COMPONENT C
    WHERE BC.BILL_CASE_ID = p_BILL_CASE_ID
      AND BC.PRODUCT_CATEGORY = P.PRODUCT_CATEGORY
      AND P.PRODUCT_ID = PC.PRODUCT_ID
      AND PC.COMPONENT_ID = C.COMPONENT_ID
      AND ((NVL(p_IS_MANUAL,0) = 0 AND C.CHARGE_TYPE <> c_COMPONENT_CHARGE_TYPE_MANUAL)
            OR
           (NVL(p_IS_MANUAL,0) = 1 AND C.CHARGE_TYPE = c_COMPONENT_CHARGE_TYPE_MANUAL))
    ORDER BY C.COMPONENT_NAME;
  ELSE
    OPEN p_CURSOR FOR
    SELECT DISTINCT C.COMPONENT_ID,
           C.COMPONENT_NAME
    FROM PRODUCT P,
         PRODUCT_COMPONENT PC,
         COMPONENT C
    WHERE P.PRODUCT_ID = p_PRODUCT_ID
      AND P.PRODUCT_ID = PC.PRODUCT_ID
      AND PC.COMPONENT_ID = C.COMPONENT_ID
      AND ((NVL(p_IS_MANUAL,0) = 0 AND C.CHARGE_TYPE <> c_COMPONENT_CHARGE_TYPE_MANUAL)
            OR
           (NVL(p_IS_MANUAL,0) = 1 AND C.CHARGE_TYPE = c_COMPONENT_CHARGE_TYPE_MANUAL))
    ORDER BY C.COMPONENT_NAME;
  END IF;
END GET_COMPONENTS;
-------------------------
-- Return a cursor to fill the Bill Case list for the report filter:
PROCEDURE GET_PSE_FILTER(p_BILL_CASE_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
  OPEN p_CURSOR FOR
      SELECT DISTINCT  PSE.PSE_NAME "RECIPIENT_PSE_NAME", RI.RECIPIENT_PSE_ID
      FROM BILL_CASE_INVOICE BCI, RETAIL_INVOICE RI, PSE
      WHERE BCI.BILL_CASE_ID = p_BILL_CASE_ID
            AND RI.RETAIL_INVOICE_ID = BCI.RETAIL_INVOICE_ID
            AND RI.RECIPIENT_PSE_ID = PSE.PSE_ID
      ORDER BY PSE_NAME;
END GET_PSE_FILTER;
--------------------------------------------------------------------------------
PROCEDURE GET_RETAIL_INVOICE_LINES
(
	p_BILL_CASE_ID             IN BILL_CASE.BILL_CASE_ID%TYPE,
	p_RECIPIENT_PSE_ID         IN PSE.PSE_ID%TYPE,
	p_SEARCH_OPTION            IN VARCHAR2, -- 'By Name' or 'By External Identifier'
	p_SEARCH_STRING            IN VARCHAR2,
	p_CURSOR                  OUT GA.REFCURSOR
) AS
	c_SEARCH_BY_NAME		CONSTANT VARCHAR2(32) := 'By Name';
	c_SEARCH_BY_EXT_IDENT	CONSTANT VARCHAR2(32) := 'By External Identifier';
BEGIN

	IF p_BILL_CASE_ID IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT NULL FROM DUAL;
		RETURN;
	END IF;

	OPEN p_CURSOR FOR
		SELECT RI.RETAIL_INVOICE_ID,
			   RIL.RETAIL_INVOICE_LINE_ID,
			   BC.BILL_CASE_NAME,
			   BC.PERIOD_BEGIN_DATE,
			   BC.PERIOD_END_DATE,
			   PSE.PSE_NAME						AS CUSTOMER,
			   A.ACCOUNT_ID,
			   A.ACCOUNT_NAME					AS ACCOUNT_NAME,
			   A.ACCOUNT_EXTERNAL_IDENTIFIER	AS ACCOUNT_EXT_IDENT,
			   M.METER_ID,
			   CASE M.METER_NAME
			   	   WHEN CONSTANTS.NOT_ASSIGNED_STRING THEN
				   	   NULL
				   ELSE
				   	   M.METER_NAME
			   END AS METER_NAME,
			   BC.APPROVAL_STATE				AS APPROVAL_STATUS,
			   SUM(NVL(RILC.INTERNAL_AMOUNT, 0)) AS TOTAL_MANUAL_CHARGES,
			   COUNT(RILC.RETAIL_INVOICE_LINE_COMP_ID) AS MANUAL_CHARGE_COUNT
		  FROM BILL_CASE 					BC,
		  	   BILL_CASE_INVOICE			BCI,
		  	   RETAIL_INVOICE				RI,
			   RETAIL_INVOICE_LINE 			RIL,
			   RETAIL_INVOICE_LINE_COMPONENT RILC,
			   ACCOUNT						A,
			   METER						M,
			   PURCHASING_SELLING_ENTITY	PSE
		WHERE BC.BILL_CASE_ID		= p_BILL_CASE_ID
		  AND BCI.BILL_CASE_ID		= BC.BILL_CASE_ID
		  AND RI.RETAIL_INVOICE_ID	= BCI.RETAIL_INVOICE_ID
		  AND (RI.RECIPIENT_PSE_ID	= p_RECIPIENT_PSE_ID or p_RECIPIENT_PSE_ID = CONSTANTS.ALL_ID)
		  AND PSE.PSE_ID			= RI.RECIPIENT_PSE_ID
		  AND RIL.RETAIL_INVOICE_ID	= RI.RETAIL_INVOICE_ID
		  AND RILC.RETAIL_INVOICE_LINE_ID(+) = RIL.RETAIL_INVOICE_LINE_ID
		  AND RILC.CHARGE_STATE(+)  = RETAIL_SETTLEMENT.c_CHARGE_STATE_MANUAL
		  AND A.ACCOUNT_ID			= RIL.ACCOUNT_ID
		  AND (  (p_SEARCH_OPTION = c_SEARCH_BY_NAME AND A.ACCOUNT_NAME LIKE NVL(p_SEARCH_STRING, '%'))
			  OR (p_SEARCH_OPTION = c_SEARCH_BY_EXT_IDENT AND A.ACCOUNT_EXTERNAL_IDENTIFIER LIKE NVL(p_SEARCH_STRING, '%')))
		  AND M.METER_ID			= RIL.METER_ID
		  GROUP BY A.ACCOUNT_ID, A.ACCOUNT_NAME, A.ACCOUNT_EXTERNAL_IDENTIFIER,
		  		   M.METER_ID, CASE M.METER_NAME WHEN CONSTANTS.NOT_ASSIGNED_STRING THEN NULL ELSE M.METER_NAME END,
		  		   RIL.RETAIL_INVOICE_LINE_ID, RI.RETAIL_INVOICE_ID,
				   BC.BILL_CASE_NAME, BC.PERIOD_BEGIN_DATE, BC.PERIOD_END_DATE, BC.APPROVAL_STATE,
				   PSE.PSE_NAME
		  ORDER BY PSE_NAME, A.ACCOUNT_NAME, CASE M.METER_NAME WHEN CONSTANTS.NOT_ASSIGNED_STRING THEN NULL ELSE M.METER_NAME END;
END GET_RETAIL_INVOICE_LINES;
--------------------------------------------------------------------------------
PROCEDURE PUT_MANUAL_RET_INV_LINE_COMP
(
	p_RETAIL_INVOICE_ID				IN RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE,
	p_RETAIL_INVOICE_LINE_ID       	IN RETAIL_INVOICE_LINE.RETAIL_INVOICE_LINE_ID%TYPE,
	p_RETAIL_INVOICE_LINE_COMP_ID  	IN RETAIL_INVOICE_LINE_COMPONENT.RETAIL_INVOICE_LINE_COMP_ID%TYPE,
	p_PRODUCT_ID                   	IN PRODUCT.PRODUCT_ID%TYPE,
	p_COMPONENT_ID                 	IN COMPONENT.COMPONENT_ID%TYPE,
	p_RILC_BEGIN_DATE              	IN DATE,
	p_RILC_END_DATE                	IN DATE,
	p_QUANTITY                     	IN RETAIL_INVOICE_LINE_COMPONENT.INTERNAL_QUANTITY%TYPE,
	p_RATE                         	IN RETAIL_INVOICE_LINE_COMPONENT.INTERNAL_RATE%TYPE,
	p_AMOUNT                       	IN RETAIL_INVOICE_LINE_COMPONENT.INTERNAL_AMOUNT%TYPE
) AS
	v_RETAIL_INVOICE_LINE_COMP_REC	RETAIL_INVOICE_LINE_COMPONENT%ROWTYPE;
	v_BILL_CASE_NAME				BILL_CASE.BILL_CASE_NAME%TYPE;
	v_BILL_CASE_ID					BILL_CASE.BILL_CASE_ID%TYPE;
BEGIN
	-- Verify Write Access
	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_BIL_CASE_MAN_LIN_EDIT);

	-- Check if this is locked before running
	SELECT A.BILL_CASE_NAME,
		   A.BILL_CASE_ID
	  INTO v_BILL_CASE_NAME,
	  	   v_BILL_CASE_ID
	  FROM BILL_CASE A,
	  	   BILL_CASE_INVOICE B
	 WHERE B.RETAIL_INVOICE_ID	= p_RETAIL_INVOICE_ID
	   AND B.BILL_CASE_ID		= A.BILL_CASE_ID;

	-- If it is locked, log a warning and exit
	IF IS_BILL_CASE_LOCKED(v_BILL_CASE_ID) THEN
		LOGS.LOG_WARN('Bill Case ' || v_BILL_CASE_NAME || ' is locked (Approved/Released). Editing Manual Line Items is prohibited.');

		ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Bill Case ' || v_BILL_CASE_NAME || ' is locked (Approved/Released). Editing Manual Line Items is prohibited.');
		RETURN;
	END IF;

	IF p_PRODUCT_ID IS NULL THEN -- If Product not selected
		ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Required Field Product is missing. No Edit is saved.');
	END IF; -- Show the 'Doink Box'

	IF p_COMPONENT_ID IS NULL THEN -- If Component not selected
		ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Required Field Component is missing. No Edit is saved.');
	END IF; -- Show the 'Doink Box'

	IF p_RILC_BEGIN_DATE IS NULL THEN -- If Begin Date not selected
		ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Required Field Begin Date is missing. No Edit is saved.');
	END IF; -- Show the 'Doink Box'

	IF p_AMOUNT IS NULL THEN -- If Amount not selected
		ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Required Field Amount is missing. No Edit is saved.');
	END IF; -- Show the 'Doink Box'

	v_RETAIL_INVOICE_LINE_COMP_REC.RETAIL_INVOICE_LINE_ID	:= p_RETAIL_INVOICE_LINE_ID;
	v_RETAIL_INVOICE_LINE_COMP_REC.PRODUCT_ID				:= p_PRODUCT_ID;
	v_RETAIL_INVOICE_LINE_COMP_REC.COMPONENT_ID				:= p_COMPONENT_ID;
	v_RETAIL_INVOICE_LINE_COMP_REC.BEGIN_DATE				:= p_RILC_BEGIN_DATE;
	v_RETAIL_INVOICE_LINE_COMP_REC.END_DATE					:= p_RILC_END_DATE;
	v_RETAIL_INVOICE_LINE_COMP_REC.CHARGE_STATE				:= RETAIL_SETTLEMENT.c_CHARGE_STATE_MANUAL;
	v_RETAIL_INVOICE_LINE_COMP_REC.INTERNAL_QUANTITY		:= p_QUANTITY;
	v_RETAIL_INVOICE_LINE_COMP_REC.INTERNAL_RATE			:= p_RATE;
	v_RETAIL_INVOICE_LINE_COMP_REC.INTERNAL_AMOUNT			:= p_AMOUNT;
	v_RETAIL_INVOICE_LINE_COMP_REC.DETERMINANT_STATUS		:= RETAIL_DETERMINANTS.c_STATUS_OK;

	IF p_RETAIL_INVOICE_LINE_COMP_ID IS NULL THEN
		SELECT RETAIL_INVOICE_ID.NEXTVAL INTO v_RETAIL_INVOICE_LINE_COMP_REC.RETAIL_INVOICE_LINE_COMP_ID FROM DUAL;

		INSERT INTO RETAIL_INVOICE_LINE_COMPONENT VALUES v_RETAIL_INVOICE_LINE_COMP_REC;
	ELSE
		v_RETAIL_INVOICE_LINE_COMP_REC.RETAIL_INVOICE_LINE_COMP_ID := p_RETAIL_INVOICE_LINE_COMP_ID;

		UPDATE RETAIL_INVOICE_LINE_COMPONENT RILC
		   SET ROW = v_RETAIL_INVOICE_LINE_COMP_REC
		 WHERE RILC.RETAIL_INVOICE_LINE_COMP_ID = p_RETAIL_INVOICE_LINE_COMP_ID;
	END IF;

	RETAIL_SETTLEMENT.UPD_RETAIL_INVOICE_COMPONENT(p_RETAIL_INVOICE_ID);
END PUT_MANUAL_RET_INV_LINE_COMP;
--------------------------------------------------------------------------------
PROCEDURE GET_MANUAL_RET_INV_LINE_COMPS
(
	p_RETAIL_INVOICE_LINE_ID   IN RETAIL_INVOICE_LINE.RETAIL_INVOICE_LINE_ID%TYPE,
	p_CURSOR                  OUT GA.REFCURSOR
) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT RILC.RETAIL_INVOICE_LINE_COMP_ID,
			   RILC.PRODUCT_ID,
			   RILC.COMPONENT_ID,
			   RILC.BEGIN_DATE			AS RILC_BEGIN_DATE,
			   RILC.END_DATE			AS RILC_END_DATE,
			   RILC.INTERNAL_QUANTITY	AS QUANTITY,
			   RILC.INTERNAL_RATE		AS RATE,
			   RILC.INTERNAL_AMOUNT		AS AMOUNT,
			   P.PRODUCT_NAME,
			   C.COMPONENT_NAME
		  FROM RETAIL_INVOICE_LINE_COMPONENT RILC,
		  	   PRODUCT P,
			   COMPONENT C
		 WHERE RILC.RETAIL_INVOICE_LINE_ID = p_RETAIL_INVOICE_LINE_ID
		   AND RILC.CHARGE_STATE		   = RETAIL_SETTLEMENT.c_CHARGE_STATE_MANUAL
		   AND P.PRODUCT_ID				   = RILC.PRODUCT_ID
		   AND C.COMPONENT_ID			   = RILC.COMPONENT_ID
		ORDER BY PRODUCT_NAME, COMPONENT_NAME, RILC_BEGIN_DATE;
END GET_MANUAL_RET_INV_LINE_COMPS;
--------------------------------------------------------------------------------
PROCEDURE DEL_MANUAL_RET_INV_LINE_COMP
(
	p_RETAIL_INVOICE_ID				IN RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE,
	p_RETAIL_INVOICE_LINE_COMP_ID   IN RETAIL_INVOICE_LINE_COMPONENT.RETAIL_INVOICE_LINE_COMP_ID%TYPE
) AS
	v_BILL_CASE_NAME 	BILL_CASE.BILL_CASE_NAME%TYPE;
	v_BILL_CASE_ID		BILL_CASE.BILL_CASE_ID%TYPE;
BEGIN
	-- Verify Write Access
	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_BIL_CASE_MAN_LIN_EDIT);

	-- Check if this is locked before running
	SELECT A.BILL_CASE_NAME,
		   A.BILL_CASE_ID
	  INTO v_BILL_CASE_NAME,
	  	   v_BILL_CASE_ID
	  FROM BILL_CASE A,
	  	   BILL_CASE_INVOICE B
	 WHERE B.RETAIL_INVOICE_ID	= p_RETAIL_INVOICE_ID
	   AND B.BILL_CASE_ID		= A.BILL_CASE_ID;

	-- If it is locked, log a warning and exit
	IF IS_BILL_CASE_LOCKED(v_BILL_CASE_ID) THEN
		LOGS.LOG_WARN('Bill Case ' || v_BILL_CASE_NAME || ' is locked (Approved/Released). Editing Manual Line Items is prohibited.');

		ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Bill Case ' || v_BILL_CASE_NAME || ' is locked (Approved/Released). Editing Manual Line Items is prohibited.');
		RETURN;
	END IF;

	DELETE FROM RETAIL_INVOICE_LINE_COMPONENT WHERE RETAIL_INVOICE_LINE_COMP_ID = p_RETAIL_INVOICE_LINE_COMP_ID;

	RETAIL_SETTLEMENT.UPD_RETAIL_INVOICE_COMPONENT(p_RETAIL_INVOICE_ID);
END DEL_MANUAL_RET_INV_LINE_COMP;
--------------------------------------------------------------------------------
PROCEDURE POPULATE_CSB_DATA
    (
    p_BILL_CASE_BEGIN_DATE                 DATE,
    p_BILL_CASE_END_DATE                   DATE,
    p_PRODUCT_CATEGORY                     PRODUCT.PRODUCT_CATEGORY%TYPE
    ) AS
    v_MEC_ANCILLARY_SERVICE_ID ANCILLARY_SERVICE.ANCILLARY_SERVICE_ID%TYPE := EI.GET_ID_FROM_NAME('MEC', EC.ED_ANCILLARY_SERVICE, 1);
	   v_MIC_ANCILLARY_SERVICE_ID	ANCILLARY_SERVICE.ANCILLARY_SERVICE_ID%TYPE := EI.GET_ID_FROM_NAME('MIC', EC.ED_ANCILLARY_SERVICE, 1);
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CSB_ACCOUNT_ESP_TEMP';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CSB_ACCOUNT_STATUS_TEMP';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CSB_AAS_MEC_TEMP';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CSB_AAS_MIC_TEMP';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CSB_PRODUCT_COMP_TEMP';

    INSERT INTO CSB_ACCOUNT_ESP_TEMP
    SELECT ACCOUNT_ID,
        ESP_ID,
        POOL_ID,
        BEGIN_DATE,
        END_DATE,
        ESP_ACCOUNT_NUMBER
    FROM ACCOUNT_ESP_CSB;

    INSERT INTO CSB_ACCOUNT_STATUS_TEMP
    SELECT ACCOUNT_ID,
        BEGIN_DATE,
        END_DATE,
        STATUS_NAME
    FROM ACCOUNT_STATUS_CSB;

    INSERT INTO CSB_AAS_MEC_TEMP
    SELECT A.ACCOUNT_ID											AS ACCOUNT_ID,
        NVL(X.BEGIN_DATE, p_BILL_CASE_BEGIN_DATE) AS BEGIN_DATE,
        NVL(X.END_DATE, p_BILL_CASE_END_DATE)		AS END_DATE
    FROM (SELECT AA.*
       FROM (SELECT DISTINCT AAS.ACCOUNT_ID			AS ACCOUNT_ID,
           AAS.ANCILLARY_SERVICE_ID      	AS ANCILLARY_SERVICE_ID,
           NVL((CASE WHEN C.SWTCH = -1 THEN LAG(CASE WHEN END_DATE = CONSTANTS.HIGH_DATE THEN NULL ELSE END_DATE + 1 END, 1, NULL)
                 OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
            WHEN C.SWTCH = 0 THEN BEGIN_DATE  /* SWITCH = 0, THE ACTUAL ASSIGNMENT ROW */
            ELSE NVL(LEAST(END_DATE, CONSTANTS.HIGH_DATE - 1), p_BILL_CASE_END_DATE) + 1
          END), p_BILL_CASE_BEGIN_DATE)   	AS BEGIN_DATE,
           NVL((CASE WHEN C.SWTCH = -1 THEN BEGIN_DATE-1
            WHEN C.SWTCH = 0  THEN LEAST(END_DATE, p_BILL_CASE_END_DATE)
            ELSE LEAD(BEGIN_DATE-1, 1, NULL)
              OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
          END), p_BILL_CASE_END_DATE) 		AS END_DATE
         FROM ACCOUNT_ANCILLARY_SERVICE     AAS,
          (SELECT -1 AS SWTCH FROM DUAL
           UNION ALL SELECT 0 AS SWTCH FROM DUAL
           UNION ALL SELECT 1 AS SWTCH FROM DUAL
          ) C
        WHERE AAS.ANCILLARY_SERVICE_ID(+) = v_MEC_ANCILLARY_SERVICE_ID
          AND AAS.BEGIN_DATE(+) <= p_BILL_CASE_END_DATE
          AND NVL(AAS.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BILL_CASE_BEGIN_DATE
         ) AA
      WHERE AA.BEGIN_DATE <= AA.END_DATE) X,
         ACCOUNT A
     WHERE A.ACCOUNT_ID = X.ACCOUNT_ID (+);

    INSERT INTO CSB_AAS_MIC_TEMP
    SELECT A.ACCOUNT_ID											AS ACCOUNT_ID,
       NVL(X.BEGIN_DATE, p_BILL_CASE_BEGIN_DATE) AS BEGIN_DATE,
       NVL(X.END_DATE, p_BILL_CASE_END_DATE)		AS END_DATE
    FROM (SELECT AA.*
      FROM (SELECT DISTINCT AAS.ACCOUNT_ID			AS ACCOUNT_ID,
          AAS.ANCILLARY_SERVICE_ID      	AS ANCILLARY_SERVICE_ID,
          NVL((CASE WHEN C.SWTCH = -1 THEN LAG(CASE WHEN END_DATE = CONSTANTS.HIGH_DATE THEN NULL ELSE END_DATE + 1 END, 1, NULL)
                OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
           WHEN C.SWTCH = 0 THEN BEGIN_DATE  /* SWITCH = 0, THE ACTUAL ASSIGNMENT ROW */
           ELSE NVL(LEAST(END_DATE, CONSTANTS.HIGH_DATE - 1), p_BILL_CASE_END_DATE) + 1
         END), p_BILL_CASE_BEGIN_DATE)   	AS BEGIN_DATE,
          NVL((CASE WHEN C.SWTCH = -1 THEN BEGIN_DATE-1
           WHEN C.SWTCH = 0  THEN LEAST(END_DATE, p_BILL_CASE_END_DATE)
           ELSE LEAD(BEGIN_DATE-1, 1, NULL)
             OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
         END), p_BILL_CASE_END_DATE) 		AS END_DATE
        FROM ACCOUNT_ANCILLARY_SERVICE     AAS,
         (SELECT -1 AS SWTCH FROM DUAL
          UNION ALL SELECT 0 AS SWTCH FROM DUAL
          UNION ALL SELECT 1 AS SWTCH FROM DUAL
         ) C
       WHERE AAS.ANCILLARY_SERVICE_ID(+) = v_MIC_ANCILLARY_SERVICE_ID
         AND AAS.BEGIN_DATE(+) <= p_BILL_CASE_END_DATE
         AND NVL(AAS.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BILL_CASE_BEGIN_DATE
        ) AA
     WHERE AA.BEGIN_DATE <= AA.END_DATE) X,
        ACCOUNT A
    WHERE A.ACCOUNT_ID = X.ACCOUNT_ID (+);

    INSERT INTO CSB_PRODUCT_COMP_TEMP
    SELECT DISTINCT PP.PRODUCT_ID,
       CC.COMPONENT_ID,
       PP.PRODUCT_EXTERNAL_IDENTIFIER                          AS PROD_EXTERNAL_IDENTIFIER,
       PP.BEGIN_DATE                                           AS PROD_BEGIN_DATE,
       PP.END_DATE							                   AS PROD_END_DATE,
       PPC.BEGIN_DATE                                          AS PC_BEGIN_DATE,
       PPC.END_DATE							                   AS PC_END_DATE,
       CC.CHARGE_TYPE
     FROM PRODUCT PP,
       PRODUCT_COMPONENT PPC,
       COMPONENT CC
    WHERE PP.PRODUCT_CATEGORY = p_PRODUCT_CATEGORY
      AND PP.BEGIN_DATE      <= P_BILL_CASE_END_DATE
      AND NVL(PP.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_BEGIN_DATE
      AND PP.PRODUCT_ID       = PPC.PRODUCT_ID
      AND PPC.BEGIN_DATE      <= LEAST(P_BILL_CASE_END_DATE, NVL(PP.END_DATE, CONSTANTS.HIGH_DATE))
      AND NVL(PPC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_BEGIN_DATE, PP.BEGIN_DATE)
      AND PPC.COMPONENT_ID    = CC.COMPONENT_ID
      AND CC.CHARGE_TYPE     <> C_COMPONENT_CHARGE_TYPE_MANUAL;

END POPULATE_CSB_DATA;
--------------------------------------------------------------------------------
PROCEDURE INS_BILL_CASE_TEMP_TUOS
(
	p_BILL_CASE_REC		IN BILL_CASE%ROWTYPE,
    p_RECIPIENT_PSE_ID  IN NUMBER DEFAULT NULL,
    p_ACCOUNT_ID        IN NUMBER DEFAULT NULL,
	p_CHARGE_STATE		IN NUMBER DEFAULT RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL
) AS
	v_PROCESS_ID		NUMBER(12);

	g_MEC_ANCILLARY_SERVICE_ID	NUMBER(9) := EI.GET_ID_FROM_NAME('MEC', EC.ED_ANCILLARY_SERVICE, 1);
	g_MIC_ANCILLARY_SERVICE_ID	NUMBER(9) := EI.GET_ID_FROM_NAME('MIC', EC.ED_ANCILLARY_SERVICE, 1);
BEGIN
	v_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
	LOGS.LOG_DEBUG('Populating RUN_BILL_CASE_TEMP for Product Category: ' || p_BILL_CASE_REC.PRODUCT_CATEGORY);

	EXECUTE IMMEDIATE 'TRUNCATE TABLE RUN_BILL_CASE_TEMP';

	IF p_BILL_CASE_REC.RUN_TYPE IN (c_RUN_TYPE_GLOBAL, c_RUN_TYPE_PARTIAL_INCLUDE) THEN
	   -- Populate the global temporary tables
	   POPULATE_CSB_DATA(p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
               p_BILL_CASE_REC.PERIOD_END_DATE,
               p_BILL_CASE_REC.PRODUCT_CATEGORY);
		-- TUOS part
		INSERT INTO RUN_BILL_CASE_TEMP
			SELECT *
			FROM
			(
				SELECT p_BILL_CASE_REC.BILL_CASE_ID		AS BILL_CASE_ID,
					   v_PROCESS_ID						AS PROCESS_ID,
					   A.ACCOUNT_ID 					AS ACCOUNT_ID,
					   CONSTANTS.NOT_ASSIGNED 			AS METER_ID,
					   CONSTANTS.NOT_ASSIGNED 			AS SERVICE_POINT_ID,
					   TO_CHAR(CONSTANTS.NOT_ASSIGNED) 	AS METER_TYPE,
					   GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
								P.BEGIN_DATE,
								PC.BEGIN_DATE,
								EGA_DX_GRP.BEGIN_DATE,
								EGA_TX_GRP.BEGIN_DATE,
								AST.BEGIN_DATE,
                                AAS_MEC.BEGIN_DATE,
                                AAS_MIC.BEGIN_DATE,                                
                                ALF.BEGIN_DATE,
								AESP.BEGIN_DATE,
								PSE_ESP.BEGIN_DATE) 		AS BEGIN_DATE,
					   LEAST(p_BILL_CASE_REC.PERIOD_END_DATE,
							 NVL(P.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PC.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AST.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(ALF.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE)) 	AS END_DATE,
					   P.PRODUCT_ID 					AS PRODUCT_ID,
					   C.COMPONENT_ID 					AS COMPONENT_ID,
					   NULL 							AS PERIOD_ID,
					   	CASE C.CHARGE_TYPE
							WHEN c_COMPONENT_CHARGE_TYPE_TAX THEN
								RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX
							ELSE
								p_CHARGE_STATE
							END							AS CHARGE_STATE,
					   NULL 							AS INTERNAL_QUANTITY,
					   NULL 							AS INTERNAL_RATE,
					   NULL 							AS INTERNAL_AMOUNT,
					   NULL 							AS EXTERNAL_QUANTITY,
					   NULL 							AS EXTERNAL_RATE,
					   NULL 							AS EXTERNAL_AMOUNT,
					   EG_DX_GRP.ENTITY_GROUP_ID		AS ENTITY_GROUP_ID1,
					   EG_TX_GRP.ENTITY_GROUP_ID		AS ENTITY_GROUP_ID2,
					   AESP.ESP_ID						AS ESP_ID,
					   p_BILL_CASE_REC.SENDER_PSE_ID	AS SENDER_PSE_ID,
					   PSE.PSE_ID						AS RECIPIENT_PSE_ID,
        			   NULL AS CREDIT_REFERENCE_ID
				  FROM PRODUCT P,
					   PRODUCT_COMPONENT PC,
					   COMPONENT C,
					   ENTITY_GROUP EG_DX_GRP,
					   ENTITY_GROUP EG_TX_GRP,
					   ENTITY_GROUP_ASSIGNMENT EGA_DX_GRP,
					   ENTITY_GROUP_ASSIGNMENT EGA_TX_GRP,
					   ACCOUNT A,
					   ACCOUNT_STATUS_CSB AST,
					   ACCOUNT_ESP_CSB    AESP,
					   (SELECT A.ACCOUNT_ID											AS ACCOUNT_ID,
					   		   NVL(X.BEGIN_DATE, p_BILL_CASE_REC.PERIOD_BEGIN_DATE) AS BEGIN_DATE,
					   		   NVL(X.END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)		AS END_DATE
						 FROM (SELECT AA.*
							  FROM (SELECT DISTINCT AAS.ACCOUNT_ID			AS ACCOUNT_ID,
										   AAS.ANCILLARY_SERVICE_ID      	AS ANCILLARY_SERVICE_ID,
										   NVL((CASE WHEN C.SWTCH = -1 THEN LAG(CASE WHEN END_DATE = CONSTANTS.HIGH_DATE THEN NULL ELSE END_DATE + 1 END, 1, NULL)
																			OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
													 WHEN C.SWTCH = 0 THEN BEGIN_DATE  /* SWITCH = 0, THE ACTUAL ASSIGNMENT ROW */
													 ELSE NVL(LEAST(END_DATE, CONSTANTS.HIGH_DATE - 1), p_BILL_CASE_REC.PERIOD_END_DATE) + 1
												END), p_BILL_CASE_REC.PERIOD_BEGIN_DATE)   	AS BEGIN_DATE,
										   NVL((CASE WHEN C.SWTCH = -1 THEN BEGIN_DATE-1
													 WHEN C.SWTCH = 0  THEN LEAST(END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)
													 ELSE LEAD(BEGIN_DATE-1, 1, NULL)
														  OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
												END), p_BILL_CASE_REC.PERIOD_END_DATE) 		AS END_DATE
									  FROM ACCOUNT_ANCILLARY_SERVICE     AAS,
										  (SELECT -1 AS SWTCH FROM DUAL
										   UNION ALL SELECT 0 AS SWTCH FROM DUAL
										   UNION ALL SELECT 1 AS SWTCH FROM DUAL
										  ) C
									 WHERE AAS.ANCILLARY_SERVICE_ID(+) = g_MEC_ANCILLARY_SERVICE_ID
									   AND AAS.BEGIN_DATE(+) <= p_BILL_CASE_REC.PERIOD_END_DATE
									   AND NVL(AAS.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
								   ) AA
							 WHERE AA.BEGIN_DATE <= AA.END_DATE) X,
								   ACCOUNT A
						 WHERE A.ACCOUNT_ID = X.ACCOUNT_ID (+)
					   ) AAS_MEC,
					   (SELECT A.ACCOUNT_ID											AS ACCOUNT_ID,
					   		   NVL(X.BEGIN_DATE, p_BILL_CASE_REC.PERIOD_BEGIN_DATE) AS BEGIN_DATE,
					   		   NVL(X.END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)		AS END_DATE
						 FROM (SELECT AA.*
							  FROM (SELECT DISTINCT AAS.ACCOUNT_ID			AS ACCOUNT_ID,
										   AAS.ANCILLARY_SERVICE_ID      	AS ANCILLARY_SERVICE_ID,
										   NVL((CASE WHEN C.SWTCH = -1 THEN LAG(CASE WHEN END_DATE = CONSTANTS.HIGH_DATE THEN NULL ELSE END_DATE + 1 END, 1, NULL)
																			OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
													 WHEN C.SWTCH = 0 THEN BEGIN_DATE  /* SWITCH = 0, THE ACTUAL ASSIGNMENT ROW */
													 ELSE NVL(LEAST(END_DATE, CONSTANTS.HIGH_DATE - 1), p_BILL_CASE_REC.PERIOD_END_DATE) + 1
												END), p_BILL_CASE_REC.PERIOD_BEGIN_DATE)   	AS BEGIN_DATE,
										   NVL((CASE WHEN C.SWTCH = -1 THEN BEGIN_DATE-1
													 WHEN C.SWTCH = 0  THEN LEAST(END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)
													 ELSE LEAD(BEGIN_DATE-1, 1, NULL)
														  OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
												END), p_BILL_CASE_REC.PERIOD_END_DATE) 		AS END_DATE
									  FROM ACCOUNT_ANCILLARY_SERVICE     AAS,
										  (SELECT -1 AS SWTCH FROM DUAL
										   UNION ALL SELECT 0 AS SWTCH FROM DUAL
										   UNION ALL SELECT 1 AS SWTCH FROM DUAL
										  ) C
									 WHERE AAS.ANCILLARY_SERVICE_ID(+) = g_MIC_ANCILLARY_SERVICE_ID
									   AND AAS.BEGIN_DATE(+) <= p_BILL_CASE_REC.PERIOD_END_DATE
									   AND NVL(AAS.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
								   ) AA
							 WHERE AA.BEGIN_DATE <= AA.END_DATE) X,
								   ACCOUNT A
						 WHERE A.ACCOUNT_ID = X.ACCOUNT_ID (+)
					   ) AAS_MIC,
					   ACCOUNT_LOSS_FACTOR ALF,
					   PSE_ESP,
					   PSE
				 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
				   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
				   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
				   -- Product Component relationship
				   AND PC.PRODUCT_ID = P.PRODUCT_ID
				   AND PC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE)
				   AND C.COMPONENT_ID = PC.COMPONENT_ID
				   AND C.CHARGE_TYPE  <> c_COMPONENT_CHARGE_TYPE_MANUAL
				   -- Entity Groups with Group Category 'Distribution Group' for selected Scheme with Domain as Account
				   AND EG_DX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
				   AND EG_DX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_DX_GRP
				   -- Entity Groups with Group Category 'Transmission Group' for selected Scheme with Domain as Account
				   AND EG_TX_GRP.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
				   AND EG_TX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
				   AND EG_TX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_TX_GRP
				   -- 'Distribution Group' Entity Group Assignments for Accounts
				   AND EGA_DX_GRP.ENTITY_GROUP_ID = EG_DX_GRP.ENTITY_GROUP_ID
				   AND EGA_DX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE)
				   -- 'Transmission Group' Entity Group Assignments for Accounts
				   AND EGA_TX_GRP.ENTITY_ID = EGA_DX_GRP.ENTITY_ID
				   AND EGA_TX_GRP.ENTITY_GROUP_ID = EG_TX_GRP.ENTITY_GROUP_ID
				   AND EGA_TX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE)
				   -- Account
				   AND A.ACCOUNT_ID = EGA_TX_GRP.ENTITY_ID
				   AND (p_ACCOUNT_ID IS NULL OR A.ACCOUNT_ID = p_ACCOUNT_ID)
				   AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_ACCOUNT
				   -- Account Status
				   AND AST.ACCOUNT_ID = A.ACCOUNT_ID
				   AND AST.STATUS_NAME = 'Active'
				   AND AST.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AST.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE)
				   -- Account Ancillary Service 'MEC'
				   AND AAS_MEC.ACCOUNT_ID(+) = A.ACCOUNT_ID
				   AND AAS_MEC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE)
				   -- Account Ancillary Service 'MIC'
				   AND AAS_MIC.ACCOUNT_ID(+) = A.ACCOUNT_ID
				   AND AAS_MIC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, AAS_MEC.BEGIN_DATE)
				   -- Account Loss Factor
				   AND ALF.ACCOUNT_ID = A.ACCOUNT_ID
				   AND ALF.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(ALF.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE)
				   -- Account ESP
				   AND AESP.ACCOUNT_ID = AST.ACCOUNT_ID
				   AND AESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE), NVL(ALF.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE, ALF.BEGIN_DATE)
				   -- PSE ESP relationships
				   AND PSE_ESP.ESP_ID = AESP.ESP_ID
				   AND PSE_ESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE), NVL(ALF.END_DATE, CONSTANTS.HIGH_DATE), NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE, ALF.BEGIN_DATE, AESP.BEGIN_DATE)
				   -- PSE
				   AND PSE.PSE_ID = PSE_ESP.PSE_ID
				   AND (p_RECIPIENT_PSE_ID IS NULL OR PSE.PSE_ID = p_RECIPIENT_PSE_ID)
				UNION ALL
				SELECT p_BILL_CASE_REC.BILL_CASE_ID		AS BILL_CASE_ID,
					   v_PROCESS_ID						AS PROCESS_ID,
					   A.ACCOUNT_ID 					AS ACCOUNT_ID,
					   M.METER_ID 						AS METER_ID,
					   CONSTANTS.NOT_ASSIGNED 			AS SERVICE_POINT_ID,
					   M.METER_TYPE 					AS METER_TYPE,
					   GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
								PRODUCT_BEGIN_DATE,
								PC_BEGIN_DATE,
								EGA_DX_GRP.BEGIN_DATE,
								EGA_TX_GRP.BEGIN_DATE,
								AST.BEGIN_DATE,
								ASL.BEGIN_DATE,
								SLM.BEGIN_DATE,
                                AAS_MEC.BEGIN_DATE,
                                AAS_MIC.BEGIN_DATE,                                
                                MLF.BEGIN_DATE,
								AESP.BEGIN_DATE,
								PSE_ESP.BEGIN_DATE) 		AS BEGIN_DATE,
					   LEAST(p_BILL_CASE_REC.PERIOD_END_DATE,
							 NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PC_END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AST.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(MLF.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE)) 	AS END_DATE,
					   P.PRODUCT_ID 					AS PRODUCT_ID,
					   P.COMPONENT_ID 					AS COMPONENT_ID,
					   NULL 							AS PERIOD_ID,
					   CASE COMP_CHARGE_TYPE
           WHEN c_COMPONENT_CHARGE_TYPE_TAX THEN
            RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX
           ELSE
            p_CHARGE_STATE
           END							AS CHARGE_STATE,
					   NULL 							AS INTERNAL_QUANTITY,
					   NULL 							AS INTERNAL_RATE,
					   NULL 							AS INTERNAL_AMOUNT,
					   NULL 							AS EXTERNAL_QUANTITY,
					   NULL 							AS EXTERNAL_RATE,
					   NULL 							AS EXTERNAL_AMOUNT,
					   EG_DX_GRP.ENTITY_GROUP_ID		AS ENTITY_GROUP_ID1,
					   EG_TX_GRP.ENTITY_GROUP_ID		AS ENTITY_GROUP_ID2,
					   AESP.ESP_ID						AS ESP_ID,
					   p_BILL_CASE_REC.SENDER_PSE_ID	AS SENDER_PSE_ID,
					   PSE.PSE_ID						AS RECIPIENT_PSE_ID,
        			   NULL AS CREDIT_REFERENCE_ID
				  FROM CSB_PRODUCT_COMP_TEMP P,
					   ENTITY_GROUP EG_DX_GRP,
					   ENTITY_GROUP EG_TX_GRP,
					   ENTITY_GROUP_ASSIGNMENT EGA_DX_GRP,
					   ENTITY_GROUP_ASSIGNMENT EGA_TX_GRP,
					   ACCOUNT A,
					   CSB_ACCOUNT_STATUS_TEMP AST,
					   METER M,
					   SERVICE_LOCATION_METER SLM,
					   ACCOUNT_SERVICE_LOCATION ASL,
					   SERVICE_LOCATION SL,
					   CSB_ACCOUNT_ESP_TEMP AESP,
					   CSB_AAS_MEC_TEMP AAS_MEC,
					   CSB_AAS_MIC_TEMP AAS_MIC,
					   METER_LOSS_FACTOR MLF,
					   PSE_ESP,
					   PSE
				 WHERE -- Entity Groups with Group Category 'Distribution Group' for selected Scheme with Domain as Account
				   EG_DX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
				   AND EG_DX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_DX_GRP
				   -- Entity Groups with Group Category 'Transmission Group' for selected Scheme with Domain as Account
				   AND EG_TX_GRP.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
				   AND EG_TX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
				   AND EG_TX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_TX_GRP
				   -- 'Distribution Group' Entity Group Assignments for Accounts
				   AND EGA_DX_GRP.ENTITY_GROUP_ID = EG_DX_GRP.ENTITY_GROUP_ID
				   AND EGA_DX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE)
				   -- 'Transmission Group' Entity Group Assignments for Accounts
				   AND EGA_TX_GRP.ENTITY_ID = EGA_DX_GRP.ENTITY_ID
				   AND EGA_TX_GRP.ENTITY_GROUP_ID = EG_TX_GRP.ENTITY_GROUP_ID
				   AND EGA_TX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE)
				   -- Account
				   AND A.ACCOUNT_ID = EGA_TX_GRP.ENTITY_ID
				   AND (p_ACCOUNT_ID IS NULL OR A.ACCOUNT_ID = p_ACCOUNT_ID)
				   AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER
				   -- Account Status
				   AND AST.ACCOUNT_ID = A.ACCOUNT_ID
				   AND AST.STATUS_NAME = 'Active'
				   AND AST.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AST.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE)
				   -- Account Service Location
				   AND ASL.ACCOUNT_ID = A.ACCOUNT_ID
				   AND ASL.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE)
				   -- Service Location
				   AND SL.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
				   -- Service Location Meter
				   AND SLM.SERVICE_LOCATION_ID = SL.SERVICE_LOCATION_ID
				   AND SLM.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE)
				   -- Meter
				   AND M.METER_ID = SLM.METER_ID
				   -- Account Ancillary Service 'MEC'
				   AND AAS_MEC.ACCOUNT_ID(+) = A.ACCOUNT_ID
				   AND AAS_MEC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE)
				   -- Account Ancillary Service 'MIC'
				   AND AAS_MIC.ACCOUNT_ID(+) = A.ACCOUNT_ID
				   AND AAS_MIC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AAS_MEC.BEGIN_DATE)
				   -- Meter Loss Factor
				   AND MLF.METER_ID = M.METER_ID
				   AND MLF.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(MLF.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE)
				   -- Account ESP
				   AND AESP.ACCOUNT_ID = AST.ACCOUNT_ID
				   AND AESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE), NVL(MLF.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE, MLF.BEGIN_DATE)
				   -- PSE ESP relationships
				   AND PSE_ESP.ESP_ID = AESP.ESP_ID
				   AND PSE_ESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(PRODUCT_END_DATE, CONSTANTS.HIGH_DATE), NVL(PC_END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE), NVL(MLF.END_DATE, CONSTANTS.HIGH_DATE), NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, PRODUCT_BEGIN_DATE, PC_BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE, MLF.BEGIN_DATE, AESP.BEGIN_DATE)
				   -- PSE
				   AND PSE.PSE_ID = PSE_ESP.PSE_ID
				   AND (p_RECIPIENT_PSE_ID IS NULL OR PSE.PSE_ID = p_RECIPIENT_PSE_ID)
			)A
			-- this short-circuiting is for "Global" case
			WHERE EXISTS(
						  SELECT NULL
						  FROM DUAL
						  WHERE p_BILL_CASE_REC.RUN_TYPE = c_RUN_TYPE_GLOBAL
						)
			-- this is for "Partial - Include" case
			OR EXISTS  (
						  SELECT NULL
						  FROM BILL_CASE_SELECTIONS B
						  WHERE B.BILL_CASE_ID = A.BILL_CASE_ID
						  AND   p_BILL_CASE_REC.RUN_TYPE = c_RUN_TYPE_PARTIAL_INCLUDE
						  AND  ((NVL(B.PSE_ID,  		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.RECIPIENT_PSE_ID = B.PSE_ID))
						  AND  ((NVL(B.ACCOUNT_ID, 		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.ACCOUNT_ID = B.ACCOUNT_ID))
						  AND  ((NVL(B.PRODUCT_ID, 		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.PRODUCT_ID = B.PRODUCT_ID))
						  AND  ((NVL(B.COMPONENT_ID,  	c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.COMPONENT_ID = B.COMPONENT_ID))
			);
    	--  Else this is "Partial - Exclude" and so do NOT EXISTS for Bill Case Selections.
		ELSIF p_BILL_CASE_REC.RUN_TYPE = c_RUN_TYPE_PARTIAL_EXCLUDE THEN
			-- TUOS part
			INSERT INTO RUN_BILL_CASE_TEMP
				SELECT *
				FROM
				(
					SELECT p_BILL_CASE_REC.BILL_CASE_ID		AS BILL_CASE_ID,
						   v_PROCESS_ID						AS PROCESS_ID,
						   A.ACCOUNT_ID 					AS ACCOUNT_ID,
						   CONSTANTS.NOT_ASSIGNED 			AS METER_ID,
						   CONSTANTS.NOT_ASSIGNED 			AS SERVICE_POINT_ID,
						   TO_CHAR(CONSTANTS.NOT_ASSIGNED) 	AS METER_TYPE,
						   GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
									P.BEGIN_DATE,
									PC.BEGIN_DATE,
									EGA_DX_GRP.BEGIN_DATE,
									EGA_TX_GRP.BEGIN_DATE,
									AST.BEGIN_DATE,
									AAS_MEC.BEGIN_DATE,
									AAS_MIC.BEGIN_DATE,
									ALF.BEGIN_DATE,
									AESP.BEGIN_DATE,
									PSE_ESP.BEGIN_DATE) 		AS BEGIN_DATE,
						   LEAST(p_BILL_CASE_REC.PERIOD_END_DATE,
								 NVL(P.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(PC.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(AST.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(ALF.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE)) 	AS END_DATE,
						   P.PRODUCT_ID 					AS PRODUCT_ID,
						   C.COMPONENT_ID 					AS COMPONENT_ID,
						   NULL 							AS PERIOD_ID,
							   CASE C.CHARGE_TYPE
								WHEN c_COMPONENT_CHARGE_TYPE_TAX THEN
									RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX
								ELSE
									p_CHARGE_STATE
								END							AS CHARGE_STATE,
						   NULL 							AS INTERNAL_QUANTITY,
						   NULL 							AS INTERNAL_RATE,
						   NULL 							AS INTERNAL_AMOUNT,
						   NULL 							AS EXTERNAL_QUANTITY,
						   NULL 							AS EXTERNAL_RATE,
						   NULL 							AS EXTERNAL_AMOUNT,
						   EG_DX_GRP.ENTITY_GROUP_ID		AS ENTITY_GROUP_ID1,
						   EG_TX_GRP.ENTITY_GROUP_ID		AS ENTITY_GROUP_ID2,
						   AESP.ESP_ID						AS ESP_ID,
						   p_BILL_CASE_REC.SENDER_PSE_ID	AS SENDER_PSE_ID,
						   PSE.PSE_ID						AS RECIPIENT_PSE_ID,
         				   NULL AS CREDIT_REFERENCE_ID
					  FROM PRODUCT P,
						   PRODUCT_COMPONENT PC,
						   COMPONENT C,
						   ENTITY_GROUP EG_DX_GRP,
						   ENTITY_GROUP EG_TX_GRP,
						   ENTITY_GROUP_ASSIGNMENT EGA_DX_GRP,
						   ENTITY_GROUP_ASSIGNMENT EGA_TX_GRP,
						   ACCOUNT A,
						   ACCOUNT_STATUS_CSB AST,
						   ACCOUNT_ESP_CSB    AESP,
						   (SELECT A.ACCOUNT_ID											AS ACCOUNT_ID,
								   NVL(X.BEGIN_DATE, p_BILL_CASE_REC.PERIOD_BEGIN_DATE) AS BEGIN_DATE,
								   NVL(X.END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)		AS END_DATE
							 FROM (SELECT AA.*
								  FROM (SELECT DISTINCT AAS.ACCOUNT_ID			AS ACCOUNT_ID,
											   AAS.ANCILLARY_SERVICE_ID      	AS ANCILLARY_SERVICE_ID,
											   NVL((CASE WHEN C.SWTCH = -1 THEN LAG(CASE WHEN END_DATE = CONSTANTS.HIGH_DATE THEN NULL ELSE END_DATE + 1 END, 1, NULL)
																				OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
														 WHEN C.SWTCH = 0 THEN BEGIN_DATE  /* SWITCH = 0, THE ACTUAL ASSIGNMENT ROW */
														 ELSE NVL(LEAST(END_DATE, CONSTANTS.HIGH_DATE - 1), p_BILL_CASE_REC.PERIOD_END_DATE) + 1
													END), p_BILL_CASE_REC.PERIOD_BEGIN_DATE)   	AS BEGIN_DATE,
											   NVL((CASE WHEN C.SWTCH = -1 THEN BEGIN_DATE-1
														 WHEN C.SWTCH = 0  THEN LEAST(END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)
														 ELSE LEAD(BEGIN_DATE-1, 1, NULL)
															  OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
													END), p_BILL_CASE_REC.PERIOD_END_DATE) 		AS END_DATE
										  FROM ACCOUNT_ANCILLARY_SERVICE     AAS,
											  (SELECT -1 AS SWTCH FROM DUAL
											   UNION ALL SELECT 0 AS SWTCH FROM DUAL
											   UNION ALL SELECT 1 AS SWTCH FROM DUAL
											  ) C
										 WHERE AAS.ANCILLARY_SERVICE_ID(+) = g_MEC_ANCILLARY_SERVICE_ID
										   AND AAS.BEGIN_DATE(+) <= p_BILL_CASE_REC.PERIOD_END_DATE
										   AND NVL(AAS.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
									   ) AA
								 WHERE AA.BEGIN_DATE <= AA.END_DATE) X,
									   ACCOUNT A
							 WHERE A.ACCOUNT_ID = X.ACCOUNT_ID (+)
						   ) AAS_MEC,
						   (SELECT A.ACCOUNT_ID											AS ACCOUNT_ID,
								   NVL(X.BEGIN_DATE, p_BILL_CASE_REC.PERIOD_BEGIN_DATE) AS BEGIN_DATE,
								   NVL(X.END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)		AS END_DATE
							 FROM (SELECT AA.*
								  FROM (SELECT DISTINCT AAS.ACCOUNT_ID			AS ACCOUNT_ID,
											   AAS.ANCILLARY_SERVICE_ID      	AS ANCILLARY_SERVICE_ID,
											   NVL((CASE WHEN C.SWTCH = -1 THEN LAG(CASE WHEN END_DATE = CONSTANTS.HIGH_DATE THEN NULL ELSE END_DATE + 1 END, 1, NULL)
																				OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
														 WHEN C.SWTCH = 0 THEN BEGIN_DATE  /* SWITCH = 0, THE ACTUAL ASSIGNMENT ROW */
														 ELSE NVL(LEAST(END_DATE, CONSTANTS.HIGH_DATE - 1), p_BILL_CASE_REC.PERIOD_END_DATE) + 1
													END), p_BILL_CASE_REC.PERIOD_BEGIN_DATE)   	AS BEGIN_DATE,
											   NVL((CASE WHEN C.SWTCH = -1 THEN BEGIN_DATE-1
														 WHEN C.SWTCH = 0  THEN LEAST(END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)
														 ELSE LEAD(BEGIN_DATE-1, 1, NULL)
															  OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
													END), p_BILL_CASE_REC.PERIOD_END_DATE) 		AS END_DATE
										  FROM ACCOUNT_ANCILLARY_SERVICE     AAS,
											  (SELECT -1 AS SWTCH FROM DUAL
											   UNION ALL SELECT 0 AS SWTCH FROM DUAL
											   UNION ALL SELECT 1 AS SWTCH FROM DUAL
											  ) C
										 WHERE AAS.ANCILLARY_SERVICE_ID(+) = g_MIC_ANCILLARY_SERVICE_ID
										   AND AAS.BEGIN_DATE(+) <= p_BILL_CASE_REC.PERIOD_END_DATE
										   AND NVL(AAS.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
									   ) AA
								 WHERE AA.BEGIN_DATE <= AA.END_DATE) X,
									   ACCOUNT A
							 WHERE A.ACCOUNT_ID = X.ACCOUNT_ID (+)
						   ) AAS_MIC,
						   ACCOUNT_LOSS_FACTOR ALF,
						   PSE_ESP,
						   PSE
					 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
					   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
					   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
					   -- Product Component relationship
					   AND PC.PRODUCT_ID = P.PRODUCT_ID
					   AND PC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE)
					   AND C.COMPONENT_ID = PC.COMPONENT_ID
				   	   AND C.CHARGE_TYPE  <> c_COMPONENT_CHARGE_TYPE_MANUAL
					   -- Entity Groups with Group Category 'Distribution Group' for selected Scheme with Domain as Account
					   AND EG_DX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
					   AND EG_DX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_DX_GRP
					   -- Entity Groups with Group Category 'Transmission Group' for selected Scheme with Domain as Account
					   AND EG_TX_GRP.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
					   AND EG_TX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
					   AND EG_TX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_TX_GRP
					   -- 'Distribution Group' Entity Group Assignments for Accounts
					   AND EGA_DX_GRP.ENTITY_GROUP_ID = EG_DX_GRP.ENTITY_GROUP_ID
					   AND EGA_DX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE)
					   -- 'Transmission Group' Entity Group Assignments for Accounts
					   AND EGA_TX_GRP.ENTITY_ID = EGA_DX_GRP.ENTITY_ID
					   AND EGA_TX_GRP.ENTITY_GROUP_ID = EG_TX_GRP.ENTITY_GROUP_ID
					   AND EGA_TX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE)
					   -- Account
					   AND A.ACCOUNT_ID = EGA_TX_GRP.ENTITY_ID
				       AND (p_ACCOUNT_ID IS NULL OR A.ACCOUNT_ID = p_ACCOUNT_ID)
					   AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_ACCOUNT
					   -- Account Status
					   AND AST.ACCOUNT_ID = A.ACCOUNT_ID
					   AND AST.STATUS_NAME = 'Active'
					   AND AST.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(AST.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE)
					   -- Account Ancillary Service 'MEC'
					   AND AAS_MEC.ACCOUNT_ID(+) = A.ACCOUNT_ID
					   AND AAS_MEC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE)
					   -- Account Ancillary Service 'MIC'
					   AND AAS_MIC.ACCOUNT_ID(+) = A.ACCOUNT_ID
					   AND AAS_MIC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, AAS_MEC.BEGIN_DATE)
					   -- Account Loss Factor
					   AND ALF.ACCOUNT_ID = A.ACCOUNT_ID
					   AND ALF.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(ALF.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE)
					   -- Account ESP
					   AND AESP.ACCOUNT_ID = AST.ACCOUNT_ID
					   AND AESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE), NVL(ALF.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE, ALF.BEGIN_DATE)
					   -- PSE ESP relationships
					   AND PSE_ESP.ESP_ID = AESP.ESP_ID
					   AND PSE_ESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE), NVL(ALF.END_DATE, CONSTANTS.HIGH_DATE), NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE, ALF.BEGIN_DATE, AESP.BEGIN_DATE)
					   -- PSE
					   AND PSE.PSE_ID = PSE_ESP.PSE_ID
				       AND (p_RECIPIENT_PSE_ID IS NULL OR PSE.PSE_ID = p_RECIPIENT_PSE_ID)
					UNION ALL
					SELECT p_BILL_CASE_REC.BILL_CASE_ID		AS BILL_CASE_ID,
						   v_PROCESS_ID						AS PROCESS_ID,
						   A.ACCOUNT_ID 					AS ACCOUNT_ID,
						   M.METER_ID 						AS METER_ID,
						   CONSTANTS.NOT_ASSIGNED 			AS SERVICE_POINT_ID,
						   M.METER_TYPE 					AS METER_TYPE,
						   GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
									P.BEGIN_DATE,
									PC.BEGIN_DATE,
									EGA_DX_GRP.BEGIN_DATE,
									EGA_TX_GRP.BEGIN_DATE,
									AST.BEGIN_DATE,
									ASL.BEGIN_DATE,
									SLM.BEGIN_DATE,
									AAS_MEC.BEGIN_DATE,
									AAS_MIC.BEGIN_DATE,
									MLF.BEGIN_DATE,
									AESP.BEGIN_DATE,
									PSE_ESP.BEGIN_DATE) 		AS BEGIN_DATE,
						   LEAST(p_BILL_CASE_REC.PERIOD_END_DATE,
								 NVL(P.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(PC.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(AST.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(MLF.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE),
								 NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE)) 	AS END_DATE,
						   P.PRODUCT_ID 					AS PRODUCT_ID,
						   C.COMPONENT_ID 					AS COMPONENT_ID,
						   NULL 							AS PERIOD_ID,
							  CASE C.CHARGE_TYPE
								WHEN c_COMPONENT_CHARGE_TYPE_TAX THEN
									RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX
								ELSE
									p_CHARGE_STATE
								END							AS CHARGE_STATE,
						   NULL 							AS INTERNAL_QUANTITY,
						   NULL 							AS INTERNAL_RATE,
						   NULL 							AS INTERNAL_AMOUNT,
						   NULL 							AS EXTERNAL_QUANTITY,
						   NULL 							AS EXTERNAL_RATE,
						   NULL 							AS EXTERNAL_AMOUNT,
						   EG_DX_GRP.ENTITY_GROUP_ID		AS ENTITY_GROUP_ID1,
						   EG_TX_GRP.ENTITY_GROUP_ID		AS ENTITY_GROUP_ID2,
						   AESP.ESP_ID						AS ESP_ID,
						   p_BILL_CASE_REC.SENDER_PSE_ID	AS SENDER_PSE_ID,
						   PSE.PSE_ID						AS RECIPIENT_PSE_ID,
         				   NULL AS CREDIT_REFERENCE_ID
					  FROM PRODUCT P,
						   PRODUCT_COMPONENT PC,
						   COMPONENT C,
						   ENTITY_GROUP EG_DX_GRP,
						   ENTITY_GROUP EG_TX_GRP,
						   ENTITY_GROUP_ASSIGNMENT EGA_DX_GRP,
						   ENTITY_GROUP_ASSIGNMENT EGA_TX_GRP,
						   ACCOUNT A,
						   ACCOUNT_STATUS_CSB AST,
						   METER M,
						   SERVICE_LOCATION_METER SLM,
						   ACCOUNT_SERVICE_LOCATION ASL,
						   SERVICE_LOCATION SL,
						   ACCOUNT_ESP_CSB        AESP,
						   (SELECT A.ACCOUNT_ID											AS ACCOUNT_ID,
								   NVL(X.BEGIN_DATE, p_BILL_CASE_REC.PERIOD_BEGIN_DATE) AS BEGIN_DATE,
								   NVL(X.END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)		AS END_DATE
							 FROM (SELECT AA.*
								  FROM (SELECT DISTINCT AAS.ACCOUNT_ID			AS ACCOUNT_ID,
											   AAS.ANCILLARY_SERVICE_ID      	AS ANCILLARY_SERVICE_ID,
											   NVL((CASE WHEN C.SWTCH = -1 THEN LAG(CASE WHEN END_DATE = CONSTANTS.HIGH_DATE THEN NULL ELSE END_DATE + 1 END, 1, NULL)
																				OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
														 WHEN C.SWTCH = 0 THEN BEGIN_DATE  /* SWITCH = 0, THE ACTUAL ASSIGNMENT ROW */
														 ELSE NVL(LEAST(END_DATE, CONSTANTS.HIGH_DATE - 1), p_BILL_CASE_REC.PERIOD_END_DATE) + 1
													END), p_BILL_CASE_REC.PERIOD_BEGIN_DATE)   	AS BEGIN_DATE,
											   NVL((CASE WHEN C.SWTCH = -1 THEN BEGIN_DATE-1
														 WHEN C.SWTCH = 0  THEN LEAST(END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)
														 ELSE LEAD(BEGIN_DATE-1, 1, NULL)
															  OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
													END), p_BILL_CASE_REC.PERIOD_END_DATE) 		AS END_DATE
										  FROM ACCOUNT_ANCILLARY_SERVICE     AAS,
											  (SELECT -1 AS SWTCH FROM DUAL
											   UNION ALL SELECT 0 AS SWTCH FROM DUAL
											   UNION ALL SELECT 1 AS SWTCH FROM DUAL
											  ) C
										 WHERE AAS.ANCILLARY_SERVICE_ID(+) = g_MEC_ANCILLARY_SERVICE_ID
										   AND AAS.BEGIN_DATE(+) <= p_BILL_CASE_REC.PERIOD_END_DATE
										   AND NVL(AAS.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
									   ) AA
								 WHERE AA.BEGIN_DATE <= AA.END_DATE) X,
									   ACCOUNT A
							 WHERE A.ACCOUNT_ID = X.ACCOUNT_ID (+)
						   ) AAS_MEC,
						   (SELECT A.ACCOUNT_ID											AS ACCOUNT_ID,
								   NVL(X.BEGIN_DATE, p_BILL_CASE_REC.PERIOD_BEGIN_DATE) AS BEGIN_DATE,
								   NVL(X.END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)		AS END_DATE
							 FROM (SELECT AA.*
								  FROM (SELECT DISTINCT AAS.ACCOUNT_ID			AS ACCOUNT_ID,
											   AAS.ANCILLARY_SERVICE_ID      	AS ANCILLARY_SERVICE_ID,
											   NVL((CASE WHEN C.SWTCH = -1 THEN LAG(CASE WHEN END_DATE = CONSTANTS.HIGH_DATE THEN NULL ELSE END_DATE + 1 END, 1, NULL)
																				OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
														 WHEN C.SWTCH = 0 THEN BEGIN_DATE  /* SWITCH = 0, THE ACTUAL ASSIGNMENT ROW */
														 ELSE NVL(LEAST(END_DATE, CONSTANTS.HIGH_DATE - 1), p_BILL_CASE_REC.PERIOD_END_DATE) + 1
													END), p_BILL_CASE_REC.PERIOD_BEGIN_DATE)   	AS BEGIN_DATE,
											   NVL((CASE WHEN C.SWTCH = -1 THEN BEGIN_DATE-1
														 WHEN C.SWTCH = 0  THEN LEAST(END_DATE, p_BILL_CASE_REC.PERIOD_END_DATE)
														 ELSE LEAD(BEGIN_DATE-1, 1, NULL)
															  OVER (PARTITION BY AAS.ACCOUNT_ID ORDER BY AAS.ACCOUNT_ID, BEGIN_DATE, END_DATE, C.SWTCH)
													END), p_BILL_CASE_REC.PERIOD_END_DATE) 		AS END_DATE
										  FROM ACCOUNT_ANCILLARY_SERVICE     AAS,
											  (SELECT -1 AS SWTCH FROM DUAL
											   UNION ALL SELECT 0 AS SWTCH FROM DUAL
											   UNION ALL SELECT 1 AS SWTCH FROM DUAL
											  ) C
										 WHERE AAS.ANCILLARY_SERVICE_ID(+) = g_MIC_ANCILLARY_SERVICE_ID
										   AND AAS.BEGIN_DATE(+) <= p_BILL_CASE_REC.PERIOD_END_DATE
										   AND NVL(AAS.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
									   ) AA
								 WHERE AA.BEGIN_DATE <= AA.END_DATE) X,
									   ACCOUNT A
							 WHERE A.ACCOUNT_ID = X.ACCOUNT_ID (+)
						   ) AAS_MIC,
						   METER_LOSS_FACTOR MLF,
						   PSE_ESP,
						   PSE
					 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
					   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
					   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
					   -- Product Component relationship
					   AND PC.PRODUCT_ID = P.PRODUCT_ID
					   AND PC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE)
					   AND C.COMPONENT_ID = PC.COMPONENT_ID
				       AND C.CHARGE_TYPE  <> c_COMPONENT_CHARGE_TYPE_MANUAL
					   -- Entity Groups with Group Category 'Distribution Group' for selected Scheme with Domain as Account
					   AND EG_DX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
					   AND EG_DX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_DX_GRP
					   -- Entity Groups with Group Category 'Transmission Group' for selected Scheme with Domain as Account
					   AND EG_TX_GRP.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
					   AND EG_TX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
					   AND EG_TX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_TX_GRP
					   -- 'Distribution Group' Entity Group Assignments for Accounts
					   AND EGA_DX_GRP.ENTITY_GROUP_ID = EG_DX_GRP.ENTITY_GROUP_ID
					   AND EGA_DX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE)
					   -- 'Transmission Group' Entity Group Assignments for Accounts
					   AND EGA_TX_GRP.ENTITY_ID = EGA_DX_GRP.ENTITY_ID
					   AND EGA_TX_GRP.ENTITY_GROUP_ID = EG_TX_GRP.ENTITY_GROUP_ID
					   AND EGA_TX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE)
					   -- Account
					   AND A.ACCOUNT_ID = EGA_TX_GRP.ENTITY_ID
				       AND (p_ACCOUNT_ID IS NULL OR A.ACCOUNT_ID = p_ACCOUNT_ID)
					   AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER
					   -- Account Status
					   AND AST.ACCOUNT_ID = A.ACCOUNT_ID
					   AND AST.STATUS_NAME = 'Active'
					   AND AST.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(AST.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE)
					   -- Account Service Location
					   AND ASL.ACCOUNT_ID = A.ACCOUNT_ID
					   AND ASL.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE)
					   -- Service Location
					   AND SL.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
					   -- Service Location Meter
					   AND SLM.SERVICE_LOCATION_ID = SL.SERVICE_LOCATION_ID
					   AND SLM.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE)
					   -- Meter
					   AND M.METER_ID = SLM.METER_ID
					   -- Account Ancillary Service 'MEC'
					   AND AAS_MEC.ACCOUNT_ID(+) = A.ACCOUNT_ID
					   AND AAS_MEC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE)
					   -- Account Ancillary Service 'MIC'
					   AND AAS_MIC.ACCOUNT_ID(+) = A.ACCOUNT_ID
					   AND AAS_MIC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AAS_MEC.BEGIN_DATE)
					   -- Meter Loss Factor
					   AND MLF.METER_ID = M.METER_ID
					   AND MLF.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(MLF.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE)
					   -- Account ESP
					   AND AESP.ACCOUNT_ID = AST.ACCOUNT_ID
					   AND AESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE), NVL(MLF.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE, MLF.BEGIN_DATE)
					   -- PSE ESP relationships
					   AND PSE_ESP.ESP_ID = AESP.ESP_ID
					   AND PSE_ESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MEC.END_DATE, CONSTANTS.HIGH_DATE), NVL(AAS_MIC.END_DATE, CONSTANTS.HIGH_DATE), NVL(MLF.END_DATE, CONSTANTS.HIGH_DATE), NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE))
					   AND NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE, EGA_TX_GRP.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AAS_MEC.BEGIN_DATE, AAS_MIC.BEGIN_DATE, MLF.BEGIN_DATE, AESP.BEGIN_DATE)
					   -- PSE
					   AND PSE.PSE_ID = PSE_ESP.PSE_ID
				       AND (p_RECIPIENT_PSE_ID IS NULL OR PSE.PSE_ID = p_RECIPIENT_PSE_ID)
				)A
				-- Short-circuiting not required here because IF clause will take care of "Global"
				WHERE NOT EXISTS(
							  SELECT NULL
							  FROM BILL_CASE_SELECTIONS B
							  WHERE B.BILL_CASE_ID = A.BILL_CASE_ID
						  	  AND   p_BILL_CASE_REC.RUN_TYPE = c_RUN_TYPE_PARTIAL_EXCLUDE
  							  AND  ((NVL(B.PSE_ID,  		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.RECIPIENT_PSE_ID = B.PSE_ID))
						  	  AND  ((NVL(B.ACCOUNT_ID, 		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.ACCOUNT_ID = B.ACCOUNT_ID))
						  	  AND  ((NVL(B.PRODUCT_ID, 		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.PRODUCT_ID = B.PRODUCT_ID))
						  	  AND  ((NVL(B.COMPONENT_ID,  	c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.COMPONENT_ID = B.COMPONENT_ID))
				);
		END IF;
END INS_BILL_CASE_TEMP_TUOS;
--------------------------------------------------------------------------------
PROCEDURE INS_BILL_CASE_TEMP_DEFAULT
(
	p_BILL_CASE_REC		IN BILL_CASE%ROWTYPE,
    p_RECIPIENT_PSE_ID IN NUMBER DEFAULT NULL,
    p_ACCOUNT_ID IN NUMBER DEFAULT NULL,
	p_CHARGE_STATE		IN NUMBER DEFAULT RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL
) AS
	v_PROCESS_ID		NUMBER(12);
BEGIN
	v_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
	LOGS.LOG_DEBUG('Populating RUN_BILL_CASE_TEMP for Product Category: ' || p_BILL_CASE_REC.PRODUCT_CATEGORY);

	EXECUTE IMMEDIATE 'TRUNCATE TABLE RUN_BILL_CASE_TEMP';

	-- If this is "Partial - Include" OR "Global", then do EXISTS for Bill Case Selections.
	IF p_BILL_CASE_REC.RUN_TYPE IN (c_RUN_TYPE_GLOBAL, c_RUN_TYPE_PARTIAL_INCLUDE) THEN
		-- Non-TUOS, ELSE part
		INSERT INTO RUN_BILL_CASE_TEMP
			SELECT *
			FROM
				(
				SELECT p_BILL_CASE_REC.BILL_CASE_ID		AS BILL_CASE_ID,
					   v_PROCESS_ID						AS PROCESS_ID,
					   A.ACCOUNT_ID 					AS ACCOUNT_ID,
					   CONSTANTS.NOT_ASSIGNED 			AS METER_ID,
					   CONSTANTS.NOT_ASSIGNED 			AS SERVICE_POINT_ID,
					   TO_CHAR(CONSTANTS.NOT_ASSIGNED) 	AS METER_TYPE,
					   GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
								P.BEGIN_DATE,
								PC.BEGIN_DATE,
								EGA.BEGIN_DATE,
								AST.BEGIN_DATE,
								AESP.BEGIN_DATE,
								PSE_ESP.BEGIN_DATE) 	AS BEGIN_DATE,
					   LEAST(p_BILL_CASE_REC.PERIOD_END_DATE,
							 NVL(P.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PC.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AST.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE)) AS END_DATE,
					   P.PRODUCT_ID 					AS PRODUCT_ID,
					   C.COMPONENT_ID 					AS COMPONENT_ID,
					   NULL 							AS PERIOD_ID,
					   CASE C.CHARGE_TYPE
								WHEN c_COMPONENT_CHARGE_TYPE_TAX THEN
									RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX
								ELSE
									p_CHARGE_STATE
								END						AS CHARGE_STATE,
					   NULL 							AS INTERNAL_QUANTITY,
					   NULL 							AS INTERNAL_RATE,
					   NULL 							AS INTERNAL_AMOUNT,
					   NULL 							AS EXTERNAL_QUANTITY,
					   NULL 							AS EXTERNAL_RATE,
					   NULL 							AS EXTERNAL_AMOUNT,
					   EG.ENTITY_GROUP_ID				AS ENTITY_GROUP_ID1,
					   CONSTANTS.NOT_ASSIGNED			AS ENTITY_GROUP_ID2,
					   AESP.ESP_ID						AS ESP_ID,
					   p_BILL_CASE_REC.SENDER_PSE_ID	AS SENDER_PSE_ID,
					   PSE.PSE_ID						AS RECIPIENT_PSE_ID,
        			   NULL AS CREDIT_REFERENCE_ID
				  FROM PRODUCT P,
					   PRODUCT_COMPONENT PC,
					   COMPONENT C,
					   ENTITY_GROUP EG,
					   ENTITY_GROUP_ASSIGNMENT EGA,
					   ACCOUNT A,
					   ACCOUNT_STATUS_CSB AST,
					   ACCOUNT_ESP_CSB    AESP,
					   PSE_ESP,
					   PSE
				 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
				   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
				   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
				   -- Product Component relationship
				   AND PC.PRODUCT_ID = P.PRODUCT_ID
				   AND PC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE)
				   AND C.COMPONENT_ID = PC.COMPONENT_ID
				   AND C.CHARGE_TYPE  <> c_COMPONENT_CHARGE_TYPE_MANUAL
				   -- Entity Groups for selected Scheme with Domain as Account
				   AND EG.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
				   AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
				   -- Entity Group Assignments for Accounts
				   AND EGA.ENTITY_GROUP_ID = EG.ENTITY_GROUP_ID
				   AND EGA.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE)
				   -- Account
				   AND A.ACCOUNT_ID = EGA.ENTITY_ID
				   AND (p_ACCOUNT_ID IS NULL OR A.ACCOUNT_ID = p_ACCOUNT_ID)
				   AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_ACCOUNT
				   -- Account Status
				   AND AST.ACCOUNT_ID = A.ACCOUNT_ID
				   AND AST.STATUS_NAME = 'Active'
				   AND AST.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AST.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE)
				   -- Account ESP
				   AND AESP.ACCOUNT_ID = AST.ACCOUNT_ID
				   AND AESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE)
				   -- PSE ESP relationships
				   AND PSE_ESP.ESP_ID = AESP.ESP_ID
				   AND PSE_ESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE, AESP.BEGIN_DATE)
				   -- PSE
				   AND PSE.PSE_ID = PSE_ESP.PSE_ID
				   AND (p_RECIPIENT_PSE_ID IS NULL OR PSE.PSE_ID = p_RECIPIENT_PSE_ID)
				UNION ALL
				SELECT p_BILL_CASE_REC.BILL_CASE_ID		AS BILL_CASE_ID,
					   v_PROCESS_ID						AS PROCESS_ID,
					   A.ACCOUNT_ID 					AS ACCOUNT_ID,
					   M.METER_ID 						AS METER_ID,
					   CONSTANTS.NOT_ASSIGNED 			AS SERVICE_POINT_ID,
					   M.METER_TYPE 					AS METER_TYPE,
					   GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
								P.BEGIN_DATE,
								PC.BEGIN_DATE,
								EGA.BEGIN_DATE,
								AST.BEGIN_DATE,
								ASL.BEGIN_DATE,
								SLM.BEGIN_DATE,
								AESP.BEGIN_DATE,
								PSE_ESP.BEGIN_DATE) 	AS BEGIN_DATE,
					   LEAST(p_BILL_CASE_REC.PERIOD_END_DATE,
							 NVL(P.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PC.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AST.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE)) AS HIGH_DATE,
					   P.PRODUCT_ID 					AS PRODUCT_ID,
					   C.COMPONENT_ID 					AS COMPONENT_ID,
					   NULL 							AS PERIOD_ID,
						  CASE C.CHARGE_TYPE
								WHEN c_COMPONENT_CHARGE_TYPE_TAX THEN
									RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX
								ELSE
									p_CHARGE_STATE
								END						AS CHARGE_STATE,
					   NULL 							AS INTERNAL_QUANTITY,
					   NULL 							AS INTERNAL_RATE,
					   NULL 							AS INTERNAL_AMOUNT,
					   NULL 							AS EXTERNAL_QUANTITY,
					   NULL 							AS EXTERNAL_RATE,
					   NULL 							AS EXTERNAL_AMOUNT,
					   EG.ENTITY_GROUP_ID				AS ENTITY_GROUP_ID1,
					   CONSTANTS.NOT_ASSIGNED			AS ENTITY_GROUP_ID2,
					   AESP.ESP_ID						AS ESP_ID,
					   p_BILL_CASE_REC.SENDER_PSE_ID	AS SENDER_PSE_ID,
					   PSE.PSE_ID						AS RECIPIENT_PSE_ID,
        			   NULL AS CREDIT_REFERENCE_ID
				  FROM PRODUCT P,
					   PRODUCT_COMPONENT PC,
					   COMPONENT C,
					   ENTITY_GROUP EG,
					   ENTITY_GROUP_ASSIGNMENT EGA,
					   ACCOUNT A,
					   ACCOUNT_STATUS_CSB AST,
					   METER M,
					   SERVICE_LOCATION_METER SLM,
					   ACCOUNT_SERVICE_LOCATION ASL,
					   SERVICE_LOCATION SL,
					   ACCOUNT_ESP_CSB    AESP,
					   PSE_ESP,
					   PSE
				 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
				   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
				   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
				   -- Product Component relationship
				   AND PC.PRODUCT_ID = P.PRODUCT_ID
				   AND PC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE)
				   AND C.COMPONENT_ID = PC.COMPONENT_ID
				   AND C.CHARGE_TYPE  <> c_COMPONENT_CHARGE_TYPE_MANUAL
				   -- Entity Groups for selected Scheme with Domain as Account
				   AND EG.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
				   AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
				   -- Entity Group Assignments for Accounts
				   AND EGA.ENTITY_GROUP_ID = EG.ENTITY_GROUP_ID
				   AND EGA.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE)
				   -- Account
				   AND A.ACCOUNT_ID = EGA.ENTITY_ID
				   AND (p_ACCOUNT_ID IS NULL OR A.ACCOUNT_ID = p_ACCOUNT_ID)
				   AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER
				   -- Account Status
				   AND AST.ACCOUNT_ID = A.ACCOUNT_ID
				   AND AST.STATUS_NAME = 'Active'
				   AND AST.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AST.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE)
				   -- Account Service Location
				   AND ASL.ACCOUNT_ID = A.ACCOUNT_ID
				   AND ASL.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE)
				   -- Service Location
				   AND SL.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
				   -- Service Location Meter
				   AND SLM.SERVICE_LOCATION_ID = SL.SERVICE_LOCATION_ID
				   AND SLM.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE)
				   -- Meter
				   AND M.METER_ID = SLM.METER_ID
				   -- Account ESP
				   AND AESP.ACCOUNT_ID = AST.ACCOUNT_ID
				   AND AESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE)
				   -- PSE ESP relationships
				   AND PSE_ESP.ESP_ID = AESP.ESP_ID
				   AND PSE_ESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AESP.BEGIN_DATE)
				   -- PSE
				   AND PSE.PSE_ID = PSE_ESP.PSE_ID
				   AND (p_RECIPIENT_PSE_ID IS NULL OR PSE.PSE_ID = p_RECIPIENT_PSE_ID)
				 )A
			-- this short-circuiting is for "Global" case
			WHERE EXISTS(
						  SELECT NULL
						  FROM DUAL
						  WHERE p_BILL_CASE_REC.RUN_TYPE = c_RUN_TYPE_GLOBAL
						)
			-- this is for "Partial - Include" case
			OR EXISTS  (
						  SELECT NULL
						  FROM BILL_CASE_SELECTIONS B
						  WHERE B.BILL_CASE_ID = A.BILL_CASE_ID
						  AND   p_BILL_CASE_REC.RUN_TYPE = c_RUN_TYPE_PARTIAL_INCLUDE
						  AND  ((NVL(B.PSE_ID,  		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.RECIPIENT_PSE_ID = B.PSE_ID))
						  AND  ((NVL(B.ACCOUNT_ID, 		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.ACCOUNT_ID = B.ACCOUNT_ID))
						  AND  ((NVL(B.PRODUCT_ID, 		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.PRODUCT_ID = B.PRODUCT_ID))
						  AND  ((NVL(B.COMPONENT_ID,  	c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.COMPONENT_ID = B.COMPONENT_ID))
			);
    	--  Else this is "Partial - Exclude" and so do NOT EXISTS for Bill Case Selections.
		ELSIF p_BILL_CASE_REC.RUN_TYPE = c_RUN_TYPE_PARTIAL_EXCLUDE THEN
			INSERT INTO RUN_BILL_CASE_TEMP
			SELECT *
			FROM
				(
				SELECT p_BILL_CASE_REC.BILL_CASE_ID		AS BILL_CASE_ID,
					   v_PROCESS_ID						AS PROCESS_ID,
					   A.ACCOUNT_ID 					AS ACCOUNT_ID,
					   CONSTANTS.NOT_ASSIGNED 			AS METER_ID,
					   CONSTANTS.NOT_ASSIGNED 			AS SERVICE_POINT_ID,
					   TO_CHAR(CONSTANTS.NOT_ASSIGNED) 	AS METER_TYPE,
					   GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
								P.BEGIN_DATE,
								PC.BEGIN_DATE,
								EGA.BEGIN_DATE,
								AST.BEGIN_DATE,
								AESP.BEGIN_DATE,
								PSE_ESP.BEGIN_DATE) 	AS BEGIN_DATE,
					   LEAST(p_BILL_CASE_REC.PERIOD_END_DATE,
							 NVL(P.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PC.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AST.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE)) AS END_DATE,
					   P.PRODUCT_ID 					AS PRODUCT_ID,
					   C.COMPONENT_ID 					AS COMPONENT_ID,
					   NULL 							AS PERIOD_ID,
						CASE C.CHARGE_TYPE
							WHEN c_COMPONENT_CHARGE_TYPE_TAX THEN
								RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX
							ELSE
								p_CHARGE_STATE
							END							AS CHARGE_STATE,
					   NULL 							AS INTERNAL_QUANTITY,
					   NULL 							AS INTERNAL_RATE,
					   NULL 							AS INTERNAL_AMOUNT,
					   NULL 							AS EXTERNAL_QUANTITY,
					   NULL 							AS EXTERNAL_RATE,
					   NULL 							AS EXTERNAL_AMOUNT,
					   EG.ENTITY_GROUP_ID				AS ENTITY_GROUP_ID1,
					   CONSTANTS.NOT_ASSIGNED			AS ENTITY_GROUP_ID2,
					   AESP.ESP_ID						AS ESP_ID,
					   p_BILL_CASE_REC.SENDER_PSE_ID	AS SENDER_PSE_ID,
					   PSE.PSE_ID						AS RECIPIENT_PSE_ID,
        			   NULL AS CREDIT_REFERENCE_ID
				  FROM PRODUCT P,
					   PRODUCT_COMPONENT PC,
					   COMPONENT C,
					   ENTITY_GROUP EG,
					   ENTITY_GROUP_ASSIGNMENT EGA,
					   ACCOUNT A,
					   ACCOUNT_STATUS_CSB AST,
					   ACCOUNT_ESP_CSB    AESP,
					   PSE_ESP,
					   PSE
				 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
				   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
				   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
				   -- Product Component relationship
				   AND PC.PRODUCT_ID = P.PRODUCT_ID
				   AND PC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE)
				   AND C.COMPONENT_ID = PC.COMPONENT_ID
				   AND C.CHARGE_TYPE  <> c_COMPONENT_CHARGE_TYPE_MANUAL
				   -- Entity Groups for selected Scheme with Domain as Account
				   AND EG.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
				   AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
				   -- Entity Group Assignments for Accounts
				   AND EGA.ENTITY_GROUP_ID = EG.ENTITY_GROUP_ID
				   AND EGA.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE)
				   -- Account
				   AND A.ACCOUNT_ID = EGA.ENTITY_ID
				   AND (p_ACCOUNT_ID IS NULL OR A.ACCOUNT_ID = p_ACCOUNT_ID)
				   AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_ACCOUNT
				   -- Account Status
				   AND AST.ACCOUNT_ID = A.ACCOUNT_ID
				   AND AST.STATUS_NAME = 'Active'
				   AND AST.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AST.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE)
				   -- Account ESP
				   AND AESP.ACCOUNT_ID = AST.ACCOUNT_ID
				   AND AESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE)
				   -- PSE ESP relationships
				   AND PSE_ESP.ESP_ID = AESP.ESP_ID
				   AND PSE_ESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE, AESP.BEGIN_DATE)
				   -- PSE
				   AND PSE.PSE_ID = PSE_ESP.PSE_ID
				   AND (p_RECIPIENT_PSE_ID IS NULL OR PSE.PSE_ID = p_RECIPIENT_PSE_ID)
				UNION ALL
				SELECT p_BILL_CASE_REC.BILL_CASE_ID		AS BILL_CASE_ID,
					   v_PROCESS_ID						AS PROCESS_ID,
					   A.ACCOUNT_ID 					AS ACCOUNT_ID,
					   M.METER_ID 						AS METER_ID,
					   CONSTANTS.NOT_ASSIGNED 			AS SERVICE_POINT_ID,
					   M.METER_TYPE 					AS METER_TYPE,
					   GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
								P.BEGIN_DATE,
								PC.BEGIN_DATE,
								EGA.BEGIN_DATE,
								AST.BEGIN_DATE,
								ASL.BEGIN_DATE,
								SLM.BEGIN_DATE,
								AESP.BEGIN_DATE,
								PSE_ESP.BEGIN_DATE) 	AS BEGIN_DATE,
					   LEAST(p_BILL_CASE_REC.PERIOD_END_DATE,
							 NVL(P.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PC.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AST.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE),
							 NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE)) AS HIGH_DATE,
					   P.PRODUCT_ID 					AS PRODUCT_ID,
					   C.COMPONENT_ID 					AS COMPONENT_ID,
					   NULL 							AS PERIOD_ID,
						CASE C.CHARGE_TYPE
							WHEN c_COMPONENT_CHARGE_TYPE_TAX THEN
								RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX
							ELSE
								p_CHARGE_STATE
							END							AS CHARGE_STATE,
					   NULL 							AS INTERNAL_QUANTITY,
					   NULL 							AS INTERNAL_RATE,
					   NULL 							AS INTERNAL_AMOUNT,
					   NULL 							AS EXTERNAL_QUANTITY,
					   NULL 							AS EXTERNAL_RATE,
					   NULL 							AS EXTERNAL_AMOUNT,
					   EG.ENTITY_GROUP_ID				AS ENTITY_GROUP_ID1,
					   CONSTANTS.NOT_ASSIGNED			AS ENTITY_GROUP_ID2,
					   AESP.ESP_ID						AS ESP_ID,
					   p_BILL_CASE_REC.SENDER_PSE_ID	AS SENDER_PSE_ID,
					   PSE.PSE_ID						AS RECIPIENT_PSE_ID,
        			   NULL AS CREDIT_REFERENCE_ID
				  FROM PRODUCT P,
					   PRODUCT_COMPONENT PC,
					   COMPONENT C,
					   ENTITY_GROUP EG,
					   ENTITY_GROUP_ASSIGNMENT EGA,
					   ACCOUNT A,
					   ACCOUNT_STATUS_CSB AST,
					   METER M,
					   SERVICE_LOCATION_METER SLM,
					   ACCOUNT_SERVICE_LOCATION ASL,
					   SERVICE_LOCATION SL,
					   ACCOUNT_ESP_CSB    AESP,
					   PSE_ESP,
					   PSE
				 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
				   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
				   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
				   -- Product Component relationship
				   AND PC.PRODUCT_ID = P.PRODUCT_ID
				   AND PC.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE)
				   AND C.COMPONENT_ID = PC.COMPONENT_ID
				   AND C.CHARGE_TYPE  <> c_COMPONENT_CHARGE_TYPE_MANUAL
				   -- Entity Groups for selected Scheme with Domain as Account
				   AND EG.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
				   AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
				   -- Entity Group Assignments for Accounts
				   AND EGA.ENTITY_GROUP_ID = EG.ENTITY_GROUP_ID
				   AND EGA.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE)
				   -- Account
				   AND A.ACCOUNT_ID = EGA.ENTITY_ID
				   AND (p_ACCOUNT_ID IS NULL OR A.ACCOUNT_ID = p_ACCOUNT_ID)
				   AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER
				   -- Account Status
				   AND AST.ACCOUNT_ID = A.ACCOUNT_ID
				   AND AST.STATUS_NAME = 'Active'
				   AND AST.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AST.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE)
				   -- Account Service Location
				   AND ASL.ACCOUNT_ID = A.ACCOUNT_ID
				   AND ASL.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE)
				   -- Service Location
				   AND SL.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
				   -- Service Location Meter
				   AND SLM.SERVICE_LOCATION_ID = SL.SERVICE_LOCATION_ID
				   AND SLM.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE)
				   -- Meter
				   AND M.METER_ID = SLM.METER_ID
				   -- Account ESP
				   AND AESP.ACCOUNT_ID = AST.ACCOUNT_ID
				   AND AESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE)
				   -- PSE ESP relationships
				   AND PSE_ESP.ESP_ID = AESP.ESP_ID
				   AND PSE_ESP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(PC.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE), NVL(AST.END_DATE, CONSTANTS.HIGH_DATE), NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE), NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE), NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE))
				   AND NVL(PSE_ESP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, PC.BEGIN_DATE, EGA.BEGIN_DATE, AST.BEGIN_DATE, ASL.BEGIN_DATE, SLM.BEGIN_DATE, AESP.BEGIN_DATE)
				   -- PSE
				   AND PSE.PSE_ID = PSE_ESP.PSE_ID
				   AND (p_RECIPIENT_PSE_ID IS NULL OR PSE.PSE_ID = p_RECIPIENT_PSE_ID)
				 )A
			-- Short-circuiting not required here because IF clause will take care of "Global"
			WHERE NOT EXISTS(
						  SELECT NULL
						  FROM BILL_CASE_SELECTIONS B
						  WHERE B.BILL_CASE_ID = A.BILL_CASE_ID
						  AND   p_BILL_CASE_REC.RUN_TYPE = c_RUN_TYPE_PARTIAL_EXCLUDE
						  AND  ((NVL(B.PSE_ID,  		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.RECIPIENT_PSE_ID = B.PSE_ID))
						  AND  ((NVL(B.ACCOUNT_ID, 		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.ACCOUNT_ID = B.ACCOUNT_ID))
						  AND  ((NVL(B.PRODUCT_ID, 		c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.PRODUCT_ID = B.PRODUCT_ID))
						  AND  ((NVL(B.COMPONENT_ID,  	c_NULL_SELECTION_ID) = c_NULL_SELECTION_ID) OR (A.COMPONENT_ID = B.COMPONENT_ID))
			);
		END IF;
END INS_BILL_CASE_TEMP_DEFAULT;
--------------------------------------------------------------------------------
PROCEDURE INS_BILL_CASE_TEMP_RESETTLE
(
	p_BILL_CASE_REC		IN BILL_CASE%ROWTYPE,
	p_CHARGE_STATE		IN NUMBER DEFAULT RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLATION
) AS
	v_PROCESS_ID		NUMBER(12);
BEGIN
  v_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;

  /**uses the current information for new bill case from records in the RUN_BILL_CASE_TEMP to identify old charges to create credits with
  * 1. For a given account we look at the JOIN between the RETAIL_INVOICE_LINE, RETAIL_INVOICE, BILL_CASE, BILL_CASE_INVOICE, and RETAIL_INVOICE_LINE_COMPONENT
  *    tables to identify if there is there is existing charges for an old bill case that need to be marked as credits for this account using the same date range as  the new bill case
  * 2. Join the information from the RUN_BILL_CASE_TEMP to the result of the previous statement to use the account and time frames to grab the appropriate bill case
  * 3. applies a credit to each account/entity for each resettlement. Uses the previous amount and updates the credit flag (CHARGE_STATE)  to show that this is a credit and not a charge.    -- Results to be stored in RUN_BILL_CASE_TEMP tables to be ultimately inserted into RETAIL_INVOICE_LINE_COMPONENT further down the
  * 4. process for the credit lines, these are inserted in the Retail_settlement package. We did not have to make change to that
  **/

  INSERT INTO RUN_BILL_CASE_TEMP
  (BILL_CASE_ID,
   PROCESS_ID,
   ACCOUNT_ID,
   METER_ID,
   SERVICE_POINT_ID,
   METER_TYPE,
   BEGIN_DATE,
   END_DATE,
   PRODUCT_ID,
   COMPONENT_ID,
   PERIOD_ID,
   CHARGE_STATE,
   INTERNAL_QUANTITY,
   INTERNAL_RATE,
   INTERNAL_AMOUNT,
   EXTERNAL_QUANTITY,
   EXTERNAL_RATE,
   EXTERNAL_AMOUNT,
   ENTITY_GROUP_ID1,
   ENTITY_GROUP_ID2,
   ESP_ID,
   SENDER_PSE_ID,
   RECIPIENT_PSE_ID,
   CREDIT_REFERENCE_ID
  )
  SELECT BILL_CASE_ID,
		 v_PROCESS_ID,
		 ACCOUNT_ID,
		 METER_ID,
		 SERVICE_POINT_ID,
		 METER_TYPE,
		 BEGIN_DATE,
		 END_DATE,
		 PRODUCT_ID,
		 COMPONENT_ID,
		 PERIOD_ID,
		 CASE
		 	 WHEN CHARGE_STATE = RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX THEN
				 RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLED_TAX
			 WHEN CHARGE_STATE = RETAIL_SETTLEMENT.c_CHARGE_STATE_MANUAL THEN
				 RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCEL_MANUAL
          	 ELSE
			 	 p_CHARGE_STATE
     		 END AS CHARGE_STATE,
		 INTERNAL_QUANTITY,
		 INTERNAL_RATE,
		 INTERNAL_AMOUNT,
		 EXTERNAL_QUANTITY,
		 EXTERNAL_RATE,
		 EXTERNAL_AMOUNT,
		 CONSTANTS.NOT_ASSIGNED,
		 CONSTANTS.NOT_ASSIGNED,
		 ESP_ID,
		 SENDER_PSE_ID,
		 RECIPIENT_PSE_ID,
   		 CREDIT_REFERENCE_ID
  FROM (SELECT MAX(BC.APPROVAL_DATE) OVER (PARTITION BY RIL.ACCOUNT_ID, BC.SENDER_PSE_ID) MAX_APPROVAL_DATE, -- This grabs the maximum APPROVAL date for an account for associated records
			   BC.APPROVAL_DATE,
			   p_BILL_CASE_REC.BILL_CASE_ID,
			   RIL.ACCOUNT_ID,
			   RIL.METER_ID,
			   RIL.SERVICE_POINT_ID,
			   RIL.METER_TYPE,
			   RILC.BEGIN_DATE,
			   RILC.END_DATE,
			   RILC.PRODUCT_ID,
			   RILC.COMPONENT_ID,
			   RILC.PERIOD_ID,
			   RILC.INTERNAL_QUANTITY,
			   RILC.INTERNAL_RATE,
         RILC.CHARGE_STATE,
			   0 - RILC.INTERNAL_AMOUNT	AS INTERNAL_AMOUNT,
			   NULL	AS EXTERNAL_QUANTITY,
			   NULL AS EXTERNAL_RATE,
			   NULL	AS EXTERNAL_AMOUNT,
			   CONSTANTS.NOT_ASSIGNED	AS ESP_ID,
			   p_BILL_CASE_REC.SENDER_PSE_ID AS SENDER_PSE_ID,
			   RI.RECIPIENT_PSE_ID,
      		   RILC.RETAIL_INVOICE_LINE_COMP_ID AS CREDIT_REFERENCE_ID
		  FROM BILL_CASE BC,
			   BILL_CASE_INVOICE BCI,
			   RETAIL_INVOICE RI,
			   RETAIL_INVOICE_LINE RIL,
			   RETAIL_INVOICE_LINE_COMPONENT RILC,
          --This is the driving table. We are looking for accounts that are in the new bill case they
          --can be pulled from the RUN_BILL_CASE_TEMP table
			   (SELECT DISTINCT RBCT1.ACCOUNT_ID
				  FROM RUN_BILL_CASE_TEMP RBCT1
			     WHERE p_BILL_CASE_REC.BILL_CASE_ID = RBCT1.BILL_CASE_ID
			   )RBCT
		 WHERE BC.BILL_CASE_ID			= BCI.BILL_CASE_ID
           AND NVL(BC.APPROVAL_STATE,c_STATUS_UNAPPROVED) = c_STATUS_APPROVED 
		   AND BCI.RETAIL_INVOICE_ID	= RI.RETAIL_INVOICE_ID
		   AND RI.RETAIL_INVOICE_ID		= RIL.RETAIL_INVOICE_ID
		   AND RIL.RETAIL_INVOICE_LINE_ID = RILC.RETAIL_INVOICE_LINE_ID
		   AND RIL.ACCOUNT_ID			= RBCT.ACCOUNT_ID
		   AND BC.PRODUCT_CATEGORY		= p_BILL_CASE_REC.PRODUCT_CATEGORY
		   AND BC.SENDER_PSE_ID			= p_BILL_CASE_REC.SENDER_PSE_ID
       --Eirgrid has custom code that splits out the invoice by month
       --In core invoice date and bill case date should be the same
		   AND RILC.BEGIN_DATE		>= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
		   AND RILC.END_DATE 		<= p_BILL_CASE_REC.PERIOD_END_DATE
		   AND RILC.CHARGE_STATE IN (RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL, RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX, RETAIL_SETTLEMENT.c_CHARGE_STATE_MANUAL)
	  ) WHERE APPROVAL_DATE = MAX_APPROVAL_DATE; -- filter out any record that is not the most recent approval date


END INS_BILL_CASE_TEMP_RESETTLE;
--------------------------------------------------------------------------------
PROCEDURE CREATE_RETAIL_INVOICE
(
	p_BILL_CASE_REC			IN BILL_CASE%ROWTYPE,
	p_RECIPIENT_PSE_ID		IN NUMBER,
	p_TIME_ZONE				IN VARCHAR,
	p_RETAIL_INVOICE_REC   OUT RETAIL_INVOICE%ROWTYPE
) AS
	v_RECIPIENT_PSE_EXT_IDENT	PSE.PSE_EXTERNAL_IDENTIFIER%TYPE := EI.GET_ENTITY_IDENTIFIER(EC.ED_PSE, p_RECIPIENT_PSE_ID);
	v_INVOICE_NUMBER			RETAIL_INVOICE.INVOICE_NUMBER%TYPE;
BEGIN
	v_INVOICE_NUMBER := p_BILL_CASE_REC.BILL_CASE_NAME || '_' || v_RECIPIENT_PSE_EXT_IDENT;

	LOGS.LOG_DEBUG('Creating Retail Invoice for Bill Case: ' || p_BILL_CASE_REC.BILL_CASE_NAME || ' with Invoice Number: ' || v_INVOICE_NUMBER);

	p_RETAIL_INVOICE_REC := RETAIL_SETTLEMENT.NEW_RETAIL_INVOICE(p_SENDER_PSE_ID 		=> p_BILL_CASE_REC.SENDER_PSE_ID,
																 p_RECIPIENT_PSE_ID 	=> p_RECIPIENT_PSE_ID,
																 p_INVOICE_NUMBER 		=> v_INVOICE_NUMBER,
																 p_INVOICE_DATE 		=> p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
																 p_PERIOD_BEGIN_DATE 	=> p_BILL_CASE_REC.PERIOD_BEGIN_DATE,
																 p_PERIOD_END_DATE 		=> p_BILL_CASE_REC.PERIOD_END_DATE,
																 p_TIME_ZONE 			=> p_TIME_ZONE
																);
END CREATE_RETAIL_INVOICE;
--------------------------------------------------------------------------------
PROCEDURE INS_BILL_CASE_INVOICE
(
	p_BILL_CASE_ID		IN NUMBER,
	p_RETAIL_INVOICE_ID IN NUMBER
) AS
BEGIN
	INSERT INTO BILL_CASE_INVOICE
		(
		BILL_CASE_ID,
		RETAIL_INVOICE_ID
		)
	VALUES
		(
		p_BILL_CASE_ID,
		p_RETAIL_INVOICE_ID
		);
END INS_BILL_CASE_INVOICE;
--------------------------------------------------------------------------------
PROCEDURE DEL_EXISTING_RETAIL_INVOICES(p_BILL_CASE_REC IN BILL_CASE%ROWTYPE) AS
	PRAGMA AUTONOMOUS_TRANSACTION;
	v_INVOICE_EXISTS	NUMBER(1);
BEGIN
	SELECT NVL(MIN(1),0)
	  INTO v_INVOICE_EXISTS
	  FROM BILL_CASE_INVOICE BCI
	 WHERE BCI.BILL_CASE_ID = p_BILL_CASE_REC.BILL_CASE_ID;

	LOGS.LOG_DEBUG('Invoice Exists: ' || v_INVOICE_EXISTS);

	IF v_INVOICE_EXISTS = 1 THEN
		LOGS.LOG_EVENT(p_EVENT_LEVEL => LOGS.c_LEVEL_INFO, -- Changed from NOTICE to INFO in wake of review
					   p_EVENT_TEXT => 'Deleting existing bill case result set.'
					  );
		FOR v_CURSOR IN (SELECT BCI.RETAIL_INVOICE_ID
						   FROM BILL_CASE_INVOICE BCI
						  WHERE BCI.BILL_CASE_ID = p_BILL_CASE_REC.BILL_CASE_ID
						) LOOP
			DELETE FROM RETAIL_INVOICE RC
			 WHERE RC.RETAIL_INVOICE_ID = v_CURSOR.RETAIL_INVOICE_ID;
		END LOOP;

		DELETE FROM BILL_CASE_INVOICE BCI
		WHERE BCI.BILL_CASE_ID = p_BILL_CASE_REC.BILL_CASE_ID;
	END IF;

	COMMIT;
END DEL_EXISTING_RETAIL_INVOICES;
--------------------------------------------------------------------------------
PROCEDURE DEL_EXISTING_RI_FOR_RERUN
(
    p_BILL_CASE_ID IN NUMBER,
    p_RECIPIENT_PSE_ID IN NUMBER,
    p_ACCOUNT_ID IN NUMBER
) AS
    v_RETAIL_INVOICE_ID RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE;
	v_RERUN_LOG_MSG VARCHAR2(500);
BEGIN
	SELECT RI.RETAIL_INVOICE_ID
	INTO v_RETAIL_INVOICE_ID
	FROM RETAIL_INVOICE RI
	WHERE EXISTS (
		  SELECT 1
		  FROM BILL_CASE_INVOICE BCI
		  WHERE BCI.BILL_CASE_ID = p_BILL_CASE_ID
			AND BCI.RETAIL_INVOICE_ID = RI.RETAIL_INVOICE_ID
		)
	  AND RI.RECIPIENT_PSE_ID = p_RECIPIENT_PSE_ID;

	IF v_RETAIL_INVOICE_ID IS NOT NULL THEN
		v_RERUN_LOG_MSG := 'Deleting existing Bill Case result set for Customer ' ||
		                   EI.GET_ENTITY_NAME(EC.ED_PSE, p_RECIPIENT_PSE_ID);
		IF p_ACCOUNT_ID IS NOT NULL THEN
		    v_RERUN_LOG_MSG := v_RERUN_LOG_MSG || ', Account ' || EI.GET_ENTITY_NAME(EC.ED_ACCOUNT, p_ACCOUNT_ID);
	    END IF;
	    LOGS.LOG_INFO(v_RERUN_LOG_MSG);

	    IF p_ACCOUNT_ID IS NULL THEN
			DELETE
			FROM RETAIL_INVOICE RI
			WHERE RI.RETAIL_INVOICE_ID = v_RETAIL_INVOICE_ID;

			DELETE
			FROM BILL_CASE_INVOICE BCI
			WHERE BCI.BILL_CASE_ID = p_BILL_CASE_ID
			  AND BCI.RETAIL_INVOICE_ID = v_RETAIL_INVOICE_ID;
		ELSE
			DELETE
			FROM RETAIL_INVOICE_LINE RIL
			WHERE RIL.RETAIL_INVOICE_ID = v_RETAIL_INVOICE_ID
			  AND RIL.ACCOUNT_ID = p_ACCOUNT_ID;
		END IF;
	END IF;

    COMMIT;
END DEL_EXISTING_RI_FOR_RERUN;
--------------------------------------------------------------------------------
PROCEDURE GENERATE_BILL_CASE_RESULTS
(
	p_BILL_CASE_REC	IN BILL_CASE%ROWTYPE,
	p_TIME_ZONE		IN VARCHAR2,
	p_CREATE_INVOICE IN BOOLEAN
) AS
	v_RETAIL_INVOICE_REC			RETAIL_INVOICE%ROWTYPE;
	v_RETAIL_SET_CURSOR				RETAIL_SETTLEMENT.RETAIL_SETTLEMENT_INPUT_CURSOR;
	v_PROCESS_ID					PROCESS_LOG.PROCESS_ID%TYPE := LOGS.CURRENT_PROCESS_ID;
	v_RETAIL_INVOICE_ID RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE;
BEGIN
	LOGS.LOG_DEBUG('Generating Bill Case Result Set.');

	FOR v_RBCT_RECS IN (SELECT DISTINCT RECIPIENT_PSE_ID
						  FROM RUN_BILL_CASE_TEMP RBCT
						 WHERE RBCT.BILL_CASE_ID = p_BILL_CASE_REC.BILL_CASE_ID
						   AND RBCT.PROCESS_ID = v_PROCESS_ID
						 ORDER BY RBCT.RECIPIENT_PSE_ID
					   ) LOOP

		IF p_CREATE_INVOICE = TRUE THEN
		CREATE_RETAIL_INVOICE(p_BILL_CASE_REC,
							  v_RBCT_RECS.RECIPIENT_PSE_ID,
							  p_TIME_ZONE,
							  v_RETAIL_INVOICE_REC
							 );

		INS_BILL_CASE_INVOICE(p_BILL_CASE_REC.BILL_CASE_ID,
							  v_RETAIL_INVOICE_REC.RETAIL_INVOICE_ID
							 );

            v_RETAIL_INVOICE_ID := v_RETAIL_INVOICE_REC.RETAIL_INVOICE_ID;
		ELSE
			SELECT RI.RETAIL_INVOICE_ID
			INTO v_RETAIL_INVOICE_ID
			FROM BILL_CASE_INVOICE BCI,
			   RETAIL_INVOICE RI
			WHERE BCI.BILL_CASE_ID = p_BILL_CASE_REC.BILL_CASE_ID
			AND BCI.RETAIL_INVOICE_ID = RI.RETAIL_INVOICE_ID
			AND RI.RECIPIENT_PSE_ID = v_RBCT_RECS.RECIPIENT_PSE_ID;
        END IF;

		OPEN v_RETAIL_SET_CURSOR FOR
			SELECT RBCT.ACCOUNT_ID,
				   RBCT.METER_ID,
				   RBCT.SERVICE_POINT_ID,
				   RBCT.METER_TYPE,
				   RBCT.BEGIN_DATE,
				   RBCT.END_DATE,
				   RBCT.PRODUCT_ID,
				   RBCT.COMPONENT_ID,
				   RBCT.PERIOD_ID,
				   RBCT.CHARGE_STATE,
				   RBCT.INTERNAL_QUANTITY,
				   RBCT.INTERNAL_RATE,
				   RBCT.INTERNAL_AMOUNT,
				   RBCT.EXTERNAL_QUANTITY,
				   RBCT.EXTERNAL_RATE,
				   RBCT.EXTERNAL_AMOUNT,
       			   RBCT.CREDIT_REFERENCE_ID,
                   RBCT.ESP_ID
			  FROM RUN_BILL_CASE_TEMP RBCT
			 WHERE RBCT.BILL_CASE_ID = p_BILL_CASE_REC.BILL_CASE_ID
			   AND RBCT.PROCESS_ID = v_PROCESS_ID
			   AND RBCT.RECIPIENT_PSE_ID = v_RBCT_RECS.RECIPIENT_PSE_ID
			 ORDER BY RBCT.ACCOUNT_ID ASC, RBCT.METER_ID ASC, RBCT.SERVICE_POINT_ID ASC, RBCT.ESP_ID DESC, RBCT.BEGIN_DATE ASC, RBCT.CHARGE_STATE ASC;

		LOGS.LOG_DEBUG('Running Retail Settlement for Bill Case: ' || p_BILL_CASE_REC.BILL_CASE_NAME || ' Recipient PSE ID: ' || v_RBCT_RECS.RECIPIENT_PSE_ID);

		RETAIL_SETTLEMENT.RUN_RETAIL_SETTLEMENT(p_RETAIL_INVOICE_ID 		=> v_RETAIL_INVOICE_ID,
												p_RETAIL_SETTLEMENT_INPUTS 	=> v_RETAIL_SET_CURSOR,
												p_STATEMENT_TYPE_ID			=> p_BILL_CASE_REC.STATEMENT_TYPE_ID,
												p_TIME_ZONE					=> p_TIME_ZONE,
												p_SERVICE_CODE				=> CONSTANTS.CODE_ACTUAL,
												p_RETAIN_INVOICE_LINES      => (p_CREATE_INVOICE=FALSE)
											   );
	END LOOP;
END GENERATE_BILL_CASE_RESULTS;
--------------------------------------------------------------------------------
FUNCTION CHECK_PROD_ACCTS_EXIST(p_BILL_CASE_REC	IN BILL_CASE%ROWTYPE) RETURN NUMBER AS
	v_EXISTS	NUMBER(1) := 1;
BEGIN
	SELECT COUNT(1)
	  INTO v_EXISTS
	  FROM PRODUCT P
	 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
	   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
	   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
	   AND ROWNUM <= 1;
	IF v_EXISTS = 0 THEN
		LOGS.LOG_ERROR(p_EVENT_TEXT => p_BILL_CASE_REC.PRODUCT_CATEGORY || ' scheme: no products with category ' || p_BILL_CASE_REC.PRODUCT_CATEGORY);
	END IF;

	IF UPPER(p_BILL_CASE_REC.PRODUCT_CATEGORY) = UPPER(c_PRODUCT_CATEGORY_TUOS) THEN
		SELECT COUNT(1)
		  INTO v_EXISTS
		  FROM PRODUCT P,
			   ENTITY_GROUP EG_DX_GRP,
			   ENTITY_GROUP EG_TX_GRP,
			   ENTITY_GROUP_ASSIGNMENT EGA_DX_GRP,
			   ENTITY_GROUP_ASSIGNMENT EGA_TX_GRP
		 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
		   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
		   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
		   -- Entity Groups with Group Category 'Distribution Group' for selected Scheme with Domain as Account
		   AND EG_DX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
		   AND EG_DX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_DX_GRP
		   -- Entity Groups with Group Category 'Transmission Group' for selected Scheme with Domain as Account
		   AND EG_TX_GRP.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
		   AND EG_TX_GRP.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
		   AND EG_TX_GRP.GROUP_CATEGORY = c_GROUP_CATEGORY_TX_GRP
		   -- 'Distribution Group' Entity Group Assignments for Accounts
		   AND EGA_DX_GRP.ENTITY_GROUP_ID = EG_DX_GRP.ENTITY_GROUP_ID
		   AND EGA_DX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE))
		   AND NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE)
		   -- 'Transmission Group' Entity Group Assignments for Accounts
		   AND EGA_DX_GRP.ENTITY_ID = EGA_TX_GRP.ENTITY_ID
		   AND EGA_TX_GRP.ENTITY_GROUP_ID = EG_TX_GRP.ENTITY_GROUP_ID
		   AND EGA_TX_GRP.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE), NVL(EGA_DX_GRP.END_DATE, CONSTANTS.HIGH_DATE))
		   AND NVL(EGA_TX_GRP.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE, EGA_DX_GRP.BEGIN_DATE)
		   AND ROWNUM <= 1;
	ELSE
		SELECT COUNT(1)
		  INTO v_EXISTS
		  FROM PRODUCT P,
			   ENTITY_GROUP EG,
			   ENTITY_GROUP_ASSIGNMENT EGA
		 WHERE P.PRODUCT_CATEGORY = p_BILL_CASE_REC.PRODUCT_CATEGORY
		   AND P.BEGIN_DATE <= p_BILL_CASE_REC.PERIOD_END_DATE
		   AND NVL(P.END_DATE, CONSTANTS.HIGH_DATE) >= p_BILL_CASE_REC.PERIOD_BEGIN_DATE
		   -- Entity Groups for selected Scheme with Domain as Account
		   AND EG.ENTITY_GROUP_ALIAS = P.PRODUCT_EXTERNAL_IDENTIFIER
		   AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
		   -- Entity Group Assignmennts for Accounts
		   AND EGA.ENTITY_GROUP_ID = EG.ENTITY_GROUP_ID
		   AND EGA.BEGIN_DATE <= LEAST(p_BILL_CASE_REC.PERIOD_END_DATE, NVL(P.END_DATE, CONSTANTS.HIGH_DATE))
		   AND NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE) >= GREATEST(p_BILL_CASE_REC.PERIOD_BEGIN_DATE, P.BEGIN_DATE)
		   AND ROWNUM <= 1;
	END IF;
	IF v_EXISTS = 0 THEN
		LOGS.LOG_ERROR(p_EVENT_TEXT => p_BILL_CASE_REC.PRODUCT_CATEGORY || ' scheme: no accounts for products with category ' || p_BILL_CASE_REC.PRODUCT_CATEGORY);
	END IF;

	RETURN v_EXISTS;
END CHECK_PROD_ACCTS_EXIST;
--------------------------------------------------------------------------------
PROCEDURE GET_BILL_CASE_REC
(
	p_BILL_CASE_ID 	IN BILL_CASE.BILL_CASE_ID%TYPE,
	p_BILL_CASE_REC IN OUT NOCOPY BILL_CASE%ROWTYPE
) AS
BEGIN
	SELECT BC.*
	  INTO p_BILL_CASE_REC
	  FROM BILL_CASE BC
	 WHERE BC.BILL_CASE_ID = p_BILL_CASE_ID;
END GET_BILL_CASE_REC;
--------------------------------------------------------------------------------
FUNCTION VALIDATE_FOR_RERUN
(
    p_BILL_CASE_ID IN NUMBER,
    p_RECIPIENT_PSE_ID IN NUMBER,
    p_ACCOUNT_ID IN NUMBER
) RETURN BOOLEAN AS
    v_RETAIL_INVOICE_COUNT NUMBER;
BEGIN
    -- validate required parameters are not NULL
	IF p_BILL_CASE_ID IS NULL THEN
	    LOGS.LOG_WARN('p_BILL_CASE_ID is required.');
		RETURN FALSE;
	END IF;
    IF p_RECIPIENT_PSE_ID IS NULL THEN
        LOGS.LOG_WARN('p_RECIPIENT_PSE_ID is required.');
		RETURN FALSE;
    END IF;

    -- validate retail invoice
    SELECT COUNT(1)
    INTO v_RETAIL_INVOICE_COUNT
    FROM BILL_CASE_INVOICE BCI,
         RETAIL_INVOICE RI
    WHERE BCI.BILL_CASE_ID = p_BILL_CASE_ID
      AND BCI.RETAIL_INVOICE_ID = RI.RETAIL_INVOICE_ID
      AND RI.RECIPIENT_PSE_ID = p_RECIPIENT_PSE_ID;

    IF v_RETAIL_INVOICE_COUNT = 0 THEN
        LOGS.LOG_WARN('No existing Retail Invoice found for Customer.');
		RETURN FALSE;
    END IF;

    IF p_ACCOUNT_ID IS NOT NULL THEN
        SELECT COUNT(1)
        INTO v_RETAIL_INVOICE_COUNT
        FROM BILL_CASE_INVOICE BCI,
             RETAIL_INVOICE RI,
             RETAIL_INVOICE_LINE RIL
        WHERE BCI.BILL_CASE_ID = p_BILL_CASE_ID
          AND BCI.RETAIL_INVOICE_ID = RI.RETAIL_INVOICE_ID
          AND RI.RECIPIENT_PSE_ID = p_RECIPIENT_PSE_ID
          AND RI.RETAIL_INVOICE_ID = RIL.RETAIL_INVOICE_ID
          AND RIL.ACCOUNT_ID = p_ACCOUNT_ID;

        IF v_RETAIL_INVOICE_COUNT = 0 THEN
            LOGS.LOG_WARN('No existing Retail Invoice Line found for Account.');
		    RETURN FALSE;
        END IF;
    END IF;

	RETURN TRUE;
END VALIDATE_FOR_RERUN;
--------------------------------------------------------------------------------
PROCEDURE PROCESS_BILL_CASE
(
	p_BILL_CASE_ID		IN BILL_CASE.BILL_CASE_ID%TYPE,
	p_TIME_ZONE			IN VARCHAR2,
	p_TRACE_ON			IN NUMBER,
	p_IS_RERUN          IN BOOLEAN,
	p_RECIPIENT_PSE_ID  IN NUMBER,
	p_ACCOUNT_ID        IN NUMBER,
	p_PROCESS_ID       OUT VARCHAR2,
	p_PROCESS_STATUS   OUT NUMBER,
	p_MESSAGE          OUT VARCHAR2
) AS
	c_PROCESS_NAME			CONSTANT 	PROCESS_LOG.PROCESS_NAME%TYPE := 'Bill Case Run';
	c_RERUN_PROCESS_NAME    CONSTANT PROCESS_LOG.PROCESS_NAME%TYPE := 'Bill Case Re-run';
	v_BILL_CASE_REC			BILL_CASE%ROWTYPE;
	v_USER_NAME				APPLICATION_USER.USER_NAME%TYPE;
	v_DO_PROD_ACCTS_EXIST	NUMBER(1) := 0;
	v_RERUN_LOG_MSG         VARCHAR2(500);
	v_ROW_COUNT             NUMBER;
	---------------------------------------------------------------------------
	PROCEDURE UPDATE_BILL_CASE
	(
		p_USER_NAME		IN	APPLICATION_USER.USER_NAME%TYPE,
		p_BILL_CASE_ID	IN	BILL_CASE.BILL_CASE_ID%TYPE,
		p_PROCESS_STATUS	IN	NUMBER
	) AS
		PRAGMA AUTONOMOUS_TRANSACTION;
		v_SYSDATE	DATE;
	BEGIN
		LOGS.LOG_DEBUG('Updating Bill Case');

		v_SYSDATE := SYSDATE;

		UPDATE BILL_CASE BC
		   SET BC.RUN_BY	 = p_USER_NAME,
			   BC.RUN_STATUS = LOG_REPORTS.GET_STATUS_LEVEL_STRING(p_PROCESS_STATUS),
			   BC.RUN_DATE	 = v_SYSDATE
		 WHERE BC.BILL_CASE_ID = p_BILL_CASE_ID;

		 COMMIT;
	END UPDATE_BILL_CASE;
	---------------------------------------------------------------------------
BEGIN
	SAVEPOINT BILL_CASE_RUN;

	v_USER_NAME := GET_CURRENT_USER_NAME;

	LOGS.START_PROCESS(p_PROCESS_NAME => CASE WHEN p_IS_RERUN THEN c_RERUN_PROCESS_NAME ELSE c_PROCESS_NAME END,
					   p_TRACE_ON => p_TRACE_ON
					  );

	p_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;

	LOGS.SET_PROCESS_TARGET_PARAMETER('Bill Case ID', p_BILL_CASE_ID);
	LOGS.SET_PROCESS_TARGET_PARAMETER('Time Zone', p_TIME_ZONE);

	-- refactoring needed in this procedure for
	-- parameter validation and parent/child process start/stop and logging
    -- see [BZ 30529]

	-- validate p_BILL_CASE_ID; validate Bill Case exists
	SELECT COUNT(1)
	INTO v_ROW_COUNT
	FROM BILL_CASE
	WHERE BILL_CASE_ID = p_BILL_CASE_ID;
	IF v_ROW_COUNT = 0 THEN
	    LOGS.LOG_WARN('Bill Case with p_BILL_CASE_ID=' || p_BILL_CASE_ID || ' not found.');
		p_PROCESS_STATUS := LOGS.c_LEVEL_WARN;
		LOGS.STOP_PROCESS(p_FINISH_TEXT => p_MESSAGE, p_PROCESS_STATUS => p_PROCESS_STATUS);
		RETURN;
	END IF;

	GET_BILL_CASE_REC(p_BILL_CASE_ID, v_BILL_CASE_REC);

	-- If it is locked, log a warning and exit
	IF IS_BILL_CASE_LOCKED(p_BILL_CASE_ID) THEN
		LOGS.LOG_WARN('Bill Case ' || v_BILL_CASE_REC.BILL_CASE_NAME || ' is locked (Approved/Released). Re-running the Bill Case is prohibited.');
		p_PROCESS_STATUS := LOGS.c_LEVEL_WARN;
		LOGS.STOP_PROCESS(p_FINISH_TEXT => p_MESSAGE, p_PROCESS_STATUS => p_PROCESS_STATUS);
		RETURN;
	END IF;
	
	-- delete results from the Formula_Charge_Variable table
    DEL_EXISTING_FCV(p_BILL_CASE_ID);

	IF p_IS_RERUN = FALSE THEN
	    LOGS.LOG_INFO('Bill Case Name: ' || v_BILL_CASE_REC.BILL_CASE_NAME);
    ELSE
        IF VALIDATE_FOR_RERUN(p_BILL_CASE_ID, p_RECIPIENT_PSE_ID, p_ACCOUNT_ID) = FALSE THEN
		    p_PROCESS_STATUS := LOGS.c_LEVEL_WARN;
			LOGS.STOP_PROCESS(p_FINISH_TEXT =>  p_MESSAGE,
					          p_PROCESS_STATUS => p_PROCESS_STATUS);
			RETURN;
		END IF;

	    v_RERUN_LOG_MSG := 'Re-running Bill Case ' || v_BILL_CASE_REC.BILL_CASE_NAME ||
		                   ' for Customer ' || EI.GET_ENTITY_NAME(EC.ED_PSE, p_RECIPIENT_PSE_ID);
		IF p_ACCOUNT_ID IS NOT NULL THEN
		    v_RERUN_LOG_MSG := v_RERUN_LOG_MSG || ', Account ' || EI.GET_ENTITY_NAME(EC.ED_ACCOUNT, p_ACCOUNT_ID);
	    END IF;
	    LOGS.LOG_INFO(v_RERUN_LOG_MSG);
	END IF;

	-- External Hook
	XS.PRE_PROCESS_BILL_CASE(v_BILL_CASE_REC.BILL_CASE_ID);

	IF p_IS_RERUN = FALSE THEN
	DEL_EXISTING_RETAIL_INVOICES(v_BILL_CASE_REC);
	ELSE
	   DEL_EXISTING_RI_FOR_RERUN(p_BILL_CASE_ID, p_RECIPIENT_PSE_ID, p_ACCOUNT_ID);
	END IF;

	v_DO_PROD_ACCTS_EXIST := CHECK_PROD_ACCTS_EXIST(v_BILL_CASE_REC);

	IF v_DO_PROD_ACCTS_EXIST = 1 THEN
		IF UPPER(v_BILL_CASE_REC.PRODUCT_CATEGORY) = UPPER(c_PRODUCT_CATEGORY_TUOS) THEN
			 INS_BILL_CASE_TEMP_TUOS(v_BILL_CASE_REC, p_RECIPIENT_PSE_ID, p_ACCOUNT_ID);
		ELSE
			INS_BILL_CASE_TEMP_DEFAULT(v_BILL_CASE_REC, p_RECIPIENT_PSE_ID, p_ACCOUNT_ID);
		END IF;

    	INS_BILL_CASE_TEMP_RESETTLE(v_BILL_CASE_REC);

		-- External Hook
		XS.PRE_GENERATE_BILL_CASE_RESULTS(v_BILL_CASE_REC.BILL_CASE_ID);

		GENERATE_BILL_CASE_RESULTS(v_BILL_CASE_REC, p_TIME_ZONE, (p_ACCOUNT_ID IS NULL));
	END IF;

	-- External Hook
	XS.POST_PROCESS_BILL_CASE(v_BILL_CASE_REC.BILL_CASE_ID);

	LOGS.STOP_PROCESS(p_FINISH_TEXT =>  p_MESSAGE,
					  p_PROCESS_STATUS => p_PROCESS_STATUS
					 );

	COMMIT;

	UPDATE_BILL_CASE(v_USER_NAME,
					 p_BILL_CASE_ID,
					 p_PROCESS_STATUS
					);

  XS.AFTER_UPDATE_BILL_CASE(v_BILL_CASE_REC.BILL_CASE_ID); 
	
EXCEPTION
	WHEN OTHERS THEN
		p_PROCESS_STATUS := LOGS.c_LEVEL_FATAL;

		UPDATE_BILL_CASE(v_USER_NAME,
						 p_BILL_CASE_ID,
						 p_PROCESS_STATUS
						);

		ERRS.ABORT_PROCESS(p_SAVEPOINT_NAME => 'BILL_CASE_RUN');
END PROCESS_BILL_CASE;
--------------------------------------------------------------------------------
PROCEDURE RUN_BILL_CASE_SELECTIONS
(
	p_BILL_CASE_IDS		IN NUMBER_COLLECTION,
	p_TIME_ZONE			IN VARCHAR2,
	p_PROCESS_ID       OUT VARCHAR2,
	p_PROCESS_STATUS   OUT NUMBER,
	p_MESSAGE          OUT VARCHAR2,
	p_TRACE_ON			IN NUMBER := 0
) AS
	c_PROCESS_NAME				CONSTANT 	PROCESS_LOG.PROCESS_NAME%TYPE := 'Bill Case Selections Run';
	v_CHILD_PROCESS_STATUS		NUMBER := NULL;
	v_CHILD_MESSAGE				VARCHAR2(4000);
	v_PROCESS_ID				PROCESS_LOG.PROCESS_ID%TYPE;
BEGIN
	p_PROCESS_STATUS := LOGS.c_LEVEL_SUCCESS;

	LOGS.START_PROCESS(p_PROCESS_NAME => c_PROCESS_NAME,
					   p_TRACE_ON => p_TRACE_ON
					  );
	p_PROCESS_ID	:= LOGS.CURRENT_PROCESS_ID;

	FOR v_IDX IN 1..p_BILL_CASE_IDS.COUNT LOOP
		-- Handle logging issues for the parent-child processes and the severities
		BEGIN
			v_CHILD_PROCESS_STATUS 	:= NULL;
			v_CHILD_MESSAGE 		:= NULL;
			v_PROCESS_ID			:= NULL;

			-- refactoring needed in the following procedure for
			-- parameter validation and parent/child process start/stop and logging
            -- see [BZ 30529]
			PROCESS_BILL_CASE(p_BILL_CASE_IDS(v_IDX),
							  p_TIME_ZONE,
							  p_TRACE_ON,
                              FALSE,
                              NULL,
                              NULL,
							  v_PROCESS_ID,
							  v_CHILD_PROCESS_STATUS,
							  v_CHILD_MESSAGE
							 );

			-- If WARN, ERROR, NOTICE etc.
			IF v_CHILD_PROCESS_STATUS > p_PROCESS_STATUS THEN
				p_PROCESS_STATUS := v_CHILD_PROCESS_STATUS;
				p_MESSAGE		 := v_CHILD_MESSAGE;
			END IF;
		EXCEPTION
			WHEN OTHERS THEN
				p_PROCESS_STATUS := LOGS.c_LEVEL_FATAL;
				p_MESSAGE		 := 'Process encountered errors';
		END;
	END LOOP;

	LOGS.STOP_PROCESS(p_FINISH_TEXT =>  p_MESSAGE,
					  p_PROCESS_STATUS => p_PROCESS_STATUS
					 );

	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		ERRS.ABORT_PROCESS();
END RUN_BILL_CASE_SELECTIONS;
--------------------------------------------------------------------------------
PROCEDURE GET_BILL_CASE_SELECTIONS
(
	p_BILL_CASE_ID 	IN NUMBER,
	p_CURSOR       OUT GA.REFCURSOR
) AS
	v_UNIQUE_NAMES NUMBER(1);
BEGIN
	v_UNIQUE_NAMES := UT.NUMBER_FROM_BOOLEAN(GA.ENFORCE_UNIQUE_NAMES);

	OPEN p_CURSOR FOR
      SELECT NVL(BCS.BILL_CASE_SELECTIONS_ID,c_NULL_SELECTION_ID) 		AS BILL_CASE_SELECTIONS_ID,
         	 NVL(BCS.PSE_ID,c_NULL_SELECTION_ID) 						AS PSE_ID,
             CASE
                 WHEN v_UNIQUE_NAMES = 1 THEN
                     EI.GET_ENTITY_NAME(EC.ED_ACCOUNT,NVL(BCS.ACCOUNT_ID,CONSTANTS.NULL_ID),1)
                 ELSE
                     EI.GET_ENTITY_IDENTIFIER(EC.ED_ACCOUNT,NVL(BCS.ACCOUNT_ID,CONSTANTS.NULL_ID),1)
             END AS ACCOUNT_NAME, -- NULL if NULL.
				                                                                         -- The Quiet = 1 Flag takes care of this
         	 NVL(BCS.PRODUCT_ID,c_NULL_SELECTION_ID) 					AS PRODUCT_ID,
         	 NVL(BCS.COMPONENT_ID,c_NULL_SELECTION_ID) 					AS COMPONENT_ID
        FROM BILL_CASE_SELECTIONS BCS
	   WHERE BCS.BILL_CASE_ID = p_BILL_CASE_ID
	   ORDER BY BCS.BILL_CASE_SELECTIONS_ID;
END GET_BILL_CASE_SELECTIONS;
--------------------------------------------------------------------------------
PROCEDURE PUT_BILL_CASE_SELECTION
(
	o_OID             		   OUT NUMBER,
	p_BILL_CASE_SELECTIONS_ID 	IN NUMBER,
	p_BILL_CASE_ID    			IN NUMBER,
	p_PSE_ID          			IN NUMBER,
	p_ACCOUNT_NAME  			IN VARCHAR,
	p_PRODUCT_ID      			IN NUMBER,
	p_COMPONENT_ID    			IN NUMBER
) AS
	v_REC 				BILL_CASE_SELECTIONS%ROWTYPE;
	v_ACCOUNT_NAME   	ACCOUNT.ACCOUNT_NAME%TYPE;
	v_ACCOUNT_ID     	ACCOUNT.ACCOUNT_ID%TYPE;
	v_BILL_CASE_REC		BILL_CASE%ROWTYPE;
BEGIN
	-- Verify Edit Security
	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_BILL_CASE_EDIT);

	-- Check if this is locked before running
	GET_BILL_CASE_REC(p_BILL_CASE_ID, v_BILL_CASE_REC);

	-- If it is locked, log a warning and exit
	IF IS_BILL_CASE_LOCKED(p_BILL_CASE_ID) THEN
		LOGS.LOG_WARN('Bill Case ' || v_BILL_CASE_REC.BILL_CASE_NAME || ' is locked (Approved/Released). Editing Bill Case Selections is prohibited.');

		ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Bill Case ' || v_BILL_CASE_REC.BILL_CASE_NAME || ' is locked (Approved/Released). Editing Bill Case Selections is prohibited.');
		RETURN;
	END IF;

	-- Check the GA Flag, and set the ACCOUNT_ID accordingly
  	v_ACCOUNT_NAME := TRIM(p_ACCOUNT_NAME);

	IF v_ACCOUNT_NAME = '-' OR v_ACCOUNT_NAME IS NULL THEN
		v_REC.ACCOUNT_ID := NULL;
	ELSE
		IF GA.ENFORCE_UNIQUE_NAMES = TRUE THEN -- Use the ACCOUNT_NAME
			IF v_ACCOUNT_NAME IS NOT NULL THEN
				v_ACCOUNT_ID := EI.GET_ID_FROM_NAME(v_ACCOUNT_NAME, EC.ED_ACCOUNT, 1); -- Return NULL if not found

				IF v_ACCOUNT_ID IS NULL THEN -- If invalid account
					ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Account '|| v_ACCOUNT_NAME || ' doesn''t exist. No Selection is saved.');
				END IF; -- Show the 'Doink Box'

				v_REC.ACCOUNT_ID := v_ACCOUNT_ID;
			ELSE
				v_REC.ACCOUNT_ID := NULL;
			END IF;
		ELSE
			IF v_ACCOUNT_NAME IS NOT NULL THEN -- Use the ACCOUNT_EXTERNAL_IDENTIFIER
				v_ACCOUNT_ID := EI.GET_ID_FROM_IDENTIFIER(v_ACCOUNT_NAME, EC.ED_ACCOUNT, 1); -- Return NULL if not found

				IF v_ACCOUNT_ID IS NULL THEN -- If invalid account
					ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Account '|| v_ACCOUNT_NAME || ' doesn''t exist. No Selection is saved.');
				END IF; -- Doink Box

				v_REC.ACCOUNT_ID := v_ACCOUNT_ID;
			ELSE
				v_REC.ACCOUNT_ID := NULL;
			END IF;
		END IF;
	END IF;

	IF p_PSE_ID = c_NULL_SELECTION_ID OR p_PSE_ID IS NULL THEN -- Map -9999(or '-' in the UI) to NULL
		v_REC.PSE_ID := NULL;
	ELSE
		v_REC.PSE_ID := p_PSE_ID;
	END IF;

	IF p_COMPONENT_ID = c_NULL_SELECTION_ID OR p_COMPONENT_ID IS NULL THEN-- Map -9999(or '-' in the UI) to NULL
		v_REC.COMPONENT_ID := NULL;
	ELSE
		v_REC.COMPONENT_ID := p_COMPONENT_ID;
	END IF;

	IF p_PRODUCT_ID = c_NULL_SELECTION_ID OR p_PRODUCT_ID IS NULL THEN-- Map -9999(or '-' in the UI) to NULL
		v_REC.PRODUCT_ID := NULL;
	ELSE
		v_REC.PRODUCT_ID := p_PRODUCT_ID;
	END IF;

	IF v_REC.ACCOUNT_ID IS NULL -- If ALL 4 columns are NULL, show a Doink Box
	AND v_REC.PSE_ID IS NULL
	AND v_REC.COMPONENT_ID IS NULL
	AND v_REC.PRODUCT_ID IS NULL THEN
		ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'Empty row is not allowed. No selection is saved.');
	END IF;

	v_REC.BILL_CASE_SELECTIONS_ID := p_BILL_CASE_SELECTIONS_ID;
	v_REC.BILL_CASE_ID := p_BILL_CASE_ID;

	IF p_BILL_CASE_SELECTIONS_ID IS NULL THEN -- INSERT if new
		SELECT OID.NEXTVAL INTO o_OID FROM DUAL;

		v_REC.BILL_CASE_SELECTIONS_ID := o_OID;
		INSERT INTO BILL_CASE_SELECTIONS VALUES v_REC;
		COMMIT;
	ELSE
		UPDATE BILL_CASE_SELECTIONS -- UPDATE if exists
		SET ROW = v_REC
		WHERE BILL_CASE_SELECTIONS_ID = p_BILL_CASE_SELECTIONS_ID;

		o_OID := p_BILL_CASE_SELECTIONS_ID;
		COMMIT;
	END IF;
END PUT_BILL_CASE_SELECTION;
--------------------------------------------------------------------------------
PROCEDURE DELETE_BILL_CASE_SELECTION
(
	p_BILL_CASE_SELECTIONS_ID 	IN NUMBER
) AS
	v_BILL_CASE_NAME 	BILL_CASE.BILL_CASE_NAME%TYPE;
	v_BILL_CASE_ID		BILL_CASE.BILL_CASE_ID%TYPE;
BEGIN
	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_BILL_CASE_EDIT); -- Verify Edit Security

	-- Check if this is locked before running
	SELECT A.BILL_CASE_NAME,
		   A.BILL_CASE_ID
	  INTO v_BILL_CASE_NAME,
	  	   v_BILL_CASE_ID
	  FROM BILL_CASE A,
	  	   BILL_CASE_SELECTIONS B
	 WHERE B.BILL_CASE_SELECTIONS_ID = p_BILL_CASE_SELECTIONS_ID
	   AND B.BILL_CASE_ID = A.BILL_CASE_ID;

	-- If it is locked, log a warning and exit
	IF IS_BILL_CASE_LOCKED(v_BILL_CASE_ID) THEN
		LOGS.LOG_WARN('Bill Case ' || v_BILL_CASE_NAME || ' is locked (Approved/Released). Editing Bill Case Selections is prohibited.');

		ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Bill Case ' || v_BILL_CASE_NAME || ' is locked (Approved/Released). Editing Bill Case Selections is prohibited.');
		RETURN;
	END IF;

	DELETE FROM BILL_CASE_SELECTIONS WHERE BILL_CASE_SELECTIONS_ID = p_BILL_CASE_SELECTIONS_ID;
END DELETE_BILL_CASE_SELECTION;
--------------------------------------------------------------------------------
FUNCTION IS_BILL_CASE_MODIFIED
(
	p_BILL_CASE_REC IN OUT NOCOPY BILL_CASE%ROWTYPE,
	p_APPROVAL_TYPE IN VARCHAR2
) RETURN BOOLEAN AS
BEGIN
	-- If a user is looking at a Bill Case but at the same time was modified by another user,
	-- the first user might be looking at the old data and it is not reflected on the grid till refreshed.
	-- Therefore we have the folllowing checks in place.

	-- 1. Before setting bill case to Approved, make sure
	-- 	  i.   Approval Status is 'Unapproved' or NULL.
	--    ii.  Bill Case Status is not 'Test'
	---   iii. Release Status is NULL.
	IF p_APPROVAL_TYPE = c_STATUS_APPROVED
	   AND (p_BILL_CASE_REC.APPROVAL_STATE = c_STATUS_UNAPPROVED OR p_BILL_CASE_REC.APPROVAL_STATE IS NULL)
	   AND p_BILL_CASE_REC.BILL_CASE_STATUS <> c_BILL_CASE_STATUS_TEST
	   AND p_BILL_CASE_REC.RELEASE_STATE IS NULL THEN
		RETURN FALSE;
	-- 2. Before setting bill case to Unapproved, make sure
	-- 	  i.   Approval Status is 'Approved'.
	--    ii.  Bill Case Status is not 'Test'
	---   iii. Release Status is NULL.
	ELSIF p_APPROVAL_TYPE = c_STATUS_UNAPPROVED
	   AND p_BILL_CASE_REC.APPROVAL_STATE = c_STATUS_APPROVED
	   AND p_BILL_CASE_REC.BILL_CASE_STATUS <> c_BILL_CASE_STATUS_TEST
	   AND p_BILL_CASE_REC.RELEASE_STATE IS NULL THEN
		RETURN FALSE;
	-- 3. Before setting bill case to Released, make sure
	-- 	  i.   Approval Status is 'Approved'.
	--    ii.  Bill Case Status is not 'Test'
	---   iii. Release Status is NULL.
	ELSIF p_APPROVAL_TYPE = c_STATUS_RELEASED
	   AND p_BILL_CASE_REC.APPROVAL_STATE = c_STATUS_APPROVED
	   AND p_BILL_CASE_REC.BILL_CASE_STATUS <> c_BILL_CASE_STATUS_TEST
	   AND p_BILL_CASE_REC.RELEASE_STATE IS NULL THEN
		RETURN FALSE;
	ELSE
		RETURN TRUE;
	END IF;
END IS_BILL_CASE_MODIFIED;
--------------------------------------------------------------------------------
PROCEDURE PUT_BILL_CASE_APPROVAL_STATUS
(
	p_BILL_CASE_ID 	IN BILL_CASE.BILL_CASE_ID%TYPE,
	p_APPROVAL_TYPE IN VARCHAR2 DEFAULT c_STATUS_APPROVED -- c_STATUS_APPROVED, c_STATUS_UNAPPROVED, c_STATUS_RELEASED
)AS
	v_USER_NAME 			APPLICATION_USER.USER_DISPLAY_NAME%TYPE;
	v_SYSDATE 				DATE := SYSDATE;
	v_BILL_CASE_REC			BILL_CASE%ROWTYPE;
	b_BILL_CASE_MOD			BOOLEAN;
BEGIN
	-- Validate inputs
	ASSERT(p_APPROVAL_TYPE IN (c_STATUS_APPROVED, c_STATUS_UNAPPROVED, c_STATUS_RELEASED), 'Approval/Release status code is invalid',
		   MSGCODES.c_ERR_ARGUMENT);

	-- Get the current context's user name
	v_USER_NAME := GET_CURRENT_USER_NAME;

	-- First check if this was already Released.
	GET_BILL_CASE_REC(p_BILL_CASE_ID, v_BILL_CASE_REC);

	b_BILL_CASE_MOD := IS_BILL_CASE_MODIFIED(v_BILL_CASE_REC, p_APPROVAL_TYPE);

	IF b_BILL_CASE_MOD THEN
		-- Log a warning
		LOGS.LOG_WARN('Bill Case ' || v_BILL_CASE_REC.BILL_CASE_NAME || ' status may have been modified by ' ||
					  'another user. Please refresh to check the latest status.');

		ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Bill Case ' || v_BILL_CASE_REC.BILL_CASE_NAME || ' status may have been modified by ' ||
				   'another user. Please refresh to check the latest status.');
	-- Update bill case
	ELSIF p_APPROVAL_TYPE IN (c_STATUS_APPROVED, c_STATUS_UNAPPROVED) THEN
		UPDATE BILL_CASE
		   SET APPROVAL_STATE = p_APPROVAL_TYPE,
			   APPROVAL_DATE  = v_SYSDATE,
			   APPROVAL_BY	  = v_USER_NAME
		 WHERE BILL_CASE_ID = p_BILL_CASE_ID;
	ELSIF p_APPROVAL_TYPE	= c_STATUS_RELEASED THEN
		UPDATE BILL_CASE
		   SET RELEASE_STATE = p_APPROVAL_TYPE,
			   RELEASE_DATE  = v_SYSDATE,
			   RELEASE_BY	 = v_USER_NAME
		 WHERE BILL_CASE_ID = p_BILL_CASE_ID;
	END IF;
END PUT_BILL_CASE_APPROVAL_STATUS;
--------------------------------------------------------------------------------
FUNCTION IS_BILL_CASE_LOCKED
(
	p_BILL_CASE_ID BILL_CASE.BILL_CASE_ID%TYPE
)
RETURN BOOLEAN
IS
	v_APPROVAL_STATE	BILL_CASE.APPROVAL_STATE%TYPE;
	v_RELEASE_STATE		BILL_CASE.RELEASE_STATE%TYPE;
	v_RETURN			BOOLEAN := FALSE;
BEGIN
	-- Get the prevailing approval/release flag values
	SELECT A.APPROVAL_STATE,
		   A.RELEASE_STATE
	  INTO v_APPROVAL_STATE,
		   v_RELEASE_STATE
	  FROM BILL_CASE A
	 WHERE A.BILL_CASE_ID = p_BILL_CASE_ID;

	-- If "Approved" or "Released" it means it is locked
	IF v_APPROVAL_STATE = c_STATUS_APPROVED OR v_RELEASE_STATE = c_STATUS_RELEASED THEN
		v_RETURN := TRUE;
	END IF;

	RETURN v_RETURN;
END IS_BILL_CASE_LOCKED;
--------------------------------------------------------------------------------
PROCEDURE RERUN_PSE
(
	p_BILL_CASE_ID IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_TRACE_ON IN NUMBER,
	p_RECIPIENT_PSE_ID IN NUMBER,
	p_PROCESS_ID OUT NUMBER,
	p_PROCESS_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR2
) AS
BEGIN
	CSB.PROCESS_BILL_CASE(p_BILL_CASE_ID => p_BILL_CASE_ID,
					      p_TIME_ZONE => p_TIME_ZONE,
					      p_TRACE_ON => p_TRACE_ON,
						  p_IS_RERUN => TRUE,
					      p_RECIPIENT_PSE_ID => p_RECIPIENT_PSE_ID,
					      p_ACCOUNT_ID => NULL,
					      p_PROCESS_ID => p_PROCESS_ID,
					      p_PROCESS_STATUS => p_PROCESS_STATUS,
					      p_MESSAGE => p_MESSAGE);
END RERUN_PSE;
--------------------------------------------------------------------------------
PROCEDURE RERUN_ACCOUNT
(
	p_BILL_CASE_ID IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_TRACE_ON IN NUMBER,
	p_RECIPIENT_PSE_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_PROCESS_ID OUT NUMBER,
	p_PROCESS_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR2
) AS
BEGIN
	CSB.PROCESS_BILL_CASE(p_BILL_CASE_ID => p_BILL_CASE_ID,
					      p_TIME_ZONE => p_TIME_ZONE,
					      p_TRACE_ON => p_TRACE_ON,
						  p_IS_RERUN => TRUE,
					      p_RECIPIENT_PSE_ID => p_RECIPIENT_PSE_ID,
					      p_ACCOUNT_ID => p_ACCOUNT_ID,
					      p_PROCESS_ID => p_PROCESS_ID,
					      p_PROCESS_STATUS => p_PROCESS_STATUS,
					      p_MESSAGE => p_MESSAGE);
END RERUN_ACCOUNT;
--------------------------------------------------------------------------------
PROCEDURE SET_SUBDAILY_ENT_RELATIONSHIPS
(
	p_ENABLE_SUBDAILY	IN NUMBER DEFAULT 1
)
IS
	v_SET_STATUS VARCHAR2(32);
	--------------------------------
	FUNCTION GET_DAILY_AST_SQL
	RETURN VARCHAR2
	IS
	BEGIN
		RETURN  'CREATE OR REPLACE VIEW ACCOUNT_STATUS_CSB AS  ' ||
				'( ' ||
				'SELECT A.ACCOUNT_ID, 	 ' ||
				'		A.BEGIN_DATE,    ' ||
				'		A.END_DATE,      ' ||
				'		A.STATUS_NAME	   ' ||
				'FROM ( ' ||
				'		(WITH AST1 AS ' ||
				'		 (SELECT ACCOUNT_ID, ' ||
				'				 BEGIN_DATE, ' ||
				'				 NVL(END_DATE, DATE ''9999-12-31'') END_DATE,  ' ||
				'				 STATUS_NAME, ' ||
				'				 CASE LAG(END_DATE) OVER(PARTITION BY ACCOUNT_ID, STATUS_NAME ORDER BY BEGIN_DATE, END_DATE) + 1' ||
				'					 WHEN BEGIN_DATE THEN ' ||
				'					  0 ' ||
				'					 ELSE ' ||
				'					  1 ' ||
				'				 END WINDOW_RANK ' ||
				'		  FROM ACCOUNT_STATUS), ' ||
				'		AST2 AS ' ||
				'		 (SELECT ACCOUNT_ID, ' ||
				'				 BEGIN_DATE, ' ||
				'				 END_DATE, ' ||
				'				 STATUS_NAME, ' ||
				'				 SUM(WINDOW_RANK) OVER(PARTITION BY ACCOUNT_ID, STATUS_NAME ORDER BY BEGIN_DATE, END_DATE) PARTITIONED_GROUP ' ||
				'		  FROM AST1) ' ||
				'		SELECT ACCOUNT_ID, MIN(BEGIN_DATE) BEGIN_DATE, MAX(END_DATE) END_DATE, STATUS_NAME ' ||
				'		FROM AST2 ' ||
				'		GROUP BY ACCOUNT_ID, STATUS_NAME, PARTITIONED_GROUP ' ||
				'		ORDER BY ACCOUNT_ID, BEGIN_DATE ' ||
				'		) ' ||
				'	) A ' ||
				')' ;
	END GET_DAILY_AST_SQL;
	-------------------------------
	FUNCTION GET_DAILY_AESP_SQL
	RETURN VARCHAR2
	IS
	BEGIN
		RETURN  'CREATE OR REPLACE VIEW ACCOUNT_ESP_CSB AS  ' ||
				'(SELECT A.ACCOUNT_ID, A.ESP_ID, A.POOL_ID,		  ' ||
				'		 A.BEGIN_DATE, 	 ' ||
				'		 A.END_DATE,  	 ' ||
				'		A.ESP_ACCOUNT_NUMBER ' ||
				'FROM (		 ' ||
				'		(WITH AST1 AS ' ||
				'		 (SELECT ACCOUNT_ID, ' ||
				'		 		 ESP_ID, ' ||
				'				 POOL_ID, ' ||
				'				 BEGIN_DATE, ' ||
				'				 NVL(END_DATE, DATE ''9999-12-31'') END_DATE,  ' ||
				'				 ESP_ACCOUNT_NUMBER, ' ||
				'				 CASE LAG(END_DATE) OVER(PARTITION BY ACCOUNT_ID, ESP_ID, POOL_ID ORDER BY BEGIN_DATE, END_DATE) + 1 ' ||
				'					 WHEN BEGIN_DATE THEN ' ||
				'					  0 ' ||
				'					 ELSE ' ||
				'					  1 ' ||
				'				 END WINDOW_RANK ' ||
				'		  FROM ACCOUNT_ESP), ' ||
				'		AST2 AS ' ||
				'		 (SELECT ACCOUNT_ID, ' ||
				'		 		 ESP_ID, ' ||
				'				 POOL_ID, ' ||
				'				 BEGIN_DATE, ' ||
				'				 END_DATE, ' ||
				'				 ESP_ACCOUNT_NUMBER, ' ||
				'				 SUM(WINDOW_RANK) OVER(PARTITION BY ACCOUNT_ID,  ESP_ID, POOL_ID ORDER BY BEGIN_DATE, END_DATE) PARTITIONED_GROUP ' ||
				'		  FROM AST1) ' ||
				'		SELECT ACCOUNT_ID, ESP_ID, POOL_ID, ESP_ACCOUNT_NUMBER, MIN(BEGIN_DATE) BEGIN_DATE, MAX(END_DATE) END_DATE ' ||
				'		FROM AST2 ' ||
				'		GROUP BY ACCOUNT_ID, ESP_ID, POOL_ID, ESP_ACCOUNT_NUMBER, PARTITIONED_GROUP ' ||
				'		ORDER BY ACCOUNT_ID, ESP_ID, POOL_ID, BEGIN_DATE ' ||
				'		) ' ||
				') A)  ';
	END GET_DAILY_AESP_SQL;
	-------------------------------
	FUNCTION GET_SUBDAILY_AST_SQL
	RETURN VARCHAR2
	IS
	BEGIN
		RETURN 'CREATE OR REPLACE VIEW ACCOUNT_STATUS_CSB AS  ' ||
				'( ' ||
				'SELECT A.ACCOUNT_ID, 	 ' ||
				'		TRUNC(FROM_CUT(A.BEGIN_DATE, ''' || GA.LOCAL_TIME_ZONE || ''')) BEGIN_DATE,  ' ||
				'		NVL(TRUNC(FROM_CUT(A.END_DATE, ''' || GA.LOCAL_TIME_ZONE || ''')), DATE ''9999-12-31'') END_DATE,   ' ||
				'		A.STATUS_NAME	   ' ||
				'FROM ( ' ||
				'		(WITH AST1 AS ' ||
				'		 (SELECT ACCOUNT_ID, ' ||
				'				 BEGIN_DATE, ' ||
				'				 NVL(END_DATE, DATE ''9999-12-31'') END_DATE,  ' ||
				'				 STATUS_NAME, ' ||
				'				 CASE LAG(END_DATE) OVER(PARTITION BY ACCOUNT_ID, STATUS_NAME ORDER BY BEGIN_DATE, END_DATE) + (1/86400) ' ||
				'					 WHEN BEGIN_DATE THEN ' ||
				'					  0 ' ||
				'					 ELSE ' ||
				'					  1 ' ||
				'				 END WINDOW_RANK ' ||
				'		  FROM ACCOUNT_STATUS), ' ||
				'		AST2 AS ' ||
				'		 (SELECT ACCOUNT_ID, ' ||
				'				 BEGIN_DATE, ' ||
				'				 END_DATE, ' ||
				'				 STATUS_NAME, ' ||
				'				 SUM(WINDOW_RANK) OVER(PARTITION BY ACCOUNT_ID, STATUS_NAME ORDER BY BEGIN_DATE, END_DATE) PARTITIONED_GROUP ' ||
				'		  FROM AST1) ' ||
				'		SELECT ACCOUNT_ID, MIN(BEGIN_DATE) BEGIN_DATE, MAX(END_DATE) END_DATE, STATUS_NAME ' ||
				'		FROM AST2 ' ||
				'		GROUP BY ACCOUNT_ID, STATUS_NAME, PARTITIONED_GROUP ' ||
				'		ORDER BY ACCOUNT_ID, BEGIN_DATE ' ||
				'		) ' ||
				'	) A ' ||
				')' ;
	END GET_SUBDAILY_AST_SQL;
	-------------------------------
	FUNCTION GET_SUBDAILY_AESP_SQL
	RETURN VARCHAR2
	IS
	BEGIN
		RETURN  'CREATE OR REPLACE VIEW ACCOUNT_ESP_CSB AS  ' ||
				'(SELECT A.ACCOUNT_ID, A.ESP_ID, A.POOL_ID,		  ' ||
				'		TRUNC(FROM_CUT(A.BEGIN_DATE, ''' || GA.LOCAL_TIME_ZONE || ''')) BEGIN_DATE, 	 ' ||
				'		NVL(TRUNC(FROM_CUT(A.END_DATE, ''' || GA.LOCAL_TIME_ZONE || ''')), DATE ''9999-12-31'') END_DATE,  	 ' ||
				'		A.ESP_ACCOUNT_NUMBER ' ||
				'FROM (		 ' ||
				'		(WITH AST1 AS ' ||
				'		 (SELECT ACCOUNT_ID, ' ||
				'		 		 ESP_ID, ' ||
				'				 POOL_ID, ' ||
				'				 BEGIN_DATE, ' ||
				'				 NVL(END_DATE, DATE ''9999-12-31'') END_DATE, ' ||
				'				 ESP_ACCOUNT_NUMBER, ' ||
				'				 CASE LAG(END_DATE) OVER(PARTITION BY ACCOUNT_ID, ESP_ID, POOL_ID ORDER BY BEGIN_DATE, END_DATE) + (1/86400) ' ||
				'					 WHEN BEGIN_DATE THEN ' ||
				'					  0 ' ||
				'					 ELSE ' ||
				'					  1 ' ||
				'				 END WINDOW_RANK ' ||
				'		  FROM ACCOUNT_ESP), ' ||
				'		AST2 AS ' ||
				'		 (SELECT ACCOUNT_ID, ' ||
				'		 		 ESP_ID, ' ||
				'				 POOL_ID, ' ||
				'				 BEGIN_DATE, ' ||
				'				 END_DATE, ' ||
				'				 ESP_ACCOUNT_NUMBER, ' ||
				'				 SUM(WINDOW_RANK) OVER(PARTITION BY ACCOUNT_ID,  ESP_ID, POOL_ID ORDER BY BEGIN_DATE, END_DATE) PARTITIONED_GROUP ' ||
				'		  FROM AST1) ' ||
				'		SELECT ACCOUNT_ID, ESP_ID, POOL_ID, ESP_ACCOUNT_NUMBER, MIN(BEGIN_DATE) BEGIN_DATE, MAX(END_DATE) END_DATE ' ||
				'		FROM AST2 ' ||
				'		GROUP BY ACCOUNT_ID, ESP_ID, POOL_ID, ESP_ACCOUNT_NUMBER, PARTITIONED_GROUP ' ||
				'		ORDER BY ACCOUNT_ID, ESP_ID, POOL_ID, BEGIN_DATE ' ||
				'		) ' ||
				') A)  ';
	END GET_SUBDAILY_AESP_SQL;
	-------------------------------
BEGIN
	-- If sub-daily feature is to be turned on, 'TRUE' must be set here
	-- System -> GA Settings -> General --> CSB Is Subdaily
	v_SET_STATUS := CASE WHEN p_ENABLE_SUBDAILY = 1 THEN 'TRUE'
						 WHEN p_ENABLE_SUBDAILY = 0 THEN 'FALSE'
						 ELSE 'FALSE'
					END;

	-- This will set the required status
	PUT_DICTIONARY_VALUE('CSB Is Subdaily',    v_SET_STATUS, GA.GLOBAL_MODEL, 'System', 'GA Settings', 'General');
	DBMS_SESSION.MODIFY_PACKAGE_STATE(2); -- Do this so that the GA settings take effect of the change done above

	-- This is where the ACCOUNT_STATUS_CSB and ACCOUNT_ESP_CSB Views are redefined for either DAILY or SUB-DAILY setting
	-- The original views were created in the ACCOUNT_STATUS_CSB.sql and ACCOUNT_ESP_CSB scripts under MAIN\Database\Views
	CASE WHEN p_ENABLE_SUBDAILY = 1 THEN
			EXECUTE IMMEDIATE GET_SUBDAILY_AST_SQL;
			EXECUTE IMMEDIATE GET_SUBDAILY_AESP_SQL;
		 WHEN p_ENABLE_SUBDAILY = 0 THEN
		 	EXECUTE IMMEDIATE GET_DAILY_AST_SQL;
			EXECUTE IMMEDIATE GET_DAILY_AESP_SQL;
		 ELSE
		 	EXECUTE IMMEDIATE GET_DAILY_AST_SQL;
			EXECUTE IMMEDIATE GET_DAILY_AESP_SQL;
	END CASE;

END SET_SUBDAILY_ENT_RELATIONSHIPS;
--------------------------------------------------------------------------------
END CSB;
/
