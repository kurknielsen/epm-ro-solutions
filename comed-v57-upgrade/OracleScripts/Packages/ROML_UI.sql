CREATE OR REPLACE PACKAGE ROML_UI IS
-- $Revision: 1.3 $

  -- Author  : JHUMPHRIES
  -- Created : 5/3/2010 10:02:38 PM
  -- Purpose : Routines to support UI for Publish/Subscribe to/from ROML

FUNCTION WHAT_VERSION RETURN VARCHAR2;

FUNCTION ROML_ENTITY_DISPLAY
	(
	p_ROML_ENTITY_NAME	IN VARCHAR2,
	p_TABLE_NAME		IN VARCHAR2,
	p_IS_OBJECT			IN NUMBER,
	p_IS_DATA			IN NUMBER
	) RETURN VARCHAR2;

PROCEDURE ROML_ENTITY_LIST
	(
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_ROML_ENTITIES
	(
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TABLE_NAME_LIST
	(
	p_ROML_ENTITIES_ONLY	IN NUMBER,
	p_CURSOR 				OUT GA.REFCURSOR
	);

PROCEDURE SEQUENCE_NAME_LIST
	(
	p_CURSOR 				OUT GA.REFCURSOR
	);

PROCEDURE COLUMN_NAME_LIST
	(
	p_TABLE_NAME	IN VARCHAR2,
	p_TYPE			IN VARCHAR2,
	p_CURSOR		OUT GA.REFCURSOR
	);

PROCEDURE GET_POSSIBLE_ALIASES
	(
	p_TABLE_NAME	IN VARCHAR2,
	p_CURSOR		OUT GA.REFCURSOR
	);

PROCEDURE PUT_ROML_ENTITY
	(
	p_ROML_ENTITY_NID	IN NUMBER,
	p_ROML_ENTITY_NAME	IN VARCHAR2,
	p_TABLE_NAME		IN VARCHAR2,
	p_TABLE_ALIAS		IN VARCHAR2,
	p_IS_OBJECT			IN NUMBER,
	p_IS_DATA			IN NUMBER,
	p_SAVE_ID			IN NUMBER,
	p_ID_COLUMN			IN VARCHAR2,
	p_USE_SEQ			IN VARCHAR2,
	p_EXPORT_ORDER		IN NUMBER,
	p_DATE1_COL			IN VARCHAR2,
	p_DATE2_COL			IN VARCHAR2
	);

PROCEDURE DELETE_ROML_ENTITY
	(
	p_ROML_ENTITY_NID	IN NUMBER
	);

PROCEDURE GET_ROML_ENTITY_DEPENDS
	(
	p_ROML_ENTITY_NID	IN NUMBER,
	p_CURSOR 			OUT GA.REFCURSOR
	);

PROCEDURE PUT_ROML_ENTITY_DEPENDS
	(
	p_ROML_ENTITY_NID			IN NUMBER,
	p_DEP_ROML_ENTITY_NID		IN NUMBER,
	p_RELATIONSHIP				IN VARCHAR2,
	p_OLD_DEP_ROML_ENTITY_NID	IN NUMBER,
	p_OLD_RELATIONSHIP			IN VARCHAR2
	);

PROCEDURE DELETE_ROML_ENTITY_DEPENDS
	(
	p_ROML_ENTITY_NID		IN NUMBER,
	p_DEP_ROML_ENTITY_NID	IN NUMBER,
	p_RELATIONSHIP			IN VARCHAR2
	);

PROCEDURE GET_ROML_COL_RULES_MAP
	(
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PUT_ROML_COL_RULES_MAP
	(
	p_COLUMN_NAME			IN VARCHAR2,
	p_RULE					IN VARCHAR2,
	p_ROML_ENTITY_NID 		IN NUMBER,
	p_TABLE_NAME			IN VARCHAR2,
	p_OLD_COLUMN_NAME		IN VARCHAR2,
	p_OLD_RULE				IN VARCHAR2,
	p_OLD_ROML_ENTITY_NID	IN NUMBER
	);

PROCEDURE DELETE_ROML_COL_RULES_MAP
	(
	p_COLUMN_NAME		IN VARCHAR2,
	p_RULE				IN VARCHAR2,
	p_ROML_ENTITY_NID	IN NUMBER
	);

PROCEDURE GET_ROML_PREFIX_MAP
	(
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PUT_ROML_PREFIX_MAP
	(
	p_COLUMN_PREFIX		IN VARCHAR2,
	p_TABLE_NAME		IN VARCHAR2,
	p_OLD_COLUMN_PREFIX	IN VARCHAR2
	);

PROCEDURE DELETE_ROML_PREFIX_MAP
	(
	p_COLUMN_PREFIX	IN VARCHAR2
	);

PROCEDURE EXPORT_ROML_ENTITY_LIST
	(
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ENTITY_LIST
	(
	p_ROML_ENTITY_NID	IN NUMBER,
	p_BEGIN_DATE 		IN DATE,
	p_END_DATE 			IN DATE,
	p_CURSOR 			OUT GA.REFCURSOR
	);

PROCEDURE GET_METADATA_DML
	(
	p_CONTENTS	OUT CLOB
	);

END ROML_UI;
/
CREATE OR REPLACE PACKAGE BODY ROML_UI IS
---------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.3 $';
END WHAT_VERSION;
-------------------------------------------------------------------------------
-- Get display text for ROML entities when choosing from drop-down lists
FUNCTION ROML_ENTITY_DISPLAY
	(
	p_ROML_ENTITY_NAME	IN VARCHAR2,
	p_TABLE_NAME		IN VARCHAR2,
	p_IS_OBJECT			IN NUMBER,
	p_IS_DATA			IN NUMBER
	) RETURN VARCHAR2 AS
BEGIN
	RETURN '<html>'
			||CASE WHEN UT.BOOLEAN_FROM_NUMBER(p_IS_OBJECT) THEN '<b>'
				   WHEN UT.BOOLEAN_FROM_NUMBER(p_IS_DATA) THEN '<font color="gray">'
				   ELSE ''
				   END
			||p_ROML_ENTITY_NAME
			||' ('||p_TABLE_NAME||')'
			||CASE WHEN UT.BOOLEAN_FROM_NUMBER(p_IS_OBJECT) THEN '</b>'
				   WHEN UT.BOOLEAN_FROM_NUMBER(p_IS_DATA) THEN '</font>'
				   ELSE ''
				   END
			||'</html>';
END ROML_ENTITY_DISPLAY;
-------------------------------------------------------------------------------
-- Show list of all entries in ROML_ENTITY table
PROCEDURE ROML_ENTITY_LIST
	(
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT ROML_ENTITY_DISPLAY(R.ROML_ENTITY_NAME, R.TABLE_NAME, R.IS_OBJECT, R.IS_DATA) as ROML_ENTITY_NAME,
				R.ROML_ENTITY_NID
		FROM ROML_ENTITY R
		ORDER BY R.ROML_ENTITY_NAME;
END ROML_ENTITY_LIST;
-------------------------------------------------------------------------------
-- Show contents of ROML_ENTITY table
PROCEDURE GET_ROML_ENTITIES
	(
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT ROML_ENTITY_NID,
			ROML_ENTITY_NAME,
			TABLE_NAME,
			TABLE_ALIAS,
			IS_OBJECT,
			IS_DATA,
			SAVE_ID,
			ID_COLUMN,
			USE_SEQ,
			EXPORT_ORDER,
			DATE1_COL,
			DATE2_COL
		FROM ROML_ENTITY
		ORDER BY ROML_ENTITY_NAME;
END GET_ROML_ENTITIES;
-------------------------------------------------------------------------------
-- Get list of table names
PROCEDURE TABLE_NAME_LIST
	(
	p_ROML_ENTITIES_ONLY	IN NUMBER,
	p_CURSOR 				OUT GA.REFCURSOR
	) AS
BEGIN
	IF UT.BOOLEAN_FROM_NUMBER(p_ROML_ENTITIES_ONLY) THEN
		OPEN p_CURSOR FOR
			SELECT DISTINCT TABLE_NAME
			FROM ROML_ENTITY
			WHERE IS_OBJECT = 1
			ORDER BY 1;
	ELSE
		OPEN p_CURSOR FOR
			SELECT TABLE_NAME
			FROM USER_TABLES
			ORDER BY 1;
	END IF;
END TABLE_NAME_LIST;
-------------------------------------------------------------------------------
-- Get list of sequence names
PROCEDURE SEQUENCE_NAME_LIST
	(
	p_CURSOR 				OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT SEQUENCE_NAME
		FROM USER_SEQUENCES
		ORDER BY 1;
END SEQUENCE_NAME_LIST;
-------------------------------------------------------------------------------
-- Get list of column names in specified table with optional specified type
PROCEDURE COLUMN_NAME_LIST
	(
	p_TABLE_NAME	IN VARCHAR2,
	p_TYPE			IN VARCHAR2,
	p_CURSOR		OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT COLUMN_NAME
		FROM USER_TAB_COLS
		WHERE TABLE_NAME = p_TABLE_NAME
			AND DATA_TYPE LIKE p_TYPE
		ORDER BY 1;
END COLUMN_NAME_LIST;
-------------------------------------------------------------------------------
-- Find possible aliases for the specified table. Table must have a "name" and
-- "id" column that starts with the prefix
PROCEDURE GET_POSSIBLE_ALIASES
	(
	p_TABLE_NAME	IN VARCHAR2,
	p_CURSOR		OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT SUBSTR(C.COLUMN_NAME,1,LENGTH(C.COLUMN_NAME)-3) as ALIAS
		FROM USER_TAB_COLS C
		WHERE C.TABLE_NAME = p_TABLE_NAME
			AND SUBSTR(C.COLUMN_NAME,LENGTH(C.COLUMN_NAME)-2) = '_ID'
			AND EXISTS (SELECT 1
						FROM USER_TAB_COLS C2
						WHERE C2.TABLE_NAME = p_TABLE_NAME
							AND C2.COLUMN_NAME = SUBSTR(C.COLUMN_NAME,1,LENGTH(C.COLUMN_NAME)-3)||'_NAME')
		ORDER BY 1;
END GET_POSSIBLE_ALIASES;
-------------------------------------------------------------------------------
-- Save an ROML entity definition
PROCEDURE PUT_ROML_ENTITY
	(
	p_ROML_ENTITY_NID	IN NUMBER,
	p_ROML_ENTITY_NAME	IN VARCHAR2,
	p_TABLE_NAME		IN VARCHAR2,
	p_TABLE_ALIAS		IN VARCHAR2,
	p_IS_OBJECT			IN NUMBER,
	p_IS_DATA			IN NUMBER,
	p_SAVE_ID			IN NUMBER,
	p_ID_COLUMN			IN VARCHAR2,
	p_USE_SEQ			IN VARCHAR2,
	p_EXPORT_ORDER		IN NUMBER,
	p_DATE1_COL			IN VARCHAR2,
	p_DATE2_COL			IN VARCHAR2
	) AS
v_NID	NUMBER(9);
BEGIN

	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_ROML_PUB_SUB);

	IF p_ROML_ENTITY_NID IS NULL THEN
		SELECT NVL(MAX(ROML_ENTITY_NID),0)+1
		INTO v_NID
		FROM ROML_ENTITY;

		INSERT INTO ROML_ENTITY
			(ROML_ENTITY_NID, ROML_ENTITY_NAME, TABLE_NAME, TABLE_ALIAS, IS_OBJECT, IS_DATA,
			 SAVE_ID, ID_COLUMN, USE_SEQ, EXPORT_ORDER, DATE1_COL, DATE2_COL)
		VALUES
			(v_NID, p_ROML_ENTITY_NAME, p_TABLE_NAME, p_TABLE_ALIAS, p_IS_OBJECT, p_IS_DATA,
			 p_SAVE_ID, p_ID_COLUMN, p_USE_SEQ, p_EXPORT_ORDER, p_DATE1_COL, p_DATE2_COL);
	ELSE
		UPDATE ROML_ENTITY SET
			ROML_ENTITY_NAME = p_ROML_ENTITY_NAME,
			TABLE_NAME = p_TABLE_NAME,
			TABLE_ALIAS = p_TABLE_ALIAS,
			IS_OBJECT = p_IS_OBJECT,
			IS_DATA = p_IS_DATA,
			SAVE_ID = p_SAVE_ID,
			ID_COLUMN = p_ID_cOLUMN,
			USE_SEQ = p_USE_SEQ,
			EXPORT_ORDER = p_EXPORT_ORDER,
			DATE1_COL = p_DATE1_COL,
			DATE2_COL = p_DATE2_COL
		WHERE ROML_ENTITY_NID = p_ROML_ENTITY_NID;
	END IF;

END PUT_ROML_ENTITY;
-------------------------------------------------------------------------------
-- Remove an entry from the set of ROML entities
PROCEDURE DELETE_ROML_ENTITY
	(
	p_ROML_ENTITY_NID		IN NUMBER
	) AS
BEGIN

	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_ROML_PUB_SUB);

	DELETE ROML_ENTITY
	WHERE ROML_ENTITY_NID = p_ROML_ENTITY_NID;

END DELETE_ROML_ENTITY;
-------------------------------------------------------------------------------
-- Show contents of ROML_ENTITY table
PROCEDURE GET_ROML_ENTITY_DEPENDS
	(
	p_ROML_ENTITY_NID	IN NUMBER,
	p_CURSOR 			OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT D.DEP_ROML_ENTITY_NID,
			ROML_ENTITY_DISPLAY(E.ROML_ENTITY_NAME, E.TABLE_NAME, E.IS_OBJECT, E.IS_DATA) as DEP_ROML_ENTITY_NAME,
			D.RELATIONSHIP
		FROM ROML_ENTITY_DEPENDS D,
			ROML_ENTITY E
		WHERE D.ROML_ENTITY_NID = p_ROML_ENTITY_NID
			AND E.ROML_ENTITY_NID = D.DEP_ROML_ENTITY_NID
		ORDER BY E.ROML_ENTITY_NAME, D.RELATIONSHIP;
END GET_ROML_ENTITY_DEPENDS;
-------------------------------------------------------------------------------
-- Save an ROML entity dependency definition
PROCEDURE PUT_ROML_ENTITY_DEPENDS
	(
	p_ROML_ENTITY_NID			IN NUMBER,
	p_DEP_ROML_ENTITY_NID		IN NUMBER,
	p_RELATIONSHIP				IN VARCHAR2,
	p_OLD_DEP_ROML_ENTITY_NID	IN NUMBER,
	p_OLD_RELATIONSHIP			IN VARCHAR2
	) AS
BEGIN

	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_ROML_PUB_SUB);

	UPDATE ROML_ENTITY_DEPENDS SET
		DEP_ROML_ENTITY_NID = p_DEP_ROML_ENTITY_NID,
		RELATIONSHIP = p_RELATIONSHIP
	WHERE ROML_ENTITY_NID = p_ROML_ENTITY_NID
		AND DEP_ROML_ENTITY_NID = p_OLD_DEP_ROML_ENTITY_NID
		AND RELATIONSHIP = p_OLD_RELATIONSHIP;

	IF SQL%NOTFOUND THEN
		INSERT INTO ROML_ENTITY_DEPENDS
			(ROML_ENTITY_NID, DEP_ROML_ENTITY_NID, RELATIONSHIP)
		VALUES
			(p_ROML_ENTITY_NID, p_DEP_ROML_ENTITY_NID, p_RELATIONSHIP);
	END IF;

END PUT_ROML_ENTITY_DEPENDS;
-------------------------------------------------------------------------------
-- Remove an entry from the set of ROML entity dependencies
PROCEDURE DELETE_ROML_ENTITY_DEPENDS
	(
	p_ROML_ENTITY_NID		IN NUMBER,
	p_DEP_ROML_ENTITY_NID	IN NUMBER,
	p_RELATIONSHIP			IN VARCHAR2
	) AS
BEGIN

	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_ROML_PUB_SUB);

	DELETE ROML_ENTITY_DEPENDS
	WHERE ROML_ENTITY_NID = p_ROML_ENTITY_NID
		AND DEP_ROML_ENTITY_NID = p_DEP_ROML_ENTITY_NID
		AND RELATIONSHIP = p_RELATIONSHIP;

END DELETE_ROML_ENTITY_DEPENDS;
-------------------------------------------------------------------------------
-- Show contents of ROML_COL_RULES_MAP table
PROCEDURE GET_ROML_COL_RULES_MAP
	(
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT R.COLUMN_NAME,
			R.RULE,
			NVL(R.ROML_ENTITY_NID,CONSTANTS.ALL_ID) as ROML_ENTITY_NID,
			CASE WHEN R.ROML_ENTITY_NID IS NULL THEN CONSTANTS.ALL_STRING
				ELSE ROML_ENTITY_DISPLAY(E.ROML_ENTITY_NAME, E.TABLE_NAME, E.IS_OBJECT, E.IS_DATA)
				END as ROML_ENTITY_NAME,
			R.TABLE_NAME
		FROM ROML_COL_RULES_MAP R,
			ROML_ENTITY E
		WHERE E.ROML_ENTITY_NID(+) = R.ROML_ENTITY_NID
		ORDER BY R.COLUMN_NAME, R.RULE, E.ROML_ENTITY_NAME;
END GET_ROML_COL_RULES_MAP;
-------------------------------------------------------------------------------
-- Save ROML column rules mapping entry
PROCEDURE PUT_ROML_COL_RULES_MAP
	(
	p_COLUMN_NAME			IN VARCHAR2,
	p_RULE					IN VARCHAR2,
	p_ROML_ENTITY_NID 		IN NUMBER,
	p_TABLE_NAME			IN VARCHAR2,
	p_OLD_COLUMN_NAME		IN VARCHAR2,
	p_OLD_RULE				IN VARCHAR2,
	p_OLD_ROML_ENTITY_NID	IN NUMBER
	) AS
v_ROML_ENTITY_NID		NUMBER(9) := CASE WHEN p_ROML_ENTITY_NID = CONSTANTS.ALL_ID THEN NULL ELSE p_ROML_ENTITY_NID END;
v_OLD_ROML_ENTITY_NID	NUMBER(9) := CASE WHEN p_OLD_ROML_ENTITY_NID = CONSTANTS.ALL_ID THEN NULL ELSE p_OLD_ROML_ENTITY_NID END;
BEGIN

	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_ROML_PUB_SUB);

	UPDATE ROML_COL_RULES_MAP SET
		COLUMN_NAME = p_COLUMN_NAME,
		RULE = p_RULE,
		ROML_ENTITY_NID = v_ROML_ENTITY_NID,
		TABLE_NAME = p_TABLE_NAME
	WHERE COLUMN_NAME = p_OLD_COLUMN_NAME
		AND RULE = p_OLD_RULE
		AND ROML_ENTITY_NID = v_OLD_ROML_ENTITY_NID;

	IF SQL%NOTFOUND THEN
		INSERT INTO ROML_COL_RULES_MAP
			(COLUMN_NAME, RULE, ROML_ENTITY_NID, TABLE_NAME)
		VALUES
			(p_COLUMN_NAME, p_RULE, v_ROML_ENTITY_NID, p_TABLE_NAME);
	END IF;

END PUT_ROML_COL_RULES_MAP;
-------------------------------------------------------------------------------
-- Remove an entry from the ROML column rules map
PROCEDURE DELETE_ROML_COL_RULES_MAP
	(
	p_COLUMN_NAME		IN VARCHAR2,
	p_RULE				IN VARCHAR2,
	p_ROML_ENTITY_NID	IN NUMBER
	) AS
BEGIN

	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_ROML_PUB_SUB);

	DELETE ROML_COL_RULES_MAP
	WHERE COLUMN_NAME = p_COLUMN_NAME
		AND RULE = p_RULE
		AND ROML_ENTITY_NID = p_ROML_ENTITY_NID;

END DELETE_ROML_COL_RULES_MAP;
-------------------------------------------------------------------------------
-- Show contents of ROML_PREFIX_MAP table
PROCEDURE GET_ROML_PREFIX_MAP
	(
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT COLUMN_PREFIX,
			TABLE_NAME
		FROM ROML_PREFIX_MAP
		ORDER BY 1, 2;
END GET_ROML_PREFIX_MAP;
-------------------------------------------------------------------------------
-- Save ROML prefix map entry
PROCEDURE PUT_ROML_PREFIX_MAP
	(
	p_COLUMN_PREFIX		IN VARCHAR2,
	p_TABLE_NAME		IN VARCHAR2,
	p_OLD_COLUMN_PREFIX	IN VARCHAR2
	) AS
BEGIN

	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_ROML_PUB_SUB);

	UPDATE ROML_PREFIX_MAP SET
		COLUMN_PREFIX = p_COLUMN_PREFIX,
		TABLE_NAME = p_TABLE_NAME
	WHERE COLUMN_PREFIX = p_OLD_COLUMN_PREFIX;

	INSERT INTO ROML_PREFIX_MAP
		(COLUMN_PREFIX, TABLE_NAME)
	VALUES
		(p_COLUMN_PREFIX, p_TABLE_NAME);

END PUT_ROML_PREFIX_MAP;
-------------------------------------------------------------------------------
-- Remove an entry from the ROML prefix map
PROCEDURE DELETE_ROML_PREFIX_MAP
	(
	p_COLUMN_PREFIX	IN VARCHAR2
	) AS
BEGIN

	SD.VERIFY_ACTION_IS_ALLOWED(SD.g_ACTION_ROML_PUB_SUB);

	DELETE ROML_PREFIX_MAP
	WHERE COLUMN_PREFIX = p_COLUMN_PREFIX;

END DELETE_ROML_PREFIX_MAP;
-------------------------------------------------------------------------------
-- Show list of entries in ROML_ENTITY table for export selection
PROCEDURE EXPORT_ROML_ENTITY_LIST
	(
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT ROML_ENTITY_NAME, ROML_ENTITY_NID
		FROM ROML_ENTITY
		WHERE IS_OBJECT = 1
			AND EXPORT_ORDER >= 0
		ORDER BY EXPORT_ORDER, ROML_ENTITY_NAME;
END EXPORT_ROML_ENTITY_LIST;
-------------------------------------------------------------------------------
PROCEDURE ENTITY_LIST
	(
	p_ROML_ENTITY_NID	IN NUMBER,
	p_BEGIN_DATE 		IN DATE,
	p_END_DATE 			IN DATE,
	p_CURSOR 			OUT GA.REFCURSOR
	) AS
v_ROML_ENTITY	ROML_ENTITY%ROWTYPE;
v_SQL			VARCHAR2(32767);
BEGIN
	SELECT *
	INTO v_ROML_ENTITY
	FROM ROML_ENTITY
	WHERE ROML_ENTITY_NID = p_ROML_ENTITY_NID;

	v_SQL := 'SELECT '||v_ROML_ENTITY.TABLE_ALIAS||'_NAME as ENTITY_NAME, '
			||v_ROML_ENTITY.TABLE_ALIAS||'_ID as ENTITY_ID'
			||' FROM '||v_ROML_ENTITY.TABLE_NAME
			||CASE
				WHEN v_ROML_ENTITY.DATE1_COL IS NOT NULL AND v_ROML_ENTITY.DATE2_COL IS NOT NULL THEN
					' WHERE :1 <= NVL('||v_ROML_ENTITY.DATE2_COL||', '||UT.GET_LITERAL_FOR_DATE(CONSTANTS.HIGH_DATE)||')'
					||' AND :2 >= '||v_ROML_ENTITY.DATE1_COL
				WHEN v_ROML_ENTITY.DATE1_COL IS NOT NULL THEN
					' WHERE '||v_ROML_ENTITY.DATE1_COL||' BETWEEN :1 AND :2'
				ELSE
					''
				END
			||' ORDER BY 1';

	IF v_ROML_ENTITY.DATE1_COL IS NOT NULL THEN
		OPEN p_CURSOR FOR v_SQL USING p_BEGIN_DATE, p_END_DATE;
	ELSE
		OPEN p_CURSOR FOR v_SQL;
	END IF;
END ENTITY_LIST;
-------------------------------------------------------------------------------
PROCEDURE GET_METADATA_DML
	(
	p_CONTENTS	OUT CLOB
	) AS
BEGIN
	p_CONTENTS := ROML_EXPORT.ROML_METADATA_DML;
END GET_METADATA_DML;
-------------------------------------------------------------------------------
END ROML_UI;
/
