CREATE OR REPLACE PACKAGE ST AS
--Revision $Revision: 1.23 $

-- SETTLEMENT PACKAGE

FUNCTION WHAT_VERSION RETURN VARCHAR;


PROCEDURE NEW_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_DATE IN VARCHAR,
	p_TIME IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_EDC_ENERGY_IMBALANCE_CHARGE IN NUMBER,
	p_EDC_NET_RETAIL_IMBALANCE IN NUMBER,
	p_EDC_SUPPLY IN NUMBER,
	p_EDC_USAGE IN NUMBER,
	p_EDC_IMBALANCE IN NUMBER,
	p_EDC_PENALTY IN NUMBER,
	p_EDC_COST IN NUMBER,
	p_ESP_SUPPLY IN NUMBER,
	p_ESP_USAGE IN NUMBER,
	p_ESP_IMBALANCE IN NUMBER,
	p_ESP_PENALTY IN NUMBER,
	p_ESP_COST IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_EDC_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_DATE IN VARCHAR,
	p_TIME IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_EDC_ENERGY_IMBALANCE_CHARGE IN NUMBER,
	p_EDC_NET_RETAIL_IMBALANCE IN NUMBER,
	p_EDC_SUPPLY IN NUMBER,
	p_EDC_USAGE IN NUMBER,
	p_EDC_IMBALANCE IN NUMBER,
	p_EDC_PENALTY IN NUMBER,
	p_EDC_COST IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_EDC_SETTLEMENT_AGENT
	(
	p_EDC_ID IN NUMBER,
	p_EDC_SETTLEMENT_AGENT OUT VARCHAR
	);

PROCEDURE APPEND_EDC_SETTLEMENT_EIC
	(
	p_EDC_NAME IN VARCHAR,
	p_ESP_NAME IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_EIC_VALUES IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_INTERVAL IN CHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

g_DOMAIN_NAME VARCHAR(16) := 'Settlement';

END ST;
/
CREATE OR REPLACE PACKAGE BODY ST AS
---------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.23 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE SETTLEMENT_FILL
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

-- BEGIN AND END DATES ARE SPECIFIED AS CUT DATES

v_DATE DATE;

BEGIN

	p_STATUS := GA.SUCCESS;

-- FILL OR CLEAR THE SETTLEMENT TIME PERIOD

	v_DATE := p_BEGIN_DATE;

	WHILE v_DATE <= p_END_DATE LOOP

-- ATTEMPT TO UPDATE AN EXISTING RECORD

		UPDATE SHADOW_SETTLEMENT SET
			ESP_SUPPLY = 0,
			ESP_USAGE = 0,
			ESP_IMBALANCE = 0,
			ESP_PENALTY = 0,
			ESP_COST = 0
		WHERE ESP_ID = p_ESP_ID
			AND EDC_ID = p_EDC_ID
			AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
			AND SETTLEMENT_DATE = v_DATE
			AND AS_OF_DATE = p_AS_OF_DATE;

-- INSERT A NEW RECORD IF THE UPDATE DID NOT FIND AN EXISTING RECORD

		IF SQL%NOTFOUND THEN
			INSERT INTO SHADOW_SETTLEMENT (
				EDC_ID,
				ESP_ID,
				SETTLEMENT_CODE,
				SETTLEMENT_DATE,
				AS_OF_DATE,
				EDC_ENERGY_IMBALANCE_CHARGE,
				EDC_NET_RETAIL_IMBALANCE,
				EDC_SUPPLY,
				EDC_USAGE,
				EDC_IMBALANCE,
				EDC_PENALTY,
				EDC_COST,
				ESP_SUPPLY,
				ESP_USAGE,
				ESP_IMBALANCE,
				ESP_PENALTY,
				ESP_COST)
			VALUES (
				p_EDC_ID,
				p_ESP_ID,
				p_SETTLEMENT_CODE,
				v_DATE,
				p_AS_OF_DATE,
				0,0,0,0,0,0,0,0,0,0,0,0);
		END IF;

		v_DATE := ADD_SECONDS_TO_DATE(v_DATE, 3600);

	END LOOP;

END SETTLEMENT_FILL;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_ESP_SUPPLY
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_CUT_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_ESP_SUPPLY IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

BEGIN

	p_STATUS := GA.SUCCESS;

-- FIRST ATTEMPT TO UPDATE AN EXISTING RECORD

	UPDATE SHADOW_SETTLEMENT SET
		ESP_SUPPLY = p_ESP_SUPPLY
	WHERE ESP_ID = p_ESP_ID
		AND EDC_ID = p_EDC_ID
		AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
		AND SETTLEMENT_DATE = p_CUT_DATE
		AND AS_OF_DATE = p_AS_OF_DATE;

-- INSERT A NEW RECORD IF THE UPDATE DID NOT FIND AN EXISTING RECORD

	IF SQL%NOTFOUND THEN
		INSERT INTO SHADOW_SETTLEMENT (
			EDC_ID,
			ESP_ID,
			SETTLEMENT_CODE,
			SETTLEMENT_DATE,
			AS_OF_DATE,
			EDC_ENERGY_IMBALANCE_CHARGE,
			EDC_NET_RETAIL_IMBALANCE,
			EDC_SUPPLY,
			EDC_USAGE,
			EDC_IMBALANCE,
			EDC_PENALTY,
			EDC_COST,
			ESP_SUPPLY,
			ESP_USAGE,
			ESP_IMBALANCE,
			ESP_PENALTY,
			ESP_COST)
		VALUES (
			p_EDC_ID,
			p_ESP_ID,
			p_SETTLEMENT_CODE,
			p_CUT_DATE,
			p_AS_OF_DATE,
			0,0,0,0,0,0,0,
			p_ESP_SUPPLY,
			0,0,0,0);
	END IF;

END PUT_ESP_SUPPLY;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_ESP_USAGE
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_CUT_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_ESP_USAGE IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

BEGIN

	p_STATUS := GA.SUCCESS;

-- First attempt to update an existing record

	UPDATE SHADOW_SETTLEMENT SET
		ESP_USAGE = ESP_USAGE + p_ESP_USAGE,
		ESP_IMBALANCE = NVL(ESP_SUPPLY,0) - (ESP_USAGE + p_ESP_USAGE)
	WHERE ESP_ID = p_ESP_ID
		AND EDC_ID = p_EDC_ID
		AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
		AND SETTLEMENT_DATE = p_CUT_DATE
		AND AS_OF_DATE = p_AS_OF_DATE;

-- Insert a new record if the update did not find an existing record

	IF SQL%NOTFOUND THEN
		INSERT INTO SHADOW_SETTLEMENT (
			EDC_ID,
			ESP_ID,
			SETTLEMENT_CODE,
			SETTLEMENT_DATE,
			AS_OF_DATE,
			EDC_ENERGY_IMBALANCE_CHARGE,
			EDC_NET_RETAIL_IMBALANCE,
			EDC_SUPPLY,
			EDC_USAGE,
			EDC_IMBALANCE,
			EDC_PENALTY,
			EDC_COST,
			ESP_SUPPLY,
			ESP_USAGE,
			ESP_IMBALANCE,
			ESP_PENALTY,
			ESP_COST)
		VALUES (
			p_EDC_ID,
			p_ESP_ID,
			p_SETTLEMENT_CODE,
			p_CUT_DATE,
			p_AS_OF_DATE,
			0,0,0,0,0,0,0,0,
			p_ESP_USAGE,
			-p_ESP_USAGE,
			0,0);
	END IF;

END PUT_ESP_USAGE;
----------------------------------------------------------------------------------------------------
PROCEDURE ESP_SETTLEMENT_INIT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

-- Initialize the esp settlement components for supply and usage.
-- Begin and end dates are specified as cut dates so conversion is not required.

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_DATE DATE;
v_AS_OF_DATE DATE := HIGH_DATE;
v_VALUE NUMBER;

CURSOR c_SUPPLY IS
	SELECT D.SCHEDULE_DATE,SUM(D.AMOUNT)
	FROM INTERCHANGE_TRANSACTION A,
		SERVICE_POINT B,
		IT_COMMODITY C,
		IT_SCHEDULE D
	WHERE A.POD_ID = B.SERVICE_POINT_ID
		AND NOT UPPER(SUBSTR(A.TRANSACTION_TYPE,1,1)) = 'R'
		AND B.EDC_ID = p_EDC_ID
		AND A.COMMODITY_ID = C.COMMODITY_ID
		AND UPPER(SUBSTR(C.COMMODITY_TYPE,1,1)) = 'E'
		AND A.TRANSACTION_ID = D.TRANSACTION_ID
		AND D.SCHEDULE_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
	GROUP BY D.SCHEDULE_DATE;

CURSOR c_USAGE IS
	SELECT AS_HOUR_ENDING_DATE(C.LOAD_DATE),SUM(C.LOAD_VAL / 1000)
	FROM PROVIDER_SERVICE A, SERVICE B, SERVICE_LOAD C
	WHERE A.EDC_ID = p_EDC_ID
		AND B.MODEL_ID = 1
		AND B.SCENARIO_ID = 1
		AND B.PROVIDER_SERVICE_ID = A.PROVIDER_SERVICE_ID
		AND B.ACCOUNT_SERVICE_ID = B.ACCOUNT_SERVICE_ID
		AND B.SERVICE_DELIVERY_ID = B.SERVICE_DELIVERY_ID
		AND B.AS_OF_DATE =
			(SELECT MAX(AS_OF_DATE)
			FROM SERVICE
			WHERE MODEL_ID = B.MODEL_ID
				AND SCENARIO_ID = B.SCENARIO_ID
				AND PROVIDER_SERVICE_ID = B.PROVIDER_SERVICE_ID
				AND ACCOUNT_SERVICE_ID = B.ACCOUNT_SERVICE_ID
				AND SERVICE_DELIVERY_ID = B.SERVICE_DELIVERY_ID
				AND AS_OF_DATE <= v_AS_OF_DATE)
		AND C.SERVICE_CODE = GA.ACTUAL_SERVICE
		AND C.LOAD_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		AND C.LOAD_CODE = GA.STANDARD
	GROUP BY AS_HOUR_ENDING_DATE(C.LOAD_DATE);

BEGIN

	p_STATUS := GA.SUCCESS;
	UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

-- Fill the settlement period.

	SETTLEMENT_FILL(p_EDC_ID, p_ESP_ID, p_SETTLEMENT_CODE, p_BEGIN_DATE, p_END_DATE, p_AS_OF_DATE, p_STATUS);

	IF NOT p_STATUS = 0 THEN
		RETURN;
	END IF;

-- Compute the supply for the ESP.

	OPEN c_SUPPLY;
	LOOP
		FETCH c_SUPPLY INTO v_DATE, v_VALUE;
		EXIT WHEN c_SUPPLY%NOTFOUND;
		PUT_ESP_SUPPLY(p_EDC_ID, p_ESP_ID, p_SETTLEMENT_CODE, v_DATE, p_AS_OF_DATE, v_VALUE, p_STATUS);
	END LOOP;
	CLOSE c_SUPPLY;

	IF NOT p_STATUS = 0 THEN
		RETURN;
	END IF;

-- Compute the usage for the ESP.

	OPEN c_USAGE;
	LOOP
		FETCH c_USAGE INTO v_DATE, v_VALUE;
		EXIT WHEN c_USAGE%NOTFOUND;
		PUT_ESP_USAGE(p_EDC_ID, p_ESP_ID, p_SETTLEMENT_CODE, v_DATE, p_AS_OF_DATE, v_VALUE, p_STATUS);
	END LOOP;
	CLOSE c_USAGE;

END ESP_SETTLEMENT_INIT;
----------------------------------------------------------------------------------------------------
PROCEDURE COMED_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

-- COMMONWEATH EDISON SETTLEMENT RULES
-- BEGIN AND END DATES ARE SPECIFIED AS CUT DATES

CURSOR c_SHADOW_SETTLEMENT IS
	SELECT *
	FROM SHADOW_SETTLEMENT
	WHERE EDC_ID = p_EDC_ID
		AND ESP_ID = p_ESP_ID
		AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
		AND SETTLEMENT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
		AND AS_OF_DATE = p_AS_OF_DATE;

v_SHADOW_SETTLEMENT SHADOW_SETTLEMENT%ROWTYPE;
v_INDEX BINARY_INTEGER;
v_EXCEED_HOURS NUMBER;
v_HOURS_IN_MONTH NUMBER;
v_ADDER_THRESHOLD NUMBER;
v_APPLY_ADDER BOOLEAN;
v_IMBALANCE NUMBER;
v_IMBALANCE_EXCEED NUMBER := 0.25;
v_IMBALANCE_MINIMUM NUMBER := 2.0;
v_IMBALANCE_DISCOUNT NUMBER := 0.75;
v_IMBALANCE_PENALTY_OR_CREDIT NUMBER;
v_COUNT NUMBER := 0;

BEGIN

	p_STATUS := GA.SUCCESS;

-- DETERMINE THE NUMBER OF HOURS OF THE MONTH IN WHICH THE IMBALANCE EXCEEDS 25% OF THE SCHEDULE

	SELECT COUNT(*)
	INTO v_EXCEED_HOURS
	FROM SHADOW_SETTLEMENT
	WHERE EDC_ID = p_EDC_ID
		AND ESP_ID = p_ESP_ID
		AND SETTLEMENT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
		AND ESP_IMBALANCE > v_IMBALANCE_EXCEED * ESP_SUPPLY;

-- DETERMINE THE NUMBER OF HOURS OF THE SETTLEMENT MONTH

	v_HOURS_IN_MONTH := TO_NUMBER(TO_CHAR(LAST_DAY(p_BEGIN_DATE),'DD')) * 24;

-- DETERMINE THE ADDER THRESHOLD BASED ON THE SETTLEMENT MONTH

	IF TRUNC(p_BEGIN_DATE) < TO_DATE('01-JAN-2000','DD-MON-YYYY') THEN
		v_ADDER_THRESHOLD := 1.0;
	ELSIF TRUNC(p_BEGIN_DATE) < TO_DATE('01-APR-2000','DD-MON-YYYY') THEN
		v_ADDER_THRESHOLD := .2;
	ELSE
		v_ADDER_THRESHOLD := .1;
	END IF;

-- DETERMINE IF THE ADDER APPLIES: SUM OF HOURLY IMBALANCES EXCEEDING 25% OF THE SCHEDULE
-- IS GREATER THAN x HOURS (WHERE x = v_ADDER_THRESHOLD * v_HOURS_IN_MONTH)

	v_APPLY_ADDER := v_EXCEED_HOURS >= (v_ADDER_THRESHOLD * v_HOURS_IN_MONTH);

-- PROCESS EACH HOUR OVER THE SETTLEMENT PERIOD AND CALCULATE THE PENALTY AND COST VALUES
-- IMBALANCE IS EQUAL TO SUPPLY MINUS USAGE AND DETERMINES OVER-SUPPLY(+) AND UNDER-SUPPLY(-)
-- NOTE: PENALTY AND COST REFER TO BOTH THE OVER-SUPPLY(+) AND UNDER-SUPPLY(-) SITUATION

	FOR v_SHADOW_SETTLEMENT IN c_SHADOW_SETTLEMENT LOOP
		v_SHADOW_SETTLEMENT.ESP_PENALTY := 0;
		IF v_APPLY_ADDER THEN
			IF ABS(v_SHADOW_SETTLEMENT.ESP_IMBALANCE) > (v_IMBALANCE_EXCEED * v_SHADOW_SETTLEMENT.ESP_SUPPLY) THEN
				v_SHADOW_SETTLEMENT.ESP_PENALTY := v_SHADOW_SETTLEMENT.ESP_IMBALANCE;
			END IF;
		END IF;

		v_IMBALANCE := (GREATEST(ABS(v_SHADOW_SETTLEMENT.ESP_IMBALANCE), v_IMBALANCE_MINIMUM)) *
			SIGN(v_SHADOW_SETTLEMENT.ESP_IMBALANCE);
		v_IMBALANCE_PENALTY_OR_CREDIT := 1.0 - (SIGN(v_SHADOW_SETTLEMENT.ESP_IMBALANCE) * v_IMBALANCE_DISCOUNT);

		v_SHADOW_SETTLEMENT.ESP_COST :=
			(v_IMBALANCE * v_SHADOW_SETTLEMENT.EDC_ENERGY_IMBALANCE_CHARGE) +
			(v_SHADOW_SETTLEMENT.ESP_PENALTY *
			(v_SHADOW_SETTLEMENT.EDC_ENERGY_IMBALANCE_CHARGE * v_IMBALANCE_PENALTY_OR_CREDIT));

		UPDATE SHADOW_SETTLEMENT
		SET ESP_PENALTY = v_SHADOW_SETTLEMENT.ESP_PENALTY,
			ESP_COST = v_SHADOW_SETTLEMENT.ESP_COST
		WHERE EDC_ID = v_SHADOW_SETTLEMENT.EDC_ID
			AND ESP_ID = v_SHADOW_SETTLEMENT.ESP_ID
			AND SETTLEMENT_DATE = v_SHADOW_SETTLEMENT.SETTLEMENT_DATE
			AND AS_OF_DATE = v_SHADOW_SETTLEMENT.AS_OF_DATE;

		v_COUNT := v_COUNT + 1;
		IF v_COUNT > 100 THEN
			COMMIT;
			v_COUNT := 0;
		END IF;

	END LOOP;

END COMED_SETTLEMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE MEC_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

-- MIDAMERICAN SETTLEMENT RULES
-- BEGIN AND END DATES ARE SPECIFIED AS CUT DATES

CURSOR c_SHADOW_SETTLEMENT IS
	SELECT *
	FROM SHADOW_SETTLEMENT
	WHERE EDC_ID = p_EDC_ID
		AND ESP_ID = p_ESP_ID
		AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
		AND SETTLEMENT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
		AND AS_OF_DATE = p_AS_OF_DATE;

v_SHADOW_SETTLEMENT SHADOW_SETTLEMENT%ROWTYPE;
v_INDEX BINARY_INTEGER;
v_IMBALANCE_DEADBAND NUMBER := 0.04;
v_IMBALANCE_MINIMUM NUMBER := 2.0;
v_NRI_THRESHOLD NUMBER := 5.0;
v_IMBALANCE_DISCOUNT NUMBER := 0.1;
v_IMBALANCE NUMBER;
v_IMBALANCE_PENALTY_OR_CREDIT NUMBER;
v_COUNT NUMBER := 0;

BEGIN

	p_STATUS := GA.SUCCESS;

-- PROCESS EACH HOUR OVER THE SETTLEMENT PERIOD AND CALCULATE THE PENALTY AND COST VALUES
-- IMBALANCE IS EQUAL TO SUPPLY MINUS USAGE AND DETERMINES OVER-SUPPLY(+) AND UNDER-SUPPLY(-)
-- NOTE: PENALTY AND COST REFER TO BOTH THE OVER-SUPPLY(+) AND UNDER-SUPPLY(-) SITUATION
-- CRITERIA
--		IMBALANCE MINIMUM COMMODITY AMOUNT: 2MW
-- 		IMBALANCE IS <= 2 MW OR WITHIN +/- 4% OF DEADBAND: 100% EIC
--		NRI > +/- 5 MW AND IMBALANCE > 2 MW AND IMBALANCE EXCEEDS +/- 4% OF DEADBAND
--			AND IMBALANCE IS SAME DIRECTION (SIGN) AS NRI:
--			OVER-SUPPLY - 90% EIC, UNDER-SUPPLY - 110% EIC

	FOR v_SHADOW_SETTLEMENT IN c_SHADOW_SETTLEMENT LOOP

		v_SHADOW_SETTLEMENT.ESP_PENALTY := 0;
		IF ABS(v_SHADOW_SETTLEMENT.EDC_NET_RETAIL_IMBALANCE) > v_NRI_THRESHOLD
			AND SIGN(v_SHADOW_SETTLEMENT.EDC_NET_RETAIL_IMBALANCE) = SIGN(v_SHADOW_SETTLEMENT.ESP_IMBALANCE)
			AND ABS(v_SHADOW_SETTLEMENT.ESP_IMBALANCE) > v_IMBALANCE_MINIMUM
			AND ABS(v_SHADOW_SETTLEMENT.ESP_IMBALANCE) > (v_SHADOW_SETTLEMENT.ESP_SUPPLY * v_IMBALANCE_DEADBAND) THEN							v_SHADOW_SETTLEMENT.ESP_PENALTY := v_SHADOW_SETTLEMENT.ESP_IMBALANCE;
		END IF;

		v_IMBALANCE := (GREATEST(ABS(v_SHADOW_SETTLEMENT.ESP_IMBALANCE), v_IMBALANCE_MINIMUM)) *
			SIGN(v_SHADOW_SETTLEMENT.ESP_IMBALANCE);
		v_IMBALANCE_PENALTY_OR_CREDIT := 1.0 - (SIGN(v_SHADOW_SETTLEMENT.ESP_IMBALANCE) * v_IMBALANCE_DISCOUNT);

		v_SHADOW_SETTLEMENT.ESP_COST :=
			(v_IMBALANCE * v_SHADOW_SETTLEMENT.EDC_ENERGY_IMBALANCE_CHARGE) +
			(v_SHADOW_SETTLEMENT.ESP_PENALTY *
			(v_SHADOW_SETTLEMENT.EDC_ENERGY_IMBALANCE_CHARGE * v_IMBALANCE_PENALTY_OR_CREDIT));

		UPDATE SHADOW_SETTLEMENT
		SET ESP_PENALTY = v_SHADOW_SETTLEMENT.ESP_PENALTY,
			ESP_COST = v_SHADOW_SETTLEMENT.ESP_COST
		WHERE EDC_ID = v_SHADOW_SETTLEMENT.EDC_ID
			AND ESP_ID = v_SHADOW_SETTLEMENT.ESP_ID
			AND SETTLEMENT_DATE = v_SHADOW_SETTLEMENT.SETTLEMENT_DATE
			AND AS_OF_DATE = v_SHADOW_SETTLEMENT.AS_OF_DATE;

		v_COUNT := v_COUNT + 1;
		IF v_COUNT > 100 THEN
			COMMIT;
			v_COUNT := 0;
		END IF;

	END LOOP;

END MEC_SETTLEMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE PJM_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

-- PJM SETTLEMENT RULES
-- BEGIN AND END DATES ARE SPECIFIED AS CUT DATES

CURSOR c_SHADOW_SETTLEMENT IS
	SELECT *
	FROM SHADOW_SETTLEMENT
	WHERE EDC_ID = p_EDC_ID
		AND ESP_ID = p_ESP_ID
		AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
		AND SETTLEMENT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
		AND AS_OF_DATE = p_AS_OF_DATE;

v_SHADOW_SETTLEMENT SHADOW_SETTLEMENT%ROWTYPE;
v_INDEX BINARY_INTEGER;
v_COUNT NUMBER := 0;

BEGIN

	p_STATUS := GA.SUCCESS;

-- PROCESS EACH HOUR OVER THE SETTLEMENT PERIOD AND CALCULATE THE ESP COST VALUES
-- IMBALANCE IS EQUAL TO SUPPLY MINUS USAGE AND DETERMINES OVER-SUPPLY(+) AND UNDER-SUPPLY(-)
-- IMBALANCE COST IS AT THE PJM MARKET CLEARING PRICE WITH NO PENALTY FOR OVER/UNDER-SUPPLY

	FOR v_SHADOW_SETTLEMENT IN c_SHADOW_SETTLEMENT LOOP
		v_SHADOW_SETTLEMENT.ESP_COST := v_SHADOW_SETTLEMENT.ESP_IMBALANCE * v_SHADOW_SETTLEMENT.EDC_ENERGY_IMBALANCE_CHARGE;

		UPDATE SHADOW_SETTLEMENT
		SET ESP_COST = v_SHADOW_SETTLEMENT.ESP_COST
		WHERE EDC_ID = v_SHADOW_SETTLEMENT.EDC_ID
			AND ESP_ID = v_SHADOW_SETTLEMENT.ESP_ID
			AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
			AND SETTLEMENT_DATE = v_SHADOW_SETTLEMENT.SETTLEMENT_DATE
			AND AS_OF_DATE = p_AS_OF_DATE;

		v_COUNT := v_COUNT + 1;
		IF v_COUNT > 100 THEN
			COMMIT;
			v_COUNT := 0;
		END IF;

	END LOOP;

END PJM_SETTLEMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE NEW_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_EDC_SETTLEMENT_AGENT VARCHAR(16);
v_AS_OF_DATE DATE;
v_VERSION_DOMAIN VARCHAR(32);

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
	   ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	SELECT DECODE(p_SETTLEMENT_CODE,'P','Backcast','A','Usage Allocation','Unknown')
	INTO v_VERSION_DOMAIN
    FROM DUAL;

	v_AS_OF_DATE := CORRECTED_AS_OF_DATE(p_AS_OF_DATE,v_VERSION_DOMAIN);

-- CONVERT LOCAL BEGIN AND END DATES TO CUT DATES

	UT.LOCAL_DAY_TO_CUT(p_BEGIN_DATE, p_TIME_ZONE, v_BEGIN_DATE);
	UT.LOCAL_DAY_TO_CUT(p_END_DATE, p_TIME_ZONE, v_END_DATE);

-- INIIALIZE THE SETTLEMENT PERIOD

	ESP_SETTLEMENT_INIT(p_EDC_ID, p_ESP_ID, p_SETTLEMENT_CODE, v_BEGIN_DATE, v_END_DATE, p_AS_OF_DATE, p_STATUS);

	IF NOT p_STATUS = 0 THEN
		RETURN;
	END IF;

	GET_EDC_SETTLEMENT_AGENT(p_EDC_ID, v_EDC_SETTLEMENT_AGENT);

	IF v_EDC_SETTLEMENT_AGENT = 'COMED' THEN
		COMED_SETTLEMENT(p_EDC_ID, p_ESP_ID, p_SETTLEMENT_CODE, v_BEGIN_DATE, v_END_DATE, v_AS_OF_DATE, p_STATUS);
	ELSIF v_EDC_SETTLEMENT_AGENT = 'MEC' THEN
		MEC_SETTLEMENT(p_EDC_ID, p_ESP_ID, p_SETTLEMENT_CODE, v_BEGIN_DATE, v_END_DATE, v_AS_OF_DATE, p_STATUS);
	ELSIF v_EDC_SETTLEMENT_AGENT = 'PJM' THEN
		PJM_SETTLEMENT(p_EDC_ID, p_ESP_ID, p_SETTLEMENT_CODE, v_BEGIN_DATE, v_END_DATE, v_AS_OF_DATE, p_STATUS);
	END IF;

END NEW_SETTLEMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_DATE IN VARCHAR,
	p_TIME IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_EDC_ENERGY_IMBALANCE_CHARGE IN NUMBER,
	p_EDC_NET_RETAIL_IMBALANCE IN NUMBER,
	p_EDC_SUPPLY IN NUMBER,
	p_EDC_USAGE IN NUMBER,
	p_EDC_IMBALANCE IN NUMBER,
	p_EDC_PENALTY IN NUMBER,
	p_EDC_COST IN NUMBER,
	p_ESP_SUPPLY IN NUMBER,
	p_ESP_USAGE IN NUMBER,
	p_ESP_IMBALANCE IN NUMBER,
	p_ESP_PENALTY IN NUMBER,
	p_ESP_COST IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

v_CUT_DATE DATE;
v_AS_OF_DATE DATE;
v_VERSION_DOMAIN VARCHAR(32);

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
	   ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	SELECT DECODE(p_SETTLEMENT_CODE,'P','Backcast','A','Usage Allocation','Unknown')
	INTO v_VERSION_DOMAIN
	FROM DUAL;

	v_AS_OF_DATE := CORRECTED_AS_OF_DATE(p_AS_OF_DATE,v_VERSION_DOMAIN);

	UT.LOCAL_DATE_AND_TIME_TO_CUT(p_DATE, p_TIME, p_TIME_ZONE, v_CUT_DATE);

	UPDATE SHADOW_SETTLEMENT SET
		EDC_ENERGY_IMBALANCE_CHARGE = p_EDC_ENERGY_IMBALANCE_CHARGE,
		EDC_NET_RETAIL_IMBALANCE = p_EDC_NET_RETAIL_IMBALANCE,
		EDC_SUPPLY = p_EDC_SUPPLY,
		EDC_USAGE = p_EDC_USAGE,
		EDC_IMBALANCE = p_EDC_IMBALANCE,
		EDC_PENALTY = p_EDC_PENALTY,
		EDC_COST = p_EDC_COST,
		ESP_SUPPLY = p_ESP_SUPPLY,
		ESP_USAGE = p_ESP_USAGE,
		ESP_IMBALANCE = p_ESP_IMBALANCE,
		ESP_PENALTY = p_ESP_PENALTY,
		ESP_COST = p_ESP_COST
	WHERE EDC_ID = p_EDC_ID
		AND ESP_ID = p_ESP_ID
		AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
		AND SETTLEMENT_DATE = v_CUT_DATE
		AND AS_OF_DATE = v_AS_OF_DATE;

	IF SQL%NOTFOUND THEN
		INSERT INTO SHADOW_SETTLEMENT (
			EDC_ID,
			ESP_ID,
			SETTLEMENT_CODE,
			SETTLEMENT_DATE,
			AS_OF_DATE,
			EDC_ENERGY_IMBALANCE_CHARGE,
			EDC_NET_RETAIL_IMBALANCE,
			EDC_SUPPLY,
			EDC_USAGE,
			EDC_IMBALANCE,
			EDC_PENALTY,
			EDC_COST,
			ESP_SUPPLY,
			ESP_USAGE,
			ESP_IMBALANCE,
			ESP_PENALTY,
			ESP_COST)
		VALUES (
			p_EDC_ID,
			p_ESP_ID,
			p_SETTLEMENT_CODE,
			v_CUT_DATE,
			v_AS_OF_DATE,
			p_EDC_ENERGY_IMBALANCE_CHARGE,
			p_EDC_NET_RETAIL_IMBALANCE,
			p_EDC_SUPPLY,
			p_EDC_USAGE,
			p_EDC_IMBALANCE,
			p_EDC_PENALTY,
			p_EDC_COST,
			p_ESP_SUPPLY,
			p_ESP_USAGE,
			p_ESP_IMBALANCE,
			p_ESP_PENALTY,
			p_ESP_COST);
	END IF;

END PUT_SETTLEMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_EDC_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_DATE IN VARCHAR,
	p_TIME IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_EDC_ENERGY_IMBALANCE_CHARGE IN NUMBER,
	p_EDC_NET_RETAIL_IMBALANCE IN NUMBER,
	p_EDC_SUPPLY IN NUMBER,
	p_EDC_USAGE IN NUMBER,
	p_EDC_IMBALANCE IN NUMBER,
	p_EDC_PENALTY IN NUMBER,
	p_EDC_COST IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

v_CUT_DATE DATE;
v_AS_OF_DATE DATE;
v_VERSION_DOMAIN VARCHAR(32);

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
	   ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;
	SELECT DECODE(p_SETTLEMENT_CODE,'P','Backcast','A','Usage Allocation','Unknown')
	INTO v_VERSION_DOMAIN
	FROM DUAL;

	v_AS_OF_DATE := CORRECTED_AS_OF_DATE(p_AS_OF_DATE,v_VERSION_DOMAIN);

	UT.LOCAL_DATE_AND_TIME_TO_CUT(p_DATE, p_TIME, p_TIME_ZONE, v_CUT_DATE);

	UPDATE SHADOW_SETTLEMENT SET
		EDC_ENERGY_IMBALANCE_CHARGE = p_EDC_ENERGY_IMBALANCE_CHARGE,
		EDC_NET_RETAIL_IMBALANCE = p_EDC_NET_RETAIL_IMBALANCE,
		EDC_SUPPLY = p_EDC_SUPPLY,
		EDC_USAGE = p_EDC_USAGE,
		EDC_IMBALANCE = p_EDC_IMBALANCE,
		EDC_PENALTY = p_EDC_PENALTY,
		EDC_COST = p_EDC_COST
	WHERE EDC_ID = p_EDC_ID
		AND ESP_ID = p_ESP_ID
		AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
		AND SETTLEMENT_DATE = v_CUT_DATE
		AND AS_OF_DATE = v_AS_OF_DATE;

	IF SQL%NOTFOUND THEN
		INSERT INTO SHADOW_SETTLEMENT (
			EDC_ID,
			ESP_ID,
			SETTLEMENT_CODE,
			SETTLEMENT_DATE,
			AS_OF_DATE,
			EDC_ENERGY_IMBALANCE_CHARGE,
			EDC_NET_RETAIL_IMBALANCE,
			EDC_SUPPLY,
			EDC_USAGE,
			EDC_IMBALANCE,
			EDC_PENALTY,
			EDC_COST,
			ESP_SUPPLY,
			ESP_USAGE,
			ESP_IMBALANCE,
			ESP_PENALTY,
			ESP_COST)
		VALUES (
			p_EDC_ID,
			p_ESP_ID,
			p_SETTLEMENT_CODE,
			v_CUT_DATE,
			v_AS_OF_DATE,
			p_EDC_ENERGY_IMBALANCE_CHARGE,
			p_EDC_NET_RETAIL_IMBALANCE,
			p_EDC_SUPPLY,
			p_EDC_USAGE,
			p_EDC_IMBALANCE,
			p_EDC_PENALTY,
			p_EDC_COST,
			0,
			0,
			0,
			0,
			0);
	END IF;

END PUT_EDC_SETTLEMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_EDC_SETTLEMENT_AGENT
	(
	p_EDC_ID IN NUMBER,
	p_EDC_SETTLEMENT_AGENT OUT VARCHAR
	) AS

BEGIN

	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
	   ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

	SELECT LTRIM(RTRIM(UPPER(EDC_SETTLEMENT_AGENT_NAME)))
	INTO p_EDC_SETTLEMENT_AGENT
	FROM ENERGY_DISTRIBUTION_COMPANY
	WHERE EDC_ID = p_EDC_ID;

EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			p_EDC_SETTLEMENT_AGENT := 'UNKNOWN';

END GET_EDC_SETTLEMENT_AGENT;
----------------------------------------------------------------------------------------------------
PROCEDURE APPEND_EDC_SETTLEMENT_EIC
	(
	p_EDC_NAME IN VARCHAR,
	p_ESP_NAME IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_EIC_VALUES IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

BEGIN

	NULL;

END APPEND_EDC_SETTLEMENT_EIC;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_SETTLEMENT
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_SETTLEMENT_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_INTERVAL IN CHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

	v_BEGIN_DATE DATE;
	v_END_DATE DATE;

BEGIN

	UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

	IF p_INTERVAL = 'H' THEN
	   OPEN p_CURSOR FOR
	   		SELECT FROM_CUT_AS_HED(SETTLEMENT_DATE,p_TIME_ZONE),
				EDC_ENERGY_IMBALANCE_CHARGE,
			    EDC_NET_RETAIL_IMBALANCE,
				EDC_SUPPLY,
				EDC_USAGE,
				EDC_IMBALANCE,
				EDC_PENALTY,
				EDC_COST,
				ESP_SUPPLY,
				ESP_USAGE,
				ESP_IMBALANCE,
				ESP_PENALTY,
				ESP_COST,
				EDC_ID,
				ESP_ID
			FROM SHADOW_SETTLEMENT
			WHERE EDC_ID = p_EDC_ID
			    AND ESP_ID = p_ESP_ID
				AND SETTLEMENT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
				AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
				AND AS_OF_DATE = SHADOW_SETTLEMENT_AS_OF_DATE(p_EDC_ID,p_ESP_ID,p_SETTLEMENT_CODE,SETTLEMENT_DATE,p_AS_OF_DATE)
			ORDER BY 1;
	ELSE
		OPEN p_CURSOR FOR
			 SELECT FROM_CUT_AS_HED(SETTLEMENT_DATE,p_TIME_ZONE,p_INTERVAL),
			     AVG(EDC_ENERGY_IMBALANCE_CHARGE),
				 SUM(EDC_NET_RETAIL_IMBALANCE),
				 SUM(EDC_SUPPLY),
				 SUM(EDC_USAGE),
				 SUM(EDC_IMBALANCE),
				 SUM(EDC_PENALTY),
				 SUM(EDC_COST),
				 SUM(ESP_SUPPLY),
				 SUM(ESP_USAGE),
				 SUM(ESP_IMBALANCE),
				 SUM(ESP_PENALTY),
				 SUM(ESP_COST),
				 0,
				 0
			  FROM SHADOW_SETTLEMENT
			  WHERE EDC_ID = p_EDC_ID
			  	AND ESP_ID = p_ESP_ID
			    AND SETTLEMENT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
				AND SETTLEMENT_CODE = p_SETTLEMENT_CODE
				AND AS_OF_DATE = SHADOW_SETTLEMENT_AS_OF_DATE(p_EDC_ID,p_ESP_ID,p_SETTLEMENT_CODE,SETTLEMENT_DATE,p_AS_OF_DATE)
			  GROUP BY FROM_CUT_AS_HED(SETTLEMENT_DATE,p_TIME_ZONE,p_INTERVAL)
			  ORDER BY 1;
	END IF;



END GET_SETTLEMENT;

----------------------------------------------------------------------------------------------------
END ST;
/
