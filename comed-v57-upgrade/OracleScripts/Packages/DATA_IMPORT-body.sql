CREATE OR REPLACE PACKAGE BODY DATA_IMPORT IS

g_LINE_NBR NUMBER(9);
g_LINE VARCHAR2(4000);

-- THESE ARE USED BY THE HISTORICAL PROFILE TO TRACK WHEN THE
-- HISTORICAL PROFILE HAS CHANGED IN THE IMPORT, SO THEY CAN
-- COMMIT STATISTICS
g_PREV_LP_NAME VARCHAR2(128);
g_PREV_LIB_NAME VARCHAR2(128);
g_PREV_CAL_NAME VARCHAR2(128);
g_LAST_LP_ID NUMBER(9);

g_PREV_ACCOUNT_ID NUMBER(9);
g_PREV_METER_ID NUMBER(9);
g_PREV_SERVICE_LOCATION_ID NUMBER(9);
g_PREV_DATE DATE;
g_PREV_METER_CODE CHAR(1);

PROFILE_TYPE_HISTORICAL CONSTANT VARCHAR2(32) := 'HISTORICAL';
PROFILE_TYPE_WRF CONSTANT VARCHAR2(32) := 'WRF';
PROFILE_TYPE_WEATHER CONSTANT VARCHAR2(32) := 'WEATHER';
PROFILE_TYPE_TYPICAL_DAY CONSTANT VARCHAR2(32) := 'TYPICAL DAY';

c_SERVICE_LOAD_SYNC_TOTAL_COLS CONSTANT NUMBER(3) := 108;
c_ACCOUNT_SYNC_TOTAL_COLUMNS CONSTANT NUMBER(3) := 98;
c_NON_INTVL_SYNC_TOTAL_COLUMNS CONSTANT NUMBER(3) := 19;

c_SL_ACCOUNT_IDENT_LENGTH CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_LOAD_STAGING',
                                                                          'ACCOUNT_IDENT');

c_SL_METER_IDENT_LENGTH CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_LOAD_STAGING',
                                                                          'METER_IDENT');

c_SL_ESP_IDENT_LENGTH CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_LOAD_STAGING',
                                                                          'ESP_IDENT');

c_SL_POOL_IDENT_LENGTH CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_LOAD_STAGING',
                                                                          'POOL_IDENT');

c_SL_INTERVAL_IDENT_LENGTH CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_LOAD_STAGING',
                                                                          'INTERVAL');

c_SL_UOM_IDENT_LENGTH CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_LOAD_STAGING',
                                                                          'UOM');

c_SL_SERVICE_CODE_IDENT_LENGTH CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_LOAD_STAGING',
                                                                          'SERVICE_CODE');

-- Service Consumption Fields
c_SC_ACCOUNT_IDENT CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'ACCOUNT_IDENT');

c_SC_METER_IDENT CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'METER_IDENT');

c_SC_ESP_IDENT CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'ESP_IDENT');

c_SC_POOL_IDENT CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'POOL_IDENT');

c_SC_BILL_CODE CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'BILL_CODE');

c_SC_CONSUMPTION_CODE CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'CONSUMPTION_CODE');

c_SC_TEMPLATE_IDENT CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'TEMPLATE_IDENT');

c_SC_PERIOD_IDENT CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'PERIOD_IDENT');

c_SC_UOM CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'UOM');

c_SC_METER_READING CONSTANT NUMBER(3) := GET_TABLE_FIELD_LENGTH('SERVICE_CONSUMPTION_STAGING',
                                                                          'METER_READING');
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.41 $';
END WHAT_VERSION;
-----------------------------------------------------------------------------
-- FILES CREATED WITH EXCEL CAN HAVE EMPTY COLUMNS APPENDED TO THE END OF THE LINE
-- THIS PROCEDURE WILL REMOVE THIS NULL COLUMNS
PROCEDURE REMOVE_NULL_TOKENS
(
	p_TOKEN_STRING IN OUT PARSE_UTIL.STRING_TABLE
) AS

BEGIN

	WHILE p_TOKEN_STRING(p_TOKEN_STRING.LAST) IS NULL LOOP
		p_TOKEN_STRING.DELETE(p_TOKEN_STRING.LAST);
	END LOOP;

END REMOVE_NULL_TOKENS;
-----------------------------------------------------------------------------
FUNCTION GET_DST_WARNING_MESSAGE
	(
		p_IMPORT_DATE IN DATE
	) RETURN VARCHAR2 IS

	v_NUM_DST NUMBER(9);
	v_NUM_CUT NUMBER(9);

BEGIN

	v_NUM_DST := DATE_UTIL.GET_INTERVAL_DIVISOR(CONSTANTS.INTERVAL_DAY,
													'HH',
													p_IMPORT_DATE,
													GA.LOCAL_TIME_ZONE,
													NULL);

	v_NUM_CUT := DATE_UTIL.GET_INTERVAL_DIVISOR(CONSTANTS.INTERVAL_DAY,
													'HH',
													p_IMPORT_DATE,
													GA.CUT_TIME_ZONE,
													NULL);

	IF v_NUM_DST > v_NUM_CUT THEN
		RETURN '  Note that ' || p_IMPORT_DATE || ' is a DST fall-back day and that the local time zone, ' ||
				GA.LOCAL_TIME_ZONE || ', is a DST observant time zone.';
	ELSIF v_NUM_CUT < v_NUM_DST THEN
		RETURN '  Note that ' || p_IMPORT_DATE || ' is a DST spring-ahead day and that the local time zone, ' ||
				GA.LOCAL_TIME_ZONE || ', is a DST observant time zone.';
	ELSE
		RETURN '';
	END IF;

END GET_DST_WARNING_MESSAGE;
-----------------------------------------------------------------------------
FUNCTION FIND_FIRST_DATA_LINE
	(
		p_LINES IN OUT NOCOPY PARSE_UTIL.BIG_STRING_TABLE_MP,
		p_DELIMITER IN VARCHAR2,
		p_HEADER_TEXT IN VARCHAR2
	) RETURN NUMBER IS

	v_TABLE PARSE_UTIL.STRING_TABLE;
	v_RESULT NUMBER(9) := p_LINES.FIRST;
	v_TEXT VARCHAR2(200);

BEGIN

	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINES(v_RESULT), p_DELIMITER, v_TABLE);

	v_TEXT := v_TABLE(v_TABLE.FIRST);

	IF v_TEXT IS NOT NULL AND INSTR(v_TEXT, p_HEADER_TEXT) > 0 THEN
		-- FIRST LINE IS A HEADER LINE, SKIP TO NEXT
		v_RESULT := p_LINES.NEXT(v_RESULT);
	END IF;

	RETURN v_RESULT;
END FIND_FIRST_DATA_LINE;
-----------------------------------------------------------------------------
FUNCTION GET_IMPORT_IDENTIFIER
	(
	p_IDENTIFIER IN VARCHAR2,
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_USE_EXT_IDENT IN BOOLEAN
	) RETURN NUMBER IS

	v_RESULT NUMBER(9);

BEGIN

	IF p_USE_EXT_IDENT THEN
		v_RESULT := EI.GET_ID_FROM_IDENTIFIER(p_IDENTIFIER, p_ENTITY_DOMAIN_ID);
	ELSE
		v_RESULT := EI.GET_ID_FROM_NAME(p_IDENTIFIER, p_ENTITY_DOMAIN_ID);
	END IF;

	RETURN v_RESULT;

EXCEPTION
	WHEN MSGCODES.e_ERR_NO_SUCH_ENTRY THEN
		RETURN NULL;
END GET_IMPORT_IDENTIFIER;
-----------------------------------------------------------------------------
PROCEDURE TX_NETWORK_IMPORT
	(
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_TOKENS PARSE_UTIL.STRING_TABLE;
	v_BEGIN_DATE DATE;
	v_END_DATE DATE;

	v_EXT_IDENT VARCHAR2(64);
	v_NAME VARCHAR2(32);

	v_SZ_ID NUMBER(9);
	v_SS_ID NUMBER(9);
	v_F_ID NUMBER(9);
	v_FS_ID NUMBER(9);
	v_LF_ID NUMBER(9);

	v_F_NOT_SPECIFIED BOOLEAN := FALSE;

	v_PRIORITY NUMBER := NULL;

BEGIN

	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER, v_TOKENS);
	REMOVE_NULL_TOKENS(v_TOKENS);

	IF v_TOKENS.COUNT() < 7 OR v_TOKENS.COUNT > 8 THEN
		LOG_IMPORT_ERROR('7-8 fields are expected for the transmission network import, but ' ||
			v_TOKENS.COUNT() || ' were found.', p_SUCCESS);
		RETURN;
	END IF;

	-- Get the effective date (7), and (optionally) the terminate date (8)
	v_BEGIN_DATE := IMPORT_DATE(v_TOKENS(7), DEFAULT_DATE_FORMAT, 'Effective Date: ', p_SUCCESS);

	IF v_TOKENS.COUNT = 8 AND v_TOKENS(8) IS NOT NULL THEN
		v_END_DATE := IMPORT_DATE(v_TOKENS(8), DEFAULT_DATE_FORMAT,
			'Terminate Date: ', p_SUCCESS);
	END IF;

	-- get the service zone
	v_EXT_IDENT := v_TOKENS(1);
	IF v_EXT_IDENT IS NULL THEN

		LOG_IMPORT_ERROR('A service zone external identifier must be specified, but this ' ||
			'field is empty for the import file.', p_SUCCESS);

	ELSE

		v_SZ_ID := EI.GET_ID_FROM_IDENTIFIER(v_EXT_IDENT, EC.ED_SERVICE_ZONE, 1);

		IF v_SZ_ID IS NULL AND p_SUCCESS THEN
			v_NAME := ENTITY_UTIL.RESOLVE_ENTITY_NAME_CONFLICT(v_EXT_IDENT, EC.ED_SERVICE_ZONE);
			IO.PUT_SERVICE_ZONE(v_SZ_ID,
								v_NAME,
								v_EXT_IDENT,
								'Created by the transmission network import on ' || SYSDATE || '.',
								0,
								v_EXT_IDENT,
								NULL,
								NULL,
								NULL);
		END IF;
	END IF;

	-- get the sub station
	v_EXT_IDENT := v_TOKENS(2);
	IF v_EXT_IDENT IS NULL THEN

		LOG_IMPORT_ERROR('A sub station external identifier must be specified, but this ' ||
			'field is empty for the import file.', p_SUCCESS);

	ELSE

		v_SS_ID := EI.GET_ID_FROM_IDENTIFIER(v_EXT_IDENT, EC.ED_SUB_STATION, 1);

		IF v_SS_ID IS NULL AND p_SUCCESS THEN
			v_NAME := ENTITY_UTIL.RESOLVE_ENTITY_NAME_CONFLICT(v_EXT_IDENT, EC.ED_SUB_STATION);
			IO.PUT_SUB_STATION(v_SS_ID,
								v_NAME,
								v_EXT_IDENT,
								'Created by the transmission network import on ' || SYSDATE || '.',
								0,
								NULL,
								v_EXT_IDENT,
								v_BEGIN_DATE,
								v_END_DATE,
								v_SZ_ID);

		ELSIF p_SUCCESS THEN

			-- UPDATE THE SUB STATION
			UPDATE TX_SUB_STATION SS
			SET SS.BEGIN_DATE = LEAST(SS.BEGIN_DATE, v_BEGIN_DATE),
				SS.END_DATE = CASE WHEN SS.END_DATE IS NULL OR v_END_DATE IS NULL THEN
									NULL
								  ELSE
								  	GREATEST(SS.END_DATE, v_END_DATE)
								  END,
				SS.SERVICE_ZONE_ID = v_SZ_ID
			WHERE SS.SUB_STATION_ID = v_SS_ID;
		END IF;

	END IF;

	-- GET THE FEEDER
	v_EXT_IDENT := v_TOKENS(3);
	-- THE FEEDER FIELD IS OPTIONAL, BUT WE NEED TO RECORD IF IT WAS SPECIFIED
	-- SO WE CAN LOG AN ERROR IF A FEEDER SEGMENT IS SPECIFIED, WE CAN'T JUST
	-- RELY ON v_F_ID BEING NULL SINCE WE DON'T CREATE NEW FEEDERS IF p_SUCCESS
	-- IS FALSE
	IF v_EXT_IDENT IS NULL THEN
		v_F_NOT_SPECIFIED := TRUE;
	ELSE
		v_F_ID := EI.GET_ID_FROM_IDENTIFIER(v_EXT_IDENT, EC.ED_TX_FEEDER, 1);

		IF v_F_ID IS NULL AND p_SUCCESS THEN

			v_NAME := ENTITY_UTIL.RESOLVE_ENTITY_NAME_CONFLICT(v_EXT_IDENT, EC.ED_TX_FEEDER);
			IO.PUT_TX_FEEDER(v_F_ID,
							v_NAME,
							v_EXT_IDENT,
							'Created by the transmission network import on ' || SYSDATE || '.',
							0,
							v_EXT_IDENT,
							v_SS_ID,
							v_BEGIN_DATE,
							v_END_DATE);

		ELSIF p_SUCCESS THEN

			-- UPDATE THE FEEDER
			UPDATE TX_FEEDER F
				SET F.BEGIN_DATE = LEAST(F.BEGIN_DATE, v_BEGIN_DATE),
					F.END_DATE = CASE WHEN F.END_DATE IS NULL OR v_END_DATE IS NULL THEN
										NULL
									  ELSE
										GREATEST(F.END_DATE, v_END_DATE)
									  END,
					F.SUB_STATION_ID = v_SS_ID
				WHERE F.FEEDER_ID = v_F_ID;

		END IF;
	END IF;


	-- GET THE FEEDER SEGMENT
	v_EXT_IDENT := v_TOKENS(4);
	IF v_EXT_IDENT IS NULL THEN
		-- DID WE SPECIFY A FEEDER SEGMENT PRIORITY?
		IF v_TOKENS(6) IS NOT NULL THEN
			LOG_IMPORT_ERROR('A feeder segment priority was specified for the import, but no feeder segment was.',
				p_SUCCESS);
		END IF;

		-- DID WE SPECIFY A LOSS FACTOR?
		IF v_TOKENS(5) IS NOT NULL AND v_TOKENS(5) <> '0' THEN
			LOG_IMPORT_ERROR('A feeder segment loss factor was specified for the import, but no feeder segment was.',
			p_SUCCESS);
		END IF;
	ELSE

		IF v_F_NOT_SPECIFIED THEN
			LOG_IMPORT_ERROR('A feeder segment was specified for the import, but no feeder was specified.',
							p_SUCCESS);
		END IF;

		-- GET THE PRIORITY FACTOR
		IF v_TOKENS(6) IS NOT NULL THEN
			v_PRIORITY := IMPORT_NUMBER(v_TOKENS(6),
										'Priority factor: ',
										p_SUCCESS);
		END IF;

		v_FS_ID := EI.GET_ID_FROM_IDENTIFIER(v_EXT_IDENT, EC.ED_TX_FEEDER_SEGMENT, 1);
		IF v_FS_ID IS NULL AND p_SUCCESS THEN

			v_NAME := ENTITY_UTIL.RESOLVE_ENTITY_NAME_CONFLICT(v_EXT_IDENT, EC.ED_TX_FEEDER_SEGMENT);
			IO.PUT_TX_FEEDER_SEGMENT(v_FS_ID,
									v_NAME,
									v_EXT_IDENT,
									'Created by the transmission network import on ' || SYSDATE || '.',
									0,
									v_EXT_IDENT,
									v_F_ID,
									v_BEGIN_DATE,
									v_END_DATE,
									v_PRIORITY);

		ELSIF p_SUCCESS THEN

			-- UPDATE THE FEEDER
			UPDATE TX_FEEDER_SEGMENT FS
				SET FS.BEGIN_DATE = LEAST(FS.BEGIN_DATE, v_BEGIN_DATE),
					FS.END_DATE = CASE WHEN FS.END_DATE IS NULL OR v_END_DATE IS NULL THEN
										NULL
									  ELSE
										GREATEST(FS.END_DATE, v_END_DATE)
									  END,
					FS.FEEDER_ID = v_F_ID,
					FS.PRIORITY = NVL(v_PRIORITY, FS.PRIORITY)
				WHERE FS.FEEDER_SEGMENT_ID = v_FS_ID;
		END IF;

		-- GET THE LOSS FACTOR
		v_EXT_IDENT := v_TOKENS(5);
		IF v_EXT_IDENT IS NOT NULL AND v_EXT_IDENT <> '0' THEN
			v_LF_ID := EI.GET_ID_FROM_IDENTIFIER(v_EXT_IDENT, EC.ED_LOSS_FACTOR, 1);

			IF v_LF_ID IS NULL THEN
				LOG_IMPORT_ERROR('The specified loss factor external identifier: ' || v_EXT_IDENT ||
					'does not correspond to any loss factor.',
					p_SUCCESS);
			END IF;

			IF p_SUCCESS THEN

				UT.PUT_TEMPORAL_DATA('TX_FEEDER_SEGMENT_LOSS_FACTOR',
									v_BEGIN_DATE,
									v_END_DATE,
									TRUE,
									TRUE,
									'FEEDER_SEGMENT_ID',
									v_FS_ID,
									TRUE,
									'LOSS_FACTOR_ID',
									v_LF_ID,
									FALSE);

			END IF;

		ELSIF v_EXT_IDENT = '0' AND p_SUCCESS THEN
			-- AN EXTERNAL IDENTIFIER OF '0' MEANS DELETE ALL EXISTING ASSIGNMENTS
			-- FOR THE GIVEN DATE RANGE

			-- TRUNCATE ANY ASSIGNMENTS EXTENDING INTO THIS PERIOD
			UPDATE TX_FEEDER_SEGMENT_LOSS_FACTOR
			SET END_DATE = v_BEGIN_DATE - 1
			WHERE NVL(END_DATE, CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE
				AND BEGIN_DATE < v_BEGIN_DATE
				AND FEEDER_SEGMENT_ID = v_FS_ID;

			IF v_END_DATE IS NOT NULL THEN

				UPDATE TX_FEEDER_SEGMENT_LOSS_FACTOR
				SET BEGIN_DATE = v_END_DATE + 1
				WHERE BEGIN_DATE <= v_END_DATE
					AND NVL(END_DATE, CONSTANTS.HIGH_DATE) > v_END_DATE
					AND FEEDER_SEGMENT_ID = v_FS_ID;
			END IF;

			DELETE FROM TX_FEEDER_SEGMENT_LOSS_FACTOR LF
			WHERE LF.FEEDER_SEGMENT_ID = v_FS_ID
				AND LF.BEGIN_DATE <= NVL(v_END_DATE, CONSTANTS.HIGH_DATE)
				AND NVL(LF.END_DATE, CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE;

		END IF;
	END IF;

END TX_NETWORK_IMPORT;
-----------------------------------------------------------------------------
PROCEDURE MARKET_PRICE_IMPORT
	(
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_TOKENS PARSE_UTIL.STRING_TABLE;
	v_INDEX NUMBER;

	v_PRICE_DATE DATE;
	v_PRICE_CODE VARCHAR2(10);
	v_MARKET_PRICE_ID NUMBER(9);
	v_MARKET_PRICE_INTERVAL MARKET_PRICE.MARKET_PRICE_INTERVAL%TYPE;

	v_LIMIT NUMBER(9);
	v_INTERVAL_DIVISOR NUMBER(9);
	v_COUNT NUMBER(9);
	v_CONTINUE_LINE BOOLEAN;
	v_NUMBER_TEXT VARCHAR2(32);
	v_PRICE_VAL NUMBER;

	v_IS_SUB_DAILY BOOLEAN;

	v_STATUS NUMBER(9);

BEGIN

	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER, v_TOKENS);
	REMOVE_NULL_TOKENS(v_TOKENS);
	v_INDEX := v_TOKENS.FIRST;

	-- FIND THE MARKET PRICE
	v_MARKET_PRICE_ID := NULL;
	ID.ID_FOR_MARKET_PRICE(v_TOKENS(v_INDEX), FALSE, v_MARKET_PRICE_ID);

	IF NVL(v_MARKET_PRICE_ID,0) <= 0 THEN
		LOG_IMPORT_ERROR( 'Market Price: '|| v_TOKENS(v_INDEX) || ' not found.',
						p_SUCCESS);
	END IF;

	-- TEST THE MARKET PRICE CODE
	v_INDEX := v_TOKENS.NEXT(v_INDEX);
	v_PRICE_CODE := UPPER(NVL(v_TOKENS(v_INDEX),'?'));

	IF v_PRICE_CODE <> 'F' AND v_PRICE_CODE <> 'A' AND v_PRICE_CODE <> 'P' THEN
		LOG_IMPORT_ERROR('INVALID MARKET CODE: ' || v_PRICE_CODE,
						p_SUCCESS);
	END IF;

	-- PARSE THE DATE
	v_INDEX := v_TOKENS.NEXT(v_INDEX);
	v_PRICE_DATE := NVL(IMPORT_DATE(v_TOKENS(v_INDEX), DEFAULT_DATE_FORMAT, 'Price Date: ',
					 			p_SUCCESS), SYSDATE);

	IF v_MARKET_PRICE_ID > 0 THEN
		v_MARKET_PRICE_INTERVAL := DATE_UTIL.GET_INTERVAL_FOR_MARKET_PRICE(v_MARKET_PRICE_ID);
		-- USE THE INTERVAL TO GUESS AT THE NUMBER OF MARKET PRICE POINTS
		-- BUT DON'T THROW AN ERROR OR STOP DML IF YOU HAVE THE INCORRECT NUMBER
		-- OF DATA POINTS, JUST ASSUME THE IMPORT DOESN'T WANT TO PUT DATA THERE
		-- SAME FOR NULL DATA POINTS (",,,")

		v_IS_SUB_DAILY := DATE_UTIL.IS_SUB_DAILY(v_MARKET_PRICE_INTERVAL);

		IF v_IS_SUB_DAILY THEN

			v_LIMIT := DATE_UTIL.GET_INTERVAL_DIVISOR(CONSTANTS.INTERVAL_DAY,
														v_MARKET_PRICE_INTERVAL,
														v_PRICE_DATE,
														GA.LOCAL_TIME_ZONE,
														NULL);
			v_INTERVAL_DIVISOR := DATE_UTIL.GET_INTERVAL_DIVISOR(CONSTANTS.INTERVAL_DAY,
																	v_MARKET_PRICE_INTERVAL,
																	v_PRICE_DATE,
																	'GMT',
																	NULL);

			-- IF THE INTERVAL IS SUB-DAILY THEN WE CONVERT TO CUT TIME
			-- TO HANDLE DST, IF WE ARE DAILY+, THEN DON'T CONVERT TO CUT TIME
			-- SINCE WE DON'T HAVE TO HANDLE DST
			v_PRICE_DATE := TO_CUT(v_PRICE_DATE, GA.LOCAL_TIME_ZONE);
		ELSE
			v_LIMIT := 1;
		END IF;

		v_INDEX := v_TOKENS.NEXT(v_INDEX);
		v_COUNT := 1;
		v_CONTINUE_LINE := TRUE;

		WHILE v_COUNT <= v_LIMIT AND v_TOKENS.EXISTS(v_INDEX) AND v_CONTINUE_LINE LOOP
		  v_NUMBER_TEXT := v_TOKENS(v_INDEX);

		  IF v_NUMBER_TEXT IS NOT NULL THEN
			  -- IF WE FAIL TO CONVERT THE NUMBER, THEN DON'T CONTINUE THE LINE,
			  -- WE'RE PROBABLY
			  v_PRICE_VAL := IMPORT_NUMBER(v_NUMBER_TEXT,
										  'Price Value ',
										  v_CONTINUE_LINE);

			  IF NOT v_CONTINUE_LINE THEN
				  p_SUCCESS := v_CONTINUE_LINE;
			  END IF;

			  -- STILL CAN PERFORM DML?
			  IF p_SUCCESS THEN
			  	  IF v_IS_SUB_DAILY THEN
				  	  v_PRICE_DATE := v_PRICE_DATE + 1 / v_INTERVAL_DIVISOR;
				  END IF;

				  -- NO DST HANLDING IS NEEDED WHEN THE INTERVAL IS SUB-DAILY
				  PR.PUT_MARKET_PRICE_VALUE(v_MARKET_PRICE_ID,
				  							CASE WHEN v_IS_SUB_DAILY THEN
												TRIM(SUBSTR(FROM_CUT_AS_HED(v_PRICE_DATE,
														GA.CUT_TIME_ZONE, 'MI5'),1,10))
											ELSE
												TRIM(FROM_CUT_AS_HED(v_PRICE_DATE,
														GA.CUT_TIME_ZONE,
														GET_INTERVAL_ABBREVIATION(v_MARKET_PRICE_INTERVAL)))
											END,
											CASE WHEN v_IS_SUB_DAILY THEN
												TRIM(SUBSTR(FROM_CUT_AS_HED(v_PRICE_DATE,
														GA.CUT_TIME_ZONE, 'MI5'),12))
											ELSE
												NULL
											END,
											v_PRICE_CODE,
											NULL,
											v_PRICE_VAL,
											GA.CUT_TIME_ZONE,
											v_STATUS);

				  ERRS.VALIDATE_STATUS('PR.PUT_MARKET_PRICE_VALUE',
				  		v_STATUS);
			  END IF;
		  END IF;

		  v_COUNT := v_COUNT + 1;
		  v_INDEX := v_TOKENS.NEXT(v_INDEX);
		END LOOP;

	   -- +3 for the first 3 fields, + hour to give a padding to account for DST
	  IF v_IS_SUB_DAILY THEN
		  IF v_TOKENS.COUNT > (v_INTERVAL_DIVISOR + 3 + v_INTERVAL_DIVISOR / 24) THEN
			LOG_IMPORT_WARN( v_LIMIT || ' values expected.  ' || (v_TOKENS.COUNT - 3)
			   || ' encountered.  These extra values will be ignored.' || GET_DST_WARNING_MESSAGE(v_PRICE_DATE));
		  END IF;
	  ELSE
	  	  -- THREE FIRST FIELDS, PLUS THE PRICE VALUE
	  	  IF v_TOKENS.COUNT > (4) THEN
		  	LOG_IMPORT_WARN( '1 value expected.  ' || (v_TOKENS.COUNT - 3)
			   || ' encountered.  These extra values will be ignored.');
		  END IF;
	  END IF;
	END IF;

END MARKET_PRICE_IMPORT;
-----------------------------------------------------------------------------
PROCEDURE WEATHER_DATA_IMPORT
	(
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_LOW_DATE IN OUT DATE,
	p_HIGH_DATE IN OUT DATE,
	p_STATION_PARAMS IN OUT STRING_COLLECTION,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_TOKENS PARSE_UTIL.STRING_TABLE;

	v_INDEX NUMBER;

	v_STATION_PARAM_STRING VARCHAR2(200);

	v_DATE DATE;

	v_PARAMETER_ID NUMBER(9);
	v_PARAMETER_NAME VARCHAR2(100);
	v_STATION_ID NUMBER(9);
	v_STATION_NAME VARCHAR2(100);
	v_PARAM_CODE VARCHAR2(32);

	v_LIMIT NUMBER(9);
	v_TEST PLS_INTEGER;
	v_INTERVAL_DIVISOR NUMBER(9);
	v_COUNT NUMBER(9);
	v_CONTINUE_LINE BOOLEAN;
	v_NUMBER_TEXT VARCHAR2(9);

	v_IS_COMPOSITE WEATHER_STATION.IS_COMPOSITE%TYPE;
	v_PARAM_INTERVAL WEATHER_PARAMETER.PARAMETER_INTERVAL%TYPE;

	v_CUT_DATE DATE;
	v_DATA NUMBER;

BEGIN
	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER, v_TOKENS);
	REMOVE_NULL_TOKENS(v_TOKENS);

	v_INDEX := v_TOKENS.FIRST;
    
	-- FIND THE STATION
	v_STATION_NAME := v_TOKENS(v_INDEX);
	v_STATION_ID := NULL;
	ID.ID_FOR_WEATHER_STATION(v_STATION_NAME, FALSE, v_STATION_ID);

	IF NVL(v_STATION_ID,0) <= 0 THEN
		LOG_IMPORT_ERROR( 'Weather Station: ' || v_STATION_NAME || ' not found.',
							p_SUCCESS);
	ELSE
		-- Check that this isn't a composite station
		SELECT WS.IS_COMPOSITE
		INTO v_IS_COMPOSITE
		FROM WEATHER_STATION WS
		WHERE WS.STATION_ID = v_STATION_ID;

		IF v_IS_COMPOSITE = 1 THEN
			LOG_IMPORT_ERROR('Weather Station: ' || v_STATION_NAME || ' is a composite station;'
				|| ' weather data cannot be saved for it.', p_SUCCESS);
		END IF;
	END IF;





	-- FIND THE PARAMETER
	v_INDEX := v_TOKENS.NEXT(v_INDEX);
	v_PARAMETER_NAME := v_TOKENS(v_INDEX);
	v_PARAMETER_ID := NULL;
	ID.ID_FOR_WEATHER_PARAMETER(v_PARAMETER_NAME, FALSE, v_PARAMETER_ID);

	IF NVL(v_PARAMETER_ID,0) <= 0 THEN
		LOG_IMPORT_ERROR( 'Weather Parameter: ' || v_PARAMETER_NAME || ' not found.',
							p_SUCCESS);
	ELSE
		SELECT WP.IS_COMPOSITE
		INTO v_IS_COMPOSITE
		FROM WEATHER_PARAMETER WP
		WHERE WP.PARAMETER_ID = v_PARAMETER_ID;

		SELECT WP.PARAMETER_INTERVAL
		INTO v_PARAM_INTERVAL
		FROM WEATHER_PARAMETER WP
		WHERE WP.PARAMETER_ID = v_PARAMETER_ID;

		IF v_IS_COMPOSITE = 1 THEN
			LOG_IMPORT_ERROR('Weather Parameter: ' || v_PARAMETER_NAME || ' is a composite parameter;'
				|| ' weather data cannot be saved for it.', p_SUCCESS);
		END IF;
	END IF;

	IF v_STATION_ID > 0 AND v_PARAMETER_ID > 0 THEN

		SELECT COUNT(1)
		INTO v_TEST
		FROM WEATHER_STATION_PARAMETER WSP
		WHERE WSP.STATION_ID = v_STATION_ID
			AND WSP.PARAMETER_ID = v_PARAMETER_ID;

		IF v_TEST <= 0 THEN
			LOG_IMPORT_ERROR('Weather Parameter: ' || v_PARAMETER_NAME || ' is not '
				|| 'associated with Weather Station: ' || v_STATION_NAME || '.', p_SUCCESS);
		END IF;
	END IF;

	-- get the paramter code
	v_INDEX := v_TOKENS.NEXT(v_INDEX);
	v_PARAM_CODE := UPPER(SUBSTR(v_TOKENS(v_INDEX),1,1));

	IF v_PARAM_CODE IS NULL THEN
		LOG_IMPORT_ERROR( 'The parameter code is null.' ,
							p_SUCCESS);
	END IF;

	-- MAINTAIN A LIST OF UNIQUE STATION ID,PARAM CODE strings
	v_STATION_PARAM_STRING := TRIM(UPPER(v_STATION_ID)) || ',' ||
								TRIM(UPPER(v_PARAM_CODE));

	IF NOT UT.STRING_COLLECTION_CONTAINS(p_STATION_PARAMS,
						v_STATION_PARAM_STRING, FALSE) THEN
		p_STATION_PARAMS.EXTEND();
		p_STATION_PARAMS(p_STATION_PARAMS.LAST) := v_STATION_PARAM_STRING;
	END IF;

	-- PARSE THE DATE
	v_INDEX := v_TOKENS.NEXT(v_INDEX);
	v_DATE := NVL(IMPORT_DATE(v_TOKENS(v_INDEX),
							DEFAULT_DATE_FORMAT,
							'Weather Data Date',
							p_SUCCESS), SYSDATE);

	IF p_HIGH_DATE IS NULL OR v_DATE > p_HIGH_DATE THEN
		p_HIGH_DATE := v_DATE;
	END IF;

	IF p_LOW_DATE IS NULL OR v_DATE < p_LOW_DATE THEN
		p_LOW_DATE := v_DATE;
	END IF;

	v_LIMIT := DATE_UTIL.GET_INTERVAL_DIVISOR(CONSTANTS.INTERVAL_DAY,
											GET_INTERVAL_ABBREVIATION(v_PARAM_INTERVAL),
											v_DATE,
											GA.LOCAL_TIME_ZONE,
											NULL);

	v_INTERVAL_DIVISOR := DATE_UTIL.GET_INTERVAL_DIVISOR(CONSTANTS.INTERVAL_DAY,
														GET_INTERVAL_ABBREVIATION(v_PARAM_INTERVAL),
														v_DATE,
														'GMT',
														NULL);



	IF ( (v_TOKENS.COUNT - 4) < (v_INTERVAL_DIVISOR*(23/24)) OR
		(v_TOKENS.COUNT - 4) > (v_INTERVAL_DIVISOR*(25/24)) ) THEN

		IF UPPER(v_PARAM_INTERVAL) = 'DAY' THEN
			LOG_IMPORT_WARN('Expected 1 data point for Parameter: ' ||
				v_PARAMETER_NAME || ' because it has interval ' || v_PARAM_INTERVAL || ', encountered ' ||
				(v_TOKENS.COUNT - 4) || '.');
		ELSE
			LOG_IMPORT_WARN('Expected between ' || TRUNC((v_INTERVAL_DIVISOR*(23/24)),0) ||
				' and ' || TRUNC((v_INTERVAL_DIVISOR*(25/24)),0) || ' data points for Parameter: ' ||
				v_PARAMETER_NAME || ' because it has interval ' || v_PARAM_INTERVAL || ', encountered ' ||
				(v_TOKENS.COUNT - 4) || '.');
		END IF;
	END IF;

	v_INDEX := v_TOKENS.NEXT(v_INDEX);
	v_COUNT := 1;
	v_CONTINUE_LINE := TRUE;

	v_CUT_DATE := TO_CUT(v_DATE, GA.LOCAL_TIME_ZONE);

	WHILE v_COUNT <= v_LIMIT AND v_TOKENS.EXISTS(v_INDEX) AND v_CONTINUE_LINE LOOP
		v_NUMBER_TEXT := v_TOKENS(v_INDEX);

		v_DATA := NVL(IMPORT_NUMBER(v_NUMBER_TEXT,
									'Weather Data',
									v_CONTINUE_LINE),0);

		IF p_SUCCESS THEN
			MERGE INTO STATION_PARAMETER_VALUE VAL
			USING (SELECT v_STATION_ID AS STATION_ID,
						v_PARAMETER_ID AS PARAMETER_ID,
						CASE WHEN UPPER(v_PARAM_INTERVAL) = 'DAY' THEN v_DATE
							ELSE (v_CUT_DATE + ((v_COUNT)/v_INTERVAL_DIVISOR)) END AS PARAM_DATE,
						v_PARAM_CODE AS PARAMETER_CODE,
						v_DATA AS PARAMETER_VALUE
					FROM DUAL) PARM
			ON (VAL.STATION_ID = PARM.STATION_ID AND
				VAL.CASE_ID = GA.BASE_CASE_ID AND
				VAL.PARAMETER_ID = PARM.PARAMETER_ID AND
				VAL.PARAMETER_CODE = PARM.PARAMETER_CODE AND
				VAL.PARAMETER_DATE = PARM.PARAM_DATE)
			WHEN MATCHED THEN
				UPDATE SET VAL.PARAMETER_VAL = PARM.PARAMETER_VALUE
			WHEN NOT MATCHED THEN
				INSERT VALUES (GA.BASE_CASE_ID, PARM.STATION_ID, PARM.PARAMETER_ID,
					PARM.PARAMETER_CODE, PARM.PARAM_DATE, PARM.PARAMETER_VALUE);
          
	        IF UPPER(get_dictionary_value('MDR Backend',0, 'System', 'GA Settings', 'General')) = 'TRUE' AND  UPPER(v_PARAM_INTERVAL) != 'DAY'  THEN
	          MERGE INTO STATION_PARAMETER_VALUE_TEMP VAL
	          USING (SELECT v_STATION_NAME AS STATION_NAME,
	              v_PARAMETER_NAME AS PARAMETER_NAME,
	              (v_CUT_DATE + ((v_COUNT)/v_INTERVAL_DIVISOR)) AS PARAM_DATE,
	              v_PARAM_CODE AS PARAMETER_CODE,
	              v_DATA AS PARAMETER_VALUE
	              FROM DUAL) PARM
	          ON (VAL.STATION_NAME = PARM.STATION_NAME AND
	              VAL.PARAMETER_NAME = PARM.PARAMETER_NAME AND
	              VAL.PARAMETER_CODE = PARM.PARAMETER_CODE AND
	              VAL.PARAMETER_DATE = PARM.PARAM_DATE)
	          WHEN MATCHED THEN
	              UPDATE SET VAL.PARAMETER_VAL = PARM.PARAMETER_VALUE
	          WHEN NOT MATCHED THEN
	              INSERT VALUES (PARM.STATION_NAME, PARM.PARAMETER_NAME,
	                  PARM.PARAMETER_CODE, PARM.PARAM_DATE, PARM.PARAMETER_VALUE);
	      END IF;      
		END IF;

		v_COUNT := v_COUNT + 1;
		v_INDEX := v_TOKENS.NEXT(v_INDEX);
	END LOOP;

END WEATHER_DATA_IMPORT;
-----------------------------------------------------------------------------
PROCEDURE POST_WEATHER_DATA
	(
	p_STATION_PARAMS IN STRING_COLLECTION,
	p_LOW_DATE IN DATE,
	p_HIGH_DATE IN DATE,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_TOKENS GA.STRING_TABLE;

	v_INDEX NUMBER;
BEGIN

	v_INDEX := p_STATION_PARAMS.FIRST();

	WHILE p_STATION_PARAMS.EXISTS(v_INDEX) AND p_STATION_PARAMS(v_INDEX) IS NOT NULL LOOP
		UT.TOKENS_FROM_STRING(p_STATION_PARAMS(v_INDEX), ',', v_TOKENS);

		BEGIN
			IF p_SUCCESS THEN
				WR.POST_STATION_READINGS(TO_NUMBER(v_TOKENS(1)),
						  SUBSTR(v_TOKENS(2),1,1),
						  p_LOW_DATE,
						  p_HIGH_DATE);
			END IF;
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE(p_EXTRA_MESSAGE => 'Unanticipated exception during Weather Data import while posting readings.');
				p_SUCCESS := FALSE;
		END;

	v_INDEX := p_STATION_PARAMS.NEXT(v_INDEX);
	END LOOP;

END POST_WEATHER_DATA;
----------------------------------------------------------------------------
PROCEDURE VALIDATE_PROFILE_INTERVAL
	(
	p_PROFILE_ID IN NUMBER,
	p_PROFILE_INTERVAL IN NUMBER
	) AS

	v_ACTUAL_INTERVAL NUMBER(9);
	v_PROFILE_NAME VARCHAR2(64);

BEGIN

	SELECT PR.PROFILE_INTERVAL, PR.PROFILE_NAME INTO v_ACTUAL_INTERVAL, v_PROFILE_NAME
	FROM LOAD_PROFILE PR
	WHERE PR.PROFILE_ID = p_PROFILE_ID;

	IF v_ACTUAL_INTERVAL < p_PROFILE_INTERVAL THEN
		LOG_IMPORT_WARN('Expected Interval of ' || v_ACTUAL_INTERVAL || ' for Load Profile ' ||
			v_PROFILE_NAME || ' instead one of ' || p_PROFILE_INTERVAL || ' was encountered.');
    ELSIF v_ACTUAL_INTERVAL > p_PROFILE_INTERVAL THEN
	    LOG_IMPORT_WARN('Expected Interval of ' || v_ACTUAL_INTERVAL || ' for Load Profile ' ||
			v_PROFILE_NAME || ' instead one of ' || p_PROFILE_INTERVAL || ' was encountered.');
    END IF;

END VALIDATE_PROFILE_INTERVAL;
----------------------------------------------------------------------------
PROCEDURE VALIDATE_PROFILE_INTERVAL
	(
	p_PROFILE_ID IN NUMBER,
	p_PROFILE_INTERVAL IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_ACTUAL_INTERVAL NUMBER(9);
	v_PROFILE_NAME VARCHAR2(64);

BEGIN

	SELECT PR.PROFILE_INTERVAL, PR.PROFILE_NAME INTO v_ACTUAL_INTERVAL, v_PROFILE_NAME
	FROM LOAD_PROFILE PR
	WHERE PR.PROFILE_ID = p_PROFILE_ID;

	IF v_ACTUAL_INTERVAL <> p_PROFILE_INTERVAL THEN
		LOG_IMPORT_ERROR('Expected Interval of ' || v_ACTUAL_INTERVAL || ' for Load Profile ' ||
			v_PROFILE_NAME || ' instead one of ' || p_PROFILE_INTERVAL || ' was encountered.', p_SUCCESS);
    END IF;

END VALIDATE_PROFILE_INTERVAL;
----------------------------------------------------------------------------
PROCEDURE VALIDATE_PROFILE_TYPE
(
	p_PROFILE_ID IN NUMBER,
	p_EXPECTED_TYPE IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
) AS

	v_ACTUAL_TYPE VARCHAR2(64);
	v_PROFILE_NAME VARCHAR2(64);

BEGIN

	SELECT PR.PROFILE_TYPE, PR.PROFILE_NAME INTO v_ACTUAL_TYPE, v_PROFILE_NAME
	FROM LOAD_PROFILE PR
	WHERE PR.PROFILE_ID = p_PROFILE_ID;

	IF UPPER(v_ACTUAL_TYPE) <> UPPER(p_EXPECTED_TYPE) THEN
		LOG_IMPORT_ERROR('Expected profile type ' || p_EXPECTED_TYPE || ' for Load Profile ' ||
			v_PROFILE_NAME || '(' || p_PROFILE_ID || ').  The actual profile type for the profile is ' || v_ACTUAL_TYPE,
			p_SUCCESS);
	END IF;
END VALIDATE_PROFILE_TYPE;
-----------------------------------------------------------------------------
FUNCTION CHECK_CHAN_RELATION_FOR_DATE
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_CHANNEL_ID IN NUMBER,
	p_DATE IN DATE
	) RETURN BOOLEAN IS

	v_TEST NUMBER(9);

BEGIN

	SELECT COUNT(1) INTO v_TEST
	FROM ACCOUNT_SERVICE_LOCATION ASL,
		SERVICE_LOCATION_METER SLM,
		TX_SUB_STATION_METER_POINT PT
	WHERE ASL.ACCOUNT_ID = p_ACCOUNT_ID
		AND ASL.SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID
		AND p_DATE BETWEEN ASL.BEGIN_DATE AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE)
		AND SLM.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
		AND SLM.METER_ID = p_METER_ID
		AND p_DATE BETWEEN SLM.BEGIN_DATE AND NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE)
		AND PT.RETAIL_METER_ID = p_METER_ID
		AND PT.METER_POINT_ID = p_CHANNEL_ID
		AND p_DATE BETWEEN PT.BEGIN_DATE AND NVL(PT.END_DATE, CONSTANTS.HIGH_DATE);

	IF v_TEST = 0 THEN
		RETURN FALSE;
	ELSE
		RETURN TRUE;
	END IF;

END CHECK_CHAN_RELATION_FOR_DATE;
-----------------------------------------------------------------------------
FUNCTION GET_DEFAULT_PROFILE_STATUS RETURN VARCHAR2 IS
BEGIN

	RETURN NVL(GET_DICTIONARY_VALUE('Profile Status', CONSTANTS.GLOBAL_MODEL,
		'Data Import', 'Import Profile'), 'Production');

END GET_DEFAULT_PROFILE_STATUS;
-----------------------------------------------------------------------------
PROCEDURE CALCULATE_PROFILE_STATS
	(
	p_PROFILE_ID IN NUMBER
	) AS
	v_STATUS NUMBER;
	v_PROFILE_STATUS LOAD_PROFILE_STATISTICS.PROFILE_STATUS%TYPE;
BEGIN
	PF.PUT_HISTORICAL_PROFILE_STATS(p_PROFILE_ID, LOW_DATE, v_STATUS);
	ERRS.VALIDATE_STATUS('PF.PUT_HISTORICAL_PROFILE_STATS', v_STATUS);

	v_PROFILE_STATUS := GET_DEFAULT_PROFILE_STATUS;

	UPDATE LOAD_PROFILE_STATISTICS
	SET PROFILE_STATUS = v_PROFILE_STATUS
	WHERE PROFILE_ID = p_PROFILE_ID;

END CALCULATE_PROFILE_STATS;
-----------------------------------------------------------------------------
PROCEDURE LOAD_HISTORICAL_PROFILE
	(
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_LP_NAME VARCHAR2(128);
	v_LP_ID NUMBER(9) := 0;

	v_LIB_NAME VARCHAR2(128);
	v_LIB_ID NUMBER(9) := 0;

	v_CAL_NAME VARCHAR2(128);
	v_CAL_ID NUMBER(9) := 0;

	v_PROFILE_INTERVAL NUMBER;

	v_PROFILE_DATE DATE;
	v_INDEX NUMBER(9);
	v_TOKENS PARSE_UTIL.STRING_TABLE;

	v_PROFILE_TBL GA.NUMBER_TABLE;

	v_STATUS NUMBER;

	v_CONTINUE_LINE BOOLEAN;

BEGIN

	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER, v_TOKENS);
	REMOVE_NULL_TOKENS(v_TOKENS);

	v_LP_NAME := v_TOKENS(2);
	v_LIB_NAME := v_TOKENS(3);
	v_CAL_NAME := v_TOKENS(4);

	v_PROFILE_DATE := DATA_IMPORT.IMPORT_DATE(v_TOKENS(5),
											DEFAULT_DATE_FORMAT,
											'Profile Date',
											p_SUCCESS);


	-- Even though we don't import into CUT time, and we always have 24 hours each day,
	-- we still search for the interval in the DST range to try to find the correct interval
	-- if outside of the DST padding then we can't recognize the interval
	IF v_TOKENS.COUNT = 6 THEN
		v_PROFILE_INTERVAL := 1;
	ELSIF v_TOKENS.COUNT BETWEEN 28 AND 30 THEN
		v_PROFILE_INTERVAL := 24;
	ELSIF v_TOKENS.COUNT BETWEEN 51 AND 55 THEN
		v_PROFILE_INTERVAL := 48;
	ELSIF v_TOKENS.COUNT BETWEEN 97 AND 105 THEN
		v_PROFILE_INTERVAL := 96;
	ELSE
		LOG_IMPORT_ERROR('File contains an unexpected number of historical data columns (' || (v_TOKENS.COUNT - 5) ||
				  '). The profile''s interval could not be determined.',
				  p_SUCCESS);
	END IF;

	IF v_LIB_NAME <> g_PREV_LIB_NAME OR g_PREV_LIB_NAME IS NULL
		OR v_LP_NAME <> g_PREV_LP_NAME OR g_PREV_LP_NAME IS NULL
		OR v_CAL_NAME <> g_PREV_CAL_NAME OR g_PREV_CAL_NAME IS NULL THEN

		-- CALCULATE STATS
		IF g_LAST_LP_ID <> 0 AND p_SUCCESS THEN
			CALCULATE_PROFILE_STATS(g_LAST_LP_ID);
		END IF;

		g_PREV_LIB_NAME := v_LIB_NAME;
		g_PREV_LP_NAME := v_LP_NAME;
		g_PREV_CAL_NAME := v_CAL_NAME;

		IF p_SUCCESS THEN
			ID.ID_FOR_LOAD_PROFILE_LIBRARY(v_LIB_NAME, TRUE, v_LIB_ID);
			ID.ID_FOR_LOAD_PROFILE(v_LIB_NAME, v_LP_NAME, FALSE, v_LP_ID);

		  IF v_LP_ID <= 0 THEN

			  -- WE NEED TO CREATE THE LP
			  ID.ID_FOR_LOAD_PROFILE(v_LIB_NAME, v_LP_NAME, TRUE, v_LP_ID);
			  IF p_SUCCESS THEN
				UPDATE LOAD_PROFILE
					SET PROFILE_INTERVAL = v_PROFILE_INTERVAL,
						PROFILE_TYPE = 'Historical'
					WHERE PROFILE_ID = v_LP_ID;
			  END IF;
		  ELSE
		   -- VALIDATE THE LOAD PROFILE FIELDS
		   VALIDATE_PROFILE_TYPE(v_LP_ID, 'Historical', p_SUCCESS);
		   VALIDATE_PROFILE_INTERVAL(v_LP_ID, v_PROFILE_INTERVAL);

		  END IF;

		  g_LAST_LP_ID := v_LP_ID;
		END IF;

		IF p_SUCCESS THEN
			ID.ID_FOR_CALENDAR ( v_CAL_NAME, TRUE, v_CAL_ID);
			PUT_CALENDAR_PROFILE(v_CAL_ID, v_LP_ID);
		END IF;

	END IF;

	-- Do we have too few or too many fields?
	IF (v_PROFILE_INTERVAL+5) < v_TOKENS.COUNT THEN
		LOG_IMPORT_WARN('There are more data fields given (' || (v_TOKENS.COUNT - 5) || ') than expected ' ||
			'for the profile''s interval (' || v_PROFILE_INTERVAL || ').  The extra fields will be ignored.');
	ELSIF (v_PROFILE_INTERVAL+5) > v_TOKENS.COUNT THEN
		LOG_IMPORT_WARN('The are less data fields given (' || (v_TOKENS.COUNT - 5) || ') than expected ' ||
			'for the profile''s interval (' || v_PROFILE_INTERVAL || ').  No data will be inserted for the missing time.');
	END IF;

	v_CONTINUE_LINE := TRUE;
	FOR v_INDEX IN 6..v_TOKENS.COUNT LOOP
		EXIT WHEN v_INDEX > (5 + v_PROFILE_INTERVAL);

		v_PROFILE_TBL(v_INDEX-5) := NVL(IMPORT_NUMBER(v_TOKENS(v_INDEX),
											'Historical Usage Val',
											v_CONTINUE_LINE),0);
		IF v_CONTINUE_LINE = FALSE THEN
			p_SUCCESS := v_CONTINUE_LINE;
			EXIT;
		END IF;
	END LOOP;

	IF p_SUCCESS THEN
		PF.PUT_LOAD_PROFILE_POINTS_TBL(g_LAST_LP_ID,
										1,
										v_PROFILE_DATE,
										LOW_DATE,
										GA.LOCAL_TIME_ZONE,
										v_PROFILE_TBL,
										v_PROFILE_INTERVAL,
										v_STATUS);
		ERRS.VALIDATE_STATUS('PF.PUT_HISTORICAL_PROFILE_TBL',
			v_STATUS);
	END IF;

END LOAD_HISTORICAL_PROFILE;
-----------------------------------------------------------------------------
PROCEDURE PUT_WRF_PARAM
(
p_PARAMETER_NAME IN VARCHAR2,
p_PROFILE_ID IN NUMBER,
p_VAR_NBR IN NUMBER
) AS

	v_PARAM_ID NUMBER(9);

BEGIN

	IF p_PARAMETER_NAME IS NULL OR LENGTH(p_PARAMETER_NAME) = 0 THEN
		RETURN;
	END IF;

	ID.ID_FOR_WEATHER_PARAMETER(p_PARAMETER_NAME, TRUE, v_PARAM_ID);
	UPDATE LOAD_PROFILE_WRF_WEATHER
	SET PARAMETER_ID = v_PARAM_ID
	WHERE PROFILE_ID = p_PROFILE_ID
		AND VARIABLE_NBR = p_VAR_NBR;
	IF SQL%NOTFOUND THEN
		INSERT INTO LOAD_PROFILE_WRF_WEATHER(PROFILE_ID, VARIABLE_NBR, PARAMETER_ID)
		VALUES (p_PROFILE_ID, p_VAR_NBR, v_PARAM_ID);
	END IF;

END PUT_WRF_PARAM;
-----------------------------------------------------------------------------
PROCEDURE LOAD_WRF_PROFILE
	(
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_LP_NAME VARCHAR2(128);
	v_LP_ID NUMBER(9) := 0;

	v_LIB_NAME VARCHAR2(128);
	v_LIB_ID NUMBER(9) := 0;

	v_CAL_NAME VARCHAR2(128);
	v_CAL_ID NUMBER(9) := 0;

	v_STATION_NAME VARCHAR2(128);
	v_STATION_ID NUMBER(9);

	v_TEMPLATE_NAME VARCHAR2(128);
	v_TEMPLATE_ID NUMBER(9);
	v_TOKENS PARSE_UTIL.STRING_TABLE;

	v_STATUS NUMBER;

	v_WRF_LINE_NBR NUMBER;
	v_SEGMENT_MIN NUMBER;
	v_SEGMENT_MAX NUMBER;
	v_HOUR NUMBER;
	v_CONSTANT NUMBER;
    v_PROFILE_INTERVAL NUMBER;

	v_PARAMETER_1 VARCHAR2(32);
	v_COEFF_1 NUMBER;

	v_PARAMETER_2 VARCHAR2(32);
	v_COEFF_2 NUMBER;

	v_PARAMETER_3 VARCHAR2(32);
	v_COEFF_3 NUMBER;

	v_PARAMETER_4 VARCHAR2(32);
	v_COEFF_4 NUMBER;

	v_PARAMETER_5 VARCHAR2(32);
	v_COEFF_5 NUMBER;

	v_WRF_ID NUMBER(9);

BEGIN
	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER, v_TOKENS);

	IF v_TOKENS.COUNT < 15 THEN
		LOG_IMPORT_ERROR('Does not have enough ' || 'fields.  At least 15 are necessary for WRF profiles.',
				p_SUCCESS);
	END IF;

	v_LIB_NAME := v_TOKENS(2);
	v_CAL_NAME := v_TOKENS(3);
	v_STATION_NAME := v_TOKENS(4);
	v_LP_NAME := v_TOKENS(5);
	v_TEMPLATE_NAME := v_TOKENS(6);

	ID.ID_FOR_WEATHER_STATION(v_STATION_NAME, FALSE, v_STATION_ID);

	IF v_STATION_ID <= 0 THEN
		LOG_IMPORT_ERROR('Unregonized station: ' || v_STATION_NAME,
						 p_SUCCESS);
	END IF;

	BEGIN
		SELECT TEMPLATE_ID INTO v_TEMPLATE_ID
		FROM TEMPLATE
		WHERE TEMPLATE_NAME = v_TEMPLATE_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			v_TEMPLATE_ID := 0;

			LOG_IMPORT_ERROR('Unregonized template: ' || v_TEMPLATE_NAME,
						 p_SUCCESS);
	END;

	-- 9/23/09 - BZ 21527 - DDZ - v_HOUR is imported
	-- earlier to calculate the profile interval for
	-- validation
	v_HOUR := IMPORT_NUMBER(v_TOKENS(7),
									'Hour: ',
									p_SUCCESS);

    v_PROFILE_INTERVAL := CASE WHEN v_HOUR = 0 THEN
                                    1
                                 ELSE
                                    24
                                 END;

	IF p_SUCCESS THEN
		ID.ID_FOR_LOAD_PROFILE_LIBRARY(v_LIB_NAME, TRUE, v_LIB_ID);
		ID.ID_FOR_LOAD_PROFILE(v_LIB_NAME, v_LP_NAME, FALSE, v_LP_ID);

		IF v_LP_ID <= 0 THEN
		  -- WE NEED TO CREATE THE LP
		  ID.ID_FOR_LOAD_PROFILE(v_LIB_NAME, v_LP_NAME, TRUE, v_LP_ID);
		  UPDATE LOAD_PROFILE
		  SET PROFILE_ALIAS = v_LP_NAME,
			  PROFILE_DESC = 'WRF for season day time '||v_TEMPLATE_NAME
								||' loaded from file on '
								||to_char(sysdate,'mm/dd/yyyy hh24:mi'),
			  PROFILE_TYPE = 'WRF',
			  PROFILE_SEASON = v_TEMPLATE_NAME,
			  PROFILE_STATION_ID = v_STATION_ID,
			  PROFILE_TEMPLATE_ID = v_TEMPLATE_ID,
			  PROFILE_SOURCE_BEGIN_DATE = TRUNC(SYSDATE,'YYYY'),
			  PROFILE_SOURCE_END_DATE = ADD_MONTHS(TRUNC(SYSDATE,'YYYY'),12),
			  PROFILE_SOURCE_ID = 0,
			  PROFILE_INTERVAL = v_PROFILE_INTERVAL,
			  PROFILE_SOURCE_VERSION = LOW_DATE,
			  PROFILE_OPERATION = '?',
			  PROFILE_ORIGIN = '?',
			  PROFILE_RATE_CLASS = '?',
			  PROFILE_DAY_TYPE= '?',
			  PROFILE_ACCOUNT_REF= '?',
			  PROFILE_METER_REF= '?',
			  PROFILE_SIC_CODE= '?',
			  PROFILE_SYSTEM_LOAD= '?',
			  PROFILE_ADJUSTMENT_OPTION= '?',
			  PROFILE_BREAKPOINT_INTERVAL= CONSTANTS.INTERVAL_HOUR,
			  IS_EXTERNAL_PROFILE = 0
		  WHERE PROFILE_ID = v_LP_ID;
		ELSE
		      VALIDATE_PROFILE_TYPE(v_LP_ID, 'WRF', p_SUCCESS);
              VALIDATE_PROFILE_INTERVAL(v_LP_ID, v_PROFILE_INTERVAL, p_SUCCESS);
		END IF;

		-- WORKS WITH EITHER CREATE OR UPDATE AS NEEDED
		-- 9/23/09 - BZ 21527 - DDZ - Load Profile Statistics should only be
		-- inserted if the load profile exists
        IF p_SUCCESS THEN
            PF.PUT_LOAD_PROFILE_STATISTICS
              (v_LP_ID,
              -110,
              LOW_DATE,
              LOW_DATE,
              HIGH_DATE,
              0,
              0,
              -9999999999.9999,
              -9999999999.9999,
              9999999999.9999,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              GET_DEFAULT_PROFILE_STATUS(),
              v_STATUS);
            ERRS.VALIDATE_STATUS('PF.PUT_LOAD_PROFILE_STATISTICS',
                     v_STATUS);
        END IF;
	END IF;

	IF p_SUCCESS THEN
		ID.ID_FOR_CALENDAR ( v_CAL_NAME, TRUE, v_CAL_ID);
		PUT_CALENDAR_PROFILE_LIBRARY ( v_CAL_ID, v_LIB_ID);
	END IF;

	v_WRF_LINE_NBR := IMPORT_NUMBER(v_TOKENS(8),
									'WRF NBR: ',
									p_SUCCESS);

	v_SEGMENT_MIN := IMPORT_NUMBER(v_TOKENS(9),
									'Segment Min: ',
									p_SUCCESS);

	v_SEGMENT_MAX := IMPORT_NUMBER(v_TOKENS(10),
									'Segment Max: ',
									p_SUCCESS);

	v_CONSTANT := IMPORT_NUMBER(v_TOKENS(13),
									'Constant: ',
									p_SUCCESS);

	v_PARAMETER_1 := v_TOKENS(14);
	v_COEFF_1 := IMPORT_NUMBER(v_TOKENS(15),
									'Coefficient 1: ',
									p_SUCCESS);

	IF v_TOKENS.COUNT >= 17 THEN
		v_PARAMETER_2 := v_TOKENS(16);
		v_COEFF_2 := IMPORT_NUMBER(v_TOKENS(17),
									'Coefficient 2: ',
									p_SUCCESS);
	ELSE
		v_PARAMETER_2 := NULL;
		v_COEFF_2 := NULL;
	END IF;

	IF v_TOKENS.COUNT >= 19 THEN
		v_PARAMETER_3 := v_TOKENS(18);
		v_COEFF_3 := IMPORT_NUMBER(v_TOKENS(19),
									  'Coefficient 3: ',
									  p_SUCCESS);
	ELSE
		v_PARAMETER_3 := NULL;
		v_COEFF_3 := NULL;
	END IF;

	IF v_TOKENS.COUNT >= 21 THEN
		v_PARAMETER_4 := v_TOKENS(20);
		v_COEFF_4 := IMPORT_NUMBER(v_TOKENS(21),
									'Coefficient 4: ',
									p_SUCCESS);
	ELSE
		v_PARAMETER_4 := NULL;
		v_COEFF_4 := NULL;
	END IF;

	IF v_TOKENS.COUNT >= 23 THEN
		v_PARAMETER_5 := v_TOKENS(22);
		v_COEFF_5 := IMPORT_NUMBER(v_TOKENS(23),
									'Coefficient 5: ',
									p_SUCCESS);
	ELSE
		v_PARAMETER_5 := NULL;
		v_COEFF_5 := NULL;
	END IF;

	IF p_SUCCESS THEN
		PUT_WRF_PARAM(v_PARAMETER_1, v_LP_ID, 0);
		PUT_WRF_PARAM(v_PARAMETER_2, v_LP_ID, 1);
		PUT_WRF_PARAM(v_PARAMETER_3, v_LP_ID, 2);
		PUT_WRF_PARAM(v_PARAMETER_4, v_LP_ID, 3);
		PUT_WRF_PARAM(v_PARAMETER_5, v_LP_ID, 4);

		PF.PUT_LOAD_PROFILE_WRF(v_LP_ID, v_WRF_LINE_NBR, LOW_DATE, v_SEGMENT_MIN, v_SEGMENT_MAX, v_WRF_ID);

		UPDATE LOAD_PROFILE_WRF_LINE
			SET COEFF_0 = v_CONSTANT,
				COEFF_1 = v_COEFF_1,
				COEFF_2 = v_COEFF_2,
				COEFF_3 = v_COEFF_3,
				COEFF_4 = v_COEFF_4,
				COEFF_5 = v_COEFF_5,
				R_SQUARED = 0,
				TSTAT_0 = 0,
				TSTAT_1 = 0,
				TSTAT_2 = 0,
				TSTAT_3 = 0,
				TSTAT_4 = 0,
				TSTAT_5 = 0,
				TSTAT_CRITICAL = 0
			WHERE WRF_ID = v_WRF_ID
				AND WRF_HOUR= v_HOUR;

		IF SQL%NOTFOUND THEN
			INSERT INTO LOAD_PROFILE_WRF_LINE(
				WRF_ID,
				WRF_HOUR,
				COEFF_0,
				COEFF_1,
				COEFF_2,
				COEFF_3,
				COEFF_4,
				COEFF_5,
				R_SQUARED,
				TSTAT_0,
				TSTAT_1,
				TSTAT_2,
				TSTAT_3,
				TSTAT_4,
				TSTAT_5,
				TSTAT_CRITICAL,
				SEGMENT_MIN,
				SEGMENT_MAX)
			VALUES (
				v_WRF_ID,
				CASE WHEN v_HOUR = 0 THEN
                    24
                ELSE
                    v_HOUR
                END,
				v_CONSTANT,
				v_COEFF_1,
				v_COEFF_2,
				v_COEFF_3,
				v_COEFF_4,
				v_COEFF_5,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				v_SEGMENT_MIN,
				v_SEGMENT_MAX);
		END IF;
	END IF;

END LOAD_WRF_PROFILE;
-----------------------------------------------------------------------------
PROCEDURE LOAD_TYPICAL_DAY_PROFILE
	(
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_LP_NAME VARCHAR2(128);
	v_LP_ID NUMBER(9) := 0;

	v_LIB_NAME VARCHAR2(128);
	v_LIB_ID NUMBER(9) := 0;

	v_CAL_NAME VARCHAR2(128);
	v_CAL_ID NUMBER(9) := 0;

	v_INDEX NUMBER(9);
	v_TOKENS PARSE_UTIL.STRING_TABLE;

	v_SEASON_DT VARCHAR2(32);
	v_SEASON_ID NUMBER(9);

	v_PROFILE_TBL GA.NUMBER_TABLE;

	v_STATUS NUMBER;

	v_CONTINUE_LINE BOOLEAN;

	v_PROFILE_INTERVAL NUMBER(9);

BEGIN

	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER, v_TOKENS);
	REMOVE_NULL_TOKENS(v_TOKENS);

	v_LP_NAME := v_TOKENS(2);
	v_LIB_NAME := v_TOKENS(3);
	v_CAL_NAME := v_TOKENS(4);
	v_SEASON_DT := v_TOKENS(5);

	BEGIN
		SELECT TEMPLATE_ID
		INTO v_SEASON_ID
		FROM TEMPLATE
		WHERE TEMPLATE_NAME = v_SEASON_DT;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			LOG_IMPORT_ERROR('Season Day-Time Template ' ||
							v_SEASON_DT || ' does not exist.',
							p_SUCCESS);
	END;

	IF v_TOKENS.COUNT = 29 THEN
		v_PROFILE_INTERVAL := 24;
	ELSIF v_TOKENS.COUNT = 53 THEN
		v_PROFILE_INTERVAL := 48;
	ELSIF v_TOKENS.COUNT = 101 THEN
		v_PROFILE_INTERVAL := 96;
	ELSE
		LOG_IMPORT_ERROR('File contains an enexpected number of fields (' || v_TOKENS.COUNT ||
				  '). The profiles interval could not be determined.',
				  p_SUCCESS);
	END IF;

	IF p_SUCCESS THEN
		ID.ID_FOR_LOAD_PROFILE_LIBRARY(v_LIB_NAME, TRUE, v_LIB_ID);
		ID.ID_FOR_LOAD_PROFILE(v_LIB_NAME, v_LP_NAME, FALSE, v_LP_ID);

	  IF v_LP_ID <= 0 THEN
		  -- WE NEED TO CREATE THE LP
		  ID.ID_FOR_LOAD_PROFILE(v_LIB_NAME, v_LP_NAME, TRUE, v_LP_ID);
		  UPDATE LOAD_PROFILE
			SET PROFILE_TYPE = 'Typical Day',
				PROFILE_INTERVAL = v_PROFILE_INTERVAL,
				PROFILE_TEMPLATE_ID = v_SEASON_ID,
				PROFILE_SEASON = v_SEASON_DT,
				PROFILE_DESC = 'Loaded from an import file on ' || TO_CHAR(SYSDATE,'MM/DD/YYYY HH24:MI'),
				PROFILE_SOURCE_BEGIN_DATE = TRUNC(SYSDATE),
				PROFILE_SOURCE_END_DATE = TRUNC(SYSDATE)
			WHERE PROFILE_ID = v_LP_ID;
	  ELSE
		  VALIDATE_PROFILE_TYPE(v_LP_ID, 'Typical Day', p_SUCCESS);
		  VALIDATE_PROFILE_INTERVAL(v_LP_ID, v_PROFILE_INTERVAL);
	  END IF;
	END IF;

	IF p_SUCCESS THEN
		ID.ID_FOR_CALENDAR ( v_CAL_NAME, TRUE, v_CAL_ID);
		PUT_CALENDAR_PROFILE_LIBRARY ( v_CAL_ID, v_LIB_ID);
	END IF;

	v_CONTINUE_LINE := TRUE;
	FOR v_INDEX IN 6..v_TOKENS.COUNT LOOP

		v_PROFILE_TBL(v_INDEX-6) := NVL(IMPORT_NUMBER(v_TOKENS(v_INDEX),
											'Typical Day Usage Data',
											v_CONTINUE_LINE),0);
		IF v_CONTINUE_LINE = FALSE THEN
			p_SUCCESS := v_CONTINUE_LINE;
			EXIT;
		END IF;
	END LOOP;

	IF p_SUCCESS THEN
		PF.PUT_LOAD_PROFILE_POINTS_TBL(
			v_LP_ID,
			1, -- POINT INDEX
			TRUNC(SYSDATE),
			LOW_DATE,
			GA.LOCAL_TIME_ZONE,
			v_PROFILE_TBL,
			v_PROFILE_INTERVAL, -- INTERVAL
			v_STATUS);
		ERRS.VALIDATE_STATUS('PF.PUT_LOAD_PROFILE_POINTS_TBL',
			v_STATUS);

		CALCULATE_PROFILE_STATS(v_LP_ID);
	END IF;

END LOAD_TYPICAL_DAY_PROFILE;
-----------------------------------------------------------------------------
PROCEDURE LOAD_WEATHER_PROFILE
	(
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_LP_NAME VARCHAR2(128);
	v_LP_ID NUMBER(9) := 0;

	v_LIB_NAME VARCHAR2(128);
	v_LIB_ID NUMBER(9) := 0;

	v_CAL_NAME VARCHAR2(128);
	v_CAL_ID NUMBER(9) := 0;

	v_SEASON_DT VARCHAR2(32);
	v_SEASON_ID NUMBER(9);

	v_STATION_NAME VARCHAR2(32);
	v_STATION_ID NUMBER(9);

	v_LOW_TEMP NUMBER;
	v_HIGH_TEMP NUMBER;

	v_INDEX NUMBER(9);

	v_TOKENS PARSE_UTIL.STRING_TABLE;

	v_PROFILE_TBL GA.NUMBER_TABLE;

	v_STATUS NUMBER;

	v_CONTINUE_LINE BOOLEAN;

BEGIN

	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER, v_TOKENS);

	v_LP_NAME := v_TOKENS(2);
	v_LIB_NAME := v_TOKENS(3);
	v_CAL_NAME := v_TOKENS(4);
	v_SEASON_DT := v_TOKENS(5);
	v_STATION_NAME := v_TOKENS(6);

	v_LOW_TEMP := GREATEST(ROUND(IMPORT_NUMBER(v_TOKENS(7),
												'Low Temp: ',
												p_SUCCESS)),-21);
	v_HIGH_TEMP := LEAST(ROUND(IMPORT_NUMBER(v_TOKENS(8),
												'High Temp: ',
												p_SUCCESS)),112);

	IF v_SEASON_DT = 'PRE' THEN
		v_SEASON_ID := 0;
	ELSE
		BEGIN
			SELECT TEMPLATE_ID
			INTO v_SEASON_ID
			FROM TEMPLATE
			WHERE TEMPLATE_NAME = v_SEASON_DT;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			LOG_IMPORT_ERROR('Template ' || v_SEASON_DT || ' not found.',
							 p_SUCCESS);
		END;
	END IF;

	ID.ID_FOR_WEATHER_STATION(v_STATION_NAME, FALSE, v_STATION_ID);
	IF v_STATION_ID <= 0 THEN
		LOG_IMPORT_ERROR('Weather Station ' || v_STATION_NAME || ' not found.',
						 p_SUCCESS);
	END IF;

	IF p_SUCCESS THEN
		ID.ID_FOR_LOAD_PROFILE_LIBRARY(v_LIB_NAME, TRUE, v_LIB_ID);
		ID.ID_FOR_LOAD_PROFILE(v_LIB_NAME, v_LP_NAME, FALSE, v_LP_ID);

	  IF v_LP_ID <= 0 THEN
		  -- WE NEED TO CREATE THE LP
		  ID.ID_FOR_LOAD_PROFILE(v_LIB_NAME, v_LP_NAME, TRUE, v_LP_ID);
		  UPDATE LOAD_PROFILE
			SET PROFILE_TYPE = 'Weather',
				PROFILE_INTERVAL = 24,
				PROFILE_TEMPLATE_ID = v_SEASON_ID,
				PROFILE_SEASON = v_SEASON_DT,
				PROFILE_DESC = 'Loaded from profile import on ' || TO_CHAR(SYSDATE,'MM/DD/YYYY HH24:MI'),
				PROFILE_SOURCE_BEGIN_DATE = '1-JAN-2000',
				PROFILE_SOURCE_END_DATE = '1-JAN-2000',
				PROFILE_STATION_ID = v_STATION_ID,
				ENTRY_DATE = SYSDATE
			WHERE PROFILE_ID = v_LP_ID;
	  ELSE
		  VALIDATE_PROFILE_TYPE(v_LP_ID, 'Weather', p_SUCCESS);
	  END IF;
	END IF;

	IF p_SUCCESS THEN
		ID.ID_FOR_CALENDAR ( v_CAL_NAME, TRUE, v_CAL_ID);
		PUT_CALENDAR_PROFILE( v_CAL_ID, v_LP_ID);
	END IF;

	v_CONTINUE_LINE := TRUE;
	FOR v_INDEX IN 9..v_TOKENS.COUNT LOOP

		v_PROFILE_TBL(v_INDEX-9) := NVL(IMPORT_NUMBER(v_TOKENS(v_INDEX),
											'Weather Profile Data',
											v_CONTINUE_LINE),0);
		IF v_CONTINUE_LINE = FALSE THEN
			p_SUCCESS := v_CONTINUE_LINE;
			EXIT;
		END IF;
	END LOOP;

	IF p_SUCCESS THEN
		FOR v_TEMP IN v_LOW_TEMP..v_HIGH_TEMP LOOP
		  PF.PUT_LOAD_PROFILE_POINTS_TBL(
			  v_LP_ID,
			  v_TEMP,
			  LOW_DATE,
			  LOW_DATE,
			  GA.LOCAL_TIME_ZONE,
			  v_PROFILE_TBL,
			  24,
			  v_STATUS);
		   ERRS.VALIDATE_STATUS('PF.PUT_LOAD_PROFILE_POINTS_TBL', v_STATUS);
		END LOOP;

		CALCULATE_PROFILE_STATS(v_LP_ID);
	END IF;

END LOAD_WEATHER_PROFILE;
-----------------------------------------------------------------------------
PROCEDURE PROFILE_IMPORT
	(
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_PROFILE_TYPE IN OUT VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN,
	p_MIX_PROFILE_TYPES OUT BOOLEAN
	) AS

	v_TOKENS PARSE_UTIL.STRING_TABLE;

BEGIN

	-- ASSUME NO
	p_MIX_PROFILE_TYPES := FALSE;
	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER, v_TOKENS);

	IF p_PROFILE_TYPE IS NULL THEN
		p_PROFILE_TYPE := v_TOKENS(v_TOKENS.FIRST);
	END IF;

	IF p_PROFILE_TYPE IS NOT NULL
		AND UPPER(p_PROFILE_TYPE) <> UPPER(v_TOKENS(v_TOKENS.FIRST)) THEN
			LOG_IMPORT_ERROR('This line has profile type '||
				v_TOKENS(v_TOKENS.FIRST) || ' while other profiles are ' || p_PROFILE_TYPE ||
				'. The profile import does not support mixed profile types.',
				p_SUCCESS);
			-- WHEN WE MIX PROFILE TYPES WE STOP THE IMPORT ALLTOGETHER NOT JUST THIS ONE LINE,
			-- SO WE NEED A SPECIAL FLAG
			p_MIX_PROFILE_TYPES := TRUE;
			RETURN;
	END IF;

	-- STOP PF FROM COMMITTING
	PF.g_ALLOW_COMMIT_ROLLBACK := FALSE;

	IF UPPER(p_PROFILE_TYPE) = PROFILE_TYPE_HISTORICAL THEN
		LOAD_HISTORICAL_PROFILE(p_LINE, p_DELIMITER, p_SUCCESS);
	ELSIF UPPER(p_PROFILE_TYPE) = PROFILE_TYPE_WRF THEN
		LOAD_WRF_PROFILE(p_LINE, p_DELIMITER, p_SUCCESS);
	ELSIF UPPER(p_PROFILE_TYPE) = PROFILE_TYPE_WEATHER THEN
		LOAD_WEATHER_PROFILE(p_LINE, p_DELIMITER, p_SUCCESS);
	ELSIF UPPER(p_PROFILE_TYPE) = PROFILE_TYPE_TYPICAL_DAY THEN
		LOAD_TYPICAL_DAY_PROFILE(p_LINE, p_DELIMITER, p_SUCCESS);
	ELSE
		DATA_IMPORT.LOG_IMPORT_ERROR(p_PROFILE_TYPE || ' is not a recognized profile type.',
									p_SUCCESS);
	END IF;

END PROFILE_IMPORT;
-----------------------------------------------------------------------------
PROCEDURE ROLLUP_CHANNEL_DATA
	(
	p_ACCOUNT_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_METER_CODE IN CHAR,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_ACCOUNT_MODEL_OPTION ACCOUNT.ACCOUNT_MODEL_OPTION%TYPE;
	v_INTERVAL VARCHAR2(32);
	v_INTERVAL_NUM NUMBER;
	v_INTERVAL_ABBR VARCHAR2(32);

	v_BEGIN DATE;
	v_END DATE;

BEGIN

	SELECT A.ACCOUNT_MODEL_OPTION
	INTO v_ACCOUNT_MODEL_OPTION
	FROM ACCOUNT A
	WHERE A.ACCOUNT_ID = p_ACCOUNT_ID;

	IF v_ACCOUNT_MODEL_OPTION <> ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER THEN
		DATA_IMPORT.LOG_IMPORT_ERROR('The Account specified has a model option of ' ||
			v_ACCOUNT_MODEL_OPTION || ' but it must be a Metered model account to import' ||
			' metered data.', p_SUCCESS);
	END IF;

	SELECT M.METER_INTERVAL
	INTO v_INTERVAL
	FROM METER M
	WHERE M.METER_ID = p_METER_ID;

	IF NVL(v_INTERVAL, CONSTANTS.UNDEFINED_ATTRIBUTE) = CONSTANTS.UNDEFINED_ATTRIBUTE THEN
		IF GA.DEFAULT_MODEL = GA.ELECTRIC_MODEL THEN
			v_INTERVAL := 'Hour';
		ELSE
			v_INTERVAL := 'Day';
		END IF;
		DATA_IMPORT.LOG_IMPORT_WARN(TEXT_UTIL.TO_CHAR_ENTITY(p_METER_ID, EC.ED_METER, TRUE)
			|| ' does not have a meter interval specified. '  || v_INTERVAL || ' will be'
			|| ' used by default.');
	END IF;

	v_INTERVAL_NUM := GET_INTERVAL_NUMBER(v_INTERVAL);
	v_INTERVAL_ABBR := GET_INTERVAL_ABBREVIATION(v_INTERVAL);

	FOR v_REC IN (SELECT PT.*
					FROM TX_SUB_STATION_METER_POINT PT
					WHERE PT.RETAIL_METER_ID = p_METER_ID
						AND GET_INTERVAL_NUMBER(PT.METER_POINT_INTERVAL)
							> v_INTERVAL_NUM) LOOP
		DATA_IMPORT.LOG_IMPORT_WARN('Meter Channel ' ||
			TEXT_UTIL.TO_CHAR_ENTITY(v_REC.METER_POINT_ID, EC.ED_SUB_STATION_METER_POINT)
			|| ' has an interval of ' || v_REC.METER_POINT_INTERVAL || ' which is longer than'
			|| ' its Meter''s interval of ' || v_INTERVAL);
	END LOOP;

	UT.CUT_DATE_RANGE(CONSTANTS.ELECTRIC_MODEL, p_SERVICE_DATE, p_SERVICE_DATE,
		GA.LOCAL_TIME_ZONE, v_BEGIN, v_END);

	AGGREGATE_CHANNEL_DATA(p_ACCOUNT_ID,
						p_SERVICE_LOCATION_ID,
						p_METER_ID,
						p_SERVICE_DATE,
						p_METER_CODE,
						v_INTERVAL_ABBR,
						v_BEGIN,
						v_END,
						CONSTANTS.HIGH_DATE,
						p_SUCCESS);

END ROLLUP_CHANNEL_DATA;
-----------------------------------------------------------------------------
PROCEDURE AGGREGATE_CHANNEL_DATA
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_METER_CODE IN CHAR,
	p_INTERVAL_ABBREVIATION IN VARCHAR2,
	p_CUT_BEGIN_DATE IN DATE,
	p_CUT_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SUCCESS IN OUT BOOLEAN,
	p_DELETE_FIRST IN NUMBER := 0,
	p_UNIT_OF_MEASURE IN VARCHAR2 := GA.DEFAULT_UNIT_OF_MEASUREMENT,
	p_SCALE_FACTOR IN NUMBER := 1.0,
    p_SKIP_PROCESSING_LOSS_FACTOR IN BOOLEAN:= FALSE
	) AS

	v_LOAD_VALS GA.FLOAT_TABLE;
	v_LOAD_DATES GA.DATE_TABLE;

BEGIN

	SELECT DATE_UTIL.HED_TRUNC(VAL.METER_DATE, p_INTERVAL_ABBREVIATION) AS LOAD_DATE,
		SUM(VAL.METER_VAL * DECODE(PT.OPERATION_CODE, 'A', 1, 'S', -1, 0)) * NVL(p_SCALE_FACTOR,1.0) AS LOAD_VAL
	BULK COLLECT INTO v_LOAD_DATES, v_LOAD_VALS
	FROM TX_SUB_STATION_METER_POINT PT,
		TX_SUB_STATION_METER_PT_VALUE VAL
	WHERE PT.RETAIL_METER_ID = p_METER_ID
		AND PT.OPERATION_CODE IN ('A', 'S')
		AND PT.UOM = NVL(p_UNIT_OF_MEASURE, GA.DEFAULT_UNIT_OF_MEASUREMENT)
		AND VAL.METER_POINT_ID = PT.METER_POINT_ID
		AND VAL.METER_DATE BETWEEN p_CUT_BEGIN_DATE AND p_CUT_END_DATE
		AND VAL.METER_CODE = p_METER_CODE
	GROUP BY DATE_UTIL.HED_TRUNC(VAL.METER_DATE, p_INTERVAL_ABBREVIATION)
	ORDER BY LOAD_DATE;

	IF v_LOAD_VALS.COUNT > 0 THEN

		MS.IMPORT_SERVICE_LOAD_DATA(p_ACCOUNT_ID => p_ACCOUNT_ID,
									p_SERVICE_LOCATION_ID => p_SERVICE_LOCATION_ID,
									p_METER_ID => p_METER_ID,
									p_SERVICE_DATE => p_SERVICE_DATE,
									p_INTERVAL_ABBR => p_INTERVAL_ABBREVIATION,
									p_AS_OF_DATE => p_AS_OF_DATE,
									p_USAGE_DATA => v_LOAD_VALS,
									p_USAGE_DATES => v_LOAD_DATES,
									p_SUCCESS => p_SUCCESS,
									p_SCENARIO_ID => GA.BASE_SCENARIO_ID,
									p_SERVICE_CODE => p_METER_CODE,
									p_DELETE_FIRST => p_DELETE_FIRST,
                                    p_SKIP_PROCESSING_LOSS_FACTOR => p_SKIP_PROCESSING_LOSS_FACTOR);
	END IF;

END AGGREGATE_CHANNEL_DATA;
-----------------------------------------------------------------------------
PROCEDURE CHANNEL_DATA_IMPORT
	(
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_USE_EXT_IDENT IN BOOLEAN,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_ACCOUNT_ID NUMBER(9);
	v_SL_ID NUMBER(9);
	v_METER_ID NUMBER(9);
	v_PT_ID NUMBER(9);

	v_DATE DATE;

	v_TOKENS PARSE_UTIL.STRING_TABLE;

	v_INTERVAL VARCHAR2(32);
	v_INTERVAL_DIVISOR NUMBER;
	v_LOAD NUMBER;

	v_ENTITY_TEST BOOLEAN := TRUE;

	v_METER_CODE CHAR(1);

BEGIN

	PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER, v_TOKENS);
	IF NOT GA.CSB_IS_SUBDAILY THEN
	    REMOVE_NULL_TOKENS(v_TOKENS);
	END IF;

	-- CHECK TO SEE IF WE CAN FIND THE ACCOUNT, SL, METER AND CHANNEL
	v_ACCOUNT_ID := GET_IMPORT_IDENTIFIER(v_TOKENS(1), EC.ED_ACCOUNT, p_USE_EXT_IDENT);

	IF v_ACCOUNT_ID IS NULL THEN
		LOG_IMPORT_ERROR('Cannot find the Account specified: ' || v_TOKENS(1), v_ENTITY_TEST);
	END IF;

	v_SL_ID := GET_IMPORT_IDENTIFIER(v_TOKENS(2), EC.ED_SERVICE_LOCATION, p_USE_EXT_IDENT);

	IF v_SL_ID IS NULL THEN
		LOG_IMPORT_ERROR('Cannot find the Service Location specified: ' || v_TOKENS(2), v_ENTITY_TEST);
	END IF;

	v_METER_ID := GET_IMPORT_IDENTIFIER(v_TOKENS(3), EC.ED_METER, p_USE_EXT_IDENT);

	IF v_METER_ID IS NULL THEN
		LOG_IMPORT_ERROR('Cannot find the Meter specified: ' || v_TOKENS(3), v_ENTITY_TEST);
	END IF;

	IF v_METER_ID IS NOT NULL THEN
		SELECT MAX(PT.METER_POINT_ID) INTO v_PT_ID
		FROM TX_SUB_STATION_METER_POINT PT
		WHERE PT.METER_POINT_NAME = v_TOKENS(4)
			AND PT.RETAIL_METER_ID = v_METER_ID;

		IF v_PT_ID IS NULL THEN
			LOG_IMPORT_ERROR('Cannot find the Meter Channel specified: ' || v_TOKENS(4), v_ENTITY_TEST);
		END IF;
	END IF;

	v_DATE := IMPORT_DATE(v_TOKENS(6), DEFAULT_DATE_FORMAT, 'Service Date: ', v_ENTITY_TEST);

	IF v_ENTITY_TEST AND
		NOT CHECK_CHAN_RELATION_FOR_DATE(v_ACCOUNT_ID, v_SL_ID, v_METER_ID, v_PT_ID, v_DATE) THEN
		LOG_IMPORT_ERROR('The Account / Service Location / Meter / Channel given ' ||
			'do not have a valid relationship on the given date.', v_ENTITY_TEST);
		RETURN;
	END IF;

	IF NOT v_ENTITY_TEST THEN
		p_SUCCESS := v_ENTITY_TEST;
		RETURN;
	END IF;

	v_METER_CODE := UPPER(SUBSTR(TRIM(v_TOKENS(5)),1,1));

	IF ((g_PREV_ACCOUNT_ID IS NULL OR g_PREV_ACCOUNT_ID <> v_ACCOUNT_ID)
		OR (g_PREV_SERVICE_LOCATION_ID IS NULL OR g_PREV_SERVICE_LOCATION_ID <> v_SL_ID)
		OR (g_PREV_METER_ID IS NULL OR g_PREV_METER_ID <> v_METER_ID)
		OR (g_PREV_DATE IS NULL OR g_PREV_DATE <> v_DATE)
		OR (g_PREV_METER_CODE IS NULL OR g_PREV_METER_CODE <> v_METER_CODE)) THEN

		IF g_PREV_ACCOUNT_ID IS NOT NULL THEN
			ROLLUP_CHANNEL_DATA(g_PREV_ACCOUNT_ID, g_PREV_METER_ID, g_PREV_SERVICE_LOCATION_ID,
				g_PREV_DATE, g_PREV_METER_CODE, p_SUCCESS);
		END IF;

		g_PREV_ACCOUNT_ID := v_ACCOUNT_ID;
		g_PREV_SERVICE_LOCATION_ID := v_SL_ID;
		g_PREV_METER_ID := v_METER_ID;
		g_PREV_DATE := v_DATE;
		g_PREV_METER_CODE := v_METER_CODE;
	END IF;

	SELECT PT.METER_POINT_INTERVAL
	INTO v_INTERVAL
	FROM TX_SUB_STATION_METER_POINT PT
	WHERE PT.METER_POINT_ID = v_PT_ID;

	v_INTERVAL_DIVISOR := DATE_UTIL.GET_INTERVAL_DIVISOR(CONSTANTS.INTERVAL_DAY,
															v_INTERVAL,
															v_DATE,
															'GMT',
															NULL);

	IF ( (v_TOKENS.COUNT - 6) < (v_INTERVAL_DIVISOR*(23/24)) OR
		(v_TOKENS.COUNT - 6) > (v_INTERVAL_DIVISOR*(25/24)) ) THEN
		LOG_IMPORT_WARN('Expected between ' || TRUNC((v_INTERVAL_DIVISOR*(23/24)),0) ||
			' and ' || TRUNC((v_INTERVAL_DIVISOR*(25/24)),0) || ' data points for Channel: ' ||
			v_TOKENS(4) || ' because it has interval ' || v_INTERVAL || ', encountered ' ||
			(v_TOKENS.COUNT - 7) || '.');
	END IF;

	v_DATE := TO_CUT(v_DATE, GA.LOCAL_TIME_ZONE);

	FOR v_IDX IN 7 .. v_TOKENS.COUNT LOOP
		v_LOAD := IMPORT_NUMBER(v_TOKENS(v_IDX), 'Usage Val: ', p_SUCCESS);

		IF p_SUCCESS AND v_LOAD IS NOT NULL THEN

			MERGE INTO TX_SUB_STATION_METER_PT_VALUE VAL
			USING ( SELECT v_PT_ID AS POINT_ID,
						v_METER_CODE AS METER_CODE,
						(v_DATE+((v_IDX-6)/v_INTERVAL_DIVISOR) ) AS METER_DATE,
						v_LOAD AS METER_VAL
					FROM DUAL) MTR
			ON (VAL.METER_POINT_ID = MTR.POINT_ID AND
				VAL.MEASUREMENT_SOURCE_ID = CONSTANTS.NOT_ASSIGNED AND
				VAL.METER_CODE = MTR.METER_CODE AND
				VAL.METER_DATE = MTR.METER_DATE)
			WHEN MATCHED THEN
				UPDATE SET VAL.METER_VAL = MTR.METER_VAL
			WHEN NOT MATCHED THEN
				INSERT VALUES (MTR.POINT_ID, CONSTANTS.NOT_ASSIGNED, MTR.METER_CODE, MTR.METER_DATE,
					MTR.METER_VAL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE, NULL, NULL);

		END IF;
	END LOOP;

END CHANNEL_DATA_IMPORT;
-----------------------------------------------------------------------------
PROCEDURE IMPORT_STRING
	(
	p_VALUE IN VARCHAR2,
	p_IMPORT_INFO IN VARCHAR2,
    p_REC IN OUT VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN,
    p_FIELD_LENGTH IN NUMBER := NULL
	) AS
	v_PROC_NAME VARCHAR2(128);
	v_STEP_NAME VARCHAR2(32);
BEGIN

    IF p_FIELD_LENGTH IS NOT NULL THEN
        IF LENGTH(p_VALUE) > p_FIELD_LENGTH THEN
            LOGS.GET_CALLER(v_PROC_NAME, v_STEP_NAME);
            LOG_IMPORT_ERROR(p_IMPORT_INFO || 'maximum length is ' || p_FIELD_LENGTH || '.  Value is '''
								|| p_VALUE || ''', which is of length ' || LENGTH(p_VALUE) || '.',
								p_SUCCESS,
								v_PROC_NAME,
								v_STEP_NAME,
								UT.GET_FULL_ERRM);
             RETURN;
        END IF;
    END IF;

	BEGIN
		p_REC := p_VALUE;
	EXCEPTION
		WHEN OTHERS THEN
			LOGS.GET_CALLER(v_PROC_NAME, v_STEP_NAME);
		 	LOG_IMPORT_ERROR(p_IMPORT_INFO || ' String Value: '
								|| p_VALUE || ' cannot be validated.',
								p_SUCCESS,
								v_PROC_NAME,
								v_STEP_NAME,
								UT.GET_FULL_ERRM);
	END;
END IMPORT_STRING;
-----------------------------------------------------------------------------------------------
PROCEDURE SERVICE_LOAD_SYNC_IMPORT
    (
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
    p_SUCCESS IN OUT BOOLEAN
    ) AS
    v_RECORDS PARSE_UTIL.STRING_TABLE;
    v_CURRENT_RECORD VARCHAR(256);
    v_SL_SYNC_RECORD SERVICE_LOAD_STAGING%ROWTYPE;
BEGIN
    BEGIN
        PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER , v_RECORDS);
    EXCEPTION
        WHEN OTHERS THEN
            ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Unable to parse line: ' || p_LINE);
    END;

    -- Verify the column count
    IF v_RECORDS.COUNT > c_SERVICE_LOAD_SYNC_TOTAL_COLS THEN
        LOG_IMPORT_ERROR('The total number of columns in a row should be less than or equal to '
            || TO_CHAR(c_SERVICE_LOAD_SYNC_TOTAL_COLS) || ' columns but found ' || TO_CHAR(v_RECORDS.COUNT) || ' columns.', p_SUCCESS);
        RETURN; -- DON'T TRY TO PROCESS THE REST OF THE ROWS, WITH TOO MANY COLUMNS WHO KNOWS WHAT THEY WERE TRYING TO DO
    END IF;

    -- Verify the required columns
    IF v_RECORDS.COUNT >= 7 THEN
        IF TRIM(v_RECORDS(1)) IS NULL THEN
            LOG_IMPORT_ERROR('The Account Identifier column is required.', p_SUCCESS);
        END IF;

        IF TRIM(v_RECORDS(6)) IS NULL THEN
            LOG_IMPORT_ERROR('The Date column is required.', p_SUCCESS);
        END IF;

        IF TRIM(v_RECORDS(7)) IS NULL THEN
            LOG_IMPORT_ERROR('The Interval column is required.', p_SUCCESS);
        END IF;
    ELSE
        LOG_IMPORT_ERROR('One of the required columns is missing from the file.', p_SUCCESS);
        RETURN;
    END IF;

    FOR v_INDEX IN v_RECORDS.FIRST..v_RECORDS.LAST LOOP
        v_CURRENT_RECORD := TRIM(v_RECORDS(v_INDEX));
        IF v_CURRENT_RECORD IS NOT NULL THEN
            IF v_INDEX = 1 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                            'Account Identifier: ',
                                            v_SL_SYNC_RECORD.ACCOUNT_IDENT,
                                            p_SUCCESS,
                                            c_SL_ACCOUNT_IDENT_LENGTH);
            ELSIF v_INDEX = 2 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                                'Meter Identifier: ',
                                                v_SL_SYNC_RECORD.METER_IDENT,
                                                p_SUCCESS,
                                                c_SL_METER_IDENT_LENGTH);
            ELSIF v_INDEX = 3 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                                'ESP Identifier: ',
                                                v_SL_SYNC_RECORD.ESP_IDENT,
                                                p_SUCCESS,
                                                c_SL_ESP_IDENT_LENGTH);
            ELSIF v_INDEX = 4 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                                'Pool Identifier: ',
                                                v_SL_SYNC_RECORD.POOL_IDENT,
                                                p_SUCCESS,
                                                c_SL_POOL_IDENT_LENGTH);
            ELSIF v_INDEX = 5 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                                'Service Code: ',
                                                v_SL_SYNC_RECORD.SERVICE_CODE,
                                                p_SUCCESS,
                                                c_SL_SERVICE_CODE_IDENT_LENGTH);
            ELSIF v_INDEX = 6 THEN v_SL_SYNC_RECORD.SERVICE_DATE := IMPORT_DATE(v_CURRENT_RECORD,
                                                                        DEFAULT_DATE_FORMAT,
                                                                        'Date: ',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 7 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                                'Interval: ',
                                                v_SL_SYNC_RECORD.INTERVAL,
                                                p_SUCCESS,
                                                c_SL_INTERVAL_IDENT_LENGTH);
            ELSIF v_INDEX = 8 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'UOM: ',
                                        v_SL_SYNC_RECORD.UOM,
                                        p_SUCCESS,
                                        c_SL_UOM_IDENT_LENGTH);
            ELSIF v_INDEX = 9 THEN v_SL_SYNC_RECORD.VAL1 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 1',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 10 THEN v_SL_SYNC_RECORD.VAL2 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 2',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 11 THEN v_SL_SYNC_RECORD.VAL3 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 3',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 12 THEN v_SL_SYNC_RECORD.VAL4 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 4',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 13 THEN v_SL_SYNC_RECORD.VAL5 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 5',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 14 THEN v_SL_SYNC_RECORD.VAL6 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 6',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 15 THEN v_SL_SYNC_RECORD.VAL7 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 7',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 16 THEN v_SL_SYNC_RECORD.VAL8 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 8',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 17 THEN v_SL_SYNC_RECORD.VAL9 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 9',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 18 THEN v_SL_SYNC_RECORD.VAL10 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 10',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 19 THEN v_SL_SYNC_RECORD.VAL11 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 11',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 20 THEN v_SL_SYNC_RECORD.VAL12 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 12',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 21 THEN v_SL_SYNC_RECORD.VAL13 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 13',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 22 THEN v_SL_SYNC_RECORD.VAL14 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 14',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 23 THEN v_SL_SYNC_RECORD.VAL15 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 15',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 24 THEN v_SL_SYNC_RECORD.VAL16 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 16',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 25 THEN v_SL_SYNC_RECORD.VAL17 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 17',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 26 THEN v_SL_SYNC_RECORD.VAL18 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 18',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 27 THEN v_SL_SYNC_RECORD.VAL19 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 19',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 28 THEN v_SL_SYNC_RECORD.VAL20 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 20',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 29 THEN v_SL_SYNC_RECORD.VAL21 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 21',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 30 THEN v_SL_SYNC_RECORD.VAL22 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 22',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 31 THEN v_SL_SYNC_RECORD.VAL23 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 23',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 32 THEN v_SL_SYNC_RECORD.VAL24:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 24',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 33 THEN v_SL_SYNC_RECORD.VAL25:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 25',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 34 THEN v_SL_SYNC_RECORD.VAL26:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 26',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 35 THEN v_SL_SYNC_RECORD.VAL27:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 27',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 36 THEN v_SL_SYNC_RECORD.VAL28:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 28',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 37 THEN v_SL_SYNC_RECORD.VAL29:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 29',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 38 THEN v_SL_SYNC_RECORD.VAL30:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 30',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 39 THEN v_SL_SYNC_RECORD.VAL31:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 31',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 40 THEN v_SL_SYNC_RECORD.VAL32:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 32',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 41 THEN v_SL_SYNC_RECORD.VAL33:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 33',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 42 THEN v_SL_SYNC_RECORD.VAL34:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 34',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 43 THEN v_SL_SYNC_RECORD.VAL35:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 35',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 44 THEN v_SL_SYNC_RECORD.VAL36:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 36',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 45 THEN v_SL_SYNC_RECORD.VAL37:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 37',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 46 THEN v_SL_SYNC_RECORD.VAL38:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 38',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 47 THEN v_SL_SYNC_RECORD.VAL39:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 39',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 48 THEN v_SL_SYNC_RECORD.VAL40:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 40',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 49 THEN v_SL_SYNC_RECORD.VAL41:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 41',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 50 THEN v_SL_SYNC_RECORD.VAL42:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 42',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 51 THEN v_SL_SYNC_RECORD.VAL43:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 43',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 52 THEN v_SL_SYNC_RECORD.VAL44:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 44',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 53 THEN v_SL_SYNC_RECORD.VAL45:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 45',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 54 THEN v_SL_SYNC_RECORD.VAL46:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 46',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 55 THEN v_SL_SYNC_RECORD.VAL47:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 47',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 56 THEN v_SL_SYNC_RECORD.VAL48:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 48',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 57 THEN v_SL_SYNC_RECORD.VAL49:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 49',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 58 THEN v_SL_SYNC_RECORD.VAL50:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 50',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 59 THEN v_SL_SYNC_RECORD.VAL51:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 51',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 60 THEN v_SL_SYNC_RECORD.VAL52:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 52',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 61 THEN v_SL_SYNC_RECORD.VAL53:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 53',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 62 THEN v_SL_SYNC_RECORD.VAL54:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 54',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 63 THEN v_SL_SYNC_RECORD.VAL55:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 55',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 64 THEN v_SL_SYNC_RECORD.VAL56:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 56',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 65 THEN v_SL_SYNC_RECORD.VAL57:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 57',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 66 THEN v_SL_SYNC_RECORD.VAL58:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 58',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 67 THEN v_SL_SYNC_RECORD.VAL59:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 59',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 68 THEN v_SL_SYNC_RECORD.VAL60:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 60',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 69 THEN v_SL_SYNC_RECORD.VAL61:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 61',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 70 THEN v_SL_SYNC_RECORD.VAL62:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 62',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 71 THEN v_SL_SYNC_RECORD.VAL63:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 63',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 72 THEN v_SL_SYNC_RECORD.VAL64:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 64',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 73 THEN v_SL_SYNC_RECORD.VAL65:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 65',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 74 THEN v_SL_SYNC_RECORD.VAL66:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 66',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 75 THEN v_SL_SYNC_RECORD.VAL67:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 67',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 76 THEN v_SL_SYNC_RECORD.VAL68:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 68',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 77 THEN v_SL_SYNC_RECORD.VAL69:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 69',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 78 THEN v_SL_SYNC_RECORD.VAL70:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 70',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 79 THEN v_SL_SYNC_RECORD.VAL71:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 71',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 80 THEN v_SL_SYNC_RECORD.VAL72:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 72',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 81 THEN v_SL_SYNC_RECORD.VAL73:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 73',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 82 THEN v_SL_SYNC_RECORD.VAL74:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 74',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 83 THEN v_SL_SYNC_RECORD.VAL75:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 75',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 84 THEN v_SL_SYNC_RECORD.VAL76:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 76',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 85 THEN v_SL_SYNC_RECORD.VAL77:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 77',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 86 THEN v_SL_SYNC_RECORD.VAL78:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 78',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 87 THEN v_SL_SYNC_RECORD.VAL79:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 79',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 88 THEN v_SL_SYNC_RECORD.VAL80:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 80',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 89 THEN v_SL_SYNC_RECORD.VAL81:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 81',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 90 THEN v_SL_SYNC_RECORD.VAL82:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 82',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 91 THEN v_SL_SYNC_RECORD.VAL83:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 83',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 92 THEN v_SL_SYNC_RECORD.VAL84:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 84',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 93 THEN v_SL_SYNC_RECORD.VAL85:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 85',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 94 THEN v_SL_SYNC_RECORD.VAL86:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 86',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 95 THEN v_SL_SYNC_RECORD.VAL87:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 87',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 96 THEN v_SL_SYNC_RECORD.VAL88:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 88',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 97 THEN v_SL_SYNC_RECORD.VAL89:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 89',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 98 THEN v_SL_SYNC_RECORD.VAL90:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 90',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 99 THEN v_SL_SYNC_RECORD.VAL91:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 91',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 100 THEN v_SL_SYNC_RECORD.VAL92:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 92',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 101 THEN v_SL_SYNC_RECORD.VAL93:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 93',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 102 THEN v_SL_SYNC_RECORD.VAL94:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 94',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 103 THEN v_SL_SYNC_RECORD.VAL95:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 95',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 104 THEN v_SL_SYNC_RECORD.VAL96:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 96',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 105 THEN v_SL_SYNC_RECORD.VAL97:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 97',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 106 THEN v_SL_SYNC_RECORD.VAL98:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 98',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 107 THEN v_SL_SYNC_RECORD.VAL99:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 99',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 108 THEN v_SL_SYNC_RECORD.VAL100:= IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Value 100',
                                                                        p_SUCCESS);
            ELSE NULL;
            END IF;
        END IF;
    END LOOP;

    IF p_SUCCESS THEN
        INSERT INTO SERVICE_LOAD_STAGING VALUES v_SL_SYNC_RECORD;
    END IF;
END SERVICE_LOAD_SYNC_IMPORT;
-----------------------------------------------------------------------------
PROCEDURE ACCOUNT_SYNC_IMPORT
    (
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
    p_SUCCESS IN OUT BOOLEAN
    ) AS
    v_RECORDS PARSE_UTIL.STRING_TABLE;
    v_CURRENT_RECORD VARCHAR(256);
    v_ACCOUNT_SYNC_STAGING_REC ACCOUNT_SYNC_STAGING%ROWTYPE;
BEGIN
    BEGIN
        PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER , v_RECORDS);
    EXCEPTION
        WHEN OTHERS THEN
            ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Unable to parse line: ' || p_LINE);
    END;

    -- Verify the column count
    IF v_RECORDS.COUNT > c_ACCOUNT_SYNC_TOTAL_COLUMNS THEN
        LOG_IMPORT_ERROR('The total number of columns in a row should be less than or equal to '
            || TO_CHAR(c_ACCOUNT_SYNC_TOTAL_COLUMNS) || ' columns but found ' || TO_CHAR(v_RECORDS.COUNT) || ' columns.', p_SUCCESS);
        RETURN; -- DON'T TRY TO PROCESS THE REST OF THE ROWS, WITH TOO MANY COLUMNS WHO KNOWS WHAT THEY WERE TRYING TO DO
    END IF;

    -- Verify the required columns
    IF v_RECORDS.COUNT >= 4 THEN
        IF LTRIM(RTRIM(v_RECORDS(1))) IS NULL THEN
            LOG_IMPORT_ERROR('The Begin Date column is required.', p_SUCCESS);
        END IF;

        IF LTRIM(RTRIM(v_RECORDS(3))) IS NULL THEN
            LOG_IMPORT_ERROR('The Account Identifier column is required.', p_SUCCESS);
        END IF;

        IF LTRIM(RTRIM(v_RECORDS(4))) IS NULL THEN
            LOG_IMPORT_ERROR('The Account Service column is required.', p_SUCCESS);
        END IF;
    ELSE
        LOG_IMPORT_ERROR('One of the required columns is missing from the file.', p_SUCCESS);
        RETURN;
    END IF;

    FOR v_INDEX IN v_RECORDS.FIRST..v_RECORDS.LAST LOOP
        v_CURRENT_RECORD := LTRIM(RTRIM(v_RECORDS(v_INDEX)));
        IF v_CURRENT_RECORD IS NOT NULL THEN
            IF v_INDEX = 1 THEN v_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE := IMPORT_DATE(v_CURRENT_RECORD,
                                                                        DEFAULT_DATE_FORMAT,
                                                                        'Begin date: ',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 2 THEN v_ACCOUNT_SYNC_STAGING_REC.END_DATE := IMPORT_DATE(v_CURRENT_RECORD,
                                                                        DEFAULT_DATE_FORMAT,
                                                                        'End date: ',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 3 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 4 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Service: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE,
                                        p_SUCCESS);
            ELSIF v_INDEX = 5 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Name: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_NAME,
                                        p_SUCCESS);
            ELSIF v_INDEX = 6 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Alias: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ALIAS,
                                        p_SUCCESS);
            ELSIF v_INDEX = 7 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Description: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_DESC,
                                        p_SUCCESS);
            ELSIF v_INDEX = 8 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Status: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_STATUS,
                                        p_SUCCESS);
            ELSIF v_INDEX = 9 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Model Option: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION,
                                        p_SUCCESS);
            ELSIF v_INDEX = 10 THEN v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IS_SUB_AGGREGATE := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                        'Account Is Sub-Aggregate: ',
                                                                                                        p_SUCCESS);
            ELSIF v_INDEX = 11 THEN v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IS_UFE_PARTICIPANT := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                        'Account Is UFE Participant: ',
                                                                                                        p_SUCCESS);
            ELSIF v_INDEX = 12 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account DUNS #: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_DUNS_NUMBER,
                                        p_SUCCESS);
            ELSIF v_INDEX = 13 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account SIC Code: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SIC_CODE,
                                        p_SUCCESS);
            ELSIF v_INDEX = 14 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'EDC Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.EDC_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 15 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Number (EDC): ',
                                        v_ACCOUNT_SYNC_STAGING_REC.EDC_ACCOUNT_NUMBER,
                                        p_SUCCESS);
            ELSIF v_INDEX = 16 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'EDC Rate Class: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.EDC_RATE_CLASS,
                                        p_SUCCESS);
            ELSIF v_INDEX = 17 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'EDC Strata: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.EDC_STRATA,
                                        p_SUCCESS);
            ELSIF v_INDEX = 18 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'ESP Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ESP_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 19 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Pool Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.POOL_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 20 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Number (ESP): ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ESP_ACCOUNT_NUMBER,
                                        p_SUCCESS);
            ELSIF v_INDEX = 21 THEN v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL1 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Account Ancillary Service #1 Value: ',
                                                                                                                p_SUCCESS);
            ELSIF v_INDEX = 22 THEN v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL2 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Account Ancillary Service #2 Value: ',
                                                                                                                p_SUCCESS);
            ELSIF v_INDEX = 23 THEN v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL3 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                               'Account Ancillary Service #3 Value: ',
                                                                                                                p_SUCCESS);
            ELSIF v_INDEX = 24 THEN v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL4 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Account Ancillary Service #4 Value: ',
                                                                                                                p_SUCCESS);
            ELSIF v_INDEX = 25 THEN v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL5 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Account Ancillary Service #5 Value: ',
                                                                                                                p_SUCCESS);
            ELSIF v_INDEX = 26 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Service Location Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 27 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Service Location Name: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_NAME,
                                        p_SUCCESS);
            ELSIF v_INDEX = 28 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Service Location Alias: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_ALIAS,
                                        p_SUCCESS);
            ELSIF v_INDEX = 29 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Service Location Description: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_DESC,
                                        p_SUCCESS);
            ELSIF v_INDEX = 30 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Latitude: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.LATITUDE,
                                        p_SUCCESS);
            ELSIF v_INDEX = 31 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Longitude: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.LONGITUDE,
                                        p_SUCCESS);
            ELSIF v_INDEX = 32 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Time Zone: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TIME_ZONE,
                                        p_SUCCESS);
            ELSIF v_INDEX = 33 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Weather Station Identifier',
                                        v_ACCOUNT_SYNC_STAGING_REC.WEATHER_STATION_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 34 THEN v_ACCOUNT_SYNC_STAGING_REC.SQUARE_FOOTAGE := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                            'Square Footage: ',
                                                                                                            p_SUCCESS);
            ELSIF v_INDEX = 35 THEN v_ACCOUNT_SYNC_STAGING_REC.ANNUAL_CONSUMPTION := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                            'Annual Consumption: ',
                                                                                                            p_SUCCESS);
            ELSIF v_INDEX = 36 THEN v_ACCOUNT_SYNC_STAGING_REC.SUMMER_CONSUMPTION := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                            'Summer Consumption: ',
                                                                                                            p_SUCCESS);
            ELSIF v_INDEX = 37 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Service Zone Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.SERVICE_ZONE_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 38 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Service Point Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.SERVICE_POINT_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 39 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Sub-Station Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.SUB_STATION_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 40 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Feeder Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.FEEDER_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 41 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Feeder Segment Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.FEEDER_SEGMENT_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 42 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Premise Identifier (EDC): ',
                                        v_ACCOUNT_SYNC_STAGING_REC.PREMISE_EDC_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 43 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Premise Identifier (ESP): ',
                                        v_ACCOUNT_SYNC_STAGING_REC.PREMISE_ESP_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 44 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 45 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Name: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_NAME,
                                        p_SUCCESS);
            ELSIF v_INDEX = 46 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Alias: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_ALIAS,
                                        p_SUCCESS);
            ELSIF v_INDEX = 47 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Description: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_DESC,
                                        p_SUCCESS);
            ELSIF v_INDEX = 48 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Status: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_STATUS,
                                        p_SUCCESS);
            ELSIF v_INDEX = 49 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Type: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_TYPE,
                                        p_SUCCESS);
            ELSIF v_INDEX = 50 THEN v_ACCOUNT_SYNC_STAGING_REC.USE_TOU_USAGE_FACTOR := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                            'Use TOU Usage Factors: ',
                                                                                                            p_SUCCESS);

            ELSIF v_INDEX = 51 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Interval: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_INTERVAL,
                                        p_SUCCESS);
            ELSIF v_INDEX = 52 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Unit of Measure: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_UNIT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 53 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'MRSP Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.MRSP_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 54 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Identifier (EDC): ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_EDC_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 55 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Identifier (ESP): ',
                                        v_ACCOUNT_SYNC_STAGING_REC.METER_ESP_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 56 THEN v_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL1 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Meter Ancillary Service #1 Value: ',
                                                                                                                p_SUCCESS);

            ELSIF v_INDEX = 57 THEN v_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL2 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Meter Ancillary Service #2 Value: ',
                                                                                                                p_SUCCESS);

            ELSIF v_INDEX = 58 THEN v_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL3 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                               'Meter Ancillary Service #3 Value: ',
                                                                                                                p_SUCCESS);

            ELSIF v_INDEX = 59 THEN v_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL4 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Meter Ancillary Service #4 Value: ',
                                                                                                                p_SUCCESS);

            ELSIF v_INDEX = 60 THEN v_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL5 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Meter Ancillary Service #5 Value: ',
                                                                                                                p_SUCCESS);
            ELSIF v_INDEX = 61 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Forecast Load Model: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.FORECAST_CALENDAR_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 62 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Backcast Load Model: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.BACKCAST_CALENDAR_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 63 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Settlement Profile Load Model: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.STTL_PROFILE_CALENDAR_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 64 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'TOU Template Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 65 THEN v_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Usage Factor (Period#1): ',
                                                                                                                p_SUCCESS);

            ELSIF v_INDEX = 66 THEN v_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL2 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Usage Factor (Period#2): ',
                                                                                                                p_SUCCESS);

            ELSIF v_INDEX = 67 THEN v_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL3 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Usage Factor (Period#3): ',
                                                                                                                p_SUCCESS);

            ELSIF v_INDEX = 68 THEN v_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL4 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Usage Factor (Period#4): ',
                                                                                                                p_SUCCESS);

            ELSIF v_INDEX = 69 THEN v_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL5 := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                                                                'Usage Factor (Period#5): ',
                                                                                                                p_SUCCESS);
            ELSIF v_INDEX = 70 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Loss Factor Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 71 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Schedule Group Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 72 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Cost Product Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.COST_PRODUCT_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 73 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Revenue Product Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.REVENUE_PRODUCT_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 74 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Billing Agent: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.BILLING_AGENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 75 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Bill Cycle: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.BILL_CYCLE_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 76 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Service Contract: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.CONTRACT_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 77 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Group Identifier #1: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT1,
                                        p_SUCCESS);
            ELSIF v_INDEX = 78 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Group Identifier #2: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT2,
                                        p_SUCCESS);
            ELSIF v_INDEX = 79 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Group Identifier #3: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT3,
                                        p_SUCCESS);
            ELSIF v_INDEX = 80 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Group Identifier #4: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT4,
                                        p_SUCCESS);
            ELSIF v_INDEX = 81 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Account Group Identifier #5: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT5,
                                        p_SUCCESS);
            ELSIF v_INDEX = 82 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Entity Group Identifier #1: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT1,
                                        p_SUCCESS);
            ELSIF v_INDEX = 83 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Entity Group Identifier #2: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT2,
                                        p_SUCCESS);
            ELSIF v_INDEX = 84 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Entity Group Identifier #3: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT3,
                                        p_SUCCESS);
            ELSIF v_INDEX = 85 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Entity Group Identifier #4: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT4,
                                        p_SUCCESS);
            ELSIF v_INDEX = 86 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Entity Group Identifier #5: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT5,
                                        p_SUCCESS);
            ELSIF v_INDEX = 87 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #1: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL1,
                                        p_SUCCESS);
            ELSIF v_INDEX = 88 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #2: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL2,
                                        p_SUCCESS);
            ELSIF v_INDEX = 89 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #3: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL3,
                                        p_SUCCESS);
            ELSIF v_INDEX = 90 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #4: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL4,
                                        p_SUCCESS);
            ELSIF v_INDEX = 91 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #5: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL5,
                                        p_SUCCESS);
            ELSIF v_INDEX = 92 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #6: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL6,
                                        p_SUCCESS);
            ELSIF v_INDEX = 93 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #7: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL7,
                                        p_SUCCESS);
            ELSIF v_INDEX = 94 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #8: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL8,
                                        p_SUCCESS);
            ELSIF v_INDEX = 95 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #9: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL9,
                                        p_SUCCESS);
            ELSIF v_INDEX = 96 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Custom Attribute #10: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL10,
                                        p_SUCCESS);
            ELSIF v_INDEX = 97 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Forecast Proxy Day Method Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.FORECAST_PROXY_DAY_IDENT,
                                        p_SUCCESS);
            ELSIF v_INDEX = 98 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Backcast Proxy Day Method Identifier: ',
                                        v_ACCOUNT_SYNC_STAGING_REC.BACKCAST_PROXY_DAY_IDENT,
                                        p_SUCCESS);
            ELSE NULL;
            END IF;
        END IF;
    END LOOP;

    IF p_SUCCESS THEN
        -- [BZ 29038] set sync_order according to line number
        v_ACCOUNT_SYNC_STAGING_REC.SYNC_ORDER := g_LINE_NBR;
        INSERT INTO ACCOUNT_SYNC_STAGING VALUES v_ACCOUNT_SYNC_STAGING_REC;
    END IF;
END ACCOUNT_SYNC_IMPORT;
-----------------------------------------------------------------------------------------------
PROCEDURE NON_INTERVAL_USAGE_SYNC
    (
	p_LINE IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
    p_SUCCESS IN OUT BOOLEAN
    ) AS
    v_RECORDS PARSE_UTIL.STRING_TABLE;
    v_CURRENT_RECORD VARCHAR(256);
    v_REC SERVICE_CONSUMPTION_STAGING%ROWTYPE;
BEGIN
    BEGIN
        PARSE_UTIL.PARSE_DELIMITED_STRING(p_LINE, p_DELIMITER , v_RECORDS);
    EXCEPTION
        WHEN OTHERS THEN
            ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'Unable to parse line: ' || p_LINE);
    END;

    -- Verify the column count
    IF v_RECORDS.COUNT > c_NON_INTVL_SYNC_TOTAL_COLUMNS THEN
        LOG_IMPORT_ERROR('The total number of columns in a row should be less than or equal to '
            || TO_CHAR(c_NON_INTVL_SYNC_TOTAL_COLUMNS) || ' columns but found ' || TO_CHAR(v_RECORDS.COUNT) || ' columns.', p_SUCCESS);
        RETURN;
    END IF;

    -- Verify the required columns
    IF v_RECORDS.COUNT >= 6 THEN
        IF LTRIM(RTRIM(v_RECORDS(1))) IS NULL THEN
            LOG_IMPORT_ERROR('The Account Identifier column is required.', p_SUCCESS);
        END IF;

        IF LTRIM(RTRIM(v_RECORDS(5))) IS NULL THEN
            LOG_IMPORT_ERROR('The Begin Date column is required.', p_SUCCESS);
        END IF;

        IF LTRIM(RTRIM(v_RECORDS(6))) IS NULL THEN
            LOG_IMPORT_ERROR('The End Date column is required.', p_SUCCESS);
        END IF;
    ELSE
        LOG_IMPORT_ERROR('One of the required columns is missing from the file.', p_SUCCESS);
        RETURN;
    END IF;

    FOR v_INDEX IN v_RECORDS.FIRST..v_RECORDS.LAST LOOP
        v_CURRENT_RECORD := LTRIM(RTRIM(v_RECORDS(v_INDEX)));
        IF v_CURRENT_RECORD IS NOT NULL THEN
            IF v_INDEX = 1 THEN IMPORT_STRING(v_CURRENT_RECORD,
                            'Account Identifier: ',
                            v_REC.ACCOUNT_IDENT,
                            p_SUCCESS,
                            c_SC_ACCOUNT_IDENT);
            ELSIF v_INDEX = 2 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Identifier: ',
                                        v_REC.METER_IDENT,
                                        p_SUCCESS,
                                        c_SC_METER_IDENT);
            ELSIF v_INDEX = 3 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'ESP Identifier: ',
                                        v_REC.ESP_IDENT,
                                        p_SUCCESS,
                                        c_SC_ESP_IDENT);
            ELSIF v_INDEX = 4 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Pool Identifier: ',
                                        v_REC.POOL_IDENT,
                                        p_SUCCESS,
                                        c_SC_POOL_IDENT);
            ELSIF v_INDEX = 5 THEN v_REC.BEGIN_DATE := IMPORT_DATE(v_CURRENT_RECORD,
                                                                        DEFAULT_DATE_FORMAT,
                                                                        'Begin Date: ',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 6 THEN v_REC.END_DATE := IMPORT_DATE(v_CURRENT_RECORD,
                                                                        DEFAULT_DATE_FORMAT,
                                                                        'End Date: ',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 7 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Bill Code: ',
                                        v_REC.BILL_CODE,
                                        p_SUCCESS,
                                        c_SC_BILL_CODE);
            ELSIF v_INDEX = 8 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Consumption Code: ',
                                        v_REC.CONSUMPTION_CODE,
                                        p_SUCCESS,
                                        c_SC_CONSUMPTION_CODE);
            ELSIF v_INDEX = 9 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Template Identifier: ',
                                        v_REC.TEMPLATE_IDENT,
                                        p_SUCCESS,
                                        c_SC_TEMPLATE_IDENT);
            ELSIF v_INDEX = 10 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Period Identifier: ',
                                        v_REC.PERIOD_IDENT,
                                        p_SUCCESS,
                                        c_SC_PERIOD_IDENT);
            ELSIF v_INDEX = 11 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'UOM: ',
                                        v_REC.UOM,
                                        p_SUCCESS,
                                        c_SC_UOM);
            ELSIF v_INDEX = 12 THEN IMPORT_STRING(v_CURRENT_RECORD,
                                        'Meter Reading: ',
                                        v_REC.METER_READING,
                                        p_SUCCESS,
                                        c_SC_METER_READING);
            ELSIF v_INDEX = 13 THEN v_REC.BILLED_USAGE := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                       'Billed Usage: ',
                                                                        p_SUCCESS);
            ELSIF v_INDEX = 14 THEN v_REC.BILLED_DEMAND := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                        'Billed Demand: ',
                                                                         p_SUCCESS);
            ELSIF v_INDEX = 15 THEN v_REC.METERED_USAGE := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                         'Metered Usage: ',
                                                                         p_SUCCESS);
            ELSIF v_INDEX = 16 THEN v_REC.METERED_DEMAND := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                          'Metered Demand: ',
                                                                           p_SUCCESS);
            ELSIF v_INDEX = 17 THEN v_REC.METERS_READ := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                       'Meters Read: ',
                                                                       p_SUCCESS);
            ELSIF v_INDEX = 18 THEN v_REC.CONVERSION_FACTOR := IMPORT_NUMBER(v_CURRENT_RECORD,
                                                                            'Conversion Factor: ',
                                                                            p_SUCCESS);
            ELSIF v_INDEX = 19 THEN v_REC.BILL_PROCESSED_DATE := IMPORT_DATE(v_CURRENT_RECORD,
                                                                        DEFAULT_DATE_FORMAT,
                                                                        'Bill Processed Date: ',
                                                                        p_SUCCESS);
            END IF;
        END IF;
    END LOOP;

    IF p_SUCCESS THEN
        INSERT INTO SERVICE_CONSUMPTION_STAGING VALUES v_REC;
    END IF;
END NON_INTERVAL_USAGE_SYNC;
-----------------------------------------------------------------------------
-- MAIN PROCEDURE CALLED BY STANDARD DATA IMPORTS
-- IT CALLS THE APPROPRIATE IMPORT BASED ON THE
-- SELECTED ENTITY TYPE
PROCEDURE STANDARD_IMPORT
(
	p_BEGIN_DATE DATE,
    p_END_DATE DATE,
	p_IMPORT_FILE IN CLOB,
	p_IMPORT_FILE_PATH IN VARCHAR2,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN VARCHAR2,
	p_DELIMITER IN VARCHAR2,
	p_PROCESS_STATUS OUT NUMBER,
	p_PROCESS_ID OUT VARCHAR2,
    p_MESSAGE OUT VARCHAR2,
    p_TRACE_ON IN NUMBER := 0
) AS

	v_TARGET_PARAMS UT.STRING_MAP;
	v_SUCCESS BOOLEAN;
  v_COUNT NUMBER;

	v_HEADER VARCHAR2(4000);
	v_LINES PARSE_UTIL.BIG_STRING_TABLE_MP;

	v_FIRST_HEADER VARCHAR2(200);

	-- PARAMS EXCLUSIVE TO WEATHER DATA
	v_STATION_PARAMS STRING_COLLECTION := STRING_COLLECTION();
	v_LOW_DATE DATE;
	v_HIGH_DATE DATE;

	-- PROFILE TYPE VARIABLES
	v_PROFILE_TYPE VARCHAR2(128);
	v_MIX_PROFILE_TYPES BOOLEAN := FALSE;

	v_CHILD_PROCESS_ID NUMBER;
	v_CHILD_PROCESS_STATUS NUMBER;

	v_DATA_IMPORT_TIME_FORMAT SYSTEM_DICTIONARY.VALUE%TYPE;
BEGIN

	-- validate the data import type selection
	ASSERT(p_ENTITY_LIST IS NOT NULL,
			'You must select one data import type.',
			MSGCODES.c_ERR_ARGUMENT);

	ASSERT(INSTR(p_ENTITY_LIST, p_ENTITY_LIST_DELIMITER) <= 0,
		'You cannot select more than one data import type.',
			MSGCODES.c_ERR_ARGUMENT);

	-- validate (as far as we can), the delimiter
	ASSERT(DBMS_LOB.INSTR(p_IMPORT_FILE, p_DELIMITER) > 0 ,
		'The given file does not contain the specified delimiter.',
			MSGCODES.c_ERR_ARGUMENT);

	-- GET THE EXPECTED HEADER TEXT FOR THE FIRST TOKEN, ALSO
	-- VALIDATE THE ENTITY LIST PARAMETER
	IF p_ENTITY_LIST = MARKET_PRICE_IMPORT_OPTION THEN
		v_FIRST_HEADER := 'Market Price';
	ELSIF p_ENTITY_LIST = ACCOUNT_DATA_IMPORT_OPTION THEN
		v_FIRST_HEADER := NULL;
	ELSIF p_ENTITY_LIST = WEATHER_DATA_IMPORT_OPTION THEN
		v_FIRST_HEADER := 'Weather Station';
	ELSIF p_ENTITY_LIST IN (INTVL_METERD_USAGE_DATA,
							INTVL_METERD_USAGE_DATA_EXT,
							NON_INTVL_METERD_USAGE_DATA,
							NON_INTVL_MTR_USG_DATA_EXT,
							INTVL_METERED_CHANNEL_DATA,
							INTVL_METERED_CHANNEL_DATA_EXT) THEN
		v_FIRST_HEADER := 'Account Name';
	ELSIF p_ENTITY_LIST = LOAD_PROFILE_IMPORT_OPTION THEN
		v_FIRST_HEADER := 'Profile Type';
	ELSIF p_ENTITY_LIST = TX_NETWORK_IMPORT_OPTION THEN
		v_FIRST_HEADER := 'Service Zone';
    ELSIF p_ENTITY_LIST = ACCOUNT_SYNC_OPTION OR p_ENTITY_LIST = ACCOUNT_SYNC_FULL_OPTION THEN
        v_FIRST_HEADER := 'Begin Date';
    ELSIF p_ENTITY_LIST IN (NON_INTVL_MTR_DATA_SYNC_OPTION,SERVICE_LOAD_SYNC_OPTION)  THEN
        v_FIRST_HEADER := 'Account Identifier';
	ELSE
		ERRS.RAISE_BAD_ARGUMENT('Import Type(p_ENTITY_LIST)',
					p_ENTITY_LIST,
					'The selected import type was unrecognized.');
	END IF;

	v_TARGET_PARAMS('Import Type') := p_ENTITY_LIST;
	v_TARGET_PARAMS('Delimiter') := p_DELIMITER;
	v_TARGET_PARAMS('Import File Path') := p_IMPORT_FILE_PATH;

    IF p_ENTITY_LIST = ACCOUNT_SYNC_OPTION OR p_ENTITY_LIST = ACCOUNT_SYNC_FULL_OPTION THEN
        ACCOUNT_SYNC.PURGE_ACCOUNT_SYNC_STAGING;
    ELSIF p_ENTITY_LIST = SERVICE_LOAD_SYNC_OPTION THEN
        DATA_SYNC.PURGE_SERVICE_LOAD_STAGING;
    ELSIF p_ENTITY_LIST = NON_INTVL_MTR_DATA_SYNC_OPTION THEN
        DATA_SYNC.PURGE_SERV_CONSUMPTION_STAGING;
    END IF;

	BEGIN

		SAVEPOINT SAVEPOINT_DATA_IMPORT;

		LOGS.START_PROCESS(p_PROCESS_NAME => 'Standard Data Import',
			p_TARGET_PARAMETERS => v_TARGET_PARAMS,
            p_TRACE_ON => p_TRACE_ON);

		-- REINITIALIZE THE DATE FORMAT IN CASE IT HAS CHANGED SINCE THE PACKAGE
		-- WAS ORIGINALLY INSTANTIATED
		DEFAULT_DATE_FORMAT := GET_DICTIONARY_VALUE('Date Format', CONSTANTS.GLOBAL_MODEL,
										 'Data Import');

		v_DATA_IMPORT_TIME_FORMAT := GET_DICTIONARY_VALUE('Time Format', CONSTANTS.GLOBAL_MODEL, 'Data Import');

		v_SUCCESS := TRUE;

		-- HEADER IS NEEDED FOR THE ACCOUNT IMPORT
		PARSE_UTIL.PARSE_CLOB_INTO_LINES(p_IMPORT_FILE, v_LINES);
		v_HEADER := v_LINES(v_LINES.FIRST);

		-- RESET THE PREVIOUS LIB, LP AND CAL FOR THE HISTORICAL PROFILE IMPRT
		g_PREV_CAL_NAME := NULL;
		g_PREV_LP_NAME := NULL;
		g_PREV_LIB_NAME := NULL;
		g_LAST_LP_ID := NULL;
		v_MIX_PROFILE_TYPES := FALSE;
		v_PROFILE_TYPE := NULL;

		-- RESET THE PREVIOUS VARIABLES FOR THE CHANNEL DATA IMPORT
		g_PREV_ACCOUNT_ID := NULL;
		g_PREV_METER_ID := NULL;
		g_PREV_SERVICE_LOCATION_ID := NULL;
		g_PREV_DATE := NULL;
		g_PREV_METER_CODE := NULL;

		-- SPLIT THE CLOB INTO LINES AND FIND THE FIRST NON-HEADER LINE
		IF v_FIRST_HEADER IS NOT NULL THEN
			g_LINE_NBR := FIND_FIRST_DATA_LINE(v_LINES, p_DELIMITER, v_FIRST_HEADER);
		ELSE
			-- SKIP TO THE SECOND LINE, ASSUME WE HAVE A HEADER
			-- (USED W/ THE ACCOUNT IMPORT)
			g_LINE_NBR := 2;
		END IF;
   

        IF p_ENTITY_LIST = WEATHER_DATA_IMPORT_OPTION AND UPPER(get_dictionary_value('MDR Backend',0, 'System', 'GA Settings', 'General')) = 'TRUE' THEN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE STATION_PARAMETER_VALUE_TEMP';
        END IF;

		WHILE v_LINES.EXISTS(g_LINE_NBR) AND v_LINES(g_LINE_NBR) IS NOT NULL LOOP
			BEGIN

				g_LINE := v_LINES(g_LINE_NBR);

				IF p_ENTITY_LIST = MARKET_PRICE_IMPORT_OPTION THEN
					MARKET_PRICE_IMPORT(g_LINE,
										p_DELIMITER,
										v_SUCCESS);
				ELSIF p_ENTITY_LIST = ACCOUNT_DATA_IMPORT_OPTION THEN
					ACCOUNT_IMPORT.IMPORT_ACCOUNT_LINE(v_HEADER,
  							g_LINE,
							DEFAULT_DATE_FORMAT,
							v_DATA_IMPORT_TIME_FORMAT,
							p_DELIMITER,
							v_SUCCESS);
				ELSIF p_ENTITY_LIST = WEATHER_DATA_IMPORT_OPTION THEN
					WEATHER_DATA_IMPORT(g_LINE,
										p_DELIMITER,
										v_LOW_DATE,
										v_HIGH_DATE,
										v_STATION_PARAMS,
										v_SUCCESS);
				ELSIF p_ENTITY_LIST = INTVL_METERD_USAGE_DATA THEN
					MS.ACCEPT_INTERVAL_USAGE_RECORD(CURRENT_VERSION_DATE,
													DEFAULT_DATE_FORMAT,
													0,
													g_LINE,
													GA.LOCAL_TIME_ZONE,
													p_DELIMITER,
													v_SUCCESS);
				ELSIF p_ENTITY_LIST = INTVL_METERD_USAGE_DATA_EXT THEN
					MS.ACCEPT_INTERVAL_USAGE_RECORD(CURRENT_VERSION_DATE,
													DEFAULT_DATE_FORMAT,
													1,
													g_LINE,
													GA.LOCAL_TIME_ZONE,
													p_DELIMITER,
													v_SUCCESS);
				ELSIF p_ENTITY_LIST = NON_INTVL_METERD_USAGE_DATA THEN
					MS.ACCEPT_BILLED_USAGE_RECORD(DEFAULT_DATE_FORMAT,
												  0,
												  g_LINE,
												  p_DELIMITER,
												  v_SUCCESS);
				ELSIF p_ENTITY_LIST = NON_INTVL_MTR_USG_DATA_EXT THEN
					MS.ACCEPT_BILLED_USAGE_RECORD(DEFAULT_DATE_FORMAT,
												  1,
												  g_LINE,
												  p_DELIMITER,
												  v_SUCCESS);
				ELSIF p_ENTITY_LIST = INTVL_METERED_CHANNEL_DATA THEN
					CHANNEL_DATA_IMPORT(g_LINE,
										p_DELIMITER,
										FALSE,
										v_SUCCESS);
				ELSIF p_ENTITY_LIST = INTVL_METERED_CHANNEL_DATA_EXT THEN
					CHANNEL_DATA_IMPORT(g_LINE,
										p_DELIMITER,
										TRUE,
										v_SUCCESS);
				ELSIF p_ENTITY_LIST = LOAD_PROFILE_IMPORT_OPTION
						AND NOT v_MIX_PROFILE_TYPES THEN -- WE STOP IMPORTING PROFILES
														-- ONCE WE MIX PROFILE TYPES
					PROFILE_IMPORT(g_LINE,
									p_DELIMITER,
									v_PROFILE_TYPE,
									v_SUCCESS,
									v_MIX_PROFILE_TYPES);
				ELSIF p_ENTITY_LIST = TX_NETWORK_IMPORT_OPTION THEN
					TX_NETWORK_IMPORT(g_LINE,
									p_DELIMITER,
									v_SUCCESS);
				ELSIF p_ENTITY_LIST IN (ACCOUNT_SYNC_OPTION, ACCOUNT_SYNC_FULL_OPTION) THEN
					ACCOUNT_SYNC_IMPORT(g_LINE,
                                        p_DELIMITER,
                                        v_SUCCESS);
				ELSIF p_ENTITY_LIST IN (NON_INTVL_MTR_DATA_SYNC_OPTION) THEN
                    NON_INTERVAL_USAGE_SYNC(g_LINE,
                                        p_DELIMITER,
                                        v_SUCCESS);
                ELSIF p_ENTITY_LIST = SERVICE_LOAD_SYNC_OPTION THEN
                    SERVICE_LOAD_SYNC_IMPORT(g_LINE,
                                             p_DELIMITER,
                                             v_SUCCESS);
				END IF;
			EXCEPTION
				WHEN OTHERS THEN
					ERRS.LOG_AND_CONTINUE(p_EXTRA_MESSAGE => 'Line Number ' || g_LINE_NBR
						|| ' : Unanticipated exception during import type: ' || p_ENTITY_LIST || '.');

					LOGS.POST_EVENT_DETAILS('Import text',
										'Failed line',
										g_LINE);
					v_SUCCESS := FALSE;
			END;

			g_LINE_NBR := v_LINES.NEXT(g_LINE_NBR);
		END LOOP;

		IF p_ENTITY_LIST IN (ACCOUNT_SYNC_OPTION, ACCOUNT_SYNC_FULL_OPTION) THEN
           IF v_SUCCESS THEN
				ACCOUNT_SYNC.PROCESS_ACCOUNT_SYNC_WITH_AGG(p_MESSAGE,
                    CASE WHEN p_ENTITY_LIST = ACCOUNT_SYNC_FULL_OPTION THEN 1 ELSE 0 END,  -- IS FULL SYNC?
                    p_BEGIN_DATE,
					0, -- RESET DATES
                    p_TRACE_ON); -- RESET DATES
            ELSE
                p_MESSAGE := 'The Account Sync process encountered errors while parsing the input file.  '
                    || 'All rows were processed to check their validity, but none were committed to the schema.';
            END IF;
		ELSIF p_ENTITY_LIST = NON_INTVL_MTR_DATA_SYNC_OPTION THEN
			IF v_SUCCESS THEN
                DATA_SYNC.PROCESS_SERVICE_CONS_STAGING(p_MESSAGE, v_CHILD_PROCESS_ID, v_CHILD_PROCESS_STATUS, p_TRACE_ON);
				LOGS.LOG_EVENT(GREATEST(v_CHILD_PROCESS_STATUS, LOGS.c_LEVEL_INFO), 'The Non-Interval Meter Data Sync process completed with a status = ' || LOG_REPORTS.GET_STATUS_LEVEL_STRING(v_CHILD_PROCESS_STATUS) || '.');
            ELSE
                p_MESSAGE := 'The Non-Interval Meter Data Sync process encountered errors while parsing the input file.  '
                    || 'All rows were processed to check their validity, but none were committed to the schema.';
            END IF;
        ELSIF p_ENTITY_LIST = SERVICE_LOAD_SYNC_OPTION THEN
			IF v_SUCCESS THEN
                DATA_SYNC.PROCESS_SERVICE_LOAD_SYNC(p_MESSAGE, v_CHILD_PROCESS_ID, v_CHILD_PROCESS_STATUS, p_TRACE_ON);
				LOGS.LOG_EVENT(GREATEST(v_CHILD_PROCESS_STATUS, LOGS.c_LEVEL_INFO), 'The Interval Meter Data Sync process completed with a status = ' || LOG_REPORTS.GET_STATUS_LEVEL_STRING(v_CHILD_PROCESS_STATUS) || '.');
            ELSE
                p_MESSAGE := 'The Interval Meter Data Sync process encountered errors while parsing the input file.  '
                    || 'All rows were processed to check their validity, but none were committed to the schema.';
            END IF;
        END IF;

		IF v_SUCCESS AND p_ENTITY_LIST = WEATHER_DATA_IMPORT_OPTION THEN
			POST_WEATHER_DATA(v_STATION_PARAMS,
								v_LOW_DATE,
								v_HIGH_DATE,
								v_SUCCESS);           
		END IF;

		IF p_ENTITY_LIST = WEATHER_DATA_IMPORT_OPTION AND UPPER(get_dictionary_value('MDR Backend',0, 'System', 'GA Settings', 'General')) = 'TRUE' THEN
            SELECT COUNT(*) INTO v_COUNT
            FROM STATION_PARAMETER_VALUE_TEMP;
            IF v_COUNT>0 THEN
                MDM.SYNC_WEATHER_DATA;
            END IF;
        END IF;

		-- PUT THE HISTORICAL PROFILE STATS IF WE LOADED HISTORICAL PROFILE STATS
		IF v_SUCCESS AND p_ENTITY_LIST = LOAD_PROFILE_IMPORT_OPTION
				AND NVL(g_LAST_LP_ID,0) > 0 AND UPPER(v_PROFILE_TYPE) = PROFILE_TYPE_HISTORICAL THEN
			CALCULATE_PROFILE_STATS(g_LAST_LP_ID);
		END IF;

		-- ROLLUP CHANNEL DATA IF WE LOADED CHANNEL DATA
		IF v_SUCCESS AND p_ENTITY_LIST IN
			(INTVL_METERED_CHANNEL_DATA, INTVL_METERED_CHANNEL_DATA_EXT)
			AND g_PREV_ACCOUNT_ID IS NOT NULL THEN

			ROLLUP_CHANNEL_DATA(g_PREV_ACCOUNT_ID,
								g_PREV_METER_ID,
								g_PREV_SERVICE_LOCATION_ID,
								g_PREV_DATE,
								g_PREV_METER_CODE,
								v_SUCCESS);
		END IF;

		IF NOT v_SUCCESS THEN
			ERRS.ROLLBACK_TO('SAVEPOINT_DATA_IMPORT');
		END IF;

		p_PROCESS_ID := TO_CHAR(LOGS.CURRENT_PROCESS_ID);

		LOGS.STOP_PROCESS(p_MESSAGE,
				p_PROCESS_STATUS);

		IF V_SUCCESS THEN
			COMMIT;
		END IF;

	EXCEPTION
	WHEN OTHERS THEN
		ERRS.ABORT_PROCESS(p_SAVEPOINT_NAME => 'SAVEPOINT_DATA_IMPORT');
	END;

END STANDARD_IMPORT;
-----------------------------------------------------------------------------
FUNCTION IMPORT_DATE
	(
	p_DATE_STRING IN VARCHAR2,
	p_DATE_FORMAT IN VARCHAR2,
	p_IMPORT_INFO IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
	) RETURN DATE IS

	v_RESULT DATE := NULL;

	v_PROC_NAME VARCHAR2(128);
	v_STEP_NAME VARCHAR2(32);

BEGIN

	BEGIN
		v_RESULT := TO_DATE(p_DATE_STRING, p_DATE_FORMAT);
	EXCEPTION
		WHEN OTHERS THEN
			LOGS.GET_CALLER(v_PROC_NAME, v_STEP_NAME);
			LOG_IMPORT_ERROR(p_IMPORT_INFO
								|| ' Date String: ' || p_DATE_STRING
								|| ' cannot be converted using format: ' || p_DATE_FORMAT,
								p_SUCCESS,
								v_PROC_NAME,
								v_STEP_NAME,
								UT.GET_FULL_ERRM);
	END;

	RETURN v_RESULT;
END IMPORT_DATE;
-----------------------------------------------------------------------------
FUNCTION IMPORT_DATE_TIME
	(
	p_DATE_STRING IN VARCHAR2,
	p_DATE_FORMAT IN VARCHAR2,
	p_TIME_FORMAT IN VARCHAR2,
	p_IMPORT_INFO IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
	) RETURN DATE IS

	v_IS_SUBDAILY BOOLEAN := FALSE;
	v_TIME_IN_DATE_STRING BOOLEAN := FALSE;

	v_PROC_NAME VARCHAR2(128);
	v_STEP_NAME VARCHAR2(32);
BEGIN
    IF GA.CSB_IS_SUBDAILY = TRUE THEN
	    v_IS_SUBDAILY := TRUE;
	END IF;
	IF INSTR(p_DATE_STRING, ' ') > 0 THEN
	    v_TIME_IN_DATE_STRING := TRUE;
	END IF;

	IF v_TIME_IN_DATE_STRING THEN
	    IF v_IS_SUBDAILY THEN
		    RETURN IMPORT_DATE(p_DATE_STRING, p_DATE_FORMAT || ' ' || NVL(p_TIME_FORMAT, 'HH24:MI'), p_IMPORT_INFO, p_SUCCESS);
		ELSE
		    LOGS.GET_CALLER(v_PROC_NAME, v_STEP_NAME);
			LOG_IMPORT_ERROR(p_IMPORT_INFO || 'Unexpected Subdaily Date String: ' || p_DATE_STRING,
							 p_SUCCESS,
							 v_PROC_NAME,
							 v_STEP_NAME,
							 UT.GET_FULL_ERRM);
			RETURN NULL;
		END IF;
	ELSE
	    RETURN IMPORT_DATE(p_DATE_STRING, p_DATE_FORMAT, p_IMPORT_INFO, p_SUCCESS);
	END IF;
END IMPORT_DATE_TIME;
-----------------------------------------------------------------------------
FUNCTION IMPORT_NUMBER
	(
	p_NUM_STRING IN VARCHAR2,
	p_IMPORT_INFO IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN
	) RETURN NUMBER is

	v_RESULT NUMBER := NULL;

	v_PROC_NAME VARCHAR2(128);
	v_STEP_NAME VARCHAR2(32);

BEGIN

	BEGIN
		v_RESULT := TO_NUMBER(p_NUM_STRING);
	EXCEPTION
		WHEN OTHERS THEN
			LOGS.GET_CALLER(v_PROC_NAME, v_STEP_NAME);
		 	LOG_IMPORT_ERROR(p_IMPORT_INFO || ' Number String: '
								|| p_NUM_STRING || ' cannot be converted.',
								p_SUCCESS,
								v_PROC_NAME,
								v_STEP_NAME,
								UT.GET_FULL_ERRM);
	END;

	RETURN v_RESULT;
END IMPORT_NUMBER;
-----------------------------------------------------------------------------
PROCEDURE STANDARD_DATA_IMPORT_OPTIONS
	(
	p_CURSOR OUT GA.REFCURSOR,
	p_LABEL OUT VARCHAR
	) AS

	BEGIN

		OPEN p_CURSOR FOR
		SELECT MARKET_PRICE_IMPORT_OPTION
		FROM DUAL
		UNION ALL
		SELECT ACCOUNT_DATA_IMPORT_OPTION
		FROM DUAL
		UNION ALL
		SELECT INTVL_METERD_USAGE_DATA
		FROM DUAL
		UNION ALL
		SELECT INTVL_METERD_USAGE_DATA_EXT
		FROM DUAL
		UNION ALL
		SELECT NON_INTVL_METERD_USAGE_DATA
		FROM DUAL
		UNION ALL
		SELECT NON_INTVL_MTR_USG_DATA_EXT
		FROM DUAL
		UNION ALL
		SELECT WEATHER_DATA_IMPORT_OPTION
		FROM DUAL
		UNION ALL
		SELECT LOAD_PROFILE_IMPORT_OPTION
		FROM DUAL
		UNION ALL
		SELECT TX_NETWORK_IMPORT_OPTION
		FROM DUAL
		UNION ALL
		SELECT INTVL_METERED_CHANNEL_DATA
		FROM DUAL
		UNION ALL
		SELECT INTVL_METERED_CHANNEL_DATA_EXT
		FROM DUAL
        UNION ALL
		SELECT ACCOUNT_SYNC_OPTION
		FROM DUAL
        UNION ALL
		SELECT ACCOUNT_SYNC_FULL_OPTION
		FROM DUAL
        UNION ALL
        SELECT NON_INTVL_MTR_DATA_SYNC_OPTION
        FROM DUAL
        UNION ALL
        SELECT SERVICE_LOAD_SYNC_OPTION
        FROM DUAL
		ORDER BY 1;

	p_LABEL := 'Import Type';

END STANDARD_DATA_IMPORT_OPTIONS;
-----------------------------------------------------------------------------
PROCEDURE LOG_IMPORT_ERROR
	(
	p_EVENT_TEXT IN VARCHAR2,
	p_SUCCESS IN OUT BOOLEAN,
	p_PROC_NAME IN VARCHAR2 := NULL,
	p_STEP_NAME IN VARCHAR2 := NULL,
	p_SQLERRM IN VARCHAR2 := NULL
	) AS

	v_PROC_NAME VARCHAR2(128);
	v_STEP_NAME VARCHAR2(128);

BEGIN
	IF p_PROC_NAME IS NULL AND p_STEP_NAME IS NULL THEN
		LOGS.GET_CALLER(v_PROC_NAME, v_STEP_NAME);
	END IF;

	LOGS.LOG_ERROR(
		p_EVENT_TEXT => CASE WHEN g_LINE_NBR IS NOT NULL THEN 'Line number ' || g_LINE_NBR || ': ' ELSE NULL END || p_EVENT_TEXT,
		p_MESSAGE_CODE => MSGCODES.c_ERR_DATA_IMPORT,
		p_STEP_NAME => NVL(p_STEP_NAME, v_STEP_NAME),
		p_PROCEDURE_NAME => NVL(p_PROC_NAME, v_PROC_NAME),
		p_SQLERRM => p_SQLERRM);

	IF g_LINE IS NOT NULL THEN
	  LOGS.POST_EVENT_DETAILS('Import text',
		  'Failed line',
		  g_LINE);
	END IF;

	p_SUCCESS := FALSE;

END LOG_IMPORT_ERROR;
-----------------------------------------------------------------------------
PROCEDURE LOG_IMPORT_WARN
	(
	p_EVENT_TEXT IN VARCHAR2,
	p_PROC_NAME IN VARCHAR2 := NULL,
	p_STEP_NAME IN VARCHAR2 := NULL
	) AS

	v_PROC_NAME VARCHAR2(128);
	v_STEP_NAME VARCHAR2(128);

BEGIN
	IF p_PROC_NAME IS NULL AND p_STEP_NAME IS NULL THEN
		LOGS.GET_CALLER(v_PROC_NAME, v_STEP_NAME);
	END IF;

	LOGS.LOG_WARN(
		p_EVENT_TEXT => CASE WHEN g_LINE_NBR IS NOT NULL THEN 'Line number ' || g_LINE_NBR || ': ' ELSE NULL END || p_EVENT_TEXT,
		p_MESSAGE_CODE => MSGCODES.c_ERR_DATA_IMPORT,
		p_STEP_NAME => NVL(p_STEP_NAME, v_STEP_NAME),
		p_PROCEDURE_NAME => NVL(p_PROC_NAME, v_PROC_NAME));

	IF g_LINE IS NOT NULL THEN
	  LOGS.POST_EVENT_DETAILS('Import text',
		  'Failed line',
		  g_LINE);
	END IF;

END LOG_IMPORT_WARN;
-----------------------------------------------------------------------------
PROCEDURE GET_CALENDAR_PROF_DATES
	(
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE
	) AS
	v_SUCCESS BOOLEAN;
	v_DATE_STRING VARCHAR2(256);
BEGIN
	v_DATE_STRING := GET_DICTIONARY_VALUE('Calendar Profile Begin Date', CONSTANTS.GLOBAL_MODEL, 'Data Import', 'Import Profile');
	p_BEGIN_DATE := NVL(IMPORT_DATE(v_DATE_STRING, 'YYYY-MM-DD', 'System Setting - Calendar Profile Begin Date', v_SUCCESS), DATE '2000-01-01');

	v_DATE_STRING := GET_DICTIONARY_VALUE('Calendar Profile End Date', CONSTANTS.GLOBAL_MODEL, 'Data Import', 'Import Profile');
	IF UPPER(NVL(v_DATE_STRING, CONSTANTS.NONE_STRING)) <> UPPER(CONSTANTS.NONE_STRING) THEN
		p_END_DATE := IMPORT_DATE(v_DATE_STRING, 'YYYY-MM-DD', 'System Setting - Calendar Profile End Date', v_SUCCESS);
	ELSE
		p_END_DATE := NULL;
	END IF;
END GET_CALENDAR_PROF_DATES;
-----------------------------------------------------------------------------
PROCEDURE PUT_CALENDAR_PROFILE
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER
	) AS

	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
	v_STATUS NUMBER(9);

BEGIN
	GET_CALENDAR_PROF_DATES(v_BEGIN_DATE, v_END_DATE);
	UT.PUT_TEMPORAL_DATA('CALENDAR_PROFILE',
						v_BEGIN_DATE,
						v_END_DATE,
						TRUE,
						TRUE,
						'CALENDAR_ID',
						p_CALENDAR_ID,
						TRUE,
						'PROFILE_ID',
						p_PROFILE_ID,
						TRUE);

	CA.UPDT_CALENDAR_ASSIGNMENT_TYPE(p_CALENDAR_ID,v_STATUS);
	ERRS.VALIDATE_STATUS('CA.UPDT_CALENDAR_ASSIGNMENT_TYPE', v_STATUS);

END PUT_CALENDAR_PROFILE;
-----------------------------------------------------------------------------
PROCEDURE PUT_CALENDAR_PROFILE_LIBRARY
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_LIBRARY_ID IN NUMBER
	) AS

	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
	v_STATUS NUMBER(9);

BEGIN
	GET_CALENDAR_PROF_DATES(v_BEGIN_DATE, v_END_DATE);
	UT.PUT_TEMPORAL_DATA('CALENDAR_PROFILE_LIBRARY',
						v_BEGIN_DATE,
						v_END_DATE,
						TRUE,
						TRUE,
						'CALENDAR_ID',
						p_CALENDAR_ID,
						TRUE,
						'PROFILE_LIBRARY_ID',
						p_PROFILE_LIBRARY_ID,
						TRUE);

	CA.UPDT_CALENDAR_ASSIGNMENT_TYPE(p_CALENDAR_ID,v_STATUS);
	ERRS.VALIDATE_STATUS('CA.UPDT_CALENDAR_ASSIGNMENT_TYPE', v_STATUS);

END PUT_CALENDAR_PROFILE_LIBRARY;
-----------------------------------------------------------------------------
-- INITIALIZATION
BEGIN

	DEFAULT_DATE_FORMAT := GET_DICTIONARY_VALUE('Date Format', CONSTANTS.GLOBAL_MODEL,
									 'Data Import');

END DATA_IMPORT;
/
