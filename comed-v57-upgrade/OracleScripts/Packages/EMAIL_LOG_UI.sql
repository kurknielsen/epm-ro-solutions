CREATE OR REPLACE PACKAGE EMAIL_LOG_UI IS
--Revision $Revision: 1.3 $

  -- Author  : JHUMPHRIES
  -- Created : 3/11/2004 10:00:23 AM
  -- Purpose : This package is created to handle the logic for the Email Log. This used to be in the
  --			EL package, but that package was dropped when the APP_EVENT_LOG was removed in favor
  -- 			of the new PROCESS_LOG.

FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE EMAIL_LOG_REPORT
    (
    p_CATEGORY VARCHAR2,
    p_EMAIL_STATUS VARCHAR2,
    p_BEGIN_DATE IN DATE,
    p_END_DATE IN DATE,
    p_CURSOR OUT GA.REFCURSOR
    );

PROCEDURE STATUS_LIST
    (
    p_STATUS OUT NUMBER,
    p_CURSOR OUT GA.REFCURSOR
    );

PROCEDURE CAT_LIST
    (
    p_STATUS OUT NUMBER,
    p_CURSOR OUT GA.REFCURSOR
    );


FUNCTION BUILD_LIST
    (
    p_EMAIL_ID IN NUMBER,
    p_TYPE IN VARCHAR2
    ) RETURN VARCHAR2;

PROCEDURE EMAIL_DETAIL
    (
    p_EMAIL_ID IN NUMBER,
    p_CURSOR OUT GA.REFCURSOR
    );

PROCEDURE DELETE_EMAIL
    (
    p_EMAIL_ID IN NUMBER
    );

END EMAIL_LOG_UI;
/
CREATE OR REPLACE PACKAGE BODY EMAIL_LOG_UI IS
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.3 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE EMAIL_LOG_REPORT
    (
    p_CATEGORY IN VARCHAR2,
    p_EMAIL_STATUS IN VARCHAR2,
    p_BEGIN_DATE IN DATE,
    p_END_DATE IN DATE,
    p_CURSOR OUT GA.REFCURSOR
    ) AS
v_EMAIL_STATUS VARCHAR2(128);
v_CATEGORY VARCHAR2(128);
v_TIME_ZONE VARCHAR2(8);
BEGIN
	IF NOT SD.GET_ENTITY_IS_ALLOWED(SD.g_ACTION_MANAGE_EMAIL_LOG, SD.g_ALL_DATA_ENTITY_ID, CONSTANTS.NOT_ASSIGNED) THEN
		ERRS.RAISE_NO_PRIVILEGE_ACTION(SD.g_ACTION_MANAGE_EMAIL_LOG);
	END IF;

	SP.GET_TIME_ZONE(v_TIME_ZONE);

	IF p_EMAIL_STATUS IS NULL OR p_EMAIL_STATUS = CONSTANTS.ALL_STRING THEN
		v_EMAIL_STATUS := '%';
	ELSE
		v_EMAIL_STATUS := p_EMAIL_STATUS;
	END IF;

	IF p_CATEGORY IS NULL OR p_CATEGORY = CONSTANTS.ALL_STRING THEN
		v_CATEGORY := '%';
	ELSE
		v_CATEGORY := p_CATEGORY;
	END IF;

	OPEN p_CURSOR FOR
	SELECT EMAIL_ID,
		EMAIL_CATEGORY,
		EMAIL_STATUS,
		FROM_ADDRESS,
		SUBJECT,
		BUILD_LIST(EMAIL_ID, ML.c_TO) As TO_LIST,
		BUILD_LIST(EMAIL_ID, ML.c_CC) As CC_LIST,
		BUILD_LIST(EMAIL_ID, ML.c_BCC) As BCC_LIST,
		PRIORITY,
		SEND_DATE,
		ENTRY_DATE
	FROM EMAIL_LOG
	WHERE EMAIL_CATEGORY LIKE v_CATEGORY
		AND EMAIL_STATUS LIKE v_EMAIL_STATUS
		AND NVL(SEND_DATE, ENTRY_DATE) >= TRUNC(p_BEGIN_DATE)
		AND NVL(SEND_DATE, ENTRY_DATE) < TRUNC(p_END_DATE+1)
	ORDER BY SEND_DATE;

END EMAIL_LOG_REPORT;
-----------------------------------------------------------------------------------------------------------
PROCEDURE STATUS_LIST
    (
    p_STATUS OUT NUMBER,
    p_CURSOR OUT GA.REFCURSOR
    ) AS
BEGIN
	IF NOT SD.GET_ENTITY_IS_ALLOWED(SD.g_ACTION_MANAGE_EMAIL_LOG, SD.g_ALL_DATA_ENTITY_ID, CONSTANTS.NOT_ASSIGNED) THEN
		ERRS.RAISE_NO_PRIVILEGE_ACTION(SD.g_ACTION_MANAGE_EMAIL_LOG);
	END IF;

	OPEN p_CURSOR FOR
		SELECT CONSTANTS.ALL_STRING as "STATUS"
		FROM DUAL
		UNION ALL
		SELECT ML.c_STATUS_PENDING FROM DUAL
		UNION ALL
		SELECT ML.c_STATUS_QUEUED
		FROM DUAL
		UNION ALL
		SELECT ML.c_STATUS_IN_PROCESS FROM DUAL
		UNION ALL
		SELECT ML.c_STATUS_SENT FROM DUAL;

	p_STATUS := GA.SUCCESS;
END STATUS_LIST;
-----------------------------------------------------------------------------------------------------------
PROCEDURE CAT_LIST
    (
    p_STATUS OUT NUMBER,
    p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN

	IF NOT SD.GET_ENTITY_IS_ALLOWED(SD.g_ACTION_MANAGE_EMAIL_LOG, SD.g_ALL_DATA_ENTITY_ID, CONSTANTS.NOT_ASSIGNED) THEN
		ERRS.RAISE_NO_PRIVILEGE_ACTION(SD.g_ACTION_MANAGE_EMAIL_LOG);
	END IF;

	OPEN p_CURSOR FOR
		SELECT CONSTANTS.ALL_STRING FROM DUAL
		UNION ALL
		SELECT *
		FROM (SELECT DISTINCT EMAIL_CATEGORY
				FROM EMAIL_LOG
				ORDER BY 1);

	p_STATUS := GA.SUCCESS;
END CAT_LIST;
-----------------------------------------------------------------------------------------------------------
FUNCTION BUILD_LIST
    (
    p_EMAIL_ID IN NUMBER,
    p_TYPE IN VARCHAR2
    ) RETURN VARCHAR2 IS
v_RETURN VARCHAR2(4000);
v_FIRST BOOLEAN := TRUE;
CURSOR c_EMAIL_ADDR_LIST IS
    SELECT DISTINCT RECIPIENT_ADDRESS
    FROM EMAIL_LOG_RECIPIENT
    WHERE RECIPIENT_TYPE = p_TYPE
		AND EMAIL_ID = p_EMAIL_ID;
BEGIN

	IF NOT SD.GET_ENTITY_IS_ALLOWED(SD.g_ACTION_MANAGE_EMAIL_LOG, SD.g_ALL_DATA_ENTITY_ID, CONSTANTS.NOT_ASSIGNED) THEN
		ERRS.RAISE_NO_PRIVILEGE_ACTION(SD.g_ACTION_MANAGE_EMAIL_LOG);
	END IF;

	FOR v_EMAIL_ADDR_REC IN c_EMAIL_ADDR_LIST LOOP
		IF v_FIRST THEN
			v_FIRST := FALSE;
		ELSE
			v_RETURN := v_RETURN||', ';
		END IF;
		v_RETURN := v_RETURN||TRIM(v_EMAIL_ADDR_REC.RECIPIENT_ADDRESS);
	END LOOP;

	RETURN v_RETURN;

END BUILD_LIST;
-----------------------------------------------------------------------------------------------------------
PROCEDURE EMAIL_DETAIL
    (
    p_EMAIL_ID NUMBER,
    p_CURSOR OUT GA.REFCURSOR
    ) AS

BEGIN

	IF NOT SD.GET_ENTITY_IS_ALLOWED(SD.g_ACTION_MANAGE_EMAIL_LOG, SD.g_ALL_DATA_ENTITY_ID, CONSTANTS.NOT_ASSIGNED) THEN
		ERRS.RAISE_NO_PRIVILEGE_ACTION(SD.g_ACTION_MANAGE_EMAIL_LOG);
	END IF;

	OPEN p_CURSOR FOR
        SELECT *
        FROM EMAIL_LOG_ATTACHMENT
        WHERE EMAIL_ID = p_EMAIL_ID
        ORDER BY CONTENT_ORDER;

END EMAIL_DETAIL;
-----------------------------------------------------------------------------------------------------------
PROCEDURE DELETE_EMAIL
    (
    p_EMAIL_ID IN NUMBER
    ) As

BEGIN

	IF NOT SD.GET_ENTITY_IS_ALLOWED(SD.g_ACTION_MANAGE_EMAIL_LOG, SD.g_ALL_DATA_ENTITY_ID, CONSTANTS.NOT_ASSIGNED) THEN
		ERRS.RAISE_NO_PRIVILEGE_ACTION(SD.g_ACTION_MANAGE_EMAIL_LOG);
	END IF;

	DELETE FROM EMAIL_LOG WHERE EMAIL_ID = p_EMAIL_ID;

END DELETE_EMAIL;
-----------------------------------------------------------------------------------------------------------
END EMAIL_LOG_UI;
/
