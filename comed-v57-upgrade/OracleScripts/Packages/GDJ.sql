CREATE OR REPLACE PACKAGE GDJ IS
--Revision $Revision: 1.4 $

-- Gas Delivery for Java UI

FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE GET_COUNTERPARTIES
	(
	p_SUPPLY_ONLY IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_SUPPLY_POINTS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_DELIVERY_PIPELINES
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_DELIVERY_POINTS
	(
	p_PIPELINE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_DELIVERY_RECEIPT_POINTS
	(
	p_PIPELINE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_DELIVERIES
	(
	p_PIPELINE_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_STORAGE_CONTRACTS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_PIPELINE_CONTRACTS
	(
	p_PIPELINE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_POINTS_FOR_PIPELINE_ZONE
	(
	p_PIPELINE_ID IN NUMBER,
	p_ZONE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_PIPELINE_ZONES
	(
	p_PIPELINE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GAS_DEL_BY_SUPPLY_SUMMARY
	(
	p_SELLER_ID IN NUMBER,
	p_SUPPLY_POD_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GAS_DEL_BY_SUPPLY_DETAILS
	(
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_PIPELINE_ID IN NUMBER,
	p_DELIVERY_POD_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GAS_DEL_BY_DELIVERY_SUMMARY
	(
	p_PIPELINE_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GAS_DEL_BY_DELIVERY_DETAILS
	(
	p_DELIVERY_TRANSACTION_ID IN NUMBER,
	p_SELLER_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PUT_GAS_DEL_REPORT
	(
	p_DELIVERY_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_AS_OF_DATE IN DATE,
    p_SCHEDULE_DATE IN VARCHAR,
    p_SCHEDULED IN NUMBER,
    p_SUPPLY_PRICE IN NUMBER,
    p_ASSIGNED_AMOUNT IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE LIMITS_VALIDATION_SUMMARY
	(
	p_PIPELINE_ID IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_DELIVERY_ID IN VARCHAR2,
	p_INVALID_ONLY IN NUMBER,
	p_AVAILABLE_ONLY IN NUMBER,
	p_FOR_SEGMENTS IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_DELIVERY_NAME OUT VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LIMITS_VALIDATION_DETAILS
	(
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_FOR_SEGMENTS IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LIMITS_VALIDATION_TXNS
	(
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_FOR_SEGMENTS IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_SHOW_CAPACITY IN NUMBER,
	p_SHOW_DELIVERIES IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DELIVERY_SEGMENTS_SUMMARY
	(
	p_DELIVERY_ID IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DELIVERY_SEGMENTS_DETAILS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_STORAGE_SUMMARY
	(
	p_CONTRACT_ID IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_STORAGE_DETAILS
	(
	p_CONTRACT_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_STORAGE_TXNS
	(
	p_CONTRACT_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE RECEIVED_VOLUME_CALCULATOR
	(
	p_PIPELINE_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_POSITION
	(
	p_PIPELINE_ID IN NUMBER,
	p_ZONE_ID IN NUMBER,
	p_POINT_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_PSE_ID IN NUMBER,
	p_POOL_ID IN NUMBER,
	p_INCLUDE_FUEL IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_POINT_POSITION
	(
	p_PIPELINE_ID IN NUMBER,
	p_ZONE_ID IN NUMBER,
	p_POINT_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_POSITION_TXNS
	(
	p_PIPELINE_ID IN NUMBER,
	p_ZONE_ID IN NUMBER,
	p_POINT_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_PSE_ID IN NUMBER,
	p_POOL_ID IN NUMBER,
	p_TRANSACTION_TYPE IN VARCHAR2,
	p_SCHEDULE_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

FUNCTION COMPUTE_TOTAL_FUEL_PCT
	(
	p_DELIVERY_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE
	) RETURN NUMBER;

FUNCTION LOOKUP_PIPELINE_COMMODITY_RATE
	(
	p_CONTRACT_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE
	) RETURN NUMBER;

FUNCTION LOOKUP_PIPELINE_FUEL_PCT
	(
	p_CONTRACT_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE
	) RETURN NUMBER;

FUNCTION LOOKUP_PIPELINE_FUEL_RATE
	(
	p_CONTRACT_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE
	) RETURN NUMBER;

FUNCTION GET_CONSTRAINT_POINT
	(
	p_SERVICE_POINT_ID IN NUMBER
	) RETURN NUMBER;

PROCEDURE CALC_DELIVERY_DETAILS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_AMOUNT IN NUMBER
	);

g_GAS_DELIVERY_ASSIGNMENT_TYPE VARCHAR2(32) := 'GasDelivery';

END GDJ;
/
CREATE OR REPLACE PACKAGE BODY GDJ IS
----------------------------------------------------------------------------------------------------
-- IT Assignment procedures - the IA package isn't flexible enough - it assumes sub-daily intervals
-- and enforces the use of limits for dispatchable "from" transactions
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.4 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE BUILD_WORK_DATA_TO
	(
	p_TO_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_WORK_ID OUT NUMBER
	) AS
v_INTERVAL_NUMBER NUMBER;
BEGIN
	SELECT GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL)
	INTO v_INTERVAL_NUMBER
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_TO_TRANSACTION_ID;

	UT.GET_RTO_WORK_ID(p_WORK_ID);

    INSERT INTO IT_ASSIGNMENT_WORK
	    (WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE, AMOUNT, PRICE)
    SELECT p_WORK_ID,
        p_TO_TRANSACTION_ID,
        A.TRANSACTION_NAME,
        B.SCHEDULE_DATE,
        B.AMOUNT,
        B.PRICE
    FROM INTERCHANGE_TRANSACTION A,
	    IT_SCHEDULE B
    WHERE A.TRANSACTION_ID = p_TO_TRANSACTION_ID
        AND B.TRANSACTION_ID = p_TO_TRANSACTION_ID
        AND B.SCHEDULE_TYPE = p_SCHEDULE_TYPE
        AND B.SCHEDULE_STATE = GA.INTERNAL_STATE
        AND B.SCHEDULE_DATE BETWEEN (p_BEGIN_DATE+1/86400) AND (p_END_DATE+1/86400);

END BUILD_WORK_DATA_TO;
---------------------------------------------------------------------------------------------------
PROCEDURE BUILD_WORK_ASSIGNMENTS_FROM
	(
	p_TO_TRANSACTION_ID IN NUMBER,
	p_FROM_TRANSACTION_IDs IN ID_TABLE,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_WORK_ID OUT NUMBER
	) AS
v_INTERVAL_NUMBER NUMBER;
BEGIN
	SELECT GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL)
	INTO v_INTERVAL_NUMBER
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_TO_TRANSACTION_ID;

	UT.GET_RTO_WORK_ID(p_WORK_ID);

	INSERT INTO RTO_WORK (WORK_ID, WORK_XID)
	SELECT p_WORK_ID, X.ID
	FROM TABLE(CAST(p_FROM_TRANSACTION_IDs AS ID_TABLE)) X;

	INSERT INTO IT_ASSIGNMENT_WORK
		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
		 PRICE, ASSIGNED, AMOUNT, IS_FIXED, TERM_MAX, TERM_MIN)
	SELECT p_WORK_ID,
		A.TRANSACTION_ID,
		A.TRANSACTION_NAME,
		A.CUT_DATE,
		B.PRICE,
		NVL(C.AMOUNT,0),
		NVL(B.AMOUNT,0),
		0,
		0,
		0
	FROM (SELECT T.TRANSACTION_ID,
				T.TRANSACTION_NAME,
   				SDT.CUT_DATE_SCHEDULING "CUT_DATE",
				A.ASSIGNMENT_ID
			FROM SYSTEM_DATE_TIME SDT,
				IT_ASSIGNMENT A,
				INTERCHANGE_TRANSACTION T,
				RTO_WORK W
			WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
				AND SDT.DATA_INTERVAL_TYPE = 2
				AND SDT.DAY_TYPE = '1'
				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
				AND W.WORK_ID = p_WORK_ID
				AND T.TRANSACTION_ID = W.WORK_XID
				AND NVL(T.IS_DISPATCHABLE,0) <> 1
				AND A.TO_TRANSACTION_ID(+) = p_TO_TRANSACTION_ID
				AND A.FROM_TRANSACTION_ID(+) = T.TRANSACTION_ID
				AND A.ASSIGNMENT_TYPE(+) = g_GAS_DELIVERY_ASSIGNMENT_TYPE) A,
		IT_SCHEDULE B,
		IT_ASSIGNMENT_SCHEDULE C
	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
		AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
		AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
		AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
		AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
		AND C.SCHEDULE_DATE(+) = A.CUT_DATE;

	UT.PURGE_RTO_WORK(p_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(p_WORK_ID);
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		ERRS.LOG_AND_RAISE();
END BUILD_WORK_ASSIGNMENTS_FROM;
---------------------------------------------------------------------------------------------------
PROCEDURE BUILD_WORK_ASSIGNMENTS_TO
	(
	p_FROM_TRANSACTION_ID IN NUMBER,
	p_TO_TRANSACTION_IDs IN ID_TABLE,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_WORK_ID OUT NUMBER
	) AS
v_INTERVAL_NUMBER NUMBER;
BEGIN
	SELECT GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL)
	INTO v_INTERVAL_NUMBER
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_FROM_TRANSACTION_ID;

	UT.GET_RTO_WORK_ID(p_WORK_ID);

	INSERT INTO RTO_WORK (WORK_ID, WORK_XID)
	SELECT p_WORK_ID, X.ID
	FROM TABLE(CAST(p_TO_TRANSACTION_IDs AS ID_TABLE)) X;

    INSERT INTO IT_ASSIGNMENT_WORK
        (WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
        ASSIGNED, AMOUNT, PRICE, TOTAL_ASSIGNED)
    SELECT p_WORK_ID,
        A.TRANSACTION_ID,
        A.TRANSACTION_NAME,
        A.CUT_DATE,
        NVL(C.AMOUNT,0),
        NVL(B.AMOUNT,0),
        B.PRICE,
        (SELECT NVL(SUM(AMOUNT),0)
            FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
            WHERE IA.TO_TRANSACTION_ID = A.TRANSACTION_ID
            AND IA.ASSIGNMENT_TYPE = g_GAS_DELIVERY_ASSIGNMENT_TYPE
            AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
            AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
            AND IAS.SCHEDULE_DATE = A.CUT_DATE
            AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
            AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE)
    FROM (SELECT T.TRANSACTION_ID,
                T.TRANSACTION_NAME,
                SDT.CUT_DATE_SCHEDULING "CUT_DATE",
                A.ASSIGNMENT_ID
		    FROM SYSTEM_DATE_TIME SDT,
                IT_ASSIGNMENT A,
                INTERCHANGE_TRANSACTION T,
                RTO_WORK W
		    WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
                AND SDT.DATA_INTERVAL_TYPE = 2
                AND SDT.DAY_TYPE = '1'
                AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
                AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
                AND W.WORK_ID = p_WORK_ID
                AND T.TRANSACTION_ID = W.WORK_XID
                AND A.FROM_TRANSACTION_ID(+) = p_FROM_TRANSACTION_ID
                AND A.TO_TRANSACTION_ID(+) = T.TRANSACTION_ID
                AND A.ASSIGNMENT_TYPE(+) = g_GAS_DELIVERY_ASSIGNMENT_TYPE) A,
	    IT_SCHEDULE B,
	    IT_ASSIGNMENT_SCHEDULE C
    WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
        AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
        AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        AND B.SCHEDULE_DATE(+) = A.CUT_DATE
        AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
        AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
        AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
        AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        AND C.SCHEDULE_DATE(+) = A.CUT_DATE;

	UT.PURGE_RTO_WORK(p_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(p_WORK_ID);
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		ERRS.LOG_AND_RAISE();
END BUILD_WORK_ASSIGNMENTS_TO;
---------------------------------------------------------------------------------------------------
PROCEDURE BUILD_WORK_DATA_FROM
	(
	p_FROM_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_WORK_ID OUT NUMBER
	) AS
v_INTERVAL_NUMBER NUMBER;
BEGIN
	SELECT GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL)
	INTO v_INTERVAL_NUMBER
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_FROM_TRANSACTION_ID;
	UT.GET_RTO_WORK_ID(p_WORK_ID);

	INSERT INTO IT_ASSIGNMENT_WORK
		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
		 PRICE, AMOUNT, IS_FIXED, TERM_MAX, TERM_MIN)
	SELECT p_WORK_ID,
		A.TRANSACTION_ID,
		A.TRANSACTION_NAME,
		A.CUT_DATE,
		B.PRICE,
		NVL(B.AMOUNT,0),
		0,
		0,
		0
	FROM (SELECT T.TRANSACTION_ID,
				T.TRANSACTION_NAME,
				SDT.CUT_DATE_SCHEDULING "CUT_DATE"
			FROM SYSTEM_DATE_TIME SDT,
				INTERCHANGE_TRANSACTION T
			WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
				AND SDT.DATA_INTERVAL_TYPE = 2
				AND SDT.DAY_TYPE = '1'
				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
				AND T.TRANSACTION_ID = p_FROM_TRANSACTION_ID) A,
		IT_SCHEDULE B
	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
		AND B.SCHEDULE_DATE(+) = A.CUT_DATE;

END BUILD_WORK_DATA_FROM;
---------------------------------------------------------------------------------------------------
-- End IT Assignment stuff
----------------------------------------------------------------------------------------------------
PROCEDURE NULL_CURSOR
    (
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

BEGIN

	OPEN p_CURSOR FOR
		SELECT NULL FROM DUAL;

END NULL_CURSOR;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_COUNTERPARTIES
	(
	p_SUPPLY_ONLY IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT '<ALL>' "PSE_NAME", -1 "PSE_ID"
        	FROM DUAL
        UNION ALL
		SELECT DISTINCT PSE_NAME, PSE_ID
		FROM (SELECT PSE_NAME, PSE.PSE_ID
            	FROM PURCHASING_SELLING_ENTITY PSE, INTERCHANGE_TRANSACTION IT, IT_COMMODITY ITC
            	WHERE IT.BEGIN_DATE <= p_END_DATE
            		AND IT.END_DATE >= p_BEGIN_DATE
            		AND ITC.COMMODITY_ID = IT.COMMODITY_ID
            		AND ITC.COMMODITY_TYPE = 'Gas'
            		AND IT.TRANSACTION_INTERVAL = 'Day'
            		AND IT.TRANSACTION_TYPE IN ('Purchase','Withdrawal','Exchange','Adjustment')
            		AND PSE.PSE_ID = IT.SELLER_ID
        		UNION
            	SELECT PSE_NAME, PSE.PSE_ID
            	FROM PURCHASING_SELLING_ENTITY PSE, INTERCHANGE_TRANSACTION IT, IT_COMMODITY ITC
            	WHERE p_SUPPLY_ONLY = 0
					AND IT.BEGIN_DATE <= p_END_DATE
            		AND IT.END_DATE >= p_BEGIN_DATE
            		AND ITC.COMMODITY_ID = IT.COMMODITY_ID
            		AND ITC.COMMODITY_TYPE = 'Gas'
            		AND IT.TRANSACTION_INTERVAL = 'Day'
            		AND IT.TRANSACTION_TYPE IN ('Load','Sale','Injection')
            		AND PSE.PSE_ID = IT.PURCHASER_ID
				ORDER BY 1
			);
END GET_COUNTERPARTIES;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_SUPPLY_POINTS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT '<ALL>' "SERVICE_POINT_NAME", -1 "SERVICE_POINT_ID"
		FROM DUAL
		UNION ALL
		SELECT SERVICE_POINT_NAME, SERVICE_POINT_ID
		FROM (SELECT DISTINCT SERVICE_POINT_NAME, SERVICE_POINT_ID
        	FROM SERVICE_POINT SP, INTERCHANGE_TRANSACTION IT, IT_COMMODITY ITC
        	WHERE IT.BEGIN_DATE <= p_END_DATE
        		AND IT.END_DATE >= p_BEGIN_DATE
        		AND ITC.COMMODITY_ID = IT.COMMODITY_ID
        		AND ITC.COMMODITY_TYPE = 'Gas'
        		AND IT.TRANSACTION_INTERVAL = 'Day'
        		AND IT.TRANSACTION_TYPE IN ('Purchase','Withdrawal','Exchange','Adjustment')
        		AND SP.SERVICE_POINT_ID = IT.POD_ID
        		AND SP.SERVICE_POINT_TYPE = 'Pipeline'
        	ORDER BY 1);
END GET_SUPPLY_POINTS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_DELIVERY_PIPELINES
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT '<ALL>' "PIPELINE_NAME", -1 "PIPELINE_ID"
		FROM DUAL
		UNION ALL
		SELECT PIPELINE_NAME, PIPELINE_ID
		FROM (SELECT DISTINCT PIPELINE_NAME, PL.PIPELINE_ID
            	FROM PIPELINE PL, SERVICE_POINT SP, INTERCHANGE_TRANSACTION IT, IT_COMMODITY ITC
            	WHERE IT.BEGIN_DATE <= p_END_DATE
            		AND IT.END_DATE >= p_BEGIN_DATE
            		AND ITC.COMMODITY_ID = IT.COMMODITY_ID
            		AND ITC.COMMODITY_TYPE = 'Gas'
            		AND IT.TRANSACTION_INTERVAL = 'Day'
            		AND IT.TRANSACTION_TYPE = 'Delivery'
            		AND SP.SERVICE_POINT_ID = IT.POD_ID
            		AND SP.SERVICE_POINT_TYPE = 'Pipeline'
            		AND PL.PIPELINE_ID = SP.PIPELINE_ID
            	ORDER BY 1);
END GET_DELIVERY_PIPELINES;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_DELIVERY_POINTS
	(
	p_PIPELINE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT '<ALL>' "SERVICE_POINT_NAME", -1 "SERVICE_POINT_ID"
		FROM DUAL
		UNION ALL
		SELECT SERVICE_POINT_NAME, SERVICE_POINT_ID
		FROM (SELECT DISTINCT SERVICE_POINT_NAME, SERVICE_POINT_ID
            	FROM SERVICE_POINT SP, INTERCHANGE_TRANSACTION IT, IT_COMMODITY ITC
            	WHERE IT.BEGIN_DATE <= p_END_DATE
            		AND IT.END_DATE >= p_BEGIN_DATE
            		AND ITC.COMMODITY_ID = IT.COMMODITY_ID
            		AND ITC.COMMODITY_TYPE = 'Gas'
            		AND IT.TRANSACTION_INTERVAL = 'Day'
            		AND IT.TRANSACTION_TYPE = 'Delivery'
            		AND SP.SERVICE_POINT_ID = IT.POD_ID
            		AND SP.SERVICE_POINT_TYPE = 'Pipeline'
            		AND p_PIPELINE_ID IN (CONSTANTS.ALL_ID, SP.PIPELINE_ID)
            	ORDER BY 1);
END GET_DELIVERY_POINTS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_DELIVERY_RECEIPT_POINTS
	(
	p_PIPELINE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT '<ALL>' "SERVICE_POINT_NAME", -1 "SERVICE_POINT_ID"
		FROM DUAL
		UNION ALL
		SELECT SERVICE_POINT_NAME, SERVICE_POINT_ID
		FROM (SELECT DISTINCT SERVICE_POINT_NAME, SERVICE_POINT_ID
            	FROM SERVICE_POINT SP, INTERCHANGE_TRANSACTION IT, IT_COMMODITY ITC
            	WHERE IT.BEGIN_DATE <= p_END_DATE
            		AND IT.END_DATE >= p_BEGIN_DATE
            		AND ITC.COMMODITY_ID = IT.COMMODITY_ID
            		AND ITC.COMMODITY_TYPE = 'Gas'
            		AND IT.TRANSACTION_INTERVAL = 'Day'
            		AND IT.TRANSACTION_TYPE = 'Delivery'
            		AND SP.SERVICE_POINT_ID = IT.POR_ID
            		AND SP.SERVICE_POINT_TYPE = 'Pipeline'
            		AND p_PIPELINE_ID IN (CONSTANTS.ALL_ID, SP.PIPELINE_ID)
            	ORDER BY 1);
END GET_DELIVERY_RECEIPT_POINTS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_DELIVERIES
	(
	p_PIPELINE_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
    	SELECT A.TRANSACTION_NAME, A.TRANSACTION_ID
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_COMMODITY C, SERVICE_POINT POR, SERVICE_POINT POD
		WHERE A.TRANSACTION_TYPE = 'Delivery'
			AND A.BEGIN_DATE <= p_END_DATE
			AND A.END_DATE >= p_BEGIN_DATE
			AND A.TRANSACTION_INTERVAL = 'Day'
			AND p_POR_ID IN (A.POR_ID, CONSTANTS.ALL_ID)
			AND p_POD_ID IN (A.POD_ID, CONSTANTS.ALL_ID)
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND B.TRANSACTION_IS_ACTIVE = 1
			AND C.COMMODITY_ID = A.COMMODITY_ID
			AND C.COMMODITY_TYPE = 'Gas'
			AND POR.SERVICE_POINT_ID = A.POR_ID
			AND POD.SERVICE_POINT_ID = A.POD_ID
			AND p_PIPELINE_ID IN (CONSTANTS.ALL_ID, POR.PIPELINE_ID, POD.PIPELINE_ID)
		ORDER BY 1;

END GET_DELIVERIES;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_STORAGE_CONTRACTS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT CONTRACT_NAME, CONTRACT_ID
		FROM INTERCHANGE_CONTRACT
		WHERE BEGIN_DATE <= p_END_DATE
			AND END_DATE >= p_BEGIN_DATE
			AND CONTRACT_TYPE = 'Storage'
		ORDER BY 1;
END GET_STORAGE_CONTRACTS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_PIPELINE_CONTRACTS
	(
	p_PIPELINE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT '<ALL>' "CONTRACT_NAME", -1 "CONTRACT_ID"
		FROM DUAL
		UNION ALL
		SELECT CONTRACT_NAME, CONTRACT_ID
		FROM (SELECT CONTRACT_NAME, CONTRACT_ID
        		FROM INTERCHANGE_CONTRACT
        		WHERE BEGIN_DATE <= p_END_DATE
        			AND END_DATE >= p_BEGIN_DATE
        			AND CONTRACT_TYPE = 'Pipeline'
        			AND p_PIPELINE_ID IN (PIPELINE_ID,CONSTANTS.ALL_ID)
        		ORDER BY 1);
END GET_PIPELINE_CONTRACTS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_POINTS_FOR_PIPELINE_ZONE
	(
	p_PIPELINE_ID IN NUMBER,
	p_ZONE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
		SELECT '<ALL>' "SERVICE_POINT_NAME", -1 "SERVICE_POINT_ID"
		FROM DUAL
		UNION ALL
		SELECT SERVICE_POINT_NAME, SERVICE_POINT_ID
		FROM (SELECT SERVICE_POINT_NAME, SERVICE_POINT_ID
        		FROM SERVICE_POINT
        		WHERE SERVICE_POINT_TYPE = 'Pipeline'
        			AND p_PIPELINE_ID IN (PIPELINE_ID,CONSTANTS.ALL_ID)
        			AND p_ZONE_ID IN (SERVICE_ZONE_ID,CONSTANTS.ALL_ID)
        		ORDER BY 1);
END GET_POINTS_FOR_PIPELINE_ZONE;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_PIPELINE_ZONES
	(
	p_PIPELINE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT '<ALL>' "SERVICE_ZONE_NAME", -1 "SERVICE_ZONE_ID"
		FROM DUAL
		UNION ALL
		SELECT SERVICE_ZONE_NAME, SERVICE_ZONE_ID
		FROM (SELECT DISTINCT Z.SERVICE_ZONE_NAME, Z.SERVICE_ZONE_ID
        		FROM SERVICE_ZONE Z, SERVICE_POINT P
        		WHERE P.SERVICE_POINT_TYPE = 'Pipeline'
        			AND p_PIPELINE_ID IN (P.PIPELINE_ID,CONSTANTS.ALL_ID)
        			AND Z.SERVICE_ZONE_ID = P.SERVICE_ZONE_ID
        		ORDER BY 1);
END GET_PIPELINE_ZONES;
----------------------------------------------------------------------------------------------------
PROCEDURE GAS_DEL_BY_SUPPLY_SUMMARY
	(
	p_SELLER_ID IN NUMBER,
	p_SUPPLY_POD_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
BEGIN
	p_STATUS := GA.SUCCESS;

	v_BEGIN_DATE := TRUNC(p_BEGIN_DATE)+1/86400;
	v_END_DATE := TRUNC(p_END_DATE)+1/86400;

	OPEN p_CURSOR FOR
		SELECT A.TRANSACTION_NAME "SUPPLY_TRANSACTION_NAME", A.TRANSACTION_ID "SUPPLY_TRANSACTION_ID",
			(SELECT NVL(SUM(G.AMOUNT),0)
				FROM IT_SCHEDULE G
				WHERE G.TRANSACTION_ID = A.TRANSACTION_ID
					AND G.SCHEDULE_TYPE = p_SCHEDULE_TYPE
					AND G.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND G.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE) "VOLUME",
			(SELECT NVL(SUM(I.AMOUNT),0)
				FROM IT_ASSIGNMENT H, IT_ASSIGNMENT_SCHEDULE I
				WHERE H.TO_TRANSACTION_ID = A.TRANSACTION_ID
					AND H.ASSIGNMENT_TYPE = g_GAS_DELIVERY_ASSIGNMENT_TYPE
					AND I.ASSIGNMENT_ID = H.ASSIGNMENT_ID
					AND I.OPTION_ID = 0
					AND I.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
					AND I.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND I.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE) "ALLOC",
			(SELECT COUNT(DISTINCT IA.FROM_TRANSACTION_ID)
				FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
				WHERE IA.TO_TRANSACTION_ID = A.TRANSACTION_ID
					AND IA.ASSIGNMENT_TYPE = g_GAS_DELIVERY_ASSIGNMENT_TYPE
					AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
					AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
					AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND IAS.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
					AND NVL(IAS.AMOUNT,0) <> 0) "DELIVERY_COUNT"
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_COMMODITY C
		WHERE A.TRANSACTION_TYPE IN ('Purchase','Withdrawal','Adjustment','Exchange')
			AND A.BEGIN_DATE <= p_END_DATE
			AND A.END_DATE >= p_BEGIN_DATE
			AND A.TRANSACTION_INTERVAL = 'Day'
			AND p_SELLER_ID IN (A.SELLER_ID, CONSTANTS.ALL_ID)
			AND p_SUPPLY_POD_ID IN (A.POD_ID, CONSTANTS.ALL_ID)
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND B.TRANSACTION_IS_ACTIVE = 1
			AND C.COMMODITY_ID = A.COMMODITY_ID
			AND C.COMMODITY_TYPE = 'Gas'
		ORDER BY 1;

END GAS_DEL_BY_SUPPLY_SUMMARY;
----------------------------------------------------------------------------------------------------
PROCEDURE GAS_DEL_BY_SUPPLY_DETAILS
	(
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_PIPELINE_ID IN NUMBER,
	p_DELIVERY_POD_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_SUPPLY_WORK_ID NUMBER;
v_DELIVERY_WORK_ID NUMBER;
v_TRANSACTION_NAME INTERCHANGE_TRANSACTION.TRANSACTION_NAME%TYPE;
v_DELIVERY_IDs ID_TABLE;
v_INTERVAL_NUMBER NUMBER;
v_POR_ID NUMBER;
BEGIN
--------------------
-- DELIVERY == FROM
-- SUPPLY == TO
--------------------
	SP.CHECK_SYSTEM_DATE_TIME(LOCAL_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);

	p_STATUS := GA.SUCCESS;

	v_BEGIN_DATE := TRUNC(p_BEGIN_DATE);
	v_END_DATE := TRUNC(p_END_DATE);

	SELECT TRANSACTION_NAME, GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL), POD_ID
	INTO v_TRANSACTION_NAME, v_INTERVAL_NUMBER, v_POR_ID
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_SUPPLY_TRANSACTION_ID;

	--get deliveries based on POR = supply's POD and POD = specified delivery point
	SELECT ID_TYPE(DEL.TRANSACTION_ID)
	BULK COLLECT INTO v_DELIVERY_IDs
	FROM INTERCHANGE_TRANSACTION DEL, IT_STATUS STAT, IT_COMMODITY ITC, SERVICE_POINT SP
	WHERE DEL.BEGIN_DATE <= p_END_DATE
		AND DEL.END_DATE >= p_BEGIN_DATE
		AND DEL.POR_ID = v_POR_ID
		AND DEL.TRANSACTION_TYPE = 'Delivery'
		AND DEL.TRANSACTION_INTERVAL = 'Day'
		AND ITC.COMMODITY_ID = DEL.COMMODITY_ID
		AND ITC.COMMODITY_TYPE = 'Gas'
		AND p_DELIVERY_POD_ID IN (DEL.POD_ID, CONSTANTS.ALL_ID)
		AND SP.SERVICE_POINT_ID = DEL.POD_ID
		AND p_PIPELINE_ID IN (SP.PIPELINE_ID, CONSTANTS.ALL_ID)
		AND STAT.TRANSACTION_ID = DEL.TRANSACTION_ID
		AND STAT.TRANSACTION_IS_ACTIVE = 1;

	-- Populate IT_ASSIGNMENT_WORK
	BUILD_WORK_DATA_TO(p_SUPPLY_TRANSACTION_ID, v_BEGIN_DATE, v_END_DATE, p_SCHEDULE_TYPE, v_SUPPLY_WORK_ID);

	-- Populate IT_ASSIGNMENT_WORK
	BUILD_WORK_ASSIGNMENTS_FROM(p_SUPPLY_TRANSACTION_ID, v_DELIVERY_IDs, v_BEGIN_DATE, v_END_DATE, p_SCHEDULE_TYPE, v_DELIVERY_WORK_ID);

	-- Query
	OPEN p_CURSOR FOR
		-- use HTML to format delivery names to which this supply has already been allocated
		SELECT SCHEDULE_DATE, SUPPLY_TRANSACTION_ID, SUPPLY_TRANSACTION_NAME, SUPPLY_VOLUME, ALLOCATED_VOLUME_OLD,
			DELIVERY_TRANSACTION_ID,
			CASE WHEN HAS_ASSIGNMENTS > 0 THEN '<html><b>'||DELIVERY_TRANSACTION_NAME||'</b></html>' ELSE DELIVERY_TRANSACTION_NAME END "DELIVERY_TRANSACTION_NAME",
			(1-HAS_ASSIGNMENTS) "HAS_NO_ASSIGNMENTS", SCHEDULED_OLD, SUPPLY_PRICE, ASSIGNED_AMOUNT, ASSIGNED_AMOUNT_OLD
		FROM (SELECT SUBSTR(SDT.NO_ROLLUP_YYYY_MM_DD, 1, 10) "SCHEDULE_DATE",
    				p_SUPPLY_TRANSACTION_ID "SUPPLY_TRANSACTION_ID",
    				v_TRANSACTION_NAME "SUPPLY_TRANSACTION_NAME",
    				NVL(S.AMOUNT,0) "SUPPLY_VOLUME",
    				(SELECT NVL(SUM(IAS.AMOUNT),0)
    					FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
    					WHERE IA.TO_TRANSACTION_ID = p_SUPPLY_TRANSACTION_ID
    						AND IA.ASSIGNMENT_TYPE = g_GAS_DELIVERY_ASSIGNMENT_TYPE
    						AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
    						AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
    						AND IAS.SCHEDULE_DATE = SDT.CUT_DATE_SCHEDULING
    						AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
    						AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE
    					) "ALLOCATED_VOLUME_OLD",
    				D.TRANSACTION_ID "DELIVERY_TRANSACTION_ID",
    				D.TRANSACTION_NAME "DELIVERY_TRANSACTION_NAME",
    				(SELECT LEAST(COUNT(IA.FROM_TRANSACTION_ID),1)
    					FROM IT_ASSIGNMENT IA
    					WHERE IA.TO_TRANSACTION_ID = p_SUPPLY_TRANSACTION_ID
    						AND IA.FROM_TRANSACTION_ID = D.TRANSACTION_ID
    						AND IA.ASSIGNMENT_TYPE = g_GAS_DELIVERY_ASSIGNMENT_TYPE
    					) "HAS_ASSIGNMENTS",
    				D.AMOUNT "SCHEDULED_OLD",
    				D.PRICE "SUPPLY_PRICE",
    				D.ASSIGNED "ASSIGNED_AMOUNT",
    				D.ASSIGNED "ASSIGNED_AMOUNT_OLD"
    		FROM SYSTEM_DATE_TIME SDT,
    			IT_ASSIGNMENT_WORK S,
    			IT_ASSIGNMENT_WORK D
    		WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
    			AND SDT.DATA_INTERVAL_TYPE = 2
    			AND SDT.DAY_TYPE = '1'
    			AND SDT.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
    			AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
    			AND S.WORK_ID(+) = v_SUPPLY_WORK_ID
    			AND S.SCHEDULE_DATE(+) = SDT.CUT_DATE_SCHEDULING
    			AND D.WORK_ID(+) = v_DELIVERY_WORK_ID
    			AND D.SCHEDULE_DATE(+) = SDT.CUT_DATE_SCHEDULING
			);

	IA.PURGE_WORK(v_SUPPLY_WORK_ID, v_DELIVERY_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			IA.PURGE_WORK(v_SUPPLY_WORK_ID, v_DELIVERY_WORK_ID);
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		ERRS.LOG_AND_RAISE();

END GAS_DEL_BY_SUPPLY_DETAILS;
----------------------------------------------------------------------------------------------------
PROCEDURE GAS_DEL_BY_DELIVERY_SUMMARY
	(
	p_PIPELINE_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
BEGIN
	p_STATUS := GA.SUCCESS;

	v_BEGIN_DATE := TRUNC(p_BEGIN_DATE)+1/86400;
	v_END_DATE := TRUNC(p_END_DATE)+1/86400;

	OPEN p_CURSOR FOR
		SELECT A.TRANSACTION_NAME "DELIVERY_TRANSACTION_NAME", A.TRANSACTION_ID "DELIVERY_TRANSACTION_ID",
			(SELECT NVL(SUM(G.AMOUNT),0)
				FROM IT_SCHEDULE G
				WHERE G.TRANSACTION_ID = A.TRANSACTION_ID
					AND G.SCHEDULE_TYPE = p_SCHEDULE_TYPE
					AND G.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND G.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE) "VOLUME",
			(SELECT COUNT(DISTINCT IA.TO_TRANSACTION_ID)
				FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
				WHERE IA.FROM_TRANSACTION_ID = A.TRANSACTION_ID
					AND IA.ASSIGNMENT_TYPE = g_GAS_DELIVERY_ASSIGNMENT_TYPE
					AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
					AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
					AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND IAS.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
					AND NVL(IAS.AMOUNT,0) <> 0) "SUPPLY_COUNT"
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_COMMODITY C, SERVICE_POINT POR, SERVICE_POINT POD
		WHERE A.TRANSACTION_TYPE = 'Delivery'
			AND A.BEGIN_DATE <= p_END_DATE
			AND A.END_DATE >= p_BEGIN_DATE
			AND A.TRANSACTION_INTERVAL = 'Day'
			AND p_POR_ID IN (A.POR_ID, CONSTANTS.ALL_ID)
			AND p_POD_ID IN (A.POD_ID, CONSTANTS.ALL_ID)
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND B.TRANSACTION_IS_ACTIVE = 1
			AND C.COMMODITY_ID = A.COMMODITY_ID
			AND C.COMMODITY_TYPE = 'Gas'
			AND POR.SERVICE_POINT_ID = A.POR_ID
			AND POD.SERVICE_POINT_ID = A.POD_ID
			AND p_PIPELINE_ID IN (CONSTANTS.ALL_ID, POR.PIPELINE_ID, POD.PIPELINE_ID)
		ORDER BY 1;

END GAS_DEL_BY_DELIVERY_SUMMARY;
----------------------------------------------------------------------------------------------------
PROCEDURE GAS_DEL_BY_DELIVERY_DETAILS
	(
	p_DELIVERY_TRANSACTION_ID IN NUMBER,
	p_SELLER_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_SUPPLY_WORK_ID NUMBER;
v_DELIVERY_WORK_ID NUMBER;
v_TRANSACTION_NAME INTERCHANGE_TRANSACTION.TRANSACTION_NAME%TYPE;
v_SUPPLY_IDs ID_TABLE;
v_INTERVAL_NUMBER NUMBER;
v_POR_ID NUMBER;
BEGIN
--------------------
-- DELIVERY == FROM
-- SUPPLY == TO
--------------------
	SP.CHECK_SYSTEM_DATE_TIME(LOCAL_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);

	p_STATUS := GA.SUCCESS;

	v_BEGIN_DATE := TRUNC(p_BEGIN_DATE);
	v_END_DATE := TRUNC(p_END_DATE);

	SELECT TRANSACTION_NAME, GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL), POR_ID
	INTO v_TRANSACTION_NAME, v_INTERVAL_NUMBER, v_POR_ID
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_DELIVERY_TRANSACTION_ID;

	--get supply based on POD = delivery's POR
	SELECT ID_TYPE(TX.TRANSACTION_ID)
	BULK COLLECT INTO v_SUPPLY_IDs
	FROM INTERCHANGE_TRANSACTION TX, IT_STATUS STAT, IT_COMMODITY ITC
	WHERE TX.BEGIN_DATE <= p_END_DATE
		AND TX.END_DATE >= p_BEGIN_DATE
		AND TX.POD_ID = v_POR_ID
		AND TX.TRANSACTION_TYPE IN ('Purchase','Withdrawal','Adjustment','Exchange')
		AND TX.TRANSACTION_INTERVAL = 'Day'
		AND p_SELLER_ID IN (TX.SELLER_ID, CONSTANTS.ALL_ID)
		AND ITC.COMMODITY_ID = TX.COMMODITY_ID
		AND ITC.COMMODITY_TYPE = 'Gas'
		AND STAT.TRANSACTION_ID = TX.TRANSACTION_ID
		AND STAT.TRANSACTION_IS_ACTIVE = 1;

	-- Populate IT_ASSIGNMENT_WORK
	BUILD_WORK_DATA_FROM(p_DELIVERY_TRANSACTION_ID, v_BEGIN_DATE, v_END_DATE, p_SCHEDULE_TYPE, v_DELIVERY_WORK_ID);

	-- Populate IT_ASSIGNMENT_WORK
	BUILD_WORK_ASSIGNMENTS_TO(p_DELIVERY_TRANSACTION_ID, v_SUPPLY_IDs, v_BEGIN_DATE, v_END_DATE, p_SCHEDULE_TYPE, v_SUPPLY_WORK_ID);

	-- Query
	OPEN p_CURSOR FOR
		SELECT SUBSTR(SDT.NO_ROLLUP_YYYY_MM_DD, 1, 10) "SCHEDULE_DATE",
				p_DELIVERY_TRANSACTION_ID "DELIVERY_TRANSACTION_ID",
				v_TRANSACTION_NAME "DELIVERY_TRANSACTION_NAME",
				NVL(D.AMOUNT,0) "SCHEDULED_OLD",
				S.TRANSACTION_ID "SUPPLY_TRANSACTION_ID",
				S.TRANSACTION_NAME "SUPPLY_TRANSACTION_NAME",
				S.AMOUNT "SUPPLY_VOLUME",
				S.ASSIGNED "ASSIGNED_AMOUNT",
				S.ASSIGNED "ASSIGNED_AMOUNT_OLD",
				S.TOTAL_ASSIGNED
		FROM SYSTEM_DATE_TIME SDT,
			IT_ASSIGNMENT_WORK S,
			IT_ASSIGNMENT_WORK D
		WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
			AND SDT.DATA_INTERVAL_TYPE = 2
			AND SDT.DAY_TYPE = '1'
			AND SDT.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
			AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
			AND S.WORK_ID(+) = v_SUPPLY_WORK_ID
			AND S.SCHEDULE_DATE(+) = SDT.CUT_DATE_SCHEDULING
			AND D.WORK_ID(+) = v_DELIVERY_WORK_ID
			AND D.SCHEDULE_DATE(+) = SDT.CUT_DATE_SCHEDULING;

	IA.PURGE_WORK(v_SUPPLY_WORK_ID, v_DELIVERY_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			IA.PURGE_WORK(v_SUPPLY_WORK_ID, v_DELIVERY_WORK_ID);
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		ERRS.LOG_AND_RAISE();

END GAS_DEL_BY_DELIVERY_DETAILS;
----------------------------------------------------------------------------------------------------
PROCEDURE CALC_DELIVERY_DETAILS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_AMOUNT IN NUMBER
	) AS
v_AS_OF_DATE DATE := CORRECTED_AS_OF_DATE(p_AS_OF_DATE,'Scheduling');
v_RECV_AMOUNT NUMBER := p_AMOUNT;
v_FUEL_AMOUNT NUMBER;
v_DELIV_AMOUNT NUMBER;
CURSOR c_SEGMENTS IS
	SELECT IT_SEGMENT_ID,
			LOOKUP_PIPELINE_FUEL_PCT(CONTRACT_ID, POR_ID, POD_ID, p_SCHEDULE_DATE) "FUEL_PCT"
	FROM IT_SEGMENT IT
	WHERE TRANSACTION_ID = p_TRANSACTION_ID
		AND TRUNC(p_SCHEDULE_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
	ORDER BY SEGMENT_ORDER;
BEGIN
	FOR v_SEGMENT IN c_SEGMENTS LOOP
		v_FUEL_AMOUNT := v_RECV_AMOUNT * v_SEGMENT.FUEL_PCT/100.0;
		v_DELIV_AMOUNT := v_RECV_AMOUNT - v_FUEL_AMOUNT;
		UPDATE IT_SEGMENT_SCHEDULE
			SET RECEIVED_AMOUNT = v_RECV_AMOUNT,
				FUEL_AMOUNT = v_FUEL_AMOUNT,
				DELIVERED_AMOUNT = v_DELIV_AMOUNT
		WHERE IT_SEGMENT_ID = v_SEGMENT.IT_SEGMENT_ID
			AND STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
			AND SCHEDULE_STATE = p_SCHEDULE_STATE
			AND SCHEDULE_DATE = p_SCHEDULE_DATE
			AND AS_OF_DATE = v_AS_OF_DATE;

		IF SQL%NOTFOUND THEN
			INSERT INTO IT_SEGMENT_SCHEDULE
				(IT_SEGMENT_ID, STATEMENT_TYPE_ID, SCHEDULE_STATE, SCHEDULE_DATE, AS_OF_DATE,
				 RECEIVED_AMOUNT, FUEL_AMOUNT, DELIVERED_AMOUNT)
			VALUES
				(v_SEGMENT.IT_SEGMENT_ID, p_SCHEDULE_TYPE, p_SCHEDULE_STATE, p_SCHEDULE_DATE, v_AS_OF_DATE,
				 v_RECV_AMOUNT, v_FUEL_AMOUNT, v_DELIV_AMOUNT);
		END IF;

		v_RECV_AMOUNT := v_DELIV_AMOUNT;
	END LOOP;
END CALC_DELIVERY_DETAILS;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_GAS_DEL_REPORT
	(
	p_DELIVERY_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_AS_OF_DATE IN DATE,
    p_SCHEDULE_DATE IN VARCHAR,
    p_SCHEDULED IN NUMBER,
    p_SUPPLY_PRICE IN NUMBER,
    p_ASSIGNED_AMOUNT IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
v_AMOUNT NUMBER;
v_DATE DATE;
BEGIN

	IF NOT CAN_WRITE(ITJ.g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(ITJ.g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	v_DATE := TO_DATE(p_SCHEDULE_DATE, 'yyyy-mm-dd')+1/86400;

	SELECT NVL(SUM(AMOUNT),0)
	INTO v_AMOUNT
	FROM IT_SCHEDULE A
	WHERE TRANSACTION_ID = p_DELIVERY_TRANSACTION_ID
		AND SCHEDULE_TYPE = p_SCHEDULE_TYPE
		AND SCHEDULE_STATE = GA.INTERNAL_STATE
		AND SCHEDULE_DATE = v_DATE
		AND AS_OF_DATE = (SELECT MAX(AS_OF_DATE)
							FROM IT_SCHEDULE
							WHERE TRANSACTION_ID = A.TRANSACTION_ID
								AND SCHEDULE_TYPE = A.SCHEDULE_TYPE
								AND SCHEDULE_STATE = A.SCHEDULE_STATE
								AND SCHEDULE_DATE = A.SCHEDULE_DATE
								AND AS_OF_DATE <= p_AS_OF_DATE);

    ITJ.SCHEDULE_UPDATE(p_DELIVERY_TRANSACTION_ID, p_SCHEDULE_TYPE, GA.INTERNAL_STATE, p_SCHEDULE_DATE, NULL,
				    p_AS_OF_DATE, CUT_TIME_ZONE, p_SCHEDULED, p_SUPPLY_PRICE, p_STATUS, TRUE, p_ASSIGNED_AMOUNT, p_SUPPLY_TRANSACTION_ID,
					g_GAS_DELIVERY_ASSIGNMENT_TYPE);

	IF p_SCHEDULED <> v_AMOUNT THEN
		-- recalculate segment details for this transaction if its total schedule changed
		CALC_DELIVERY_DETAILS(p_DELIVERY_TRANSACTION_ID, p_SCHEDULE_TYPE, GA.INTERNAL_STATE, v_DATE, p_AS_OF_DATE, p_SCHEDULED);
	END IF;


END PUT_GAS_DEL_REPORT;
----------------------------------------------------------------------------------------------------
PROCEDURE PURGE_LIMITS_VALIDATION
	(
	p_WORK_ID IN NUMBER
	) AS
BEGIN
	DELETE PIPELINE_LIMIT_VALIDATION_WORK
	WHERE WORK_ID = p_WORK_ID;
END PURGE_LIMITS_VALIDATION;
----------------------------------------------------------------------------------------------------
FUNCTION GET_CONSTRAINT_POINT
	(
	p_SERVICE_POINT_ID IN NUMBER
	) RETURN NUMBER IS
v_CONSTRAINT_NAME VARCHAR2(64);
v_RET NUMBER;
BEGIN
	SELECT NVL(MAX(TEA.ATTRIBUTE_VAL),'?')
	INTO v_CONSTRAINT_NAME
    FROM ENTITY_ATTRIBUTE EA, TEMPORAL_ENTITY_ATTRIBUTE TEA
    WHERE EA.ENTITY_DOMAIN_ID = EC.ED_SERVICE_POINT
        AND EA.ATTRIBUTE_NAME = 'Constraint Point'
        AND TEA.OWNER_ENTITY_ID = p_SERVICE_POINT_ID
        AND TEA.ATTRIBUTE_ID = EA.ATTRIBUTE_ID
        AND TRUNC(SYSDATE) BETWEEN TEA.BEGIN_DATE AND NVL(TEA.END_DATE,HIGH_DATE);

	IF v_CONSTRAINT_NAME = '?' THEN
		RETURN p_SERVICE_POINT_ID;
	END IF;

	SELECT SERVICE_POINT_ID
	INTO v_RET
	FROM SERVICE_POINT
	WHERE SERVICE_POINT_NAME = v_CONSTRAINT_NAME;

	RETURN v_RET;

EXCEPTION
	WHEN OTHERS THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		RETURN 0;

END GET_CONSTRAINT_POINT;
----------------------------------------------------------------------------------------------------
PROCEDURE BUILD_LIMITS_VALIDATION
	(
	p_WORK_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_FOR_SEGMENTS IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SHOW_TRANSACTION_DETAILS IN NUMBER
	) AS
v_BEGIN_DATE DATE := TRUNC(p_BEGIN_DATE);
v_END_DATE DATE := TRUNC(p_END_DATE);
CURSOR c_POINT_LIMITS IS
	SELECT SDT.CUT_DATE_SCHEDULING "SCHEDULE_DATE",
		TO_NUMBER(W.WORK_DATA) "CONTRACT_ID",
		SP.SERVICE_POINT_ID "POR_ID",
		0 "POD_ID",
		PL.PIPELINE_ID,
		(SELECT MAX(MAX_DAILY_QUANTITY)
		 FROM PIPELINE_POINT_LIMIT PPL
		 WHERE PPL.CONTRACT_ID = TO_NUMBER(W.WORK_DATA)
			AND PPL.SERVICE_POINT_ID = SP.SERVICE_POINT_ID
			AND SDT.CUT_DATE BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
            AND GET_PERIOD_DATE(SDT.CUT_DATE) BETWEEN PERIOD_BEGIN AND PERIOD_END
		) "MAX_DAILY_QUANTITY"
	 FROM RTO_WORK W,
		SYSTEM_DATE_TIME SDT,
		SERVICE_POINT SP,
		PIPELINE PL
	WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
		AND SDT.DATA_INTERVAL_TYPE = 2
		AND SDT.DAY_TYPE = '1'
		AND SDT.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		AND W.WORK_ID = p_WORK_ID
		AND SP.SERVICE_POINT_ID = W.WORK_XID
		AND PL.PIPELINE_ID(+) = SP.PIPELINE_ID;
CURSOR c_SEGMENT_LIMITS RETURN c_POINT_LIMITS%ROWTYPE IS
	SELECT SDT.CUT_DATE_SCHEDULING "SCHEDULE_DATE",
		TO_NUMBER(W.WORK_DATA) "CONTRACT_ID",
		SP.SERVICE_POINT_ID "POR_ID",
		W.WORK_SEQ "POD_ID",
		PL.PIPELINE_ID,
		(SELECT MAX(MAX_DAILY_QUANTITY)
		 FROM PIPELINE_SEGMENT_LIMIT PSL
		 WHERE PSL.CONTRACT_ID = TO_NUMBER(W.WORK_DATA)
			AND PSL.POR_ID = W.WORK_XID
			AND PSL.POD_ID = W.WORK_SEQ
			AND SDT.CUT_DATE BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
            AND GET_PERIOD_DATE(SDT.CUT_DATE) BETWEEN PERIOD_BEGIN AND PERIOD_END
		) "MAX_DAILY_QUANTITY"
	 FROM RTO_WORK W,
		SYSTEM_DATE_TIME SDT,
		SERVICE_POINT SP,
		PIPELINE PL
	WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
		AND SDT.DATA_INTERVAL_TYPE = 2
		AND SDT.DAY_TYPE = '1'
		AND SDT.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		AND W.WORK_ID = p_WORK_ID
		AND SP.SERVICE_POINT_ID = W.WORK_XID
		AND PL.PIPELINE_ID(+) = SP.PIPELINE_ID;
v_LIMIT c_POINT_LIMITS%ROWTYPE;
BEGIN
	-- open the cursor
	IF p_FOR_SEGMENTS = 0 THEN
		OPEN c_POINT_LIMITS;
	ELSE
		OPEN c_SEGMENT_LIMITS;
	END IF;

	-- loop through contents of cursor
	LOOP
    	IF p_FOR_SEGMENTS = 0 THEN
			FETCH c_POINT_LIMITS INTO v_LIMIT;
			EXIT WHEN c_POINT_LIMITS%NOTFOUND;
    	ELSE
			FETCH c_SEGMENT_LIMITS INTO v_LIMIT;
			EXIT WHEN c_SEGMENT_LIMITS%NOTFOUND;
    	END IF;

		INSERT INTO PIPELINE_LIMIT_VALIDATION_WORK
			(WORK_ID, PIPELINE_ID, POR_ID, POD_ID, CONTRACT_ID, SCHEDULE_DATE, TRANSACTION_ID,
			 CAPACITY_PURCHASED, CAPACITY_SOLD, TOTAL_RECEIVED, TOTAL_DELIVERED, MAX_DAILY_QUANTITY,
			 MISSING_LIMITS)
		SELECT p_WORK_ID, v_LIMIT.PIPELINE_ID, v_LIMIT.POR_ID, v_LIMIT.POD_ID, v_LIMIT.CONTRACT_ID, v_LIMIT.SCHEDULE_DATE,
			CASE WHEN p_SHOW_TRANSACTION_DETAILS=1 THEN A.TRANSACTION_ID ELSE 0 END,
			NVL(SUM(CAPACITY_PURCHASED),0), NVL(SUM(CAPACITY_SOLD),0), NVL(SUM(TOTAL_RECEIVED),0), NVL(SUM(TOTAL_DELIVERED),0),
			v_LIMIT.MAX_DAILY_QUANTITY,	CASE WHEN NVL(v_LIMIT.MAX_DAILY_QUANTITY,0) = 0 THEN 1 ELSE 0 END
		FROM (-- purchases and sales of capacity
			  SELECT IT.TRANSACTION_ID,
					CASE WHEN IT.TRANSACTION_TYPE = 'Purchase' THEN ITS.AMOUNT ELSE 0 END "CAPACITY_PURCHASED",
					CASE WHEN IT.TRANSACTION_TYPE = 'Sale' THEN ITS.AMOUNT ELSE 0 END "CAPACITY_SOLD",
					0 "TOTAL_RECEIVED",
					0 "TOTAL_DELIVERED"
			  FROM INTERCHANGE_TRANSACTION IT, IT_STATUS ITST, IT_COMMODITY ITC, IT_SCHEDULE ITS,
			  		CONSTRAINT_POINT_V CPOR, CONSTRAINT_POINT_V CPOD
			  WHERE IT.BEGIN_DATE <= p_END_DATE
				AND IT.END_DATE >= p_BEGIN_DATE
				AND IT.TRANSACTION_INTERVAL = 'Day'
				AND IT.TRANSACTION_TYPE IN ('Purchase','Sale')
				AND IT.CONTRACT_ID = v_LIMIT.CONTRACT_ID
				AND CPOR.SERVICE_POINT_ID(+) = IT.POR_ID
				AND CPOR.BEGIN_DATE(+) <= TRUNC(SYSDATE)
				AND NVL(CPOR.END_DATE(+),HIGH_DATE) >= TRUNC(SYSDATE)
				AND CPOD.SERVICE_POINT_ID(+) = IT.POD_ID
				AND CPOD.BEGIN_DATE(+) <= TRUNC(SYSDATE)
				AND NVL(CPOD.END_DATE(+),HIGH_DATE) >= TRUNC(SYSDATE)
				AND ((p_FOR_SEGMENTS = 0 AND v_LIMIT.POR_ID IN (NVL(CPOR.CONSTRAINT_POINT_ID,IT.POR_ID), NVL(CPOD.CONSTRAINT_POINT_ID,IT.POD_ID)))
						OR
					(p_FOR_SEGMENTS <> 0 AND IT.POR_ID = v_LIMIT.POR_ID AND IT.POD_ID = v_LIMIT.POD_ID))
				AND ITC.COMMODITY_ID = IT.COMMODITY_ID
				AND ITC.COMMODITY_TYPE = 'Capacity'
				AND ITST.TRANSACTION_ID = IT.TRANSACTION_ID
				AND ITST.TRANSACTION_IS_ACTIVE = 1
				AND ITS.TRANSACTION_ID = IT.TRANSACTION_ID
				AND ITS.SCHEDULE_TYPE = p_SCHEDULE_TYPE
				AND ITS.SCHEDULE_STATE = GA.INTERNAL_STATE
				AND ITS.SCHEDULE_DATE = v_LIMIT.SCHEDULE_DATE
			  UNION ALL
			  -- deliveries
			  SELECT IT.TRANSACTION_ID,
					0 "CAPACITY_PURCHASED",
					0 "CAPACITY_SOLD",
					CASE WHEN p_FOR_SEGMENTS = 0 THEN
							CASE WHEN NVL(CPOR.CONSTRAINT_POINT_ID,ITS.POR_ID) = v_LIMIT.POR_ID THEN ITSS.RECEIVED_AMOUNT ELSE 0 END
						ELSE
							ITSS.RECEIVED_AMOUNT
						END "TOTAL_RECEIVED",
					CASE WHEN p_FOR_SEGMENTS = 0 THEN
							CASE WHEN NVL(CPOD.CONSTRAINT_POINT_ID,ITS.POD_ID) = v_LIMIT.POR_ID THEN ITSS.DELIVERED_AMOUNT ELSE 0 END
						ELSE
							ITSS.DELIVERED_AMOUNT
						END "TOTAL_DELIVERED"
			  FROM INTERCHANGE_TRANSACTION IT, IT_STATUS ITST, IT_COMMODITY ITC, IT_SEGMENT ITS, IT_SEGMENT_SCHEDULE ITSS,
			  		CONSTRAINT_POINT_V CPOR, CONSTRAINT_POINT_V CPOD
			  WHERE IT.BEGIN_DATE <= p_END_DATE
				AND IT.END_DATE >= p_BEGIN_DATE
				AND IT.TRANSACTION_INTERVAL = 'Day'
				AND IT.TRANSACTION_TYPE = 'Delivery'
				AND ITC.COMMODITY_ID = IT.COMMODITY_ID
				AND ITC.COMMODITY_TYPE = 'Gas'
				AND ITST.TRANSACTION_ID = IT.TRANSACTION_ID
				AND ITST.TRANSACTION_IS_ACTIVE = 1
				AND ITS.TRANSACTION_ID = IT.TRANSACTION_ID
				AND ITS.CONTRACT_ID = v_LIMIT.CONTRACT_ID
				AND CPOR.SERVICE_POINT_ID(+) = ITS.POR_ID
				AND CPOR.BEGIN_DATE(+) <= TRUNC(SYSDATE)
				AND NVL(CPOR.END_DATE(+),HIGH_DATE) >= TRUNC(SYSDATE)
				AND CPOD.SERVICE_POINT_ID(+) = ITS.POD_ID
				AND CPOD.BEGIN_DATE(+) <= TRUNC(SYSDATE)
				AND NVL(CPOD.END_DATE(+),HIGH_DATE) >= TRUNC(SYSDATE)
				AND ((p_FOR_SEGMENTS = 0 AND v_LIMIT.POR_ID IN (NVL(CPOR.CONSTRAINT_POINT_ID,ITS.POR_ID), NVL(CPOD.CONSTRAINT_POINT_ID,ITS.POD_ID)))
						OR
					(p_FOR_SEGMENTS <> 0 AND ITS.POR_ID = v_LIMIT.POR_ID AND ITS.POD_ID = v_LIMIT.POD_ID))
				AND TRUNC(v_LIMIT.SCHEDULE_DATE) BETWEEN ITS.BEGIN_DATE AND NVL(ITS.END_DATE,v_LIMIT.SCHEDULE_DATE)
				AND ITSS.IT_SEGMENT_ID = ITS.IT_SEGMENT_ID
				AND ITSS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
				AND ITSS.SCHEDULE_STATE = GA.INTERNAL_STATE
				AND ITSS.SCHEDULE_DATE = v_LIMIT.SCHEDULE_DATE
			) A
		GROUP BY CASE WHEN p_SHOW_TRANSACTION_DETAILS=1 THEN A.TRANSACTION_ID ELSE 0 END;

		IF p_SHOW_TRANSACTION_DETAILS=0 AND SQL%ROWCOUNT=0 THEN
			-- insert dummy record
			INSERT INTO PIPELINE_LIMIT_VALIDATION_WORK
				(WORK_ID, PIPELINE_ID, POR_ID, POD_ID, CONTRACT_ID, SCHEDULE_DATE, TRANSACTION_ID,
				 CAPACITY_PURCHASED, CAPACITY_SOLD, TOTAL_RECEIVED, TOTAL_DELIVERED, MAX_DAILY_QUANTITY,
				 MISSING_LIMITS)
			VALUES (p_WORK_ID, v_LIMIT.PIPELINE_ID, v_LIMIT.POR_ID, v_LIMIT.POD_ID, v_LIMIT.CONTRACT_ID, v_LIMIT.SCHEDULE_DATE,
				0, 0, 0, 0, 0, v_LIMIT.MAX_DAILY_QUANTITY, CASE WHEN NVL(v_LIMIT.MAX_DAILY_QUANTITY,0) = 0 THEN 1 ELSE 0 END);
		END IF;
	END LOOP;

	-- close the cursor
	IF p_FOR_SEGMENTS = 0 THEN
		CLOSE c_POINT_LIMITS;
	ELSE
		CLOSE c_SEGMENT_LIMITS;
	END IF;

	IF p_SHOW_TRANSACTION_DETAILS=0 THEN
		-- if we are summarizing all transactions, calculate excess and available for each row
		IF p_FOR_SEGMENTS = 0 THEN
    		UPDATE PIPELINE_LIMIT_VALIDATION_WORK
    			SET TOTAL_EXCESS = GREATEST(0,GREATEST(TOTAL_RECEIVED,TOTAL_DELIVERED)-(NVL(MAX_DAILY_QUANTITY,0)+CAPACITY_PURCHASED-CAPACITY_SOLD)),
    				TOTAL_AVAIL =-LEAST(0,GREATEST(TOTAL_RECEIVED,TOTAL_DELIVERED)-(NVL(MAX_DAILY_QUANTITY,0)+CAPACITY_PURCHASED-CAPACITY_SOLD))
    		WHERE WORK_ID = p_WORK_ID;
		ELSE
    		UPDATE PIPELINE_LIMIT_VALIDATION_WORK
    			SET TOTAL_EXCESS = GREATEST(0,TOTAL_DELIVERED-(NVL(MAX_DAILY_QUANTITY,0)+CAPACITY_PURCHASED-CAPACITY_SOLD)),
    				TOTAL_AVAIL =-LEAST(0,TOTAL_DELIVERED-(NVL(MAX_DAILY_QUANTITY,0)+CAPACITY_PURCHASED-CAPACITY_SOLD))
    		WHERE WORK_ID = p_WORK_ID;
		END IF;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			IF c_POINT_LIMITS%ISOPEN THEN
				CLOSE c_POINT_LIMITS;
			END IF;
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		BEGIN
			IF c_SEGMENT_LIMITS%ISOPEN THEN
				CLOSE c_SEGMENT_LIMITS;
			END IF;
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		ERRS.LOG_AND_RAISE();
		
END BUILD_LIMITS_VALIDATION;
----------------------------------------------------------------------------------------------------
PROCEDURE LIMITS_VALIDATION_SUMMARY
	(
	p_PIPELINE_ID IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_DELIVERY_ID IN VARCHAR2,
	p_INVALID_ONLY IN NUMBER,
	p_AVAILABLE_ONLY IN NUMBER,
	p_FOR_SEGMENTS IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_DELIVERY_NAME OUT VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_WORK_ID NUMBER(9);
BEGIN
	p_STATUS := GA.SUCCESS;
	UT.GET_RTO_WORK_ID(v_WORK_ID);
	IF p_FOR_SEGMENTS = 0 THEN
    	INSERT INTO RTO_WORK
    		(WORK_ID, WORK_XID, WORK_DATA)
    	SELECT DISTINCT v_WORK_ID, NVL(CP.SERVICE_POINT_ID,SP.SERVICE_POINT_ID), IC.CONTRACT_ID
        FROM SERVICE_POINT SP, PIPELINE PL, INTERCHANGE_CONTRACT IC,
			SERVICE_POINT CP, CONSTRAINT_POINT_V CPV
        WHERE PL.PIPELINE_ID > 0
            AND p_PIPELINE_ID IN (PL.PIPELINE_ID, CONSTANTS.ALL_ID)
            AND IC.CONTRACT_TYPE = 'Pipeline'
            AND IC.PIPELINE_ID = PL.PIPELINE_ID
            AND IC.BEGIN_DATE <= p_END_DATE
            AND IC.END_DATE >= p_BEGIN_DATE
            AND p_CONTRACT_ID IN (IC.CONTRACT_ID, CONSTANTS.ALL_ID)
            AND SP.SERVICE_POINT_TYPE = 'Pipeline'
			AND CPV.SERVICE_POINT_ID(+) = SP.SERVICE_POINT_ID
			AND CPV.BEGIN_DATE(+) <= TRUNC(SYSDATE)
			AND NVL(CPV.END_DATE(+),HIGH_DATE) >= TRUNC(SYSDATE)
			AND CP.SERVICE_POINT_ID(+) = CPV.CONSTRAINT_POINT_ID
            AND SP.PIPELINE_ID = PL.PIPELINE_ID
            AND (p_DELIVERY_ID = CONSTANTS.ALL_ID
                OR EXISTS (SELECT IT_SEGMENT_ID
                			FROM IT_SEGMENT A
                			WHERE A.TRANSACTION_ID = p_DELIVERY_ID
    							AND A.CONTRACT_ID = IC.CONTRACT_ID
                				AND SP.SERVICE_POINT_ID IN (A.POR_ID, A.POD_ID)));
	ELSE
    	INSERT INTO RTO_WORK
    		(WORK_ID, WORK_XID, WORK_SEQ, WORK_DATA)
		-- record a Union of all delivery segments and all segments w/ contractual limits
    	SELECT v_WORK_ID, SL.POR_ID, SL.POD_ID, SL.CONTRACT_ID
        FROM SERVICE_POINT SP, PIPELINE PL, INTERCHANGE_CONTRACT IC, PIPELINE_SEGMENT_LIMIT SL
        WHERE PL.PIPELINE_ID > 0
            AND p_PIPELINE_ID IN (PL.PIPELINE_ID, CONSTANTS.ALL_ID)
            AND IC.CONTRACT_TYPE = 'Pipeline'
            AND IC.PIPELINE_ID = PL.PIPELINE_ID
            AND IC.BEGIN_DATE <= p_END_DATE
            AND IC.END_DATE >= p_BEGIN_DATE
            AND p_CONTRACT_ID IN (IC.CONTRACT_ID, CONSTANTS.ALL_ID)
            AND SP.SERVICE_POINT_TYPE = 'Pipeline'
            AND SP.PIPELINE_ID = PL.PIPELINE_ID
            AND (p_DELIVERY_ID = CONSTANTS.ALL_ID
                OR EXISTS (SELECT IT_SEGMENT_ID
                			FROM IT_SEGMENT A
                			WHERE A.TRANSACTION_ID = p_DELIVERY_ID
    							AND A.CONTRACT_ID = IC.CONTRACT_ID
                				AND SP.SERVICE_POINT_ID IN (A.POR_ID, A.POD_ID)))
			AND SL.CONTRACT_ID = IC.CONTRACT_ID
			AND SP.SERVICE_POINT_ID IN (SL.POR_ID, SL.POD_ID)
		UNION -- *not* union all - that way query will only result in distinct combinations
    	SELECT v_WORK_ID, SEG.POR_ID, SEG.POD_ID, SEG.CONTRACT_ID
        FROM SERVICE_POINT SP, PIPELINE PL, INTERCHANGE_CONTRACT IC, IT_SEGMENT SEG
        WHERE PL.PIPELINE_ID > 0
            AND p_PIPELINE_ID IN (PL.PIPELINE_ID, CONSTANTS.ALL_ID)
            AND IC.CONTRACT_TYPE = 'Pipeline'
            AND IC.PIPELINE_ID = PL.PIPELINE_ID
            AND IC.BEGIN_DATE <= p_END_DATE
            AND IC.END_DATE >= p_BEGIN_DATE
            AND p_CONTRACT_ID IN (IC.CONTRACT_ID, CONSTANTS.ALL_ID)
            AND SP.SERVICE_POINT_TYPE = 'Pipeline'
            AND SP.PIPELINE_ID = PL.PIPELINE_ID
			AND p_DELIVERY_ID IN (SEG.TRANSACTION_ID, CONSTANTS.ALL_ID)
			AND SP.SERVICE_POINT_ID IN (SEG.POR_ID, SEG.POD_ID);
	END IF;

	BUILD_LIMITS_VALIDATION(v_WORK_ID, p_BEGIN_DATE, p_END_DATE, p_FOR_SEGMENTS, p_SCHEDULE_TYPE, 0);

	SELECT MAX(TRANSACTION_NAME)
	INTO p_DELIVERY_NAME
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_DELIVERY_ID;

	OPEN p_CURSOR FOR
		SELECT PL.PIPELINE_NAME,
			PL.PIPELINE_ID,
			SP1.SERVICE_POINT_NAME "POR_NAME",
			W.POR_ID,
			SP2.SERVICE_POINT_NAME "POD_NAME",
			W.POD_ID,
			IC.CONTRACT_NAME,
			IC.CONTRACT_ID,
			SUM(CAPACITY_PURCHASED) "CAPACITY_PURCHASED",
			SUM(CAPACITY_SOLD) "CAPACITY_SOLD",
			SUM(TOTAL_RECEIVED) "TOTAL_RECEIVED",
			SUM(TOTAL_DELIVERED) "TOTAL_DELIVERED",
			SUM(TOTAL_EXCESS) "TOTAL_EXCESS",
			SUM(TOTAL_AVAIL) "TOTAL_AVAIL",
			MAX(MISSING_LIMITS) "MISSING_LIMITS"
		FROM PIPELINE_LIMIT_VALIDATION_WORK W,
			SERVICE_POINT SP1,
			SERVICE_POINT SP2,
			PIPELINE PL,
			INTERCHANGE_CONTRACT IC
		WHERE W.WORK_ID = v_WORK_ID
			AND PL.PIPELINE_ID = W.PIPELINE_ID
			AND SP1.SERVICE_POINT_ID = W.POR_ID
			AND SP2.SERVICE_POINT_ID(+) = W.POD_ID
			AND IC.CONTRACT_ID = W.CONTRACT_ID
		GROUP BY PL.PIPELINE_NAME, PL.PIPELINE_ID, SP1.SERVICE_POINT_NAME, W.POR_ID, SP2.SERVICE_POINT_NAME, W.POD_ID, IC.CONTRACT_NAME, IC.CONTRACT_ID
		HAVING 0 < CASE WHEN p_INVALID_ONLY=1 THEN SUM(TOTAL_EXCESS) WHEN p_AVAILABLE_ONLY=1 THEN SUM(TOTAL_AVAIL) ELSE 1 END
		ORDER BY 1,2,3,4,5,6,7,8;

	UT.PURGE_RTO_WORK(v_WORK_ID);
	PURGE_LIMITS_VALIDATION(v_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(v_WORK_ID);			
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		BEGIN
			PURGE_LIMITS_VALIDATION(v_WORK_ID);			
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;		
		ERRS.LOG_AND_RAISE();

END LIMITS_VALIDATION_SUMMARY;
----------------------------------------------------------------------------------------------------
PROCEDURE LIMITS_VALIDATION_DETAILS
	(
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_FOR_SEGMENTS IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_WORK_ID NUMBER(9);
BEGIN
	p_STATUS := GA.SUCCESS;
	UT.GET_RTO_WORK_ID(v_WORK_ID);
	INSERT INTO RTO_WORK
		(WORK_ID, WORK_XID, WORK_SEQ, WORK_DATA)
	VALUES
		(v_WORK_ID, p_POR_ID, p_POD_ID, p_CONTRACT_ID);

	BUILD_LIMITS_VALIDATION(v_WORK_ID, p_BEGIN_DATE, p_END_DATE, p_FOR_SEGMENTS, p_SCHEDULE_TYPE, 0);

	OPEN p_CURSOR FOR
		SELECT SCHEDULE_DATE,
			FROM_CUT_AS_HED(SCHEDULE_DATE,CUT_TIME_ZONE,'DD') "SCHEDULE_DATE_DISP",
			MAX_DAILY_QUANTITY,
			CAPACITY_PURCHASED,
			CAPACITY_SOLD,
			TOTAL_RECEIVED,
			TOTAL_DELIVERED,
			TOTAL_EXCESS,
			TOTAL_AVAIL,
			MISSING_LIMITS
		FROM PIPELINE_LIMIT_VALIDATION_WORK W
		WHERE W.WORK_ID = v_WORK_ID
		ORDER BY 1;

	UT.PURGE_RTO_WORK(v_WORK_ID);
	PURGE_LIMITS_VALIDATION(v_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(v_WORK_ID);			
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		BEGIN
			PURGE_LIMITS_VALIDATION(v_WORK_ID);			
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;		
		ERRS.LOG_AND_RAISE();

END LIMITS_VALIDATION_DETAILS;
----------------------------------------------------------------------------------------------------
PROCEDURE LIMITS_VALIDATION_TXNS
	(
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_CONTRACT_ID IN NUMBER,
	p_FOR_SEGMENTS IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_SHOW_CAPACITY IN NUMBER,
	p_SHOW_DELIVERIES IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_WORK_ID NUMBER(9);
BEGIN
	p_STATUS := GA.SUCCESS;
	UT.GET_RTO_WORK_ID(v_WORK_ID);
	INSERT INTO RTO_WORK
		(WORK_ID, WORK_XID, WORK_SEQ, WORK_DATA)
	VALUES
		(v_WORK_ID, p_POR_ID, p_POD_ID, p_CONTRACT_ID);

	BUILD_LIMITS_VALIDATION(v_WORK_ID, TRUNC(p_SCHEDULE_DATE), TRUNC(p_SCHEDULE_DATE), p_FOR_SEGMENTS, p_SCHEDULE_TYPE, 1);

	OPEN p_CURSOR FOR
		SELECT T.TRANSACTION_NAME,
			CAPACITY_PURCHASED,
			CAPACITY_SOLD,
			TOTAL_RECEIVED,
			TOTAL_DELIVERED
		FROM PIPELINE_LIMIT_VALIDATION_WORK W, INTERCHANGE_TRANSACTION T
		WHERE W.WORK_ID = v_WORK_ID
			AND ((p_SHOW_CAPACITY=1 AND (CAPACITY_PURCHASED>0 OR CAPACITY_SOLD>0))
				OR (p_SHOW_DELIVERIES=1 AND (TOTAL_RECEIVED>0 OR TOTAL_DELIVERED>0)))
			AND T.TRANSACTION_ID = W.TRANSACTION_ID
		ORDER BY 1;

	UT.PURGE_RTO_WORK(v_WORK_ID);
	PURGE_LIMITS_VALIDATION(v_WORK_ID);
	
EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(v_WORK_ID);			
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		BEGIN
			PURGE_LIMITS_VALIDATION(v_WORK_ID);			
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;		
		ERRS.LOG_AND_RAISE();

END LIMITS_VALIDATION_TXNS;
----------------------------------------------------------------------------------------------------
PROCEDURE DELIVERY_SEGMENTS_SUMMARY
	(
	p_DELIVERY_ID IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_IDs GA.ID_TABLE;
v_IDX BINARY_INTEGER;
v_WORK_ID NUMBER;
BEGIN
	UT.GET_RTO_WORK_ID(v_WORK_ID);

	UT.IDS_FROM_STRING(p_DELIVERY_ID, ',', v_IDs);
	v_IDX := v_IDs.FIRST;
	WHILE v_IDs.EXISTS(v_IDX) LOOP
		INSERT INTO RTO_WORK (WORK_ID, WORK_XID) VALUES (v_WORK_ID, v_IDs(v_IDX));
		v_IDX := v_IDs.NEXT(v_IDX);
	END LOOP;

	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
		SELECT A.CUT_DATE "SCHEDULE_DATE",
			A.CUT_DATE_DISP "SCHEDULE_DATE_DISP",
			A.TRANSACTION_ID,
			A.TRANSACTION_NAME,
			MAX(ITSS.RECEIVED_AMOUNT) "RECEIVED_AMOUNT",
			SUM(ITSS.FUEL_AMOUNT) "FUEL_AMOUNT",
			MIN(ITSS.DELIVERED_AMOUNT) "DELIVERED_AMOUNT"
		FROM (SELECT SDT.CUT_DATE_SCHEDULING "CUT_DATE",
            	SUBSTR(SDT.NO_ROLLUP_YYYY_MM_DD, 1, 10) "CUT_DATE_DISP",
            	IT.TRANSACTION_ID,
            	IT.TRANSACTION_NAME,
				ITS.IT_SEGMENT_ID
            FROM SYSTEM_DATE_TIME SDT, RTO_WORK W, INTERCHANGE_TRANSACTION IT, IT_SEGMENT ITS
            WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
            	AND SDT.DATA_INTERVAL_TYPE = 2
            	AND SDT.DAY_TYPE = '1'
            	AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
            	AND W.WORK_ID = v_WORK_ID
            	AND IT.TRANSACTION_ID = W.WORK_XID
				AND ITS.TRANSACTION_ID(+) = IT.TRANSACTION_ID) A,
			IT_SEGMENT_SCHEDULE ITSS
		WHERE ITSS.IT_SEGMENT_ID(+) = A.IT_SEGMENT_ID
			AND ITSS.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
			AND ITSS.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
			AND ITSS.SCHEDULE_DATE(+) = A.CUT_DATE
		GROUP BY A.CUT_DATE, A.CUT_DATE_DISP, A.TRANSACTION_ID, A.TRANSACTION_NAME;

	UT.PURGE_RTO_WORK(v_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(v_WORK_ID);			
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;		
		ERRS.LOG_AND_RAISE();

END DELIVERY_SEGMENTS_SUMMARY;
----------------------------------------------------------------------------------------------------
PROCEDURE DELIVERY_SEGMENTS_DETAILS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT ITS.SEGMENT_ORDER,
			POR.SERVICE_POINT_NAME "POR_NAME",
			POD.SERVICE_POINT_NAME "POD_NAME",
			IC.CONTRACT_NAME,
			RECEIVED_AMOUNT,
			FUEL_AMOUNT,
			DELIVERED_AMOUNT
		FROM IT_SEGMENT ITS, IT_SEGMENT_SCHEDULE ITSS, SERVICE_POINT POR, SERVICE_POINT POD, INTERCHANGE_CONTRACT IC
		WHERE ITS.TRANSACTION_ID = p_TRANSACTION_ID
			AND ITSS.IT_SEGMENT_ID = ITS.IT_SEGMENT_ID
			AND ITSS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
			AND ITSS.SCHEDULE_STATE = GA.INTERNAL_STATE
			AND ITSS.SCHEDULE_DATE = p_SCHEDULE_DATE
			AND POR.SERVICE_POINT_ID = ITS.POR_ID
			AND POD.SERVICE_POINT_ID = ITS.POD_ID
			AND IC.CONTRACT_ID = ITS.CONTRACT_ID
		ORDER BY 1;

END DELIVERY_SEGMENTS_DETAILS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_STORAGE_SUMMARY
	(
	p_CONTRACT_ID IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_IDs ID_TABLE;
v_BEGIN_DATE DATE;
v_END_DATE DATE;
BEGIN
	p_STATUS := GA.SUCCESS;

	UT.ID_TABLE_FROM_STRING(p_CONTRACT_ID, ',', v_IDs);

	v_BEGIN_DATE := TRUNC(p_BEGIN_DATE)+1/86400;
	v_END_DATE := TRUNC(p_END_DATE)+1/86400;

	OPEN p_CURSOR FOR
		SELECT IC.CONTRACT_NAME, IC.CONTRACT_ID,
			B.STARTING_BALANCE,
			B.TOTAL_INJECTIONS,
			B.TOTAL_INJECTION_FUEL,
			B.TOTAL_WITHDRAWALS,
			B.TOTAL_WITHDRAWAL_FUEL,
			B.ENDING_BALANCE,
			B.EXCEED_MAX_CAPACITY,
			B.EXCEED_MAX_INJECTION,
			B.EXCEED_MAX_WITHDRAWAL
		FROM (SELECT A.CONTRACT_ID,
					SUM(CASE WHEN A.ROW_FROM_START=1 THEN A.BALANCE ELSE 0 END) "STARTING_BALANCE",
                    SUM(A.TOTAL_INJECTIONS) "TOTAL_INJECTIONS",
                    SUM(A.TOTAL_INJECTION_FUEL) "TOTAL_INJECTION_FUEL",
                    SUM(A.TOTAL_WITHDRAWALS) "TOTAL_WITHDRAWALS",
                    SUM(A.TOTAL_WITHDRAWAL_FUEL) "TOTAL_WITHDRAWAL_FUEL",
					SUM(CASE WHEN A.ROW_FROM_END=1 THEN A.BALANCE+A.TOTAL_INJECTIONS-A.TOTAL_INJECTION_FUEL-A.TOTAL_WITHDRAWALS-A.TOTAL_WITHDRAWAL_FUEL ELSE 0 END) "ENDING_BALANCE",
        			SUM(CASE WHEN A.BALANCE > A.MAX_CAPACITY THEN 1 ELSE 0 END) "EXCEED_MAX_CAPACITY",
        			SUM(CASE WHEN A.TOTAL_INJECTIONS-A.TOTAL_INJECTION_FUEL > NVL(SR.MAX_INJECTION_PCT,100)/100 * A.MAX_DAILY_INJECTIONS THEN 1 ELSE 0 END) "EXCEED_MAX_INJECTION",
        			SUM(CASE WHEN A.TOTAL_WITHDRAWALS+A.TOTAL_WITHDRAWAL_FUEL > NVL(SR.MAX_WITHDRAWAL_PCT,100)/100 * A.MAX_DAILY_WITHDRAWALS THEN 1 ELSE 0 END) "EXCEED_MAX_WITHDRAWAL"
        		FROM (SELECT SS.CONTRACT_ID,
							SS.SCHEDULE_DATE,
							ROW_NUMBER() OVER (PARTITION BY SS.CONTRACT_ID ORDER BY SS.SCHEDULE_DATE) "ROW_FROM_START",
							ROW_NUMBER() OVER (PARTITION BY SS.CONTRACT_ID ORDER BY SS.SCHEDULE_DATE DESC) "ROW_FROM_END",
							SS.BALANCE,
							SS.TOTAL_INJECTIONS,
							SS.TOTAL_INJECTION_FUEL,
							SS.TOTAL_WITHDRAWALS,
							SS.TOTAL_WITHDRAWAL_FUEL,
            				CASE WHEN SC.MAX_CAPACITY = 0 THEN
            						NULL
            					ELSE
            						GREATEST ( 0, LEAST ( 100, 100 * (SS.BALANCE / SC.MAX_CAPACITY) ) )
            					END "PCT_FULL",
        					SC.MAX_CAPACITY,
            				SC.MAX_DAILY_INJECTIONS,
            				SC.MAX_DAILY_WITHDRAWALS
            			FROM STORAGE_SCHEDULE SS,
            				STORAGE_CAPACITY SC,
            				TABLE(CAST(v_IDs AS ID_TABLE)) X
            			WHERE SS.CONTRACT_ID = X.ID
            				AND SS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
            				AND SS.SCHEDULE_STATE = GA.INTERNAL_STATE
            				AND SS.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
            				AND SS.AS_OF_DATE = LOW_DATE
            				AND SC.CONTRACT_ID(+) = SS.CONTRACT_ID
            				AND SC.BEGIN_DATE(+) <= TRUNC(SS.SCHEDULE_DATE)
            				AND NVL(SC.END_DATE(+),HIGH_DATE) >= TRUNC(SS.SCHEDULE_DATE)) A,
        				STORAGE_RATCHET SR
        		WHERE SR.CONTRACT_ID(+) = A.CONTRACT_ID
                    AND SR.BEGIN_DATE(+) <= TRUNC(A.SCHEDULE_DATE)
                    AND NVL(SR.END_DATE(+),HIGH_DATE) >= TRUNC(A.SCHEDULE_DATE)
                    AND SR.PERIOD_BEGIN(+) <= GET_PERIOD_DATE(A.SCHEDULE_DATE)
                    AND SR.PERIOD_END(+) >= GET_PERIOD_DATE(A.SCHEDULE_DATE)
                    AND SR.FROM_PCT_FULL(+) <= A.PCT_FULL
                    AND SR.TO_PCT_FULL(+) > A.PCT_FULL
				GROUP BY A.CONTRACT_ID
				) B,
			INTERCHANGE_CONTRACT IC
		WHERE IC.CONTRACT_ID = B.CONTRACT_ID
  ORDER BY 1;

END GET_STORAGE_SUMMARY;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_STORAGE_DETAILS
	(
	p_CONTRACT_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_BEGIN_DATE DATE;
v_END_DATE DATE;
BEGIN
	p_STATUS := GA.SUCCESS;

	v_BEGIN_DATE := TRUNC(p_BEGIN_DATE)+1/86400;
	v_END_DATE := TRUNC(p_END_DATE)+1/86400;

	OPEN p_CURSOR FOR
		SELECT A.SCHEDULE_DATE,
			FROM_CUT_AS_HED (A.SCHEDULE_DATE,CUT_TIME_ZONE,'DD') "SCHEDULE_DATE_DISP",
			A.CONTRACT_ID,
            A.BALANCE "STARTING_BALANCE",
            A.TOTAL_INJECTIONS "TOTAL_GROSS_INJECTIONS",
            A.TOTAL_INJECTION_FUEL "TOTAL_INJECTION_FUEL",
            A.TOTAL_WITHDRAWALS "TOTAL_NET_WITHDRAWALS",
            A.TOTAL_WITHDRAWAL_FUEL "TOTAL_WITHDRAWAL_FUEL",
			A.PCT_FULL,
			A.MAX_CAPACITY,
			NVL(SR.MAX_INJECTION_PCT,100)/100 * A.MAX_DAILY_INJECTIONS "MAX_INJECTIONS",
			NVL(SR.MAX_WITHDRAWAL_PCT,100)/100 * A.MAX_DAILY_WITHDRAWALS "MAX_WITHDRAWALS"
		FROM (SELECT SS.*,
    				CASE WHEN SC.MAX_CAPACITY = 0 THEN
    						NULL
    					ELSE
       						GREATEST ( 0, LEAST ( 100, 100 * (SS.BALANCE / SC.MAX_CAPACITY) ) )
    					END "PCT_FULL",
					SC.MAX_CAPACITY,
    				SC.MAX_DAILY_INJECTIONS,
    				SC.MAX_DAILY_WITHDRAWALS
    			FROM STORAGE_SCHEDULE SS,
    				STORAGE_CAPACITY SC
    			WHERE SS.CONTRACT_ID = p_CONTRACT_ID
    				AND SS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
    				AND SS.SCHEDULE_STATE = GA.INTERNAL_STATE
    				AND SS.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
    				AND SS.AS_OF_DATE = LOW_DATE
    				AND SC.CONTRACT_ID(+) = SS.CONTRACT_ID
    				AND SC.BEGIN_DATE(+) <= TRUNC(SS.SCHEDULE_DATE)
    				AND NVL(SC.END_DATE(+),HIGH_DATE) >= TRUNC(SS.SCHEDULE_DATE)) A,
				STORAGE_RATCHET SR
		WHERE SR.CONTRACT_ID(+) = A.CONTRACT_ID
            AND SR.BEGIN_DATE(+) <= TRUNC(A.SCHEDULE_DATE)
            AND NVL(SR.END_DATE(+),HIGH_DATE) >= TRUNC(A.SCHEDULE_DATE)
            AND SR.PERIOD_BEGIN(+) <= GET_PERIOD_DATE(A.SCHEDULE_DATE)
            AND SR.PERIOD_END(+) >= GET_PERIOD_DATE(A.SCHEDULE_DATE)
            AND SR.FROM_PCT_FULL(+) <= A.PCT_FULL
            AND SR.TO_PCT_FULL(+) > A.PCT_FULL
		ORDER BY 1;

END GET_STORAGE_DETAILS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_STORAGE_TXNS
	(
	p_CONTRACT_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT IT.TRANSACTION_NAME,
			SUM(CASE WHEN (IT.TRANSACTION_TYPE = 'Injection' AND ITS.AMOUNT > 0)
								OR (IT.TRANSACTION_TYPE = 'Withdrawal' AND ITS.AMOUNT < 0)
							THEN ABS(ITS.AMOUNT) ELSE NULL END) "INJECTIONS",
			SUM(CASE WHEN (IT.TRANSACTION_TYPE = 'Withdrawal' AND ITS.AMOUNT > 0)
								OR (IT.TRANSACTION_TYPE = 'Injection' AND ITS.AMOUNT < 0)
							THEN ABS(ITS.AMOUNT) ELSE NULL END) "WITHDRAWALS"
    	FROM INTERCHANGE_TRANSACTION IT, IT_COMMODITY ITC, IT_SCHEDULE ITS
    	WHERE IT.CONTRACT_ID = p_CONTRACT_ID
    		AND IT.TRANSACTION_TYPE IN ('Injection','Withdrawal')
    		AND IT.TRANSACTION_INTERVAL = 'Day'
    		AND ITC.COMMODITY_ID = IT.COMMODITY_ID
    		AND ITC.COMMODITY_TYPE = 'Gas'
    		AND ITS.TRANSACTION_ID = IT.TRANSACTION_ID
    		AND ITS.SCHEDULE_TYPE = p_SCHEDULE_TYPE
    		AND ITS.SCHEDULE_STATE = GA.INTERNAL_STATE
    		AND ITS.SCHEDULE_DATE = p_SCHEDULE_DATE
    		AND ITS.AS_OF_DATE = LOW_DATE
			AND ITS.AMOUNT <> 0
		GROUP BY IT.TRANSACTION_NAME
		ORDER BY 1;

END GET_STORAGE_TXNS;
----------------------------------------------------------------------------------------------------
PROCEDURE RECEIVED_VOLUME_CALCULATOR
	(
	p_PIPELINE_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
    	SELECT A.TRANSACTION_NAME, COMPUTE_TOTAL_FUEL_PCT(A.TRANSACTION_ID,p_BEGIN_DATE) "FUEL_PCT"
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, IT_COMMODITY C, SERVICE_POINT POR, SERVICE_POINT POD
		WHERE A.TRANSACTION_TYPE = 'Delivery'
			AND A.BEGIN_DATE <= p_BEGIN_DATE
			AND A.END_DATE >= p_BEGIN_DATE
			AND A.TRANSACTION_INTERVAL = 'Day'
			AND p_POR_ID IN (A.POR_ID, CONSTANTS.ALL_ID)
			AND p_POD_ID IN (A.POD_ID, CONSTANTS.ALL_ID)
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND B.TRANSACTION_IS_ACTIVE = 1
			AND C.COMMODITY_ID = A.COMMODITY_ID
			AND C.COMMODITY_TYPE = 'Gas'
			AND POR.SERVICE_POINT_ID = A.POR_ID
			AND POD.SERVICE_POINT_ID = A.POD_ID
			AND p_PIPELINE_ID IN (CONSTANTS.ALL_ID, POR.PIPELINE_ID, POD.PIPELINE_ID)
		ORDER BY 1;
END RECEIVED_VOLUME_CALCULATOR;
----------------------------------------------------------------------------------------------------
PROCEDURE PURGE_POSITION_WORK
	(
	p_WORK_ID IN NUMBER
	) AS
BEGIN
	DELETE GAS_POSITION_WORK WHERE WORK_ID = p_WORK_ID;
END PURGE_POSITION_WORK;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_POSITION
	(
	p_PIPELINE_ID IN NUMBER,
	p_ZONE_ID IN NUMBER,
	p_POINT_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_PSE_ID IN NUMBER,
	p_POOL_ID IN NUMBER,
	p_INCLUDE_FUEL IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_WORK_ID NUMBER;
v_BEGIN_DATE DATE;
v_END_DATE DATE;
BEGIN
	p_STATUS := GA.SUCCESS;

	v_BEGIN_DATE := p_BEGIN_DATE+1/86400;
	v_END_DATE := p_END_DATE+1/86400;

	UT.GET_RTO_WORK_ID(v_WORK_ID);
	-- get demand - outer-join to system_date_time so that all schedule_dates are accounted for
	INSERT INTO GAS_POSITION_WORK (WORK_ID, TRANSACTION_ID, SCHEDULE_DATE, TRANSACTION_TYPE, AMOUNT)
	SELECT v_WORK_ID,
		0,
		A.SCHEDULE_DATE,
		A.TRANSACTION_TYPE,
		SUM(ITS.AMOUNT)
    FROM (SELECT IT.TRANSACTION_ID, IT.TRANSACTION_TYPE, SDT.CUT_DATE_SCHEDULING "SCHEDULE_DATE"
			FROM INTERCHANGE_TRANSACTION IT, IT_STATUS ITST, IT_COMMODITY ITC, SERVICE_POINT SP,
				SYSTEM_DATE_TIME SDT
		    WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
                AND SDT.DATA_INTERVAL_TYPE = 2
                AND SDT.DAY_TYPE = '1'
                AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
				AND (SP.SERVICE_POINT_ID=0 OR SP.SERVICE_POINT_TYPE = 'Pipeline')
				AND p_POINT_ID IN (SP.SERVICE_POINT_ID, CONSTANTS.ALL_ID)
                AND p_ZONE_ID IN (SP.SERVICE_ZONE_ID, CONSTANTS.ALL_ID)
                AND p_PIPELINE_ID IN (SP.PIPELINE_ID, CONSTANTS.ALL_ID)
                AND IT.POR_ID = SP.SERVICE_POINT_ID
                AND IT.TRANSACTION_TYPE IN ('Load','Sale','Injection')
                AND IT.BEGIN_DATE <= p_END_DATE
                AND IT.END_DATE >= p_BEGIN_DATE
                AND p_EDC_ID IN (IT.EDC_ID, CONSTANTS.ALL_ID)
                AND p_PSE_ID IN (IT.PURCHASER_ID, CONSTANTS.ALL_ID)
                AND p_POOL_ID IN (IT.POOL_ID, CONSTANTS.ALL_ID)
                AND IT.TRANSACTION_INTERVAL = 'Day'
                AND ITST.TRANSACTION_ID = IT.TRANSACTION_ID
                AND ITST.TRANSACTION_IS_ACTIVE = 1
                AND ITC.COMMODITY_ID = IT.COMMODITY_ID
                AND ITC.COMMODITY_TYPE = 'Gas'
			) A,
		IT_SCHEDULE ITS
	WHERE ITS.TRANSACTION_ID(+) = A.TRANSACTION_ID
        AND ITS.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
        AND ITS.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        AND ITS.SCHEDULE_DATE(+) = A.SCHEDULE_DATE
	GROUP BY A.SCHEDULE_DATE, A.TRANSACTION_TYPE;

	-- get supply
	INSERT INTO GAS_POSITION_WORK (WORK_ID, TRANSACTION_ID, SCHEDULE_DATE, TRANSACTION_TYPE, AMOUNT)
	SELECT v_WORK_ID,
		A.TRANSACTION_ID,
		A.SCHEDULE_DATE,
		A.TRANSACTION_TYPE,
		SUM(ITS.AMOUNT)
    FROM (SELECT IT.TRANSACTION_ID, IT.TRANSACTION_TYPE, SDT.CUT_DATE_SCHEDULING "SCHEDULE_DATE"
			FROM INTERCHANGE_TRANSACTION IT, IT_STATUS ITST, IT_COMMODITY ITC, SERVICE_POINT SP,
				SYSTEM_DATE_TIME SDT
		    WHERE SDT.TIME_ZONE = LOCAL_TIME_ZONE
                AND SDT.DATA_INTERVAL_TYPE = 2
                AND SDT.DAY_TYPE = '1'
                AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
				AND (SP.SERVICE_POINT_ID=0 OR SP.SERVICE_POINT_TYPE = 'Pipeline')
				AND p_POINT_ID IN (SP.SERVICE_POINT_ID, CONSTANTS.ALL_ID)
                AND p_ZONE_ID IN (SP.SERVICE_ZONE_ID, CONSTANTS.ALL_ID)
                AND p_PIPELINE_ID IN (SP.PIPELINE_ID, CONSTANTS.ALL_ID)
                AND IT.POD_ID = SP.SERVICE_POINT_ID
		        AND IT.TRANSACTION_TYPE IN ('Purchase','Withdrawal','Adjustment','Exchange')
                AND IT.BEGIN_DATE <= p_END_DATE
                AND IT.END_DATE >= p_BEGIN_DATE
                AND p_EDC_ID IN (IT.EDC_ID, CONSTANTS.ALL_ID)
                AND p_PSE_ID IN (IT.SELLER_ID, CONSTANTS.ALL_ID)
                AND p_POOL_ID IN (IT.POOL_ID, CONSTANTS.ALL_ID)
                AND IT.TRANSACTION_INTERVAL = 'Day'
                AND ITST.TRANSACTION_ID = IT.TRANSACTION_ID
                AND ITST.TRANSACTION_IS_ACTIVE = 1
                AND ITC.COMMODITY_ID = IT.COMMODITY_ID
                AND ITC.COMMODITY_TYPE = 'Gas'
			) A,
		IT_SCHEDULE ITS
	WHERE ITS.TRANSACTION_ID(+) = A.TRANSACTION_ID
        AND ITS.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
        AND ITS.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        AND ITS.SCHEDULE_DATE(+) = A.SCHEDULE_DATE
	GROUP BY A.SCHEDULE_DATE, A.TRANSACTION_ID, A.TRANSACTION_TYPE;

	OPEN p_CURSOR FOR
		SELECT SCHEDULE_DATE,
			FROM_CUT_AS_HED(SCHEDULE_DATE, CUT_TIME_ZONE, 'DD') "SCHEDULE_DATE_DISP",
			TRANSACTION_TYPE,
			AMOUNT,
			SUM(AMOUNT) OVER (PARTITION BY TRANSACTION_TYPE ORDER BY SCHEDULE_DATE) "AMOUNT_ACCUM",
			NULL "FUEL",
			NULL "FUEL_ACCUM"
		FROM (SELECT W.SCHEDULE_DATE, W.TRANSACTION_TYPE, SUM(W.AMOUNT) "AMOUNT"
				FROM GAS_POSITION_WORK W
				WHERE W.WORK_ID = v_WORK_ID
				GROUP BY W.SCHEDULE_DATE, W.TRANSACTION_TYPE)
		UNION ALL
		-- now include fuel
		SELECT SCHEDULE_DATE,
			FROM_CUT_AS_HED(SCHEDULE_DATE, CUT_TIME_ZONE, 'DD'),
			'Delivery',
			NULL,
			NULL,
			FUEL,
			SUM(FUEL) OVER (ORDER BY SCHEDULE_DATE)
		FROM (SELECT W.SCHEDULE_DATE,
					SUM(IAS.AMOUNT*X.FUEL/X.RECV) "FUEL"
        		FROM GAS_POSITION_WORK W,
        			(SELECT ITSS.SCHEDULE_DATE, IT.TRANSACTION_ID,
        					MAX(RECEIVED_AMOUNT) "RECV", SUM(FUEL_AMOUNT) "FUEL"
        				FROM INTERCHANGE_TRANSACTION IT, IT_STATUS ITST, IT_COMMODITY ITC, SERVICE_POINT POR, SERVICE_POINT POD,
        					IT_SEGMENT ITS, IT_SEGMENT_SCHEDULE ITSS
        	    	    WHERE p_INCLUDE_FUEL = 1
							AND p_POINT_ID = CONSTANTS.ALL_ID
							AND POR.SERVICE_POINT_TYPE = 'Pipeline'
                            AND p_ZONE_ID IN (POR.SERVICE_ZONE_ID, CONSTANTS.ALL_ID)
                            AND p_PIPELINE_ID IN (POR.PIPELINE_ID, CONSTANTS.ALL_ID)
                            AND IT.POR_ID = POR.SERVICE_POINT_ID
            				AND POD.SERVICE_POINT_TYPE = 'Pipeline'
                            AND p_ZONE_ID IN (POD.SERVICE_ZONE_ID, CONSTANTS.ALL_ID)
                            AND p_PIPELINE_ID IN (POD.PIPELINE_ID, CONSTANTS.ALL_ID)
                            AND IT.POD_ID = POD.SERVICE_POINT_ID
                            AND IT.TRANSACTION_TYPE = 'Delivery'
                            AND IT.BEGIN_DATE <= p_END_DATE
                            AND IT.END_DATE >= p_BEGIN_DATE
                            AND IT.TRANSACTION_INTERVAL = 'Day'
                            AND ITST.TRANSACTION_ID = IT.TRANSACTION_ID
                            AND ITST.TRANSACTION_IS_ACTIVE = 1
                            AND ITC.COMMODITY_ID = IT.COMMODITY_ID
                            AND ITC.COMMODITY_TYPE = 'Gas'
            				AND ITS.TRANSACTION_ID = IT.TRANSACTION_ID
            				AND ITS.BEGIN_DATE <= p_END_DATE
            				AND NVL(ITS.END_DATE,p_BEGIN_DATE) >= p_BEGIN_DATE
            				AND ITSS.IT_SEGMENT_ID = ITS.IT_SEGMENT_ID
            				AND ITSS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
            				AND ITSS.SCHEDULE_STATE = GA.INTERNAL_STATE
            				AND ITSS.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
            			GROUP BY ITSS.SCHEDULE_DATE, IT.TRANSACTION_ID
            			HAVING MAX(RECEIVED_AMOUNT) <> 0
            			) X,
        			IT_ASSIGNMENT IA,
        			IT_ASSIGNMENT_SCHEDULE IAS
        		WHERE W.WORK_ID = v_WORK_ID
        			AND X.SCHEDULE_DATE = W.SCHEDULE_DATE
        			AND IA.TO_TRANSACTION_ID = W.TRANSACTION_ID
        			AND IA.FROM_TRANSACTION_ID =X.TRANSACTION_ID
        			AND IA.ASSIGNMENT_TYPE = g_GAS_DELIVERY_ASSIGNMENT_TYPE
        			AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
        			AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
        			AND IAS.SCHEDULE_DATE = W.SCHEDULE_DATE
        			AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
        			AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE
				GROUP BY W.SCHEDULE_DATE);

	PURGE_POSITION_WORK(v_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			PURGE_POSITION_WORK(v_WORK_ID);			
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;		
		ERRS.LOG_AND_RAISE();

END GET_POSITION;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_POINT_POSITION
	(
	p_PIPELINE_ID IN NUMBER,
	p_ZONE_ID IN NUMBER,
	p_POINT_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_WORK_ID NUMBER;
v_BEGIN_DATE DATE;
v_END_DATE DATE;
BEGIN
	p_STATUS := GA.SUCCESS;

	v_BEGIN_DATE := p_BEGIN_DATE+1/86400;
	v_END_DATE := p_END_DATE+1/86400;

	UT.GET_RTO_WORK_ID(v_WORK_ID);
	INSERT INTO RTO_WORK (WORK_ID, WORK_XID, WORK_DATA)
    SELECT v_WORK_ID,
	    SERVICE_POINT_ID,
		CASE WHEN SP.NODE_TYPE = 'City Gate' THEN
				SERVICE_POINT_NAME||' *'
			ELSE
				SERVICE_POINT_NAME
			END
    FROM SERVICE_POINT SP
    WHERE SP.SERVICE_POINT_TYPE = 'Pipeline'
        AND p_POINT_ID IN (SP.SERVICE_POINT_ID, CONSTANTS.ALL_ID)
        AND p_ZONE_ID IN (SP.SERVICE_ZONE_ID, CONSTANTS.ALL_ID)
        AND p_PIPELINE_ID IN (SP.PIPELINE_ID, CONSTANTS.ALL_ID);

	OPEN p_CURSOR FOR
        SELECT X.WORK_DATA "POINT_NAME",
			X.WORK_XID "POINT_ID",
			ITS.SCHEDULE_DATE,
			FROM_CUT_AS_HED(ITS.SCHEDULE_DATE,CUT_TIME_ZONE,'DD') "SCHEDULE_DATE_DISP",
			IT.TRANSACTION_TYPE,
	        SUM(ITS.AMOUNT) "AMOUNT",
			NULL "DELIV",
			NULL "RECV"
        FROM INTERCHANGE_TRANSACTION IT, IT_SCHEDULE ITS, IT_STATUS ITST, IT_COMMODITY ITC, RTO_WORK X
        WHERE X.WORK_ID = v_WORK_ID
			AND ((IT.TRANSACTION_TYPE IN ('Load','Sale','Injection') AND IT.POR_ID = X.WORK_XID)
				OR (IT.TRANSACTION_TYPE IN ('Purchase','Withdrawal','Adjustment','Exchange') AND IT.POD_ID = X.WORK_XID))
            AND IT.BEGIN_DATE <= p_END_DATE
            AND IT.END_DATE >= p_BEGIN_DATE
            AND IT.TRANSACTION_INTERVAL = 'Day'
            AND ITST.TRANSACTION_ID = IT.TRANSACTION_ID
            AND ITST.TRANSACTION_IS_ACTIVE = 1
            AND ITC.COMMODITY_ID = IT.COMMODITY_ID
            AND ITC.COMMODITY_TYPE = 'Gas'
            AND ITS.TRANSACTION_ID = IT.TRANSACTION_ID
            AND ITS.SCHEDULE_TYPE = p_SCHEDULE_TYPE
            AND ITS.SCHEDULE_STATE = GA.INTERNAL_STATE
            AND ITS.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		GROUP BY X.WORK_DATA, X.WORK_XID, ITS.SCHEDULE_DATE, IT.TRANSACTION_TYPE
		UNION ALL
		SELECT X.WORK_DATA,
			X.WORK_XID,
			ITSS.SCHEDULE_DATE,
			FROM_CUT_AS_HED(ITSS.SCHEDULE_DATE,CUT_TIME_ZONE,'DD') "SCHEDULE_DATE_DISP",
			'Delivered',
			NULL "AMOUNT",
			SUM(ITSS.DELIVERED_AMOUNT) "DELIV",
			NULL "RECV"
		FROM IT_SEGMENT ITS, IT_SEGMENT_SCHEDULE ITSS, RTO_WORK X
		WHERE X.WORK_ID = v_WORK_ID
			AND ITS.BEGIN_DATE <= p_END_DATE
            AND NVL(ITS.END_DATE,p_BEGIN_DATE) >= p_BEGIN_DATE
			AND ITS.POD_ID = X.WORK_XID
            AND ITSS.IT_SEGMENT_ID = ITS.IT_SEGMENT_ID
            AND ITSS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
            AND ITSS.SCHEDULE_STATE = GA.INTERNAL_STATE
            AND ITSS.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		GROUP BY X.WORK_DATA, X.WORK_XID, ITSS.SCHEDULE_DATE
		UNION ALL
		SELECT X.WORK_DATA,
			X.WORK_XID,
			ITSS.SCHEDULE_DATE,
			FROM_CUT_AS_HED(ITSS.SCHEDULE_DATE,CUT_TIME_ZONE,'DD') "SCHEDULE_DATE_DISP",
			'Received',
			NULL "AMOUNT",
			NULL "DELIV",
			SUM(ITSS.RECEIVED_AMOUNT) "RECV"
		FROM IT_SEGMENT ITS, IT_SEGMENT_SCHEDULE ITSS, RTO_WORK X
		WHERE X.WORK_ID = v_WORK_ID
			AND ITS.BEGIN_DATE <= p_END_DATE
            AND NVL(ITS.END_DATE,p_BEGIN_DATE) >= p_BEGIN_DATE
			AND ITS.POR_ID = X.WORK_XID
            AND ITSS.IT_SEGMENT_ID = ITS.IT_SEGMENT_ID
            AND ITSS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
            AND ITSS.SCHEDULE_STATE = GA.INTERNAL_STATE
            AND ITSS.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		GROUP BY X.WORK_DATA, X.WORK_XID, ITSS.SCHEDULE_DATE
        ORDER BY 1, 3;

	UT.PURGE_RTO_WORK(v_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(v_WORK_ID);
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		ERRS.LOG_AND_RAISE();

END GET_POINT_POSITION;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_POSITION_TXNS
	(
	p_PIPELINE_ID IN NUMBER,
	p_ZONE_ID IN NUMBER,
	p_POINT_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_PSE_ID IN NUMBER,
	p_POOL_ID IN NUMBER,
	p_TRANSACTION_TYPE IN VARCHAR2,
	p_SCHEDULE_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
v_USE_POR NUMBER(1);
BEGIN
	p_STATUS := GA.SUCCESS;

	IF p_TRANSACTION_TYPE IN ('Load','Sale','Injection') THEN
		v_USE_POR := 1;
	ELSE
		v_USE_POR := 0;
	END IF;

	OPEN p_CURSOR FOR
        SELECT TRANSACTION_NAME,
	        AMOUNT
        FROM INTERCHANGE_TRANSACTION IT, IT_SCHEDULE ITS, IT_STATUS ITST, IT_COMMODITY ITC,
    	    SERVICE_POINT SP
        WHERE SP.SERVICE_POINT_TYPE = 'Pipeline'
			AND p_POINT_ID IN (SP.SERVICE_POINT_ID, CONSTANTS.ALL_ID)
            AND p_ZONE_ID IN (SP.SERVICE_ZONE_ID, CONSTANTS.ALL_ID)
            AND p_PIPELINE_ID IN (SP.PIPELINE_ID, CONSTANTS.ALL_ID)
            AND ((v_USE_POR = 0 AND IT.POD_ID = SP.SERVICE_POINT_ID)
	            OR (v_USE_POR = 1 AND IT.POR_ID = SP.SERVICE_POINT_ID))
            AND IT.TRANSACTION_TYPE = p_TRANSACTION_TYPE
            AND IT.BEGIN_DATE <= TRUNC(p_SCHEDULE_DATE)
            AND IT.END_DATE >= TRUNC(p_SCHEDULE_DATE)
            AND p_EDC_ID IN (IT.EDC_ID, CONSTANTS.ALL_ID)
            AND ((v_USE_POR = 0 AND p_PSE_ID IN (IT.SELLER_ID, CONSTANTS.ALL_ID))
	            OR (v_USE_POR = 1 AND p_PSE_ID IN (IT.PURCHASER_ID, CONSTANTS.ALL_ID)))
            AND p_POOL_ID IN (IT.POOL_ID, CONSTANTS.ALL_ID)
            AND IT.TRANSACTION_INTERVAL = 'Day'
            AND ITST.TRANSACTION_ID = IT.TRANSACTION_ID
            AND ITST.TRANSACTION_IS_ACTIVE = 1
            AND ITC.COMMODITY_ID = IT.COMMODITY_ID
            AND ITC.COMMODITY_TYPE = 'Gas'
            AND ITS.TRANSACTION_ID = IT.TRANSACTION_ID
            AND ITS.SCHEDULE_TYPE = p_SCHEDULE_TYPE
            AND ITS.SCHEDULE_STATE = GA.INTERNAL_STATE
            AND ITS.SCHEDULE_DATE = p_SCHEDULE_DATE
        ORDER BY 1;

END GET_POSITION_TXNS;
----------------------------------------------------------------------------------------------------
FUNCTION COMPUTE_TOTAL_FUEL_PCT
	(
	p_DELIVERY_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE
	) RETURN NUMBER IS
v_REMAINING NUMBER := 1;
CURSOR c_SEGMENTS IS
	SELECT LOOKUP_PIPELINE_FUEL_PCT(CONTRACT_ID, POR_ID, POD_ID, p_SCHEDULE_DATE) "FUEL_PCT"
	FROM IT_SEGMENT IT
	WHERE TRANSACTION_ID = p_DELIVERY_ID
		AND TRUNC(p_SCHEDULE_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
	ORDER BY SEGMENT_ORDER;
BEGIN
	FOR v_SEGMENT IN c_SEGMENTS LOOP
		v_REMAINING := v_REMAINING * (1 - v_SEGMENT.FUEL_PCT/100);
	END LOOP;
	RETURN (1 / v_REMAINING - 1)*100;
END COMPUTE_TOTAL_FUEL_PCT;
----------------------------------------------------------------------------------------------------
PROCEDURE LOOKUP_PIPELINE_RATES
	(
	p_CONTRACT_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_COMMODITY_RATE OUT NUMBER,
	p_FUEL_PCT OUT NUMBER,
	p_FUEL_RATE OUT NUMBER
	) AS
v_TARIFF_TYPE VARCHAR2(32);
v_ZONE1_ID NUMBER;
v_ZONE2_ID NUMBER;
v_ZONE1_ORDER NUMBER;
v_ZONE2_ORDER NUMBER;
v_TMP NUMBER;
v_MILEAGE NUMBER;
v_PERIOD_DATE DATE := GET_PERIOD_DATE(p_SCHEDULE_DATE);
BEGIN
	-- no charges if delivery is going nowhere
	IF p_POR_ID = p_POD_ID THEN
		p_COMMODITY_RATE := 0;
		p_FUEL_PCT := 0;
		p_FUEL_RATE := 0;
		RETURN;
	END IF;

	SELECT PIPELINE_TARIFF_TYPE
	INTO v_TARIFF_TYPE
	FROM INTERCHANGE_CONTRACT
	WHERE CONTRACT_ID = p_CONTRACT_ID;

	CASE v_TARIFF_TYPE
	WHEN 'Zone to Zone' THEN
		SELECT POR.SERVICE_ZONE_ID, POD.SERVICE_ZONE_ID
		INTO v_ZONE1_ID, v_ZONE2_ID
		FROM SERVICE_POINT POR, SERVICE_POINT POD
		WHERE POR.SERVICE_POINT_ID = p_POR_ID
			AND POD.SERVICE_POINT_ID = p_POD_ID;

        SELECT NVL(SUM(COMMODITY_CHARGE),0), NVL(SUM(FUEL_PCT),0), NVL(SUM(FUEL_CHARGE),0), COUNT(COMMODITY_CHARGE)
		INTO p_COMMODITY_RATE, p_FUEL_PCT, p_FUEL_RATE, v_TMP
		FROM PIPELINE_TARIFF_RATE
		WHERE CONTRACT_ID = p_CONTRACT_ID
			AND PIPELINE_TARIFF_TYPE = v_TARIFF_TYPE
            AND TRUNC(p_SCHEDULE_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
            AND v_PERIOD_DATE BETWEEN PERIOD_BEGIN AND PERIOD_END
            AND ZOR_ID = v_ZONE1_ID
            AND ZOD_ID = v_ZONE2_ID;

		IF v_TMP = 0 THEN
			-- try swapping ZOR and ZOD to find a rate
	        SELECT NVL(SUM(COMMODITY_CHARGE),0), NVL(SUM(FUEL_PCT),0), NVL(SUM(FUEL_CHARGE),0)
       		INTO p_COMMODITY_RATE, p_FUEL_PCT, p_FUEL_RATE
       		FROM PIPELINE_TARIFF_RATE
       		WHERE CONTRACT_ID = p_CONTRACT_ID
       			AND PIPELINE_TARIFF_TYPE = v_TARIFF_TYPE
   				AND TRUNC(p_SCHEDULE_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
	            AND v_PERIOD_DATE BETWEEN PERIOD_BEGIN AND PERIOD_END
   				AND ZOR_ID = v_ZONE2_ID
   				AND ZOD_ID = v_ZONE1_ID;
		END IF;

	WHEN 'Zone Additive' THEN
		SELECT POR.SERVICE_ZONE_ID, POD.SERVICE_ZONE_ID
		INTO v_ZONE1_ID, v_ZONE2_ID
		FROM SERVICE_POINT POR, SERVICE_POINT POD
		WHERE POR.SERVICE_POINT_ID = p_POR_ID
			AND POD.SERVICE_POINT_ID = p_POD_ID;
		-- now get orders for the two zones
		SELECT ZONE_ORDER
		INTO v_ZONE1_ORDER
		FROM PIPELINE_TARIFF_RATE
		WHERE CONTRACT_ID = p_CONTRACT_ID
			AND PIPELINE_TARIFF_TYPE = v_TARIFF_TYPE
			AND TRUNC(p_SCHEDULE_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
            AND v_PERIOD_DATE BETWEEN PERIOD_BEGIN AND PERIOD_END
			AND ZOR_ID = v_ZONE1_ID
			AND ROWNUM = 1;
		SELECT ZONE_ORDER
		INTO v_ZONE2_ORDER
		FROM PIPELINE_TARIFF_RATE
		WHERE CONTRACT_ID = p_CONTRACT_ID
			AND PIPELINE_TARIFF_TYPE = v_TARIFF_TYPE
			AND TRUNC(p_SCHEDULE_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
            AND v_PERIOD_DATE BETWEEN PERIOD_BEGIN AND PERIOD_END
			AND ZOR_ID = v_ZONE2_ID
			AND ROWNUM = 1;
		IF v_ZONE2_ORDER < v_ZONE1_ORDER THEN
			-- swap if necessary
			v_TMP := v_ZONE1_ORDER;
			v_ZONE1_ORDER := v_ZONE2_ORDER;
			v_ZONE2_ORDER := v_TMP;
		END IF;

        SELECT NVL(SUM(COMMODITY_CHARGE),0), NVL(SUM(FUEL_PCT),0), NVL(SUM(FUEL_CHARGE),0)
		INTO p_COMMODITY_RATE, p_FUEL_PCT, p_FUEL_RATE
		FROM PIPELINE_TARIFF_RATE
		WHERE CONTRACT_ID = p_CONTRACT_ID
			AND PIPELINE_TARIFF_TYPE = v_TARIFF_TYPE
            AND TRUNC(p_SCHEDULE_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
            AND v_PERIOD_DATE BETWEEN PERIOD_BEGIN AND PERIOD_END
			AND ZONE_ORDER BETWEEN v_ZONE1_ORDER AND v_ZONE2_ORDER;

	WHEN 'Postage Stamp' THEN
		-- lookup simple rate
        SELECT NVL(SUM(COMMODITY_CHARGE),0), NVL(SUM(FUEL_PCT),0), NVL(SUM(FUEL_CHARGE),0)
		INTO p_COMMODITY_RATE, p_FUEL_PCT, p_FUEL_RATE
		FROM PIPELINE_TARIFF_RATE
		WHERE CONTRACT_ID = p_CONTRACT_ID
			AND PIPELINE_TARIFF_TYPE = v_TARIFF_TYPE
            AND TRUNC(p_SCHEDULE_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
            AND v_PERIOD_DATE BETWEEN PERIOD_BEGIN AND PERIOD_END;

	WHEN 'Mileage' THEN
		SELECT ABS(POD.MILE_MARKER - POR.MILE_MARKER)
		INTO v_MILEAGE
		FROM SERVICE_POINT POR, SERVICE_POINT POD
		WHERE POR.SERVICE_POINT_ID = p_POR_ID
			AND POD.SERVICE_POINT_ID = p_POD_ID;

        SELECT NVL(SUM(COMMODITY_CHARGE),0), NVL(SUM(FUEL_PCT),0), NVL(SUM(FUEL_CHARGE),0)
		INTO p_COMMODITY_RATE, p_FUEL_PCT, p_FUEL_RATE
		FROM PIPELINE_TARIFF_RATE
		WHERE CONTRACT_ID = p_CONTRACT_ID
			AND PIPELINE_TARIFF_TYPE = v_TARIFF_TYPE
            AND TRUNC(p_SCHEDULE_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE,HIGH_DATE)
            AND v_PERIOD_DATE BETWEEN PERIOD_BEGIN AND PERIOD_END
			AND v_MILEAGE BETWEEN FROM_MILEAGE AND NVL(TO_MILEAGE,v_MILEAGE);

	ELSE
    	p_COMMODITY_RATE := 0;
    	p_FUEL_PCT := 0;
    	p_FUEL_RATE := 0;
	END CASE;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
    	p_COMMODITY_RATE := 0;
    	p_FUEL_PCT := 0;
    	p_FUEL_RATE := 0;
END LOOKUP_PIPELINE_RATES;
----------------------------------------------------------------------------------------------------
FUNCTION LOOKUP_PIPELINE_COMMODITY_RATE
	(
	p_CONTRACT_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE
	) RETURN NUMBER AS
v_COMMODITY_RATE NUMBER;
v_FUEL_PCT NUMBER;
v_FUEL_RATE NUMBER;
BEGIN
	LOOKUP_PIPELINE_RATES(p_CONTRACT_ID,p_POR_ID,p_POD_ID,p_SCHEDULE_DATE,v_COMMODITY_RATE,v_FUEL_PCT,v_FUEL_RATE);
	RETURN v_COMMODITY_RATE;
END LOOKUP_PIPELINE_COMMODITY_RATE;
----------------------------------------------------------------------------------------------------
FUNCTION LOOKUP_PIPELINE_FUEL_PCT
	(
	p_CONTRACT_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE
	) RETURN NUMBER AS
v_COMMODITY_RATE NUMBER;
v_FUEL_PCT NUMBER;
v_FUEL_RATE NUMBER;
BEGIN
	LOOKUP_PIPELINE_RATES(p_CONTRACT_ID,p_POR_ID,p_POD_ID,p_SCHEDULE_DATE,v_COMMODITY_RATE,v_FUEL_PCT,v_FUEL_RATE);
	RETURN v_FUEL_PCT;
END LOOKUP_PIPELINE_FUEL_PCT;
----------------------------------------------------------------------------------------------------
FUNCTION LOOKUP_PIPELINE_FUEL_RATE
	(
	p_CONTRACT_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE
	) RETURN NUMBER AS
v_COMMODITY_RATE NUMBER;
v_FUEL_PCT NUMBER;
v_FUEL_RATE NUMBER;
BEGIN
	LOOKUP_PIPELINE_RATES(p_CONTRACT_ID,p_POR_ID,p_POD_ID,p_SCHEDULE_DATE,v_COMMODITY_RATE,v_FUEL_PCT,v_FUEL_RATE);
	RETURN v_FUEL_RATE;
END LOOKUP_PIPELINE_FUEL_RATE;
----------------------------------------------------------------------------------------------------
END GDJ;
/
