CREATE OR REPLACE PACKAGE ALERTS IS
--Revision $Revision: 1.7 $

c_TYPE_EXCEPTION          CONSTANT SYSTEM_ALERT_TRIGGER.TRIGGER_TYPE%TYPE := 'Exception';
c_TYPE_PROCESS_COMPLETION CONSTANT SYSTEM_ALERT_TRIGGER.TRIGGER_TYPE%TYPE := 'Process Completion';
c_TYPE_OTHER              CONSTANT SYSTEM_ALERT_TRIGGER.TRIGGER_TYPE%TYPE := 'Other';
c_TYPE_MANUAL             CONSTANT SYSTEM_ALERT_TRIGGER.TRIGGER_TYPE%TYPE := 'Manual';

FUNCTION WHAT_VERSION RETURN VARCHAR;

-- Find all alerts that match the specified trigger type, trigger value, trigger level,
-- and current process name
PROCEDURE TRIGGER_ALERTS
	(
	p_TRIGGER_VALUE IN VARCHAR2,
	p_TRIGGER_LEVEL IN PLS_INTEGER,
	p_ALERT_MESSAGE IN VARCHAR2,
	p_TRIGGER_TYPE  IN VARCHAR2 := c_TYPE_OTHER,
	p_ALERT_DATE    IN DATE := NULL
	);

PROCEDURE PUT_ALERT_OCCURRENCE
	(
	O_OID             OUT NUMBER,
	p_OCCURRENCE_ID   IN NUMBER,
	p_ALERT_ID        IN NUMBER,
	p_ALERT_MESSAGE   IN VARCHAR2,
	p_TRIGGER_LEVEL   IN NUMBER := NULL,
	p_TRIGGER_TYPE    IN VARCHAR2 := NULL,
	p_TRIGGER_VALUE   IN VARCHAR2 := NULL,
	p_ALERT_DATE      IN DATE := NULL,
	p_EXPIRATION_DATE IN DATE := NULL,
	p_PRIORITY        IN NUMBER := NULL
	);

PROCEDURE PUT_ALERT_ACKNOWLEDGED(p_OCCURRENCE_ID IN NUMBER);

END ALERTS;
/
CREATE OR REPLACE PACKAGE BODY ALERTS IS
-------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
	RETURN '$Revision: 1.7 $';
END WHAT_VERSION;
-------------------------------------------------------------------------------------
FUNCTION GET_OCCUR_SUBJECT
	(
	p_OCCURRENCE_ID IN NUMBER
	) RETURN VARCHAR2 IS

	v_PREFIX VARCHAR2(512);
	v_SUBJECT VARCHAR2(800);
	v_ALERT_EMAIL_SUBJECT SYSTEM_ALERT.ALERT_EMAIL_SUBJECT%TYPE;

BEGIN

	v_PREFIX := TRIM(GET_DICTIONARY_VALUE('Alert Email Prefix', 0, 'System', 'Alerts', '?', '?', 0));

	SELECT A.ALERT_EMAIL_SUBJECT
	INTO v_ALERT_EMAIL_SUBJECT
	FROM SYSTEM_ALERT A, SYSTEM_ALERT_OCCURRENCE O
	WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
		AND O.ALERT_ID = A.ALERT_ID;

	-- If the alert doesn't have a subject, just use the prefix
	IF NVL(TRIM(v_ALERT_EMAIL_SUBJECT), '?') = '?' THEN
		v_SUBJECT := v_PREFIX;
	ELSE
		v_SUBJECT := v_PREFIX || ': ' || TRIM(v_ALERT_EMAIL_SUBJECT);
	END IF;

	RETURN v_SUBJECT;

END GET_OCCUR_SUBJECT;
-------------------------------------------------------------------------------------
FUNCTION GET_ACK_SUBJECT
	(
	p_OCCURRENCE_ID IN NUMBER
	) RETURN VARCHAR2 IS

	v_PREFIX VARCHAR2(512);
	v_SUBJECT VARCHAR2(800);
	v_ALERT_EMAIL_SUBJECT SYSTEM_ALERT.ALERT_EMAIL_SUBJECT%TYPE;

BEGIN

	v_PREFIX := TRIM(GET_DICTIONARY_VALUE('Alert Email Prefix', 0, 'System', 'Alerts', '?', '?', 0));

	SELECT A.ACK_EMAIL_SUBJECT
	INTO v_ALERT_EMAIL_SUBJECT
	FROM SYSTEM_ALERT A, SYSTEM_ALERT_OCCURRENCE O
	WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
		AND O.ALERT_ID = A.ALERT_ID;

	-- If the alert doesn't have a subject, just use the prefix
	IF NVL(TRIM(v_ALERT_EMAIL_SUBJECT), '?') = '?' THEN
		v_SUBJECT := v_PREFIX || ' Alert Acknowledged.';
	ELSE
		v_SUBJECT := v_PREFIX || ': ' || TRIM(v_ALERT_EMAIL_SUBJECT) || ' -- Acknowledged.';
	END IF;

	RETURN v_SUBJECT;

END GET_ACK_SUBJECT;
-------------------------------------------------------------------------------------
FUNCTION BUILD_SEND_LIST
	(
	p_OCCURRENCE_ID IN NUMBER,
	p_REC_TYPE      IN VARCHAR2
	) RETURN VARCHAR2 IS

	v_RETURN VARCHAR2(2000);

	CURSOR c_EMAIL_ADDR_LIST(p_VAR1 NUMBER, p_VAR2 VARCHAR2) IS
		SELECT UNIQUE(U.EMAIL_ADDR)
		FROM APPLICATION_USER U,
			 SYSTEM_ALERT A,
			 APPLICATION_USER_ROLE R,
			 SYSTEM_ALERT_OCCURRENCE O,
			 SYSTEM_ALERT_ROLE AR
		WHERE O.OCCURRENCE_ID = p_VAR1
			  AND A.ALERT_ID = O.ALERT_ID
			  AND AR.ALERT_ID = A.ALERT_ID
			  AND TRIM(UPPER(AR.EMAIL_REC_TYPE)) = TRIM(UPPER(p_VAR2))
			  AND AR.ROLE_ID = R.ROLE_ID
			  AND U.USER_ID = R.USER_ID
			  AND TRIM(U.EMAIL_ADDR) IS NOT NULL
			  AND U.IS_SYSTEM_USER = 0
			  AND U.IS_DISABLED = 0;

	v_EMAIL_ADDR_REC c_EMAIL_ADDR_LIST%ROWTYPE;

	v_FIRST BOOLEAN := TRUE;
BEGIN
	v_RETURN := '';

	FOR v_EMAIL_ADDR_REC IN c_EMAIL_ADDR_LIST(p_OCCURRENCE_ID, p_REC_TYPE) LOOP
		IF v_FIRST = TRUE THEN
			v_FIRST := FALSE;
			v_RETURN := TRIM(v_EMAIL_ADDR_REC.EMAIL_ADDR);
		ELSE
			v_RETURN := TRIM(v_RETURN) || ', ' || TRIM(v_EMAIL_ADDR_REC.EMAIL_ADDR);
		END IF;
	END LOOP;

	RETURN TRIM(v_RETURN);
END BUILD_SEND_LIST;
-------------------------------------------------------------------------------------
FUNCTION BUILD_BODY(p_OCCURRENCE_ID IN NUMBER) RETURN VARCHAR2 IS
	v_RETURN VARCHAR2(4000);
BEGIN

	SELECT O.ALERT_MESSAGE || UTL_TCP.CRLF
		|| 'Alert Date: ' || TO_CHAR(FROM_CUT(O.ALERT_DATE, LOCAL_TIME_ZONE), 'MON DD, YYYY HH:MI') || UTL_TCP.CRLF
		|| 'Expires On: ' || TO_CHAR(FROM_CUT(O.ALERT_EXPIRY, LOCAL_TIME_ZONE), 'MON DD, YYYY HH:MI') || UTL_TCP.CRLF || UTL_TCP.CRLF || UTL_TCP.CRLF
		|| 'Alert Name: ' || A.ALERT_NAME || UTL_TCP.CRLF
		|| CASE WHEN NVL(A.ALERT_TYPE,'?') != '?' THEN 'Alert Type: ' || A.ALERT_TYPE || UTL_TCP.CRLF ELSE NULL END
		|| CASE WHEN NVL(A.ALERT_CATEGORY,'?') != '?' THEN 'Alert Category: ' || A.ALERT_CATEGORY || UTL_TCP.CRLF ELSE NULL END
		|| CASE WHEN NVL(A.ALERT_DESC,'?') != '?' THEN 'Alert Description: ' || A.ALERT_DESC || UTL_TCP.CRLF ELSE NULL END
		|| CASE WHEN NVL(LOG_REPORTS.GET_STATUS_LEVEL_STRING(O.TRIGGER_LEVEL),'?') != '?' THEN 'Trigger Level: ' || LOG_REPORTS.GET_STATUS_LEVEL_STRING(O.TRIGGER_LEVEL) || UTL_TCP.CRLF ELSE NULL END
		|| CASE WHEN NVL(O.TRIGGER_TYPE,'?') != '?' THEN 'Trigger Type: ' || O.TRIGGER_TYPE || UTL_TCP.CRLF ELSE NULL END
		|| CASE WHEN NVL(O.TRIGGER_VALUE,'?') != '?' THEN 'Trigger Value: ' || O.TRIGGER_VALUE || UTL_TCP.CRLF ELSE NULL END
		|| 'Current Process: ' || LOGS.CURRENT_PROCESS_NAME
	INTO v_RETURN
	FROM SYSTEM_ALERT_OCCURRENCE O, SYSTEM_ALERT A
	WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
		  AND A.ALERT_ID = O.ALERT_ID;

	RETURN v_RETURN;
END BUILD_BODY;
-------------------------------------------------------------------------------------
PROCEDURE SEND_EMAIL_OCCUR_NOTIFICATION(p_OCCURRENCE_ID NUMBER) AS

	v_SENDER              VARCHAR2(256);
	v_SUBJECT			  VARCHAR2(800);
	v_BODY                VARCHAR2(2000);
	v_ALERT_DESC          SYSTEM_ALERT.ALERT_DESC%TYPE;
	v_ALERT_NAME          SYSTEM_ALERT.ALERT_NAME%TYPE;
	v_TO_LIST             VARCHAR2(4000);
	v_CC_LIST             VARCHAR2(4000);
	v_BCC_LIST            VARCHAR2(4000);
	v_SEND_DATE           DATE;
	v_PRIORITY            NUMBER(1);
	v_NUM_EMAILS          NUMBER;

BEGIN

	v_SENDER := TRIM(GET_DICTIONARY_VALUE('E-mail Sender', 0, 'System', 'Alerts', '?', '?', 0));

	IF TRIM(v_SENDER) IS NULL THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SENDER);
	END IF;

	SELECT COUNT(1)
	INTO v_NUM_EMAILS
	FROM SYSTEM_ALERT_ROLE R,
		 SYSTEM_ALERT A,
		 SYSTEM_ALERT_OCCURRENCE O,
		 APPLICATION_USER U,
		 APPLICATION_USER_ROLE UR
	WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
		  AND A.ALERT_ID = O.ALERT_ID
		  AND R.ALERT_ID = A.ALERT_ID
		  AND R.ROLE_ID = UR.ROLE_ID
		  AND U.USER_ID = UR.USER_ID
		  AND TRIM(U.EMAIL_ADDR) IS NOT NULL
		  AND U.IS_SYSTEM_USER = 0
		  AND U.IS_DISABLED = 0;

	IF v_NUM_EMAILS > 0 THEN

		SELECT A.ALERT_DESC, A.ALERT_NAME, O.ALERT_DATE, O.PRIORITY
		INTO v_ALERT_DESC, v_ALERT_NAME, v_SEND_DATE, v_PRIORITY
		FROM SYSTEM_ALERT A, SYSTEM_ALERT_OCCURRENCE O
		WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
			  AND O.ALERT_ID = A.ALERT_ID;

		v_SUBJECT := GET_OCCUR_SUBJECT(p_OCCURRENCE_ID);
		v_BODY := BUILD_BODY(p_OCCURRENCE_ID);

		v_TO_LIST := BUILD_SEND_LIST(p_OCCURRENCE_ID, 'TO');
		v_CC_LIST := BUILD_SEND_LIST(p_OCCURRENCE_ID, 'CC');
		v_BCC_LIST := BUILD_SEND_LIST(p_OCCURRENCE_ID, 'BCC');

		IF v_TO_LIST IS NULL AND v_CC_LIST IS NULL AND v_BCC_LIST IS NULL THEN
			ERRS.RAISE(MSGCODES.c_ERR_NO_RECIPIENTS);
		END IF;

		ML.MAIL('System Alert',
				v_SENDER,
				v_SUBJECT,
				v_BODY,
				v_TO_LIST,
				v_CC_LIST,
				v_BCC_LIST,
				NVL(v_SEND_DATE, SYSDATE),
				v_PRIORITY);

	END IF;

END SEND_EMAIL_OCCUR_NOTIFICATION;
-------------------------------------------------------------------------------------
PROCEDURE PUT_ALERT_OCCURRENCE_INTERNAL
	(
	o_OID             OUT NUMBER,
	p_OCCURRENCE_ID   IN NUMBER,
	p_ALERT_ID        IN NUMBER,
	p_ALERT_MESSAGE   IN VARCHAR2,
	p_TRIGGER_LEVEL   IN NUMBER := NULL,
	p_TRIGGER_TYPE    IN VARCHAR2 := NULL,
	p_TRIGGER_VALUE   IN VARCHAR2 := NULL,
	p_ALERT_DATE      IN DATE := NULL,
	p_EXPIRATION_DATE IN DATE := NULL,
	p_PRIORITY        IN NUMBER := NULL
	) AS

	v_IS_EMAIL        NUMBER;
	v_PRIORITY        NUMBER := p_PRIORITY;
	v_EXPIRATION_DATE DATE := p_EXPIRATION_DATE;
	v_DURATION        NUMBER;
	v_DATE            DATE := NVL(p_ALERT_DATE, SYSDATE_AS_CUT);
	v_TRIGGER_VALUE   SYSTEM_ALERT_TRIGGER.TRIGGER_VALUE%TYPE := p_TRIGGER_VALUE;

	v_USERS NUMBER_COLLECTION;
BEGIN

	IF p_OCCURRENCE_ID > 0 THEN
		-- UPDATE
		UPDATE SYSTEM_ALERT_OCCURRENCE
		SET PRIORITY     = NVL(v_PRIORITY, PRIORITY),
			ALERT_EXPIRY = NVL(v_EXPIRATION_DATE, ALERT_EXPIRY)
		WHERE OCCURRENCE_ID = p_OCCURRENCE_ID;

	ELSE
		SELECT COALESCE(v_PRIORITY, ALERT_EMAIL_PRIORITY, ML.c_PRIORITY_NORMAL), ALERT_DURATION, IS_EMAIL_ALERT
		INTO v_PRIORITY, v_DURATION, v_IS_EMAIL
		FROM SYSTEM_ALERT
		WHERE ALERT_ID = p_ALERT_ID;

		-- determine expiration date
		IF v_EXPIRATION_DATE IS NULL THEN
			IF v_EXPIRATION_DATE IS NULL THEN
				IF NVL(v_DURATION, 0) <= 0 THEN
					v_DURATION := TO_NUMBER(GET_DICTIONARY_VALUE('Default Duration', 0, 'System', 'Alerts'));
				END IF;
				v_EXPIRATION_DATE := v_DATE + NVL(v_DURATION, 7);
			END IF;
		END IF;

		IF v_TRIGGER_VALUE IS NULL THEN
			v_TRIGGER_VALUE := '(Manually entered by ' || SECURITY_CONTROLS.CURRENT_USER || ')';
		END IF;

		SELECT OID.NEXTVAL INTO O_OID FROM DUAL;

		INSERT INTO SYSTEM_ALERT_OCCURRENCE
			(OCCURRENCE_ID,
			 ALERT_ID,
			 ALERT_DATE,
			 ALERT_EXPIRY,
			 ALERT_MESSAGE,
			 PRIORITY,
			 TRIGGER_TYPE,
			 TRIGGER_LEVEL,
			 TRIGGER_VALUE,
			 PROCESS_ID)
		VALUES
			(O_OID,
			 p_ALERT_ID,
			 v_DATE,
			 v_EXPIRATION_DATE,
			 p_ALERT_MESSAGE,
			 v_PRIORITY,
			 NVL(p_TRIGGER_TYPE, c_TYPE_MANUAL),
			 NVL(p_TRIGGER_LEVEL, LOGS.c_LEVEL_NOTICE),
			 v_TRIGGER_VALUE,
			 LOGS.CURRENT_PROCESS_ID
			 );

		SELECT DISTINCT AUR.USER_ID
		BULK COLLECT INTO v_USERS
		FROM SYSTEM_ALERT_OCCURRENCE O,
			SYSTEM_ALERT_ROLE R,
			APPLICATION_USER_ROLE AUR,
			APPLICATION_USER AU
		WHERE O.OCCURRENCE_ID = o_OID
			AND R.ALERT_ID = O.ALERT_ID
			AND AUR.ROLE_ID = R.ROLE_ID
			AND AU.USER_ID = AUR.USER_ID
			AND AU.IS_SYSTEM_USER = 0;

		-- IF THE ALERT IS MANUALLY TRIGGERED (I.E. FROM THE ALERTS ADMIN SCREEN) THEN
		-- THE FROM USER IS THE CURRENT USER, ALL OTHER TRIGGER TYPES COME FROM THE SYSTEM USER
		IF NVL(p_TRIGGER_TYPE, c_TYPE_MANUAL) = c_TYPE_MANUAL THEN
			MESSAGES.SEND_MESSAGE_RECPIENT_COLL(GET_OCCUR_SUBJECT(o_OID), BUILD_BODY(o_OID), v_USERS, o_OID,
												p_AUTONOMOUS_TRANSACTION => FALSE);
		ELSE
			MESSAGES.SEND_SYSTEM_MESSAGE_RECP_COLL(GET_OCCUR_SUBJECT(o_OID), BUILD_BODY(o_OID),
				v_USERS, o_OID, p_AUTONOMOUS_TRANSACTION => FALSE);
		END IF;

		IF v_IS_EMAIL = 1 THEN
			SEND_EMAIL_OCCUR_NOTIFICATION(o_OID);
		END IF;

	END IF;

END PUT_ALERT_OCCURRENCE_INTERNAL;
-------------------------------------------------------------------------------------
PROCEDURE PUT_ALERT_OCCURRENCE
	(
	o_OID             OUT NUMBER,
	p_OCCURRENCE_ID   IN NUMBER,
	p_ALERT_ID        IN NUMBER,
	p_ALERT_MESSAGE   IN VARCHAR2,
	p_TRIGGER_LEVEL   IN NUMBER := NULL,
	p_TRIGGER_TYPE    IN VARCHAR2 := NULL,
	p_TRIGGER_VALUE   IN VARCHAR2 := NULL,
	p_ALERT_DATE      IN DATE := NULL,
	p_EXPIRATION_DATE IN DATE := NULL,
	p_PRIORITY        IN NUMBER := NULL
	) AS
BEGIN
	SAVEPOINT BEFORE_PUT;

	PUT_ALERT_OCCURRENCE_INTERNAL(
		o_OID,
		p_OCCURRENCE_ID,
		p_ALERT_ID,
		p_ALERT_MESSAGE,
		p_TRIGGER_LEVEL,
		p_TRIGGER_TYPE,
		p_TRIGGER_VALUE,
		p_ALERT_DATE,
		p_EXPIRATION_DATE,
		p_PRIORITY
		);

EXCEPTION
	WHEN OTHERS THEN
		ERRS.LOG_AND_RAISE(p_SAVEPOINT_NAME => 'BEFORE_PUT');

END PUT_ALERT_OCCURRENCE;
-------------------------------------------------------------------------------------
FUNCTION BUILD_ACK_BODY
	(
	p_OCCURRENCE_ID IN NUMBER,
	p_USER_ID       IN NUMBER
	) RETURN VARCHAR2 IS
	v_RETURN    VARCHAR2(4000);
	v_USER_NAME VARCHAR2(256);
BEGIN
	SELECT USER_NAME INTO v_USER_NAME FROM APPLICATION_USER WHERE USER_ID = p_USER_ID;

	SELECT A.ALERT_NAME || ' has been acknowledged by ' || v_USER_NAME
		|| ' on ' || TO_CHAR(FROM_CUT(K.ACKNOWLEDGE_DATE, LOCAL_TIME_ZONE), 'MON-DD-YYYY HH24:MI') || UTL_TCP.CRLF || UTL_TCP.CRLF || UTL_TCP.CRLF
		|| 'Alert Name: ' || A.ALERT_NAME || UTL_TCP.CRLF
		|| 'Alert Type: ' || A.ALERT_TYPE || UTL_TCP.CRLF
		|| 'Alert Category: ' || A.ALERT_CATEGORY || UTL_TCP.CRLF
		|| CASE WHEN A.ALERT_DESC IS NOT NULL THEN 'Alert Description: ' || A.ALERT_DESC || UTL_TCP.CRLF ELSE NULL END
	INTO v_RETURN
	FROM SYSTEM_ALERT A, SYSTEM_ALERT_OCCURRENCE O, SYSTEM_ALERT_ACKNOWLEDGEMENT K
	WHERE A.ALERT_ID = O.ALERT_ID
		  AND O.OCCURRENCE_ID = p_OCCURRENCE_ID
		  AND K.OCCURRENCE_ID = O.OCCURRENCE_ID
		  AND K.USER_ID = p_USER_ID;

	RETURN v_RETURN;
END BUILD_ACK_BODY;
-------------------------------------------------------------------------------------
PROCEDURE SEND_FIRST_ACK_EMAIL
	(
	p_OCCURRENCE_ID NUMBER,
	p_USER_ID       NUMBER
	) AS

	v_SENDER     VARCHAR2(256);
	v_BODY       VARCHAR2(2000);
	v_SUBJECT    VARCHAR2(800);
	v_ALERT_DESC SYSTEM_ALERT.ALERT_DESC%TYPE;
	v_ALERT_NAME SYSTEM_ALERT.ALERT_NAME%TYPE;
	v_TO_LIST    VARCHAR2(4000);
	v_CC_LIST    VARCHAR2(4000);
	v_BCC_LIST   VARCHAR2(4000);
	v_SEND_DATE  DATE;
	v_PRIORITY   NUMBER(1);
	v_NUM_EMAILS NUMBER;

BEGIN

	v_SENDER := TRIM(GET_DICTIONARY_VALUE('E-mail Sender', 0, 'System', 'Alerts', '?', '?', 0));

	IF TRIM(v_SENDER) IS NULL THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SENDER);
	END IF;

	SELECT COUNT(1)
	INTO v_NUM_EMAILS
	FROM SYSTEM_ALERT_ROLE R,
		 SYSTEM_ALERT A,
		 SYSTEM_ALERT_OCCURRENCE O,
		 APPLICATION_USER U,
		 APPLICATION_USER_ROLE UR
	WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
		  AND A.ALERT_ID = O.ALERT_ID
		  AND R.ALERT_ID = A.ALERT_ID
		  AND R.ROLE_ID = UR.ROLE_ID
		  AND U.USER_ID = UR.USER_ID
		  AND TRIM(U.EMAIL_ADDR) IS NOT NULL;

	IF v_NUM_EMAILS > 0 THEN

		SELECT A.ALERT_DESC, A.ALERT_NAME, O.ALERT_DATE, A.ACK_EMAIL_PRIORITY
		INTO v_ALERT_DESC, v_ALERT_NAME, v_SEND_DATE, v_PRIORITY
		FROM SYSTEM_ALERT A, SYSTEM_ALERT_OCCURRENCE O
		WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
			  AND O.ALERT_ID = A.ALERT_ID;

		v_SUBJECT := GET_ACK_SUBJECT(p_OCCURRENCE_ID);

		v_BODY := BUILD_ACK_BODY(p_OCCURRENCE_ID, p_USER_ID);

		v_TO_LIST := BUILD_SEND_LIST(p_OCCURRENCE_ID, 'TO');
		v_CC_LIST := BUILD_SEND_LIST(p_OCCURRENCE_ID, 'CC');
		v_BCC_LIST := BUILD_SEND_LIST(p_OCCURRENCE_ID, 'BCC');

		ML.MAIL('System Alert',
				v_SENDER,
				v_SUBJECT,
				v_BODY,
				v_TO_LIST,
				v_CC_LIST,
				v_BCC_LIST,
				NVL(v_SEND_DATE, SYSDATE),
				v_PRIORITY);

	END IF;

END SEND_FIRST_ACK_EMAIL;
-------------------------------------------------------------------------------------
PROCEDURE PUT_ALERT_ACKNOWLEDGED(p_OCCURRENCE_ID IN NUMBER) AS
	v_NUM_ACKS           NUMBER;
	v_IS_EMAIL_FIRST_ACK NUMBER;
	v_USER_ID            NUMBER;
	v_TIME_ZONE          VARCHAR2(10);
	v_COUNT				 NUMBER;

	v_USERS NUMBER_COLLECTION;
BEGIN
	v_NUM_ACKS := -1;

	SELECT A.IS_EMAIL_FIRST_ACK
	INTO v_IS_EMAIL_FIRST_ACK
	FROM SYSTEM_ALERT_OCCURRENCE O, SYSTEM_ALERT A
	WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
		  AND A.ALERT_ID = O.ALERT_ID;

	v_USER_ID := SECURITY_CONTROLS.CURRENT_USER_ID;
	v_COUNT := 0;

	SP.GET_TIME_ZONE(v_TIME_ZONE);

	SELECT COUNT(1) INTO v_COUNT
	FROM SYSTEM_ALERT_OCCURRENCE O,
		 SYSTEM_ALERT_ROLE A,
		 APPLICATION_USER_ROLE R
	WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
		AND O.ALERT_ID = A.ALERT_ID
		AND A.ROLE_ID = R.ROLE_ID
		AND R.USER_ID = v_USER_ID;

	IF v_COUNT = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_CANNOT_ACK_ALERT);
	END IF;

	LOCK TABLE SYSTEM_ALERT_ACKNOWLEDGEMENT IN EXCLUSIVE MODE;

	SELECT COUNT(A.USER_ID)
	INTO v_NUM_ACKS
	FROM SYSTEM_ALERT_ACKNOWLEDGEMENT A
	WHERE A.OCCURRENCE_ID = p_OCCURRENCE_ID;

	UPDATE SYSTEM_ALERT_ACKNOWLEDGEMENT
	SET ACKNOWLEDGE_DATE = NVL(ACKNOWLEDGE_DATE, SYSDATE_AS_CUT)
	WHERE OCCURRENCE_ID = p_OCCURRENCE_ID
		  AND USER_ID = v_USER_ID;

	IF SQL%NOTFOUND THEN
		INSERT INTO SYSTEM_ALERT_ACKNOWLEDGEMENT
			(OCCURRENCE_ID, USER_ID, ACKNOWLEDGE_DATE)
		VALUES
			(p_OCCURRENCE_ID, v_USER_ID, SYSDATE_AS_CUT);
	END IF;

	COMMIT;

	IF v_NUM_ACKS = 0 THEN

		SELECT DISTINCT AUR.USER_ID
		BULK COLLECT INTO v_USERS
		FROM SYSTEM_ALERT_OCCURRENCE O,
			SYSTEM_ALERT_ROLE R,
			APPLICATION_USER_ROLE AUR
		WHERE O.OCCURRENCE_ID = p_OCCURRENCE_ID
			AND R.ALERT_ID = O.ALERT_ID
			AND AUR.ROLE_ID = R.ROLE_ID;

		MESSAGES.SEND_MESSAGE_RECPIENT_COLL(GET_ACK_SUBJECT(p_OCCURRENCE_ID),
			BUILD_ACK_BODY(p_OCCURRENCE_ID, v_USER_ID),
			v_USERS, p_OCCURRENCE_ID);

		IF v_IS_EMAIL_FIRST_ACK = 1 AND v_NUM_ACKS = 0 THEN
			ALERTS.SEND_FIRST_ACK_EMAIL(p_OCCURRENCE_ID, v_USER_ID);
		END IF;
	END IF;



END PUT_ALERT_ACKNOWLEDGED;
-------------------------------------------------------------------------------------
-- Find all alerts that match the specified trigger type, trigger value, trigger level,
-- and current process name
PROCEDURE TRIGGER_ALERTS
	(
	p_TRIGGER_VALUE IN VARCHAR2,
	p_TRIGGER_LEVEL IN PLS_INTEGER,
	p_ALERT_MESSAGE IN VARCHAR2,
	p_TRIGGER_TYPE  IN VARCHAR2 := c_TYPE_OTHER,
	p_ALERT_DATE    IN DATE := NULL
	) AS

	PRAGMA AUTONOMOUS_TRANSACTION;

	v_PROC_NAME PROCESS_LOG.PROCESS_NAME%TYPE := LOGS.CURRENT_PROCESS_NAME;
	v_OCCURRENCE_ID NUMBER;
	v_TRIGGER_LEVEL NUMBER;
	CURSOR c_ALERTS IS
		SELECT T.ALERT_ID, S.ALERT_NAME
		FROM SYSTEM_ALERT_TRIGGER T, SYSTEM_ALERT S
		-- match trigger type
		WHERE T.TRIGGER_TYPE = p_TRIGGER_TYPE
			-- match trigger level
			AND p_TRIGGER_LEVEL >= T.TRIGGER_LEVEL
			-- requires exact match of trigger level?
			AND ( T.EXACT_LEVEL = 0 OR T.TRIGGER_LEVEL = p_TRIGGER_LEVEL OR p_TRIGGER_LEVEL < LOGS.c_LEVEL_NOTICE)
				 -- match process name
			AND ( ( T.NAME_IS_REG_EXP = 1
					AND REGEXP_LIKE(v_PROC_NAME, T.PROCESS_NAME) )
				 OR
				  ( T.NAME_IS_REG_EXP = 0
					AND v_PROC_NAME LIKE T.PROCESS_NAME ) )
				 -- match trigger value
			AND ( ( T.VALUE_IS_REG_EXP = 1
					AND REGEXP_LIKE(p_TRIGGER_VALUE, T.TRIGGER_VALUE) )
				 OR
				  ( T.VALUE_IS_REG_EXP = 0
					AND p_TRIGGER_VALUE LIKE T.TRIGGER_VALUE ) )
			-- join in alert entry to retrieve its name
			AND S.ALERT_ID = T.ALERT_ID;
BEGIN

	IF p_TRIGGER_LEVEL < LOGS.c_LEVEL_NOTICE THEN
		v_TRIGGER_LEVEL := LOGS.c_LEVEL_SUCCESS;
	ELSE
		v_TRIGGER_LEVEL := p_TRIGGER_LEVEL;
	END IF;
	-- Raise all matching alerts, if any
	FOR v_ALERT IN c_ALERTS LOOP
		BEGIN
			PUT_ALERT_OCCURRENCE_INTERNAL(
								 v_OCCURRENCE_ID,
								 0,
								 v_ALERT.ALERT_ID,
								 p_ALERT_MESSAGE,
								 v_TRIGGER_LEVEL,
								 p_TRIGGER_TYPE,
								 p_TRIGGER_VALUE,
								 p_ALERT_DATE
								 );
			COMMIT; -- commit this one
		EXCEPTION
			WHEN OTHERS THEN
				LOGS.LOG_ERROR('Failed to raise System Alert "'||v_ALERT.ALERT_NAME||'"',
								p_MESSAGE_CODE => ERRS.GET_MESSAGE_CODE(SQLERRM),
								p_SQLERRM => UT.GET_FULL_ERRM);
				ROLLBACK; -- don't leave partial alert
		END;
	END LOOP;

	COMMIT; -- make sure we don't leave the autonomous transaction open

END TRIGGER_ALERTS;
-------------------------------------------------------------------------------------
END ALERTS;
/
