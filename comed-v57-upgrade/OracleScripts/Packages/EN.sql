CREATE OR REPLACE PACKAGE EN AS
-- Revision: $Revision: 1.52 $

-- Entity Enumeration package
--   (replaces the *_DOMAIN and *_ENTITY views)

-- NOTE: This package is AUTO-GENERATED

FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE ACCOUNT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ACCOUNT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ACCOUNT_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ACCOUNT_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ANCILLARY_SERVICE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ANCILLARY_SERVICE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE AREA_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE AREA_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BILL_CYCLE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BILL_CYCLE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BILL_PARTY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BILL_PARTY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BREAKPOINT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CA_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CA_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CALC_PROCESS_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CALC_PROCESS_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CALENDAR_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CALENDAR_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CASE_LABEL_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CASE_LABEL_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CATEGORY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CATEGORY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE COMPONENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE COMPONENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONDITIONAL_FORMAT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONDITIONAL_FORMAT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONTACT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONTACT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONTRACT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONTRACT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONTRACT_LIMIT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONTRACT_LIMIT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CUSTOMER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CUSTOMER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DATA_LOCK_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DATA_LOCK_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DER_TYPE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DER_TYPE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DR_EVENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DR_EVENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE EDC_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE EDC_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ENTITY_DOMAIN_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ENTITY_DOMAIN_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ENTITY_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ENTITY_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ESP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ESP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ETAG_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ETAG_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE EXTERNAL_SYSTEM_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE EXTERNAL_SYSTEM_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE EXTERNAL_TRANSACTION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE EXTERNAL_TRANSACTION_LIST_FILT
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GEOGRAPHY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GEOGRAPHY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GROWTH_PATTERN_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GROWTH_PATTERN_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE HEAT_RATE_CURVE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE HEAT_RATE_CURVE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE HOLIDAY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE HOLIDAY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE HOLIDAY_SET_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE HOLIDAY_SET_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE INTERCHANGE_CONTRACT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE INTERCHANGE_CONTRACT_LIST_FILT
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE INVOICE_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE INVOICE_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE IT_COMMODITY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE IT_COMMODITY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE JOB_THREAD_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE JOB_THREAD_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOAD_PROFILE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOAD_PROFILE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOAD_PROFILE_LIBRARY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOAD_PROFILE_LIBRARY_LIST_FILT
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOAD_PROFILE_SET_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOSS_FACTOR_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOSS_FACTOR_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE MARKET_PRICE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE MARKET_PRICE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE MEASUREMENT_SOURCE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE MEASUREMENT_SOURCE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE METER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE METER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE MRSP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE MRSP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE OASIS_NODE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE OASIS_NODE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PATH_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PATH_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PERIOD_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PERIOD_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PIPELINE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PIPELINE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE POOL_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE POOL_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PORTFOLIO_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PORTFOLIO_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE POSITION_EVALUATION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PRODUCT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PRODUCT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PROGRAM_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PROGRAM_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PROSPECT_SCREEN_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PROXY_DAY_METHOD_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PROXY_DAY_METHOD_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PSE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PSE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE QUOTE_REQUEST_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE QUOTE_REQUEST_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE REACTOR_PROCEDURE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE REACTOR_PROCEDURE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE RESOURCE_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE RESOURCE_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ROLLUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SC_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SC_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SCENARIO_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SCENARIO_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SCHEDULE_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SCHEDULE_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SEASON_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SEASON_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SEGMENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SEGMENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_AREA_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_AREA_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_LOCATION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_LOCATION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_POINT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_POINT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_REGION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_REGION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_TYPE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_TYPE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_ZONE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_ZONE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SETTLEMENT_TYPE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SETTLEMENT_TYPE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE STATEMENT_TYPE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE STATEMENT_TYPE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUB_STATION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUB_STATION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUB_STATION_METER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUB_STATION_METER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUB_STATION_METER_POINT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUB_STATION_METER_POINT_LIST_F
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUPPLY_RESOURCE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUPPLY_RESOURCE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_ACTION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_ACTION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_ALERT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_ALERT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_EVENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_EVENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_LOAD_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_LOAD_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_REALM_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_REALM_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_TABLE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_TABLE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TEMPLATE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TEMPLATE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TRANSACTION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TRANSACTION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TRANSACTION_TRAIT_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TRANSACTION_TRAIT_GROUP_LIST_F
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TX_FEEDER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TX_FEEDER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TX_FEEDER_SEGMENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TX_FEEDER_SEGMENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE USAGE_WRF_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE VPP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE VPP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE WEATHER_PARAMETER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE WEATHER_PARAMETER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE WEATHER_STATION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE WEATHER_STATION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

g_DEFAULT_ACTION_NAME CONSTANT VARCHAR2(32) := 'Select Entity';

END EN;
/

CREATE OR REPLACE PACKAGE BODY EN AS
---------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.52 $';
END WHAT_VERSION;
---------------------------------------------------------------------
PROCEDURE ACCOUNT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.ACCOUNT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ACCOUNT_LIST;
---------------------------------------------------------------------
PROCEDURE ACCOUNT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_ACCOUNT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_ACCOUNT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT ACCOUNT_NAME "ENTITY_NAME",
				ACCOUNT_ID "ENTITY_ID",
				ACCOUNT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ACCOUNT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ACCOUNT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ACCOUNT_NAME, ACCOUNT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT ACCOUNT_NAME "ENTITY_NAME",
				ACCOUNT_ID "ENTITY_ID",
				ACCOUNT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ACCOUNT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ACCOUNT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR ACCOUNT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR ACCOUNT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ACCOUNT_NAME, ACCOUNT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ACCOUNT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE ACCOUNT_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.ACCOUNT_GROUP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ACCOUNT_GROUP_LIST;
---------------------------------------------------------------------
PROCEDURE ACCOUNT_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_ACCOUNT_GROUP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_ACCOUNT_GROUP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT ACCOUNT_GROUP_NAME "ENTITY_NAME",
				ACCOUNT_GROUP_ID "ENTITY_ID",
				ACCOUNT_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ACCOUNT_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ACCOUNT_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ACCOUNT_GROUP_NAME, ACCOUNT_GROUP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT ACCOUNT_GROUP_NAME "ENTITY_NAME",
				ACCOUNT_GROUP_ID "ENTITY_ID",
				ACCOUNT_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ACCOUNT_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ACCOUNT_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR ACCOUNT_GROUP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR ACCOUNT_GROUP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ACCOUNT_GROUP_NAME, ACCOUNT_GROUP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ACCOUNT_GROUP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE ANCILLARY_SERVICE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.ANCILLARY_SERVICE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ANCILLARY_SERVICE_LIST;
---------------------------------------------------------------------
PROCEDURE ANCILLARY_SERVICE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_ANCILLARY_SERVICE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_ANCILLARY_SERVICE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT ANCILLARY_SERVICE_NAME "ENTITY_NAME",
				ANCILLARY_SERVICE_ID "ENTITY_ID",
				ANCILLARY_SERVICE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ANCILLARY_SERVICE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ANCILLARY_SERVICE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ANCILLARY_SERVICE_NAME, ANCILLARY_SERVICE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT ANCILLARY_SERVICE_NAME "ENTITY_NAME",
				ANCILLARY_SERVICE_ID "ENTITY_ID",
				ANCILLARY_SERVICE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ANCILLARY_SERVICE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ANCILLARY_SERVICE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR ANCILLARY_SERVICE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR ANCILLARY_SERVICE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ANCILLARY_SERVICE_NAME, ANCILLARY_SERVICE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ANCILLARY_SERVICE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE AREA_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.AREA(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END AREA_LIST;
---------------------------------------------------------------------
PROCEDURE AREA_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_AREA);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_AREA);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT AREA_NAME "ENTITY_NAME",
				AREA_ID "ENTITY_ID",
				AREA_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM AREA A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.AREA_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, AREA_NAME, AREA_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT AREA_NAME "ENTITY_NAME",
				AREA_ID "ENTITY_ID",
				AREA_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM AREA A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.AREA_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR AREA_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR AREA_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, AREA_NAME, AREA_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END AREA_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE BILL_CYCLE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.BILL_CYCLE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END BILL_CYCLE_LIST;
---------------------------------------------------------------------
PROCEDURE BILL_CYCLE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_BILL_CYCLE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_BILL_CYCLE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT BILL_CYCLE_NAME "ENTITY_NAME",
				BILL_CYCLE_ID "ENTITY_ID",
				BILL_CYCLE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM BILL_CYCLE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.BILL_CYCLE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, BILL_CYCLE_NAME, BILL_CYCLE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT BILL_CYCLE_NAME "ENTITY_NAME",
				BILL_CYCLE_ID "ENTITY_ID",
				BILL_CYCLE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM BILL_CYCLE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.BILL_CYCLE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR BILL_CYCLE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR BILL_CYCLE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, BILL_CYCLE_NAME, BILL_CYCLE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END BILL_CYCLE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE BILL_PARTY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.BILL_PARTY(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END BILL_PARTY_LIST;
---------------------------------------------------------------------
PROCEDURE BILL_PARTY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_BILL_PARTY);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_BILL_PARTY);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT BILL_PARTY_NAME "ENTITY_NAME",
				BILL_PARTY_ID "ENTITY_ID",
				BILL_PARTY_ALIAS "ENTITY_ALIAS",
				BILL_PARTY_STATUS "ENTITY_STATUS"
			FROM BILL_PARTY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.BILL_PARTY_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(BILL_PARTY_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, BILL_PARTY_NAME, BILL_PARTY_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT BILL_PARTY_NAME "ENTITY_NAME",
				BILL_PARTY_ID "ENTITY_ID",
				BILL_PARTY_ALIAS "ENTITY_ALIAS",
				BILL_PARTY_STATUS "ENTITY_STATUS"
			FROM BILL_PARTY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.BILL_PARTY_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(BILL_PARTY_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR BILL_PARTY_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR BILL_PARTY_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, BILL_PARTY_NAME, BILL_PARTY_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END BILL_PARTY_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE BREAKPOINT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.BREAKPOINT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END BREAKPOINT_LIST;
---------------------------------------------------------------------
PROCEDURE CA_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CA(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CA_LIST;
---------------------------------------------------------------------
PROCEDURE CA_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CA);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CA);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CA_NAME "ENTITY_NAME",
				CA_ID "ENTITY_ID",
				CA_ALIAS "ENTITY_ALIAS",
				CA_STATUS "ENTITY_STATUS"
			FROM CONTROL_AREA A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CA_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CA_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CA_NAME, CA_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CA_NAME "ENTITY_NAME",
				CA_ID "ENTITY_ID",
				CA_ALIAS "ENTITY_ALIAS",
				CA_STATUS "ENTITY_STATUS"
			FROM CONTROL_AREA A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CA_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CA_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR CA_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CA_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CA_NAME, CA_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CA_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE CALC_PROCESS_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CALC_PROCESS(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CALC_PROCESS_LIST;
---------------------------------------------------------------------
PROCEDURE CALC_PROCESS_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CALC_PROCESS);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CALC_PROCESS);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CALC_PROCESS_NAME "ENTITY_NAME",
				CALC_PROCESS_ID "ENTITY_ID",
				CALC_PROCESS_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CALCULATION_PROCESS A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CALC_PROCESS_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CALC_PROCESS_NAME, CALC_PROCESS_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CALC_PROCESS_NAME "ENTITY_NAME",
				CALC_PROCESS_ID "ENTITY_ID",
				CALC_PROCESS_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CALCULATION_PROCESS A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CALC_PROCESS_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR CALC_PROCESS_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CALC_PROCESS_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CALC_PROCESS_NAME, CALC_PROCESS_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CALC_PROCESS_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE CALENDAR_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CALENDAR(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CALENDAR_LIST;
---------------------------------------------------------------------
PROCEDURE CALENDAR_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CALENDAR);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CALENDAR);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CALENDAR_NAME "ENTITY_NAME",
				CALENDAR_ID "ENTITY_ID",
				CALENDAR_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CALENDAR A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CALENDAR_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CALENDAR_NAME, CALENDAR_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CALENDAR_NAME "ENTITY_NAME",
				CALENDAR_ID "ENTITY_ID",
				CALENDAR_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CALENDAR A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CALENDAR_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR CALENDAR_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CALENDAR_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CALENDAR_NAME, CALENDAR_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CALENDAR_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE CASE_LABEL_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CASE_LABEL(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CASE_LABEL_LIST;
---------------------------------------------------------------------
PROCEDURE CASE_LABEL_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CASE_LABEL);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CASE_LABEL);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CASE_NAME "ENTITY_NAME",
				CASE_ID "ENTITY_ID",
				CASE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CASE_LABEL A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CASE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CASE_NAME, CASE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CASE_NAME "ENTITY_NAME",
				CASE_ID "ENTITY_ID",
				CASE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CASE_LABEL A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CASE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR CASE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CASE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CASE_NAME, CASE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CASE_LABEL_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE CATEGORY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CATEGORY(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CATEGORY_LIST;
---------------------------------------------------------------------
PROCEDURE CATEGORY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CATEGORY);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CATEGORY);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CATEGORY_NAME "ENTITY_NAME",
				CATEGORY_ID "ENTITY_ID",
				CATEGORY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CATEGORY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CATEGORY_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CATEGORY_NAME, CATEGORY_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CATEGORY_NAME "ENTITY_NAME",
				CATEGORY_ID "ENTITY_ID",
				CATEGORY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CATEGORY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CATEGORY_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR CATEGORY_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CATEGORY_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CATEGORY_NAME, CATEGORY_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CATEGORY_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE COMPONENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.COMPONENT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END COMPONENT_LIST;
---------------------------------------------------------------------
PROCEDURE COMPONENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_COMPONENT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_COMPONENT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT COMPONENT_NAME "ENTITY_NAME",
				COMPONENT_ID "ENTITY_ID",
				COMPONENT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM COMPONENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.COMPONENT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, COMPONENT_NAME, COMPONENT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT COMPONENT_NAME "ENTITY_NAME",
				COMPONENT_ID "ENTITY_ID",
				COMPONENT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM COMPONENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.COMPONENT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR COMPONENT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR COMPONENT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, COMPONENT_NAME, COMPONENT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END COMPONENT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE CONDITIONAL_FORMAT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CONDITIONAL_FORMAT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONDITIONAL_FORMAT_LIST;
---------------------------------------------------------------------
PROCEDURE CONDITIONAL_FORMAT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CONDITIONAL_FORMAT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CONDITIONAL_FORMAT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CONDITIONAL_FORMAT_NAME "ENTITY_NAME",
				CONDITIONAL_FORMAT_ID "ENTITY_ID",
				CONDITIONAL_FORMAT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CONDITIONAL_FORMAT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CONDITIONAL_FORMAT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CONDITIONAL_FORMAT_NAME, CONDITIONAL_FORMAT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CONDITIONAL_FORMAT_NAME "ENTITY_NAME",
				CONDITIONAL_FORMAT_ID "ENTITY_ID",
				CONDITIONAL_FORMAT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CONDITIONAL_FORMAT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CONDITIONAL_FORMAT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR CONDITIONAL_FORMAT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CONDITIONAL_FORMAT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CONDITIONAL_FORMAT_NAME, CONDITIONAL_FORMAT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONDITIONAL_FORMAT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE CONTACT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CONTACT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONTACT_LIST;
---------------------------------------------------------------------
PROCEDURE CONTACT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CONTACT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CONTACT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CONTACT_NAME "ENTITY_NAME",
				CONTACT_ID "ENTITY_ID",
				CONTACT_ALIAS "ENTITY_ALIAS",
				CONTACT_STATUS "ENTITY_STATUS"
			FROM CONTACT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CONTACT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CONTACT_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CONTACT_NAME, CONTACT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CONTACT_NAME "ENTITY_NAME",
				CONTACT_ID "ENTITY_ID",
				CONTACT_ALIAS "ENTITY_ALIAS",
				CONTACT_STATUS "ENTITY_STATUS"
			FROM CONTACT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CONTACT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CONTACT_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR CONTACT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CONTACT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CONTACT_NAME, CONTACT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONTACT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE CONTRACT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CONTRACT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONTRACT_LIST;
---------------------------------------------------------------------
PROCEDURE CONTRACT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CONTRACT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CONTRACT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CONTRACT_NAME "ENTITY_NAME",
				CONTRACT_ID "ENTITY_ID",
				CONTRACT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_CONTRACT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CONTRACT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CONTRACT_NAME, CONTRACT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CONTRACT_NAME "ENTITY_NAME",
				CONTRACT_ID "ENTITY_ID",
				CONTRACT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_CONTRACT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CONTRACT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR CONTRACT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CONTRACT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CONTRACT_NAME, CONTRACT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONTRACT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE CONTRACT_LIMIT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CONTRACT_LIMIT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONTRACT_LIMIT_LIST;
---------------------------------------------------------------------
PROCEDURE CONTRACT_LIMIT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CONTRACT_LIMIT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CONTRACT_LIMIT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT LIMIT_NAME "ENTITY_NAME",
				LIMIT_ID "ENTITY_ID",
				LIMIT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CONTRACT_LIMIT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.LIMIT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, LIMIT_NAME, LIMIT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT LIMIT_NAME "ENTITY_NAME",
				LIMIT_ID "ENTITY_ID",
				LIMIT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM CONTRACT_LIMIT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.LIMIT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR LIMIT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR LIMIT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, LIMIT_NAME, LIMIT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONTRACT_LIMIT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE CUSTOMER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.CUSTOMER(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CUSTOMER_LIST;
---------------------------------------------------------------------
PROCEDURE CUSTOMER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_CUSTOMER);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_CUSTOMER);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CUSTOMER_NAME "ENTITY_NAME",
				CUSTOMER_ID "ENTITY_ID",
				CUSTOMER_ALIAS "ENTITY_ALIAS",
				CUSTOMER_STATUS "ENTITY_STATUS"
			FROM CUSTOMER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CUSTOMER_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CUSTOMER_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CUSTOMER_NAME, CUSTOMER_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CUSTOMER_NAME "ENTITY_NAME",
				CUSTOMER_ID "ENTITY_ID",
				CUSTOMER_ALIAS "ENTITY_ALIAS",
				CUSTOMER_STATUS "ENTITY_STATUS"
			FROM CUSTOMER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CUSTOMER_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CUSTOMER_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR CUSTOMER_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CUSTOMER_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CUSTOMER_NAME, CUSTOMER_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CUSTOMER_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE DATA_LOCK_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.DATA_LOCK_GROUP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DATA_LOCK_GROUP_LIST;
---------------------------------------------------------------------
PROCEDURE DATA_LOCK_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_DATA_LOCK_GROUP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_DATA_LOCK_GROUP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT DATA_LOCK_GROUP_NAME "ENTITY_NAME",
				DATA_LOCK_GROUP_ID "ENTITY_ID",
				DATA_LOCK_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM DATA_LOCK_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.DATA_LOCK_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, DATA_LOCK_GROUP_NAME, DATA_LOCK_GROUP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT DATA_LOCK_GROUP_NAME "ENTITY_NAME",
				DATA_LOCK_GROUP_ID "ENTITY_ID",
				DATA_LOCK_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM DATA_LOCK_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.DATA_LOCK_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR DATA_LOCK_GROUP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR DATA_LOCK_GROUP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, DATA_LOCK_GROUP_NAME, DATA_LOCK_GROUP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DATA_LOCK_GROUP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE DER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.DER(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DER_LIST;
---------------------------------------------------------------------
PROCEDURE DER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_DER);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_DER);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT DER_NAME "ENTITY_NAME",
				DER_ID "ENTITY_ID",
				DER_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM DISTRIBUTED_ENERGY_RESOURCE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.DER_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, DER_NAME, DER_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT DER_NAME "ENTITY_NAME",
				DER_ID "ENTITY_ID",
				DER_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM DISTRIBUTED_ENERGY_RESOURCE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.DER_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR DER_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR DER_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, DER_NAME, DER_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DER_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE DER_TYPE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.DER_TYPE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DER_TYPE_LIST;
---------------------------------------------------------------------
PROCEDURE DER_TYPE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_DER_TYPE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_DER_TYPE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT DER_TYPE_NAME "ENTITY_NAME",
				DER_TYPE_ID "ENTITY_ID",
				DER_TYPE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM DER_TYPE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.DER_TYPE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, DER_TYPE_NAME, DER_TYPE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT DER_TYPE_NAME "ENTITY_NAME",
				DER_TYPE_ID "ENTITY_ID",
				DER_TYPE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM DER_TYPE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.DER_TYPE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR DER_TYPE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR DER_TYPE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, DER_TYPE_NAME, DER_TYPE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DER_TYPE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE DR_EVENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.DR_EVENT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DR_EVENT_LIST;
---------------------------------------------------------------------
PROCEDURE DR_EVENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_DR_EVENT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_DR_EVENT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT EVENT_NAME "ENTITY_NAME",
				EVENT_ID "ENTITY_ID",
				EVENT_ALIAS "ENTITY_ALIAS",
				EVENT_STATUS "ENTITY_STATUS"
			FROM DR_EVENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.EVENT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(EVENT_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, EVENT_NAME, EVENT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT EVENT_NAME "ENTITY_NAME",
				EVENT_ID "ENTITY_ID",
				EVENT_ALIAS "ENTITY_ALIAS",
				EVENT_STATUS "ENTITY_STATUS"
			FROM DR_EVENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.EVENT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(EVENT_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR EVENT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR EVENT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, EVENT_NAME, EVENT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DR_EVENT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE EDC_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.EDC(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END EDC_LIST;
---------------------------------------------------------------------
PROCEDURE EDC_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_EDC);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_EDC);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT EDC_NAME "ENTITY_NAME",
				EDC_ID "ENTITY_ID",
				EDC_ALIAS "ENTITY_ALIAS",
				EDC_STATUS "ENTITY_STATUS"
			FROM ENERGY_DISTRIBUTION_COMPANY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.EDC_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(EDC_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, EDC_NAME, EDC_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT EDC_NAME "ENTITY_NAME",
				EDC_ID "ENTITY_ID",
				EDC_ALIAS "ENTITY_ALIAS",
				EDC_STATUS "ENTITY_STATUS"
			FROM ENERGY_DISTRIBUTION_COMPANY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.EDC_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(EDC_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR EDC_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR EDC_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, EDC_NAME, EDC_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END EDC_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE ENTITY_DOMAIN_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.ENTITY_DOMAIN(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ENTITY_DOMAIN_LIST;
---------------------------------------------------------------------
PROCEDURE ENTITY_DOMAIN_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_ENTITY_DOMAIN);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_ENTITY_DOMAIN);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT ENTITY_DOMAIN_NAME "ENTITY_NAME",
				ENTITY_DOMAIN_ID "ENTITY_ID",
				ENTITY_DOMAIN_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ENTITY_DOMAIN A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ENTITY_DOMAIN_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ENTITY_DOMAIN_NAME, ENTITY_DOMAIN_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT ENTITY_DOMAIN_NAME "ENTITY_NAME",
				ENTITY_DOMAIN_ID "ENTITY_ID",
				ENTITY_DOMAIN_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ENTITY_DOMAIN A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ENTITY_DOMAIN_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR ENTITY_DOMAIN_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR ENTITY_DOMAIN_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ENTITY_DOMAIN_NAME, ENTITY_DOMAIN_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ENTITY_DOMAIN_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE ENTITY_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.ENTITY_GROUP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ENTITY_GROUP_LIST;
---------------------------------------------------------------------
PROCEDURE ENTITY_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_ENTITY_GROUP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_ENTITY_GROUP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT ENTITY_GROUP_NAME "ENTITY_NAME",
				ENTITY_GROUP_ID "ENTITY_ID",
				ENTITY_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ENTITY_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ENTITY_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ENTITY_GROUP_NAME, ENTITY_GROUP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT ENTITY_GROUP_NAME "ENTITY_NAME",
				ENTITY_GROUP_ID "ENTITY_ID",
				ENTITY_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM ENTITY_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ENTITY_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR ENTITY_GROUP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR ENTITY_GROUP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ENTITY_GROUP_NAME, ENTITY_GROUP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ENTITY_GROUP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE ESP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.ESP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ESP_LIST;
---------------------------------------------------------------------
PROCEDURE ESP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_ESP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_ESP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT ESP_NAME "ENTITY_NAME",
				ESP_ID "ENTITY_ID",
				ESP_ALIAS "ENTITY_ALIAS",
				ESP_STATUS "ENTITY_STATUS"
			FROM ENERGY_SERVICE_PROVIDER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ESP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(ESP_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ESP_NAME, ESP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT ESP_NAME "ENTITY_NAME",
				ESP_ID "ENTITY_ID",
				ESP_ALIAS "ENTITY_ALIAS",
				ESP_STATUS "ENTITY_STATUS"
			FROM ENERGY_SERVICE_PROVIDER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ESP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(ESP_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR ESP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR ESP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ESP_NAME, ESP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ESP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE ETAG_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.ETAG(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ETAG_LIST;
---------------------------------------------------------------------
PROCEDURE ETAG_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_ETAG);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_ETAG);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT ETAG_NAME "ENTITY_NAME",
				ETAG_ID "ENTITY_ID",
				ETAG_ALIAS "ENTITY_ALIAS",
				ETAG_STATUS "ENTITY_STATUS"
			FROM ETAG A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ETAG_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(ETAG_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ETAG_NAME, ETAG_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT ETAG_NAME "ENTITY_NAME",
				ETAG_ID "ENTITY_ID",
				ETAG_ALIAS "ENTITY_ALIAS",
				ETAG_STATUS "ENTITY_STATUS"
			FROM ETAG A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ETAG_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(ETAG_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR ETAG_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR ETAG_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ETAG_NAME, ETAG_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ETAG_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE EXTERNAL_SYSTEM_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.EXTERNAL_SYSTEM(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END EXTERNAL_SYSTEM_LIST;
---------------------------------------------------------------------
PROCEDURE EXTERNAL_SYSTEM_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_EXTERNAL_SYSTEM);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_EXTERNAL_SYSTEM);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT EXTERNAL_SYSTEM_NAME "ENTITY_NAME",
				EXTERNAL_SYSTEM_ID "ENTITY_ID",
				EXTERNAL_SYSTEM_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM EXTERNAL_SYSTEM A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.EXTERNAL_SYSTEM_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, EXTERNAL_SYSTEM_NAME, EXTERNAL_SYSTEM_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT EXTERNAL_SYSTEM_NAME "ENTITY_NAME",
				EXTERNAL_SYSTEM_ID "ENTITY_ID",
				EXTERNAL_SYSTEM_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM EXTERNAL_SYSTEM A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.EXTERNAL_SYSTEM_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR EXTERNAL_SYSTEM_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR EXTERNAL_SYSTEM_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, EXTERNAL_SYSTEM_NAME, EXTERNAL_SYSTEM_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END EXTERNAL_SYSTEM_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE EXTERNAL_TRANSACTION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.EXTERNAL_TRANSACTION(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END EXTERNAL_TRANSACTION_LIST;
---------------------------------------------------------------------
PROCEDURE EXTERNAL_TRANSACTION_LIST_FILT
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_EXTERNAL_TRANSACTION);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_EXTERNAL_TRANSACTION);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT TRANSACTION_NAME "ENTITY_NAME",
				TRANSACTION_ID "ENTITY_ID",
				TRANSACTION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM INTERCHANGE_TRANSACTION_EXT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TRANSACTION_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TRANSACTION_NAME, TRANSACTION_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT TRANSACTION_NAME "ENTITY_NAME",
				TRANSACTION_ID "ENTITY_ID",
				TRANSACTION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM INTERCHANGE_TRANSACTION_EXT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TRANSACTION_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR TRANSACTION_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR TRANSACTION_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TRANSACTION_NAME, TRANSACTION_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END EXTERNAL_TRANSACTION_LIST_FILT;
---------------------------------------------------------------------
PROCEDURE GEOGRAPHY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.GEOGRAPHY(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END GEOGRAPHY_LIST;
---------------------------------------------------------------------
PROCEDURE GEOGRAPHY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_GEOGRAPHY);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_GEOGRAPHY);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT GEOGRAPHY_NAME "ENTITY_NAME",
				GEOGRAPHY_ID "ENTITY_ID",
				GEOGRAPHY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM GEOGRAPHY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.GEOGRAPHY_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, GEOGRAPHY_NAME, GEOGRAPHY_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT GEOGRAPHY_NAME "ENTITY_NAME",
				GEOGRAPHY_ID "ENTITY_ID",
				GEOGRAPHY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM GEOGRAPHY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.GEOGRAPHY_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR GEOGRAPHY_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR GEOGRAPHY_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, GEOGRAPHY_NAME, GEOGRAPHY_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END GEOGRAPHY_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE GROWTH_PATTERN_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.GROWTH_PATTERN(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END GROWTH_PATTERN_LIST;
---------------------------------------------------------------------
PROCEDURE GROWTH_PATTERN_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_GROWTH_PATTERN);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_GROWTH_PATTERN);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PATTERN_NAME "ENTITY_NAME",
				PATTERN_ID "ENTITY_ID",
				PATTERN_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM GROWTH_PATTERN A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PATTERN_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PATTERN_NAME, PATTERN_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PATTERN_NAME "ENTITY_NAME",
				PATTERN_ID "ENTITY_ID",
				PATTERN_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM GROWTH_PATTERN A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PATTERN_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PATTERN_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PATTERN_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PATTERN_NAME, PATTERN_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END GROWTH_PATTERN_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE HEAT_RATE_CURVE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.HEAT_RATE_CURVE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END HEAT_RATE_CURVE_LIST;
---------------------------------------------------------------------
PROCEDURE HEAT_RATE_CURVE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_HEAT_RATE_CURVE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_HEAT_RATE_CURVE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT HEAT_RATE_CURVE_NAME "ENTITY_NAME",
				HEAT_RATE_CURVE_ID "ENTITY_ID",
				HEAT_RATE_CURVE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM HEAT_RATE_CURVE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.HEAT_RATE_CURVE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, HEAT_RATE_CURVE_NAME, HEAT_RATE_CURVE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT HEAT_RATE_CURVE_NAME "ENTITY_NAME",
				HEAT_RATE_CURVE_ID "ENTITY_ID",
				HEAT_RATE_CURVE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM HEAT_RATE_CURVE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.HEAT_RATE_CURVE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR HEAT_RATE_CURVE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR HEAT_RATE_CURVE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, HEAT_RATE_CURVE_NAME, HEAT_RATE_CURVE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END HEAT_RATE_CURVE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE HOLIDAY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.HOLIDAY(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END HOLIDAY_LIST;
---------------------------------------------------------------------
PROCEDURE HOLIDAY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_HOLIDAY);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_HOLIDAY);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT HOLIDAY_NAME "ENTITY_NAME",
				HOLIDAY_ID "ENTITY_ID",
				HOLIDAY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM HOLIDAY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.HOLIDAY_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, HOLIDAY_NAME, HOLIDAY_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT HOLIDAY_NAME "ENTITY_NAME",
				HOLIDAY_ID "ENTITY_ID",
				HOLIDAY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM HOLIDAY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.HOLIDAY_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR HOLIDAY_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR HOLIDAY_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, HOLIDAY_NAME, HOLIDAY_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END HOLIDAY_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE HOLIDAY_SET_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.HOLIDAY_SET(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END HOLIDAY_SET_LIST;
---------------------------------------------------------------------
PROCEDURE HOLIDAY_SET_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_HOLIDAY_SET);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_HOLIDAY_SET);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT HOLIDAY_SET_NAME "ENTITY_NAME",
				HOLIDAY_SET_ID "ENTITY_ID",
				HOLIDAY_SET_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM HOLIDAY_SET A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.HOLIDAY_SET_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, HOLIDAY_SET_NAME, HOLIDAY_SET_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT HOLIDAY_SET_NAME "ENTITY_NAME",
				HOLIDAY_SET_ID "ENTITY_ID",
				HOLIDAY_SET_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM HOLIDAY_SET A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.HOLIDAY_SET_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR HOLIDAY_SET_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR HOLIDAY_SET_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, HOLIDAY_SET_NAME, HOLIDAY_SET_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END HOLIDAY_SET_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE INTERCHANGE_CONTRACT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.INTERCHANGE_CONTRACT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END INTERCHANGE_CONTRACT_LIST;
---------------------------------------------------------------------
PROCEDURE INTERCHANGE_CONTRACT_LIST_FILT
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_INTERCHANGE_CONTRACT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_INTERCHANGE_CONTRACT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT CONTRACT_NAME "ENTITY_NAME",
				CONTRACT_ID "ENTITY_ID",
				CONTRACT_ALIAS "ENTITY_ALIAS",
				CONTRACT_STATUS "ENTITY_STATUS"
			FROM INTERCHANGE_CONTRACT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CONTRACT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CONTRACT_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CONTRACT_NAME, CONTRACT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT CONTRACT_NAME "ENTITY_NAME",
				CONTRACT_ID "ENTITY_ID",
				CONTRACT_ALIAS "ENTITY_ALIAS",
				CONTRACT_STATUS "ENTITY_STATUS"
			FROM INTERCHANGE_CONTRACT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.CONTRACT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CONTRACT_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR CONTRACT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR CONTRACT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, CONTRACT_NAME, CONTRACT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END INTERCHANGE_CONTRACT_LIST_FILT;
---------------------------------------------------------------------
PROCEDURE INVOICE_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.INVOICE_GROUP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END INVOICE_GROUP_LIST;
---------------------------------------------------------------------
PROCEDURE INVOICE_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_INVOICE_GROUP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_INVOICE_GROUP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT INVOICE_GROUP_NAME "ENTITY_NAME",
				INVOICE_GROUP_ID "ENTITY_ID",
				INVOICE_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM INVOICE_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.INVOICE_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, INVOICE_GROUP_NAME, INVOICE_GROUP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT INVOICE_GROUP_NAME "ENTITY_NAME",
				INVOICE_GROUP_ID "ENTITY_ID",
				INVOICE_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM INVOICE_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.INVOICE_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR INVOICE_GROUP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR INVOICE_GROUP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, INVOICE_GROUP_NAME, INVOICE_GROUP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END INVOICE_GROUP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE IT_COMMODITY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.IT_COMMODITY(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END IT_COMMODITY_LIST;
---------------------------------------------------------------------
PROCEDURE IT_COMMODITY_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_IT_COMMODITY);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_IT_COMMODITY);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT COMMODITY_NAME "ENTITY_NAME",
				COMMODITY_ID "ENTITY_ID",
				COMMODITY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM IT_COMMODITY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.COMMODITY_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, COMMODITY_NAME, COMMODITY_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT COMMODITY_NAME "ENTITY_NAME",
				COMMODITY_ID "ENTITY_ID",
				COMMODITY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM IT_COMMODITY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.COMMODITY_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR COMMODITY_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR COMMODITY_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, COMMODITY_NAME, COMMODITY_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END IT_COMMODITY_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE JOB_THREAD_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.JOB_THREAD(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END JOB_THREAD_LIST;
---------------------------------------------------------------------
PROCEDURE JOB_THREAD_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_JOB_THREAD);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_JOB_THREAD);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT JOB_THREAD_NAME "ENTITY_NAME",
				JOB_THREAD_ID "ENTITY_ID",
				JOB_THREAD_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM JOB_THREAD A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.JOB_THREAD_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, JOB_THREAD_NAME, JOB_THREAD_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT JOB_THREAD_NAME "ENTITY_NAME",
				JOB_THREAD_ID "ENTITY_ID",
				JOB_THREAD_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM JOB_THREAD A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.JOB_THREAD_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR JOB_THREAD_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR JOB_THREAD_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, JOB_THREAD_NAME, JOB_THREAD_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END JOB_THREAD_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.LOAD_PROFILE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOAD_PROFILE_LIST;
---------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_LOAD_PROFILE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_LOAD_PROFILE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PROFILE_NAME "ENTITY_NAME",
				PROFILE_ID "ENTITY_ID",
				PROFILE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM LOAD_PROFILE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PROFILE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PROFILE_NAME, PROFILE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PROFILE_NAME "ENTITY_NAME",
				PROFILE_ID "ENTITY_ID",
				PROFILE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM LOAD_PROFILE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PROFILE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PROFILE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PROFILE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PROFILE_NAME, PROFILE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOAD_PROFILE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_LIBRARY_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.LOAD_PROFILE_LIBRARY(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOAD_PROFILE_LIBRARY_LIST;
---------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_LIBRARY_LIST_FILT
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_LOAD_PROFILE_LIBRARY);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_LOAD_PROFILE_LIBRARY);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PROFILE_LIBRARY_NAME "ENTITY_NAME",
				PROFILE_LIBRARY_ID "ENTITY_ID",
				PROFILE_LIBRARY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM LOAD_PROFILE_LIBRARY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PROFILE_LIBRARY_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PROFILE_LIBRARY_NAME, PROFILE_LIBRARY_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PROFILE_LIBRARY_NAME "ENTITY_NAME",
				PROFILE_LIBRARY_ID "ENTITY_ID",
				PROFILE_LIBRARY_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM LOAD_PROFILE_LIBRARY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PROFILE_LIBRARY_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PROFILE_LIBRARY_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PROFILE_LIBRARY_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PROFILE_LIBRARY_NAME, PROFILE_LIBRARY_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOAD_PROFILE_LIBRARY_LIST_FILT;
---------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_SET_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.LOAD_PROFILE_SET(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOAD_PROFILE_SET_LIST;
---------------------------------------------------------------------
PROCEDURE LOSS_FACTOR_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.LOSS_FACTOR(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOSS_FACTOR_LIST;
---------------------------------------------------------------------
PROCEDURE LOSS_FACTOR_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_LOSS_FACTOR);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_LOSS_FACTOR);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT LOSS_FACTOR_NAME "ENTITY_NAME",
				LOSS_FACTOR_ID "ENTITY_ID",
				LOSS_FACTOR_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM LOSS_FACTOR A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.LOSS_FACTOR_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, LOSS_FACTOR_NAME, LOSS_FACTOR_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT LOSS_FACTOR_NAME "ENTITY_NAME",
				LOSS_FACTOR_ID "ENTITY_ID",
				LOSS_FACTOR_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM LOSS_FACTOR A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.LOSS_FACTOR_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR LOSS_FACTOR_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR LOSS_FACTOR_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, LOSS_FACTOR_NAME, LOSS_FACTOR_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOSS_FACTOR_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE MARKET_PRICE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.MARKET_PRICE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END MARKET_PRICE_LIST;
---------------------------------------------------------------------
PROCEDURE MARKET_PRICE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_MARKET_PRICE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_MARKET_PRICE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT MARKET_PRICE_NAME "ENTITY_NAME",
				MARKET_PRICE_ID "ENTITY_ID",
				MARKET_PRICE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM MARKET_PRICE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.MARKET_PRICE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, MARKET_PRICE_NAME, MARKET_PRICE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT MARKET_PRICE_NAME "ENTITY_NAME",
				MARKET_PRICE_ID "ENTITY_ID",
				MARKET_PRICE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM MARKET_PRICE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.MARKET_PRICE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR MARKET_PRICE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR MARKET_PRICE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, MARKET_PRICE_NAME, MARKET_PRICE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END MARKET_PRICE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE MEASUREMENT_SOURCE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.MEASUREMENT_SOURCE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END MEASUREMENT_SOURCE_LIST;
---------------------------------------------------------------------
PROCEDURE MEASUREMENT_SOURCE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_MEASUREMENT_SOURCE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_MEASUREMENT_SOURCE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT MEASUREMENT_SOURCE_NAME "ENTITY_NAME",
				MEASUREMENT_SOURCE_ID "ENTITY_ID",
				MEASUREMENT_SOURCE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM MEASUREMENT_SOURCE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.MEASUREMENT_SOURCE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, MEASUREMENT_SOURCE_NAME, MEASUREMENT_SOURCE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT MEASUREMENT_SOURCE_NAME "ENTITY_NAME",
				MEASUREMENT_SOURCE_ID "ENTITY_ID",
				MEASUREMENT_SOURCE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM MEASUREMENT_SOURCE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.MEASUREMENT_SOURCE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR MEASUREMENT_SOURCE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR MEASUREMENT_SOURCE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, MEASUREMENT_SOURCE_NAME, MEASUREMENT_SOURCE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END MEASUREMENT_SOURCE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE METER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.METER(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END METER_LIST;
---------------------------------------------------------------------
PROCEDURE METER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_METER);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_METER);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT METER_NAME "ENTITY_NAME",
				METER_ID "ENTITY_ID",
				METER_ALIAS "ENTITY_ALIAS",
				METER_STATUS "ENTITY_STATUS"
			FROM METER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.METER_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(METER_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, METER_NAME, METER_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT METER_NAME "ENTITY_NAME",
				METER_ID "ENTITY_ID",
				METER_ALIAS "ENTITY_ALIAS",
				METER_STATUS "ENTITY_STATUS"
			FROM METER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.METER_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(METER_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR METER_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR METER_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, METER_NAME, METER_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END METER_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE MRSP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.MRSP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END MRSP_LIST;
---------------------------------------------------------------------
PROCEDURE MRSP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_MRSP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_MRSP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT MRSP_NAME "ENTITY_NAME",
				MRSP_ID "ENTITY_ID",
				MRSP_ALIAS "ENTITY_ALIAS",
				MRSP_STATUS "ENTITY_STATUS"
			FROM METER_READING_SERVICE_PROVIDER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.MRSP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(MRSP_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, MRSP_NAME, MRSP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT MRSP_NAME "ENTITY_NAME",
				MRSP_ID "ENTITY_ID",
				MRSP_ALIAS "ENTITY_ALIAS",
				MRSP_STATUS "ENTITY_STATUS"
			FROM METER_READING_SERVICE_PROVIDER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.MRSP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(MRSP_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR MRSP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR MRSP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, MRSP_NAME, MRSP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END MRSP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE OASIS_NODE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.OASIS_NODE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END OASIS_NODE_LIST;
---------------------------------------------------------------------
PROCEDURE OASIS_NODE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_OASIS_NODE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_OASIS_NODE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT OASIS_NODE_NAME "ENTITY_NAME",
				OASIS_NODE_ID "ENTITY_ID",
				OASIS_NODE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM OASIS_NODE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.OASIS_NODE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, OASIS_NODE_NAME, OASIS_NODE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT OASIS_NODE_NAME "ENTITY_NAME",
				OASIS_NODE_ID "ENTITY_ID",
				OASIS_NODE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM OASIS_NODE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.OASIS_NODE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR OASIS_NODE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR OASIS_NODE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, OASIS_NODE_NAME, OASIS_NODE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END OASIS_NODE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE PATH_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.PATH(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PATH_LIST;
---------------------------------------------------------------------
PROCEDURE PATH_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_PATH);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_PATH);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PATH_NAME "ENTITY_NAME",
				PATH_ID "ENTITY_ID",
				PATH_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_PATH A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PATH_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PATH_NAME, PATH_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PATH_NAME "ENTITY_NAME",
				PATH_ID "ENTITY_ID",
				PATH_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_PATH A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PATH_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PATH_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PATH_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PATH_NAME, PATH_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PATH_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE PERIOD_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.PERIOD(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PERIOD_LIST;
---------------------------------------------------------------------
PROCEDURE PERIOD_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_PERIOD);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_PERIOD);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PERIOD_NAME "ENTITY_NAME",
				PERIOD_ID "ENTITY_ID",
				PERIOD_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PERIOD A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PERIOD_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PERIOD_NAME, PERIOD_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PERIOD_NAME "ENTITY_NAME",
				PERIOD_ID "ENTITY_ID",
				PERIOD_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PERIOD A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PERIOD_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PERIOD_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PERIOD_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PERIOD_NAME, PERIOD_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PERIOD_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE PIPELINE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.PIPELINE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PIPELINE_LIST;
---------------------------------------------------------------------
PROCEDURE PIPELINE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_PIPELINE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_PIPELINE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PIPELINE_NAME "ENTITY_NAME",
				PIPELINE_ID "ENTITY_ID",
				PIPELINE_ALIAS "ENTITY_ALIAS",
				PIPELINE_STATUS "ENTITY_STATUS"
			FROM PIPELINE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PIPELINE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(PIPELINE_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PIPELINE_NAME, PIPELINE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PIPELINE_NAME "ENTITY_NAME",
				PIPELINE_ID "ENTITY_ID",
				PIPELINE_ALIAS "ENTITY_ALIAS",
				PIPELINE_STATUS "ENTITY_STATUS"
			FROM PIPELINE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PIPELINE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(PIPELINE_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR PIPELINE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PIPELINE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PIPELINE_NAME, PIPELINE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PIPELINE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE POOL_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.POOL(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END POOL_LIST;
---------------------------------------------------------------------
PROCEDURE POOL_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_POOL);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_POOL);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT POOL_NAME "ENTITY_NAME",
				POOL_ID "ENTITY_ID",
				POOL_ALIAS "ENTITY_ALIAS",
				POOL_STATUS "ENTITY_STATUS"
			FROM POOL A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.POOL_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(POOL_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, POOL_NAME, POOL_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT POOL_NAME "ENTITY_NAME",
				POOL_ID "ENTITY_ID",
				POOL_ALIAS "ENTITY_ALIAS",
				POOL_STATUS "ENTITY_STATUS"
			FROM POOL A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.POOL_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(POOL_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR POOL_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR POOL_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, POOL_NAME, POOL_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END POOL_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE PORTFOLIO_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.PORTFOLIO(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PORTFOLIO_LIST;
---------------------------------------------------------------------
PROCEDURE PORTFOLIO_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_PORTFOLIO);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_PORTFOLIO);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PORTFOLIO_NAME "ENTITY_NAME",
				PORTFOLIO_ID "ENTITY_ID",
				PORTFOLIO_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PORTFOLIO A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PORTFOLIO_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PORTFOLIO_NAME, PORTFOLIO_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PORTFOLIO_NAME "ENTITY_NAME",
				PORTFOLIO_ID "ENTITY_ID",
				PORTFOLIO_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PORTFOLIO A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PORTFOLIO_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PORTFOLIO_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PORTFOLIO_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PORTFOLIO_NAME, PORTFOLIO_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PORTFOLIO_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE POSITION_EVALUATION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.POSITION_EVALUATION(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END POSITION_EVALUATION_LIST;
---------------------------------------------------------------------
PROCEDURE PRODUCT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.PRODUCT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PRODUCT_LIST;
---------------------------------------------------------------------
PROCEDURE PRODUCT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_PRODUCT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_PRODUCT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PRODUCT_NAME "ENTITY_NAME",
				PRODUCT_ID "ENTITY_ID",
				PRODUCT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PRODUCT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PRODUCT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PRODUCT_NAME, PRODUCT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PRODUCT_NAME "ENTITY_NAME",
				PRODUCT_ID "ENTITY_ID",
				PRODUCT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PRODUCT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PRODUCT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PRODUCT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PRODUCT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PRODUCT_NAME, PRODUCT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PRODUCT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE PROGRAM_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.PROGRAM(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PROGRAM_LIST;
---------------------------------------------------------------------
PROCEDURE PROGRAM_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_PROGRAM);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_PROGRAM);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PROGRAM_NAME "ENTITY_NAME",
				PROGRAM_ID "ENTITY_ID",
				PROGRAM_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PROGRAM A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PROGRAM_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PROGRAM_NAME, PROGRAM_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PROGRAM_NAME "ENTITY_NAME",
				PROGRAM_ID "ENTITY_ID",
				PROGRAM_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PROGRAM A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PROGRAM_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PROGRAM_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PROGRAM_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PROGRAM_NAME, PROGRAM_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PROGRAM_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE PROSPECT_SCREEN_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.PROSPECT_SCREEN(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PROSPECT_SCREEN_LIST;
---------------------------------------------------------------------
PROCEDURE PROXY_DAY_METHOD_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.PROXY_DAY_METHOD(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PROXY_DAY_METHOD_LIST;
---------------------------------------------------------------------
PROCEDURE PROXY_DAY_METHOD_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_PROXY_DAY_METHOD);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_PROXY_DAY_METHOD);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PROXY_DAY_METHOD_NAME "ENTITY_NAME",
				PROXY_DAY_METHOD_ID "ENTITY_ID",
				PROXY_DAY_METHOD_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PROXY_DAY_METHOD A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PROXY_DAY_METHOD_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PROXY_DAY_METHOD_NAME, PROXY_DAY_METHOD_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PROXY_DAY_METHOD_NAME "ENTITY_NAME",
				PROXY_DAY_METHOD_ID "ENTITY_ID",
				PROXY_DAY_METHOD_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM PROXY_DAY_METHOD A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PROXY_DAY_METHOD_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PROXY_DAY_METHOD_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PROXY_DAY_METHOD_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PROXY_DAY_METHOD_NAME, PROXY_DAY_METHOD_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PROXY_DAY_METHOD_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE PSE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.PSE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PSE_LIST;
---------------------------------------------------------------------
PROCEDURE PSE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_PSE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_PSE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PSE_NAME "ENTITY_NAME",
				PSE_ID "ENTITY_ID",
				PSE_ALIAS "ENTITY_ALIAS",
				PSE_STATUS "ENTITY_STATUS"
			FROM PURCHASING_SELLING_ENTITY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PSE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(PSE_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PSE_NAME, PSE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PSE_NAME "ENTITY_NAME",
				PSE_ID "ENTITY_ID",
				PSE_ALIAS "ENTITY_ALIAS",
				PSE_STATUS "ENTITY_STATUS"
			FROM PURCHASING_SELLING_ENTITY A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PSE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(PSE_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR PSE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PSE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PSE_NAME, PSE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PSE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE QUOTE_REQUEST_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.QUOTE_REQUEST(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END QUOTE_REQUEST_LIST;
---------------------------------------------------------------------
PROCEDURE QUOTE_REQUEST_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_QUOTE_REQUEST);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_QUOTE_REQUEST);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT QUOTE_NAME "ENTITY_NAME",
				QUOTE_ID "ENTITY_ID",
				QUOTE_ALIAS "ENTITY_ALIAS",
				QUOTE_STATUS "ENTITY_STATUS"
			FROM QUOTE_REQUEST A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.QUOTE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(QUOTE_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, QUOTE_NAME, QUOTE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT QUOTE_NAME "ENTITY_NAME",
				QUOTE_ID "ENTITY_ID",
				QUOTE_ALIAS "ENTITY_ALIAS",
				QUOTE_STATUS "ENTITY_STATUS"
			FROM QUOTE_REQUEST A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.QUOTE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(QUOTE_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR QUOTE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR QUOTE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, QUOTE_NAME, QUOTE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END QUOTE_REQUEST_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE REACTOR_PROCEDURE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.REACTOR_PROCEDURE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END REACTOR_PROCEDURE_LIST;
---------------------------------------------------------------------
PROCEDURE REACTOR_PROCEDURE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_REACTOR_PROCEDURE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_REACTOR_PROCEDURE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT REACTOR_PROCEDURE_NAME "ENTITY_NAME",
				REACTOR_PROCEDURE_ID "ENTITY_ID",
				REACTOR_PROCEDURE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM REACTOR_PROCEDURE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.REACTOR_PROCEDURE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, REACTOR_PROCEDURE_NAME, REACTOR_PROCEDURE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT REACTOR_PROCEDURE_NAME "ENTITY_NAME",
				REACTOR_PROCEDURE_ID "ENTITY_ID",
				REACTOR_PROCEDURE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM REACTOR_PROCEDURE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.REACTOR_PROCEDURE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR REACTOR_PROCEDURE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR REACTOR_PROCEDURE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, REACTOR_PROCEDURE_NAME, REACTOR_PROCEDURE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END REACTOR_PROCEDURE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE RESOURCE_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.RESOURCE_GROUP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END RESOURCE_GROUP_LIST;
---------------------------------------------------------------------
PROCEDURE RESOURCE_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_RESOURCE_GROUP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_RESOURCE_GROUP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT RESOURCE_GROUP_NAME "ENTITY_NAME",
				RESOURCE_GROUP_ID "ENTITY_ID",
				RESOURCE_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SUPPLY_RESOURCE_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.RESOURCE_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, RESOURCE_GROUP_NAME, RESOURCE_GROUP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT RESOURCE_GROUP_NAME "ENTITY_NAME",
				RESOURCE_GROUP_ID "ENTITY_ID",
				RESOURCE_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SUPPLY_RESOURCE_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.RESOURCE_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR RESOURCE_GROUP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR RESOURCE_GROUP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, RESOURCE_GROUP_NAME, RESOURCE_GROUP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END RESOURCE_GROUP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE ROLLUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.ROLLUP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ROLLUP_LIST;
---------------------------------------------------------------------
PROCEDURE SC_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SC(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SC_LIST;
---------------------------------------------------------------------
PROCEDURE SC_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SC);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SC);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SC_NAME "ENTITY_NAME",
				SC_ID "ENTITY_ID",
				SC_ALIAS "ENTITY_ALIAS",
				SC_STATUS "ENTITY_STATUS"
			FROM SCHEDULE_COORDINATOR A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SC_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(SC_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SC_NAME, SC_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SC_NAME "ENTITY_NAME",
				SC_ID "ENTITY_ID",
				SC_ALIAS "ENTITY_ALIAS",
				SC_STATUS "ENTITY_STATUS"
			FROM SCHEDULE_COORDINATOR A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SC_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(SC_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR SC_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SC_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SC_NAME, SC_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SC_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SCENARIO_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SCENARIO(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SCENARIO_LIST;
---------------------------------------------------------------------
PROCEDURE SCENARIO_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SCENARIO);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SCENARIO);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SCENARIO_NAME "ENTITY_NAME",
				SCENARIO_ID "ENTITY_ID",
				SCENARIO_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SCENARIO A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SCENARIO_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SCENARIO_NAME, SCENARIO_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SCENARIO_NAME "ENTITY_NAME",
				SCENARIO_ID "ENTITY_ID",
				SCENARIO_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SCENARIO A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SCENARIO_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SCENARIO_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SCENARIO_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SCENARIO_NAME, SCENARIO_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SCENARIO_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SCHEDULE_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SCHEDULE_GROUP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SCHEDULE_GROUP_LIST;
---------------------------------------------------------------------
PROCEDURE SCHEDULE_GROUP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SCHEDULE_GROUP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SCHEDULE_GROUP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SCHEDULE_GROUP_NAME "ENTITY_NAME",
				SCHEDULE_GROUP_ID "ENTITY_ID",
				SCHEDULE_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SCHEDULE_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SCHEDULE_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SCHEDULE_GROUP_NAME, SCHEDULE_GROUP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SCHEDULE_GROUP_NAME "ENTITY_NAME",
				SCHEDULE_GROUP_ID "ENTITY_ID",
				SCHEDULE_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SCHEDULE_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SCHEDULE_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SCHEDULE_GROUP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SCHEDULE_GROUP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SCHEDULE_GROUP_NAME, SCHEDULE_GROUP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SCHEDULE_GROUP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SEASON_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SEASON(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SEASON_LIST;
---------------------------------------------------------------------
PROCEDURE SEASON_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SEASON);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SEASON);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SEASON_NAME "ENTITY_NAME",
				SEASON_ID "ENTITY_ID",
				SEASON_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SEASON A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SEASON_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SEASON_NAME, SEASON_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SEASON_NAME "ENTITY_NAME",
				SEASON_ID "ENTITY_ID",
				SEASON_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SEASON A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SEASON_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SEASON_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SEASON_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SEASON_NAME, SEASON_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SEASON_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SEGMENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SEGMENT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SEGMENT_LIST;
---------------------------------------------------------------------
PROCEDURE SEGMENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SEGMENT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SEGMENT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SEGMENT_NAME "ENTITY_NAME",
				SEGMENT_ID "ENTITY_ID",
				SEGMENT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SEGMENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SEGMENT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SEGMENT_NAME, SEGMENT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SEGMENT_NAME "ENTITY_NAME",
				SEGMENT_ID "ENTITY_ID",
				SEGMENT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SEGMENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SEGMENT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SEGMENT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SEGMENT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SEGMENT_NAME, SEGMENT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SEGMENT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SERVICE_AREA_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SERVICE_AREA(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_AREA_LIST;
---------------------------------------------------------------------
PROCEDURE SERVICE_AREA_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SERVICE_AREA);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SERVICE_AREA);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SERVICE_AREA_NAME "ENTITY_NAME",
				SERVICE_AREA_ID "ENTITY_ID",
				SERVICE_AREA_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_AREA A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_AREA_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_AREA_NAME, SERVICE_AREA_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SERVICE_AREA_NAME "ENTITY_NAME",
				SERVICE_AREA_ID "ENTITY_ID",
				SERVICE_AREA_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_AREA A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_AREA_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SERVICE_AREA_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SERVICE_AREA_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_AREA_NAME, SERVICE_AREA_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_AREA_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SERVICE_LOCATION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SERVICE_LOCATION(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_LOCATION_LIST;
---------------------------------------------------------------------
PROCEDURE SERVICE_LOCATION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SERVICE_LOCATION);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SERVICE_LOCATION);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SERVICE_LOCATION_NAME "ENTITY_NAME",
				SERVICE_LOCATION_ID "ENTITY_ID",
				SERVICE_LOCATION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_LOCATION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_LOCATION_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_LOCATION_NAME, SERVICE_LOCATION_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SERVICE_LOCATION_NAME "ENTITY_NAME",
				SERVICE_LOCATION_ID "ENTITY_ID",
				SERVICE_LOCATION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_LOCATION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_LOCATION_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SERVICE_LOCATION_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SERVICE_LOCATION_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_LOCATION_NAME, SERVICE_LOCATION_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_LOCATION_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SERVICE_POINT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SERVICE_POINT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_POINT_LIST;
---------------------------------------------------------------------
PROCEDURE SERVICE_POINT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SERVICE_POINT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SERVICE_POINT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SERVICE_POINT_NAME "ENTITY_NAME",
				SERVICE_POINT_ID "ENTITY_ID",
				SERVICE_POINT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_POINT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_POINT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_POINT_NAME, SERVICE_POINT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SERVICE_POINT_NAME "ENTITY_NAME",
				SERVICE_POINT_ID "ENTITY_ID",
				SERVICE_POINT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_POINT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_POINT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SERVICE_POINT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SERVICE_POINT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_POINT_NAME, SERVICE_POINT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_POINT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SERVICE_REGION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SERVICE_REGION(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_REGION_LIST;
---------------------------------------------------------------------
PROCEDURE SERVICE_REGION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SERVICE_REGION);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SERVICE_REGION);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SERVICE_REGION_NAME "ENTITY_NAME",
				SERVICE_REGION_ID "ENTITY_ID",
				SERVICE_REGION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_REGION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_REGION_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_REGION_NAME, SERVICE_REGION_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SERVICE_REGION_NAME "ENTITY_NAME",
				SERVICE_REGION_ID "ENTITY_ID",
				SERVICE_REGION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_REGION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_REGION_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SERVICE_REGION_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SERVICE_REGION_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_REGION_NAME, SERVICE_REGION_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_REGION_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SERVICE_TYPE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SERVICE_TYPE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_TYPE_LIST;
---------------------------------------------------------------------
PROCEDURE SERVICE_TYPE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SERVICE_TYPE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SERVICE_TYPE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SERVICE_TYPE_NAME "ENTITY_NAME",
				SERVICE_TYPE_ID "ENTITY_ID",
				SERVICE_TYPE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SERVICE_TYPE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_TYPE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_TYPE_NAME, SERVICE_TYPE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SERVICE_TYPE_NAME "ENTITY_NAME",
				SERVICE_TYPE_ID "ENTITY_ID",
				SERVICE_TYPE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SERVICE_TYPE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_TYPE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SERVICE_TYPE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SERVICE_TYPE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_TYPE_NAME, SERVICE_TYPE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_TYPE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SERVICE_ZONE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SERVICE_ZONE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_ZONE_LIST;
---------------------------------------------------------------------
PROCEDURE SERVICE_ZONE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SERVICE_ZONE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SERVICE_ZONE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SERVICE_ZONE_NAME "ENTITY_NAME",
				SERVICE_ZONE_ID "ENTITY_ID",
				SERVICE_ZONE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_ZONE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_ZONE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_ZONE_NAME, SERVICE_ZONE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SERVICE_ZONE_NAME "ENTITY_NAME",
				SERVICE_ZONE_ID "ENTITY_ID",
				SERVICE_ZONE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SERVICE_ZONE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SERVICE_ZONE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SERVICE_ZONE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SERVICE_ZONE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SERVICE_ZONE_NAME, SERVICE_ZONE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_ZONE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SETTLEMENT_TYPE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SETTLEMENT_TYPE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SETTLEMENT_TYPE_LIST;
---------------------------------------------------------------------
PROCEDURE SETTLEMENT_TYPE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SETTLEMENT_TYPE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SETTLEMENT_TYPE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SETTLEMENT_TYPE_NAME "ENTITY_NAME",
				SETTLEMENT_TYPE_ID "ENTITY_ID",
				SETTLEMENT_TYPE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SETTLEMENT_TYPE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SETTLEMENT_TYPE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SETTLEMENT_TYPE_NAME, SETTLEMENT_TYPE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SETTLEMENT_TYPE_NAME "ENTITY_NAME",
				SETTLEMENT_TYPE_ID "ENTITY_ID",
				SETTLEMENT_TYPE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SETTLEMENT_TYPE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SETTLEMENT_TYPE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SETTLEMENT_TYPE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SETTLEMENT_TYPE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SETTLEMENT_TYPE_NAME, SETTLEMENT_TYPE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SETTLEMENT_TYPE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE STATEMENT_TYPE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.STATEMENT_TYPE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END STATEMENT_TYPE_LIST;
---------------------------------------------------------------------
PROCEDURE STATEMENT_TYPE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_STATEMENT_TYPE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_STATEMENT_TYPE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT STATEMENT_TYPE_NAME "ENTITY_NAME",
				STATEMENT_TYPE_ID "ENTITY_ID",
				STATEMENT_TYPE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM STATEMENT_TYPE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.STATEMENT_TYPE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, STATEMENT_TYPE_NAME, STATEMENT_TYPE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT STATEMENT_TYPE_NAME "ENTITY_NAME",
				STATEMENT_TYPE_ID "ENTITY_ID",
				STATEMENT_TYPE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM STATEMENT_TYPE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.STATEMENT_TYPE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR STATEMENT_TYPE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR STATEMENT_TYPE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, STATEMENT_TYPE_NAME, STATEMENT_TYPE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END STATEMENT_TYPE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SUB_STATION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SUB_STATION(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUB_STATION_LIST;
---------------------------------------------------------------------
PROCEDURE SUB_STATION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SUB_STATION);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SUB_STATION);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SUB_STATION_NAME "ENTITY_NAME",
				SUB_STATION_ID "ENTITY_ID",
				SUB_STATION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SUB_STATION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SUB_STATION_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SUB_STATION_NAME, SUB_STATION_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SUB_STATION_NAME "ENTITY_NAME",
				SUB_STATION_ID "ENTITY_ID",
				SUB_STATION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SUB_STATION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SUB_STATION_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SUB_STATION_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SUB_STATION_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SUB_STATION_NAME, SUB_STATION_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUB_STATION_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SUB_STATION_METER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SUB_STATION_METER(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUB_STATION_METER_LIST;
---------------------------------------------------------------------
PROCEDURE SUB_STATION_METER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SUB_STATION_METER);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SUB_STATION_METER);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT METER_NAME "ENTITY_NAME",
				METER_ID "ENTITY_ID",
				METER_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SUB_STATION_METER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.METER_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, METER_NAME, METER_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT METER_NAME "ENTITY_NAME",
				METER_ID "ENTITY_ID",
				METER_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SUB_STATION_METER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.METER_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR METER_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR METER_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, METER_NAME, METER_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUB_STATION_METER_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SUB_STATION_METER_POINT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SUB_STATION_METER_POINT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUB_STATION_METER_POINT_LIST;
---------------------------------------------------------------------
PROCEDURE SUB_STATION_METER_POINT_LIST_F
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SUB_STATION_METER_POINT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SUB_STATION_METER_POINT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT METER_POINT_NAME "ENTITY_NAME",
				METER_POINT_ID "ENTITY_ID",
				METER_POINT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SUB_STATION_METER_POINT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.METER_POINT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, METER_POINT_NAME, METER_POINT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT METER_POINT_NAME "ENTITY_NAME",
				METER_POINT_ID "ENTITY_ID",
				METER_POINT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_SUB_STATION_METER_POINT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.METER_POINT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR METER_POINT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR METER_POINT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, METER_POINT_NAME, METER_POINT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUB_STATION_METER_POINT_LIST_F;
---------------------------------------------------------------------
PROCEDURE SUPPLY_RESOURCE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SUPPLY_RESOURCE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUPPLY_RESOURCE_LIST;
---------------------------------------------------------------------
PROCEDURE SUPPLY_RESOURCE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SUPPLY_RESOURCE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SUPPLY_RESOURCE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT RESOURCE_NAME "ENTITY_NAME",
				RESOURCE_ID "ENTITY_ID",
				RESOURCE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SUPPLY_RESOURCE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.RESOURCE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, RESOURCE_NAME, RESOURCE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT RESOURCE_NAME "ENTITY_NAME",
				RESOURCE_ID "ENTITY_ID",
				RESOURCE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SUPPLY_RESOURCE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.RESOURCE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR RESOURCE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR RESOURCE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, RESOURCE_NAME, RESOURCE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUPPLY_RESOURCE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SYSTEM_ACTION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SYSTEM_ACTION(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_ACTION_LIST;
---------------------------------------------------------------------
PROCEDURE SYSTEM_ACTION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SYSTEM_ACTION);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SYSTEM_ACTION);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT ACTION_NAME "ENTITY_NAME",
				ACTION_ID "ENTITY_ID",
				ACTION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_ACTION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ACTION_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ACTION_NAME, ACTION_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT ACTION_NAME "ENTITY_NAME",
				ACTION_ID "ENTITY_ID",
				ACTION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_ACTION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ACTION_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR ACTION_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR ACTION_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ACTION_NAME, ACTION_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_ACTION_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SYSTEM_ALERT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SYSTEM_ALERT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_ALERT_LIST;
---------------------------------------------------------------------
PROCEDURE SYSTEM_ALERT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SYSTEM_ALERT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SYSTEM_ALERT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT ALERT_NAME "ENTITY_NAME",
				ALERT_ID "ENTITY_ID",
				ALERT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_ALERT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ALERT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ALERT_NAME, ALERT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT ALERT_NAME "ENTITY_NAME",
				ALERT_ID "ENTITY_ID",
				ALERT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_ALERT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.ALERT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR ALERT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR ALERT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, ALERT_NAME, ALERT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_ALERT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SYSTEM_EVENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SYSTEM_EVENT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_EVENT_LIST;
---------------------------------------------------------------------
PROCEDURE SYSTEM_EVENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SYSTEM_EVENT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SYSTEM_EVENT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT EVENT_NAME "ENTITY_NAME",
				EVENT_ID "ENTITY_ID",
				EVENT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_EVENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.EVENT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, EVENT_NAME, EVENT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT EVENT_NAME "ENTITY_NAME",
				EVENT_ID "ENTITY_ID",
				EVENT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_EVENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.EVENT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR EVENT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR EVENT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, EVENT_NAME, EVENT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_EVENT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SYSTEM_LOAD_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SYSTEM_LOAD(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_LOAD_LIST;
---------------------------------------------------------------------
PROCEDURE SYSTEM_LOAD_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SYSTEM_LOAD);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SYSTEM_LOAD);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT SYSTEM_LOAD_NAME "ENTITY_NAME",
				SYSTEM_LOAD_ID "ENTITY_ID",
				SYSTEM_LOAD_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_LOAD A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SYSTEM_LOAD_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SYSTEM_LOAD_NAME, SYSTEM_LOAD_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT SYSTEM_LOAD_NAME "ENTITY_NAME",
				SYSTEM_LOAD_ID "ENTITY_ID",
				SYSTEM_LOAD_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_LOAD A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.SYSTEM_LOAD_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR SYSTEM_LOAD_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR SYSTEM_LOAD_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, SYSTEM_LOAD_NAME, SYSTEM_LOAD_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_LOAD_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SYSTEM_REALM_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SYSTEM_REALM(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_REALM_LIST;
---------------------------------------------------------------------
PROCEDURE SYSTEM_REALM_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SYSTEM_REALM);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SYSTEM_REALM);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT REALM_NAME "ENTITY_NAME",
				REALM_ID "ENTITY_ID",
				REALM_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_REALM A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.REALM_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, REALM_NAME, REALM_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT REALM_NAME "ENTITY_NAME",
				REALM_ID "ENTITY_ID",
				REALM_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_REALM A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.REALM_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR REALM_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR REALM_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, REALM_NAME, REALM_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_REALM_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE SYSTEM_TABLE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.SYSTEM_TABLE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_TABLE_LIST;
---------------------------------------------------------------------
PROCEDURE SYSTEM_TABLE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_SYSTEM_TABLE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_SYSTEM_TABLE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT TABLE_NAME "ENTITY_NAME",
				TABLE_ID "ENTITY_ID",
				TABLE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_TABLE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TABLE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TABLE_NAME, TABLE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT TABLE_NAME "ENTITY_NAME",
				TABLE_ID "ENTITY_ID",
				TABLE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM SYSTEM_TABLE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TABLE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR TABLE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR TABLE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TABLE_NAME, TABLE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_TABLE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE TEMPLATE_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.TEMPLATE(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TEMPLATE_LIST;
---------------------------------------------------------------------
PROCEDURE TEMPLATE_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_TEMPLATE);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_TEMPLATE);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT TEMPLATE_NAME "ENTITY_NAME",
				TEMPLATE_ID "ENTITY_ID",
				TEMPLATE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TEMPLATE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TEMPLATE_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TEMPLATE_NAME, TEMPLATE_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT TEMPLATE_NAME "ENTITY_NAME",
				TEMPLATE_ID "ENTITY_ID",
				TEMPLATE_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TEMPLATE A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TEMPLATE_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR TEMPLATE_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR TEMPLATE_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TEMPLATE_NAME, TEMPLATE_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TEMPLATE_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE TP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.TP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TP_LIST;
---------------------------------------------------------------------
PROCEDURE TP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_TP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_TP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT TP_NAME "ENTITY_NAME",
				TP_ID "ENTITY_ID",
				TP_ALIAS "ENTITY_ALIAS",
				TP_STATUS "ENTITY_STATUS"
			FROM TRANSMISSION_PROVIDER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(TP_STATUS)) = 'ACTIVE')
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TP_NAME, TP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT TP_NAME "ENTITY_NAME",
				TP_ID "ENTITY_ID",
				TP_ALIAS "ENTITY_ALIAS",
				TP_STATUS "ENTITY_STATUS"
			FROM TRANSMISSION_PROVIDER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(TP_STATUS)) = 'ACTIVE')
				AND (p_SEARCH_BY_ALIAS = 1 OR TP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR TP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TP_NAME, TP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE TRANSACTION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.TRANSACTION(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TRANSACTION_LIST;
---------------------------------------------------------------------
PROCEDURE TRANSACTION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_TRANSACTION);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_TRANSACTION);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT TRANSACTION_NAME "ENTITY_NAME",
				TRANSACTION_ID "ENTITY_ID",
				TRANSACTION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM INTERCHANGE_TRANSACTION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TRANSACTION_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TRANSACTION_NAME, TRANSACTION_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT TRANSACTION_NAME "ENTITY_NAME",
				TRANSACTION_ID "ENTITY_ID",
				TRANSACTION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM INTERCHANGE_TRANSACTION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TRANSACTION_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR TRANSACTION_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR TRANSACTION_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TRANSACTION_NAME, TRANSACTION_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TRANSACTION_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE TRANSACTION_TRAIT_GROUP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.TRANSACTION_TRAIT_GROUP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TRANSACTION_TRAIT_GROUP_LIST;
---------------------------------------------------------------------
PROCEDURE TRANSACTION_TRAIT_GROUP_LIST_F
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_TRANSACTION_TRAIT_GROUP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_TRANSACTION_TRAIT_GROUP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT TRAIT_GROUP_NAME "ENTITY_NAME",
				TRAIT_GROUP_ID "ENTITY_ID",
				TRAIT_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TRANSACTION_TRAIT_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TRAIT_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TRAIT_GROUP_NAME, TRAIT_GROUP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT TRAIT_GROUP_NAME "ENTITY_NAME",
				TRAIT_GROUP_ID "ENTITY_ID",
				TRAIT_GROUP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TRANSACTION_TRAIT_GROUP A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.TRAIT_GROUP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR TRAIT_GROUP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR TRAIT_GROUP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, TRAIT_GROUP_NAME, TRAIT_GROUP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TRANSACTION_TRAIT_GROUP_LIST_F;
---------------------------------------------------------------------
PROCEDURE TX_FEEDER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.TX_FEEDER(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TX_FEEDER_LIST;
---------------------------------------------------------------------
PROCEDURE TX_FEEDER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_TX_FEEDER);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_TX_FEEDER);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT FEEDER_NAME "ENTITY_NAME",
				FEEDER_ID "ENTITY_ID",
				FEEDER_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_FEEDER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.FEEDER_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, FEEDER_NAME, FEEDER_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT FEEDER_NAME "ENTITY_NAME",
				FEEDER_ID "ENTITY_ID",
				FEEDER_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_FEEDER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.FEEDER_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR FEEDER_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR FEEDER_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, FEEDER_NAME, FEEDER_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TX_FEEDER_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE TX_FEEDER_SEGMENT_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.TX_FEEDER_SEGMENT(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TX_FEEDER_SEGMENT_LIST;
---------------------------------------------------------------------
PROCEDURE TX_FEEDER_SEGMENT_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_TX_FEEDER_SEGMENT);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_TX_FEEDER_SEGMENT);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT FEEDER_SEGMENT_NAME "ENTITY_NAME",
				FEEDER_SEGMENT_ID "ENTITY_ID",
				FEEDER_SEGMENT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_FEEDER_SEGMENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.FEEDER_SEGMENT_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, FEEDER_SEGMENT_NAME, FEEDER_SEGMENT_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT FEEDER_SEGMENT_NAME "ENTITY_NAME",
				FEEDER_SEGMENT_ID "ENTITY_ID",
				FEEDER_SEGMENT_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM TX_FEEDER_SEGMENT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.FEEDER_SEGMENT_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR FEEDER_SEGMENT_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR FEEDER_SEGMENT_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, FEEDER_SEGMENT_NAME, FEEDER_SEGMENT_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TX_FEEDER_SEGMENT_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE USAGE_WRF_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.USAGE_WRF(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END USAGE_WRF_LIST;
---------------------------------------------------------------------
PROCEDURE VPP_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.VPP(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END VPP_LIST;
---------------------------------------------------------------------
PROCEDURE VPP_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_VPP);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_VPP);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT VPP_NAME "ENTITY_NAME",
				VPP_ID "ENTITY_ID",
				VPP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM VIRTUAL_POWER_PLANT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.VPP_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, VPP_NAME, VPP_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT VPP_NAME "ENTITY_NAME",
				VPP_ID "ENTITY_ID",
				VPP_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM VIRTUAL_POWER_PLANT A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.VPP_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR VPP_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR VPP_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, VPP_NAME, VPP_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END VPP_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE WEATHER_PARAMETER_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.WEATHER_PARAMETER(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END WEATHER_PARAMETER_LIST;
---------------------------------------------------------------------
PROCEDURE WEATHER_PARAMETER_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_WEATHER_PARAMETER);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_WEATHER_PARAMETER);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT PARAMETER_NAME "ENTITY_NAME",
				PARAMETER_ID "ENTITY_ID",
				PARAMETER_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM WEATHER_PARAMETER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PARAMETER_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PARAMETER_NAME, PARAMETER_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT PARAMETER_NAME "ENTITY_NAME",
				PARAMETER_ID "ENTITY_ID",
				PARAMETER_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM WEATHER_PARAMETER A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.PARAMETER_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR PARAMETER_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR PARAMETER_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, PARAMETER_NAME, PARAMETER_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END WEATHER_PARAMETER_LIST_FILTER;
---------------------------------------------------------------------
PROCEDURE WEATHER_STATION_LIST
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;
        
        ENTITY_LIST.WEATHER_STATION(p_SEARCH_STRING, 
                                        CASE WHEN p_SEARCH_BY_ALIAS = 1 THEN CONSTANTS.SEARCH_OPTION_BY_ALIAS ELSE CONSTANTS.SEARCH_OPTION_BY_NAME END,
                                        1,
                                        NULL,
                                        p_INCLUDE_INACTIVE,
                                        0,
                                        p_STATUS,
                                        p_CURSOR);
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END WEATHER_STATION_LIST;
---------------------------------------------------------------------
PROCEDURE WEATHER_STATION_LIST_FILTER
	(
	p_SEARCH_STRING IN VARCHAR2,
	p_SEARCH_BY_ALIAS IN NUMBER,
	p_INCLUDE_INACTIVE IN NUMBER,
	p_ACTION_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities to which user has access for named entity
v_IDs ID_TABLE;
BEGIN
	IF p_ACTION_NAME IS NULL THEN
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(g_DEFAULT_ACTION_NAME, EC.ED_WEATHER_STATION);
	ELSE
		v_IDs := SD.GET_ALLOWED_ENTITY_ID_TABLE(p_ACTION_NAME, EC.ED_WEATHER_STATION);
	END IF;

	p_STATUS := GA.SUCCESS;

	IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
		OPEN p_CURSOR FOR
			SELECT STATION_NAME "ENTITY_NAME",
				STATION_ID "ENTITY_ID",
				STATION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM WEATHER_STATION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.STATION_ID, SD.g_ALL_DATA_ENTITY_ID)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, STATION_NAME, STATION_ALIAS);
	ELSE
		OPEN p_CURSOR FOR
			SELECT STATION_NAME "ENTITY_NAME",
				STATION_ID "ENTITY_ID",
				STATION_ALIAS "ENTITY_ALIAS",
				'Active' "ENTITY_STATUS"
			FROM WEATHER_STATION A,
				TABLE(CAST(v_IDs AS ID_TABLE)) X
			WHERE X.ID IN (A.STATION_ID, SD.g_ALL_DATA_ENTITY_ID)
				AND (p_SEARCH_BY_ALIAS = 1 OR STATION_NAME LIKE p_SEARCH_STRING)
				AND (p_SEARCH_BY_ALIAS = 0 OR STATION_ALIAS LIKE p_SEARCH_STRING)
			ORDER BY DECODE(p_SEARCH_BY_ALIAS, 0, STATION_NAME, STATION_ALIAS);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END WEATHER_STATION_LIST_FILTER;
---------------------------------------------------------------------
END EN;
/
