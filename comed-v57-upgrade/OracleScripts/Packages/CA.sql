CREATE OR REPLACE PACKAGE CA AS
--Revision $Revision: 1.21 $

-- CALENDAR PROFILE AND ADJUSTMENT ASSIGNMENT PACKAGE

FUNCTION WHAT_VERSION RETURN VARCHAR;


PROCEDURE PUT_CALENDAR_ADJUSTMENT
	(
	p_CALENDAR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_ADJ_OP IN CHAR,
	p_ADJ_VAL IN NUMBER,
	p_OLD_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE UPDT_CALENDAR_ASSIGNMENT_TYPE
	(
	p_CALENDAR_ID IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE UPDT_ALL_ASSIGNMENT_TYPES
	(
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_CALENDAR_PROFILE
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_OLD_PROFILE_ID IN NUMBER,
	p_OLD_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_CALENDAR_PROFILE_LIBRARY
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_OLD_PROFILE_LIBRARY_ID IN NUMBER,
	p_OLD_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_CALENDAR_PROFILE_LIBRARIES
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_DATE_FORMAT IN VARCHAR,
	p_ARGUMENTS IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_CALENDAR_PROFILES
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_DATE_FORMAT IN VARCHAR,
	p_ARGUMENTS IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_CALENDAR_ADJUSTMENTS
	(
	p_CALENDAR_ID IN NUMBER,
	p_ADJ_OP IN VARCHAR,
	p_ADJ_VAL IN NUMBER,
	p_DATE_FORMAT IN VARCHAR,
	p_ARGUMENTS IN VARCHAR,
	p_STATUS OUT NUMBER
	);

g_DOMAIN_NAME VARCHAR(16) := 'Profiling';

END CA;
/
CREATE OR REPLACE PACKAGE BODY CA AS
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.21 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_CALENDAR_ADJUSTMENT
	(
	p_CALENDAR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_ADJ_OP IN CHAR,
	p_ADJ_VAL IN NUMBER,
	p_OLD_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

-- THIS PROCEDURE TAKES INTO ACCOUNT THE POSSIBILITY OF UPDATING THE BEGIN_DATE OF
-- AN ADJUSTMENT, GIVEN THE OLD_BEGIN_DATE IN ORDER TO FIND IT.

	v_END_DATE DATE := p_END_DATE;

BEGIN

	p_STATUS := GA.SUCCESS;

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;
	
	IF v_END_DATE < p_BEGIN_DATE THEN
		v_END_DATE := p_BEGIN_DATE;
	END IF;
	
	IF p_CALENDAR_ID > 0 THEN

-- ATTEMPT TO UPDATE AN EXISTING ASSIGNMENT RECORD

	UPDATE CALENDAR_ADJUSTMENT SET
		BEGIN_DATE = TRUNC(p_BEGIN_DATE),
		END_DATE = TRUNC(v_END_DATE),
		ADJ_OP = LTRIM(RTRIM(SUBSTR(NVL(p_ADJ_OP,GA.UNDEFINED_ATTRIBUTE),1,1))),
		ADJ_VAL = p_ADJ_VAL,
		ENTRY_DATE = SYSDATE
	WHERE CALENDAR_ID = p_CALENDAR_ID
		AND TRUNC(BEGIN_DATE) = TRUNC(p_OLD_BEGIN_DATE);

-- IF AN EXISTING ASSIGNMENT RECORD WAS NOT UPDATED THEN INSERT A NEW ASSIGNMENT RECORD

	IF SQL%NOTFOUND THEN
		INSERT INTO CALENDAR_ADJUSTMENT (
			CALENDAR_ID,
			BEGIN_DATE,
			END_DATE,
			ADJ_OP,
			ADJ_VAL,
			ENTRY_DATE)
		VALUES (
			p_CALENDAR_ID,
			TRUNC(p_BEGIN_DATE),
			TRUNC(v_END_DATE),
			LTRIM(RTRIM(SUBSTR(NVL(p_ADJ_OP,GA.UNDEFINED_ATTRIBUTE),1,1))),
			p_ADJ_VAL,
			SYSDATE);
	END IF;

	ELSE

		p_STATUS := GA.INVALID_INTERNAL_ID;

	END IF;

	EXCEPTION
		WHEN OTHERS THEN
			ERRS.LOG_AND_RAISE();

END PUT_CALENDAR_ADJUSTMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE UPDT_CALENDAR_ASSIGNMENT_TYPE
	(
	p_CALENDAR_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
--Updates CALENDAR.ASSIGNMENT_TYPE based on
--whether the calendar has been assigned to:
--  a Profile:    'P'
--  a Library:   'L'
--  Both:         'B'
--  or Nothing: 'N'

BEGIN

	p_STATUS := GA.SUCCESS;

    UPDATE CALENDAR X
    SET X.ASSIGNMENT_TYPE =
        (SELECT DECODE(DECODE(NVL(B.CALENDAR_ID,0),0,0,1) + DECODE(NVL(C.CALENDAR_ID,0),0,0,2),0,'N',1,'P',2,'L',3,'B','?')
        FROM CALENDAR A, CALENDAR_PROFILE B, CALENDAR_PROFILE_LIBRARY C
        WHERE A.CALENDAR_ID = p_CALENDAR_ID
        AND B.CALENDAR_ID(+) = A.CALENDAR_ID
        AND C.CALENDAR_ID(+) = A.CALENDAR_ID
        GROUP BY B.CALENDAR_ID, C.CALENDAR_ID)
    WHERE X.CALENDAR_ID = p_CALENDAR_ID;

	EXCEPTION
		WHEN OTHERS THEN
			ERRS.LOG_AND_RAISE();

END UPDT_CALENDAR_ASSIGNMENT_TYPE;
----------------------------------------------------------------------------------------------------
PROCEDURE UPDT_ALL_ASSIGNMENT_TYPES
	(
	p_STATUS OUT NUMBER
	) AS
--For migration only, to set the ASSIGNMENT_TYPE of ALL calendars.
--This is what the triggers used to do before 2.4.
--Updates CALENDAR.ASSIGNMENT_TYPE based on
--whether the calendar has been assigned to:
--  a Profile:    'P'
--  a Library:   'L'
--  Both:         'B'
--  or Nothing: 'N'

BEGIN

	p_STATUS := GA.SUCCESS;

    UPDATE CALENDAR X
    SET X.ASSIGNMENT_TYPE =
        (SELECT DECODE(DECODE(NVL(B.CALENDAR_ID,0),0,0,1) + DECODE(NVL(C.CALENDAR_ID,0),0,0,2),0,'N',1,'P',2,'L',3,'B','?')
        FROM CALENDAR A, CALENDAR_PROFILE B, CALENDAR_PROFILE_LIBRARY C
        WHERE A.CALENDAR_ID = X.CALENDAR_ID
        AND B.CALENDAR_ID(+) = A.CALENDAR_ID
        AND C.CALENDAR_ID(+) = A.CALENDAR_ID
        GROUP BY B.CALENDAR_ID, C.CALENDAR_ID);

	EXCEPTION
		WHEN OTHERS THEN
			ERRS.LOG_AND_RAISE();

END UPDT_ALL_ASSIGNMENT_TYPES;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_CALENDAR_PROFILE
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_OLD_PROFILE_ID IN NUMBER,
	p_OLD_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

-- THIS PROCEDURE TAKES INTO ACCOUNT THE POSSIBILITY OF UPDATING THE BEGIN_DATE OF
-- A PROFILE, GIVEN THE OLD_BEGIN_DATE IN ORDER TO FIND IT.
v_END_DATE DATE;

BEGIN

	p_STATUS := GA.SUCCESS;

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;
	
	v_END_DATE := NULL_DATE(p_END_DATE);
	
	IF v_END_DATE < p_BEGIN_DATE THEN
		v_END_DATE := p_BEGIN_DATE;
	END IF;
	
	IF p_PROFILE_ID > 0 AND p_CALENDAR_ID > 0 THEN
	
	-- ATTEMPT TO UPDATE AN EXISTING ASSIGNMENT RECORD

		UPDATE CALENDAR_PROFILE SET
			BEGIN_DATE = TRUNC(p_BEGIN_DATE),
			END_DATE = TRUNC(v_END_DATE),
			PROFILE_ID = p_PROFILE_ID,
			ENTRY_DATE = SYSDATE
		WHERE PROFILE_ID = p_OLD_PROFILE_ID AND
			CALENDAR_ID = p_CALENDAR_ID AND
			BEGIN_DATE = TRUNC(p_OLD_BEGIN_DATE);

-- IF AN EXISTING ASSIGNMENT RECORD WAS NOT UPDATED THEN INSERT A NEW ASSIGNMENT RECORD

		IF SQL%NOTFOUND THEN
			INSERT INTO CALENDAR_PROFILE (
				CALENDAR_ID,
				PROFILE_ID,
				BEGIN_DATE,
				END_DATE,
				ENTRY_DATE)
			VALUES (
				p_CALENDAR_ID,
				p_PROFILE_ID,
				TRUNC(p_BEGIN_DATE),
				TRUNC(v_END_DATE),
				SYSDATE);
		END IF;
								
	--Update CALENDAR.ASSIGNMENT_TYPE
    UPDT_CALENDAR_ASSIGNMENT_TYPE(p_CALENDAR_ID, p_STATUS);

	ELSE

		p_STATUS := GA.INVALID_INTERNAL_ID;

	END IF;

	EXCEPTION
		WHEN OTHERS THEN
			ERRS.LOG_AND_RAISE();

END PUT_CALENDAR_PROFILE;
----------------------------------------------------------------------------------------------------

PROCEDURE PUT_CALENDAR_PROFILE_LIBRARY
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_OLD_PROFILE_LIBRARY_ID IN NUMBER,
	p_OLD_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

-- THIS PROCEDURE TAKES INTO ACCOUNT THE POSSIBILITY OF UPDATING THE BEGIN_DATE OF
-- A PROFILE, GIVEN THE OLD_BEGIN_DATE IN ORDER TO FIND IT.
v_END_DATE DATE;

BEGIN

	p_STATUS := GA.SUCCESS;

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;
	
	v_END_DATE := NULL_DATE(p_END_DATE);
	
	IF v_END_DATE < p_BEGIN_DATE THEN
		v_END_DATE := p_BEGIN_DATE;
	END IF;
	
	IF p_PROFILE_LIBRARY_ID > 0 AND p_CALENDAR_ID > 0 THEN
	
	-- ATTEMPT TO UPDATE AN EXISTING ASSIGNMENT RECORD

		UPDATE CALENDAR_PROFILE_LIBRARY SET
			BEGIN_DATE = TRUNC(p_BEGIN_DATE),
			END_DATE = TRUNC(v_END_DATE),
			PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID,
			ENTRY_DATE = SYSDATE
		WHERE PROFILE_LIBRARY_ID = p_OLD_PROFILE_LIBRARY_ID AND
			CALENDAR_ID = p_CALENDAR_ID AND
			TRUNC(BEGIN_DATE) = TRUNC(p_OLD_BEGIN_DATE);

-- IF AN EXISTING ASSIGNMENT RECORD WAS NOT UPDATED THEN INSERT A NEW ASSIGNMENT RECORD

		IF SQL%NOTFOUND THEN
			INSERT INTO CALENDAR_PROFILE_LIBRARY (
				CALENDAR_ID,
				PROFILE_LIBRARY_ID,
				BEGIN_DATE,
				END_DATE,
				ENTRY_DATE)
			VALUES (
				p_CALENDAR_ID,
				p_PROFILE_LIBRARY_ID,
				TRUNC(p_BEGIN_DATE),
				TRUNC(v_END_DATE),
				SYSDATE);
		END IF;

	--Update CALENDAR.ASSIGNMENT_TYPE
    UPDT_CALENDAR_ASSIGNMENT_TYPE(p_CALENDAR_ID, p_STATUS);

	ELSE

		p_STATUS := GA.INVALID_INTERNAL_ID;

	END IF;

	EXCEPTION
		WHEN OTHERS THEN
			ERRS.LOG_AND_RAISE();

END PUT_CALENDAR_PROFILE_LIBRARY;
----------------------------------------------------------------------------------------------------

PROCEDURE PUT_CALENDAR_PROFILE_LIBRARIES
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_DATE_FORMAT IN VARCHAR,
	p_ARGUMENTS IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_ARGUMENTS_TABLE GA.STRING_TABLE;
v_VALUES_TABLE GA.STRING_TABLE;
v_INDEX BINARY_INTEGER;
v_LOOP_COUNTER NUMBER := 0;

BEGIN

	p_STATUS := GA.SUCCESS;

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	UT.TOKENS_FROM_STRING(p_ARGUMENTS, ';', v_ARGUMENTS_TABLE);
	v_INDEX := v_ARGUMENTS_TABLE.FIRST;

	LOOP
		IF LENGTH(v_ARGUMENTS_TABLE(v_INDEX)) > 0 THEN

			UT.TOKENS_FROM_STRING(v_ARGUMENTS_TABLE(v_INDEX), ',', v_VALUES_TABLE);

			v_BEGIN_DATE := TO_DATE(v_VALUES_TABLE(1), p_DATE_FORMAT);
			v_END_DATE := TO_DATE(v_VALUES_TABLE(2), p_DATE_FORMAT);

			PUT_CALENDAR_PROFILE_LIBRARY
				(
				p_CALENDAR_ID,
				p_PROFILE_LIBRARY_ID,
				v_BEGIN_DATE,
				v_END_DATE,
				p_PROFILE_LIBRARY_ID,
				v_BEGIN_DATE,
				p_STATUS
				);

			IF p_STATUS < 0 THEN
				RETURN;
			END IF;

		END IF;

		v_LOOP_COUNTER := v_LOOP_COUNTER + 1;
		IF v_LOOP_COUNTER > 1000 THEN
			ERRS.RAISE(MSGCODES.c_ERR_RUNAWAY_LOOP ,'RUNAWAY LOOP IN CA.PUT_CALENDAR_PROFILES PROCEDURE');
		END IF;
		EXIT WHEN v_INDEX = v_ARGUMENTS_TABLE.LAST;
		v_INDEX := v_ARGUMENTS_TABLE.NEXT(v_INDEX);

	END LOOP;

END PUT_CALENDAR_PROFILE_LIBRARIES;
----------------------------------------------------------------------------------------------------

PROCEDURE PUT_CALENDAR_PROFILES
	(
	p_CALENDAR_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_DATE_FORMAT IN VARCHAR,
	p_ARGUMENTS IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_ARGUMENTS_TABLE GA.STRING_TABLE;
v_VALUES_TABLE GA.STRING_TABLE;
v_INDEX BINARY_INTEGER;
v_LOOP_COUNTER NUMBER := 0;

BEGIN

	p_STATUS := GA.SUCCESS;

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	UT.TOKENS_FROM_STRING(p_ARGUMENTS, ';', v_ARGUMENTS_TABLE);
	v_INDEX := v_ARGUMENTS_TABLE.FIRST;

	LOOP
		IF LENGTH(v_ARGUMENTS_TABLE(v_INDEX)) > 0 THEN

			UT.TOKENS_FROM_STRING(v_ARGUMENTS_TABLE(v_INDEX), ',', v_VALUES_TABLE);

			v_BEGIN_DATE := TO_DATE(v_VALUES_TABLE(1), p_DATE_FORMAT);
			v_END_DATE := TO_DATE(v_VALUES_TABLE(2), p_DATE_FORMAT);

			PUT_CALENDAR_PROFILE
				(
				p_CALENDAR_ID,
				p_PROFILE_ID,
				v_BEGIN_DATE,
				v_END_DATE,
				p_PROFILE_ID,
				v_BEGIN_DATE,
				p_STATUS
				);

			IF p_STATUS < 0 THEN
				RETURN;
			END IF;

		END IF;

		v_LOOP_COUNTER := v_LOOP_COUNTER + 1;
		IF v_LOOP_COUNTER > 1000 THEN
			ERRS.RAISE(MSGCODES.c_ERR_RUNAWAY_LOOP, 'RUNAWAY LOOP IN CA.PUT_CALENDAR_PROFILES PROCEDURE');
		END IF;
		EXIT WHEN v_INDEX = v_ARGUMENTS_TABLE.LAST;
		v_INDEX := v_ARGUMENTS_TABLE.NEXT(v_INDEX);

	END LOOP;

END PUT_CALENDAR_PROFILES;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_CALENDAR_ADJUSTMENTS
	(
	p_CALENDAR_ID IN NUMBER,
	p_ADJ_OP IN VARCHAR,
	p_ADJ_VAL IN NUMBER,
	p_DATE_FORMAT IN VARCHAR,
	p_ARGUMENTS IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_ARGUMENTS_TABLE GA.STRING_TABLE;
v_VALUES_TABLE GA.STRING_TABLE;
v_INDEX BINARY_INTEGER;
v_LOOP_COUNTER NUMBER := 0;

BEGIN

	p_STATUS := GA.SUCCESS;

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	UT.TOKENS_FROM_STRING(p_ARGUMENTS, ';', v_ARGUMENTS_TABLE);
	v_INDEX := v_ARGUMENTS_TABLE.FIRST;

	LOOP
		IF LENGTH(v_ARGUMENTS_TABLE(v_INDEX)) > 0 THEN

			UT.TOKENS_FROM_STRING(v_ARGUMENTS_TABLE(v_INDEX), ',', v_VALUES_TABLE);

			v_BEGIN_DATE := TO_DATE(v_VALUES_TABLE(1), p_DATE_FORMAT);
			v_END_DATE := TO_DATE(v_VALUES_TABLE(2), p_DATE_FORMAT);

			PUT_CALENDAR_ADJUSTMENT
				(
				p_CALENDAR_ID,
				v_BEGIN_DATE,
				v_END_DATE,
				p_ADJ_OP,
				p_ADJ_VAL,
				v_BEGIN_DATE,
				p_STATUS
				);

			IF p_STATUS < 0 THEN
				RETURN;
			END IF;

		END IF;

		v_LOOP_COUNTER := v_LOOP_COUNTER + 1;
		IF v_LOOP_COUNTER > 1000 THEN
			ERRS.RAISE(MSGCODES.c_ERR_RUNAWAY_LOOP, 'RUNAWAY LOOP IN CA.PUT_CALENDAR_ADJUSTMENTS PROCEDURE');
		END IF;
		EXIT WHEN v_INDEX = v_ARGUMENTS_TABLE.LAST;
		v_INDEX := v_ARGUMENTS_TABLE.NEXT(v_INDEX);

	END LOOP;

END PUT_CALENDAR_ADJUSTMENTS;
----------------------------------------------------------------------------------------------------
END CA;
/
