CREATE OR REPLACE PACKAGE ACCOUNT_SYNC IS

-- Author  : PMANNING
-- Created : 10/22/2010 7:35:41 AM
-- Revision : $Revision: 1.41 $
-- Purpose  : This package can be used to synchronize the Account data model with the ACCOUNT_SYNC_STAGING table.

FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE PURGE_ACCOUNT_SYNC_STAGING;

PROCEDURE PROCESS_ACCOUNT_SYNC_STAGING
	(
	p_MESSAGE OUT VARCHAR2,
    p_PROCESS_ID OUT VARCHAR2,
    p_PROCESS_STATUS OUT NUMBER,
	p_IS_FULL_SYNC IN NUMBER := 0,
	p_BEGIN_DATE IN DATE := NULL,
    p_TRACE_ON IN NUMBER := 0
	);

PROCEDURE PROCESS_ACCOUNT_SYNC_WITH_AGG
	(
	p_MESSAGE OUT VARCHAR2,
	p_IS_FULL_SYNC IN NUMBER := 0,
	p_BEGIN_DATE IN DATE := NULL,
    p_RESET_DATES IN NUMBER := 0,
    p_TRACE_ON IN NUMBER := 0
	);

PROCEDURE UNASSIGN_ENT_GRP_FOR_CATEGORY
    (
    p_ENTITY_ID NUMBER,
    p_DOMAIN_ID ENTITY_GROUP.ENTITY_DOMAIN_ID%TYPE,
    p_ENTITY_GROUP_CATEGORY ENTITY_GROUP.GROUP_CATEGORY%TYPE,
    p_EXCLUDE_ENTITY_GROUP_ID ENTITY_GROUP_ASSIGNMENT.ENTITY_GROUP_ID%TYPE,
    p_BEGIN_DATE DATE,
    p_END_DATE DATE
    );

c_ACCOUNT_SERVICE_ELECTRIC CONSTANT VARCHAR2(16) := 'Electric';
c_ACCOUNT_SERVICE_GAS CONSTANT VARCHAR2(16) := 'Gas';

c_ACCOUNT_SYNC_DELETE_MARKER CONSTANT VARCHAR2(16) := GET_DICTIONARY_VALUE('Delete String',GA.DEFAULT_MODEL,
                                                                            'Data Import','Account Sync');

c_ACCOUNT_SYNC_STATUS_SUCCESS CONSTANT VARCHAR2(16) := 'Success';
c_ACCOUNT_SYNC_STATUS_ERROR CONSTANT VARCHAR2(16) := 'Error';

END ACCOUNT_SYNC;
/
CREATE OR REPLACE PACKAGE BODY ACCOUNT_SYNC IS

c_TOU_TEMPLATE_PERIOD1 CONSTANT VARCHAR2(16) := 'Period 1';
c_TOU_TEMPLATE_PERIOD2 CONSTANT VARCHAR2(16) := 'Period 2';
c_TOU_TEMPLATE_PERIOD3 CONSTANT VARCHAR2(16) := 'Period 3';
c_TOU_TEMPLATE_PERIOD4 CONSTANT VARCHAR2(16) := 'Period 4';
c_TOU_TEMPLATE_PERIOD5 CONSTANT VARCHAR2(16) := 'Period 5';
c_EXTEND_DATE_RANGE    CONSTANT BOOLEAN      := FALSE;

g_GAS_MTR_ANC_SERV NUMBER_COLLECTION;
g_GAS_ACCT_ANC_SERV NUMBER_COLLECTION;
g_ELC_MTR_ANC_SERV NUMBER_COLLECTION;
g_ELC_ACCT_ANC_SERV NUMBER_COLLECTION;
g_GAS_CUST_ATTR_ID NUMBER_COLLECTION;
g_ELC_CUST_ATTR_ID NUMBER_COLLECTION;
g_GAS_CUST_ATTR_TYPE STRING_COLLECTION;
g_ELC_CUST_ATTR_TYPE STRING_COLLECTION;
g_ELC_ACT_GRP_CAT STRING_COLLECTION;
g_GAS_ACT_GRP_CAT STRING_COLLECTION;
g_ELC_ENT_GRP_CAT STRING_COLLECTION;
g_GAS_ENT_GRP_CAT STRING_COLLECTION;

--------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.41 $';
END WHAT_VERSION;
-----------------------------------------------------------------------------------------------
FUNCTION DEL_TO_NULL(p_STRING IN VARCHAR2) RETURN VARCHAR2 AS
BEGIN
	CASE p_STRING
		WHEN c_ACCOUNT_SYNC_DELETE_MARKER THEN
			RETURN NULL;
		ELSE
			RETURN p_STRING;
	END CASE;
END DEL_TO_NULL;
-----------------------------------------------------------------------------------------------
PROCEDURE PURGE_ACCOUNT_SYNC_STAGING AS
BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE ACCOUNT_SYNC_STAGING';
END PURGE_ACCOUNT_SYNC_STAGING;
-----------------------------------------------------------------------------------------------
FUNCTION VALIDATE_SYS_DICT_ENTITY
(
    p_SETTING_NAME IN VARCHAR2,
    p_ENTITY_DOMAIN_ID IN NUMBER,
    p_FIELD_NAME IN VARCHAR2,
    p_MODEL_ID IN NUMBER := 0,
    p_MODULE IN VARCHAR2 := '?',
    p_KEY1 IN VARCHAR2 := '?',
    p_KEY2 IN VARCHAR2 := '?',
    p_KEY3 IN VARCHAR2 := '?',
    p_FIELD_MANDATORY BOOLEAN := TRUE
) RETURN NUMBER IS

    v_IDENTIFIER VARCHAR2(128);
    v_ID NUMBER(9);

BEGIN

    v_IDENTIFIER := GET_DICTIONARY_VALUE(p_SETTING_NAME, p_MODEL_ID, p_MODULE, p_KEY1, p_KEY2, p_KEY3, 0);

    ASSERT(v_IDENTIFIER IS NOT NULL OR NOT p_FIELD_MANDATORY, 'A value was specified for ' || p_FIELD_NAME || ' but no corresponding entity identifier was '
        || 'found in the system settings.', MSGCODES.c_ERR_ARGUMENT);

    IF v_IDENTIFIER IS NOT NULL THEN
        v_ID := EI.GET_ID_FROM_IDENTIFIER(v_IDENTIFIER, p_ENTITY_DOMAIN_ID);
    END IF;

    RETURN v_ID;

END VALIDATE_SYS_DICT_ENTITY;
------------------------------------------------------------------------------------------
PROCEDURE VALIDATE_SYS_DICT_ATTRIBUTE
(
    p_SETTING_NAME IN VARCHAR2,
    p_FIELD_NAME IN VARCHAR2,
    p_ATTRIBUTE_ID OUT NUMBER,
    p_ATTRIBUTE_TYPE OUT VARCHAR2,
    p_MODEL_ID IN NUMBER := 0,
    p_MODULE IN VARCHAR2 := '?',
    p_KEY1 IN VARCHAR2 := '?',
    p_KEY2 IN VARCHAR2 := '?',
    p_KEY3 IN VARCHAR2 := '?',
    p_FIELD_MANDATORY BOOLEAN := TRUE
) AS

    v_IDENTIFIER VARCHAR2(128);

BEGIN

    v_IDENTIFIER := GET_DICTIONARY_VALUE(p_SETTING_NAME, p_MODEL_ID, p_MODULE, p_KEY1, p_KEY2, p_KEY3, 0);

    ASSERT(v_IDENTIFIER IS NOT NULL OR NOT p_FIELD_MANDATORY, 'A value was specified for ' || p_FIELD_NAME || ' but no corresponding attribute name was '
        || 'found in the system settings.', MSGCODES.c_ERR_ARGUMENT);

    IF v_IDENTIFIER IS NOT NULL THEN
        ID.ID_FOR_ENTITY_ATTRIBUTE(v_IDENTIFIER, EC.ED_ACCOUNT, NULL, FALSE, p_ATTRIBUTE_ID);

        ASSERT(NVL(p_ATTRIBUTE_ID, GA.NO_DATA_FOUND) <> GA.NO_DATA_FOUND, 'An Account Entity Attribute with the name ' || v_IDENTIFIER
            || ' could not be found but it was specified in the system dictionary for ' || p_SETTING_NAME, MSGCODES.c_ERR_ARGUMENT);

        SELECT EA.ATTRIBUTE_TYPE
        INTO p_ATTRIBUTE_TYPE
        FROM ENTITY_ATTRIBUTE EA
        WHERE EA.ATTRIBUTE_ID = p_ATTRIBUTE_ID;
    END IF;

END VALIDATE_SYS_DICT_ATTRIBUTE;
------------------------------------------------------------------------------------------
PROCEDURE VALIDATE_ATTRIBUTE_VALUE
(
    p_ATTRIBUTE_TYPE IN VARCHAR2,
    p_FIELD_NAME IN VARCHAR2,
    p_FIELD_VALUE IN VARCHAR2
) AS

    v_TEMP_NUM NUMBER;

BEGIN

    IF p_ATTRIBUTE_TYPE = CONSTANTS.ATTRIBUTE_TYPE_BOOL THEN
        ASSERT(UPPER(p_FIELD_VALUE) IN ('0', '1', 'F', 'T', 'Y', 'N'), 'The value given for ' || p_FIELD_NAME || ' ('
                || p_FIELD_VALUE || ') is invalid for boolean attributes.', MSGCODES.c_ERR_ARGUMENT);

    ELSIF p_ATTRIBUTE_TYPE IN (CONSTANTS.ATTRIBUTE_TYPE_INTEGER, CONSTANTS.ATTRIBUTE_TYPE_FLOAT) THEN
        BEGIN
            v_TEMP_NUM := TO_NUMBER(p_FIELD_VALUE);
        EXCEPTION
        WHEN OTHERS THEN
            ERRS.RAISE(MSGCODES.c_ERR_ARGUMENT, 'The attribute value given for ' || p_FIELD_NAME
                || ' (' || p_FIELD_VALUE ||  ') could not be converted into a number.');
        END;
    END IF;

END VALIDATE_ATTRIBUTE_VALUE;
------------------------------------------------------------------------------------------
PROCEDURE RESIZE (p_NUMBER_COLL IN OUT NOCOPY NUMBER_COLLECTION,
                  p_SIZE IN NUMBER) AS

BEGIN
    FOR v_IDX IN 1..p_SIZE LOOP
        p_NUMBER_COLL.EXTEND();
    END LOOP;
END RESIZE;
------------------------------------------------------------------------------------------
PROCEDURE RESIZE (p_STRING_COLL IN OUT NOCOPY STRING_COLLECTION,
                  p_SIZE IN NUMBER) AS

BEGIN
    FOR v_IDX IN 1..p_SIZE LOOP
        p_STRING_COLL.EXTEND();
    END LOOP;
END RESIZE;
------------------------------------------------------------------------------------------
FUNCTION VALIDATE_SYSTEM_DICT_CONFIG RETURN BOOLEAN IS

    v_RESULT BOOLEAN := TRUE;

BEGIN

   g_GAS_MTR_ANC_SERV := NUMBER_COLLECTION();
   RESIZE(g_GAS_MTR_ANC_SERV, 5);

   g_ELC_MTR_ANC_SERV := NUMBER_COLLECTION();
   RESIZE(g_ELC_MTR_ANC_SERV, 5);

   g_GAS_ACCT_ANC_SERV := NUMBER_COLLECTION();
   RESIZE(g_GAS_ACCT_ANC_SERV, 5);

   g_ELC_ACCT_ANC_SERV := NUMBER_COLLECTION();
   RESIZE(g_ELC_ACCT_ANC_SERV, 5);

   g_GAS_CUST_ATTR_ID := NUMBER_COLLECTION();
   RESIZE(g_GAS_CUST_ATTR_ID, 10);

   g_ELC_CUST_ATTR_ID := NUMBER_COLLECTION();
   RESIZE(g_ELC_CUST_ATTR_ID, 10);

   g_GAS_CUST_ATTR_TYPE := STRING_COLLECTION();
   RESIZE(g_GAS_CUST_ATTR_TYPE, 10);

   g_ELC_CUST_ATTR_TYPE := STRING_COLLECTION();
   RESIZE(g_ELC_CUST_ATTR_TYPE, 10);

   g_GAS_ACT_GRP_CAT := STRING_COLLECTION();
   RESIZE(g_GAS_ACT_GRP_CAT, 5);

   g_ELC_ACT_GRP_CAT := STRING_COLLECTION();
   RESIZE(g_ELC_ACT_GRP_CAT, 5);

   g_GAS_ENT_GRP_CAT := STRING_COLLECTION();
   RESIZE(g_GAS_ENT_GRP_CAT, 5);

   g_ELC_ENT_GRP_CAT := STRING_COLLECTION();
   RESIZE(g_ELC_ENT_GRP_CAT, 5);

   -- Gather System Dictionary IDs, serves dual purpose of validating system dictionary entities
    FOR v_IDX IN 1..5 LOOP
        BEGIN
            g_GAS_MTR_ANC_SERV(v_IDX) := VALIDATE_SYS_DICT_ENTITY('Ancillary Service ' || v_IDX,
                                     EC.ED_ANCILLARY_SERVICE,
                                     NULL,
                                     GA.GAS_MODEL,
                                     'Load Management',
                                     'Account Sync',
                                     'Meter Ancillary Services',
                                     p_FIELD_MANDATORY => FALSE);
        EXCEPTION
            WHEN OTHERS THEN
                ERRS.LOG_AND_CONTINUE;
                v_RESULT := FALSE;
        END;

        BEGIN
           g_ELC_MTR_ANC_SERV(v_IDX) := VALIDATE_SYS_DICT_ENTITY('Ancillary Service ' || v_IDX,
                                 EC.ED_ANCILLARY_SERVICE,
                                 NULL,
                                 GA.ELECTRIC_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Meter Ancillary Services',
                                 p_FIELD_MANDATORY => FALSE);
        EXCEPTION
        WHEN OTHERS THEN
            ERRS.LOG_AND_CONTINUE;
            v_RESULT := FALSE;
        END;

        BEGIN
           g_GAS_ACCT_ANC_SERV(v_IDX) := VALIDATE_SYS_DICT_ENTITY('Ancillary Service ' || v_IDX,
                                 EC.ED_ANCILLARY_SERVICE,
                                 NULL,
                                 GA.GAS_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Account Ancillary Services',
                                 p_FIELD_MANDATORY => FALSE);
        EXCEPTION
        WHEN OTHERS THEN
            ERRS.LOG_AND_CONTINUE;
            v_RESULT := FALSE;
        END;

        BEGIN
           g_ELC_ACCT_ANC_SERV(v_IDX) := VALIDATE_SYS_DICT_ENTITY('Ancillary Service ' || v_IDX,
                                 EC.ED_ANCILLARY_SERVICE,
                                 NULL,
                                 GA.ELECTRIC_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Account Ancillary Services',
                                 p_FIELD_MANDATORY => FALSE);
        EXCEPTION
        WHEN OTHERS THEN
            ERRS.LOG_AND_CONTINUE;
            v_RESULT := FALSE;
        END;

        g_GAS_ACT_GRP_CAT(v_IDX) :=  GET_DICTIONARY_VALUE('Category ' || v_IDX,
                                 GA.GAS_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Account Group Categories');

        IF NVL(LENGTH(g_GAS_ACT_GRP_CAT(v_IDX)),0) > 16 THEN
            LOGS.LOG_ERROR('The Accout Group Category ' || v_IDX || ' specified for Gas Accounts is too long (limit = 16 characters). '
                || 'Specified: ' || g_GAS_ACT_GRP_CAT(v_IDX) || ' Length: ' || LENGTH(g_GAS_ACT_GRP_CAT(v_IDX)));
            v_RESULT := FALSE;
        END IF;

        g_ELC_ACT_GRP_CAT(v_IDX) :=  GET_DICTIONARY_VALUE('Category ' || v_IDX,
                                 GA.ELECTRIC_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Account Group Categories');

        IF NVL(LENGTH(g_ELC_ACT_GRP_CAT(v_IDX)),0) > 16 THEN
            LOGS.LOG_ERROR('The Accout Group Category ' || v_IDX || ' specified for Electric Accounts is too long (limit = 16 characters).'
                || 'Specified: ' || g_ELC_ACT_GRP_CAT(v_IDX) || ' Length: ' || LENGTH(g_ELC_ACT_GRP_CAT(v_IDX)));
            v_RESULT := FALSE;
        END IF;

        g_GAS_ENT_GRP_CAT(v_IDX) :=  GET_DICTIONARY_VALUE('Category ' || v_IDX,
                                 GA.GAS_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Entity Group Categories');

        IF NVL(LENGTH(g_GAS_ENT_GRP_CAT(v_IDX)),0) > 32 THEN
            LOGS.LOG_ERROR('The Entity Group Category ' || v_IDX || ' specified for Gas Accounts is too long (limit = 32 characters).'
                || 'Specified: ' || g_GAS_ENT_GRP_CAT(v_IDX) || ' Length: ' || LENGTH(g_GAS_ENT_GRP_CAT(v_IDX)));
            v_RESULT := FALSE;
        END IF;

        g_ELC_ENT_GRP_CAT(v_IDX) :=  GET_DICTIONARY_VALUE('Category ' || v_IDX,
                                 GA.ELECTRIC_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Entity Group Categories');

        IF NVL(LENGTH(g_ELC_ENT_GRP_CAT(v_IDX)),0) > 32 THEN
            LOGS.LOG_ERROR('The Entity Group Category ' || v_IDX || ' specified for Electric Accounts is too long (limit = 32 characters).'
                || 'Specified: ' || g_ELC_ENT_GRP_CAT(v_IDX) || ' Length: ' || LENGTH(g_ELC_ENT_GRP_CAT(v_IDX)));
            v_RESULT := FALSE;
        END IF;
    END LOOP;

    FOR v_IDX IN 1..10 LOOP
        BEGIN
             VALIDATE_SYS_DICT_ATTRIBUTE('Attribute ' || v_IDX,
                                     'Temporal Attribute Value ' || v_IDX,
                                     g_ELC_CUST_ATTR_ID(v_IDX),
                                     g_ELC_CUST_ATTR_TYPE(v_IDX),
                                     GA.ELECTRIC_MODEL,
                                     'Load Management',
                                     'Account Sync',
                                     'Custom Attributes',
                                     p_FIELD_MANDATORY => FALSE);
        EXCEPTION
            WHEN OTHERS THEN
                ERRS.LOG_AND_CONTINUE;
                v_RESULT := FALSE;
        END;

        BEGIN
            VALIDATE_SYS_DICT_ATTRIBUTE('Attribute ' || v_IDX,
                                     'Temporal Attribute Value ' || v_IDX,
                                     g_GAS_CUST_ATTR_ID(v_IDX),
                                     g_GAS_CUST_ATTR_TYPE(v_IDX),
                                     GA.GAS_MODEL,
                                     'Load Management',
                                     'Account Sync',
                                     'Custom Attributes',
                                     p_FIELD_MANDATORY => FALSE);
        EXCEPTION
            WHEN OTHERS THEN
                ERRS.LOG_AND_CONTINUE;
                v_RESULT := FALSE;
        END;
    END LOOP;

    RETURN v_RESULT;
END VALIDATE_SYSTEM_DICT_CONFIG;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_FULL_SYNC(p_BEGIN_DATE DATE) AS

BEGIN
	ASSERT(p_BEGIN_DATE IS NOT NULL, 'Begin Date must be non-null in order to run the Full Sync.', MSGCODES.c_ERR_ARGUMENT);

	-- Delete records in the future
	-- Account
    DELETE FROM ACCOUNT_SUB_AGG_AGGREGATION X WHERE X.BEGIN_DATE >= p_BEGIN_DATE;
	DELETE FROM ACCOUNT_STATUS X WHERE X.BEGIN_DATE >= p_BEGIN_DATE;
	DELETE FROM ACCOUNT_SERVICE_LOCATION X WHERE X.BEGIN_DATE >= p_BEGIN_DATE;
	DELETE FROM ACCOUNT_EDC X WHERE X.BEGIN_DATE >= p_BEGIN_DATE;
	DELETE FROM ACCOUNT_ESP X WHERE X.BEGIN_DATE >= p_BEGIN_DATE;
	DELETE FROM ACCOUNT_CALENDAR X
		WHERE X.BEGIN_DATE >= p_BEGIN_DATE
		AND X.CASE_ID = GA.BASE_CASE_ID
		AND X.CALENDAR_TYPE IN (ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_SETTLEMENT);
	DELETE FROM ACCOUNT_LOSS_FACTOR X
		WHERE X.BEGIN_DATE >= p_BEGIN_DATE
		AND X.CASE_ID = GA.BASE_CASE_ID;
	DELETE FROM ACCOUNT_SCHEDULE_GROUP X WHERE X.BEGIN_DATE >= p_BEGIN_DATE;
	DELETE FROM CONTRACT_ASSIGNMENT X
		WHERE X.BEGIN_DATE >= p_BEGIN_DATE
		AND X.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT;
    DELETE FROM ACCOUNT_BILL_CYCLE X WHERE X.BEGIN_DATE >= p_BEGIN_DATE;
    DELETE FROM ACCOUNT_PROXY_DAY_METHOD X
		WHERE X.BEGIN_DATE >= p_BEGIN_DATE
		AND X.PROXY_DAY_METHOD_TYPE IN (ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST);
    DELETE FROM ACCOUNT_PRODUCT X
    	WHERE X.BEGIN_DATE >= p_BEGIN_DATE
        AND X.PRODUCT_TYPE IN (ACCOUNTS_METERS.c_PRODUCT_TYPE_REV_ABBR, ACCOUNTS_METERS.c_PRODUCT_TYPE_COST_ABBR);
    -- Account Ancillary Service (ignore Account's MODEL Id)
    -- Electric
    DELETE FROM ACCOUNT_ANCILLARY_SERVICE X
        WHERE X.ANCILLARY_SERVICE_ID IN (SELECT COLUMN_VALUE FROM TABLE(CAST(g_ELC_ACCT_ANC_SERV AS NUMBER_COLLECTION)))
            AND X.BEGIN_DATE >= p_BEGIN_DATE;
    -- Gas
    DELETE FROM ACCOUNT_ANCILLARY_SERVICE X
        WHERE X.ANCILLARY_SERVICE_ID IN (SELECT COLUMN_VALUE FROM TABLE(CAST(g_GAS_ACCT_ANC_SERV AS NUMBER_COLLECTION)))
            AND X.BEGIN_DATE >= p_BEGIN_DATE;
    DELETE FROM ENTITY_GROUP_ASSIGNMENT EGA
        WHERE EGA.ENTITY_GROUP_ID IN (SELECT EG.ENTITY_GROUP_ID
                                      FROM ENTITY_GROUP EG, TABLE(CAST(g_ELC_ENT_GRP_CAT AS STRING_COLLECTION)) X
                                      WHERE EG.GROUP_CATEGORY = X.COLUMN_VALUE
                                        AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT)
            AND EGA.BEGIN_DATE >= p_BEGIN_DATE
            AND EXISTS (SELECT 1 FROM ACCOUNT A WHERE A.ACCOUNT_ID = EGA.ENTITY_ID AND A.MODEL_ID = GA.ELECTRIC_MODEL);
    DELETE FROM ENTITY_GROUP_ASSIGNMENT EGA
        WHERE EGA.ENTITY_GROUP_ID IN (SELECT EG.ENTITY_GROUP_ID
                                      FROM ENTITY_GROUP EG, TABLE(CAST(g_GAS_ENT_GRP_CAT AS STRING_COLLECTION)) X
                                      WHERE EG.GROUP_CATEGORY = X.COLUMN_VALUE
                                        AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT)
            AND EGA.BEGIN_DATE >= p_BEGIN_DATE
            AND EXISTS (SELECT 1 FROM ACCOUNT A WHERE A.ACCOUNT_ID = EGA.ENTITY_ID AND A.MODEL_ID = GA.GAS_MODEL);

    -- All Account Group assignments (not temporal)
    DELETE FROM ACCOUNT_GROUP_ASSIGNMENT AGA
    WHERE AGA.ASSIGNMENT_CATEGORY IN (SELECT X.COLUMN_VALUE FROM TABLE(CAST(g_ELC_ACT_GRP_CAT AS STRING_COLLECTION)) X)
        AND EXISTS (SELECT 1 FROM ACCOUNT A WHERE A.ACCOUNT_ID = AGA.ACCOUNT_ID AND A.MODEL_ID = GA.ELECTRIC_MODEL);

    DELETE FROM ACCOUNT_GROUP_ASSIGNMENT AGA
    WHERE AGA.ASSIGNMENT_CATEGORY IN (SELECT X.COLUMN_VALUE FROM TABLE(CAST(g_GAS_ACT_GRP_CAT AS STRING_COLLECTION)) X)
        AND EXISTS (SELECT 1 FROM ACCOUNT A WHERE A.ACCOUNT_ID = AGA.ACCOUNT_ID AND A.MODEL_ID = GA.GAS_MODEL);


	-- Custom Attributes
	-- Electric Accounts
	DELETE FROM TEMPORAL_ENTITY_ATTRIBUTE X
		WHERE X.BEGIN_DATE >= p_BEGIN_DATE
		  AND X.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
		  AND X.ATTRIBUTE_ID IN (SELECT COLUMN_VALUE AS ATTRIBUTE_ID
		  						 FROM TABLE(CAST(g_ELC_CUST_ATTR_ID AS NUMBER_COLLECTION)))
		  AND EXISTS (SELECT 1
					  FROM ACCOUNT A
					  WHERE A.MODEL_ID = CONSTANTS.ELECTRIC_MODEL);
	-- Gas Accounts
	DELETE FROM TEMPORAL_ENTITY_ATTRIBUTE X
		WHERE X.BEGIN_DATE >= p_BEGIN_DATE
		  AND X.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
		  AND X.ATTRIBUTE_ID IN (SELECT COLUMN_VALUE AS ATTRIBUTE_ID
		  						 FROM TABLE(CAST(g_GAS_CUST_ATTR_ID AS NUMBER_COLLECTION)))
		  AND EXISTS (SELECT 1
		  			  FROM ACCOUNT A
					  WHERE A.MODEL_ID = CONSTANTS.GAS_MODEL);

	-- Meters
	DELETE FROM SERVICE_LOCATION_METER X WHERE X.BEGIN_DATE >= p_BEGIN_DATE;
	DELETE FROM METER_CALENDAR X
		WHERE X.BEGIN_DATE >= p_BEGIN_DATE
		AND X.CASE_ID = GA.BASE_CASE_ID
		AND X.CALENDAR_TYPE IN (ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_SETTLEMENT);
	DELETE FROM METER_LOSS_FACTOR X
		WHERE X.BEGIN_DATE >= p_BEGIN_DATE
		AND X.CASE_ID = GA.BASE_CASE_ID;
	DELETE FROM METER_SCHEDULE_GROUP X WHERE X.BEGIN_DATE >= p_BEGIN_DATE;
    -- Meter Ancillary Services (ignore Account's MODEL Id)
    --Electric
    DELETE FROM METER_ANCILLARY_SERVICE X
        WHERE X.ANCILLARY_SERVICE_ID IN (SELECT COLUMN_VALUE FROM TABLE(CAST(g_ELC_MTR_ANC_SERV AS NUMBER_COLLECTION)))
            AND X.BEGIN_DATE >= p_BEGIN_DATE;
    -- Gas
    DELETE FROM METER_ANCILLARY_SERVICE X
        WHERE X.ANCILLARY_SERVICE_ID IN (SELECT COLUMN_VALUE FROM TABLE(CAST(g_GAS_MTR_ANC_SERV AS NUMBER_COLLECTION)))
            AND X.BEGIN_DATE >= p_BEGIN_DATE;
	-- Truncate records that extend past the p_BEGIN_DATE
	-- [BZ28669] added where clauses to UPDATE statements below so that aggregate account end dates are not affected
	-- Account
	UPDATE ACCOUNT_SUB_AGG_AGGREGATION X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE ACCOUNT_STATUS X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE ACCOUNT_SERVICE_LOCATION X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE ACCOUNT_EDC X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE ACCOUNT_ESP X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE ACCOUNT_CALENDAR X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
          AND X.CASE_ID = GA.BASE_CASE_ID
          AND X.CALENDAR_TYPE IN (ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_SETTLEMENT)
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE ACCOUNT_LOSS_FACTOR X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
		      AND X.CASE_ID = GA.BASE_CASE_ID
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE ACCOUNT_SCHEDULE_GROUP X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE CONTRACT_ASSIGNMENT X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
		      AND X.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.OWNER_ENTITY_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
  UPDATE ACCOUNT_BILL_CYCLE X
        SET X.END_DATE = p_BEGIN_DATE - 1
        WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
  UPDATE ACCOUNT_PROXY_DAY_METHOD X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
		      AND X.PROXY_DAY_METHOD_TYPE IN (ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST)
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
  UPDATE ACCOUNT_PRODUCT X
      SET X.END_DATE = p_BEGIN_DATE - 1
    	WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
        AND X.PRODUCT_TYPE IN (ACCOUNTS_METERS.c_PRODUCT_TYPE_REV_ABBR, ACCOUNTS_METERS.c_PRODUCT_TYPE_COST_ABBR)
        AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE ACCOUNT_ANCILLARY_SERVICE X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
          AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.ACCOUNT_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
  UPDATE ENTITY_GROUP_ASSIGNMENT EGA
        SET EGA.END_DATE = p_BEGIN_DATE - 1
        WHERE EGA.ENTITY_GROUP_ID IN (SELECT EG.ENTITY_GROUP_ID
                                      FROM ENTITY_GROUP EG, TABLE(CAST(g_ELC_ENT_GRP_CAT AS STRING_COLLECTION)) X
                                      WHERE EG.GROUP_CATEGORY = X.COLUMN_VALUE
                                        AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT)
            AND EGA.BEGIN_DATE >= p_BEGIN_DATE
            AND EXISTS (SELECT 1 FROM ACCOUNT A WHERE A.ACCOUNT_ID = EGA.ENTITY_ID AND A.MODEL_ID = GA.ELECTRIC_MODEL)
            AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = EGA.ENTITY_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
  UPDATE ENTITY_GROUP_ASSIGNMENT EGA
        SET EGA.END_DATE = p_BEGIN_DATE - 1
        WHERE EGA.ENTITY_GROUP_ID IN (SELECT EG.ENTITY_GROUP_ID
                                      FROM ENTITY_GROUP EG, TABLE(CAST(g_GAS_ENT_GRP_CAT AS STRING_COLLECTION)) X
                                      WHERE EG.GROUP_CATEGORY = X.COLUMN_VALUE
                                        AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT)
            AND EGA.BEGIN_DATE >= p_BEGIN_DATE
            AND EXISTS (SELECT 1 FROM ACCOUNT A WHERE A.ACCOUNT_ID = EGA.ENTITY_ID AND A.MODEL_ID = GA.GAS_MODEL)
            AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = EGA.ENTITY_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);

	-- Custom Attributes
	UPDATE TEMPORAL_ENTITY_ATTRIBUTE X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
		AND X.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
		AND X.ATTRIBUTE_ID IN (SELECT COLUMN_VALUE AS ATTRIBUTE_ID
		  						 FROM TABLE(CAST(g_ELC_CUST_ATTR_ID AS NUMBER_COLLECTION)))
		AND EXISTS (SELECT 1
					FROM ACCOUNT A
					WHERE A.MODEL_ID = CONSTANTS.ELECTRIC_MODEL)
    AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.OWNER_ENTITY_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	UPDATE TEMPORAL_ENTITY_ATTRIBUTE X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
		AND X.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
		AND X.ATTRIBUTE_ID IN (SELECT COLUMN_VALUE AS ATTRIBUTE_ID
		  						 FROM TABLE(CAST(g_GAS_CUST_ATTR_ID AS NUMBER_COLLECTION)))
		AND EXISTS (SELECT 1
					FROM ACCOUNT A
					WHERE A.MODEL_ID = CONSTANTS.GAS_MODEL)
    AND NOT EXISTS (SELECT 1 FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = X.OWNER_ENTITY_ID AND ACCOUNT.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_AGGREGATE);
	-- Meters
	UPDATE SERVICE_LOCATION_METER X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE;
	UPDATE METER_CALENDAR X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
		AND X.CASE_ID = GA.BASE_CASE_ID
		AND X.CALENDAR_TYPE IN (ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST, ACCOUNTS_METERS.c_CALENDAR_TYPE_SETTLEMENT);
	UPDATE METER_LOSS_FACTOR X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
		AND X.CASE_ID = GA.BASE_CASE_ID;
	UPDATE METER_SCHEDULE_GROUP X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE;
	UPDATE METER_ANCILLARY_SERVICE X
		SET X.END_DATE = p_BEGIN_DATE - 1
		WHERE NVL(X.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE;
END PROCESS_FULL_SYNC;
-----------------------------------------------------------------------------------------------
FUNCTION IS_DELETING(p_VALUES IN STRING_COLLECTION) RETURN BOOLEAN AS
v_IDX NUMBER;
v_FOUND_DELETE_MARKER BOOLEAN := FALSE;
v_FOUND_NON_NULL BOOLEAN := FALSE;
BEGIN
	IF p_VALUES IS NOT NULL THEN
		v_IDX := p_VALUES.FIRST;
		WHILE p_VALUES.EXISTS(v_IDX) LOOP
			IF p_VALUES(v_IDX) = c_ACCOUNT_SYNC_DELETE_MARKER THEN
				v_FOUND_DELETE_MARKER := TRUE;
			ELSIF p_VALUES(v_IDX) IS NOT NULL THEN
				v_FOUND_NON_NULL := TRUE;
			END IF;
			v_IDX := p_VALUES.NEXT(v_IDX);
		END LOOP;
	END IF;

	RETURN v_FOUND_DELETE_MARKER AND NOT v_FOUND_NON_NULL;
END IS_DELETING;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT
(
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
p_ACCOUNT_ID OUT NUMBER
) AS
v_ACCOUNT ACCOUNT%ROWTYPE;
BEGIN
	p_ACCOUNT_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT,EC.ED_ACCOUNT,1);

	IF p_ACCOUNT_ID IS NOT NULL AND p_ACCOUNT_ID > 0 THEN
		SELECT *
		INTO v_ACCOUNT
		FROM ACCOUNT A
		WHERE A.ACCOUNT_ID = p_ACCOUNT_ID;
	ELSE
		p_ACCOUNT_ID := 0;
	END IF;

   IO.PUT_ACCOUNT(p_ACCOUNT_ID,
          p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_NAME,
          DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ALIAS),
          DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_DESC),
          p_ACCOUNT_ID,
          DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_DUNS_NUMBER),
          p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT,
          p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION,
          DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SIC_CODE),
          p_ACCOUNT_SYNC_STAGING_REC.METER_TYPE,
          v_ACCOUNT.ACCOUNT_METER_EXT_IDENTIFIER,
          NULL, -- p_ACCOUNT_DISPLAY_NAME -- This is handled by a trigger on the ACCOUNT table.
          NVL(v_ACCOUNT.ACCOUNT_BILL_OPTION, CONSTANTS.UNDEFINED_ATTRIBUTE),
          NVL(v_ACCOUNT.ACCOUNT_ROLLUP_ID, CONSTANTS.NOT_ASSIGNED),
          NVL(v_ACCOUNT.IS_EXTERNAL_INTERVAL_USAGE, 0),
          NVL(v_ACCOUNT.IS_EXTERNAL_BILLED_USAGE, 0),
          NVL(v_ACCOUNT.IS_AGGREGATE_ACCOUNT, 0),
          p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IS_UFE_PARTICIPANT,
          NVL(v_ACCOUNT.IS_CREATE_SETTLEMENT_PROFILE, 0),
          NVL(v_ACCOUNT.IS_EXTERNAL_FORECAST, 0),
          p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IS_SUB_AGGREGATE,
          NVL(v_ACCOUNT.TX_SERVICE_TYPE_ID, CONSTANTS.NOT_ASSIGNED),
          p_ACCOUNT_SYNC_STAGING_REC.USE_TOU_USAGE_FACTOR,
          CASE p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE
                 WHEN c_ACCOUNT_SERVICE_ELECTRIC THEN 1
                 WHEN c_ACCOUNT_SERVICE_GAS THEN 2
          END);

	IF p_ACCOUNT_ID IS NULL OR p_ACCOUNT_ID <= 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'Account could not be created for ' ||
				 p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT);
	END IF;
END PROCESS_ACCOUNT;
------------------------------------------------------------------------------------------
FUNCTION IS_DELETING_SERVICE_LOCATION (p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_NAME,
                                          p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_ALIAS,
                                          p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_DESC,
                                          p_ACCOUNT_SYNC_STAGING_REC.LATITUDE,
                                          p_ACCOUNT_SYNC_STAGING_REC.LONGITUDE,
                                          p_ACCOUNT_SYNC_STAGING_REC.TIME_ZONE,
                                          p_ACCOUNT_SYNC_STAGING_REC.WEATHER_STATION_IDENT,
                                          p_ACCOUNT_SYNC_STAGING_REC.SQUARE_FOOTAGE,
                                          p_ACCOUNT_SYNC_STAGING_REC.ANNUAL_CONSUMPTION,
                                          p_ACCOUNT_SYNC_STAGING_REC.SUMMER_CONSUMPTION,
                                          p_ACCOUNT_SYNC_STAGING_REC.SERVICE_ZONE_IDENT,
                                          p_ACCOUNT_SYNC_STAGING_REC.SERVICE_POINT_IDENT,
                                          p_ACCOUNT_SYNC_STAGING_REC.SUB_STATION_IDENT,
                                          p_ACCOUNT_SYNC_STAGING_REC.FEEDER_IDENT,
                                          p_ACCOUNT_SYNC_STAGING_REC.FEEDER_SEGMENT_IDENT,
                                          p_ACCOUNT_SYNC_STAGING_REC.PREMISE_EDC_IDENT,
                                          p_ACCOUNT_SYNC_STAGING_REC.PREMISE_ESP_IDENT));
END IS_DELETING_SERVICE_LOCATION;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_SERVICE_LOCATION(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
	RETURN NOT IS_DELETING_SERVICE_LOCATION(p_ACCOUNT_SYNC_STAGING_REC) AND
        (p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_NAME IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_ALIAS IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_DESC IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.LATITUDE IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.LONGITUDE IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.TIME_ZONE IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.WEATHER_STATION_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.SQUARE_FOOTAGE IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.ANNUAL_CONSUMPTION IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.SUMMER_CONSUMPTION IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.SERVICE_ZONE_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.SERVICE_POINT_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.SUB_STATION_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.FEEDER_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.FEEDER_SEGMENT_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.PREMISE_EDC_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.PREMISE_ESP_IDENT IS NOT NULL);
END IS_PROCESSING_SERVICE_LOCATION;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_SERVICE_LOCATION
(
p_ACCOUNT_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
p_IS_FULL_SYNC IN NUMBER,
p_SERVICE_LOCATION_ID OUT NUMBER
) AS
v_SERVICE_LOCATION SERVICE_LOCATION%ROWTYPE;
BEGIN
	IF IS_PROCESSING_SERVICE_LOCATION(p_ACCOUNT_SYNC_STAGING_REC) THEN
		p_SERVICE_LOCATION_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT,EC.ED_SERVICE_LOCATION,1);

		IF p_SERVICE_LOCATION_ID IS NOT NULL AND p_SERVICE_LOCATION_ID > 0 THEN
			SELECT *
			INTO v_SERVICE_LOCATION
			FROM SERVICE_LOCATION A
			WHERE A.SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID;
		ELSE
			p_SERVICE_LOCATION_ID := 0;
		END IF;

		IO.PUT_SERVICE_LOCATION(p_SERVICE_LOCATION_ID,
			p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_NAME,
			DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_ALIAS),
			DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_DESC),
			p_SERVICE_LOCATION_ID,
			DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.LATITUDE),
			DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.LONGITUDE),
			DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.TIME_ZONE),
			p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT,
			NVL(v_SERVICE_LOCATION.IS_EXTERNAL_BILLED_USAGE,0),
			NVL(v_SERVICE_LOCATION.IS_METER_ALLOCATION,0),
			NVL(EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_POINT_IDENT, EC.ED_SERVICE_POINT, 1), CONSTANTS.NOT_ASSIGNED),
			NVL(EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.WEATHER_STATION_IDENT, EC.ED_WEATHER_STATION, 1), CONSTANTS.NOT_ASSIGNED),
			v_SERVICE_LOCATION.BUSINESS_ROLLUP_ID,
			v_SERVICE_LOCATION.GEOGRAPHIC_ROLLUP_ID,
			p_ACCOUNT_SYNC_STAGING_REC.SQUARE_FOOTAGE,
			p_ACCOUNT_SYNC_STAGING_REC.ANNUAL_CONSUMPTION,
			p_ACCOUNT_SYNC_STAGING_REC.SUMMER_CONSUMPTION,
			NVL(EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_ZONE_IDENT, EC.ED_SERVICE_ZONE, 1), CONSTANTS.NOT_ASSIGNED),
			NVL(EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SUB_STATION_IDENT, EC.ED_SUB_STATION, 1), CONSTANTS.NOT_ASSIGNED),
			NVL(EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.FEEDER_IDENT, EC.ED_TX_FEEDER, 1), CONSTANTS.NOT_ASSIGNED),
			NVL(EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.FEEDER_SEGMENT_IDENT, EC.ED_TX_FEEDER_SEGMENT, 1), CONSTANTS.NOT_ASSIGNED));

		IF p_SERVICE_LOCATION_ID IS NOT NULL AND p_SERVICE_LOCATION_ID > 0 THEN
			UT.PUT_TEMPORAL_DATA('ACCOUNT_SERVICE_LOCATION',
				 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
				 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
				 TRUE,
				 TRUE,
				 'ACCOUNT_ID',
				 p_ACCOUNT_ID,
				 TRUE,
				 'SERVICE_LOCATION_ID',
				 p_SERVICE_LOCATION_ID,
				 TRUE,
				 'EDC_IDENTIFIER',
				 UT.GET_LITERAL_FOR_STRING(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.PREMISE_EDC_IDENT)),
				 FALSE,
				 'ESP_IDENTIFIER',
				 UT.GET_LITERAL_FOR_STRING(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.PREMISE_ESP_IDENT)),
				 FALSE,
				 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
		ELSE
			ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'Service Location could not be created for ' ||
				 p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT);
		END IF;
	ELSIF IS_DELETING_SERVICE_LOCATION(p_ACCOUNT_SYNC_STAGING_REC) THEN
		IF p_IS_FULL_SYNC = 0 THEN
			LOGS.LOG_DEBUG_MORE_DETAIL('Deleting ACCOUNT_SERVICE_LOCATION for ACCOUNT = '
					|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || ' and SERVICE_LOCATION = '
					|| p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT || '. Delete marker found.');

				p_SERVICE_LOCATION_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT,EC.ED_SERVICE_LOCATION);

				UT.DELETE_TEMPORAL_DATA('ACCOUNT_SERVICE_LOCATION',
										p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
										p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
										'ACCOUNT_ID',
										p_ACCOUNT_ID,
										'SERVICE_LOCATION_ID',
										p_SERVICE_LOCATION_ID);
		END IF;
    ELSE
		LOGS.LOG_DEBUG('Skip SERVICE_LOCATION for ACCOUNT = '
				|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. SERVICE_LOCATION values are all null.');
	END IF;
END PROCESS_SERVICE_LOCATION;
------------------------------------------------------------------------------------------
FUNCTION IS_DELETING_METER(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.METER_NAME,
                                        p_ACCOUNT_SYNC_STAGING_REC.METER_ALIAS,
                                        p_ACCOUNT_SYNC_STAGING_REC.METER_DESC,
                                        p_ACCOUNT_SYNC_STAGING_REC.METER_STATUS,
                                        p_ACCOUNT_SYNC_STAGING_REC.METER_INTERVAL,
                                        p_ACCOUNT_SYNC_STAGING_REC.METER_UNIT,
                                        p_ACCOUNT_SYNC_STAGING_REC.METER_EDC_IDENT,
                                        p_ACCOUNT_SYNC_STAGING_REC.METER_ESP_IDENT,
                                        p_ACCOUNT_SYNC_STAGING_REC.METER_TYPE,
                                        p_ACCOUNT_SYNC_STAGING_REC.USE_TOU_USAGE_FACTOR));
END IS_DELETING_METER;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_METER(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
	RETURN NOT IS_DELETING_METER(p_ACCOUNT_SYNC_STAGING_REC)
        AND (p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.METER_NAME IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.METER_ALIAS IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.METER_DESC IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.METER_STATUS IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.METER_INTERVAL IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.METER_UNIT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.METER_EDC_IDENT IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.METER_ESP_IDENT IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.METER_TYPE IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.USE_TOU_USAGE_FACTOR IS NOT NULL);
END IS_PROCESSING_METER;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_METER
    (
    p_SERVICE_LOCATION_ID IN NUMBER,
    p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
	p_IS_FULL_SYNC IN NUMBER,
    p_METER_ID OUT NUMBER
    ) AS
v_METER METER%ROWTYPE;
BEGIN
	IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER THEN
        IF IS_PROCESSING_METER(p_ACCOUNT_SYNC_STAGING_REC) THEN
            p_METER_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT,EC.ED_METER,1);

            IF p_METER_ID IS NOT NULL AND p_METER_ID > 0 THEN
                SELECT *
                INTO v_METER
                FROM METER M
                WHERE M.METER_ID = p_METER_ID;
            ELSE
                p_METER_ID := 0;
            END IF;

            IO.PUT_METER(p_METER_ID,
                NVL(EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.MRSP_IDENT, EC.ED_MRSP, 1), CONSTANTS.NOT_ASSIGNED),
                p_ACCOUNT_SYNC_STAGING_REC.METER_NAME,
                DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.METER_ALIAS),
                DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.METER_DESC),
                p_METER_ID,
                p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT,
                p_ACCOUNT_SYNC_STAGING_REC.METER_STATUS,
                DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.METER_INTERVAL),
                DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.METER_TYPE),
                DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.METER_UNIT),
                NVL(v_METER.IS_EXTERNAL_INTERVAL_USAGE,0),
                NVL(v_METER.IS_EXTERNAL_BILLED_USAGE,0),
                NVL(v_METER.IS_EXTERNAL_FORECAST,0),
                p_ACCOUNT_SYNC_STAGING_REC.USE_TOU_USAGE_FACTOR);

            IF p_METER_ID IS NOT NULL AND p_METER_ID > 0 THEN
                UT.PUT_TEMPORAL_DATA('SERVICE_LOCATION_METER',
                     p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                     p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                     TRUE,
                     TRUE,
                     'SERVICE_LOCATION_ID',
                     p_SERVICE_LOCATION_ID,
                     TRUE,
                     'METER_ID',
                     p_METER_ID,
                     TRUE,
                     'EDC_IDENTIFIER',
                     UT.GET_LITERAL_FOR_STRING(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.METER_EDC_IDENT)),
                     FALSE,
                     'ESP_IDENTIFIER',
                     UT.GET_LITERAL_FOR_STRING(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.METER_ESP_IDENT)),
                     FALSE,
					 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
            ELSE
                ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'Meter could not be created for ' ||
                     p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT);
            END IF;
       ELSIF IS_DELETING_METER(p_ACCOUNT_SYNC_STAGING_REC) THEN
            IF p_IS_FULL_SYNC = 0 THEN
				p_METER_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT,EC.ED_METER,1);

				UT.DELETE_TEMPORAL_DATA('SERVICE_LOCATION_METER',
						 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
						 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
						 'SERVICE_LOCATION_ID',
						 p_SERVICE_LOCATION_ID,
						 'METER_ID',
						 p_METER_ID);
			 	END IF;
       END IF;
	ELSE
		LOGS.LOG_DEBUG('Skip METER for ACCOUNT = '
				|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Account Model option is not Meter.');
	END IF;
END PROCESS_METER;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT_STATUS
(
p_ACCOUNT_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE
) AS
BEGIN
	UT.PUT_TEMPORAL_DATA('ACCOUNT_STATUS',
						 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
						 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
						 TRUE,
						 TRUE,
						 'ACCOUNT_ID',
						 p_ACCOUNT_ID,
						 TRUE,
						 'STATUS_NAME',
						 UT.GET_LITERAL_FOR_STRING(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_STATUS),
						 FALSE,
						 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
END PROCESS_ACCOUNT_STATUS;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_ACCOUNT_EDC(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
	RETURN p_ACCOUNT_SYNC_STAGING_REC.EDC_IDENT IS NOT NULL OR
			p_ACCOUNT_SYNC_STAGING_REC.EDC_ACCOUNT_NUMBER IS NOT NULL OR
			p_ACCOUNT_SYNC_STAGING_REC.EDC_STRATA IS NOT NULL OR
			p_ACCOUNT_SYNC_STAGING_REC.EDC_RATE_CLASS IS NOT NULL;
END IS_PROCESSING_ACCOUNT_EDC;
------------------------------------------------------------------------------------------
FUNCTION IS_DELETING_ACCOUNT_EDC(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
	RETURN IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.EDC_IDENT,
											p_ACCOUNT_SYNC_STAGING_REC.EDC_ACCOUNT_NUMBER,
											p_ACCOUNT_SYNC_STAGING_REC.EDC_STRATA,
											p_ACCOUNT_SYNC_STAGING_REC.EDC_RATE_CLASS));
END IS_DELETING_ACCOUNT_EDC;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT_EDC
(
p_ACCOUNT_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
p_IS_FULL_SYNC IN NUMBER
) AS
v_EDC_ID EDC.EDC_ID%TYPE;
BEGIN
	IF IS_PROCESSING_ACCOUNT_EDC(p_ACCOUNT_SYNC_STAGING_REC) THEN
		IF IS_DELETING_ACCOUNT_EDC(p_ACCOUNT_SYNC_STAGING_REC) THEN
			IF p_IS_FULL_SYNC = 0 THEN
				LOGS.LOG_DEBUG_MORE_DETAIL('Deleting ACCOUNT_EDC for ACCOUNT = '
					|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Delete marker found.');

				UT.DELETE_TEMPORAL_DATA('ACCOUNT_EDC',
										p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
										p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
										'ACCOUNT_ID',
										p_ACCOUNT_ID);
			END IF;
		ELSE
			v_EDC_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.EDC_IDENT,EC.ED_EDC);

			-- Note, As of 10/26, EDC is a key column in the ACCOUNT_EDC table
			-- However, we should not treat it as a key column during this sync process
			UT.PUT_TEMPORAL_DATA('ACCOUNT_EDC',
								 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
								 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
								 TRUE,
								 TRUE,
								 'ACCOUNT_ID',
								 p_ACCOUNT_ID,
								 TRUE,
								 'EDC_ID',
								 v_EDC_ID,
								 FALSE,
								 'EDC_ACCOUNT_NUMBER',
								 UT.GET_LITERAL_FOR_STRING(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.EDC_ACCOUNT_NUMBER)),
								 FALSE,
								 'EDC_RATE_CLASS',
								 UT.GET_LITERAL_FOR_STRING(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.EDC_RATE_CLASS)),
								 FALSE,
								 'EDC_STRATA',
								 UT.GET_LITERAL_FOR_STRING(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.EDC_STRATA)),
								 FALSE,
								 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
		END IF;
	ELSE
		LOGS.LOG_DEBUG('Skip ACCOUNT_EDC for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. ACCOUNT_EDC values are all null.');
	END IF;
END PROCESS_ACCOUNT_EDC;
------------------------------------------------------------------------------------------
FUNCTION IS_DELETING_BILL_CYCLE(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.BILL_CYCLE_IDENT,
                                         p_ACCOUNT_SYNC_STAGING_REC.BILLING_AGENT));
END IS_DELETING_BILL_CYCLE;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_BILL_CYCLE(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN (p_ACCOUNT_SYNC_STAGING_REC.BILL_CYCLE_IDENT IS NOT NULL OR
             p_ACCOUNT_SYNC_STAGING_REC.BILLING_AGENT IS NOT NULL);
END IS_PROCESSING_BILL_CYCLE;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_ACCOUNT_ESP(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
	RETURN p_ACCOUNT_SYNC_STAGING_REC.ESP_IDENT IS NOT NULL OR
			p_ACCOUNT_SYNC_STAGING_REC.POOL_IDENT IS NOT NULL OR
			p_ACCOUNT_SYNC_STAGING_REC.ESP_ACCOUNT_NUMBER IS NOT NULL;
END IS_PROCESSING_ACCOUNT_ESP;
------------------------------------------------------------------------------------------
FUNCTION IS_DELETING_ACCOUNT_ESP(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
	RETURN IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.ESP_IDENT,
									p_ACCOUNT_SYNC_STAGING_REC.POOL_IDENT,
									p_ACCOUNT_SYNC_STAGING_REC.ESP_ACCOUNT_NUMBER));
END IS_DELETING_ACCOUNT_ESP;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_USAGE_FACTORS(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL2 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL3 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL4 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL5 IS NOT NULL;
END IS_PROCESSING_USAGE_FACTORS;
------------------------------------------------------------------------------------------
FUNCTION IS_DELETING_USAGE_FACTORS(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN FALSE;
END IS_DELETING_USAGE_FACTORS;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT_ESP
(
p_ACCOUNT_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
p_IS_FULL_SYNC IN NUMBER
) AS
v_ESP_ID ESP.ESP_ID%TYPE;
v_POOL_ID POOL.POOL_ID%TYPE;
BEGIN
	IF IS_PROCESSING_ACCOUNT_ESP(p_ACCOUNT_SYNC_STAGING_REC) THEN
		IF IS_DELETING_ACCOUNT_ESP(p_ACCOUNT_SYNC_STAGING_REC) THEN
			IF p_IS_FULL_SYNC = 0 THEN
				LOGS.LOG_DEBUG_MORE_DETAIL('Deleting ACCOUNT_ESP for ACCOUNT = '
					|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Delete marker found.');

				UT.DELETE_TEMPORAL_DATA('ACCOUNT_ESP',
										p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
										p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
										'ACCOUNT_ID',
										p_ACCOUNT_ID);
			END IF;
		ELSE
			v_ESP_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.ESP_IDENT,EC.ED_ESP);

			v_POOL_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.POOL_IDENT,EC.ED_POOL, 1);

            -- Note, ESP and POOL are key columns in the ACCOUNT_ESP table
            -- However, we should not treat them as key columns during this sync process
            -- An Account can only sync with one ESP/Pool relationship
            UT.PUT_TEMPORAL_DATA('ACCOUNT_ESP',
                             p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                             p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                             TRUE,
                             TRUE,
                             'ACCOUNT_ID',
                             p_ACCOUNT_ID,
                             TRUE,
                             'ESP_ID',
                             v_ESP_ID,
                             FALSE,
                             'POOL_ID',
                             NVL(v_POOL_ID, CONSTANTS.NOT_ASSIGNED),
                             FALSE,
                             'ESP_ACCOUNT_NUMBER',
                             UT.GET_LITERAL_FOR_STRING(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ESP_ACCOUNT_NUMBER)),
                             FALSE,
							 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
		END IF;
	ELSE
		LOGS.LOG_DEBUG('Skip ACCOUNT_ESP for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. ACCOUNT_ESP values are all null.');
	END IF;
END PROCESS_ACCOUNT_ESP;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_BILL_CYCLE
(
p_ACCOUNT_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
p_IS_FULL_SYNC IN NUMBER
) AS
v_BILL_CYCLE_ID BILL_CYCLE.BILL_CYCLE_ID%TYPE;
BEGIN
	IF IS_PROCESSING_BILL_CYCLE(p_ACCOUNT_SYNC_STAGING_REC) THEN
		IF IS_DELETING_BILL_CYCLE(p_ACCOUNT_SYNC_STAGING_REC) THEN
			IF p_IS_FULL_SYNC = 0 THEN
				LOGS.LOG_DEBUG_MORE_DETAIL('Deleting ACCOUNT_BILL_CYCLE for ACCOUNT = '
					|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Delete marker found.');

				UT.DELETE_TEMPORAL_DATA('ACCOUNT_BILL_CYCLE',
										p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
										p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
										'ACCOUNT_ID',
										p_ACCOUNT_ID);
			END IF;
		ELSE
			v_BILL_CYCLE_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.BILL_CYCLE_IDENT,EC.ED_BILL_CYCLE);

            UT.PUT_TEMPORAL_DATA('ACCOUNT_BILL_CYCLE',
                             p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                             p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                             TRUE,
                             TRUE,
                             'ACCOUNT_ID',
                             p_ACCOUNT_ID,
                             TRUE,
                             'BILL_CYCLE_ID',
                             v_BILL_CYCLE_ID,
                             FALSE,
                             'BILL_CYCLE_ENTITY',
                             UT.GET_LITERAL_FOR_STRING(p_ACCOUNT_SYNC_STAGING_REC.BILLING_AGENT),
                             FALSE,
							 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
		END IF;
	ELSE
		LOGS.LOG_DEBUG('Skip ACCOUNT_BILL_CYCLE for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. ACCOUNT_ESP values are all null.');
	END IF;
END PROCESS_BILL_CYCLE;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_LOSS_FACTOR
(
p_ACCOUNT_ID IN NUMBER,
p_METER_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
p_IS_FULL_SYNC IN NUMBER
) AS
v_LOSS_FACTOR_ID LOSS_FACTOR.LOSS_FACTOR_ID%TYPE;
BEGIN


    IF p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER THEN
            IF IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT)) THEN
                IF p_IS_FULL_SYNC = 0 THEN
					LOGS.LOG_DEBUG_MORE_DETAIL('Deleting LOSS_FACTOR for METER = '
						|| p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT || '. Delete marker found.');

					UT.DELETE_TEMPORAL_DATA('METER_LOSS_FACTOR',
											p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
											p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
											'METER_ID',
											p_METER_ID,
											'CASE_ID',
											GA.BASE_CASE_ID);
				END IF;
            ELSE
                v_LOSS_FACTOR_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT,EC.ED_LOSS_FACTOR);

                UT.PUT_TEMPORAL_DATA('METER_LOSS_FACTOR',
                                 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                 TRUE,
                                 TRUE,
                                 'METER_ID',
                                 p_METER_ID,
                                 TRUE,
                                 'CASE_ID',
                                 GA.BASE_CASE_ID,
                                 TRUE,
                                 'LOSS_FACTOR_ID',
                                 v_LOSS_FACTOR_ID,
                                 FALSE,
								 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
            END IF;
        ELSE
            IF IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT)) THEN
                IF p_IS_FULL_SYNC = 0 THEN
					LOGS.LOG_DEBUG_MORE_DETAIL('Deleting LOSS_FACTOR for ACCOUNT = '
						|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Delete marker found.');

					UT.DELETE_TEMPORAL_DATA('ACCOUNT_LOSS_FACTOR',
											p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
											p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
											'ACCOUNT_ID',
											p_ACCOUNT_ID,
											'CASE_ID',
											GA.BASE_CASE_ID);
				END IF;
            ELSE
                v_LOSS_FACTOR_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT,EC.ED_LOSS_FACTOR);

                UT.PUT_TEMPORAL_DATA('ACCOUNT_LOSS_FACTOR',
                                 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                 TRUE,
                                 TRUE,
                                 'ACCOUNT_ID',
                                 p_ACCOUNT_ID,
                                 TRUE,
                                 'CASE_ID',
                                 GA.BASE_CASE_ID,
                                 TRUE,
                                 'LOSS_FACTOR_ID',
                                 v_LOSS_FACTOR_ID,
                                 FALSE,
								 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
            END IF;
        END IF;
   ELSE
		LOGS.LOG_DEBUG('Skip LOSS_FACTOR for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. LOSS_FACTOR value is null.');
   END IF;
END PROCESS_LOSS_FACTOR;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT_PROXY_DAY
    (
    p_ACCOUNT_ID IN NUMBER,
    p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
    p_PROXY_DAY_METHOD_IDENT VARCHAR2,
    p_PROXY_DAY_METHOD_TYPE VARCHAR2,
	p_IS_FULL_SYNC IN NUMBER
    ) AS
v_PROXY_DAY_METHOD_ID PROXY_DAY_METHOD.PROXY_DAY_METHOD_ID%TYPE;
BEGIN
	IF p_PROXY_DAY_METHOD_IDENT IS NOT NULL THEN
        IF IS_DELETING(STRING_COLLECTION(p_PROXY_DAY_METHOD_IDENT)) THEN
            IF p_IS_FULL_SYNC = 0 THEN
                LOGS.LOG_DEBUG_MORE_DETAIL('Deleting ' || p_PROXY_DAY_METHOD_TYPE || ' PROXY DAY METHOD for ACCOUNT = '
                    || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Delete marker found.');

                UT.DELETE_TEMPORAL_DATA('ACCOUNT_PROXY_DAY_METHOD',
                                        p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                        p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                        'ACCOUNT_ID',
                                        p_ACCOUNT_ID,
                                        'PROXY_DAY_METHOD_TYPE',
                                        UT.GET_LITERAL_FOR_STRING(p_PROXY_DAY_METHOD_TYPE));
            END IF;
        ELSE
            v_PROXY_DAY_METHOD_ID := EI.GET_ID_FROM_IDENTIFIER(p_PROXY_DAY_METHOD_IDENT,EC.ED_PROXY_DAY_METHOD);
            UT.PUT_TEMPORAL_DATA('ACCOUNT_PROXY_DAY_METHOD',
                             p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                             p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                             TRUE,
                             TRUE,
                             'ACCOUNT_ID',
                             p_ACCOUNT_ID,
                             TRUE,
                             'PROXY_DAY_METHOD_TYPE',
                             UT.GET_LITERAL_FOR_STRING(p_PROXY_DAY_METHOD_TYPE),
                             TRUE,
                             'PROXY_DAY_METHOD_ID',
                             v_PROXY_DAY_METHOD_ID,
                             FALSE,
							 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
        END IF;
	ELSE
		LOGS.LOG_DEBUG('Skip PROXY_DAY_METHOD for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || ' and PROXY DAY METHOD TYPE = ' || p_PROXY_DAY_METHOD_TYPE || '. PROXY_DAY_METHOD_IDENT value is null.');
	END IF;
END PROCESS_ACCOUNT_PROXY_DAY;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT_PRODUCT
    (
    p_ACCOUNT_ID IN NUMBER,
    p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
    p_PRODUCT_IDENT VARCHAR2,
    p_PRODUCT_TYPE VARCHAR2,
	p_IS_FULL_SYNC IN NUMBER
    ) AS
v_PRODUCT_ID PRODUCT.PRODUCT_ID%TYPE;
v_DISP_PRODUCT_TYPE VARCHAR2(32) := CASE p_PRODUCT_TYPE
                            WHEN ACCOUNTS_METERS.c_PRODUCT_TYPE_COST_ABBR THEN ACCOUNTS_METERS.c_PRODUCT_TYPE_COST
                            WHEN ACCOUNTS_METERS.c_PRODUCT_TYPE_REV_ABBR THEN ACCOUNTS_METERS.c_PRODUCT_TYPE_REVENUE
                            WHEN ACCOUNTS_METERS.c_PRODUCT_TYPE_BILL_ABBR THEN ACCOUNTS_METERS.c_PRODUCT_TYPE_BILLING
                            ELSE NULL END;
BEGIN
	IF p_PRODUCT_IDENT IS NOT NULL THEN
        IF IS_DELETING(STRING_COLLECTION(p_PRODUCT_IDENT)) THEN
            IF p_IS_FULL_SYNC = 0 THEN
                LOGS.LOG_DEBUG_MORE_DETAIL('Deleting ' || v_DISP_PRODUCT_TYPE || ' PRODUCT for ACCOUNT = '
                    || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Delete marker found.');

                UT.DELETE_TEMPORAL_DATA('ACCOUNT_PRODUCT',
                                        p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                        p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                        'ACCOUNT_ID',
                                        p_ACCOUNT_ID,
                                        'PRODUCT_TYPE',
                                        UT.GET_LITERAL_FOR_STRING(p_PRODUCT_TYPE),
                                        'CASE_ID',
                                        GA.BASE_CASE_ID);
            END IF;
        ELSE
            v_PRODUCT_ID := EI.GET_ID_FROM_IDENTIFIER(p_PRODUCT_IDENT,EC.ED_PRODUCT);
            UT.PUT_TEMPORAL_DATA('ACCOUNT_PRODUCT',
                             p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                             p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                             TRUE,
                             TRUE,
                             'ACCOUNT_ID',
                             p_ACCOUNT_ID,
                             TRUE,
                             'PRODUCT_TYPE',
                             UT.GET_LITERAL_FOR_STRING(p_PRODUCT_TYPE),
                             TRUE,
                            'CASE_ID',
                             GA.BASE_CASE_ID,
                             TRUE,
                             'PRODUCT_ID',
                             v_PRODUCT_ID,
                             FALSE,
							 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
        END IF;
	ELSE
		LOGS.LOG_DEBUG('Skip PRODUCT for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || ' and PRODUCT TYPE = ' || v_DISP_PRODUCT_TYPE || '. PRODUCT_IDENT value is null.');
	END IF;
END PROCESS_ACCOUNT_PRODUCT;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_CALENDAR
    (
    p_ACCOUNT_ID IN NUMBER,
    p_METER_ID IN NUMBER,
    p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
    p_CALENDAR_IDENT VARCHAR2,
    p_CALENDAR_TYPE VARCHAR2,
	p_IS_FULL_SYNC IN NUMBER
    ) AS

v_CALENDAR_ID CALENDAR.CALENDAR_ID%TYPE;
BEGIN
	IF p_CALENDAR_IDENT IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER THEN
            IF IS_DELETING(STRING_COLLECTION(p_CALENDAR_IDENT)) THEN
                IF p_IS_FULL_SYNC = 0 THEN
					LOGS.LOG_DEBUG_MORE_DETAIL('Deleting ' || p_CALENDAR_TYPE || ' CALENDAR for METER = '
						|| p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT || '. Delete marker found.');

					UT.DELETE_TEMPORAL_DATA('METER_CALENDAR',
											p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
											p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
											'METER_ID',
											p_METER_ID,
											'CASE_ID',
											GA.BASE_CASE_ID,
											'CALENDAR_TYPE',
											UT.GET_LITERAL_FOR_STRING(p_CALENDAR_TYPE));
				END IF;
            ELSE
                v_CALENDAR_ID := EI.GET_ID_FROM_IDENTIFIER(p_CALENDAR_IDENT,EC.ED_CALENDAR);
                UT.PUT_TEMPORAL_DATA('METER_CALENDAR',
                                 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                 TRUE,
                                 TRUE,
                                 'METER_ID',
                                 p_METER_ID,
                                 TRUE,
                                 'CASE_ID',
                                 GA.BASE_CASE_ID,
                                 TRUE,
                                 'CALENDAR_TYPE',
                                 UT.GET_LITERAL_FOR_STRING(p_CALENDAR_TYPE),
                                 TRUE,
                                 'CALENDAR_ID',
                                 v_CALENDAR_ID,
                                 FALSE,
							     p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
            END IF;
        ELSE
            IF IS_DELETING(STRING_COLLECTION(p_CALENDAR_IDENT)) THEN
                IF p_IS_FULL_SYNC = 0 THEN
					LOGS.LOG_DEBUG_MORE_DETAIL('Deleting ' || p_CALENDAR_TYPE || ' CALENDAR for ACCOUNT = '
						|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Delete marker found.');

					UT.DELETE_TEMPORAL_DATA('ACCOUNT_CALENDAR',
											p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
											p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
											'ACCOUNT_ID',
											p_ACCOUNT_ID,
											'CASE_ID',
											GA.BASE_CASE_ID,
											'CALENDAR_TYPE',
											UT.GET_LITERAL_FOR_STRING(p_CALENDAR_TYPE));
				END IF;
            ELSE
                v_CALENDAR_ID := EI.GET_ID_FROM_IDENTIFIER(p_CALENDAR_IDENT,EC.ED_CALENDAR);
                UT.PUT_TEMPORAL_DATA('ACCOUNT_CALENDAR',
                                 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                 TRUE,
                                 TRUE,
                                 'ACCOUNT_ID',
                                 p_ACCOUNT_ID,
                                 TRUE,
                                 'CASE_ID',
                                 GA.BASE_CASE_ID,
                                 TRUE,
                                 'CALENDAR_TYPE',
                                 UT.GET_LITERAL_FOR_STRING(p_CALENDAR_TYPE),
                                 TRUE,
                                 'CALENDAR_ID',
                                 v_CALENDAR_ID,
                                 FALSE,
								 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
            END IF;
        END IF;
	ELSE
		LOGS.LOG_DEBUG('Skip CALENDAR for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || ' and CALENDAR_TYPE = ' || p_CALENDAR_TYPE || '. CALENDAR value is null.');
	END IF;
END PROCESS_CALENDAR;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_SCHEDULE_GROUP
(
p_ACCOUNT_ID IN NUMBER,
p_METER_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
p_IS_FULL_SYNC IN NUMBER
) AS
v_SCHEDULE_GROUP_ID SCHEDULE_GROUP.SCHEDULE_GROUP_ID%TYPE;
BEGIN
	IF p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER THEN
            IF IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT)) THEN
                IF p_IS_FULL_SYNC = 0 THEN
					LOGS.LOG_DEBUG_MORE_DETAIL('Deleting SCHEDULE_GROUP for METER = '
						|| p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT || '. Delete marker found.');

					UT.DELETE_TEMPORAL_DATA('METER_SCHEDULE_GROUP',
											p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
											p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
											'METER_ID',
											p_METER_ID);
				END IF;
            ELSE
                v_SCHEDULE_GROUP_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT,EC.ED_SCHEDULE_GROUP);

                UT.PUT_TEMPORAL_DATA('METER_SCHEDULE_GROUP',
                                 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                 TRUE,
                                 TRUE,
                                 'METER_ID',
                                 p_METER_ID,
                                 TRUE,
                                 'SCHEDULE_GROUP_ID',
                                 v_SCHEDULE_GROUP_ID,
                                 FALSE,
								 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626);
            END IF;
        ELSE
            IF IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT)) THEN
                IF p_IS_FULL_SYNC = 0 THEN
					LOGS.LOG_DEBUG_MORE_DETAIL('Deleting SCHEDULE_GROUP for ACCOUNT = '
						|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Delete marker found.');

					UT.DELETE_TEMPORAL_DATA('ACCOUNT_SCHEDULE_GROUP',
											p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
											p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
											'ACCOUNT_ID',
											p_ACCOUNT_ID);
				END IF;
            ELSE
                v_SCHEDULE_GROUP_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT,EC.ED_SCHEDULE_GROUP);

                UT.PUT_TEMPORAL_DATA('ACCOUNT_SCHEDULE_GROUP',
                                 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                 TRUE,
                                 TRUE,
                                 'ACCOUNT_ID',
                                 p_ACCOUNT_ID,
                                 TRUE,
                                 'SCHEDULE_GROUP_ID',
                                 v_SCHEDULE_GROUP_ID,
                                 FALSE,
								 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626);
            END IF;
        END IF;
	ELSE
		LOGS.LOG_DEBUG('Skip SCHEDULE_GROUP for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. SCHEDULE_GROUP value is null.');
	END IF;
END PROCESS_SCHEDULE_GROUP;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_CONTRACT_ASSIGNMENT
(
p_ACCOUNT_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
p_IS_FULL_SYNC IN NUMBER
) AS
v_CONTRACT_ID SERVICE_CONTRACT.CONTRACT_ID%TYPE;
BEGIN
	IF p_ACCOUNT_SYNC_STAGING_REC.CONTRACT_IDENT IS NOT NULL  THEN
		IF IS_DELETING(STRING_COLLECTION(p_ACCOUNT_SYNC_STAGING_REC.CONTRACT_IDENT)) THEN
			IF p_IS_FULL_SYNC = 0 THEN
				LOGS.LOG_DEBUG_MORE_DETAIL('Deleting CONTRACT_ASSIGNMENT for ACCOUNT = '
					|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. Delete marker found.');

				UT.DELETE_TEMPORAL_DATA('CONTRACT_ASSIGNMENT',
										p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
										p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
										 'ENTITY_DOMAIN_ID',
										 EC.ED_ACCOUNT,
										 'OWNER_ENTITY_ID',
										 p_ACCOUNT_ID);
			END IF;
		ELSE
			v_CONTRACT_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.CONTRACT_IDENT,EC.ED_CONTRACT);

			UT.PUT_TEMPORAL_DATA('CONTRACT_ASSIGNMENT',
								 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
								 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
								 TRUE,
								 TRUE,
								 'CONTRACT_ID',
								 v_CONTRACT_ID,
								 FALSE,
								 'ENTITY_DOMAIN_ID',
								 EC.ED_ACCOUNT,
								 TRUE,
								 'OWNER_ENTITY_ID',
								 p_ACCOUNT_ID,
								 TRUE,
								 'ENTITY_NAME',
								 UT.GET_LITERAL_FOR_STRING(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_NAME)),
								 FALSE,
								 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
		END IF;
	ELSE
		LOGS.LOG_DEBUG('Skip CONTRACT_ASSIGNMENT for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. CONTRACT_ASSIGNMENT value is null.');
	END IF;
END PROCESS_CONTRACT_ASSIGNMENT;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_USAGE_FACTOR
(
p_ACCOUNT_ID IN NUMBER,
p_METER_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE
) AS
v_TOU_TEMPLATE_ID NUMBER(9);
v_TOU_USAGE_FACTOR_ID NUMBER(9);
BEGIN
    -- Normal Usage factor
    IF p_ACCOUNT_SYNC_STAGING_REC.USE_TOU_USAGE_FACTOR = 0 THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1 IS NOT NULL THEN
            IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER THEN
                UT.PUT_TEMPORAL_DATA('METER_USAGE_FACTOR',
                                 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                 TRUE,
                                 TRUE,
                                 'METER_ID',
                                 p_METER_ID,
                                 TRUE,
                                 'CASE_ID',
                                 GA.BASE_CASE_ID,
                                 TRUE,
                                 'FACTOR_VAL',
                                 p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1,
                                 FALSE,
								 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
            ELSE
                UT.PUT_TEMPORAL_DATA('ACCOUNT_USAGE_FACTOR',
                                 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                 TRUE,
                                 TRUE,
                                 'ACCOUNT_ID',
                                 p_ACCOUNT_ID,
                                 TRUE,
                                 'CASE_ID',
                                 GA.BASE_CASE_ID,
                                 TRUE,
                                 'FACTOR_VAL',
                                 p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1,
                                 FALSE,
	 						     p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
            END IF;
        END IF;
    -- TOU Usage Factor
    ELSE
        IF p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT IS NOT NULL THEN
            v_TOU_TEMPLATE_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT,EC.ED_TEMPLATE);
            -- Meter
            IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER THEN
                v_TOU_USAGE_FACTOR_ID := ACCOUNTS_METERS.INSERT_METER_TOU_USAGE_FACTOR(p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                                                                        p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                                                                        p_METER_ID,
                                                                                        v_TOU_TEMPLATE_ID);
                FOR v_PERIODS IN (SELECT D.SETTING_NAME, VALUE AS PERIOD_ALIAS
                                    FROM SYSTEM_DICTIONARY D
                                    WHERE D.MODEL_ID = 0
                                        AND D.MODULE = 'Load Management'
                                        AND D.KEY1 = 'Account Sync'
                                        AND D.KEY2 = 'Usage Factor Periods'
                                        AND D.KEY3 = p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT
                                    ORDER BY D.SETTING_NAME)
                LOOP
                    IF v_PERIODS.PERIOD_ALIAS IS NOT NULL THEN
                        INSERT INTO METER_TOU_USAGE_FACTOR_PERIOD (TOU_USAGE_FACTOR_ID, PERIOD_ID, FACTOR_VAL, ENTRY_DATE)
                        VALUES(v_TOU_USAGE_FACTOR_ID,
                                EI.GET_ID_FROM_IDENTIFIER(v_PERIODS.PERIOD_ALIAS, EC.ED_PERIOD),
                                CASE WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD1 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1
                                     WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD2 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL2
                                     WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD3 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL3
                                     WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD4 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL4
                                     WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD5 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL5
                                 END,
                                 SYSDATE);
                    END IF;
                END LOOP;
            -- Account
            ELSE
                v_TOU_USAGE_FACTOR_ID := ACCOUNTS_METERS.INSERT_ACC_TOU_USAGE_FACTOR(p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                                                                        p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                                                                        p_ACCOUNT_ID,
                                                                                        v_TOU_TEMPLATE_ID);
                FOR v_PERIODS IN (SELECT D.SETTING_NAME, VALUE AS PERIOD_ALIAS
                                    FROM SYSTEM_DICTIONARY D
                                    WHERE D.MODEL_ID = 0
                                        AND D.MODULE = 'Load Management'
                                        AND D.KEY1 = 'Account Sync'
                                        AND D.KEY2 = 'Usage Factor Periods'
                                        AND D.KEY3 = p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT
                                    ORDER BY D.SETTING_NAME)
                LOOP
                    IF v_PERIODS.PERIOD_ALIAS IS NOT NULL THEN
                        INSERT INTO ACCOUNT_TOU_USG_FACTOR_PERIOD (TOU_USAGE_FACTOR_ID, PERIOD_ID, FACTOR_VAL, ENTRY_DATE)
                        VALUES(v_TOU_USAGE_FACTOR_ID,
                                EI.GET_ID_FROM_IDENTIFIER(v_PERIODS.PERIOD_ALIAS, EC.ED_PERIOD),
                                CASE WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD1 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1
                                     WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD2 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL2
                                     WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD3 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL3
                                     WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD4 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL4
                                     WHEN v_PERIODS.SETTING_NAME = c_TOU_TEMPLATE_PERIOD5 THEN p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL5
                                 END,
                                 SYSDATE);
                    END IF;
                END LOOP;
            END IF;
        ELSE
            LOGS.LOG_DEBUG('Skip ACCOUNT_TOU_USAGE_FACTOR for ACCOUNT = '
                || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. TOU_TEMPLATE_IDENT value is null.');
        END IF;

        NULL;
    END IF;
END PROCESS_USAGE_FACTOR;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_ACC_ANC_SCVS(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL1 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL2 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL3 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL4 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL5 IS NOT NULL;
END IS_PROCESSING_ACC_ANC_SCVS;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_MTR_ANC_SCVS(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL1 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL2 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL3 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL4 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL5 IS NOT NULL;
END IS_PROCESSING_MTR_ANC_SCVS;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_ENTITY_GROUPS(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT1 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT2 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT3 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT4 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT5 IS NOT NULL;
END IS_PROCESSING_ENTITY_GROUPS;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ANCILLARY_SERVICE
(
p_ACCOUNT_ID IN NUMBER,
p_METER_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE
) AS
v_ANC_SERVICES NUMBER_COLLECTION;
v_IDX BINARY_INTEGER;
v_VALUE NUMBER;
BEGIN
    IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER THEN
        IF IS_PROCESSING_MTR_ANC_SCVS(p_ACCOUNT_SYNC_STAGING_REC) THEN
            IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
                v_ANC_SERVICES := g_ELC_MTR_ANC_SERV;
            ELSIF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_GAS THEN
                v_ANC_SERVICES := g_GAS_MTR_ANC_SERV;
            END IF;

            v_IDX := v_ANC_SERVICES.FIRST;
            WHILE v_IDX IS NOT NULL
            LOOP
                v_VALUE := CASE v_IDX WHEN 1 THEN p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL1
                                            WHEN 2 THEN p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL2
                                            WHEN 3 THEN p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL3
                                            WHEN 4 THEN p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL4
                                            WHEN 5 THEN p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL5
                                 END;
                IF v_VALUE IS NOT NULL THEN
                    UT.PUT_TEMPORAL_DATA('METER_ANCILLARY_SERVICE',
                                     p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                     p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                     TRUE,
                                     TRUE,
                                     'METER_ID',
                                     p_METER_ID,
                                     TRUE,
                                     'ANCILLARY_SERVICE_ID',
                                     v_ANC_SERVICES(v_IDX),
                                     TRUE,
                                     'SERVICE_VAL',
                                     UT.GET_LITERAL_FOR_NUMBER(v_VALUE),
                                     FALSE,
									 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
                END IF;

                v_IDX := v_ANC_SERVICES.NEXT(v_IDX);
            END LOOP;
        ELSE
            LOGS.LOG_DEBUG('Skip METER_ANCILLARY_SERVICE for METER = '
                || p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT || '. METER_ANCILLARY_SERVICE values are all null.');
        END IF;

    ELSE
        IF IS_PROCESSING_ACC_ANC_SCVS(p_ACCOUNT_SYNC_STAGING_REC) THEN
            IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
                v_ANC_SERVICES := g_ELC_ACCT_ANC_SERV;
            ELSIF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_GAS THEN
                v_ANC_SERVICES := g_GAS_ACCT_ANC_SERV;
            END IF;

            v_IDX := v_ANC_SERVICES.FIRST;
            WHILE v_IDX IS NOT NULL
            LOOP
                v_VALUE := CASE v_IDX WHEN 1 THEN p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL1
                                                WHEN 2 THEN p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL2
                                                WHEN 3 THEN p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL3
                                                WHEN 4 THEN p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL4
                                                WHEN 5 THEN p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL5
                                     END;
                IF v_VALUE IS NOT NULL THEN
                    UT.PUT_TEMPORAL_DATA('ACCOUNT_ANCILLARY_SERVICE',
                                     p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                     p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                     TRUE,
                                     TRUE,
                                     'ACCOUNT_ID',
                                     p_ACCOUNT_ID,
                                     TRUE,
                                     'ANCILLARY_SERVICE_ID',
                                     v_ANC_SERVICES(v_IDX),
                                     TRUE,
                                     'SERVICE_VAL',
                                     UT.GET_LITERAL_FOR_NUMBER(v_VALUE),
                                     FALSE,
									 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
                END IF;
                v_IDX := v_ANC_SERVICES.NEXT(v_IDX);
            END LOOP;
        ELSE
            LOGS.LOG_DEBUG('Skip ACCOUNT_ANCILLARY_SERVICE for ACCOUNT = '
                || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. ACCOUNT_ANCILLARY_SERVICE values are all null.');
        END IF;
    END IF;

END PROCESS_ANCILLARY_SERVICE;
----------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT_GROUP
(
    p_ACCOUNT_ID IN NUMBER,
    p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE
) AS
    v_AG_IDs NUMBER_COLLECTION := NUMBER_COLLECTION();
    v_AG_CAT ACCOUNT_GROUP_ASSIGNMENT.ASSIGNMENT_CATEGORY%TYPE;

    FUNCTION GET_AG_CATEGORY (p_INDEX IN NUMBER) RETURN VARCHAR2 IS BEGIN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            RETURN g_ELC_ACT_GRP_CAT(p_INDEX);
        ELSE
            RETURN g_GAS_ACT_GRP_CAT(p_INDEX);
        END IF;
    END GET_AG_CATEGORY;
BEGIN
   RESIZE(v_AG_IDs, 5);

   IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT1) IS NOT NULL THEN
        v_AG_IDS(1) := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT1, EC.ED_ACCOUNT_GROUP, 1);
   END IF;

   IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT2) IS NOT NULL THEN
        v_AG_IDS(2) := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT2, EC.ED_ACCOUNT_GROUP, 1);
   END IF;

   IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT3) IS NOT NULL THEN
        v_AG_IDS(3) := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT3, EC.ED_ACCOUNT_GROUP, 1);
   END IF;

   IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT4) IS NOT NULL THEN
        v_AG_IDS(4) := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT4, EC.ED_ACCOUNT_GROUP, 1);
   END IF;

   IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT5) IS NOT NULL THEN
        v_AG_IDS(5) := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT5, EC.ED_ACCOUNT_GROUP, 1);
   END IF;

   FOR v_IDX IN 1..5 LOOP
        IF v_AG_IDs(v_IDX) IS NOT NULL THEN
            v_AG_CAT := GET_AG_CATEGORY(v_IDX);

            DELETE FROM ACCOUNT_GROUP_ASSIGNMENT AGA
            WHERE AGA.ACCOUNT_ID = p_ACCOUNT_ID
                AND AGA.ASSIGNMENT_CATEGORY = v_AG_CAT;

            INSERT INTO ACCOUNT_GROUP_ASSIGNMENT (ACCOUNT_ID, ACCOUNT_GROUP_ID, ASSIGNMENT_CATEGORY)
            VALUES (p_ACCOUNT_ID, v_AG_IDs(v_IDX), v_AG_CAT);
        END IF;
   END LOOP;

END PROCESS_ACCOUNT_GROUP;
------------------------------------------------------------------------------------------
PROCEDURE UNASSIGN_ENT_GRP_FOR_CATEGORY
    (
    p_ENTITY_ID NUMBER,
    p_DOMAIN_ID ENTITY_GROUP.ENTITY_DOMAIN_ID%TYPE,
    p_ENTITY_GROUP_CATEGORY ENTITY_GROUP.GROUP_CATEGORY%TYPE,
    p_EXCLUDE_ENTITY_GROUP_ID ENTITY_GROUP_ASSIGNMENT.ENTITY_GROUP_ID%TYPE,
    p_BEGIN_DATE DATE,
    p_END_DATE DATE
    ) AS
BEGIN

    FOR c_ENTITY_GROUPS IN (SELECT EG.ENTITY_GROUP_ID
                            FROM ENTITY_GROUP EG,
                                ENTITY_GROUP_ASSIGNMENT EGA
                            WHERE EG.ENTITY_DOMAIN_ID = p_DOMAIN_ID
                                AND EG.GROUP_CATEGORY = p_ENTITY_GROUP_CATEGORY
                                AND EGA.ENTITY_GROUP_ID = EG.ENTITY_GROUP_ID
                                AND EGA.ENTITY_ID = p_ENTITY_ID
                                AND EGA.ENTITY_GROUP_ID <> p_EXCLUDE_ENTITY_GROUP_ID
                                AND EGA.BEGIN_DATE <= NVL(p_END_DATE, CONSTANTS.HIGH_DATE)
                                    AND NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE)
    LOOP
        UT.DELETE_TEMPORAL_DATA('ENTITY_GROUP_ASSIGNMENT',
                                p_BEGIN_DATE,
                                p_END_DATE,
                                'ENTITY_GROUP_ID',
                                c_ENTITY_GROUPS.ENTITY_GROUP_ID,
                                'ENTITY_ID',
                                p_ENTITY_ID);
    END LOOP;
END UNASSIGN_ENT_GRP_FOR_CATEGORY;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ENTITY_GROUPS
(
p_ACCOUNT_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE
) AS
v_ENTITY_GROUP_CATS STRING_COLLECTION;
v_IDX BINARY_INTEGER;
v_ENTITY_GROUP_IDENT ACCOUNT_SYNC_STAGING.ENTITY_GROUP_IDENT1%TYPE;
v_ENTITY_GROUP_ID ENTITY_GROUP.ENTITY_GROUP_ID%TYPE;
BEGIN
    IF IS_PROCESSING_ENTITY_GROUPS(p_ACCOUNT_SYNC_STAGING_REC) THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ENTITY_GROUP_CATS := g_ELC_ENT_GRP_CAT;
        ELSIF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_GAS THEN
            v_ENTITY_GROUP_CATS := g_GAS_ENT_GRP_CAT;
        END IF;

        v_IDX := v_ENTITY_GROUP_CATS.FIRST;
        WHILE v_IDX IS NOT NULL
        LOOP
            IF v_ENTITY_GROUP_CATS(v_IDX) IS NOT NULL THEN
                v_ENTITY_GROUP_IDENT := CASE v_IDX WHEN 1 THEN p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT1
                                            WHEN 2 THEN p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT2
                                            WHEN 3 THEN p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT3
                                            WHEN 4 THEN p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT4
                                            WHEN 5 THEN p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT5
                                        END;

                IF v_ENTITY_GROUP_IDENT IS NOT NULL THEN

                    v_ENTITY_GROUP_ID := EI.GET_ID_FROM_IDENTIFIER(v_ENTITY_GROUP_IDENT, EC.ED_ENTITY_GROUP);

                    -- Unassign the Entity Group for the given Category
                    UNASSIGN_ENT_GRP_FOR_CATEGORY(p_ACCOUNT_ID,
                                                    EC.ED_ACCOUNT,
                                                    v_ENTITY_GROUP_CATS(v_IDX),
                                                    v_ENTITY_GROUP_ID,
                                                    p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                                    p_ACCOUNT_SYNC_STAGING_REC.END_DATE);

                    -- Store the incoming Entity Group Assignment
                    UT.PUT_TEMPORAL_DATA('ENTITY_GROUP_ASSIGNMENT',
                                     p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
                                     p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
                                     TRUE,
                                     TRUE,
                                     'ENTITY_GROUP_ID',
                                     v_ENTITY_GROUP_ID,
                                     TRUE,
                                     'ENTITY_ID',
                                     p_ACCOUNT_ID,
                                     TRUE,
									 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
                END IF;
            END IF;

            v_IDX := v_ENTITY_GROUP_CATS.NEXT(v_IDX);
        END LOOP;
    ELSE
        LOGS.LOG_DEBUG('Skip ENTITY_GROUP_ASSIGNMENT for ACCOUNT = '
            || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. ENTITY_GROUP_ASSIGNMENT values are all null.');
    END IF;
END PROCESS_ENTITY_GROUPS;
------------------------------------------------------------------------------------------
FUNCTION IS_PROCESSING_CUSTOM_ATTRIB(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) RETURN BOOLEAN AS
BEGIN
    RETURN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL1 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL2 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL3 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL4 IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL5 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL6 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL7 IS NOT NULL OR
		p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL8 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL9 IS NOT NULL OR
        p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL10 IS NOT NULL;
END IS_PROCESSING_CUSTOM_ATTRIB;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_CUSTOM_ATTRIBUTES
(
p_ACCOUNT_ID IN NUMBER,
p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE
) AS
v_CUSTOM_ATTRIBUTE_IDS NUMBER_COLLECTION;
v_CUSTOM_ATTRIBUTE_TYPES STRING_COLLECTION;
v_IDX BINARY_INTEGER;
v_NUMBER NUMBER;
v_VALUE VARCHAR2(64);
BEGIN
    IF IS_PROCESSING_CUSTOM_ATTRIB(p_ACCOUNT_SYNC_STAGING_REC) THEN
		-- Get the global collections for the Account Service
		IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
			v_CUSTOM_ATTRIBUTE_IDS := g_ELC_CUST_ATTR_ID;
			v_CUSTOM_ATTRIBUTE_TYPES := g_ELC_CUST_ATTR_TYPE;
		ELSIF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_GAS THEN
			v_CUSTOM_ATTRIBUTE_IDS := g_GAS_CUST_ATTR_ID;
			v_CUSTOM_ATTRIBUTE_TYPES := g_GAS_CUST_ATTR_TYPE;
		END IF;

		v_IDX := v_CUSTOM_ATTRIBUTE_IDS.FIRST;
		WHILE v_IDX IS NOT NULL
		LOOP
			v_VALUE := CASE v_IDX WHEN 1 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL1
								  WHEN 2 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL2
								  WHEN 3 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL3
								  WHEN 4 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL4
								  WHEN 5 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL5
								  WHEN 6 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL6
								  WHEN 7 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL7
								  WHEN 8 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL8
								  WHEN 9 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL9
								  WHEN 10 THEN p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL10
					   END;

			IF v_VALUE IS NOT NULL THEN
				IF v_CUSTOM_ATTRIBUTE_TYPES(v_IDX) = CONSTANTS.ATTRIBUTE_TYPE_INTEGER
							OR v_CUSTOM_ATTRIBUTE_TYPES(v_IDX) = CONSTANTS.ATTRIBUTE_TYPE_FLOAT THEN
					v_NUMBER := TO_NUMBER(v_VALUE);
					IF v_CUSTOM_ATTRIBUTE_TYPES(v_IDX) = CONSTANTS.ATTRIBUTE_TYPE_INTEGER THEN
						-- Must round all Floats if the type is 'Integer'
						v_NUMBER := ROUND(v_NUMBER);
					END IF;
					v_VALUE := TO_CHAR(v_NUMBER);
				ELSIF v_CUSTOM_ATTRIBUTE_TYPES(v_IDX) = CONSTANTS.ATTRIBUTE_TYPE_BOOL THEN
					v_VALUE := CASE WHEN UT.BOOLEAN_FROM_STRING(v_VALUE) THEN '1' ELSE '0' END;
				END IF;

				-- Note, 'ATTRIBUTE_NAME' column is handled by the TEMPORAL_ENT_ATTRIBUTE_UPDATE trigger
				IF v_CUSTOM_ATTRIBUTE_IDS(v_IDX) IS NOT NULL THEN
					UT.PUT_TEMPORAL_DATA('TEMPORAL_ENTITY_ATTRIBUTE',
									 p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE,
									 p_ACCOUNT_SYNC_STAGING_REC.END_DATE,
									 TRUE,
									 TRUE,
									 'OWNER_ENTITY_ID',
									 p_ACCOUNT_ID,
									 TRUE,
									 'ATTRIBUTE_ID',
									 v_CUSTOM_ATTRIBUTE_IDS(v_IDX),
									 TRUE,
									 'ENTITY_DOMAIN_ID',
									 EC.ED_ACCOUNT,
									 TRUE,
									 'ATTRIBUTE_VAL',
									 UT.GET_LITERAL_FOR_STRING(v_VALUE),
									 FALSE,
									 p_EXTEND_DATE_RANGE => c_EXTEND_DATE_RANGE); -- New parameter for BZ28626
				ELSE
					ERRS.RAISE_BAD_ARGUMENT('Custom Attribute ID#' || v_IDX, NULL);
				END IF;
			END IF;
			v_IDX := v_CUSTOM_ATTRIBUTE_IDS.NEXT(v_IDX);
		END LOOP;
	ELSE
		LOGS.LOG_DEBUG('Skip CUSTOM_ATTRIBUTES for ACCOUNT = '
			|| p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT || '. CUSTOM_ATTRIBUTE values are all null.');
    END IF;

END PROCESS_CUSTOM_ATTRIBUTES;
------------------------------------------------------------------------------------------
-- This procedure fields that are common between Accounts and Meters but shouldn't be
-- validated unless there is a meter present for meter-modeled accounts (hence it is not always validated).
PROCEDURE VALIDATE_COMMON_FIELDS
(
    p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE
) AS

    v_ID NUMBER(9);

BEGIN
    ASSERT(p_ACCOUNT_SYNC_STAGING_REC.USE_TOU_USAGE_FACTOR IN (0,1),
           'Use TOU Usage Factor must be either 0 or 1.', MSGCODES.c_ERR_ARGUMENT);
    ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_TYPE IN (ACCOUNTS_METERS.c_METER_TYPE_INTERVAL, ACCOUNTS_METERS.c_METER_TYPE_PERIOD),
        'Meter Type must be ''' || ACCOUNTS_METERS.c_METER_TYPE_INTERVAL || ''' or ''' || ACCOUNTS_METERS.c_METER_TYPE_PERIOD || '.''', MSGCODES.c_ERR_ARGUMENT);

    IF p_ACCOUNT_SYNC_STAGING_REC.USE_TOU_USAGE_FACTOR = 0 THEN
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT IS NULL, 'For non-TOU usage factor entities, TOU Template Ident must be null.',
           MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL2 IS NULL, 'For non-TOU usage factor entities, Usage Factor Val 2 must be null.',
           MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL3 IS NULL, 'For non-TOU usage factor entities, Usage Factor Val 3 must be null.',
           MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL4 IS NULL, 'For non-TOU usage factor entities, Usage Factor Val 4 must be null.',
           MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL5 IS NULL, 'For non-TOU usage factor entities, Usage Factor Val 5 must be null.',
           MSGCODES.c_ERR_ARGUMENT);
    ELSIF IS_PROCESSING_USAGE_FACTORS(p_ACCOUNT_SYNC_STAGING_REC) AND NOT IS_DELETING_USAGE_FACTORS(p_ACCOUNT_SYNC_STAGING_REC) THEN
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT IS NOT NULL, 'If any Usage Factor Values are specified for '
            || 'a ''Use TOU Usage Factor'' entity, then TOU Template Ident can not be null', MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT <> ACCOUNT_SYNC.c_ACCOUNT_SYNC_DELETE_MARKER, 'If any Usage Factor Values are specified for '
            || 'a ''Use TOU Usage Factor'' entity, then TOU Template Ident can not be the delete marker (' || ACCOUNT_SYNC.c_ACCOUNT_SYNC_DELETE_MARKER || ').', MSGCODES.c_ERR_ARGUMENT);

        v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT, EC.ED_TEMPLATE);

        v_ID := VALIDATE_SYS_DICT_ENTITY(c_TOU_TEMPLATE_PERIOD1,
                                 EC.ED_PERIOD,
                                 'Usage Factor Val 1',
                                 GA.GLOBAL_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Usage Factor Periods',
                                 p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT,
                                 p_FIELD_MANDATORY => p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1 IS NOT NULL);

        v_ID := VALIDATE_SYS_DICT_ENTITY(c_TOU_TEMPLATE_PERIOD2,
                             EC.ED_PERIOD,
                             'Usage Factor Val 2',
                             GA.GLOBAL_MODEL,
                             'Load Management',
                             'Account Sync',
                             'Usage Factor Periods',
                             p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT,
                             p_FIELD_MANDATORY => p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL2 IS NOT NULL);

        v_ID := VALIDATE_SYS_DICT_ENTITY(c_TOU_TEMPLATE_PERIOD3,
                                 EC.ED_PERIOD,
                                 'Usage Factor Val 3',
                                 GA.GLOBAL_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Usage Factor Periods',
                                 p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT,
                             p_FIELD_MANDATORY => p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL3 IS NOT NULL);

       v_ID := VALIDATE_SYS_DICT_ENTITY(c_TOU_TEMPLATE_PERIOD4,
                                 EC.ED_PERIOD,
                                 'Usage Factor Val 4',
                                 GA.GLOBAL_MODEL,
                                 'Load Management',
                                 'Account Sync',
                                 'Usage Factor Periods',
                                 p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT,
                             p_FIELD_MANDATORY => p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL4 IS NOT NULL);

        v_ID := VALIDATE_SYS_DICT_ENTITY(c_TOU_TEMPLATE_PERIOD5,
                             EC.ED_PERIOD,
                             'Usage Factor Val 5',
                             GA.GLOBAL_MODEL,
                             'Load Management',
                             'Account Sync',
                             'Usage Factor Periods',
                             p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT,
                             p_FIELD_MANDATORY => p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL5 IS NOT NULL);
    END IF;

END VALIDATE_COMMON_FIELDS;
------------------------------------------------------------------------------------------
PROCEDURE VALIDATE_ENTITY_GROUP(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE,
                                p_ENTITY_GROUP_IDENT IN VARCHAR2,
                                p_GROUP_NUMBER IN NUMBER) AS
v_ID NUMBER;
v_SETTING SYSTEM_DICTIONARY.VALUE%TYPE;

v_EG_CATEGORY ENTITY_GROUP.GROUP_CATEGORY%TYPE;
v_EG_ED ENTITY_GROUP.ENTITY_DOMAIN_ID%TYPE;

BEGIN

    v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ENTITY_GROUP_IDENT,EC.ED_ENTITY_GROUP);

    IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
        v_SETTING := g_ELC_ENT_GRP_CAT(p_GROUP_NUMBER);
    ELSE
        v_SETTING := g_GAS_ENT_GRP_CAT(p_GROUP_NUMBER);
    END IF;

    SELECT EG.GROUP_CATEGORY, EG.ENTITY_DOMAIN_ID
    INTO v_EG_CATEGORY, v_EG_ED
    FROM ENTITY_GROUP EG
    WHERE EG.ENTITY_GROUP_ID = v_ID;

    ASSERT(v_EG_ED = EC.ED_ACCOUNT, 'The Entity Domain of the Entity Group specified for Entity Group Ident ' || p_GROUP_NUMBER
        || ' (' || p_ENTITY_GROUP_IDENT || ') is not Account.', MSGCODES.c_ERR_ARGUMENT);

    ASSERT(v_SETTING IS NULL OR v_SETTING = v_EG_CATEGORY, 'The Category specified in the System Dictonary for Entity Group ' || p_GROUP_NUMBER
        || ' does not match the Category for Entity Group ' || p_ENTITY_GROUP_IDENT || ': ' || v_EG_CATEGORY, MSGCODES.c_ERR_ARGUMENT);

END VALIDATE_ENTITY_GROUP;
------------------------------------------------------------------------------------------
PROCEDURE VALIDATE_ACCOUNT_SYNC(p_ACCOUNT_SYNC_STAGING_REC IN ACCOUNT_SYNC_STAGING%ROWTYPE) AS
v_COUNT NUMBER;
v_ID NUMBER;
v_TYPE ENTITY_ATTRIBUTE.ATTRIBUTE_TYPE%TYPE;
v_TEMP VARCHAR2(200);
v_SETTING SYSTEM_DICTIONARY.VALUE%TYPE;
BEGIN

	-- Validate Dates
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE IS NOT NULL, 'Begin Date must be non-null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.END_DATE IS NULL OR p_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE < p_ACCOUNT_SYNC_STAGING_REC.END_DATE, 'Begin Date must be before the End Date', MSGCODES.c_ERR_ARGUMENT);

	-- Validate Account required fields
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT IS NOT NULL, 'Account Identifier must be non-null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Account Identifier can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ').' , MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE IS NOT NULL, 'Account Service must be non-null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Account Service can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ').' , MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_NAME IS NOT NULL, 'Account Name must be non-null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_NAME <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Account Name can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ').' , MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_STATUS IS NOT NULL, 'Account Status must be non-null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_STATUS <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Account Status can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ').' , MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION IS NOT NULL, 'Account Model Option must be non-null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Account Model Option can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ').' , MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IS_SUB_AGGREGATE IS NOT NULL, 'Account Is Sub Aggregate must be non-null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IS_UFE_PARTICIPANT IS NOT NULL, 'Account Is UFE Participant must be non-null.', MSGCODES.c_ERR_ARGUMENT);

	-- Validate Account Status
	SELECT COUNT(1)
	INTO v_COUNT
	FROM ACCOUNT_STATUS_NAME X
	WHERE X.STATUS_NAME = p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_STATUS;

	ASSERT(v_COUNT = 1, 'Account Status Name must already exist in the database. ACCOUNT_STATUS_NAME = ' || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_STATUS, MSGCODES.c_ERR_ARGUMENT);

	-- Validate other Account Data fields
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE IN (c_ACCOUNT_SERVICE_ELECTRIC,c_ACCOUNT_SERVICE_GAS), 'Account Service must be ''' || c_ACCOUNT_SERVICE_ELECTRIC || ''' or ''' || c_ACCOUNT_SERVICE_GAS || '''', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION IN (ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_ACCOUNT,ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER),
		   'Account Model Option must be either ''' || ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_ACCOUNT || ''' or ''' || ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER || '''', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IS_SUB_AGGREGATE IN (0,1),
		   'Account Is Sub Aggregate must be either 0 or 1.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IS_UFE_PARTICIPANT IN (0,1),
		   'Account Is UFE Participant must be either 0 or 1.', MSGCODES.c_ERR_ARGUMENT);

    IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_ACCOUNT THEN
        VALIDATE_COMMON_FIELDS(p_ACCOUNT_SYNC_STAGING_REC);
    END IF;

	-- Validate Service Location
    IF IS_DELETING_SERVICE_LOCATION(p_ACCOUNT_SYNC_STAGING_REC) THEN
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT IS NOT NULL, 'Service Location Identifier must be non-null if the rest of the Service Location fields specify a deletion.', MSGCODES.c_ERR_ARGUMENT);
		ASSERT(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Service Location Identifier can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ') if the rest of the Service Location fields specify a deletion.' , MSGCODES.c_ERR_ARGUMENT);

        v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT,EC.ED_SERVICE_LOCATION);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL1 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_ACCT_ANC_SERV(1);
        ELSE
            v_ID := g_GAS_ACCT_ANC_SERV(1);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Account Ancillary Service Value 1 but no corresponding Ancillary Service '
            || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL2 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_ACCT_ANC_SERV(2);
        ELSE
            v_ID := g_GAS_ACCT_ANC_SERV(2);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Account Ancillary Service Value 2 but no corresponding Ancillary Service '
            || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL3 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_ACCT_ANC_SERV(3);
        ELSE
            v_ID := g_GAS_ACCT_ANC_SERV(3);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Account Ancillary Service Value 3 but no corresponding Ancillary Service '
            || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL4 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_ACCT_ANC_SERV(4);
        ELSE
            v_ID := g_GAS_ACCT_ANC_SERV(4);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Account Ancillary Service Value 4 but no corresponding Ancillary Service '
            || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_ANC_SERVICE_VAL5 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_ACCT_ANC_SERV(5);
        ELSE
            v_ID := g_GAS_ACCT_ANC_SERV(5);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Account Ancillary Service Value 5 but no corresponding Ancillary Service '
            || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL1 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(1);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(1);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(1);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(1);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 1, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 1', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL1);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL2 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(2);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(2);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(2);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(2);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 2, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 2', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL2);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL3 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(3);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(3);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(3);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(3);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 3, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 3', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL3);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL4 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(4);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(4);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(4);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(4);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 4, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 4', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL4);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL5 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(5);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(5);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(5);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(5);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 5, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 5', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL5);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL6 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(6);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(6);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(6);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(6);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 6, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 6', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL6);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL7 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(7);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(7);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(7);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(7);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 7, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 7', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL7);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL8 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(8);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(8);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(8);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(8);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 8, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 8', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL8);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL9 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(9);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(9);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(9);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(9);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 9, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 9', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL9);
    END IF;

    IF p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL10 IS NOT NULL THEN
        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_ID := g_ELC_CUST_ATTR_ID(10);
            v_TYPE := g_ELC_CUST_ATTR_TYPE(10);
        ELSE
            v_ID := g_GAS_CUST_ATTR_ID(10);
            v_TYPE := g_GAS_CUST_ATTR_TYPE(10);
        END IF;

        ASSERT(v_ID IS NOT NULL, 'A value was specified for Custom Attribute 10, but no corresponding system dictionary entry was specified.'
            , MSGCODES.c_ERR_ARGUMENT);

        VALIDATE_ATTRIBUTE_VALUE(v_TYPE, 'Custom Attribute Value 10', p_ACCOUNT_SYNC_STAGING_REC.TEMPORAL_ATTRIBUTE_VAL10);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT1) IS NOT NULL THEN
        v_ID := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT1, EC.ED_ACCOUNT_GROUP);

        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_SETTING := g_ELC_ACT_GRP_CAT(1);
        ELSE
            v_SETTING := g_GAS_ACT_GRP_CAT(1);
        END IF;

        ASSERT(v_SETTING IS NOT NULL, 'An Account Group (' || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT1 || ') was specified '
                    || 'for  Account Group 1, but no corresponding category was found in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT2) IS NOT NULL THEN
        v_ID := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT2, EC.ED_ACCOUNT_GROUP);

        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_SETTING := g_ELC_ACT_GRP_CAT(2);
        ELSE
            v_SETTING := g_GAS_ACT_GRP_CAT(2);
        END IF;

       ASSERT(v_SETTING IS NOT NULL, 'An Account Group (' || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT2 || ') was specified '
                    || 'for  Account Group 2, but no corresponding category was found in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT3) IS NOT NULL THEN
        v_ID := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT3, EC.ED_ACCOUNT_GROUP);

        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_SETTING := g_ELC_ACT_GRP_CAT(3);
        ELSE
            v_SETTING := g_GAS_ACT_GRP_CAT(3);
        END IF;

       ASSERT(v_SETTING IS NOT NULL, 'An Account Group (' || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT3 || ') was specified '
                    || 'for  Account Group 3, but no corresponding category was found in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT4) IS NOT NULL THEN
        v_ID := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT4, EC.ED_ACCOUNT_GROUP);

        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_SETTING := g_ELC_ACT_GRP_CAT(4);
        ELSE
            v_SETTING := g_GAS_ACT_GRP_CAT(4);
        END IF;

       ASSERT(v_SETTING IS NOT NULL, 'An Account Group (' || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT4 || ') was specified '
                    || 'for  Account Group 4, but no corresponding category was found in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT5) IS NOT NULL THEN
        v_ID := EI.GET_ID_FROM_NAME(p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT5, EC.ED_ACCOUNT_GROUP);

        IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
            v_SETTING := g_ELC_ACT_GRP_CAT(5);
        ELSE
            v_SETTING := g_GAS_ACT_GRP_CAT(5);
        END IF;

       ASSERT(v_SETTING IS NOT NULL, 'An Account Group (' || p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_GROUP_IDENT5 || ') was specified '
                    || 'for  Account Group 5, but no corresponding category was found in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT1) IS NOT NULL THEN
        VALIDATE_ENTITY_GROUP(p_ACCOUNT_SYNC_STAGING_REC, p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT1, 1);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT2) IS NOT NULL THEN
        VALIDATE_ENTITY_GROUP(p_ACCOUNT_SYNC_STAGING_REC, p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT2, 2);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT3) IS NOT NULL THEN
        VALIDATE_ENTITY_GROUP(p_ACCOUNT_SYNC_STAGING_REC, p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT3, 3);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT4) IS NOT NULL THEN
        VALIDATE_ENTITY_GROUP(p_ACCOUNT_SYNC_STAGING_REC, p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT4, 4);
    END IF;

    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT5) IS NOT NULL THEN
        VALIDATE_ENTITY_GROUP(p_ACCOUNT_SYNC_STAGING_REC, p_ACCOUNT_SYNC_STAGING_REC.ENTITY_GROUP_IDENT5, 5);
    END IF;

	IF IS_PROCESSING_SERVICE_LOCATION(p_ACCOUNT_SYNC_STAGING_REC) THEN
		ASSERT(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT IS NOT NULL, 'Service Location Identifier must be non-null if any of the Service Location fields are specified.', MSGCODES.c_ERR_ARGUMENT);
		ASSERT(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Service Location Identifier can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ').' , MSGCODES.c_ERR_ARGUMENT);
		ASSERT(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_NAME IS NOT NULL, 'Service Location Name must be non-null if any of the Service Location fields are specified.', MSGCODES.c_ERR_ARGUMENT);
		ASSERT(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_LOCATION_NAME <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Service Location Name can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ').' , MSGCODES.c_ERR_ARGUMENT);

		IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.WEATHER_STATION_IDENT) IS NOT NULL THEN
			v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.WEATHER_STATION_IDENT,EC.ED_WEATHER_STATION);
		END IF;

		IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_ZONE_IDENT) IS NOT NULL THEN
			v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_ZONE_IDENT,EC.ED_SERVICE_ZONE);
		END IF;

		IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_POINT_IDENT) IS NOT NULL THEN
			v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SERVICE_POINT_IDENT,EC.ED_SERVICE_POINT);
		END IF;

		IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.SUB_STATION_IDENT) IS NOT NULL THEN
			v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SUB_STATION_IDENT,EC.ED_SUB_STATION);
		END IF;

		IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.FEEDER_IDENT) IS NOT NULL THEN
			v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.FEEDER_IDENT,EC.ED_TX_FEEDER);
		END IF;

		IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.FEEDER_SEGMENT_IDENT) IS NOT NULL THEN
			v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.FEEDER_SEGMENT_IDENT,EC.ED_TX_FEEDER_SEGMENT);
		END IF;
	END IF;

	-- Validate EDC
	IF IS_PROCESSING_ACCOUNT_EDC(p_ACCOUNT_SYNC_STAGING_REC) AND NOT IS_DELETING_ACCOUNT_EDC(p_ACCOUNT_SYNC_STAGING_REC) THEN
		ASSERT(p_ACCOUNT_SYNC_STAGING_REC.EDC_IDENT IS NOT NULL, 'EDC Identifier must be non-null if any of the EDC fields are specified.', MSGCODES.c_ERR_ARGUMENT);
		ASSERT(p_ACCOUNT_SYNC_STAGING_REC.EDC_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER, 'EDC Identifier can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ') unless the remaining fields are set to null.' , MSGCODES.c_ERR_ARGUMENT);

		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.EDC_IDENT,EC.ED_EDC);
	END IF;

	-- Validate ESP
	IF IS_PROCESSING_ACCOUNT_ESP(p_ACCOUNT_SYNC_STAGING_REC) AND NOT IS_DELETING_ACCOUNT_ESP(p_ACCOUNT_SYNC_STAGING_REC) THEN
		ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ESP_IDENT IS NOT NULL, 'ESP Identifier must be non-null if any of the ESP fields are specified.', MSGCODES.c_ERR_ARGUMENT);
		ASSERT(p_ACCOUNT_SYNC_STAGING_REC.ESP_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER, 'ESP Identifier can not be set to the Delete Marker (' || c_ACCOUNT_SYNC_DELETE_MARKER || ') unless the remaining fields are set to null.' , MSGCODES.c_ERR_ARGUMENT);

		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.ESP_IDENT,EC.ED_ESP);

		IF p_ACCOUNT_SYNC_STAGING_REC.POOL_IDENT IS NOT NULL AND p_ACCOUNT_SYNC_STAGING_REC.POOL_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER THEN
			v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.POOL_IDENT,EC.ED_POOL);
		END IF;
	END IF;

	-- Validate Loss Factor
	IF p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT IS NOT NULL AND p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT,EC.ED_LOSS_FACTOR);
	END IF;

	-- Validate Calendar
	IF p_ACCOUNT_SYNC_STAGING_REC.FORECAST_CALENDAR_IDENT IS NOT NULL AND p_ACCOUNT_SYNC_STAGING_REC.FORECAST_CALENDAR_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.FORECAST_CALENDAR_IDENT,EC.ED_CALENDAR);
	END IF;

	IF p_ACCOUNT_SYNC_STAGING_REC.BACKCAST_CALENDAR_IDENT IS NOT NULL AND p_ACCOUNT_SYNC_STAGING_REC.BACKCAST_CALENDAR_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.BACKCAST_CALENDAR_IDENT,EC.ED_CALENDAR);
	END IF;

	IF p_ACCOUNT_SYNC_STAGING_REC.STTL_PROFILE_CALENDAR_IDENT IS NOT NULL AND p_ACCOUNT_SYNC_STAGING_REC.STTL_PROFILE_CALENDAR_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.STTL_PROFILE_CALENDAR_IDENT,EC.ED_CALENDAR);
	END IF;

	-- Validate Schedule Group
	IF p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT IS NOT NULL AND p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT,EC.ED_SCHEDULE_GROUP);
	END IF;

	-- Validate Contract Assignment
	IF p_ACCOUNT_SYNC_STAGING_REC.CONTRACT_IDENT IS NOT NULL AND p_ACCOUNT_SYNC_STAGING_REC.CONTRACT_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.CONTRACT_IDENT,EC.ED_CONTRACT);
	END IF;

    -- Validate Bill cycle
    IF IS_PROCESSING_BILL_CYCLE(p_ACCOUNT_SYNC_STAGING_REC) AND NOT IS_DELETING_BILL_CYCLE(p_ACCOUNT_SYNC_STAGING_REC) THEN
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.BILL_CYCLE_IDENT IS NOT NULL,'Bill Cycle Ident must be not null if a Billing Agent is specified.');
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.BILL_CYCLE_IDENT <> ACCOUNT_SYNC.c_ACCOUNT_SYNC_DELETE_MARKER,'Bill Cycle Ident cannot be set to the Delete Marker (' ||
                                                                ACCOUNT_SYNC.c_ACCOUNT_SYNC_DELETE_MARKER || ') if a Billing Agent is specified.');

        v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.BILL_CYCLE_IDENT,EC.ED_BILL_CYCLE);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.BILLING_AGENT IN ('ESP','EDC'), 'Billing Agent must be ''EDC'' or ''ESP'' if a Bill Cycle Identifier is specified.');
    END IF;

    -- Validate Cost Product
    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.COST_PRODUCT_IDENT) IS NOT NULL THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.COST_PRODUCT_IDENT,EC.ED_PRODUCT);
	END IF;

    -- Validate Revenue Product
    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.REVENUE_PRODUCT_IDENT) IS NOT NULL THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.REVENUE_PRODUCT_IDENT,EC.ED_PRODUCT);
	END IF;

    -- Validate Forecast Proxy Day Method
    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.FORECAST_PROXY_DAY_IDENT) IS NOT NULL THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.FORECAST_PROXY_DAY_IDENT,EC.ED_PROXY_DAY_METHOD);
	END IF;

    -- Validate Backcast Proxy Day Method
    IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.BACKCAST_PROXY_DAY_IDENT) IS NOT NULL THEN
		v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.BACKCAST_PROXY_DAY_IDENT,EC.ED_PROXY_DAY_METHOD);
	END IF;

    -- Validte Meter Fields
    IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_MODEL_OPTION <> ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER THEN
        -- METER FIELDS MUST BE NULL
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT IS NULL, 'Meter Identifier must be null if the Account is not Meter-Modeled.',
            MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_NAME IS NULL, 'Meter Name must be null if the Account is not Meter-Modeled.',
            MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_ALIAS IS NULL, 'Meter Alias must be null if the Account is not Meter-Modeled.',
            MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_DESC IS NULL, 'Meter Desc must be null if the Account is not Meter-Modeled.',
            MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_STATUS IS NULL, 'Meter Status must be null if the Account is not Meter-Modeled.',
            MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_INTERVAL IS NULL, 'Meter Interval must be null if the Account is not Meter-Modeled.',
            MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_UNIT IS NULL, 'Meter Unit must be null if the Account is not Meter-Modeled.',
            MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_EDC_IDENT IS NULL, 'EDC Identifier (Meter) must be null if the Account is not Meter-Modeled.',
            MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_ESP_IDENT IS NULL, 'ESP Identifier (Meter) must be null if the Account is not Meter-Modeled.',
            MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL1 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL2 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL3 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL4 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL5 IS NULL, 'No Meter Ancillary Service Values can be specified if the Account is not Metered-Modeled.', MSGCODES.c_ERR_ARGUMENT);
    ELSIF IS_PROCESSING_METER(p_ACCOUNT_SYNC_STAGING_REC) THEN
        -- using a temp variable rather than just repeat the reason why this meter field has to be repeated 8 times
        v_TEMP := ' if the Account is Meter-Modeled and any of the Meter fields are specified.';
        -- REQUIRED METER FIELDS
        ASSERT(IS_PROCESSING_SERVICE_LOCATION(p_ACCOUNT_SYNC_STAGING_REC), 'A Service Location must be specified' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT IS NOT NULL, 'Meter Identifier must be non-null' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
	    ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Meter Identifier can not be set to the Delete Marker ('
            || c_ACCOUNT_SYNC_DELETE_MARKER || ') ' || v_TEMP , MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_NAME IS NOT NULL, 'Meter Name must be non-null ' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
	    ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_NAME <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Meter Name can not be set to the Delete Marker ('
            || c_ACCOUNT_SYNC_DELETE_MARKER || ') ' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_STATUS IS NOT NULL, 'Meter Status must be non-null ' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
	    ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_STATUS <> c_ACCOUNT_SYNC_DELETE_MARKER, 'Meter Status can not be set to the Delete Marker ('
            || c_ACCOUNT_SYNC_DELETE_MARKER || ') ' || v_TEMP , MSGCODES.c_ERR_ARGUMENT);

        -- Validate Meter Status
        SELECT COUNT(1)
        INTO v_COUNT
        FROM ACCOUNT_STATUS_NAME X
        WHERE X.STATUS_NAME = p_ACCOUNT_SYNC_STAGING_REC.METER_STATUS;

        ASSERT(v_COUNT = 1, 'Meter Status Name must already exist in the database. METER_STATUS_NAME = ' || p_ACCOUNT_SYNC_STAGING_REC.METER_STATUS, MSGCODES.c_ERR_ARGUMENT);

        IF DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.MRSP_IDENT) IS NOT NULL THEN
            v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.MRSP_IDENT, EC.ED_MRSP);
        END IF;

        VALIDATE_COMMON_FIELDS(p_ACCOUNT_SYNC_STAGING_REC);

        IF p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL1 IS NOT NULL THEN
            IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
                v_ID := g_ELC_MTR_ANC_SERV(1);
            ELSE
                v_ID := g_GAS_MTR_ANC_SERV(1);
            END IF;

            ASSERT(v_ID IS NOT NULL, 'A value was specified for Meter Ancillary Service Value 1 but no corresponding Ancillary Service '
                || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
        END IF;

        IF p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL2 IS NOT NULL THEN
            IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
                v_ID := g_ELC_MTR_ANC_SERV(2);
            ELSE
                v_ID := g_GAS_MTR_ANC_SERV(2);
            END IF;

            ASSERT(v_ID IS NOT NULL, 'A value was specified for Meter Ancillary Service Value 2 but no corresponding Ancillary Service '
                || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
        END IF;

        IF p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL3 IS NOT NULL THEN
            IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
                v_ID := g_ELC_MTR_ANC_SERV(3);
            ELSE
                v_ID := g_GAS_MTR_ANC_SERV(3);
            END IF;

            ASSERT(v_ID IS NOT NULL, 'A value was specified for Meter Ancillary Service Value 3 but no corresponding Ancillary Service '
                || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
        END IF;

        IF p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL4 IS NOT NULL THEN
            IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
                v_ID := g_ELC_MTR_ANC_SERV(4);
            ELSE
                v_ID := g_GAS_MTR_ANC_SERV(4);
            END IF;

            ASSERT(v_ID IS NOT NULL, 'A value was specified for Meter Ancillary Service Value 4 but no corresponding Ancillary Service '
                || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
        END IF;

        IF p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL5 IS NOT NULL THEN
            IF p_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_SERVICE = c_ACCOUNT_SERVICE_ELECTRIC THEN
                v_ID := g_ELC_MTR_ANC_SERV(5);
            ELSE
                v_ID := g_GAS_MTR_ANC_SERV(5);
            END IF;

            ASSERT(v_ID IS NOT NULL, 'A value was specified for Meter Ancillary Service Value 5 but no corresponding Ancillary Service '
                || 'was specified in the system dictionary.', MSGCODES.c_ERR_ARGUMENT);
        END IF;
    ELSIF IS_DELETING_METER(p_ACCOUNT_SYNC_STAGING_REC) THEN
        ASSERT(IS_PROCESSING_SERVICE_LOCATION(p_ACCOUNT_SYNC_STAGING_REC), 'A Service Location must be specified if the Service Location - Meter association is to be deleted.' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
        ASSERT(DEL_TO_NULL(p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT) IS NOT NULL, 'A Meter Identifier must be specified if the Service Location - Meter association is specified to be deleted.',
            MSGCODES.c_ERR_ARGUMENT);

        v_ID := EI.GET_ID_FROM_IDENTIFIER(p_ACCOUNT_SYNC_STAGING_REC.METER_IDENT,EC.ED_METER);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT IS NULL, 'A Loss Factor cannot be specified (or specified to be deleted) '
                                                       || 'if the Service Location - meter association is to be deleted.', MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT IS NULL, 'A Schedule Group cannot be specified (or specified to be deleted) '
                                                       || 'if the Service Location - meter association is to be deleted.', MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.FORECAST_CALENDAR_IDENT IS NULL, 'A Forecast Calendar cannot be specified (or specified to be deleted) '
                                                       || 'if the Service Location - meter association is to be deleted.', MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.BACKCAST_CALENDAR_IDENT IS NULL, 'A Backcast Calendar cannot be specified (or specified to be deleted) '
                                                       || 'if the Service Location - meter association is to be deleted.', MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.STTL_PROFILE_CALENDAR_IDENT IS NULL, 'A Settlement Calendar cannot be specified (or specified to be deleted) '
                                                       || 'if the Service Location - meter association is to be deleted.', MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT IS NULL, 'A TOU Usage Factor Template cannot be specified (or specified to be deleted) '
                                                                    || 'if the Service Location - meter association is to be deleted.', MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1 IS NULL AND
               p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL2 IS NULL AND
               p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL3 IS NULL AND
               p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL4 IS NULL AND
               p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL5 IS NULL, 'No Usage Factor values can be specified (or specified to be deleted) '
                                                                    || 'if the Service Location - meter association is to be deleted.', MSGCODES.c_ERR_ARGUMENT);

       ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL1 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL2 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL3 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL4 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL5 IS NULL, 'No Meter Ancillary Service Values can be specified (or specitied to be deleted) '
                                                                    || 'if the Service Location - meter association is to be deleted.', MSGCODES.c_ERR_ARGUMENT);
    ELSE
        -- METER MODELED, BUT NO METER SPECIFIED

        v_TEMP := '(or be specified to be deleted) if the Meter is not specified for a Meter-modeled Account.';

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.LOSS_FACTOR_IDENT IS NULL, 'A Loss Factor cannot be specified' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.SCHEDULE_GROUP_IDENT IS NULL, 'A Schedule Group cannot be specified' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.FORECAST_CALENDAR_IDENT IS NULL, 'A Forecast Calendar cannot be specified' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.BACKCAST_CALENDAR_IDENT IS NULL, 'A Backcast Calendar cannot be specified' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.STTL_PROFILE_CALENDAR_IDENT IS NULL, 'A Settlement Calendar cannot be specified' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);

        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.TOU_TEMPLATE_IDENT IS NULL, 'A TOU Usage Factor Template cannot be specified' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
        ASSERT(p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL1 IS NULL AND
               p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL2 IS NULL AND
               p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL3 IS NULL AND
               p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL4 IS NULL AND
               p_ACCOUNT_SYNC_STAGING_REC.USAGE_FACTOR_VAL5 IS NULL, 'No Usage Factor values can be specified' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);

       ASSERT(p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL1 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL2 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL3 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL4 IS NULL AND
              p_ACCOUNT_SYNC_STAGING_REC.METER_ANC_SERVICE_VAL5 IS NULL, 'No Meter Ancillary Service Values can be specified' || v_TEMP, MSGCODES.c_ERR_ARGUMENT);
    END IF;

END VALIDATE_ACCOUNT_SYNC;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT_SYNC_IMPL
	(
	p_MESSAGE OUT VARCHAR2,
    p_PROCESS_ID OUT VARCHAR2,
    p_PROCESS_STATUS OUT NUMBER,
    p_SUB_AGG_ACOUNTS OUT NUMBER_COLLECTION,
	p_IS_FULL_SYNC IN NUMBER := 0,
	p_BEGIN_DATE IN DATE := NULL,
    p_TRACE_ON IN NUMBER := 0
	) AS
	v_RECORD_COUNT  NUMBER := 0;
	v_SUCCESS_COUNT NUMBER := 0;
	v_ERROR_COUNT   NUMBER := 0;
	v_ACCOUNT_ID	ACCOUNT.ACCOUNT_ID%TYPE;
    v_SERVICE_LOCATION_ID SERVICE_LOCATION.SERVICE_LOCATION_ID%TYPE;
    v_METER_ID      METER.METER_ID%TYPE;
	v_ERROR_MSG VARCHAR2(4000);
	v_IS_FULL_SYNC NUMBER;

	CURSOR cur_ACCOUNT_SYNC_STAGING IS
		SELECT * FROM ACCOUNT_SYNC_STAGING A ORDER BY A.SYNC_ORDER FOR UPDATE;

	v_ACCOUNT_SYNC_STAGING_REC ACCOUNT_SYNC_STAGING%ROWTYPE;
BEGIN

	p_SUB_AGG_ACOUNTS := NUMBER_COLLECTION();

	v_IS_FULL_SYNC := NVL(p_IS_FULL_SYNC, 0);

    LOGS.START_PROCESS('Process Account Sync Staging Table' || CASE WHEN v_IS_FULL_SYNC = 1 THEN ' -- Full Sync' ELSE NULL END,
                        p_TRACE_ON => p_TRACE_ON);
    IF v_IS_FULL_SYNC = 1 THEN
        LOGS.SET_PROCESS_TARGET_PARAMETER('BEGIN_DATE', TEXT_UTIL.TO_CHAR_DATE(p_BEGIN_DATE));
    END IF;

	XS.PRE_ACCOUNT_SYNC();

	SELECT COUNT(1)
	INTO v_RECORD_COUNT
	FROM ACCOUNT_SYNC_STAGING A ORDER BY A.SYNC_ORDER;

	IF v_RECORD_COUNT > 0 THEN
        IF NOT VALIDATE_SYSTEM_DICT_CONFIG THEN
            p_MESSAGE := 'The System Dictionary configuration for the Account Sync is invalid.  '
                || 'None of the entries in the Account Sync Staging table have been processed.';
        ELSE

            IF v_IS_FULL_SYNC = 1 THEN
                PROCESS_FULL_SYNC(p_BEGIN_DATE);
            END IF;

            LOGS.INIT_PROCESS_PROGRESS(p_TOTAL_WORK => v_RECORD_COUNT);

            OPEN cur_ACCOUNT_SYNC_STAGING;
            BEGIN
                LOOP
                    FETCH cur_ACCOUNT_SYNC_STAGING into v_ACCOUNT_SYNC_STAGING_REC;
                    EXIT WHEN cur_ACCOUNT_SYNC_STAGING%NOTFOUND;
                    BEGIN
                        -- As far as processing the sub-tables is concerned, we're only a
                        -- full sync when the begin date of the current record is on or after
                        -- the current row's begin date, because that's the only date ranges
                        -- for which the full sync would've already deleted the temporal data
                        -- and the sub table processingly only looks at the full sync flag in
                        -- this context.

                        IF p_BEGIN_DATE < v_ACCOUNT_SYNC_STAGING_REC.BEGIN_DATE THEN
                            v_IS_FULL_SYNC := 0;
                        ELSE
                            v_IS_FULL_SYNC := NVL(p_IS_FULL_SYNC, 0);
                        END IF;

                        VALIDATE_ACCOUNT_SYNC(v_ACCOUNT_SYNC_STAGING_REC);
                        PROCESS_ACCOUNT(v_ACCOUNT_SYNC_STAGING_REC, v_ACCOUNT_ID);
                        PROCESS_ACCOUNT_STATUS(v_ACCOUNT_ID, v_ACCOUNT_SYNC_STAGING_REC);
                        PROCESS_SERVICE_LOCATION(v_ACCOUNT_ID, v_ACCOUNT_SYNC_STAGING_REC, v_IS_FULL_SYNC, v_SERVICE_LOCATION_ID);
                        PROCESS_METER(v_SERVICE_LOCATION_ID, v_ACCOUNT_SYNC_STAGING_REC, v_IS_FULL_SYNC, v_METER_ID);
                        PROCESS_ACCOUNT_EDC(v_ACCOUNT_ID, v_ACCOUNT_SYNC_STAGING_REC, v_IS_FULL_SYNC);
                        PROCESS_ACCOUNT_ESP(v_ACCOUNT_ID, v_ACCOUNT_SYNC_STAGING_REC, v_IS_FULL_SYNC);
                        PROCESS_LOSS_FACTOR(v_ACCOUNT_ID, v_METER_ID, v_ACCOUNT_SYNC_STAGING_REC, v_IS_FULL_SYNC);
                        PROCESS_CALENDAR(v_ACCOUNT_ID, v_METER_ID, v_ACCOUNT_SYNC_STAGING_REC, v_ACCOUNT_SYNC_STAGING_REC.FORECAST_CALENDAR_IDENT, ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST, v_IS_FULL_SYNC);
                        PROCESS_CALENDAR(v_ACCOUNT_ID, v_METER_ID, v_ACCOUNT_SYNC_STAGING_REC, v_ACCOUNT_SYNC_STAGING_REC.BACKCAST_CALENDAR_IDENT, ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST, v_IS_FULL_SYNC);
                        PROCESS_CALENDAR(v_ACCOUNT_ID, v_METER_ID, v_ACCOUNT_SYNC_STAGING_REC, v_ACCOUNT_SYNC_STAGING_REC.STTL_PROFILE_CALENDAR_IDENT, ACCOUNTS_METERS.c_CALENDAR_TYPE_SETTLEMENT, v_IS_FULL_SYNC);
                        PROCESS_SCHEDULE_GROUP(v_ACCOUNT_ID, v_METER_ID, v_ACCOUNT_SYNC_STAGING_REC, v_IS_FULL_SYNC);
                        PROCESS_BILL_CYCLE(v_ACCOUNT_ID, v_ACCOUNT_SYNC_STAGING_REC, v_IS_FULL_SYNC);
                        PROCESS_ACCOUNT_PRODUCT(v_ACCOUNT_ID,
                            v_ACCOUNT_SYNC_STAGING_REC,
                            v_ACCOUNT_SYNC_STAGING_REC.REVENUE_PRODUCT_IDENT,
                            ACCOUNTS_METERS.c_PRODUCT_TYPE_REV_ABBR,
                            v_IS_FULL_SYNC);
                        PROCESS_ACCOUNT_PRODUCT(v_ACCOUNT_ID,
                            v_ACCOUNT_SYNC_STAGING_REC,
                            v_ACCOUNT_SYNC_STAGING_REC.COST_PRODUCT_IDENT,
                            ACCOUNTS_METERS.c_PRODUCT_TYPE_COST_ABBR,
                            v_IS_FULL_SYNC);
                        PROCESS_ACCOUNT_PROXY_DAY(v_ACCOUNT_ID,
                            v_ACCOUNT_SYNC_STAGING_REC,
                            v_ACCOUNT_SYNC_STAGING_REC.FORECAST_PROXY_DAY_IDENT,
                            ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST,
                            v_IS_FULL_SYNC);
                        PROCESS_ACCOUNT_PROXY_DAY(v_ACCOUNT_ID,
                            v_ACCOUNT_SYNC_STAGING_REC,
                            v_ACCOUNT_SYNC_STAGING_REC.BACKCAST_PROXY_DAY_IDENT,
                            ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST,
                            v_IS_FULL_SYNC);
                        PROCESS_CONTRACT_ASSIGNMENT(v_ACCOUNT_ID, v_ACCOUNT_SYNC_STAGING_REC, v_IS_FULL_SYNC);
                        PROCESS_USAGE_FACTOR(v_ACCOUNT_ID, v_METER_ID, v_ACCOUNT_SYNC_STAGING_REC);
                        PROCESS_ANCILLARY_SERVICE(v_ACCOUNT_ID, v_METER_ID, v_ACCOUNT_SYNC_STAGING_REC);
                        PROCESS_ENTITY_GROUPS(v_ACCOUNT_ID, v_ACCOUNT_SYNC_STAGING_REC);
                        PROCESS_CUSTOM_ATTRIBUTES(v_ACCOUNT_ID, v_ACCOUNT_SYNC_STAGING_REC);
                        PROCESS_ACCOUNT_GROUP(v_ACCOUNT_ID, v_ACCOUNT_SYNC_STAGING_REC);
                        v_SUCCESS_COUNT := v_SUCCESS_COUNT + 1;

                        IF v_ACCOUNT_SYNC_STAGING_REC.ACCOUNT_IS_SUB_AGGREGATE = 1 THEN
                            p_SUB_AGG_ACOUNTS.EXTEND();
                            p_SUB_AGG_ACOUNTS(p_SUB_AGG_ACOUNTS.LAST) := v_ACCOUNT_ID;
                        END IF;

                        -- Update the status of the row
                        UPDATE ACCOUNT_SYNC_STAGING A
                        SET A.SYNC_STATUS = c_ACCOUNT_SYNC_STATUS_SUCCESS,
                            A.ERROR_MESSAGE = NULL
                        WHERE CURRENT OF cur_ACCOUNT_SYNC_STAGING;
                EXCEPTION
                    WHEN OTHERS THEN
                        ERRS.LOG_AND_CONTINUE();
                        v_ERROR_COUNT := v_ERROR_COUNT + 1;

                            -- Grab error message
                            v_ERROR_MSG := SQLERRM;

                            --Update the status and message of the row
                            UPDATE ACCOUNT_SYNC_STAGING A
                            SET A.SYNC_STATUS = c_ACCOUNT_SYNC_STATUS_ERROR,
                                A.ERROR_MESSAGE = v_ERROR_MSG
                            WHERE CURRENT OF cur_ACCOUNT_SYNC_STAGING;
                END;
                LOGS.INCREMENT_PROCESS_PROGRESS;
            END LOOP;

                CLOSE cur_ACCOUNT_SYNC_STAGING;

            EXCEPTION
                WHEN OTHERS THEN
                      BEGIN
                        CLOSE cur_ACCOUNT_SYNC_STAGING;
                      EXCEPTION
                        WHEN OTHERS THEN
                            ERRS.LOG_AND_CONTINUE();
                      END;
                      ERRS.LOG_AND_RAISE();
            END;

            XS.POST_ACCOUNT_SYNC();

            p_MESSAGE := 'Process completed with ' || v_SUCCESS_COUNT || ' successful entries and ' || v_ERROR_COUNT || ' errors.';
        END IF;

	ELSE
		-- No rows to process
		IF v_IS_FULL_SYNC = 1 THEN
            LOGS.LOG_ERROR('There are no Account records to process.');
            p_MESSAGE := 'No account records were found.  The account sync process was not run.';
		END IF;
	END IF;

    p_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
    -- REPLACE THE MESSAGE WITH OUR OWN
	COMMIT;
    LOGS.STOP_PROCESS(p_MESSAGE, p_PROCESS_STATUS);

EXCEPTION
    WHEN OTHERS THEN
		ERRS.ABORT_PROCESS;
END PROCESS_ACCOUNT_SYNC_IMPL;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT_SYNC_WITH_AGG
	(
	p_MESSAGE OUT VARCHAR2,
	p_IS_FULL_SYNC IN NUMBER := 0,
	p_BEGIN_DATE IN DATE := NULL,
    p_RESET_DATES IN NUMBER := 0,
    p_TRACE_ON IN NUMBER := 0
	) AS

    v_ACCTS NUMBER_COLLECTION;
    v_PROCESS_ID VARCHAR2(32);
    v_PROCESS_STATUS NUMBER;
    v_MESSAGE VARCHAR2(4000);

    v_BEGIN DATE;
    v_END DATE;

    v_TEST PLS_INTEGER;

BEGIN

    PROCESS_ACCOUNT_SYNC_IMPL(v_MESSAGE, v_PROCESS_ID, v_PROCESS_STATUS, v_ACCTS, p_IS_FULL_SYNC, p_BEGIN_DATE, p_TRACE_ON);

    p_MESSAGE := 'Account Sync finished with the message: ''' || v_MESSAGE || '''';

    IF NVL(p_IS_FULL_SYNC,0) = 1 THEN
        v_ACCTS := NUMBER_COLLECTION(CONSTANTS.ALL_ID);
    END IF;

    IF v_ACCTS IS NOT NULL AND v_ACCTS.COUNT > 0 THEN
        SELECT MIN(X.BEGIN_DATE),
            MAX(NVL(X.END_DATE, CONSTANTS.HIGH_DATE))
        INTO v_BEGIN, v_END
        FROM ACCOUNT_SYNC_STAGING X
        WHERE X.SYNC_STATUS = c_ACCOUNT_SYNC_STATUS_SUCCESS;

        IF NVL(p_IS_FULL_SYNC,0) = 1 THEN
            v_BEGIN := LEAST(v_BEGIN,p_BEGIN_DATE);
            v_END := CONSTANTS.HIGH_DATE;
        END IF;

        ACCOUNT_AGGREGATION.RUN_TRANSACTIONAL_AGGREGATION(v_ACCTS, v_BEGIN, v_END, p_RESET_DATES, p_TRACE_ON, v_PROCESS_ID,
            v_PROCESS_STATUS, v_MESSAGE);

        p_MESSAGE := p_MESSAGE || ' and the account aggregation finished with the message: ''' || v_MESSAGE || '''';
    ELSE
        SELECT COUNT(1)
        INTO v_TEST
        FROM ACCOUNT_SYNC_STAGING X
        WHERE X.SYNC_STATUS = c_ACCOUNT_SYNC_STATUS_ERROR
            AND X.ACCOUNT_IS_SUB_AGGREGATE = 1;

        LOGS.LOG_INFO('The Account Aggregation was not run after the Account Sync because no sub aggregate accounts were synced.');
        IF v_TEST > 0 THEN
            LOGS.LOG_ERROR('The Account Aggregation was not run because Sub Aggregate Accounts included in the sync had validation errors.');
        END IF;
    END IF;

END PROCESS_ACCOUNT_SYNC_WITH_AGG;
------------------------------------------------------------------------------------------
PROCEDURE PROCESS_ACCOUNT_SYNC_STAGING
	(
	p_MESSAGE OUT VARCHAR2,
    p_PROCESS_ID OUT VARCHAR2,
    p_PROCESS_STATUS OUT NUMBER,
	p_IS_FULL_SYNC IN NUMBER := 0,
	p_BEGIN_DATE IN DATE := NULL,
    p_TRACE_ON IN NUMBER := 0
	) AS

    v_ACCT_IDS NUMBER_COLLECTION;

BEGIN

    PROCESS_ACCOUNT_SYNC_IMPL(p_MESSAGE, p_PROCESS_ID, p_PROCESS_STATUS, v_ACCT_IDS, p_IS_FULL_SYNC, p_BEGIN_DATE, p_TRACE_ON);

END PROCESS_ACCOUNT_SYNC_STAGING;
------------------------------------------------------------------------------------------
END ACCOUNT_SYNC;
/
