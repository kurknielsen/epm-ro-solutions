CREATE OR REPLACE PACKAGE BODY CX AS
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.6 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE ADD_NEW_ID_TO_COLLECTION
	(
	p_ID IN NUMBER,
	p_IDS IN OUT NOCOPY ID_TABLE
	) AS

v_INDEX BINARY_INTEGER;

BEGIN

	v_INDEX := p_IDS.FIRST;
	WHILE v_INDEX <= p_IDS.LAST LOOP
		IF p_IDS(v_INDEX).ID = p_ID THEN
			RETURN; -- Id already exists.
		END IF;
		v_INDEX := p_IDS.NEXT(v_INDEX);
	END LOOP;

-- The Id does not exist in the collection so add it.
	p_IDS.EXTEND;
	p_IDS(p_IDS.LAST) := ID_TYPE(p_ID);

END ADD_NEW_ID_TO_COLLECTION;
----------------------------------------------------------------------------------------------------
PROCEDURE TRACE_TIMED_VALUE
	(
	p_CACHE_NAME IN VARCHAR,
	p_INDEX_DIRECTORY IN INDEX_DIRECTORY,
	p_TIMED_VALUES IN TIMED_VALUE
	) AS

v_DIR_INDEX BINARY_INTEGER;
v_VAL_INDEX BINARY_INTEGER;

BEGIN

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('TRACE_TIMED_VALUE: ' || p_CACHE_NAME);

		IF p_INDEX_DIRECTORY.COUNT > 0 THEN
			v_DIR_INDEX := p_INDEX_DIRECTORY.FIRST;
			WHILE v_DIR_INDEX <= p_INDEX_DIRECTORY.LAST LOOP
				LOGS.LOG_DEBUG('INDEX@ ' || TO_CHAR(v_DIR_INDEX) || ',' || TO_CHAR(p_INDEX_DIRECTORY(v_DIR_INDEX).START_INDEX) || ',' || TO_CHAR(p_INDEX_DIRECTORY(v_DIR_INDEX).STOP_INDEX));
				FOR v_VAL_INDEX IN p_INDEX_DIRECTORY(v_DIR_INDEX).START_INDEX..p_INDEX_DIRECTORY(v_DIR_INDEX).STOP_INDEX LOOP
					LOGS.LOG_DEBUG('DATA@ ' || TO_CHAR(v_VAL_INDEX) || ',' || TO_CHAR(p_TIMED_VALUES(v_VAL_INDEX).BEGIN_DATE) || ',' || TO_CHAR(p_TIMED_VALUES(v_VAL_INDEX).END_DATE) || ',' || TO_CHAR(p_TIMED_VALUES(v_VAL_INDEX).DATA_VALUE));
				END LOOP;
					v_DIR_INDEX := p_INDEX_DIRECTORY.NEXT(v_DIR_INDEX);
			END LOOP;
		END IF;
	END IF;

END TRACE_TIMED_VALUE;
----------------------------------------------------------------------------------------------------
PROCEDURE TRACE_PATTERN
	(
	p_PATTERN_ID IN NUMBER
	) IS

v_INDEX BINARY_INTEGER;

BEGIN

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('TRACE_PATTERN, PATTERN_ID=' || TO_CHAR(p_PATTERN_ID));
		v_INDEX := g_LOSS_FACTOR_PATTERN.FIRST;
		WHILE v_INDEX <= g_LOSS_FACTOR_PATTERN.LAST LOOP
			IF g_LOSS_FACTOR_PATTERN(v_INDEX).PATTERN_ID = p_PATTERN_ID THEN
				LOGS.LOG_DEBUG(TO_CHAR(g_LOSS_FACTOR_PATTERN(v_INDEX).PATTERN_VAL) || '@' || TO_CHAR(v_INDEX));
			ELSIF g_LOSS_FACTOR_PATTERN(v_INDEX).PATTERN_ID > p_PATTERN_ID THEN
				RETURN;
			END IF;
			v_INDEX := g_LOSS_FACTOR_PATTERN.NEXT(v_INDEX);
		END LOOP;
	END IF;

END TRACE_PATTERN;
----------------------------------------------------------------------------------------------------
PROCEDURE TRACE_PATTERN_IDS
	(
	p_IDS IN OUT NOCOPY ID_TABLE
	) AS

v_INDEX BINARY_INTEGER;

BEGIN

	LOGS.LOG_DEBUG('TRACE_PATTERN_IDS');

	IF p_IDS.COUNT > 0 THEN
		v_INDEX := p_IDS.FIRST;
		WHILE v_INDEX <= p_IDS.LAST LOOP
			LOGS.LOG_DEBUG('ID=' || TO_CHAR(p_IDS(v_INDEX).ID) || '@' || TO_CHAR(v_INDEX));
			v_INDEX := p_IDS.NEXT(v_INDEX);
		END LOOP;
	END IF;

END TRACE_PATTERN_IDS;
--------------------------------------------------------------------------------------------------
PROCEDURE TRACE_CALENDARS AS

BEGIN

	LOGS.LOG_DEBUG('TRACE_CALENDARS');
	TRACE_TIMED_VALUE('FORECAST', g_FORECAST_CALENDAR_INDEX, g_FORECAST_CALENDAR_CACHE);
	TRACE_TIMED_VALUE('BACKCAST', g_BACKCAST_CALENDAR_INDEX, g_BACKCAST_CALENDAR_CACHE);

END TRACE_CALENDARS;
----------------------------------------------------------------------------------------------------
PROCEDURE TRACE_ACCOUNT_SERVICE_IDS AS

v_INDEX BINARY_INTEGER;

BEGIN

	LOGS.LOG_DEBUG('TRACE_ACCOUNT_SERVICE_IDS <id>@<index>');
	v_INDEX := g_ACCOUNT_SERVICE_XREF.FIRST;
	WHILE v_INDEX <= g_ACCOUNT_SERVICE_XREF.LAST LOOP
		LOGS.LOG_DEBUG(TO_CHAR(g_ACCOUNT_SERVICE_XREF(v_INDEX)) || '@' || TO_CHAR(v_INDEX));
		v_INDEX := g_ACCOUNT_SERVICE_XREF.NEXT(v_INDEX);
	END LOOP;

END TRACE_ACCOUNT_SERVICE_IDS;
----------------------------------------------------------------------------------------------------
PROCEDURE TRACE_AGGREGATE_GROWTH
	(
	p_AGGREGATE_GROWTH IN AGGREGATE_ACCOUNT_GROWTH_TYPE,
	p_SERVICE_DATE IN DATE
	) AS

BEGIN

	LOGS.LOG_DEBUG(TO_CHAR(p_SERVICE_DATE) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.ACCOUNT_SERVICE_ID) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.BEGIN_DATE) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.END_DATE) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.BASIS_SERVICE_ACCOUNTS) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.GROWTH_PCT) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.PATTERN_ID) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.RUNNING_SERVICE_ACCOUNTS) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.ACCOUNTS_PER_INTERVAL) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.SERVICE_ACCOUNTS) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.SERVICE_INTERVAL) || ', ' ||
		TO_CHAR(p_AGGREGATE_GROWTH.SERVICE_GROWTH_PCT));

END TRACE_AGGREGATE_GROWTH;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_TIMED_VALUE
	(
	p_CURSOR IN OUT NOCOPY GA.REFCURSOR,
	p_INDEX_DIRECTORY IN OUT NOCOPY INDEX_DIRECTORY,
	p_TIMED_VALUES IN OUT NOCOPY TIMED_VALUE
	) AS

-- The cursor contains an id, begin date, end date, and a value to be applied over the date range

v_INDEX BINARY_INTEGER := 0;
v_XREF_ID BINARY_INTEGER;
v_CACHE_ID NUMBER(9);
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_VALUE NUMBER;

BEGIN

	LOOP
		FETCH p_CURSOR INTO v_CACHE_ID, v_BEGIN_DATE, v_END_DATE, v_VALUE;
		EXIT WHEN p_CURSOR%NOTFOUND;

		v_INDEX := v_INDEX + 1;
		p_TIMED_VALUES(v_INDEX).BEGIN_DATE := v_BEGIN_DATE;
		p_TIMED_VALUES(v_INDEX).END_DATE := v_END_DATE;
		p_TIMED_VALUES(v_INDEX).DATA_VALUE := v_VALUE;

		IF NOT g_ACCOUNT_SERVICE_XREF.EXISTS(v_CACHE_ID) THEN
			g_ACCOUNT_SERVICE_XREF(v_CACHE_ID) := g_ACCOUNT_SERVICE_XREF.COUNT + 1;
		END IF;

		v_XREF_ID := g_ACCOUNT_SERVICE_XREF(v_CACHE_ID);

		IF p_INDEX_DIRECTORY.EXISTS(v_XREF_ID) THEN
			p_INDEX_DIRECTORY(v_XREF_ID).STOP_INDEX := v_INDEX;
		ELSE
			p_INDEX_DIRECTORY(v_XREF_ID).START_INDEX := v_INDEX;
			p_INDEX_DIRECTORY(v_XREF_ID).STOP_INDEX := v_INDEX;
		END IF;

	END LOOP;
	CLOSE p_CURSOR;

EXCEPTION
	WHEN OTHERS THEN
		IF p_CURSOR%ISOPEN THEN
			CLOSE p_CURSOR;
		END IF;

END CACHE_TIMED_VALUE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_TIMED_VALUE
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_INDEX_DIRECTORY IN OUT NOCOPY INDEX_DIRECTORY,
	p_TIMED_VALUES IN OUT NOCOPY TIMED_VALUE,
	p_NO_DATA_FOUND OUT BOOLEAN
	) RETURN NUMBER IS

v_XREF_ID BINARY_INTEGER;

BEGIN

	IF g_ACCOUNT_SERVICE_XREF.EXISTS(p_ACCOUNT_SERVICE_ID) THEN
		v_XREF_ID := g_ACCOUNT_SERVICE_XREF(p_ACCOUNT_SERVICE_ID);
		IF p_INDEX_DIRECTORY.EXISTS(v_XREF_ID) THEN
			FOR v_INDEX IN p_INDEX_DIRECTORY(v_XREF_ID).START_INDEX..p_INDEX_DIRECTORY(v_XREF_ID).STOP_INDEX LOOP
				IF p_SERVICE_DATE BETWEEN p_TIMED_VALUES(v_INDEX).BEGIN_DATE AND p_TIMED_VALUES(v_INDEX).END_DATE THEN
					p_NO_DATA_FOUND := FALSE;
					RETURN p_TIMED_VALUES(v_INDEX).DATA_VALUE;
				END IF;
			END LOOP;
		END IF;
	END IF;

	p_NO_DATA_FOUND := TRUE;
	RETURN g_NOT_ASSIGNED;

END GET_TIMED_VALUE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_TIMED_VALUE
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_INDEX_DIRECTORY IN OUT NOCOPY INDEX_DIRECTORY,
	p_TIMED_VALUES IN OUT NOCOPY TIMED_VALUE
	) RETURN NUMBER IS

v_XREF_ID BINARY_INTEGER;

BEGIN

	IF g_ACCOUNT_SERVICE_XREF.EXISTS(p_ACCOUNT_SERVICE_ID) THEN
		v_XREF_ID := g_ACCOUNT_SERVICE_XREF(p_ACCOUNT_SERVICE_ID);
		IF p_INDEX_DIRECTORY.EXISTS(v_XREF_ID) THEN
			FOR v_INDEX IN p_INDEX_DIRECTORY(v_XREF_ID).START_INDEX..p_INDEX_DIRECTORY(v_XREF_ID).STOP_INDEX LOOP
				IF p_SERVICE_DATE BETWEEN p_TIMED_VALUES(v_INDEX).BEGIN_DATE AND p_TIMED_VALUES(v_INDEX).END_DATE THEN
					RETURN p_TIMED_VALUES(v_INDEX).DATA_VALUE;
				END IF;
			END LOOP;
		END IF;
	END IF;

	RETURN g_NOT_ASSIGNED;

END GET_TIMED_VALUE;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_PSE_IS_BUG AS

CURSOR c_PSE_IS_BUG IS
	SELECT PSE_ID, PSE_IS_BACKUP_GENERATION
	FROM PURCHASING_SELLING_ENTITY
	WHERE UPPER(SUBSTR(PSE_STATUS,1,1)) = 'A';

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	g_PSE_IS_BUG_CACHE.DELETE;

	FOR v_PSE_IS_BUG IN c_PSE_IS_BUG LOOP
		g_PSE_IS_BUG_CACHE(v_PSE_IS_BUG.PSE_ID) := v_PSE_IS_BUG.PSE_IS_BACKUP_GENERATION;
	END LOOP;

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_PSE_IS_BUG TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_PSE_IS_BUG_CACHE.COUNT));
	END IF;

END CACHE_PSE_IS_BUG;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_ESP_SUPPLY_TYPE AS

CURSOR c_ESP_SUPPLY_TYPE IS
	SELECT ESP_ID, UPPER(SUBSTR(ESP_TYPE,1,1)) "SUPPLY_TYPE"
	FROM ENERGY_SERVICE_PROVIDER
	WHERE UPPER(SUBSTR(ESP_STATUS,1,1)) = 'A';

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	g_ESP_SUPPLY_TYPE_CACHE.DELETE;

	FOR v_ESP_SUPPLY_TYPE IN c_ESP_SUPPLY_TYPE LOOP
		g_ESP_SUPPLY_TYPE_CACHE(v_ESP_SUPPLY_TYPE.ESP_ID) := v_ESP_SUPPLY_TYPE.SUPPLY_TYPE;
	END LOOP;

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_ESP_SUPPLY_TYPE TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_ESP_SUPPLY_TYPE_CACHE.COUNT));
	END IF;

END CACHE_ESP_SUPPLY_TYPE;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_SCHEDULE_GROUP
	(
	p_IDS IN ID_TABLE,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS


v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
c_SCHEDULE_GROUP GA.REFCURSOR;

BEGIN

	OPEN c_SCHEDULE_GROUP FOR
		SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.SCHEDULE_GROUP_ID
		FROM ACCOUNT_SERVICE A, ACCOUNT_SCHEDULE_GROUP B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND A.METER_ID = g_NOT_ASSIGNED
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		UNION SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.SCHEDULE_GROUP_ID
		FROM ACCOUNT_SERVICE A, METER_SCHEDULE_GROUP B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND NOT A.METER_ID = g_NOT_ASSIGNED
			AND B.METER_ID = A.METER_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		ORDER BY 1,2;

	g_SCHEDULE_GROUP_INDEX.DELETE;
	g_SCHEDULE_GROUP_CACHE.DELETE;

	CACHE_TIMED_VALUE(c_SCHEDULE_GROUP, g_SCHEDULE_GROUP_INDEX, g_SCHEDULE_GROUP_CACHE);

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_SCHEDULE_GROUP TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_SCHEDULE_GROUP_CACHE.COUNT));
	END IF;

END CACHE_SCHEDULE_GROUP;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_SCHEDULE_COORDINATOR AS

CURSOR c_EDC IS
	SELECT EDC_ID, NVL(EDC_SC_ID, g_NOT_ASSIGNED) "SC_ID"
	FROM ENERGY_DISTRIBUTION_COMPANY;

BEGIN

	FOR v_EDC IN c_EDC LOOP
		g_EDC_SCHEDULE_COORDINATOR(v_EDC.EDC_ID) := v_EDC.SC_ID;
	END LOOP;

END CACHE_SCHEDULE_COORDINATOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_SCHED_GROUP_ATTRIBUTES AS

CURSOR c_SCHEDULE_GROUP IS
	SELECT SCHEDULE_GROUP_ID,
		NVL(SC_ID, g_NOT_ASSIGNED) "SC_ID",
		NVL(SERVICE_ZONE_ID, g_NOT_ASSIGNED) "SERVICE_ZONE_ID",
		NVL(SERVICE_POINT_ID, g_NOT_ASSIGNED) "SERVICE_POINT_ID"
	FROM SCHEDULE_GROUP
	WHERE SCHEDULE_GROUP_ID <> CONSTANTS.NOT_ASSIGNED;

BEGIN
	FOR v_SCHEDULE_GROUP IN c_SCHEDULE_GROUP LOOP
		g_SCHED_GROUP_ATTRIBUTES(v_SCHEDULE_GROUP.SCHEDULE_GROUP_ID).SC_ID := v_SCHEDULE_GROUP.SC_ID;
		g_SCHED_GROUP_ATTRIBUTES(v_SCHEDULE_GROUP.SCHEDULE_GROUP_ID).SERVICE_ZONE_ID := v_SCHEDULE_GROUP.SERVICE_ZONE_ID;
		g_SCHED_GROUP_ATTRIBUTES(v_SCHEDULE_GROUP.SCHEDULE_GROUP_ID).SERVICE_POINT_ID := v_SCHEDULE_GROUP.SERVICE_POINT_ID;
	END LOOP;

END CACHE_SCHED_GROUP_ATTRIBUTES;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_EDC_LOSS_FACTOR_SELECT
	(
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_LOSS_TYPE IN VARCHAR,
	p_CURSOR IN OUT NOCOPY GA.REFCURSOR
	) AS

CURSOR cur_SCHED_MODELS IS
	SELECT DISTINCT LF.LOSS_FACTOR_NAME, EDC.EDC_NAME
	FROM EDC_LOSS_FACTOR EDC_FACT,
		LOSS_FACTOR_MODEL MODEL,
		LOSS_FACTOR LF,
		ENERGY_DISTRIBUTION_COMPANY EDC
    WHERE EDC_FACT.CASE_ID = p_CASE_ID
		AND EDC_FACT.BEGIN_DATE <= p_END_dATE
		AND NVL(EDC_FACT.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		AND MODEL.LOSS_FACTOR_ID = EDC_FACT.LOSS_FACTOR_ID
		AND MODEL.LOSS_TYPE = p_LOSS_TYPE
		AND MODEL.BEGIN_DATE <= p_END_DATE
		AND NVL(MODEL.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		AND MODEL.MODEL_TYPE = CONSTANTS.LOSS_FACTOR_MODEL_SCHEDULE
		AND LF.LOSS_FACTOR_ID = MODEL.LOSS_FACTOR_ID
		AND EDC.EDC_ID = EDC_FACT.EDC_ID
	ORDER BY LOSS_FACTOR_NAME, EDC_NAME;

v_LAST_FACTOR_NAME VARCHAR2(64) := NULL;
v_FIRST_EDC BOOLEAN := TRUE;
v_FIRST_LINE BOOLEAN := TRUE;

v_FOUND_SCHED_MODELS BOOLEAN := FALSE;

v_CLOB CLOB := '';

BEGIN

	FOR v_SCHED_MODEL IN cur_SCHED_MODELS LOOP
		v_FOUND_SCHED_MODELS := TRUE;

		IF v_LAST_FACTOR_NAME IS NULL OR v_LAST_FACTOR_NAME <> v_SCHED_MODEL.LOSS_FACTOR_NAME THEN

			IF v_FIRST_LINE THEN
				v_FIRST_LINE := FALSE;
			ELSE
				v_CLOB := v_CLOB || UTL_TCP.CRLF;
			END IF;

			v_LAST_FACTOR_NAME := v_SCHED_MODEL.LOSS_FACTOR_NAME;
			v_CLOB := v_CLOB || 'Loss Factor: ' || v_LAST_FACTOR_NAME
				|| ' includes one or more Schedule loss factor models and is referenced by the following EDCs: '
				|| UTL_TCP.CRLF;
			v_FIRST_EDC := TRUE;
		END IF;

		IF NOT v_FIRST_EDC THEN
			V_CLOB := v_CLOB || ', ';
		END IF;

		v_CLOB := v_CLOB || v_SCHED_MODEL.EDC_NAME;

	END LOOP;

	IF v_FOUND_SCHED_MODELS THEN
		LOGS.LOG_WARN('EDC Loss Factors with a model type of Schedule are not currently '
			|| 'supported and will be ignored. See event details for a list of Loss Factors '
			|| 'that are incorrectly configured.');
		LOGS.POST_EVENT_DETAILS('EDC Loss Factors', CONSTANTS.MIME_TYPE_TEXT, v_CLOB);
	END IF;


	OPEN p_CURSOR FOR
		SELECT A.EDC_ID, GREATEST(C.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(C.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", C.PATTERN_ID
		FROM ENERGY_DISTRIBUTION_COMPANY A,
			EDC_LOSS_FACTOR B,
			LOSS_FACTOR_MODEL C
		WHERE B.EDC_ID = A.EDC_ID
			AND B.CASE_ID = p_CASE_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND C.LOSS_FACTOR_ID = B.LOSS_FACTOR_ID
			AND C.LOSS_TYPE = p_LOSS_TYPE
			AND C.BEGIN_DATE <= p_END_DATE
			AND NVL(C.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND C.MODEL_TYPE = CONSTANTS.LOSS_FACTOR_MODEL_PATTERN
		ORDER BY 1,2;

EXCEPTION
	WHEN OTHERS THEN
		OPEN p_CURSOR FOR SELECT NULL FROM DUAL;
END CACHE_EDC_LOSS_FACTOR_SELECT;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_EDC_TX_LOSS_FACTOR
	(
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
c_EDC_TX_LOSS_FACTOR GA.REFCURSOR;

BEGIN

	CACHE_EDC_LOSS_FACTOR_SELECT(p_CASE_ID, p_BEGIN_DATE, p_END_DATE, 'Transmission', c_EDC_TX_LOSS_FACTOR);

	g_EDC_TX_LOSS_FACTOR_INDEX.DELETE;
	g_EDC_TX_LOSS_FACTOR_CACHE.DELETE;
	CACHE_TIMED_VALUE(c_EDC_TX_LOSS_FACTOR, g_EDC_TX_LOSS_FACTOR_INDEX, g_EDC_TX_LOSS_FACTOR_CACHE);

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_EDC_TX_LOSS_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_EDC_TX_LOSS_FACTOR_CACHE.COUNT));
	END IF;

END CACHE_EDC_TX_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_EDC_DX_LOSS_FACTOR
	(
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
c_EDC_DX_LOSS_FACTOR GA.REFCURSOR;

BEGIN

	CACHE_EDC_LOSS_FACTOR_SELECT(p_CASE_ID, p_BEGIN_DATE, p_END_DATE, 'Distribution', c_EDC_DX_LOSS_FACTOR);

	g_EDC_DX_LOSS_FACTOR_INDEX.DELETE;
	g_EDC_DX_LOSS_FACTOR_CACHE.DELETE;
	CACHE_TIMED_VALUE(c_EDC_DX_LOSS_FACTOR, g_EDC_DX_LOSS_FACTOR_INDEX, g_EDC_DX_LOSS_FACTOR_CACHE);

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_EDC_DX_LOSS_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_EDC_DX_LOSS_FACTOR_CACHE.COUNT));
	END IF;

END CACHE_EDC_DX_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_EDC_UE_LOSS_FACTOR
	(
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
c_EDC_UE_LOSS_FACTOR GA.REFCURSOR;

BEGIN

	CACHE_EDC_LOSS_FACTOR_SELECT(p_CASE_ID, p_BEGIN_DATE, p_END_DATE, 'UFE', c_EDC_UE_LOSS_FACTOR);

	g_EDC_UE_LOSS_FACTOR_INDEX.DELETE;
	g_EDC_UE_LOSS_FACTOR_CACHE.DELETE;
	CACHE_TIMED_VALUE(c_EDC_UE_LOSS_FACTOR, g_EDC_UE_LOSS_FACTOR_INDEX, g_EDC_UE_LOSS_FACTOR_CACHE);

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_EDC_UE_LOSS_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_EDC_UE_LOSS_FACTOR_CACHE.COUNT));
	END IF;

END CACHE_EDC_UE_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_EDC_LOSS_FACTOR
	(
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	CACHE_EDC_TX_LOSS_FACTOR(p_CASE_ID, p_BEGIN_DATE, p_END_DATE);
	CACHE_EDC_DX_LOSS_FACTOR(p_CASE_ID, p_BEGIN_DATE, p_END_DATE);
	CACHE_EDC_UE_LOSS_FACTOR(p_CASE_ID, p_BEGIN_DATE, p_END_DATE);

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_EDC_LOSS_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED));
	END IF;

END CACHE_EDC_LOSS_FACTOR;
--------------------------------------------------------------------------------------------------
PROCEDURE CACHE_LOAD_MODELS
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_CALENDAR_TYPE IN VARCHAR,
	p_CAL_INDEX_DIRECTORY IN OUT NOCOPY INDEX_DIRECTORY,
	p_CAL_TIMED_VALUES IN OUT NOCOPY TIMED_VALUE,
	p_PDM_INDEX_DIRECTORY IN OUT NOCOPY INDEX_DIRECTORY,
	p_PDM_TIMED_VALUES IN OUT NOCOPY TIMED_VALUE
	) AS

cur_DATA GA.REFCURSOR;

BEGIN

	p_CAL_INDEX_DIRECTORY.DELETE;
	p_CAL_TIMED_VALUES.DELETE;

	OPEN cur_DATA FOR
		SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.CALENDAR_ID
		FROM ACCOUNT_SERVICE A, ACCOUNT_CALENDAR B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.CALENDAR_TYPE = p_CALENDAR_TYPE
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		UNION SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.CALENDAR_ID
		FROM ACCOUNT_SERVICE A, METER_CALENDAR B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND NOT A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.METER_ID = A.METER_ID
			AND B.CALENDAR_TYPE = p_CALENDAR_TYPE
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		ORDER BY 1,2;

	CACHE_TIMED_VALUE(cur_DATA, p_CAL_INDEX_DIRECTORY, p_CAL_TIMED_VALUES);


	p_PDM_INDEX_DIRECTORY.DELETE;
	p_PDM_TIMED_VALUES.DELETE;

	OPEN cur_DATA FOR
		SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.PROXY_DAY_METHOD_ID
		FROM ACCOUNT_SERVICE A, ACCOUNT_PROXY_DAY_METHOD B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.PROXY_DAY_METHOD_TYPE = p_CALENDAR_TYPE
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		ORDER BY 1,2;

	CACHE_TIMED_VALUE(cur_DATA, p_PDM_INDEX_DIRECTORY, p_PDM_TIMED_VALUES);

END CACHE_LOAD_MODELS;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_LOAD_MODELS
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INCLUDE_BACKCAST IN BOOLEAN
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	CACHE_LOAD_MODELS(p_IDS, p_CASE_ID, p_BEGIN_DATE, p_END_DATE, 'Forecast', g_FORECAST_CALENDAR_INDEX, g_FORECAST_CALENDAR_CACHE, g_FORECAST_PROXY_DAY_INDEX, g_FORECAST_PROXY_DAY_CACHE);
	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_LOAD_MODELS TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_FORECAST_CALENDAR_CACHE.COUNT) || ', TYPE=Forecast');
	END IF;

	IF p_INCLUDE_BACKCAST THEN
		v_ELAPSED := DBMS_UTILITY.GET_TIME;
		CACHE_LOAD_MODELS(p_IDS, p_CASE_ID, p_BEGIN_DATE, p_END_DATE, 'Backcast', g_BACKCAST_CALENDAR_INDEX, g_BACKCAST_CALENDAR_CACHE, g_BACKCAST_PROXY_DAY_INDEX, g_BACKCAST_PROXY_DAY_CACHE);
	 	IF LOGS.IS_DEBUG_ENABLED THEN
			LOGS.LOG_DEBUG('CACHE_LOAD_MODELS TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_BACKCAST_CALENDAR_CACHE.COUNT) || ', TYPE=Backcast');
		END IF;
	END IF;

END CACHE_LOAD_MODELS;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_SETTLEMENT_PROFILE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS


v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
c_PROFILE GA.REFCURSOR;

BEGIN

	OPEN c_PROFILE FOR
		SELECT C.ACCOUNT_SERVICE_ID, GREATEST(E.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(E.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", E.PROFILE_ID
		FROM ACCOUNT A, ACCOUNT_STATUS B, ACCOUNT_STATUS_NAME STATUS_NAME, ACCOUNT_SERVICE C, ACCOUNT_CALENDAR D, CALENDAR_PROFILE E
		WHERE A.IS_CREATE_SETTLEMENT_PROFILE = 1
			AND UPPER(SUBSTR(A.ACCOUNT_MODEL_OPTION,1,1)) = 'A'
            AND A.IS_SUB_AGGREGATE = 0
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
			AND STATUS_NAME.STATUS_NAME = B.STATUS_NAME
			AND STATUS_NAME.IS_ACTIVE = 1
			AND C.ACCOUNT_ID = B.ACCOUNT_ID
			AND D.ACCOUNT_ID = C.ACCOUNT_ID
			AND D.CALENDAR_ID = D.CALENDAR_ID
			AND D.CALENDAR_TYPE = 'Settlement'
			AND D.BEGIN_DATE <= p_END_DATE
			AND NVL(D.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
			AND E.CALENDAR_ID = D.CALENDAR_ID
			AND E.BEGIN_DATE BETWEEN D.BEGIN_DATE AND NVL(D.END_DATE, CONSTANTS.HIGH_DATE)
		UNION SELECT C.ACCOUNT_SERVICE_ID, GREATEST(E.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(E.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", E.PROFILE_ID
		FROM ACCOUNT A, ACCOUNT_STATUS B, ACCOUNT_STATUS_NAME STATUS_NAME, ACCOUNT_SERVICE C, METER_CALENDAR D, CALENDAR_PROFILE E
		WHERE A.IS_CREATE_SETTLEMENT_PROFILE = 1
			AND UPPER(SUBSTR(A.ACCOUNT_MODEL_OPTION,1,1)) = 'M'
            AND A.IS_SUB_AGGREGATE = 0
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
			AND STATUS_NAME.STATUS_NAME = B.STATUS_NAME
			AND STATUS_NAME.IS_ACTIVE = 1
			AND C.ACCOUNT_ID = B.ACCOUNT_ID
			AND C.METER_ID = D.METER_ID
			AND D.CALENDAR_ID = D.CALENDAR_ID
			AND D.CALENDAR_TYPE = 'Settlement'
			AND D.BEGIN_DATE <= p_END_DATE
			AND NVL(D.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
			AND E.CALENDAR_ID = D.CALENDAR_ID
			AND E.BEGIN_DATE BETWEEN D.BEGIN_DATE AND NVL(D.END_DATE, CONSTANTS.HIGH_DATE)
		ORDER BY 1,2;

	g_SETTLEMENT_PROFILE_INDEX.DELETE;
	g_SETTLEMENT_PROFILE_CACHE.DELETE;
	CACHE_TIMED_VALUE(c_PROFILE, g_SETTLEMENT_PROFILE_INDEX, g_SETTLEMENT_PROFILE_CACHE);

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_SETTLEMENT_PROFILE TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_SETTLEMENT_PROFILE_CACHE.COUNT));
	END IF;

END CACHE_SETTLEMENT_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_USAGE_FACTOR
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

c_USAGE_FACTOR GA.REFCURSOR;
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_USAGE_FACTOR_QUALIFIER NUMBER(1);

BEGIN

	IF GA.USAGE_FACTOR_PER_UNIT_OPTION THEN
		v_USAGE_FACTOR_QUALIFIER := 1;
	ELSE
		v_USAGE_FACTOR_QUALIFIER := 0;
	END IF;

	OPEN c_USAGE_FACTOR FOR
		SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", NVL(B.FACTOR_VAL,0) + v_USAGE_FACTOR_QUALIFIER
		FROM ACCOUNT_SERVICE A, ACCOUNT_USAGE_FACTOR B, ACCOUNT ACCT
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND ACCT.ACCOUNT_ID = A.ACCOUNT_ID
			AND NVL(ACCT.USE_TOU_USAGE_FACTOR, 0) = 0
		UNION SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", NVL(B.FACTOR_VAL,0) + v_USAGE_FACTOR_QUALIFIER
		FROM ACCOUNT_SERVICE A, METER_USAGE_FACTOR B, METER M
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND NOT A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.METER_ID = A.METER_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND M.METER_ID = A.METER_ID
			AND NVL(M.USE_TOU_USAGE_FACTOR, 0) = 0
		ORDER BY 1,2;

	g_USAGE_FACTOR_INDEX.DELETE;
	g_USAGE_FACTOR_CACHE.DELETE;

	CACHE_TIMED_VALUE(c_USAGE_FACTOR, g_USAGE_FACTOR_INDEX, g_USAGE_FACTOR_CACHE);

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_USAGE_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_USAGE_FACTOR_CACHE.COUNT));
	END IF;

END CACHE_USAGE_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_TOU_USAGE_FACTOR
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

c_TOU_USAGE_FACTOR GA.REFCURSOR;
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	OPEN c_TOU_USAGE_FACTOR FOR
		SELECT ACCT_S.ACCOUNT_SERVICE_ID, GREATEST(ATUF.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(ATUF.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", ATUF.TOU_USAGE_FACTOR_ID
		FROM ACCOUNT_SERVICE ACCT_S, ACCOUNT_TOU_USAGE_FACTOR ATUF, ACCOUNT A
		WHERE (p_IDS IS NULL OR ACCT_S.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND ACCT_S.METER_ID = g_NOT_ASSIGNED
			AND ATUF.CASE_ID = p_CASE_ID
			AND ATUF.ACCOUNT_ID = ACCT_S.ACCOUNT_ID
			AND ATUF.BEGIN_DATE <= p_END_DATE
			AND NVL(ATUF.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND A.ACCOUNT_ID = ACCT_S.ACCOUNT_ID
			AND NVL(A.USE_TOU_USAGE_FACTOR, 0) = 1
		UNION SELECT ACCT_S.ACCOUNT_SERVICE_ID, GREATEST(MTUF.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(MTUF.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", MTUF.TOU_USAGE_FACTOR_ID
		FROM ACCOUNT_SERVICE ACCT_S, METER_TOU_USAGE_FACTOR MTUF, METER M
		WHERE (p_IDS IS NULL OR ACCT_S.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND NOT ACCT_S.METER_ID = g_NOT_ASSIGNED
			AND MTUF.CASE_ID = p_CASE_ID
			AND MTUF.METER_ID = ACCT_S.METER_ID
			AND MTUF.BEGIN_DATE <= p_END_DATE
			AND NVL(MTUF.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND M.METER_ID = ACCT_S.METER_ID
			AND NVL(M.USE_TOU_USAGE_FACTOR, 0) = 1
		ORDER BY 1,2;

	g_TOU_USAGE_FACTOR_INDEX.DELETE;
	g_TOU_USAGE_FACTOR_CACHE.DELETE;

	CACHE_TIMED_VALUE(c_TOU_USAGE_FACTOR, g_TOU_USAGE_FACTOR_INDEX, g_TOU_USAGE_FACTOR_CACHE);

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_TOU_USAGE_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_USAGE_FACTOR_CACHE.COUNT));
	END IF;

END CACHE_TOU_USAGE_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_GROWTH_ATTRITION
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

c_GROWTH_FACTOR GA.REFCURSOR;
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	OPEN c_GROWTH_FACTOR FOR
		SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.GROWTH_PCT
		FROM ACCOUNT_SERVICE A, ACCOUNT_GROWTH B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		UNION SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.GROWTH_PCT
		FROM ACCOUNT_SERVICE A, METER_GROWTH B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND NOT A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.METER_ID = A.METER_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		ORDER BY 1,2;

	g_GROWTH_ATTRITION_INDEX.DELETE;
	g_GROWTH_ATTRITION_CACHE.DELETE;

	CACHE_TIMED_VALUE(c_GROWTH_FACTOR, g_GROWTH_ATTRITION_INDEX, g_GROWTH_ATTRITION_CACHE);

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_GROWTH_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_GROWTH_ATTRITION_CACHE.COUNT));
	END IF;

END CACHE_GROWTH_ATTRITION;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_GROWTH_PATTERN
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

CURSOR c_PATTERN IS SELECT * FROM GROWTH_PATTERN;
c_GROWTH_PATTERN GA.REFCURSOR;
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	OPEN c_GROWTH_PATTERN FOR
		SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.PATTERN_ID
		FROM ACCOUNT_SERVICE A, ACCOUNT_GROWTH B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		UNION SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.PATTERN_ID
		FROM ACCOUNT_SERVICE A, METER_GROWTH B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND NOT A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.METER_ID = A.METER_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		UNION SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.PATTERN_ID
		FROM ACCOUNT_SERVICE A, AGGREGATE_ACCOUNT_GROWTH B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND NOT A.AGGREGATE_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.AGGREGATE_ID = A.AGGREGATE_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		ORDER BY 1,2;

	g_GROWTH_PATTERN_INDEX.DELETE;
	g_GROWTH_PATTERN_CACHE.DELETE;

	CACHE_TIMED_VALUE(c_GROWTH_PATTERN, g_GROWTH_PATTERN_INDEX, g_GROWTH_PATTERN_CACHE);

	FOR v_PATTERN IN c_PATTERN LOOP
		g_GROWTH_PATTERN(v_PATTERN.PATTERN_ID) := v_PATTERN;
	END LOOP;

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_GROWTH_PATTERN TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_GROWTH_PATTERN.COUNT));
	END IF;

END CACHE_GROWTH_PATTERN;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_AGGREGATE_GROWTH
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_INDEX BINARY_INTEGER;

BEGIN

	g_AGGREGATE_GROWTH_INDEX.DELETE;
	g_AGGREGATE_GROWTH_CACHE.DELETE;

	SELECT AGGREGATE_ACCOUNT_GROWTH_TYPE(A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE), LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE), NVL(B.SERVICE_ACCOUNTS, g_NOT_ASSIGNED), B.GROWTH_PCT, B.PATTERN_ID, NULL, NULL, NULL, NULL, NULL)
	BULK COLLECT INTO g_AGGREGATE_GROWTH_CACHE
	FROM ACCOUNT_SERVICE A, AGGREGATE_ACCOUNT_GROWTH B
	WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
		AND NOT A.AGGREGATE_ID = g_NOT_ASSIGNED
		AND B.CASE_ID = p_CASE_ID
		AND B.AGGREGATE_ID = A.AGGREGATE_ID
		AND B.BEGIN_DATE <= p_END_DATE
		AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
	ORDER BY A.ACCOUNT_SERVICE_ID, B.BEGIN_DATE;

	IF g_AGGREGATE_GROWTH_CACHE.COUNT > 0 THEN
		v_INDEX := g_AGGREGATE_GROWTH_CACHE.FIRST;
		WHILE v_INDEX <= g_AGGREGATE_GROWTH_CACHE.LAST LOOP
			IF g_AGGREGATE_GROWTH_INDEX.EXISTS(g_AGGREGATE_GROWTH_CACHE(v_INDEX).ACCOUNT_SERVICE_ID) THEN
				g_AGGREGATE_GROWTH_INDEX(g_AGGREGATE_GROWTH_CACHE(v_INDEX).ACCOUNT_SERVICE_ID).STOP_INDEX := v_INDEX;
			ELSE
				g_AGGREGATE_GROWTH_INDEX(g_AGGREGATE_GROWTH_CACHE(v_INDEX).ACCOUNT_SERVICE_ID).START_INDEX := v_INDEX;
				g_AGGREGATE_GROWTH_INDEX(g_AGGREGATE_GROWTH_CACHE(v_INDEX).ACCOUNT_SERVICE_ID).STOP_INDEX := v_INDEX;
			END IF;
			v_INDEX := g_AGGREGATE_GROWTH_CACHE.NEXT(v_INDEX);
		END LOOP;
	END IF;

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_AGGREGATE_GROWTH TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_AGGREGATE_GROWTH_CACHE.COUNT));
	END IF;

END CACHE_AGGREGATE_GROWTH;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_LOSS_FACTOR_SELECT
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_LOSS_TYPE IN VARCHAR,
	p_CURSOR IN OUT NOCOPY GA.REFCURSOR
	) AS

v_CLOB CLOB := '';

CURSOR cur_SCHEDULE_MODELS IS
	SELECT LF.LOSS_FACTOR_NAME, ACT.ACCOUNT_NAME, NULL AS METER_NAME
	FROM ACCOUNT_SERVICE A, ACCOUNT_LOSS_FACTOR B, LOSS_FACTOR_MODEL C, ACCOUNT ACT,
		LOSS_FACTOR LF
	WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
		AND A.METER_ID = g_NOT_ASSIGNED
		AND B.CASE_ID = p_CASE_ID
		AND B.ACCOUNT_ID = A.ACCOUNT_ID
		AND B.BEGIN_DATE <= p_END_DATE
		AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		AND C.LOSS_FACTOR_ID = B.LOSS_FACTOR_ID
		AND C.LOSS_TYPE = p_LOSS_TYPE
		AND C.BEGIN_DATE <= p_END_DATE
		AND NVL(C.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		AND C.MODEL_TYPE = CONSTANTS.LOSS_FACTOR_MODEL_SCHEDULE
		AND ACT.ACCOUNT_ID = A.ACCOUNT_ID
		AND LF.LOSS_FACTOR_ID = C.LOSS_FACTOR_ID
	UNION SELECT LF.LOSS_FACTOR_NAME, ACT.ACCOUNT_NAME, M.METER_NAME
	FROM ACCOUNT_SERVICE A, METER_LOSS_FACTOR B, LOSS_FACTOR_MODEL C, ACCOUNT ACT, METER M,
		LOSS_FACTOR LF
	WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
		AND NOT A.METER_ID = g_NOT_ASSIGNED
		AND B.CASE_ID = p_CASE_ID
		AND B.METER_ID = A.METER_ID
		AND B.BEGIN_DATE <= p_END_DATE
		AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		AND C.LOSS_FACTOR_ID = B.LOSS_FACTOR_ID
		AND C.LOSS_TYPE = p_LOSS_TYPE
		AND C.BEGIN_DATE <= p_END_DATE
		AND C.MODEL_TYPE = CONSTANTS.LOSS_FACTOR_MODEL_SCHEDULE
		AND NVL(C.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		AND ACT.ACCOUNT_ID = A.ACCOUNT_ID
		AND M.METER_ID = A.METER_ID
		AND LF.LOSS_FACTOR_ID = C.LOSS_FACTOR_ID
	ORDER BY LOSS_FACTOR_NAME, ACCOUNT_NAME, METER_NAME;

	v_FOUND_SCHED_MODELS BOOLEAN := FALSE;

	v_FIRST_LINE BOOLEAN := TRUE;

	v_LAST_FACTOR_NAME VARCHAR2(64) := NULL;
	v_LAST_ACCOUNT VARCHAR2(64) := NULL;

	v_FIRST_ACCOUNT BOOLEAN := TRUE;
	v_FIRST_METER BOOLEAN := TRUE;

BEGIN

	FOR v_SCHED_FACTOR IN cur_SCHEDULE_MODELS LOOP
		v_FOUND_SCHED_MODELS := TRUE;

		IF v_LAST_FACTOR_NAME IS NULL OR v_LAST_FACTOR_NAME <> v_SCHED_FACTOR.LOSS_FACTOR_NAME THEN
			IF v_FIRST_METER = FALSE THEN
			-- WE HAD AT LEAST ONE METER, CLOSE OFF THE METER PAREN
				v_CLOB := v_CLOB || ')';
			END IF;

			IF v_FIRST_LINE THEN
				v_FIRST_LINE := FALSE;
			ELSE
				v_CLOB := v_CLOB || UTL_TCP.CRLF;
			END IF;

			v_LAST_FACTOR_NAME := v_SCHED_FACTOR.LOSS_FACTOR_NAME;
			v_CLOB := v_CLOB || 'Loss Factor: ' || v_LAST_FACTOR_NAME ||
				' includes one or more Schedule loss factor models and is referenced ' ||
				'by the following accounts: ' || UTL_TCP.CRLF;

			v_LAST_ACCOUNT := NULL;
			v_FIRST_ACCOUNT := TRUE;
		END IF;

		IF v_LAST_ACCOUNT IS NULL OR v_LAST_ACCOUNT <> v_SCHED_FACTOR.ACCOUNT_NAME THEN
			IF NOT v_FIRST_ACCOUNT THEN

				IF NOT v_FIRST_METER THEN
				-- WE HAD AT LEAST ONE METER, CLOSE OFF THE METER PAREN
					v_CLOB := v_CLOB || ')';
				END IF;

				v_CLOB := v_CLOB || ', ';
				v_FIRST_ACCOUNT := FALSE;

			ELSE
				v_FIRST_ACCOUNT := FALSE;
			END IF;

			v_LAST_ACCOUNT := v_SCHED_FACTOR.ACCOUNT_NAME;
			v_CLOB := v_CLOB || v_LAST_ACCOUNT;

			v_FIRST_METER := TRUE;
		END IF;

		IF v_SCHED_FACTOR.METER_NAME IS NOT NULL THEN

			IF v_FIRST_METER THEN
				-- START THE METERS PAREN
				v_CLOB := v_CLOB || '(Meters: ';
				v_FIRST_METER := FALSE;
			ELSE
				v_CLOB := v_CLOB || ', ';
			END IF;

			v_CLOB := v_CLOB || v_SCHED_FACTOR.METER_NAME;
		END IF;
	END LOOP;


	IF v_FOUND_SCHED_MODELS THEN

		IF NOT v_FIRST_METER THEN
			-- CLOSE THE METERS PAREN
			v_CLOB := v_CLOB || ')';
		END IF;
		LOGS.LOG_WARN('Account Loss Factors with a model type of Schedule are not currently supported and will be ignored.' ||
			'  See event details for a list of Loss Factors that are incorrectly configured.');
		LOGS.POST_EVENT_DETAILS('Loss Factors', CONSTANTS.MIME_TYPE_TEXT, v_CLOB);
	END IF;


	OPEN p_CURSOR FOR
		SELECT A.ACCOUNT_SERVICE_ID, GREATEST(C.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(C.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", C.PATTERN_ID
		FROM ACCOUNT_SERVICE A, ACCOUNT_LOSS_FACTOR B, LOSS_FACTOR_MODEL C
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND C.LOSS_FACTOR_ID = B.LOSS_FACTOR_ID
			AND C.LOSS_TYPE = p_LOSS_TYPE
			AND C.BEGIN_DATE <= p_END_DATE
			AND NVL(C.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND C.MODEL_TYPE = CONSTANTS.LOSS_FACTOR_MODEL_PATTERN
		UNION SELECT A.ACCOUNT_SERVICE_ID, GREATEST(C.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(C.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", C.PATTERN_ID
		FROM ACCOUNT_SERVICE A, METER_LOSS_FACTOR B, LOSS_FACTOR_MODEL C
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND NOT A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.METER_ID = A.METER_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND C.LOSS_FACTOR_ID = B.LOSS_FACTOR_ID
			AND C.LOSS_TYPE = p_LOSS_TYPE
			AND C.BEGIN_DATE <= p_END_DATE
			AND NVL(C.END_DATE, p_END_DATE) >= p_BEGIN_DATE
			AND C.MODEL_TYPE = CONSTANTS.LOSS_FACTOR_MODEL_PATTERN
		ORDER BY 1,2;

EXCEPTION
	WHEN OTHERS THEN
		OPEN p_CURSOR FOR SELECT NULL FROM DUAL;
END CACHE_LOSS_FACTOR_SELECT;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_TX_LOSS_FACTOR
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
c_LOSS_FACTOR GA.REFCURSOR;

BEGIN

	CACHE_LOSS_FACTOR_SELECT(p_IDS, p_CASE_ID, p_BEGIN_DATE, p_END_DATE, 'Transmission', c_LOSS_FACTOR);

	g_TX_LOSS_FACTOR_INDEX.DELETE;
	g_TX_LOSS_FACTOR_CACHE.DELETE;

	CACHE_TIMED_VALUE(c_LOSS_FACTOR, g_TX_LOSS_FACTOR_INDEX, g_TX_LOSS_FACTOR_CACHE);

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_TX_LOSS_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_TX_LOSS_FACTOR_CACHE.COUNT));
	END IF;

END CACHE_TX_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_DX_LOSS_FACTOR
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
c_LOSS_FACTOR GA.REFCURSOR;

BEGIN

	CACHE_LOSS_FACTOR_SELECT(p_IDS, p_CASE_ID, p_BEGIN_DATE, p_END_DATE, 'Distribution', c_LOSS_FACTOR);

	g_DX_LOSS_FACTOR_INDEX.DELETE;
	g_DX_LOSS_FACTOR_CACHE.DELETE;
	CACHE_TIMED_VALUE(c_LOSS_FACTOR, g_DX_LOSS_FACTOR_INDEX, g_DX_LOSS_FACTOR_CACHE);

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_DX_LOSS_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_DX_LOSS_FACTOR_CACHE.COUNT));
	END IF;

END CACHE_DX_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_UE_LOSS_FACTOR
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
c_LOSS_FACTOR GA.REFCURSOR;

BEGIN

	CACHE_LOSS_FACTOR_SELECT(p_IDS, p_CASE_ID, p_BEGIN_DATE, p_END_DATE, 'UFE', c_LOSS_FACTOR);

	g_UE_LOSS_FACTOR_INDEX.DELETE;
	g_UE_LOSS_FACTOR_CACHE.DELETE;
	CACHE_TIMED_VALUE(c_LOSS_FACTOR, g_UE_LOSS_FACTOR_INDEX, g_UE_LOSS_FACTOR_CACHE);

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_UE_LOSS_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_UE_LOSS_FACTOR_CACHE.COUNT));
	END IF;

END CACHE_UE_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_LOSS_FACTOR
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	CACHE_TX_LOSS_FACTOR(p_IDS, p_CASE_ID, p_BEGIN_DATE, p_END_DATE);
	CACHE_DX_LOSS_FACTOR(p_IDS, p_CASE_ID, p_BEGIN_DATE, p_END_DATE);
	CACHE_UE_LOSS_FACTOR(p_IDS, p_CASE_ID, p_BEGIN_DATE, p_END_DATE);

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_LOSS_FACTOR TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED));
	END IF;

END CACHE_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_LOSS_FACTOR
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE
	) AS

BEGIN

	CACHE_LOSS_FACTOR(ID_TABLE(ID_TYPE(p_ACCOUNT_SERVICE_ID)), GA.BASE_CASE_ID, p_SERVICE_DATE, p_SERVICE_DATE);

END CACHE_LOSS_FACTOR;
--------------------------------------------------------------------------------------------------
PROCEDURE COLLECT_PATTERN_IDS
	(
	p_IDS IN OUT NOCOPY ID_TABLE,
	p_CACHE IN TIMED_VALUE
	) AS

v_INDEX BINARY_INTEGER;

BEGIN

	v_INDEX := p_CACHE.FIRST;
	WHILE v_INDEX <= p_CACHE.LAST LOOP
		ADD_NEW_ID_TO_COLLECTION(p_CACHE(v_INDEX).DATA_VALUE, p_IDS);
		v_INDEX := p_CACHE.NEXT(v_INDEX);
	END LOOP;

END COLLECT_PATTERN_IDS;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_LOSS_FACTOR_PATTERN AS

v_IDS ID_TABLE := ID_TABLE();
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	COLLECT_PATTERN_IDS(v_IDS, g_EDC_TX_LOSS_FACTOR_CACHE);
	COLLECT_PATTERN_IDS(v_IDS, g_EDC_DX_LOSS_FACTOR_CACHE);
	COLLECT_PATTERN_IDS(v_IDS, g_EDC_UE_LOSS_FACTOR_CACHE);
	COLLECT_PATTERN_IDS(v_IDS, g_TX_LOSS_FACTOR_CACHE);
	COLLECT_PATTERN_IDS(v_IDS, g_DX_LOSS_FACTOR_CACHE);
	COLLECT_PATTERN_IDS(v_IDS, g_UE_LOSS_FACTOR_CACHE);

	IF LOGS.IS_DEBUG_ENABLED THEN
		TRACE_PATTERN_IDS(v_IDS);
	END IF;

	SELECT LOSS_FACTOR_PATTERN_TYPE(A.PATTERN_ID, A.PATTERN_DATE, A.EXPANSION_VAL)
	BULK COLLECT INTO g_LOSS_FACTOR_PATTERN
	FROM LOSS_FACTOR_PATTERN A, TABLE(CAST(v_IDS AS ID_TABLE)) B
	WHERE A.PATTERN_ID = B.ID
	ORDER BY A.PATTERN_ID, A.PATTERN_DATE;

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_LOSS_FACTOR_PATTERN TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_LOSS_FACTOR_PATTERN.COUNT));
	END IF;

END CACHE_LOSS_FACTOR_PATTERN;
--------------------------------------------------------------------------------------------------
PROCEDURE CACHE_PRODUCT
	(
	p_IDS IN ID_TABLE,
	p_CASE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PRODUCT_TYPE IN VARCHAR
	) AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
c_PRODUCT GA.REFCURSOR;

BEGIN

	OPEN c_PRODUCT FOR
		SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.PRODUCT_ID
		FROM ACCOUNT_SERVICE A, ACCOUNT_PRODUCT B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.PRODUCT_ID > g_NOT_ASSIGNED
			AND B.PRODUCT_TYPE = INITCAP(p_PRODUCT_TYPE)
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		UNION SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.PRODUCT_ID
		FROM ACCOUNT_SERVICE A, METER_PRODUCT B
		WHERE (p_IDS IS NULL OR A.ACCOUNT_SERVICE_ID IN (SELECT DISTINCT X.ID FROM TABLE(CAST(p_IDS AS ID_TABLE)) X))
			AND NOT A.METER_ID = g_NOT_ASSIGNED
			AND B.CASE_ID = p_CASE_ID
			AND B.METER_ID = A.METER_ID
			AND B.PRODUCT_ID > g_NOT_ASSIGNED
			AND B.PRODUCT_TYPE = INITCAP(p_PRODUCT_TYPE)
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		ORDER BY 1,2;

	IF UPPER(p_PRODUCT_TYPE) = 'REVENUE' THEN
		g_REVENUE_PRODUCT_INDEX.DELETE;
		g_REVENUE_PRODUCT_CACHE.DELETE;
		CACHE_TIMED_VALUE(c_PRODUCT, g_REVENUE_PRODUCT_INDEX, g_REVENUE_PRODUCT_CACHE);
	ELSIF UPPER(p_PRODUCT_TYPE) = 'COST' THEN
		g_COST_PRODUCT_INDEX.DELETE;
		g_COST_PRODUCT_CACHE.DELETE;
		CACHE_TIMED_VALUE(c_PRODUCT, g_COST_PRODUCT_INDEX, g_COST_PRODUCT_CACHE);
	END IF;

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_PRODUCT: ' || p_PRODUCT_TYPE || ', TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_REVENUE_PRODUCT_CACHE.COUNT));
	END IF;

END CACHE_PRODUCT;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_LOAD_OBLIGATION AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	SELECT LOAD_OBLIGATION_TYPE(OBLIGATION_ID, SC_ID, PSE_ID, ESP_ID, EDC_ID, POOL_ID, SERVICE_POINT_ID, SERVICE_ZONE_ID, SCHEDULE_GROUP_ID, OBLIGATION_LOAD_CODE, OBLIGATION_INTERVAL, OBLIGATION_NAME)
	BULK COLLECT INTO g_LOAD_OBLIGATION_CACHE
	FROM LOAD_OBLIGATION;

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_LOAD_OBLIGATION TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_LOAD_OBLIGATION_CACHE.COUNT));
	END IF;

END CACHE_LOAD_OBLIGATION;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_WEATHER_STATION AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	SELECT ENTITY_XREF_TYPE(A.ACCOUNT_SERVICE_ID, B.WEATHER_STATION_ID)
	BULK COLLECT INTO g_WEATHER_STATION_CACHE
	FROM ACCOUNT_SERVICE A, SERVICE_LOCATION B
		WHERE B.SERVICE_LOCATION_ID = A.SERVICE_LOCATION_ID;

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_WEATHER_STATION TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_WEATHER_STATION_CACHE.COUNT));
	END IF;

END CACHE_WEATHER_STATION;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_POOL
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

c_POOL GA.REFCURSOR;
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	OPEN c_POOL FOR
		SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.POOL_ID
		FROM ACCOUNT_SERVICE A, ACCOUNT_ESP B
		WHERE A.AGGREGATE_ID = g_NOT_ASSIGNED
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		UNION SELECT A.ACCOUNT_SERVICE_ID, GREATEST(B.BEGIN_DATE, p_BEGIN_DATE) "BEGIN_DATE", LEAST(NVL(B.END_DATE, p_END_DATE), p_END_DATE) "END_DATE", B.POOL_ID
		FROM ACCOUNT_SERVICE A, AGGREGATE_ACCOUNT_ESP B
		WHERE NOT A.AGGREGATE_ID = g_NOT_ASSIGNED
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_END_DATE
			AND NVL(B.END_DATE, p_END_DATE) >= p_BEGIN_DATE
		ORDER BY 1,2;

	g_POOL_INDEX.DELETE;
	g_POOL_CACHE.DELETE;
	CACHE_TIMED_VALUE(c_POOL, g_POOL_INDEX, g_POOL_CACHE);

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_POOL TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_POOL_CACHE.COUNT));
	END IF;

END CACHE_POOL;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_IS_AGGREGATE_POOL AS

v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	SELECT ID_TYPE(POOL_ID)
	BULK COLLECT INTO g_IS_AGGREGATE_POOL_CACHE
	FROM POOL
	WHERE UPPER(SUBSTR(POOL_STATUS,1,1)) = 'A'
		AND UPPER(POOL_CATEGORY) = 'AGGREGATE POOL';

 	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CACHE_IS_AGGREGATE_POOL TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_IS_AGGREGATE_POOL_CACHE.COUNT));
	END IF;

END CACHE_IS_AGGREGATE_POOL;
----------------------------------------------------------------------------------------------------
PROCEDURE RELEASE_LOAD_OBLIGATION AS

BEGIN

	g_LOAD_OBLIGATION_CACHE.DELETE;

END RELEASE_LOAD_OBLIGATION;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_SERVICE_ACCOUNTS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_IDS IN ID_TABLE DEFAULT NULL
	) AS

BEGIN

	CACHE_GROWTH_PATTERN(p_IDS, GA.BASE_CASE_ID, p_BEGIN_DATE, p_END_DATE);
	CACHE_AGGREGATE_GROWTH(p_IDS, GA.BASE_CASE_ID, p_BEGIN_DATE, p_END_DATE);

END CACHE_SERVICE_ACCOUNTS;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_PROVIDER_SERVICE
	(
	p_PROVIDER_SERVICE IN PROVIDER_SERVICE%ROWTYPE
	) AS

BEGIN

	INSERT INTO PROVIDER_SERVICE (
		EDC_ID,
		ESP_ID,
		PSE_ID,
		PROVIDER_SERVICE_ID,
		ENTRY_DATE)
	VALUES (
		p_PROVIDER_SERVICE.EDC_ID,
		p_PROVIDER_SERVICE.ESP_ID,
		p_PROVIDER_SERVICE.PSE_ID,
		p_PROVIDER_SERVICE.PROVIDER_SERVICE_ID,
		SYSDATE);

END PUT_PROVIDER_SERVICE;
----------------------------------------------------------------------------------------------------
FUNCTION PUT_PROVIDER_SERVICE
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_PSE_ID IN NUMBER
	) RETURN NUMBER IS

v_PROVIDER_SERVICE PROVIDER_SERVICE%ROWTYPE;

BEGIN

-- Create and save a new Provider Service entry.
	v_PROVIDER_SERVICE.EDC_ID := p_EDC_ID;
	v_PROVIDER_SERVICE.ESP_ID := p_ESP_ID;
	v_PROVIDER_SERVICE.PSE_ID := p_PSE_ID;
	SELECT OID.NEXTVAL INTO v_PROVIDER_SERVICE.PROVIDER_SERVICE_ID FROM DUAL;

	PUT_PROVIDER_SERVICE(v_PROVIDER_SERVICE);

	RETURN v_PROVIDER_SERVICE.PROVIDER_SERVICE_ID;

END PUT_PROVIDER_SERVICE;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_SERVICE_DELIVERY
	(
	p_SERVICE_DELIVERY IN SERVICE_DELIVERY%ROWTYPE
	) AS

BEGIN

	INSERT INTO SERVICE_DELIVERY (
		SERVICE_DELIVERY_ID,
		POOL_ID,
		SERVICE_POINT_ID,
		SERVICE_ZONE_ID,
		SCHEDULE_GROUP_ID,
		SC_ID,
		SUPPLY_TYPE,
		IS_BUG,
		IS_WHOLESALE,
		IS_AGGREGATE_POOL,
		ENTRY_DATE)
	VALUES (
		p_SERVICE_DELIVERY.SERVICE_DELIVERY_ID,
		p_SERVICE_DELIVERY.POOL_ID,
		p_SERVICE_DELIVERY.SERVICE_POINT_ID,
		p_SERVICE_DELIVERY.SERVICE_ZONE_ID,
		p_SERVICE_DELIVERY.SCHEDULE_GROUP_ID,
		p_SERVICE_DELIVERY.SC_ID,
		p_SERVICE_DELIVERY.SUPPLY_TYPE,
		p_SERVICE_DELIVERY.IS_BUG,
		p_SERVICE_DELIVERY.IS_WHOLESALE,
		p_SERVICE_DELIVERY.IS_AGGREGATE_POOL,
		SYSDATE);

END PUT_SERVICE_DELIVERY;
----------------------------------------------------------------------------------------------------
FUNCTION PUT_SERVICE_DELIVERY
	(
	p_POOL_ID IN NUMBER,
	p_SERVICE_POINT_ID IN NUMBER,
	p_SERVICE_ZONE_ID IN NUMBER,
	p_SCHEDULE_GROUP_ID IN NUMBER,
	p_SC_ID IN NUMBER,
	p_SUPPLY_TYPE IN CHAR,
	p_IS_BUG IN NUMBER,
	p_IS_WHOLESALE IN NUMBER,
	p_IS_AGGREGATE_POOL IN NUMBER
	) RETURN NUMBER IS

v_SERVICE_DELIVERY SERVICE_DELIVERY%ROWTYPE;

BEGIN

-- Create and save a new Provider Load Point entry.
	v_SERVICE_DELIVERY.POOL_ID := NVL(p_POOL_ID, g_NOT_ASSIGNED);
	v_SERVICE_DELIVERY.SERVICE_POINT_ID := NVL(p_SERVICE_POINT_ID, g_NOT_ASSIGNED);
	v_SERVICE_DELIVERY.SERVICE_ZONE_ID := NVL(p_SERVICE_ZONE_ID, g_NOT_ASSIGNED);
	v_SERVICE_DELIVERY.SCHEDULE_GROUP_ID := NVL(p_SCHEDULE_GROUP_ID, g_NOT_ASSIGNED);
	v_SERVICE_DELIVERY.SC_ID := NVL(p_SC_ID, g_NOT_ASSIGNED);
	v_SERVICE_DELIVERY.SUPPLY_TYPE := NVL(p_SUPPLY_TYPE, g_NOT_ASSIGNED);
	v_SERVICE_DELIVERY.IS_BUG := NVL(p_IS_BUG, g_NOT_ASSIGNED);
	v_SERVICE_DELIVERY.IS_WHOLESALE := NVL(p_IS_WHOLESALE, g_NOT_ASSIGNED);
	v_SERVICE_DELIVERY.IS_AGGREGATE_POOL := NVL(p_IS_AGGREGATE_POOL, g_NOT_ASSIGNED);
	SELECT OID.NEXTVAL INTO v_SERVICE_DELIVERY.SERVICE_DELIVERY_ID FROM DUAL;

	PUT_SERVICE_DELIVERY(v_SERVICE_DELIVERY);

	RETURN v_SERVICE_DELIVERY.SERVICE_DELIVERY_ID;

END PUT_SERVICE_DELIVERY;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_SERVICE
	(
	p_SERVICE IN SERVICE%ROWTYPE
	) AS

BEGIN

	INSERT INTO SERVICE (
		SERVICE_ID,
		MODEL_ID,
		SCENARIO_ID,
		AS_OF_DATE,
		PROVIDER_SERVICE_ID,
		ACCOUNT_SERVICE_ID,
		SERVICE_DELIVERY_ID,
		ENTRY_DATE)
	VALUES (
		p_SERVICE.SERVICE_ID,
		p_SERVICE.MODEL_ID,
		p_SERVICE.SCENARIO_ID,
		p_SERVICE.AS_OF_DATE,
		p_SERVICE.PROVIDER_SERVICE_ID,
		p_SERVICE.ACCOUNT_SERVICE_ID,
		p_SERVICE.SERVICE_DELIVERY_ID,
		SYSDATE);

END PUT_SERVICE;
----------------------------------------------------------------------------------------------------
FUNCTION PUT_SERVICE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROVIDER_SERVICE_ID IN NUMBER,
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DELIVERY_ID IN NUMBER
	) RETURN NUMBER IS

v_SERVICE SERVICE%ROWTYPE;

BEGIN

-- Create and save a new Service entry.
	v_SERVICE.MODEL_ID := p_CAST_CONTEXT.MODEL_ID;
	v_SERVICE.SCENARIO_ID := p_CAST_CONTEXT.SCENARIO_ID;
	v_SERVICE.AS_OF_DATE := p_CAST_CONTEXT.OUTPUT_AS_OF_DATE;
	v_SERVICE.PROVIDER_SERVICE_ID := p_PROVIDER_SERVICE_ID;
	v_SERVICE.ACCOUNT_SERVICE_ID := p_ACCOUNT_SERVICE_ID;
	v_SERVICE.SERVICE_DELIVERY_ID := p_SERVICE_DELIVERY_ID;
	SELECT SID.NEXTVAL INTO v_SERVICE.SERVICE_ID FROM DUAL;

	PUT_SERVICE(v_SERVICE);

	RETURN v_SERVICE.SERVICE_ID;

END PUT_SERVICE;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_SERVICE_OBLIGATION
	(
	p_SERVICE_OBLIGATION IN SERVICE_OBLIGATION%ROWTYPE
	) AS

BEGIN

	INSERT INTO SERVICE_OBLIGATION (
		SERVICE_OBLIGATION_ID,
		MODEL_ID,
		SCENARIO_ID,
		AS_OF_DATE,
		PROVIDER_SERVICE_ID,
		SERVICE_DELIVERY_ID,
		ENTRY_DATE)
	VALUES (
		p_SERVICE_OBLIGATION.SERVICE_OBLIGATION_ID,
		p_SERVICE_OBLIGATION.MODEL_ID,
		p_SERVICE_OBLIGATION.SCENARIO_ID,
		p_SERVICE_OBLIGATION.AS_OF_DATE,
		p_SERVICE_OBLIGATION.PROVIDER_SERVICE_ID,
		p_SERVICE_OBLIGATION.SERVICE_DELIVERY_ID,
		SYSDATE);

END PUT_SERVICE_OBLIGATION;
----------------------------------------------------------------------------------------------------
FUNCTION PUT_SERVICE_OBLIGATION
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROVIDER_SERVICE_ID IN NUMBER,
	p_SERVICE_DELIVERY_ID IN NUMBER
	) RETURN NUMBER IS

v_SERVICE_OBLIGATION SERVICE_OBLIGATION%ROWTYPE;

BEGIN

-- Create and save a new Service entry.
	v_SERVICE_OBLIGATION.MODEL_ID := p_CAST_CONTEXT.MODEL_ID;
	v_SERVICE_OBLIGATION.SCENARIO_ID := p_CAST_CONTEXT.SCENARIO_ID;
	v_SERVICE_OBLIGATION.AS_OF_DATE := p_CAST_CONTEXT.OUTPUT_AS_OF_DATE;
	v_SERVICE_OBLIGATION.PROVIDER_SERVICE_ID := p_PROVIDER_SERVICE_ID;
	v_SERVICE_OBLIGATION.SERVICE_DELIVERY_ID := p_SERVICE_DELIVERY_ID;
	SELECT SID.NEXTVAL INTO v_SERVICE_OBLIGATION.SERVICE_OBLIGATION_ID FROM DUAL;

	PUT_SERVICE_OBLIGATION(v_SERVICE_OBLIGATION);

	RETURN v_SERVICE_OBLIGATION.SERVICE_OBLIGATION_ID;

END PUT_SERVICE_OBLIGATION;
----------------------------------------------------------------------------------------------------
FUNCTION PUT_LOAD_OBLIGATION
	(
	p_LOAD_OBLIGATION IN LOAD_OBLIGATION%ROWTYPE
	) RETURN NUMBER IS

v_OBLIGATION_ID NUMBER(9);

BEGIN

	SELECT RID.NEXTVAL INTO v_OBLIGATION_ID FROM DUAL;

	INSERT INTO LOAD_OBLIGATION (
		OBLIGATION_ID,
		SC_ID,
		PSE_ID,
		ESP_ID,
		EDC_ID,
		POOL_ID,
		SERVICE_POINT_ID,
		SERVICE_ZONE_ID,
		SCHEDULE_GROUP_ID,
		OBLIGATION_LOAD_CODE,
		OBLIGATION_INTERVAL,
		OBLIGATION_NAME,
		ENTRY_DATE)
	VALUES (
		v_OBLIGATION_ID,
		p_LOAD_OBLIGATION.SC_ID,
		p_LOAD_OBLIGATION.PSE_ID,
		p_LOAD_OBLIGATION.ESP_ID,
		p_LOAD_OBLIGATION.EDC_ID,
		p_LOAD_OBLIGATION.POOL_ID,
		p_LOAD_OBLIGATION.SERVICE_POINT_ID,
		p_LOAD_OBLIGATION.SERVICE_ZONE_ID,
		p_LOAD_OBLIGATION.SCHEDULE_GROUP_ID,
		p_LOAD_OBLIGATION.OBLIGATION_LOAD_CODE,
		p_LOAD_OBLIGATION.OBLIGATION_INTERVAL,
		p_LOAD_OBLIGATION.OBLIGATION_NAME,
		SYSDATE);

-- Put the entry in the Global Cache.
	g_LOAD_OBLIGATION_CACHE.EXTEND;
	g_LOAD_OBLIGATION_CACHE(g_LOAD_OBLIGATION_CACHE.LAST) := LOAD_OBLIGATION_TYPE(v_OBLIGATION_ID, p_LOAD_OBLIGATION.SC_ID, p_LOAD_OBLIGATION.PSE_ID, p_LOAD_OBLIGATION.ESP_ID, p_LOAD_OBLIGATION.EDC_ID, p_LOAD_OBLIGATION.POOL_ID, p_LOAD_OBLIGATION.SERVICE_POINT_ID, p_LOAD_OBLIGATION.SERVICE_ZONE_ID, p_LOAD_OBLIGATION.SCHEDULE_GROUP_ID, p_LOAD_OBLIGATION.OBLIGATION_LOAD_CODE, p_LOAD_OBLIGATION.OBLIGATION_INTERVAL, p_LOAD_OBLIGATION.OBLIGATION_NAME);

	RETURN v_OBLIGATION_ID;

END PUT_LOAD_OBLIGATION;
----------------------------------------------------------------------------------------------------
PROCEDURE INITIALIZE_CACHE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_IDS IN ID_TABLE DEFAULT NULL
	) AS

BEGIN

   IF p_CAST_CONTEXT.REQUEST_MODE IN (GA.STANDARD_MODE, GA.ACCOUNT_GROUP_MODE) THEN --@@Implementation Override - Include Account Group Requests --
      IF p_CAST_CONTEXT.SERVICE_CODE IN(GA.FORECAST_SERVICE, GA.BACKCAST_SERVICE) THEN
         CACHE_ESP_SUPPLY_TYPE;
         CACHE_PSE_IS_BUG;
         CACHE_SCHEDULE_COORDINATOR;
         CACHE_SCHED_GROUP_ATTRIBUTES;
         CACHE_IS_AGGREGATE_POOL;
         CACHE_LOAD_MODELS(p_IDS, p_CAST_CONTEXT.CALENDAR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE, p_CAST_CONTEXT.SERVICE_CODE = GA.BACKCAST_SERVICE);
         CACHE_EDC_LOSS_FACTOR(p_CAST_CONTEXT.LOSS_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_LOSS_FACTOR(p_IDS, p_CAST_CONTEXT.LOSS_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_LOSS_FACTOR_PATTERN;
         CACHE_SCHEDULE_GROUP(p_IDS, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_USAGE_FACTOR(p_IDS, p_CAST_CONTEXT.USAGE_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_TOU_USAGE_FACTOR(p_IDS, p_CAST_CONTEXT.USAGE_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_GROWTH_ATTRITION(p_IDS, p_CAST_CONTEXT.GROWTH_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_GROWTH_PATTERN(p_IDS, p_CAST_CONTEXT.GROWTH_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_AGGREGATE_GROWTH(p_IDS, p_CAST_CONTEXT.GROWTH_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         IF p_CAST_CONTEXT.SERVICE_CODE = GA.BACKCAST_SERVICE THEN
            CACHE_SETTLEMENT_PROFILE(p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         END IF;
      ELSIF p_CAST_CONTEXT.SERVICE_CODE = GA.ACTUAL_SERVICE THEN
         CACHE_ESP_SUPPLY_TYPE;
         CACHE_PSE_IS_BUG;
         CACHE_SCHEDULE_COORDINATOR;
         CACHE_SCHED_GROUP_ATTRIBUTES;
         CACHE_EDC_LOSS_FACTOR(p_CAST_CONTEXT.LOSS_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_LOSS_FACTOR(p_IDS, p_CAST_CONTEXT.LOSS_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_LOSS_FACTOR_PATTERN;
         CACHE_SCHEDULE_GROUP(p_IDS, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_USAGE_FACTOR(p_IDS, p_CAST_CONTEXT.USAGE_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_POOL(p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_IS_AGGREGATE_POOL;
      ELSIF p_CAST_CONTEXT.REQUEST_TYPE = 'S' THEN
         CACHE_SETTLEMENT_PROFILE(p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_USAGE_FACTOR(p_IDS, p_CAST_CONTEXT.USAGE_FACTOR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
         CACHE_LOAD_MODELS(p_IDS, p_CAST_CONTEXT.CALENDAR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE, TRUE);
         CACHE_WEATHER_STATION;
      END IF;
   ELSIF p_CAST_CONTEXT.REQUEST_MODE = GA.STATEMENT_MODE THEN
      CACHE_PRODUCT(p_IDS, p_CAST_CONTEXT.CALENDAR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE, 'REVENUE');
      CACHE_PRODUCT(p_IDS, p_CAST_CONTEXT.CALENDAR_CASE_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE, 'COST');
   ELSIF p_CAST_CONTEXT.REQUEST_MODE = GA.ANCILLARY_SERVICE_MODE THEN
      CACHE_SCHEDULE_COORDINATOR;
      CACHE_SCHEDULE_GROUP(p_IDS, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE);
   END IF;

END INITIALIZE_CACHE;
----------------------------------------------------------------------------------------------------
PROCEDURE RELEASE_CACHE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE DEFAULT NULL
	) AS

BEGIN

	IF p_CAST_CONTEXT IS NULL OR p_CAST_CONTEXT.REQUEST_MODE = GA.STANDARD_MODE THEN
		g_ESP_SUPPLY_TYPE_CACHE.DELETE;
		g_PSE_IS_BUG_CACHE.DELETE;
		g_EDC_SCHEDULE_COORDINATOR.DELETE;
		g_SCHED_GROUP_ATTRIBUTES.DELETE;
		g_SCHEDULE_GROUP_INDEX.DELETE;
		g_SCHEDULE_GROUP_CACHE.DELETE;
		g_FORECAST_CALENDAR_INDEX.DELETE;
		g_FORECAST_CALENDAR_CACHE.DELETE;
		g_BACKCAST_CALENDAR_INDEX.DELETE;
		g_BACKCAST_CALENDAR_CACHE.DELETE;
		g_SETTLEMENT_PROFILE_INDEX.DELETE;
		g_SETTLEMENT_PROFILE_CACHE.DELETE;
		g_EDC_TX_LOSS_FACTOR_INDEX.DELETE;
		g_EDC_TX_LOSS_FACTOR_CACHE.DELETE;
		g_TX_LOSS_FACTOR_INDEX.DELETE;
		g_TX_LOSS_FACTOR_CACHE.DELETE;
		g_DX_LOSS_FACTOR_INDEX.DELETE;
		g_DX_LOSS_FACTOR_CACHE.DELETE;
		g_USAGE_FACTOR_INDEX.DELETE;
		g_USAGE_FACTOR_CACHE.DELETE;
		g_GROWTH_ATTRITION_INDEX.DELETE;
		g_GROWTH_ATTRITION_CACHE.DELETE;
		g_GROWTH_PATTERN_INDEX.DELETE;
		g_GROWTH_PATTERN_CACHE.DELETE;
		g_WEATHER_STATION_CACHE.DELETE;
		g_POOL_INDEX.DELETE;
		g_POOL_CACHE.DELETE;
		g_IS_AGGREGATE_POOL_CACHE.DELETE;
		g_AGGREGATE_GROWTH_INDEX.DELETE;
		g_AGGREGATE_GROWTH_CACHE.DELETE;
		g_ACCOUNT_SERVICE_XREF.DELETE;
	ELSIF p_CAST_CONTEXT.REQUEST_MODE = GA.STATEMENT_MODE THEN
		g_REVENUE_PRODUCT_INDEX.DELETE;
		g_REVENUE_PRODUCT_CACHE.DELETE;
		g_COST_PRODUCT_INDEX.DELETE;
		g_COST_PRODUCT_CACHE.DELETE;
	END IF;

END RELEASE_CACHE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_XREF_ACCOUNT_SERVICE_ID
	(
	p_XREF_ID IN BINARY_INTEGER
	) RETURN NUMBER IS

v_INDEX BINARY_INTEGER;

BEGIN

	IF g_ACCOUNT_SERVICE_XREF.COUNT > 0 THEN
		v_INDEX := g_ACCOUNT_SERVICE_XREF.FIRST;
		WHILE v_INDEX <= g_ACCOUNT_SERVICE_XREF.LAST LOOP
			IF g_ACCOUNT_SERVICE_XREF(v_INDEX) = p_XREF_ID THEN
				RETURN v_INDEX;
			END IF;
			v_INDEX := g_ACCOUNT_SERVICE_XREF.NEXT(v_INDEX);
		END LOOP;
	END IF;

	RETURN g_NOT_ASSIGNED;

END GET_XREF_ACCOUNT_SERVICE_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_ACCOUNT_SERVICE_ID
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_AGGREGATE_ID IN NUMBER
	) RETURN NUMBER IS
v_ACCOUNT_SERVICE_ID NUMBER(9);
BEGIN
	CS.GET_ACCOUNT_SERVICE_ID(p_ACCOUNT_ID,p_SERVICE_LOCATION_ID,p_METER_ID,p_AGGREGATE_ID,v_ACCOUNT_SERVICE_ID);
    RETURN v_ACCOUNT_SERVICE_ID;
END GET_ACCOUNT_SERVICE_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PROVIDER_SERVICE_ID
	(
	p_EDC_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_PSE_ID IN NUMBER
	) RETURN NUMBER IS

v_PROVIDER_SERVICE_ID NUMBER(9);

BEGIN
   CS.GET_PROVIDER_SERVICE_ID(p_EDC_ID,p_ESP_ID,p_PSE_ID,v_PROVIDER_SERVICE_ID);
	RETURN v_PROVIDER_SERVICE_ID;

END GET_PROVIDER_SERVICE_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SERVICE_DELIVERY_ID
	(
	p_POOL_ID IN NUMBER,
	p_SERVICE_POINT_ID IN NUMBER,
	p_SERVICE_ZONE_ID IN NUMBER,
	p_SCHEDULE_GROUP_ID IN NUMBER,
	p_SC_ID IN NUMBER,
	p_SUPPLY_TYPE IN CHAR,
	p_IS_BUG IN NUMBER,
	p_IS_WHOLESALE IN NUMBER,
	p_IS_AGGREGATE_POOL IN NUMBER
	) RETURN NUMBER IS

v_SERVICE_DELIVERY_ID NUMBER(9);

BEGIN

	CS.SET_SERVICE_DELIVERY_ID (p_POOL_ID,
								p_SERVICE_POINT_ID,
								p_SERVICE_ZONE_ID,
								p_SCHEDULE_GROUP_ID,
								p_SC_ID,
								p_SUPPLY_TYPE,
			    				p_IS_BUG,
								p_IS_WHOLESALE ,
								p_IS_AGGREGATE_POOL,
						    	v_SERVICE_DELIVERY_ID);


	RETURN v_SERVICE_DELIVERY_ID;

END GET_SERVICE_DELIVERY_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SERVICE_ID
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROVIDER_SERVICE_ID IN NUMBER,
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DELIVERY_ID IN NUMBER
	) RETURN NUMBER IS

v_SERVICE_OBLIGATION_ID NUMBER(9);
v_SERVICE_ID NUMBER(9);

BEGIN

	--I guess this line makes sure there is a service obligation row.
	v_SERVICE_OBLIGATION_ID := GET_SERVICE_OBLIGATION_ID(p_CAST_CONTEXT, p_PROVIDER_SERVICE_ID, p_SERVICE_DELIVERY_ID);

	v_SERVICE_ID := CS.GET_SERVICE_ID(p_CAST_CONTEXT.MODEL_ID,
									  p_CAST_CONTEXT.SCENARIO_ID,
									  p_CAST_CONTEXT.OUTPUT_AS_OF_DATE,
									  p_PROVIDER_SERVICE_ID,
									  p_ACCOUNT_SERVICE_ID,
									  p_SERVICE_DELIVERY_ID);
	RETURN v_SERVICE_ID;

END GET_SERVICE_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SERVICE_OBLIGATION_ID
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROVIDER_SERVICE_ID IN NUMBER,
	p_SERVICE_DELIVERY_ID IN NUMBER
	) RETURN NUMBER IS

v_SERVICE_OBLIGATION_ID NUMBER(9);

BEGIN

		BEGIN

    	SELECT SERVICE_OBLIGATION_ID
		INTO v_SERVICE_OBLIGATION_ID
		FROM SERVICE_OBLIGATION
		WHERE MODEL_ID = p_CAST_CONTEXT.MODEL_ID
           	AND SCENARIO_ID = p_CAST_CONTEXT.SCENARIO_ID
			AND AS_OF_DATE = p_CAST_CONTEXT.OUTPUT_AS_OF_DATE
			AND PROVIDER_SERVICE_ID = p_PROVIDER_SERVICE_ID
			AND SERVICE_DELIVERY_ID = p_SERVICE_DELIVERY_ID;

		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				v_SERVICE_OBLIGATION_ID := PUT_SERVICE_OBLIGATION(p_CAST_CONTEXT, p_PROVIDER_SERVICE_ID, p_SERVICE_DELIVERY_ID);
		END;

	RETURN v_SERVICE_OBLIGATION_ID;


END GET_SERVICE_OBLIGATION_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_ESP_SUPPLY_TYPE
	(
	p_ESP_ID IN NUMBER
	) RETURN CHAR IS

BEGIN

	IF g_ESP_SUPPLY_TYPE_CACHE.EXISTS(p_ESP_ID) THEN
		RETURN g_ESP_SUPPLY_TYPE_CACHE(p_ESP_ID);
	ELSE
		RETURN '?';
	END IF;

END GET_ESP_SUPPLY_TYPE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PSE_IS_BUG
	(
	p_PSE_ID IN NUMBER
	) RETURN NUMBER IS

BEGIN

	IF g_PSE_IS_BUG_CACHE.EXISTS(p_PSE_ID) THEN
		RETURN g_PSE_IS_BUG_CACHE(p_PSE_ID);
	ELSE
		RETURN g_NOT_ASSIGNED;
	END IF;

END GET_PSE_IS_BUG;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SERVICE_POINT_ID
	(
	p_SCHEDULE_GROUP_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER
	) RETURN NUMBER IS

v_SERVICE_POINT_ID NUMBER(9);

BEGIN
	-- Check Schedule Group's Service Point and then Service Location's Service Point
	IF p_SCHEDULE_GROUP_ID <> CONSTANTS.NOT_ASSIGNED THEN
		IF g_SCHED_GROUP_ATTRIBUTES.EXISTS(p_SCHEDULE_GROUP_ID) THEN
			RETURN g_SCHED_GROUP_ATTRIBUTES(p_SCHEDULE_GROUP_ID).SERVICE_POINT_ID;
		END IF;
	END IF;

	SELECT SERVICE_POINT_ID
	INTO v_SERVICE_POINT_ID
	FROM SERVICE_LOCATION A
	WHERE A.SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID;

	RETURN v_SERVICE_POINT_ID;

EXCEPTION
	WHEN OTHERS THEN
		RETURN 0;

END GET_SERVICE_POINT_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SERVICE_ZONE_ID
	(
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_SCHEDULE_GROUP_ID IN NUMBER
	) RETURN NUMBER IS

-- Answer the Service Zone for this Service Location Schedule Group combination.
-- If there is a Schedule Group Service Zone assignment then it takes priority over the Service Location 's Service Zone.
v_SERVICE_ZONE_ID NUMBER(9);
BEGIN

	IF p_SCHEDULE_GROUP_ID <> g_NOT_ASSIGNED THEN
		IF g_SCHED_GROUP_ATTRIBUTES.EXISTS(p_SCHEDULE_GROUP_ID) THEN
			RETURN g_SCHED_GROUP_ATTRIBUTES(p_SCHEDULE_GROUP_ID).SERVICE_ZONE_ID;
		END IF;
	END IF;

	SELECT CASE WHEN SZ.SERVICE_ZONE_ID IS NOT NULL AND SZ.SERVICE_ZONE_ID <> CONSTANTS.NOT_ASSIGNED
		THEN SZ.SERVICE_ZONE_ID ELSE SP.SERVICE_ZONE_ID END
	INTO v_SERVICE_ZONE_ID
	FROM SERVICE_LOCATION SL, SERVICE_POINT SP, SERVICE_ZONE SZ
	WHERE SL.SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID
		AND SP.SERVICE_POINT_ID = SL.SERVICE_POINT_ID
		AND SZ.SERVICE_ZONE_ID = SL.SERVICE_ZONE_ID;

	RETURN v_SERVICE_ZONE_ID;

EXCEPTION
	WHEN OTHERS THEN
		RETURN 0;

END GET_SERVICE_ZONE_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_IS_WHOLESALE
	(
	p_SERVICE_LOCATION_ID IN NUMBER
	) RETURN NUMBER IS

v_IS_WHOLESALE NUMBER(1);
BEGIN

	-- CHECK IF FORCED TO ZERO --
	IF NOT GA.ENABLE_IS_WHOLESALE_LOOKUP THEN
		RETURN 0;
	ELSE
		SELECT DECODE(UPPER(SUBSTR(B.SERVICE_POINT_TYPE,1,1)),'W',1,0)
		INTO v_IS_WHOLESALE
		FROM SERVICE_LOCATION A, SERVICE_POINT B
		WHERE A.SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID
			AND B.SERVICE_POINT_ID = A.SERVICE_POINT_ID;
	END IF;

	RETURN v_IS_WHOLESALE;

EXCEPTION
	WHEN OTHERS THEN
		RETURN 0;

END GET_IS_WHOLESALE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_IS_UFE_PARTICIPANT
	(
	p_ACCOUNT_ID IN NUMBER
	) RETURN NUMBER IS

v_IS_UFE_PARTICIPANT NUMBER(1);

BEGIN

	SELECT IS_UFE_PARTICIPANT
	INTO v_IS_UFE_PARTICIPANT
	FROM ACCOUNT
	WHERE ACCOUNT_ID = p_ACCOUNT_ID;

	RETURN v_IS_UFE_PARTICIPANT;

EXCEPTION
	WHEN OTHERS THEN
		RAISE;

END GET_IS_UFE_PARTICIPANT;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SCHEDULE_GROUP_ID
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE
	) RETURN NUMBER IS

BEGIN

	RETURN GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_SCHEDULE_GROUP_INDEX, g_SCHEDULE_GROUP_CACHE);

END GET_SCHEDULE_GROUP_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SCHEDULE_COORDINATOR_ID
	(
	p_EDC_ID IN NUMBER,
	p_SCHEDULE_GROUP_ID IN NUMBER
	) RETURN NUMBER IS

-- Answer the Schedule Coordinator for this EDC Schedule Group combination.
-- If there is a Schedule Group Schedule Coordinator assignment then it takes priority over the EDC's Schedule Coordinator.

BEGIN

	IF NOT p_SCHEDULE_GROUP_ID = g_NOT_ASSIGNED THEN
		IF g_SCHED_GROUP_ATTRIBUTES.EXISTS(p_SCHEDULE_GROUP_ID) THEN
			RETURN g_SCHED_GROUP_ATTRIBUTES(p_SCHEDULE_GROUP_ID).SC_ID;
		END IF;
	END IF;

	IF g_EDC_SCHEDULE_COORDINATOR.EXISTS(p_EDC_ID) THEN
		RETURN g_EDC_SCHEDULE_COORDINATOR(p_EDC_ID);
	ELSE
		RETURN g_NOT_ASSIGNED;
	END IF;

END GET_SCHEDULE_COORDINATOR_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_CALENDAR_ID
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_CAST_TYPE IN VARCHAR
	) RETURN NUMBER IS

-- Answer the Calendar Id in effect for the Account Service.
-- For a Backcast or Settlement Profile Generation a Backcast Calendar takes priority if it exists; else Default to the Forecast Calendar.

v_CALENDAR_ID NUMBER(9);

BEGIN

	IF UPPER(SUBSTR(p_CAST_TYPE,1,1)) IN ('B','S') THEN
		 v_CALENDAR_ID := GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_BACKCAST_CALENDAR_INDEX, g_BACKCAST_CALENDAR_CACHE);
		 IF v_CALENDAR_ID <> g_NOT_ASSIGNED THEN
		 	RETURN v_CALENDAR_ID;
		END IF;
	END IF;

	RETURN GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_FORECAST_CALENDAR_INDEX, g_FORECAST_CALENDAR_CACHE);

END GET_CALENDAR_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PROXY_DAY_METHOD_ID
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_CAST_TYPE IN VARCHAR
	) RETURN NUMBER IS

-- Answer the Proxy Day Method Id in effect for the Account Service.
-- For a Backcast a Backcast Proxy Day Method takes priority if it exists; else Default to the Forecast Proxy Day Method.

v_PROXY_DAY_METHOD_ID NUMBER(9);

BEGIN

	IF UPPER(SUBSTR(p_CAST_TYPE,1,1)) IN ('B','S') THEN
		 v_PROXY_DAY_METHOD_ID := GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_BACKCAST_PROXY_DAY_INDEX, g_BACKCAST_PROXY_DAY_CACHE);
		 IF v_PROXY_DAY_METHOD_ID <> g_NOT_ASSIGNED THEN
		 	RETURN v_PROXY_DAY_METHOD_ID;
		END IF;
	END IF;

	RETURN GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_FORECAST_PROXY_DAY_INDEX, g_FORECAST_PROXY_DAY_CACHE);

END GET_PROXY_DAY_METHOD_ID;
----------------------------------------------------------------------------------------------------
PROCEDURE ADD_VALUES_TO_SET
	(
	p_SET IN OUT NOCOPY UT.STRING_MAP,
	p_TIMED_VALUE IN OUT NOCOPY TIMED_VALUE
	) AS
v_IDX	PLS_INTEGER;
BEGIN
	-- set is a hash map - we don't care about values, just about
	-- the keys
	v_IDX := p_TIMED_VALUE.FIRST;
	WHILE p_TIMED_VALUE.EXISTS(v_IDX) LOOP
		p_SET( TO_CHAR(p_TIMED_VALUE(v_IDX).DATA_VALUE) ) := 1;
		v_IDX := p_TIMED_VALUE.NEXT(v_IDX);
	END LOOP;
END ADD_VALUES_TO_SET;
----------------------------------------------------------------------------------------------------
FUNCTION GET_ALL_PROXY_DAY_METHOD_IDs RETURN ID_TABLE IS
	v_SET	UT.STRING_MAP;
	v_RET	ID_TABLE := ID_TABLE();
	v_ID	VARCHAR2(32);
BEGIN
	-- collect all distinct proxy day method IDs referenced
	-- in load model caches
	ADD_VALUES_TO_SET(v_SET, g_FORECAST_PROXY_DAY_CACHE);
	ADD_VALUES_TO_SET(v_SET, g_BACKCAST_PROXY_DAY_CACHE);
	v_ID := v_SET.FIRST;
	WHILE v_SET.EXISTS(v_ID) LOOP
		v_RET.EXTEND();
		v_RET(v_RET.LAST) := ID_TYPE(TO_NUMBER(v_ID));
		v_ID := v_SET.NEXT(v_ID);
	END LOOP;
	RETURN v_RET;
END GET_ALL_PROXY_DAY_METHOD_IDs;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SETTLEMENT_PROFILE_ID
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE
	) RETURN NUMBER IS

BEGIN

	RETURN GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_SETTLEMENT_PROFILE_INDEX, g_SETTLEMENT_PROFILE_CACHE);

END GET_SETTLEMENT_PROFILE_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_USAGE_FACTOR
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE
	) RETURN NUMBER IS

v_FACTOR NUMBER;
v_NO_DATA_FOUND BOOLEAN;

BEGIN

	v_FACTOR := GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_USAGE_FACTOR_INDEX, g_USAGE_FACTOR_CACHE, v_NO_DATA_FOUND);

	IF v_NO_DATA_FOUND THEN
		RETURN 1.0;
	ELSE
		RETURN v_FACTOR;
	END IF;

END GET_USAGE_FACTOR;
----------------------------------------------------------------------------------------------------
FUNCTION GET_TOU_USAGE_FACTOR_ID
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE
	) RETURN NUMBER IS

v_TOU_USAGE_FACTOR_ID NUMBER(9);
v_NO_DATA_FOUND BOOLEAN;

BEGIN

	v_TOU_USAGE_FACTOR_ID := GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_TOU_USAGE_FACTOR_INDEX, g_TOU_USAGE_FACTOR_CACHE, v_NO_DATA_FOUND);

	IF v_NO_DATA_FOUND THEN
		RETURN NULL;
	ELSE
		RETURN v_TOU_USAGE_FACTOR_ID;
	END IF;

END GET_TOU_USAGE_FACTOR_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_AGGREGATE_GROWTH_INDEX
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE
	) RETURN BINARY_INTEGER IS

v_INDEX BINARY_INTEGER;

BEGIN

	IF g_AGGREGATE_GROWTH_INDEX.EXISTS(p_ACCOUNT_SERVICE_ID) THEN
		FOR v_INDEX IN g_AGGREGATE_GROWTH_INDEX(p_ACCOUNT_SERVICE_ID).START_INDEX..g_AGGREGATE_GROWTH_INDEX(p_ACCOUNT_SERVICE_ID).STOP_INDEX LOOP
			IF g_AGGREGATE_GROWTH_CACHE.EXISTS(v_INDEX) THEN
				IF p_SERVICE_DATE BETWEEN g_AGGREGATE_GROWTH_CACHE(v_INDEX).BEGIN_DATE AND g_AGGREGATE_GROWTH_CACHE(v_INDEX).END_DATE THEN
					RETURN v_INDEX;
				END IF;
			END IF;
		END LOOP;
	END IF;

	RETURN NULL;

END GET_AGGREGATE_GROWTH_INDEX;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PATTERN_INTERVAL
	(
	p_PATTERN_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_RUN_MODE IN NUMBER,
	p_APPLICATION_METHOD IN CHAR DEFAULT 'A'
	) RETURN NUMBER IS

v_DAYS NUMBER(3);
v_INTERVAL NUMBER(4) := 1;

BEGIN

	IF p_APPLICATION_METHOD = 'B' THEN -- Alternate Application Method that  Allocates over a Block Month or Year.
		IF p_RUN_MODE = GA.MONTH_MODE THEN
			v_INTERVAL := 12;
		ELSIF p_RUN_MODE = GA.WEEK_MODE THEN
			v_INTERVAL := TO_NUMBER(TO_CHAR(ADD_MONTHS(TRUNC(p_SERVICE_DATE,'YEAR'),12) - 1,'DDD'));
		ELSIF p_RUN_MODE = GA.DAY_MODE THEN
			v_INTERVAL :=  1;
		END IF;
	ELSE
		IF p_PATTERN_ID = 1 THEN -- Year Pattern Spec.
			IF p_RUN_MODE = GA.MONTH_MODE THEN
				v_INTERVAL := 12; -- Allocate Over # of Months in Year
			ELSIF p_RUN_MODE = GA.WEEK_MODE THEN
				v_INTERVAL := TO_NUMBER(TO_CHAR(ADD_MONTHS(TRUNC(p_SERVICE_DATE,'YEAR'),12) - 1,'DDD')) / 7; -- Allocate Over # of Weeks In Year
			ELSIF p_RUN_MODE = GA.DAY_MODE THEN
				v_INTERVAL := TO_NUMBER(TO_CHAR(ADD_MONTHS(TRUNC(p_SERVICE_DATE,'YEAR'),12) - 1,'DDD')); -- Allocate Over # of Days In Year
			END IF;
		ELSIF p_PATTERN_ID = 2 THEN -- Month Pattern Spec.
			IF p_RUN_MODE = GA.MONTH_MODE THEN
				v_INTERVAL := 1; -- Allocate Over Entire Month
			ELSIF p_RUN_MODE = GA.WEEK_MODE THEN
				v_INTERVAL := TO_NUMBER(TO_CHAR(LAST_DAY(p_SERVICE_DATE),'DD')) / 7; -- Allocate Over # Weeks in Month
			ELSIF p_RUN_MODE = GA.DAY_MODE THEN
				v_INTERVAL := TO_NUMBER(TO_CHAR(LAST_DAY(p_SERVICE_DATE),'DD')); -- Allocate Over # of Days In Month
			END IF;
		ELSE
			v_DAYS := TO_NUMBER(TO_CHAR(LAST_DAY(p_SERVICE_DATE),'DD'));
			IF p_RUN_MODE = GA.MONTH_MODE THEN
				v_INTERVAL := 1; -- Allocate Over Entire Month
			ELSIF p_RUN_MODE = GA.WEEK_MODE THEN
				v_INTERVAL := v_DAYS / 7; -- Allocate Over # Weeks in Month
			ELSIF p_RUN_MODE = GA.DAY_MODE THEN
				v_INTERVAL := v_DAYS; -- Allocate Over # of Days In Month
			END IF;
		END IF;
	END IF;

	RETURN v_INTERVAL;

END GET_PATTERN_INTERVAL;
----------------------------------------------------------------------------------------------------
FUNCTION GET_GROWTH_PATTERN
	(
	p_GROWTH_PERCENT IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_PATTERN_INDEX IN BINARY_INTEGER
	) RETURN NUMBER IS

-- Answer the Daily Growth or Attrition Pecentage as a Factor.

v_GROWTH_PERCENT NUMBER(12,6) := 0.0;
v_MONTH NUMBER(2);

BEGIN

	IF g_GROWTH_PATTERN.EXISTS(p_PATTERN_INDEX) THEN
		IF g_GROWTH_PATTERN(p_PATTERN_INDEX).PATTERN_ID IN(1,2) THEN
			v_GROWTH_PERCENT := p_GROWTH_PERCENT;
		ELSE
			v_MONTH := TO_NUMBER(TO_CHAR(p_SERVICE_DATE,'MM')); -- Month Allocation to Year Pattern
			IF v_MONTH = 1 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).JAN_PCT;
			ELSIF v_MONTH = 2 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).FEB_PCT;
			ELSIF v_MONTH = 3 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).MAR_PCT;
			ELSIF v_MONTH = 4 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).APR_PCT;
			ELSIF v_MONTH = 5 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).MAY_PCT;
			ELSIF v_MONTH = 6 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).JUN_PCT;
			ELSIF v_MONTH = 7 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).JUL_PCT;
			ELSIF v_MONTH = 8 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).AUG_PCT;
			ELSIF v_MONTH = 9 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).SEP_PCT;
			ELSIF v_MONTH = 10 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).OCT_PCT;
			ELSIF v_MONTH = 11 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).NOV_PCT;
			ELSIF v_MONTH = 12 THEN
				v_GROWTH_PERCENT := g_GROWTH_PATTERN(p_PATTERN_INDEX).DEC_PCT;
			END IF;
		END IF;
	END IF;

	RETURN v_GROWTH_PERCENT;

END GET_GROWTH_PATTERN;
----------------------------------------------------------------------------------------------------
FUNCTION GET_GROWTH_PERCENT
	(
	p_AGGREGATE_GROWTH AGGREGATE_ACCOUNT_GROWTH_TYPE,
	p_SERVICE_DATE IN DATE,
	p_APPLICATION_METHOD IN CHAR DEFAULT 'A'
	) RETURN NUMBER IS

-- Answer the Growth or Attrition Pecentage.

v_GROWTH_PERCENT NUMBER(12,6) := 0.0;
v_AGGREGATE_GROWTH_INDEX BINARY_INTEGER;
v_SERVICE_DATE DATE;

BEGIN

	IF p_APPLICATION_METHOD = 'A' THEN
		v_GROWTH_PERCENT := GET_GROWTH_PATTERN(p_AGGREGATE_GROWTH.GROWTH_PCT, p_SERVICE_DATE, p_AGGREGATE_GROWTH.PATTERN_ID);
	ELSE
		IF TRUNC(p_SERVICE_DATE,'MONTH') = p_SERVICE_DATE THEN
			IF p_AGGREGATE_GROWTH.PATTERN_ID = 1 THEN -- Year Pattern
				IF TO_CHAR(p_SERVICE_DATE, 'MMDD') =  TO_CHAR(p_AGGREGATE_GROWTH.BEGIN_DATE, 'MMDD') THEN -- Anniversary of Annual Rate
					v_SERVICE_DATE := ADD_MONTHS(p_SERVICE_DATE,-12);
				ELSE
					v_SERVICE_DATE := LOW_DATE;
				END IF;
				v_AGGREGATE_GROWTH_INDEX := GET_AGGREGATE_GROWTH_INDEX(p_AGGREGATE_GROWTH.ACCOUNT_SERVICE_ID, v_SERVICE_DATE);
				IF v_AGGREGATE_GROWTH_INDEX IS NULL THEN
					v_GROWTH_PERCENT := 0;
				ELSE
					v_GROWTH_PERCENT := g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).GROWTH_PCT;
				END IF;
			ELSIF p_AGGREGATE_GROWTH.PATTERN_ID = 2 THEN -- Month Pattern
				v_SERVICE_DATE := ADD_MONTHS(p_SERVICE_DATE,-1);
				v_AGGREGATE_GROWTH_INDEX := GET_AGGREGATE_GROWTH_INDEX(p_AGGREGATE_GROWTH.ACCOUNT_SERVICE_ID, v_SERVICE_DATE);
				IF v_AGGREGATE_GROWTH_INDEX IS NULL THEN
					v_GROWTH_PERCENT := 0;
				ELSE
					v_GROWTH_PERCENT := g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).GROWTH_PCT;
				END IF;
			ELSE -- Specific Month Template
				v_GROWTH_PERCENT := GET_GROWTH_PATTERN(p_AGGREGATE_GROWTH.GROWTH_PCT, ADD_MONTHS(p_SERVICE_DATE,-1), p_AGGREGATE_GROWTH.PATTERN_ID);
			END IF;
		ELSE
			v_GROWTH_PERCENT := 0;
		END IF;
	END IF;

	RETURN v_GROWTH_PERCENT;

END GET_GROWTH_PERCENT;
----------------------------------------------------------------------------------------------------
FUNCTION GET_GROWTH_FACTOR
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_RUN_MODE IN NUMBER DEFAULT GA.DAY_MODE
	) RETURN NUMBER IS

-- Answer the Daily Growth or Attrition Pecentage as a Factor.

v_PATTERN_INDEX BINARY_INTEGER;
v_INTERVAL NUMBER(4);
v_GROWTH_PERCENT NUMBER(12,6);
v_NO_DATA_FOUND BOOLEAN;

BEGIN

	v_GROWTH_PERCENT := GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_GROWTH_ATTRITION_INDEX, g_GROWTH_ATTRITION_CACHE, v_NO_DATA_FOUND);

	IF v_NO_DATA_FOUND THEN
		RETURN 0.0;
	END IF;

	v_PATTERN_INDEX := GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, TRUNC(p_SERVICE_DATE), g_GROWTH_PATTERN_INDEX, g_GROWTH_PATTERN_CACHE);

	v_INTERVAL := GET_PATTERN_INTERVAL(v_PATTERN_INDEX, p_SERVICE_DATE, p_RUN_MODE);
	v_GROWTH_PERCENT := GET_GROWTH_PATTERN(v_GROWTH_PERCENT, p_SERVICE_DATE, v_PATTERN_INDEX);

	IF v_INTERVAL > 0 THEN
		RETURN v_GROWTH_PERCENT / v_INTERVAL / 100.0;
	ELSE
		RETURN v_GROWTH_PERCENT / 100.0;
	END IF;

END GET_GROWTH_FACTOR;
----------------------------------------------------------------------------------------------------
FUNCTION GET_AGGREGATE_SERVICE_ACCOUNTS
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_SERVICE_ACCOUNTS IN NUMBER,
	p_RUN_MODE IN NUMBER DEFAULT GA.DAY_MODE,
	p_APPLICATION_METHOD IN CHAR DEFAULT 'A'
	) RETURN NUMBER IS

-- Answer the Aggregate Service Accounts by applying the Growth or Attrition Pecentage.

v_INDEX BINARY_INTEGER;
v_AGGREGATE_GROWTH_INDEX BINARY_INTEGER;
v_PERCENT NUMBER(12,6);
v_INTERVAL NUMBER(4);
v_NOT_FOUND BOOLEAN;

BEGIN

	v_AGGREGATE_GROWTH_INDEX := GET_AGGREGATE_GROWTH_INDEX(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE);

	IF v_AGGREGATE_GROWTH_INDEX IS NULL THEN
		IF LOGS.IS_DEBUG_ENABLED THEN
			LOGS.LOG_DEBUG('AGGREGATE_GROWTH_INDEX NOT FOUND');
		END IF;
		RETURN 0;
	END IF;

-- If the user has specified a Null Basis Service Accounts then set to the current running value or Standard Enrollment Value.
	IF p_SERVICE_DATE = g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).BEGIN_DATE THEN
		IF g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).BASIS_SERVICE_ACCOUNTS = g_NOT_ASSIGNED THEN
			IF g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).RUNNING_SERVICE_ACCOUNTS IS NULL THEN
				g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).BASIS_SERVICE_ACCOUNTS := p_SERVICE_ACCOUNTS;
			ELSE
				g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).BASIS_SERVICE_ACCOUNTS := g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).RUNNING_SERVICE_ACCOUNTS;
			END IF;
		END IF;
		IF g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).RUNNING_SERVICE_ACCOUNTS IS NULL THEN
			g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).RUNNING_SERVICE_ACCOUNTS := g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).BASIS_SERVICE_ACCOUNTS;
		END IF;
-- Transition from Standard Enrollment to Growth/Attrition Enrollment.
	ELSIF p_SERVICE_ACCOUNTS = g_NOT_ASSIGNED THEN
		g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).BASIS_SERVICE_ACCOUNTS := g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).SERVICE_ACCOUNTS;
	END IF;

	v_INTERVAL := GET_PATTERN_INTERVAL(g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).PATTERN_ID, p_SERVICE_DATE, p_RUN_MODE, p_APPLICATION_METHOD);
	v_PERCENT := GET_GROWTH_PERCENT(g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX), p_SERVICE_DATE, p_APPLICATION_METHOD);

	g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).ACCOUNTS_PER_INTERVAL := g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).BASIS_SERVICE_ACCOUNTS * (v_PERCENT / 100.0) / v_INTERVAL;
	g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).SERVICE_GROWTH_PCT := v_PERCENT;
	g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).SERVICE_INTERVAL := v_INTERVAL;
	g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).RUNNING_SERVICE_ACCOUNTS := g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).RUNNING_SERVICE_ACCOUNTS + g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).ACCOUNTS_PER_INTERVAL;

	IF g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).ACCOUNTS_PER_INTERVAL < g_NOT_ASSIGNED THEN
		g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).SERVICE_ACCOUNTS := CEIL(g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).RUNNING_SERVICE_ACCOUNTS);
	ELSE
		g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).SERVICE_ACCOUNTS := FLOOR(g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).RUNNING_SERVICE_ACCOUNTS);
	END IF;

	IF LOGS.IS_DEBUG_ENABLED THEN
		TRACE_AGGREGATE_GROWTH(g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX), p_SERVICE_DATE);
	END IF;

	RETURN g_AGGREGATE_GROWTH_CACHE(v_AGGREGATE_GROWTH_INDEX).SERVICE_ACCOUNTS;

END GET_AGGREGATE_SERVICE_ACCOUNTS;
----------------------------------------------------------------------------------------------------
FUNCTION GET_LOSS_PATTERN
	(
	p_PATTERN_ID IN NUMBER
	) RETURN GA.NUMBER_TABLE IS

v_INDEX BINARY_INTEGER;
v_PATTERN GA.NUMBER_TABLE;

BEGIN

	IF LOGS.IS_DEBUG_ENABLED THEN
		TRACE_PATTERN(p_PATTERN_ID);
	END IF;

	v_INDEX := g_LOSS_FACTOR_PATTERN.FIRST;
	WHILE v_INDEX <= g_LOSS_FACTOR_PATTERN.LAST LOOP
		IF g_LOSS_FACTOR_PATTERN(v_INDEX).PATTERN_ID = p_PATTERN_ID THEN
			v_PATTERN(v_PATTERN.COUNT + 1) := g_LOSS_FACTOR_PATTERN(v_INDEX).PATTERN_VAL;
		ELSIF g_LOSS_FACTOR_PATTERN(v_INDEX).PATTERN_ID > p_PATTERN_ID THEN
			RETURN v_PATTERN;
		END IF;
		v_INDEX := g_LOSS_FACTOR_PATTERN.NEXT(v_INDEX);
	END LOOP;

	RETURN v_PATTERN;


--
END GET_LOSS_PATTERN;
--------------------------------------------------------------------------------------------------
FUNCTION GET_EDC_LOSS_FACTOR_OPTION
	(
	p_EDC_ID IN NUMBER
	) RETURN VARCHAR IS

v_EDC_LOSS_FACTOR_OPTION ENERGY_DISTRIBUTION_COMPANY.EDC_LOSS_FACTOR_OPTION%TYPE;
BEGIN

   IF GA.ENABLE_CONST_EDC_LOSS_FACTOR THEN
      RETURN GA.CONST_EDC_LOSS_FACTOR_VALUE;
   END IF;

	BEGIN
		SELECT UPPER(EDC_LOSS_FACTOR_OPTION)
		INTO v_EDC_LOSS_FACTOR_OPTION
		FROM ENERGY_DISTRIBUTION_COMPANY
		WHERE EDC_ID = p_EDC_ID;
	EXCEPTION
		WHEN OTHERS THEN
			v_EDC_LOSS_FACTOR_OPTION := 'COMBINE';
	END;

	RETURN v_EDC_LOSS_FACTOR_OPTION;

END GET_EDC_LOSS_FACTOR_OPTION;
----------------------------------------------------------------------------------------------------
FUNCTION GET_LOSS_FACTOR_FROM_OPTION
	(
	p_LOSS_FACTOR_OPTION IN VARCHAR,
	p_LOSS_FACTOR IN GA.NUMBER_TABLE,
	p_EDC_LOSS_FACTOR IN GA.NUMBER_TABLE
	) RETURN GA.NUMBER_TABLE IS

v_INDEX BINARY_INTEGER;
v_RETURN GA.NUMBER_TABLE;
BEGIN

	IF p_LOSS_FACTOR_OPTION = 'ACCOUNT' THEN
		v_RETURN := p_LOSS_FACTOR;
	ELSIF p_LOSS_FACTOR_OPTION = 'EDC' THEN
		v_RETURN := p_EDC_LOSS_FACTOR;
	ELSIF p_LOSS_FACTOR_OPTION = 'COMBINE' THEN
		IF p_EDC_LOSS_FACTOR.COUNT = 0 THEN
			v_RETURN := p_LOSS_FACTOR;
		ELSIF p_EDC_LOSS_FACTOR.COUNT = p_LOSS_FACTOR.COUNT THEN
			v_INDEX := p_EDC_LOSS_FACTOR.FIRST;
			v_RETURN := p_EDC_LOSS_FACTOR;
			WHILE v_INDEX <= p_EDC_LOSS_FACTOR.LAST LOOP
				IF p_LOSS_FACTOR.EXISTS(v_INDEX) THEN
					v_RETURN(v_INDEX) := p_EDC_LOSS_FACTOR(v_INDEX) + p_LOSS_FACTOR(v_INDEX);
				END IF;
				v_INDEX := p_EDC_LOSS_FACTOR.NEXT(v_INDEX);
			END LOOP;
		ELSE
			v_RETURN := p_EDC_LOSS_FACTOR;
		END IF;
	ELSIF p_LOSS_FACTOR_OPTION = 'OVERRIDE' THEN
		IF p_LOSS_FACTOR.COUNT > 0 THEN
			v_RETURN := p_LOSS_FACTOR;
		ELSE
			v_RETURN := p_EDC_LOSS_FACTOR;
		END IF;
	ELSE
		v_RETURN := p_EDC_LOSS_FACTOR;
	END IF;

	RETURN v_RETURN;

EXCEPTION
	WHEN OTHERS THEN
		RAISE;
END GET_LOSS_FACTOR_FROM_OPTION;
----------------------------------------------------------------------------------------------------
FUNCTION GET_LOSS_FACTOR_PATTERN
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_LOSS_FACTOR_TYPE IN VARCHAR,
	p_FAULT_CACHE IN BOOLEAN DEFAULT FALSE
	) RETURN GA.NUMBER_TABLE IS

v_EDC_PATTERN_ID NUMBER(9);
v_PATTERN_ID NUMBER(9);
v_EDC_LOSS_FACTOR GA.NUMBER_TABLE;
v_LOSS_FACTOR GA.NUMBER_TABLE;
v_LOSS_FACTOR_OPTION VARCHAR(16) := GET_EDC_LOSS_FACTOR_OPTION(p_EDC_ID);
v_NO_EDC_DATA_FOUND BOOLEAN;
v_NO_DATA_FOUND BOOLEAN;
v_NEED_PATTERN_CACHE BOOLEAN := FALSE;

--This function gets called from MS when importing Interval Usage, so be
--sure not to mess up the functionality for MS when changing.

-- CURSOR c_ACCOUNT_LOSS_PATTERN IS
-- 	SELECT D.PATTERN_DATE, D.PATTERN_VAL
-- 	FROM ACCOUNT_SERVICE A, ACCOUNT_LOSS_FACTOR B, LOSS_FACTOR_MODEL C, LOSS_FACTOR_PATTERN D
-- 	WHERE A.ACCOUNT_SERVICE_ID = p_ACCOUNT_SERVICE_ID
-- 		AND B.CASE_ID = GA.BASE_CASE_ID
-- 		AND B.ACCOUNT_ID = A.ACCOUNT_ID
-- 		AND B.BEGIN_DATE <= p_SERVICE_DATE
-- 		AND NVL(B.END_DATE, p_SERVICE_DATE) >= p_SERVICE_DATE
-- 		AND C.LOSS_FACTOR_ID = B.LOSS_FACTOR_ID
-- 		AND C.LOSS_FACTOR_TYPE = p_LOSS_FACTOR_TYPE
-- 		AND C.BEGIN_DATE <= p_SERVICE_DATE
-- 		AND NVL(C.END_DATE, p_SERVICE_DATE) >= p_SERVICE_DATE
-- 		AND D.PATTERN_ID = C.PATTERN_ID
-- 	ORDER BY 1;
--
-- CURSOR c_METER_LOSS_PATTERN IS
-- 	SELECT D.PATTERN_DATE, D.PATTERN_VAL
-- 	FROM ACCOUNT_SERVICE A, METER_LOSS_FACTOR B, LOSS_FACTOR_MODEL C, LOSS_FACTOR_PATTERN D
-- 	WHERE A.ACCOUNT_SERVICE_ID = p_ACCOUNT_SERVICE_ID
-- 		AND B.CASE_ID = GA.BASE_CASE_ID
-- 		AND B.METER_ID = A.METER_ID
-- 		AND B.BEGIN_DATE <= p_SERVICE_DATE
-- 		AND NVL(B.END_DATE, p_SERVICE_DATE) >= p_SERVICE_DATE
-- 		AND C.LOSS_FACTOR_ID = B.LOSS_FACTOR_ID
-- 		AND C.LOSS_FACTOR_TYPE = p_LOSS_FACTOR_TYPE
-- 		AND C.BEGIN_DATE <= p_SERVICE_DATE
-- 		AND NVL(C.END_DATE, p_SERVICE_DATE) >= p_SERVICE_DATE
-- 		AND D.PATTERN_ID = C.PATTERN_ID
-- 	ORDER BY 1;
--
-- CURSOR c_EDC_LOSS_PATTERN IS
-- 	SELECT D.PATTERN_DATE, D.PATTERN_VAL
-- 	FROM EDC_LOSS_FACTOR B, LOSS_FACTOR_MODEL C, LOSS_FACTOR_PATTERN D
-- 	WHERE B.EDC_ID = p_EDC_ID
-- 		AND B.CASE_ID = GA.BASE_CASE_ID
-- 		AND B.BEGIN_DATE <= p_SERVICE_DATE
-- 		AND NVL(B.END_DATE, p_SERVICE_DATE) >= p_SERVICE_DATE
-- 		AND C.LOSS_FACTOR_ID = B.LOSS_FACTOR_ID
-- 		AND C.LOSS_FACTOR_TYPE = p_LOSS_FACTOR_TYPE
-- 		AND C.BEGIN_DATE <= p_SERVICE_DATE
-- 		AND NVL(C.END_DATE, p_SERVICE_DATE) >= p_SERVICE_DATE
-- 		AND D.PATTERN_ID = C.PATTERN_ID
-- 	ORDER BY 1;

BEGIN


	IF p_FAULT_CACHE AND NOT (g_TX_LOSS_FACTOR_INDEX.EXISTS(p_ACCOUNT_SERVICE_ID) OR g_DX_LOSS_FACTOR_INDEX.EXISTS(p_ACCOUNT_SERVICE_ID)) THEN
		CACHE_LOSS_FACTOR(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE);
		v_NEED_PATTERN_CACHE := TRUE;
	END IF;

	IF p_FAULT_CACHE AND NOT (g_EDC_TX_LOSS_FACTOR_INDEX.EXISTS(p_EDC_ID) OR g_EDC_DX_LOSS_FACTOR_INDEX.EXISTS(p_EDC_ID)) THEN
		CACHE_EDC_LOSS_FACTOR(GA.BASE_CASE_ID, p_SERVICE_DATE, p_SERVICE_DATE);
		v_NEED_PATTERN_CACHE := TRUE;
	END IF;

	IF v_NEED_PATTERN_CACHE THEN
		CACHE_LOSS_FACTOR_PATTERN;
	END IF;

	IF UPPER(p_LOSS_FACTOR_TYPE) = 'TRANSMISSION' THEN
		v_EDC_PATTERN_ID := GET_TIMED_VALUE(p_EDC_ID, p_SERVICE_DATE, g_EDC_TX_LOSS_FACTOR_INDEX, g_EDC_TX_LOSS_FACTOR_CACHE, v_NO_EDC_DATA_FOUND);
		v_PATTERN_ID :=  GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_TX_LOSS_FACTOR_INDEX, g_TX_LOSS_FACTOR_CACHE, v_NO_DATA_FOUND);
	ELSIF UPPER(p_LOSS_FACTOR_TYPE) = 'DISTRIBUTION' THEN
		v_EDC_PATTERN_ID := GET_TIMED_VALUE(p_EDC_ID, p_SERVICE_DATE, g_EDC_DX_LOSS_FACTOR_INDEX, g_EDC_DX_LOSS_FACTOR_CACHE, v_NO_EDC_DATA_FOUND);
		v_PATTERN_ID :=  GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_DX_LOSS_FACTOR_INDEX, g_DX_LOSS_FACTOR_CACHE, v_NO_DATA_FOUND);
	ELSIF UPPER(p_LOSS_FACTOR_TYPE) = 'UFE' THEN
		v_EDC_PATTERN_ID := GET_TIMED_VALUE(p_EDC_ID, p_SERVICE_DATE, g_EDC_UE_LOSS_FACTOR_INDEX, g_EDC_UE_LOSS_FACTOR_CACHE, v_NO_EDC_DATA_FOUND);
		v_PATTERN_ID :=  GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_UE_LOSS_FACTOR_INDEX, g_UE_LOSS_FACTOR_CACHE, v_NO_DATA_FOUND);
	END IF;

	IF NOT v_NO_EDC_DATA_FOUND THEN
		v_EDC_LOSS_FACTOR := GET_LOSS_PATTERN(v_EDC_PATTERN_ID);
	END IF;

	IF NOT v_NO_DATA_FOUND THEN
		v_LOSS_FACTOR := GET_LOSS_PATTERN(v_PATTERN_ID);
	END IF;

-- LOGS.LOG_DEBUG('GET_LOSS_FACTOR_PATTERN');
--
-- 	SELECT METER_ID
-- 	INTO v_METER_ID
-- 	FROM ACCOUNT_SERVICE
-- 	WHERE ACCOUNT_SERVICE_ID = p_ACCOUNT_SERVICE_ID;
--
-- 	IF v_METER_ID = 0 THEN
-- 		FOR v_ACCOUNT_LOSS_PATTERN IN c_ACCOUNT_LOSS_PATTERN LOOP
-- 			v_LOSS_FACTOR(v_LOSS_FACTOR.COUNT + 1) := v_ACCOUNT_LOSS_PATTERN.PATTERN_VAL;
-- 		END LOOP;
-- 	ELSE
-- 		FOR v_METER_LOSS_PATTERN IN c_METER_LOSS_PATTERN LOOP
-- 			v_LOSS_FACTOR(v_LOSS_FACTOR.COUNT + 1) := v_METER_LOSS_PATTERN.PATTERN_VAL;
-- 		END LOOP;
-- 	END IF;
--
-- 	FOR v_EDC_LOSS_PATTERN IN c_EDC_LOSS_PATTERN LOOP
-- 		v_EDC_LOSS_FACTOR(v_EDC_LOSS_FACTOR.COUNT + 1) := v_EDC_LOSS_PATTERN.PATTERN_VAL;
-- 	END LOOP;
--

	RETURN GET_LOSS_FACTOR_FROM_OPTION(v_LOSS_FACTOR_OPTION, v_LOSS_FACTOR, v_EDC_LOSS_FACTOR);

EXCEPTION
	WHEN OTHERS THEN
		RAISE;
END GET_LOSS_FACTOR_PATTERN;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_LOSS_FACTOR_PATTERN
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_FAULT_CACHE IN BOOLEAN DEFAULT FALSE,
    p_TX_LOSS_FACTOR_PATTERN OUT GA.NUMBER_TABLE,
    p_DX_LOSS_FACTOR_PATTERN OUT GA.NUMBER_TABLE,
    p_UE_LOSS_FACTOR_PATTERN OUT GA.NUMBER_TABLE
	) AS
v_EDC_PATTERN_ID NUMBER(9);
v_PATTERN_ID NUMBER(9);
v_EDC_LOSS_FACTOR GA.NUMBER_TABLE;
v_LOSS_FACTOR GA.NUMBER_TABLE;
v_LOSS_FACTOR_OPTION VARCHAR(16) := GET_EDC_LOSS_FACTOR_OPTION(p_EDC_ID);
v_NO_EDC_DATA_FOUND BOOLEAN;
v_NO_DATA_FOUND BOOLEAN;
v_NEED_PATTERN_CACHE BOOLEAN := FALSE;

BEGIN
	IF p_FAULT_CACHE AND NOT (g_TX_LOSS_FACTOR_INDEX.EXISTS(p_ACCOUNT_SERVICE_ID) OR g_DX_LOSS_FACTOR_INDEX.EXISTS(p_ACCOUNT_SERVICE_ID)) THEN
		CACHE_LOSS_FACTOR(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE);
		v_NEED_PATTERN_CACHE := TRUE;
	END IF;

	IF p_FAULT_CACHE AND NOT (g_EDC_TX_LOSS_FACTOR_INDEX.EXISTS(p_EDC_ID) OR g_EDC_DX_LOSS_FACTOR_INDEX.EXISTS(p_EDC_ID)) THEN
		CACHE_EDC_LOSS_FACTOR(GA.BASE_CASE_ID, p_SERVICE_DATE, p_SERVICE_DATE);
		v_NEED_PATTERN_CACHE := TRUE;
	END IF;

	IF v_NEED_PATTERN_CACHE THEN
		CACHE_LOSS_FACTOR_PATTERN;
	END IF;

    -- TX Loss Pattern
    v_EDC_PATTERN_ID := GET_TIMED_VALUE(p_EDC_ID, p_SERVICE_DATE, g_EDC_TX_LOSS_FACTOR_INDEX, g_EDC_TX_LOSS_FACTOR_CACHE, v_NO_EDC_DATA_FOUND);
    v_PATTERN_ID :=  GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_TX_LOSS_FACTOR_INDEX, g_TX_LOSS_FACTOR_CACHE, v_NO_DATA_FOUND);

    IF NOT v_NO_EDC_DATA_FOUND THEN
        v_EDC_LOSS_FACTOR := GET_LOSS_PATTERN(v_EDC_PATTERN_ID);
    END IF;

    IF NOT v_NO_DATA_FOUND THEN
        v_LOSS_FACTOR := GET_LOSS_PATTERN(v_PATTERN_ID);
    END IF;

    p_TX_LOSS_FACTOR_PATTERN := GET_LOSS_FACTOR_FROM_OPTION(v_LOSS_FACTOR_OPTION, v_LOSS_FACTOR, v_EDC_LOSS_FACTOR);

	-- Reset variables
	v_LOSS_FACTOR.DELETE;
	v_EDC_LOSS_FACTOR.DELETE;

    -- DX Loss Pattern
    v_EDC_PATTERN_ID := GET_TIMED_VALUE(p_EDC_ID, p_SERVICE_DATE, g_EDC_DX_LOSS_FACTOR_INDEX, g_EDC_DX_LOSS_FACTOR_CACHE, v_NO_EDC_DATA_FOUND);
    v_PATTERN_ID :=  GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_DX_LOSS_FACTOR_INDEX, g_DX_LOSS_FACTOR_CACHE, v_NO_DATA_FOUND);

    IF NOT v_NO_EDC_DATA_FOUND THEN
        v_EDC_LOSS_FACTOR := GET_LOSS_PATTERN(v_EDC_PATTERN_ID);
    END IF;

    IF NOT v_NO_DATA_FOUND THEN
        v_LOSS_FACTOR := GET_LOSS_PATTERN(v_PATTERN_ID);
    END IF;

    p_DX_LOSS_FACTOR_PATTERN := GET_LOSS_FACTOR_FROM_OPTION(v_LOSS_FACTOR_OPTION, v_LOSS_FACTOR, v_EDC_LOSS_FACTOR);

    -- Reset variables
	v_LOSS_FACTOR.DELETE;
	v_EDC_LOSS_FACTOR.DELETE;

	-- UE Loss Pattern
    v_EDC_PATTERN_ID := GET_TIMED_VALUE(p_EDC_ID, p_SERVICE_DATE, g_EDC_UE_LOSS_FACTOR_INDEX, g_EDC_UE_LOSS_FACTOR_CACHE, v_NO_EDC_DATA_FOUND);
    v_PATTERN_ID :=  GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_UE_LOSS_FACTOR_INDEX, g_UE_LOSS_FACTOR_CACHE, v_NO_DATA_FOUND);

    IF NOT v_NO_EDC_DATA_FOUND THEN
        v_EDC_LOSS_FACTOR := GET_LOSS_PATTERN(v_EDC_PATTERN_ID);
    END IF;

    IF NOT v_NO_DATA_FOUND THEN
        v_LOSS_FACTOR := GET_LOSS_PATTERN(v_PATTERN_ID);
    END IF;

    p_UE_LOSS_FACTOR_PATTERN := GET_LOSS_FACTOR_FROM_OPTION(v_LOSS_FACTOR_OPTION, v_LOSS_FACTOR, v_EDC_LOSS_FACTOR);

END GET_LOSS_FACTOR_PATTERN;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PRODUCT_ID
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE,
	p_PRODUCT_TYPE IN VARCHAR
	) RETURN NUMBER IS

BEGIN

	IF UPPER(p_PRODUCT_TYPE) = 'REVENUE' THEN
		RETURN GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_REVENUE_PRODUCT_INDEX, g_REVENUE_PRODUCT_CACHE);
	ELSE
		RETURN GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_COST_PRODUCT_INDEX, g_COST_PRODUCT_CACHE);
	END IF;

END GET_PRODUCT_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_LOAD_OBLIGATION_ID
	(
	p_LOAD_OBLIGATION IN LOAD_OBLIGATION%ROWTYPE
	) RETURN NUMBER IS

v_INDEX BINARY_INTEGER;

BEGIN

	v_INDEX := g_LOAD_OBLIGATION_CACHE.FIRST;
	WHILE v_INDEX <= g_LOAD_OBLIGATION_CACHE.LAST LOOP
		IF g_LOAD_OBLIGATION_CACHE(v_INDEX).SC_ID = p_LOAD_OBLIGATION.SC_ID
			AND g_LOAD_OBLIGATION_CACHE(v_INDEX).PSE_ID = p_LOAD_OBLIGATION.PSE_ID
			AND g_LOAD_OBLIGATION_CACHE(v_INDEX).ESP_ID = p_LOAD_OBLIGATION.ESP_ID
			AND g_LOAD_OBLIGATION_CACHE(v_INDEX).EDC_ID = p_LOAD_OBLIGATION.EDC_ID
			AND g_LOAD_OBLIGATION_CACHE(v_INDEX).POOL_ID = p_LOAD_OBLIGATION.POOL_ID
			AND g_LOAD_OBLIGATION_CACHE(v_INDEX).SERVICE_POINT_ID = p_LOAD_OBLIGATION.SERVICE_POINT_ID
			AND g_LOAD_OBLIGATION_CACHE(v_INDEX).SERVICE_ZONE_ID = p_LOAD_OBLIGATION.SERVICE_ZONE_ID
			AND g_LOAD_OBLIGATION_CACHE(v_INDEX).SCHEDULE_GROUP_ID = p_LOAD_OBLIGATION.SCHEDULE_GROUP_ID
			AND g_LOAD_OBLIGATION_CACHE(v_INDEX).OBLIGATION_LOAD_CODE = p_LOAD_OBLIGATION.OBLIGATION_LOAD_CODE THEN
				IF NOT g_LOAD_OBLIGATION_CACHE(v_INDEX).OBLIGATION_INTERVAL = p_LOAD_OBLIGATION.OBLIGATION_INTERVAL OR NOT g_LOAD_OBLIGATION_CACHE(v_INDEX).OBLIGATION_NAME = p_LOAD_OBLIGATION.OBLIGATION_NAME THEN
					UPDATE LOAD_OBLIGATION SET
						OBLIGATION_INTERVAL = p_LOAD_OBLIGATION.OBLIGATION_INTERVAL,
						OBLIGATION_NAME = p_LOAD_OBLIGATION.OBLIGATION_NAME,
						ENTRY_DATE = SYSDATE
					WHERE OBLIGATION_ID = g_LOAD_OBLIGATION_CACHE(v_INDEX).OBLIGATION_ID;
				END IF;
				RETURN g_LOAD_OBLIGATION_CACHE(v_INDEX).OBLIGATION_ID;
		END IF;
		v_INDEX := g_LOAD_OBLIGATION_CACHE.NEXT(v_INDEX);
	END LOOP;

	RETURN PUT_LOAD_OBLIGATION(p_LOAD_OBLIGATION);

END GET_LOAD_OBLIGATION_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SETTLEMENT_COUNT
	(
	p_SERVICE_DATE IN DATE
	) RETURN NUMBER IS

v_COUNT NUMBER(6) := 0;
v_ACCOUNT_SERVICE_ID BINARY_INTEGER;
v_INDEX BINARY_INTEGER;

BEGIN

	IF g_SETTLEMENT_PROFILE_INDEX.COUNT > 0 THEN
		v_ACCOUNT_SERVICE_ID := g_SETTLEMENT_PROFILE_INDEX.FIRST;
		WHILE v_ACCOUNT_SERVICE_ID <= g_SETTLEMENT_PROFILE_INDEX.LAST LOOP
			FOR v_INDEX IN g_SETTLEMENT_PROFILE_INDEX(v_ACCOUNT_SERVICE_ID).START_INDEX..g_SETTLEMENT_PROFILE_INDEX(v_ACCOUNT_SERVICE_ID).STOP_INDEX LOOP
				IF p_SERVICE_DATE BETWEEN g_SETTLEMENT_PROFILE_CACHE(v_INDEX).BEGIN_DATE AND g_SETTLEMENT_PROFILE_CACHE(v_INDEX).END_DATE THEN
					v_COUNT := v_COUNT + 1;
				END IF;
			END LOOP;
		v_ACCOUNT_SERVICE_ID := g_SETTLEMENT_PROFILE_INDEX.NEXT(v_ACCOUNT_SERVICE_ID);
		END LOOP;
	END IF;

	RETURN v_COUNT;

END GET_SETTLEMENT_COUNT;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_SETTLEMENT_CANDIDATES
	(
	p_SERVICE_DATE IN DATE,
	p_CANDIDATES IN OUT NOCOPY GA.ID_TABLE
	) AS

v_XREF_ID BINARY_INTEGER;
v_INDEX BINARY_INTEGER;

BEGIN

	p_CANDIDATES.DELETE;
	IF g_SETTLEMENT_PROFILE_INDEX.COUNT > 0 THEN
		v_XREF_ID := g_SETTLEMENT_PROFILE_INDEX.FIRST;
		WHILE v_XREF_ID <= g_SETTLEMENT_PROFILE_INDEX.LAST LOOP
			FOR v_INDEX IN g_SETTLEMENT_PROFILE_INDEX(v_XREF_ID).START_INDEX..g_SETTLEMENT_PROFILE_INDEX(v_XREF_ID).STOP_INDEX LOOP
				IF p_SERVICE_DATE BETWEEN g_SETTLEMENT_PROFILE_CACHE(v_INDEX).BEGIN_DATE AND g_SETTLEMENT_PROFILE_CACHE(v_INDEX).END_DATE THEN
					p_CANDIDATES(GET_XREF_ACCOUNT_SERVICE_ID(v_XREF_ID)) := g_SETTLEMENT_PROFILE_CACHE(v_INDEX).DATA_VALUE;
				END IF;
			END LOOP;
		v_XREF_ID := g_SETTLEMENT_PROFILE_INDEX.NEXT(v_XREF_ID);
		END LOOP;
	END IF;

END GET_SETTLEMENT_CANDIDATES;
----------------------------------------------------------------------------------------------------
FUNCTION GET_STATION_ID
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER
	) RETURN NUMBER IS

v_INDEX BINARY_INTEGER;

BEGIN

	v_INDEX := g_WEATHER_STATION_CACHE.FIRST;
	WHILE v_INDEX <= g_WEATHER_STATION_CACHE.LAST LOOP
		IF g_WEATHER_STATION_CACHE(v_INDEX).ENTITY_ID = p_ACCOUNT_SERVICE_ID THEN
			RETURN g_WEATHER_STATION_CACHE(v_INDEX).XREF_ID;
		END IF;
		v_INDEX := g_WEATHER_STATION_CACHE.NEXT(v_INDEX);
	END LOOP;

	RETURN g_NOT_ASSIGNED;

END GET_STATION_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_POOL_ID
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_SERVICE_DATE IN DATE
	) RETURN NUMBER IS

BEGIN

	RETURN GET_TIMED_VALUE(p_ACCOUNT_SERVICE_ID, p_SERVICE_DATE, g_POOL_INDEX, g_POOL_CACHE);

END GET_POOL_ID;
----------------------------------------------------------------------------------------------------
FUNCTION GET_IS_AGGREGATE_POOL
	(
	p_POOL_ID IN NUMBER
	) RETURN NUMBER IS

v_INDEX BINARY_INTEGER;

BEGIN

	IF g_IS_AGGREGATE_POOL_CACHE.COUNT > 0 THEN
		v_INDEX := g_IS_AGGREGATE_POOL_CACHE.FIRST;
		WHILE v_INDEX <= g_IS_AGGREGATE_POOL_CACHE.LAST LOOP
			IF g_IS_AGGREGATE_POOL_CACHE(v_INDEX).ID = p_POOL_ID THEN
					RETURN 1;
			END IF;
			v_INDEX := g_IS_AGGREGATE_POOL_CACHE.NEXT(v_INDEX);
		END LOOP;
	END IF;

	RETURN 0;

END GET_IS_AGGREGATE_POOL;
----------------------------------------------------------------------------------------------------
FUNCTION GET_SERVICE_DELIVERY
	(
	p_SERVICE_DELIVERY_ID IN NUMBER
	) RETURN SERVICE_DELIVERY%ROWTYPE IS

v_SERVICE_DELIVERY SERVICE_DELIVERY%ROWTYPE;

BEGIN

	BEGIN
		 SELECT *
		 INTO v_SERVICE_DELIVERY
		 FROM SERVICE_DELIVERY
		 WHERE SERVICE_DELIVERY_ID = p_SERVICE_DELIVERY_ID;

		 RETURN v_SERVICE_DELIVERY;

	EXCEPTION
		WHEN OTHERS THEN
			SELECT g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_UNASSIGNED_CHAR, g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, NULL
			INTO v_SERVICE_DELIVERY FROM DUAL;
			RETURN v_SERVICE_DELIVERY;
	END;

END GET_SERVICE_DELIVERY;
----------------------------------------------------------------------------------------------------
FUNCTION GET_ACCOUNT_SERVICE
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER
	) RETURN ACCOUNT_SERVICE%ROWTYPE IS

v_ACCOUNT_SERVICE ACCOUNT_SERVICE%ROWTYPE;
BEGIN

	BEGIN
		 SELECT *
		 INTO v_ACCOUNT_SERVICE
		 FROM ACCOUNT_SERVICE
		 WHERE ACCOUNT_SERVICE_ID = p_ACCOUNT_SERVICE_ID;

		 RETURN v_ACCOUNT_SERVICE;

	EXCEPTION
		WHEN OTHERS THEN
			SELECT g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, NULL
			INTO v_ACCOUNT_SERVICE FROM DUAL;
			RETURN v_ACCOUNT_SERVICE;
	END;

END GET_ACCOUNT_SERVICE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PROVIDER_SERVICE
	(
	p_PROVIDER_SERVICE_ID IN NUMBER
	) RETURN PROVIDER_SERVICE%ROWTYPE IS

v_PROVIDER_SERVICE PROVIDER_SERVICE%ROWTYPE;
BEGIN

	BEGIN
		 SELECT *
		 INTO v_PROVIDER_SERVICE
		 FROM PROVIDER_SERVICE
		 WHERE PROVIDER_SERVICE_ID = p_PROVIDER_SERVICE_ID;

		 RETURN v_PROVIDER_SERVICE;

	EXCEPTION
		WHEN OTHERS THEN
			SELECT g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, NULL
			INTO v_PROVIDER_SERVICE FROM DUAL;
			RETURN v_PROVIDER_SERVICE;
	END;

END GET_PROVIDER_SERVICE;
----------------------------------------------------------------------------------------------------
PROCEDURE SYNC_ACCOUNT_SERVICE
	(
	p_SERVICE_MODEL IN OUT NOCOPY SERVICE_MODEL_TABLE
	) AS

-- Synchronize the Account Service table with the Service Model.

v_INDEX BINARY_INTEGER;
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

-- Create and Assign an Account Service record for those Service Model entries that do not currently have one.
	IF p_SERVICE_MODEL.COUNT > 0 THEN
		v_INDEX := p_SERVICE_MODEL.FIRST;
		WHILE v_INDEX <= p_SERVICE_MODEL.LAST LOOP
			p_SERVICE_MODEL(v_INDEX).ACCOUNT_SERVICE_ID := GET_ACCOUNT_SERVICE_ID(p_SERVICE_MODEL(v_INDEX).ACCOUNT_ID, p_SERVICE_MODEL(v_INDEX).SERVICE_LOCATION_ID, p_SERVICE_MODEL(v_INDEX).METER_ID, p_SERVICE_MODEL(v_INDEX).AGGREGATE_ID);
			v_INDEX := p_SERVICE_MODEL.NEXT(v_INDEX);
		END LOOP;
	END IF;

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('SYNC_ACCOUNT_SERVICE TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' );
	END IF;

END SYNC_ACCOUNT_SERVICE;
----------------------------------------------------------------------------------------------------
PROCEDURE SYNC_PROVIDER_SERVICE
	(
	p_SERVICE_MODEL IN OUT NOCOPY SERVICE_MODEL_TABLE
	) AS

-- Synchronize the Provider Service table  with the Service Model.

v_INDEX BINARY_INTEGER;
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

-- Create and Assign a Provider Service record for those Service Model entries that do not currently have one.
	IF p_SERVICE_MODEL.COUNT > 0 THEN
		v_INDEX := p_SERVICE_MODEL.FIRST;
		WHILE v_INDEX <= p_SERVICE_MODEL.LAST LOOP
			p_SERVICE_MODEL(v_INDEX).PROVIDER_SERVICE_ID := GET_PROVIDER_SERVICE_ID(p_SERVICE_MODEL(v_INDEX).EDC_ID, p_SERVICE_MODEL(v_INDEX).ESP_ID, p_SERVICE_MODEL(v_INDEX).PSE_ID);
			v_INDEX := p_SERVICE_MODEL.NEXT(v_INDEX);
		END LOOP;
	END IF;

--	IF LOGS.IS_DEBUG_ENABLED THEN
--		LOGS.LOG_DEBUG('SYNC_PROVIDER_SERVICE TIME=' || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_PROVIDER_SERVICE_CACHE.COUNT));
--	END IF;

END SYNC_PROVIDER_SERVICE;
----------------------------------------------------------------------------------------------------
PROCEDURE SYNC_SERVICE_MODEL
	(
	p_SERVICE_MODEL IN OUT NOCOPY SERVICE_MODEL_TABLE,
	p_TRACE_ON IN BOOLEAN
	) AS

-- Synchronize the Service Model.

BEGIN

	SYNC_ACCOUNT_SERVICE(p_SERVICE_MODEL);
	SYNC_PROVIDER_SERVICE(p_SERVICE_MODEL);

END SYNC_SERVICE_MODEL;
----------------------------------------------------------------------------------------------------
PROCEDURE SYNC_AGGREGATE_POOL
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE
	) AS

CURSOR c_AGGREGATE_POOL IS
	SELECT DISTINCT B.EDC_ID, B.EDC_SC_ID "SC_ID", C.PSE_ID, C.PSE_IS_BACKUP_GENERATION "IS_BUG", E.ESP_ID, UPPER(SUBSTR(E.ESP_TYPE,1,1)) "SUPPLY_TYPE", G.SUB_POOL_ID "POOL_ID", 1 "IS_AGGREGATE_POOL"
	FROM INCUMBENT_ENTITY A, ENERGY_DISTRIBUTION_COMPANY B, PURCHASING_SELLING_ENTITY C, PSE_ESP D, ENERGY_SERVICE_PROVIDER E, ESP_POOL F, POOL_SUB_POOL G, POOL H
	WHERE A.INCUMBENT_TYPE = 'EDC'
		AND B.EDC_ID = A.INCUMBENT_ID
		AND D.PSE_ID = C.PSE_ID
		AND E.ESP_ID = D.ESP_ID
		AND F.ESP_ID = E.ESP_ID
		AND G.SUB_POOL_ID = F.POOL_ID
        AND H.POOL_ID = G.POOL_ID
		AND UPPER(H.POOL_CATEGORY) = 'AGGREGATE POOL';

v_PROVIDER_SERVICE_ID NUMBER(9);
v_SERVICE_DELIVERY_ID NUMBER(9);
v_SERVICE_OBLIGATION_ID NUMBER(9);

BEGIN

	IF GA.ENABLE_AGGREGATE_POOL_MODEL THEN
		FOR v_AGGREGATE_POOL IN c_AGGREGATE_POOL LOOP
			v_PROVIDER_SERVICE_ID := GET_PROVIDER_SERVICE_ID(v_AGGREGATE_POOL.EDC_ID, v_AGGREGATE_POOL.ESP_ID, v_AGGREGATE_POOL.PSE_ID);
			v_SERVICE_DELIVERY_ID := CX.GET_SERVICE_DELIVERY_ID(v_AGGREGATE_POOL.POOL_ID, g_NOT_ASSIGNED, g_NOT_ASSIGNED, g_NOT_ASSIGNED, v_AGGREGATE_POOL.SC_ID, v_AGGREGATE_POOL.SUPPLY_TYPE, v_AGGREGATE_POOL.IS_BUG, g_NOT_ASSIGNED, v_AGGREGATE_POOL.IS_AGGREGATE_POOL);
			IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
				LOGS.LOG_DEBUG_DETAIL('SYNC_AGGREGATE_POOL EDC_ID=' || TO_CHAR(v_AGGREGATE_POOL.EDC_ID) || ', ESP_ID=' || TO_CHAR(v_AGGREGATE_POOL.ESP_ID) || ', PSE_ID=' || TO_CHAR(v_AGGREGATE_POOL.PSE_ID) || ', POOL_ID=' || TO_CHAR(v_AGGREGATE_POOL.POOL_ID) || ', PROVIDER_SERVICE_ID=' || TO_CHAR(v_PROVIDER_SERVICE_ID) || ', SERVICE_DELIVERY_ID=' || TO_CHAR(v_SERVICE_DELIVERY_ID));
			END IF;
			v_SERVICE_OBLIGATION_ID := CX.GET_SERVICE_OBLIGATION_ID(p_CAST_CONTEXT, v_PROVIDER_SERVICE_ID, v_SERVICE_DELIVERY_ID);
			IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
				LOGS.LOG_DEBUG_DETAIL('SYNC_AGGREGATE_POOL SERVICE_OBLIGATION_ID=' || TO_CHAR(v_SERVICE_OBLIGATION_ID));
			END IF;
		END LOOP;
	END IF;

END SYNC_AGGREGATE_POOL;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_MODEL_SELECTION_OPTION
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_ACCOUNT_MODEL IN OUT CHAR,
	p_AGGREGATE_MODEL IN OUT CHAR,
	p_METER_MODEL IN OUT CHAR,
	p_IS_EXTERNAL_FORECAST IN OUT CHAR
	) AS

-- Cast Context Account Process Mode: 1 - All, 2 - Aggregate, 3 - Non-Aggregate, 4 - External, 0 - Specific Account.

BEGIN

	SELECT DECODE(p_CAST_CONTEXT.ACCOUNT_PROCESS_MODE, 0, 'AC', 1, 'AC', 3, 'AC', 4, 'AC', '?') INTO p_ACCOUNT_MODEL FROM DUAL;
	SELECT DECODE(p_CAST_CONTEXT.ACCOUNT_PROCESS_MODE, 0, 'AG', 1, 'AG', 2, 'AG', 4, 'AG', '?') INTO p_AGGREGATE_MODEL FROM DUAL;
	SELECT DECODE(p_CAST_CONTEXT.ACCOUNT_PROCESS_MODE, 0, 'ME', 1, 'ME', 3, 'ME', 4, 'ME', '?') INTO p_METER_MODEL FROM DUAL;
	SELECT DECODE(p_CAST_CONTEXT.ACCOUNT_PROCESS_MODE, 4, 1, 0) INTO p_IS_EXTERNAL_FORECAST FROM DUAL;

END GET_MODEL_SELECTION_OPTION;
----------------------------------------------------------------------------------------------------
PROCEDURE SELECT_SERVICE_MODEL
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_SERVICE_MODEL IN OUT NOCOPY SERVICE_MODEL_TABLE
	) AS

-- This procedure is responsible for retrieving/caching all Account Service candidates and their associated
-- Provider Service relationships over the time range of the requested Forecast or Backcast.

v_ACCOUNT_MODEL CHAR(2);
v_AGGREGATE_MODEL CHAR(2);
v_METER_MODEL CHAR(2);
v_IS_EXTERNAL_FORECAST CHAR(1);
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_ACTIVE_ACCOUNTS_ONLY NUMBER := 1;
v_ACCOUNT_STATUSES STRING_TABLE;
BEGIN

	--GET A TABLE OF VALID STATUSES IF NECESSARY.
	IF p_CAST_CONTEXT.ACCOUNT_STATUS_LIST IS NOT NULL THEN
		v_ACTIVE_ACCOUNTS_ONLY := 0;
		UT.STRING_TABLE_FROM_STRING(p_CAST_CONTEXT.ACCOUNT_STATUS_LIST, ',', v_ACCOUNT_STATUSES);
	END IF;

	GET_MODEL_SELECTION_OPTION(p_CAST_CONTEXT, v_ACCOUNT_MODEL, v_AGGREGATE_MODEL, v_METER_MODEL, v_IS_EXTERNAL_FORECAST);

	SELECT SERVICE_MODEL_TYPE(ACCOUNT_BEGIN_DATE, ACCOUNT_END_DATE,
		EDC_BEGIN_DATE, EDC_END_DATE, ESP_BEGIN_DATE, ESP_END_DATE, PSE_BEGIN_DATE, PSE_END_DATE,
		SERVICE_LOCATION_BEGIN_DATE, SERVICE_LOCATION_END_DATE, METER_BEGIN_DATE, METER_END_DATE,
		ACCOUNT_ID, SERVICE_LOCATION_ID, METER_ID, AGGREGATE_ID, EDC_ID, HOLIDAY_SET_ID, A.ESP_ID, POOL_ID, PSE_ID, SERVICE_POINT_ID, WEATHER_STATION_ID,
		IS_EXTERNAL_FORECAST, IS_UFE_PARTICIPANT, IS_CREATE_SETTLEMENT_PROFILE, IS_WHOLESALE, METER_TYPE,
		ACCOUNT_NAME, ACCOUNT_EXTERNAL_IDENTIFIER, METER_NAME, METER_EXTERNAL_IDENTIFIER, 0,0)
	BULK COLLECT INTO p_SERVICE_MODEL
	FROM
		(-- Accounts
         SELECT B.BEGIN_DATE "ACCOUNT_BEGIN_DATE", NVL(B.END_DATE, p_CAST_CONTEXT.END_DATE) "ACCOUNT_END_DATE",
			C.BEGIN_DATE "EDC_BEGIN_DATE", NVL(C.END_DATE, p_CAST_CONTEXT.END_DATE) "EDC_END_DATE",
			D.BEGIN_DATE "ESP_BEGIN_DATE", NVL(D.END_DATE, p_CAST_CONTEXT.END_DATE) "ESP_END_DATE",
			NVL(H.BEGIN_DATE, p_CAST_CONTEXT.BEGIN_DATE) "PSE_BEGIN_DATE", NVL(H.END_DATE, p_CAST_CONTEXT.END_DATE) "PSE_END_DATE",
			E.BEGIN_DATE "SERVICE_LOCATION_BEGIN_DATE", NVL(E.END_DATE, p_CAST_CONTEXT.END_DATE) "SERVICE_LOCATION_END_DATE",
			p_CAST_CONTEXT.BEGIN_DATE "METER_BEGIN_DATE", p_CAST_CONTEXT.END_DATE "METER_END_DATE",
			A.ACCOUNT_ID, E.SERVICE_LOCATION_ID, g_NOT_ASSIGNED "METER_ID", g_NOT_ASSIGNED "AGGREGATE_ID",
			C.EDC_ID, D.ESP_ID, D.POOL_ID, NVL(H.PSE_ID, g_NOT_ASSIGNED) "PSE_ID",
			F.SERVICE_POINT_ID, F.WEATHER_STATION_ID,
			A.IS_EXTERNAL_FORECAST, A.IS_UFE_PARTICIPANT, A.IS_CREATE_SETTLEMENT_PROFILE,
			DECODE(UPPER(SUBSTR(G.SERVICE_POINT_TYPE,1,1)),'W',1,0) "IS_WHOLESALE",
			DECODE(UPPER(SUBSTR(A.ACCOUNT_METER_TYPE,1,1)),'I','I','P') "METER_TYPE",
			A.ACCOUNT_NAME, A.ACCOUNT_EXTERNAL_IDENTIFIER,
			NULL"METER_NAME", NULL "METER_EXTERNAL_IDENTIFIER",
			NVL(EDC.EDC_HOLIDAY_SET_ID, CONSTANTS.NOT_ASSIGNED) "HOLIDAY_SET_ID"
		FROM ACCOUNT A, ACCOUNT_STATUS B, ACCOUNT_STATUS_NAME STATUS_NAME, ACCOUNT_EDC C, ACCOUNT_ESP D, ACCOUNT_SERVICE_LOCATION E, SERVICE_LOCATION F, SERVICE_POINT G, PSE_ESP H, ENERGY_DISTRIBUTION_COMPANY EDC --, ACCOUNT_CALENDAR AC
		WHERE (p_CAST_CONTEXT.ACCOUNT_ID = g_ALL OR A.ACCOUNT_ID = p_CAST_CONTEXT.ACCOUNT_ID) --OR (p_CAST_CONTEXT.REQUEST_MODE = 2 AND A.ACCOUNT_ID IN (SELECT DISTINCT ACCOUNT_ID FROM ACCOUNT_GROUP_ASSIGNMENT WHERE ACCOUNT_GROUP_ID = p_CAST_CONTEXT.ACCOUNT_GROUP_ID)))
			AND A.MODEL_ID = p_CAST_CONTEXT.MODEL_ID
			AND UPPER(SUBSTR(A.ACCOUNT_MODEL_OPTION,1,2)) = v_ACCOUNT_MODEL
            AND A.IS_SUB_AGGREGATE = 0
			AND A.IS_EXTERNAL_FORECAST = DECODE(v_IS_EXTERNAL_FORECAST,1,1,A.IS_EXTERNAL_FORECAST)
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(B.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND STATUS_NAME.STATUS_NAME = B.STATUS_NAME
			AND ((v_ACTIVE_ACCOUNTS_ONLY = 1 AND STATUS_NAME.IS_ACTIVE = 1) OR (B.STATUS_NAME IN (SELECT X.STRING_VAL FROM TABLE(CAST(v_ACCOUNT_STATUSES AS STRING_TABLE)) X)))
			AND C.ACCOUNT_ID = A.ACCOUNT_ID
			AND (p_CAST_CONTEXT.EDC_ID = g_ALL OR C.EDC_ID = p_CAST_CONTEXT.EDC_ID)
			AND C.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(C.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND EDC.EDC_ID = C.EDC_ID
			AND D.ACCOUNT_ID = A.ACCOUNT_ID
			AND (p_CAST_CONTEXT.ESP_ID = g_ALL OR D.ESP_ID = p_CAST_CONTEXT.ESP_ID)
			AND D.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(D.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND E.ACCOUNT_ID = A.ACCOUNT_ID
			AND E.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(E.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND F.SERVICE_LOCATION_ID = E.SERVICE_LOCATION_ID
			AND G.SERVICE_POINT_ID(+) = F.SERVICE_POINT_ID
			AND H.ESP_ID(+) = D.ESP_ID
			AND H.BEGIN_DATE(+) <= p_CAST_CONTEXT.END_DATE AND NVL(H.END_DATE(+), p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND EXISTS (SELECT 1 FROM ACCOUNT_CALENDAR AC
						WHERE AC.ACCOUNT_ID = A.ACCOUNT_ID
						AND AC.CASE_ID = p_CAST_CONTEXT.CALENDAR_CASE_ID
						AND AC.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE
						AND NVL(AC.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
						AND (CALENDAR_TYPE = ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST
					   		OR (p_CAST_CONTEXT.REQUEST_TYPE = GA.BACKCAST_SERVICE AND CALENDAR_TYPE = ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST)))


		-- Aggregate Accounts
		UNION ALL SELECT B.BEGIN_DATE "ACCOUNT_BEGIN_DATE", NVL(B.END_DATE, p_CAST_CONTEXT.END_DATE) "ACCOUNT_END_DATE",
			C.BEGIN_DATE "EDC_BEGIN_DATE", NVL(C.END_DATE,  p_CAST_CONTEXT.END_DATE) "EDC_END_DATE",
			D.BEGIN_DATE "ESP_BEGIN_DATE", NVL(D.END_DATE, p_CAST_CONTEXT.END_DATE) "ESP_END_DATE",
			NVL(H.BEGIN_DATE, p_CAST_CONTEXT.BEGIN_DATE) "PSE_BEGIN_DATE", NVL(H.END_DATE, p_CAST_CONTEXT.END_DATE) "PSE_END_DATE",
			E.BEGIN_DATE "SERVICE_LOCATION_BEGIN_DATE", NVL(E.END_DATE, p_CAST_CONTEXT.END_DATE) "SERVICE_LOCATION_END_DATE",
			p_CAST_CONTEXT.BEGIN_DATE "METER_BEGIN_DATE", p_CAST_CONTEXT.END_DATE "METER_END_DATE",
			A.ACCOUNT_ID, E.SERVICE_LOCATION_ID, g_NOT_ASSIGNED "METER_ID", D.AGGREGATE_ID,
			C.EDC_ID, D.ESP_ID, D.POOL_ID, NVL(H.PSE_ID, g_NOT_ASSIGNED) "PSE_ID",
			F.SERVICE_POINT_ID, F.WEATHER_STATION_ID,
			A.IS_EXTERNAL_FORECAST, NVL(I.IS_UFE_PARTICIPANT, A.IS_UFE_PARTICIPANT) "IS_UFE_PARTICIPANT", A.IS_CREATE_SETTLEMENT_PROFILE,
			DECODE(UPPER(SUBSTR(G.SERVICE_POINT_TYPE,1,1)),'W',1,0) "IS_WHOLESALE",
			DECODE(UPPER(SUBSTR(A.ACCOUNT_METER_TYPE,1,1)),'I','I','P') "METER_TYPE",
			A.ACCOUNT_NAME, A.ACCOUNT_EXTERNAL_IDENTIFIER,
			NULL "METER_NAME", NULL "METER_EXTERNAL_IDENTIFIER",
			NVL(EDC.EDC_HOLIDAY_SET_ID, CONSTANTS.NOT_ASSIGNED) "HOLIDAY_SET_ID"
		FROM ACCOUNT A, ACCOUNT_STATUS B, ACCOUNT_STATUS_NAME STATUS_NAME, ACCOUNT_EDC C, AGGREGATE_ACCOUNT_ESP D, ACCOUNT_SERVICE_LOCATION E, SERVICE_LOCATION F, SERVICE_POINT G, PSE_ESP H, ACCOUNT_UFE_PARTICIPATION I, ENERGY_DISTRIBUTION_COMPANY EDC --, ACCOUNT_CALENDAR AC
		WHERE (p_CAST_CONTEXT.ACCOUNT_ID = g_ALL OR A.ACCOUNT_ID = p_CAST_CONTEXT.ACCOUNT_ID) --OR (p_CAST_CONTEXT.REQUEST_MODE = 2 AND A.ACCOUNT_ID IN (SELECT DISTINCT ACCOUNT_ID FROM ACCOUNT_GROUP_ASSIGNMENT WHERE ACCOUNT_GROUP_ID = p_CAST_CONTEXT.ACCOUNT_GROUP_ID)))
			AND A.MODEL_ID = p_CAST_CONTEXT.MODEL_ID
			AND UPPER(SUBSTR(A.ACCOUNT_MODEL_OPTION,1,2)) = v_AGGREGATE_MODEL
			AND A.IS_EXTERNAL_FORECAST = DECODE(v_IS_EXTERNAL_FORECAST,1,1,A.IS_EXTERNAL_FORECAST)
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(B.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND STATUS_NAME.STATUS_NAME = B.STATUS_NAME
			AND ((v_ACTIVE_ACCOUNTS_ONLY = 1 AND STATUS_NAME.IS_ACTIVE = 1) OR (B.STATUS_NAME IN (SELECT X.STRING_VAL FROM TABLE(CAST(v_ACCOUNT_STATUSES AS STRING_TABLE)) X)))
			AND C.ACCOUNT_ID = A.ACCOUNT_ID
			AND (p_CAST_CONTEXT.EDC_ID = g_ALL OR C.EDC_ID = p_CAST_CONTEXT.EDC_ID)
			AND C.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(C.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND EDC.EDC_ID = C.EDC_ID
			AND D.ACCOUNT_ID = A.ACCOUNT_ID
			AND (p_CAST_CONTEXT.ESP_ID = g_ALL OR D.ESP_ID = p_CAST_CONTEXT.ESP_ID)
			AND D.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(D.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND E.ACCOUNT_ID = A.ACCOUNT_ID
			AND E.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(E.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND F.SERVICE_LOCATION_ID = E.SERVICE_LOCATION_ID
			AND G.SERVICE_POINT_ID(+) = F.SERVICE_POINT_ID
			AND H.ESP_ID(+) = D.ESP_ID
			AND H.BEGIN_DATE(+) <= p_CAST_CONTEXT.END_DATE AND NVL(H.END_DATE(+), p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND I.ACCOUNT_ID(+) = A.ACCOUNT_ID
			AND I.UFE_CODE(+) = p_CAST_CONTEXT.REQUEST_TYPE
			AND EXISTS (SELECT 1 FROM ACCOUNT_CALENDAR AC
						WHERE AC.ACCOUNT_ID = A.ACCOUNT_ID
						AND AC.CASE_ID = p_CAST_CONTEXT.CALENDAR_CASE_ID
						AND AC.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE
						AND NVL(AC.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
						AND (CALENDAR_TYPE = ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST
					   		OR (p_CAST_CONTEXT.REQUEST_TYPE = GA.BACKCAST_SERVICE AND CALENDAR_TYPE = ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST)))


		-- Meters
		UNION ALL SELECT B.BEGIN_DATE "ACCOUNT_BEGIN_DATE", NVL(B.END_DATE, p_CAST_CONTEXT.END_DATE) "ACCOUNT_END_DATE",
			C.BEGIN_DATE "EDC_BEGIN_DATE", NVL(C.END_DATE, p_CAST_CONTEXT.END_DATE) "EDC_END_DATE",
			D.BEGIN_DATE "ESP_BEGIN_DATE", NVL(D.END_DATE, p_CAST_CONTEXT.END_DATE) "ESP_END_DATE",
			NVL(H.BEGIN_DATE, p_CAST_CONTEXT.BEGIN_DATE) "PSE_BEGIN_DATE", NVL(H.END_DATE, p_CAST_CONTEXT.END_DATE) "PSE_END_DATE",
			E.BEGIN_DATE "SERVICE_LOCATION_BEGIN_DATE", NVL(E.END_DATE, p_CAST_CONTEXT.END_DATE) "SERVICE_LOCATION_END_DATE",
			NVL(I.BEGIN_DATE, p_CAST_CONTEXT.BEGIN_DATE) "METER_BEGIN_DATE", NVL(I.END_DATE, p_CAST_CONTEXT.END_DATE) "METER_END_DATE",
			A.ACCOUNT_ID, E.SERVICE_LOCATION_ID, J.METER_ID, g_NOT_ASSIGNED "AGGREGATE_ID",
			C.EDC_ID, D.ESP_ID, D.POOL_ID, NVL(H.PSE_ID, g_NOT_ASSIGNED) "PSE_ID",
			F.SERVICE_POINT_ID, F.WEATHER_STATION_ID,
			A.IS_EXTERNAL_FORECAST, A.IS_UFE_PARTICIPANT, A.IS_CREATE_SETTLEMENT_PROFILE,
			DECODE(UPPER(SUBSTR(G.SERVICE_POINT_TYPE,1,1)),'W',1,0) "IS_WHOLESALE",
			DECODE(UPPER(SUBSTR(J.METER_TYPE,1,1)),'I','I','P') "METER_TYPE",
			A.ACCOUNT_NAME, A.ACCOUNT_EXTERNAL_IDENTIFIER,
			J.METER_NAME, J.METER_EXTERNAL_IDENTIFIER,
			NVL(EDC.EDC_HOLIDAY_SET_ID, CONSTANTS.NOT_ASSIGNED) "HOLIDAY_SET_ID"
		FROM ACCOUNT A, ACCOUNT_STATUS B, ACCOUNT_STATUS_NAME STATUS_NAME, ACCOUNT_EDC C, ACCOUNT_ESP D, ACCOUNT_SERVICE_LOCATION E, SERVICE_LOCATION F, SERVICE_POINT G, PSE_ESP H, SERVICE_LOCATION_METER I, METER J, ACCOUNT_STATUS_NAME MSN, ENERGY_DISTRIBUTION_COMPANY EDC --, METER_CALENDAR MC
		WHERE (p_CAST_CONTEXT.ACCOUNT_ID = g_ALL OR A.ACCOUNT_ID = p_CAST_CONTEXT.ACCOUNT_ID) --OR (p_CAST_CONTEXT.REQUEST_MODE = 2 AND A.ACCOUNT_ID IN (SELECT DISTINCT ACCOUNT_ID FROM ACCOUNT_GROUP_ASSIGNMENT WHERE ACCOUNT_GROUP_ID = p_CAST_CONTEXT.ACCOUNT_GROUP_ID)))
			AND UPPER(SUBSTR(A.ACCOUNT_MODEL_OPTION,1,2)) = v_METER_MODEL
            AND A.IS_SUB_AGGREGATE = 0
			AND B.ACCOUNT_ID = A.ACCOUNT_ID
			AND B.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(B.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND STATUS_NAME.STATUS_NAME = B.STATUS_NAME
			AND ((v_ACTIVE_ACCOUNTS_ONLY = 1 AND STATUS_NAME.IS_ACTIVE = 1) OR (B.STATUS_NAME IN (SELECT X.STRING_VAL FROM TABLE(CAST(v_ACCOUNT_STATUSES AS STRING_TABLE)) X)))
			AND C.ACCOUNT_ID = A.ACCOUNT_ID
			AND (p_CAST_CONTEXT.EDC_ID = g_ALL OR C.EDC_ID = p_CAST_CONTEXT.EDC_ID)
			AND A.IS_EXTERNAL_FORECAST = DECODE(v_IS_EXTERNAL_FORECAST,1,1,A.IS_EXTERNAL_FORECAST)
			AND C.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(C.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND EDC.EDC_ID = C.EDC_ID
			AND D.ACCOUNT_ID = A.ACCOUNT_ID
			AND (p_CAST_CONTEXT.ESP_ID = g_ALL OR D.ESP_ID = p_CAST_CONTEXT.ESP_ID)
			AND D.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(D.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND E.ACCOUNT_ID = A.ACCOUNT_ID
			AND E.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE AND NVL(E.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND F.SERVICE_LOCATION_ID = E.SERVICE_LOCATION_ID
			AND G.SERVICE_POINT_ID(+) = F.SERVICE_POINT_ID
			AND H.ESP_ID(+) = D.ESP_ID
			AND H.BEGIN_DATE(+) <= p_CAST_CONTEXT.END_DATE AND NVL(H.END_DATE(+), p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND I.SERVICE_LOCATION_ID = E.SERVICE_LOCATION_ID
			AND I.BEGIN_DATE(+) <= p_CAST_CONTEXT.END_DATE AND NVL(I.END_DATE(+), p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND J.METER_ID = I.METER_ID
			AND A.MODEL_ID = p_CAST_CONTEXT.MODEL_ID
			AND MSN.STATUS_NAME = J.METER_STATUS
			AND MSN.IS_ACTIVE = 1
			AND EXISTS (SELECT 1 FROM METER_CALENDAR MC
						WHERE MC.METER_ID = J.METER_ID
						AND MC.CASE_ID = p_CAST_CONTEXT.CALENDAR_CASE_ID
						AND MC.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE
						AND NVL(MC.END_DATE, p_CAST_CONTEXT.END_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
						AND (CALENDAR_TYPE = ACCOUNTS_METERS.c_CALENDAR_TYPE_FORECAST
					   		OR (p_CAST_CONTEXT.REQUEST_TYPE = GA.BACKCAST_SERVICE AND CALENDAR_TYPE = ACCOUNTS_METERS.c_CALENDAR_TYPE_BACKCAST)))


            ) A, ENERGY_SERVICE_PROVIDER B
	WHERE B.ESP_ID = A.ESP_ID
		AND UPPER(SUBSTR(B.ESP_STATUS,1,1)) = 'A'
		AND (p_CAST_CONTEXT.ESP_IS_CERTIFIED = g_NOT_ASSIGNED OR UPPER(SUBSTR(B.ESP_TYPE,1,1)) = 'C');

	IF p_CAST_CONTEXT.TRACE_ON = 1 THEN
		LOGS.LOG_DEBUG('SELECT_SERVICE_MODEL ELAPSED TIME='  || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(p_SERVICE_MODEL.COUNT));
	END IF;

END SELECT_SERVICE_MODEL;
----------------------------------------------------------------------------------------------------
PROCEDURE TRACE_SERVICE_MODEL
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_SERVICE_MODEL IN SERVICE_MODEL_TABLE
	) AS

BEGIN

	IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
		FOR v_INDEX IN p_SERVICE_MODEL.FIRST..p_SERVICE_MODEL.LAST LOOP
			LOGS.LOG_DEBUG_DETAIL('TRACE_SERVICE_MODEL INDEX=' || v_INDEX);
			LOGS.LOG_DEBUG_DETAIL('ACCOUNT_NAME=' || p_SERVICE_MODEL(v_INDEX).ACCOUNT_NAME || ', ACCOUNT_ID=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).ACCOUNT_ID) || ', AGGREGATE_ID=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).AGGREGATE_ID));
			LOGS.LOG_DEBUG_DETAIL('EDC_ID=' || p_SERVICE_MODEL(v_INDEX).EDC_ID || ', BEGIN_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).EDC_BEGIN_DATE)  || ', END_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).EDC_END_DATE));
			LOGS.LOG_DEBUG_DETAIL('ESP_ID=' || p_SERVICE_MODEL(v_INDEX).ESP_ID || ', BEGIN_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).ESP_BEGIN_DATE)  || ', END_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).ESP_END_DATE));
			LOGS.LOG_DEBUG_DETAIL('PSE_ID=' || p_SERVICE_MODEL(v_INDEX).PSE_ID || ', BEGIN_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).PSE_BEGIN_DATE)  || ', END_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).PSE_END_DATE));
			LOGS.LOG_DEBUG_DETAIL('SERVICE_LOCATION_ID=' || p_SERVICE_MODEL(v_INDEX).SERVICE_LOCATION_ID || ', BEGIN_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).SERVICE_LOCATION_BEGIN_DATE)  || ', END_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).SERVICE_LOCATION_END_DATE));
			LOGS.LOG_DEBUG_DETAIL('METER_NAME=' || p_SERVICE_MODEL(v_INDEX).METER_NAME || ', METER_ID=' || p_SERVICE_MODEL(v_INDEX).METER_ID || ', BEGIN_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).METER_BEGIN_DATE)  || ', END_DATE=' || TO_CHAR(p_SERVICE_MODEL(v_INDEX).METER_END_DATE));
			LOGS.LOG_DEBUG_DETAIL('POOL_ID=' || p_SERVICE_MODEL(v_INDEX).POOL_ID || ', SERVICE_POINT_ID=' || p_SERVICE_MODEL(v_INDEX).SERVICE_POINT_ID || ', STATION_ID=' || p_SERVICE_MODEL(v_INDEX).STATION_ID);
			LOGS.LOG_DEBUG_DETAIL('IS_EXTERNAL_FORECAST='  || p_SERVICE_MODEL(v_INDEX).IS_EXTERNAL_FORECAST || ', IS_UFE_PARTICIPANT=' || p_SERVICE_MODEL(v_INDEX).IS_UFE_PARTICIPANT || ', IS_CREATE_SETTLEMENT_PROFILE=' || p_SERVICE_MODEL(v_INDEX).IS_CREATE_SETTLEMENT_PROFILE);
			LOGS.LOG_DEBUG_DETAIL('IS_WHOLESALE='  || p_SERVICE_MODEL(v_INDEX).IS_WHOLESALE || ', METER_TYPE=' || p_SERVICE_MODEL(v_INDEX).METER_TYPE);
			LOGS.LOG_DEBUG_DETAIL('ACCOUNT_SERVICE_ID='  || p_SERVICE_MODEL(v_INDEX).ACCOUNT_SERVICE_ID || ', PROVIDER_SERVICE_ID=' || p_SERVICE_MODEL(v_INDEX).PROVIDER_SERVICE_ID);
		END LOOP;
	END IF;

END TRACE_SERVICE_MODEL;
----------------------------------------------------------------------------------------------------
PROCEDURE FILL_SERVICE_ACCOUNTS
	(
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_RUN_MODE IN NUMBER,
	p_TRACE_ON IN NUMBER DEFAULT 0,
	p_APPLICATION_METHOD IN CHAR DEFAULT 'A'
	) AS

v_SERVICE_DATE DATE := p_BEGIN_DATE;
v_SERVICE_ACCOUNTS NUMBER(12) := 0;

BEGIN

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('ACCOUNT_SERVICE_ID=' || TO_CHAR(p_ACCOUNT_SERVICE_ID));
		LOGS.LOG_DEBUG('BEGIN_DATE=' || TO_CHAR(p_BEGIN_DATE));
		LOGS.LOG_DEBUG('END_DATE=' || TO_CHAR(p_END_DATE));
		LOGS.LOG_DEBUG('RUN_MODE=' || TO_CHAR(p_RUN_MODE));
	END IF;

	v_SERVICE_DATE := p_BEGIN_DATE;
	WHILE v_SERVICE_DATE <= p_END_DATE LOOP
		v_SERVICE_ACCOUNTS := GET_AGGREGATE_SERVICE_ACCOUNTS(p_ACCOUNT_SERVICE_ID, v_SERVICE_DATE, v_SERVICE_ACCOUNTS, p_RUN_MODE, p_APPLICATION_METHOD);
		IF p_RUN_MODE = GA.DAY_MODE THEN
			v_SERVICE_DATE := v_SERVICE_DATE + 1;
		ELSIF p_RUN_MODE = GA.WEEK_MODE THEN
			v_SERVICE_DATE := v_SERVICE_DATE + 7;
		ELSIF p_RUN_MODE = GA.MONTH_MODE THEN
			v_SERVICE_DATE := ADD_MONTHS(v_SERVICE_DATE,1);
		END IF;
	END LOOP;

END FILL_SERVICE_ACCOUNTS;
----------------------------------------------------------------------------------------------------
PROCEDURE TEST_ENROLLMENT
	(
	p_SERVICE_ACCOUNTS IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_RUN_MODE IN NUMBER,
	p_APPLICATION_METHOD IN CHAR DEFAULT 'A'
	) AS

v_INDEX BINARY_INTEGER;
v_IDS ID_TABLE := ID_TABLE();
v_LAST_LOG_LEVEL NUMBER(3);
BEGIN

	v_LAST_LOG_LEVEL := LOGS.CURRENT_LOG_LEVEL;
	LOGS.SET_CURRENT_LOG_LEVEL(LOGS.c_LEVEL_DEBUG);

	SELECT ID_TYPE(ACCOUNT_SERVICE_ID) BULK COLLECT INTO v_IDS FROM ACCOUNT_SERVICE WHERE AGGREGATE_ID > 0;

	CACHE_SERVICE_ACCOUNTS(p_BEGIN_DATE, p_END_DATE);

	v_INDEX := v_IDS.FIRST;
	WHILE v_INDEX <= v_IDS.LAST LOOP
		FILL_SERVICE_ACCOUNTS(v_IDS(v_INDEX).ID, p_BEGIN_DATE, p_END_DATE, p_RUN_MODE, NULL, p_APPLICATION_METHOD);
		v_INDEX := v_IDS.NEXT(v_INDEX);
	END LOOP;

	LOGS.SET_CURRENT_LOG_LEVEL(v_LAST_LOG_LEVEL);

EXCEPTION
	WHEN OTHERS THEN
		LOGS.SET_CURRENT_LOG_LEVEL(v_LAST_LOG_LEVEL);
		ERRS.LOG_AND_RAISE();

END TEST_ENROLLMENT;
----------------------------------------------------------------------------------------------------
END CX;
/

