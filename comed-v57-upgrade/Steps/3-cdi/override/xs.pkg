CREATE OR REPLACE PACKAGE XS AS
--Revision $Revision: 1.112 $

-- External Stub Package.
FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE IMPORT_SYSTEM_LOAD
    (
	p_REQUEST_TYPE IN CHAR,
	p_SYSTEM_LOAD_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_REQUESTOR IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE IMPORT_ENROLLMENT
    (
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE EXPORT_BILLING
    (
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATEMENT_TYPE IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_SAMPLE_INTERVAL_USAGE
	(
	p_SAMPLE_NAME IN VARCHAR,
	p_METER_NUMBER IN VARCHAR,
	p_ACCOUNT_NUMBER IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_SAMPLE_INTERVAL_USAGE
	(
	p_SAMPLE_NAME IN VARCHAR,
	p_METER_NUMBER IN VARCHAR,
	p_ACCOUNT_NUMBER IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN NUMBER,
	p_STATUS OUT NUMBER,
	p_USAGE IN OUT NOCOPY USAGE_TABLE
	);

PROCEDURE EXPORT_MARKET_PRICES
	(
	p_MARKET_PRICE_IDS IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_EXTERNAL_BILLED_USAGE
	(
	p_METER_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_AGGREGATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_EXTERNAL_INTERVAL_USAGE
	(
	p_METER_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_AGGREGATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE IMPORT_EXPORT_TRANSACTION
	(
	p_OPERATION IN VARCHAR,
	p_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE CACHE_USAGE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	) ;

PROCEDURE CACHE_USAGE
	(
	p_ESP_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE CACHE_USAGE
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_AGGREGATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE CACHE_USAGE
	(
	p_SERVICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER
	) ;

PROCEDURE CACHE_CONSUMPTION
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	) ;

PROCEDURE CACHE_CONSUMPTION
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_AGGREGATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE CACHE_INTERVAL_CONSUMPTION
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE RELEASE_CACHE;

PROCEDURE RELEASE_USAGE;

PROCEDURE RELEASE_USAGE
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_AGGREGATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	);

PROCEDURE RELEASE_USAGE
	(
	p_SERVICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) ;

PROCEDURE RELEASE_CONSUMPTION;

PROCEDURE RELEASE_CONSUMPTION
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_AGGREGATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	);

PROCEDURE RELEASE_INTERVAL_CONSUMPTION;

PROCEDURE AGGREGATE_CONSUMPTION
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE RUN_CACHE_REQUEST
	(
	p_REQUEST_TYPE IN VARCHAR,
	p_INTERVAL_USAGE IN NUMBER,
	p_PERIOD_CONSUMPTION IN NUMBER,
	p_AGGREGATE_CONSUMPTION IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_RUN_NOW IN NUMBER,
	p_RUN_AT IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE POST_ALLOCATION_REQUEST
	(
	p_EDC_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_APPLY_UFE IN NUMBER,
	p_REQUESTOR IN VARCHAR,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE RUN_ANCILLARY_SERVICES
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SERVICE_IDS IN VARCHAR,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_ACCOUNT_USAGE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_ACCOUNT_IDENT IN ACCOUNT_IDENT_TABLE,
	p_ACCOUNT_USAGE IN OUT ACCOUNT_USAGE_TABLE,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_SERVICE_VALIDATION
	(
	p_REQUEST_TYPE IN VARCHAR,
	p_SERVICE_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SERVICE_IDENT IN SERVICE_IDENT_TABLE,
	p_SERVICE_VALIDATION IN OUT SERVICE_VALIDATION_TABLE,
	p_STATUS OUT NUMBER
	);

PROCEDURE CALCULATE_WEATHER_PARAMETER
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CATEGORY IN VARCHAR,
	p_PARAMETER_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUBLISH_OBLIGATION
	(
	p_REQUEST_TYPE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_CAST_AS_OF_DATE IN DATE,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_EXTERNAL_METER_DATA
	(
	p_METER_IDENTIFIER IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_MACHINE_NAME IN VARCHAR,
	p_USER_NAME IN VARCHAR,
	p_METER_VALUES IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE IMPORT_SUB_STATIONS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SRC_AS_OF_DATE IN DATE,
	p_TRG_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE COMPUTE_COMPONENT_CHARGES
	(
	p_CONTRACT_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_STATEMENT_TYPE IN NUMBER,
	p_CHARGE_ID IN NUMBER,
	p_COMPONENT IN COMPONENT%ROWTYPE,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
    p_ENTITY_ID IN NUMBER
	);

PROCEDURE GET_COMPONENT_CHARGES
	(
	p_BILLING_STATEMENT IN OUT BILLING_STATEMENT%ROWTYPE,
	p_WRITE_BILLING_STATEMENT OUT BOOLEAN
	);

PROCEDURE PUT_TAXED_COMPONENT_CHARGES
	(
	p_WORK_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER,
	p_CHARGE_ID IN NUMBER,
	p_SOMETHING_DONE OUT BOOLEAN
	);

PROCEDURE GET_CHARGE_DETAIL
	(
	p_CALLING_MODULE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
    p_CHARGE_VIEW_TYPE IN VARCHAR2,
	p_ENTITY_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER,
	p_WORK_ID IN NUMBER,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_BAND_KEYWORD OUT VARCHAR,
	p_HAS_SUBTOTALS OUT NUMBER,
    p_SHOW_BILL_AMOUNT IN NUMBER,
    p_SHOW_CHARGE_AMOUNT IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_CHARGE_KEY_COLUMNS
	(
	p_CALLING_MODULE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
    p_CHARGE_VIEW_TYPE IN VARCHAR2,
	p_ENTITY_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER,
	p_KEY_COLUMNS OUT VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_DISPUTE_AMOUNT
	(
	p_CALLING_MODULE IN VARCHAR2,
	p_MODEL_ID IN NUMBER,
	p_CHARGE_VIEW_TYPE IN VARCHAR2,
	p_ENTITY_ID IN NUMBER,
	p_PRODUCT_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER,
	p_STATEMENT_TYPE IN NUMBER,
	p_STATEMENT_STATE IN NUMBER,
	p_STATEMENT_DATE IN DATE,
	p_STATEMENT_END_DATE IN DATE,
	p_DISPUTE_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_CHARGE_AMOUNT OUT NUMBER,
	p_BILL_AMOUNT OUT NUMBER
	);

PROCEDURE GET_CHARGE_MAX_BANDS
	(
	p_CALLING_MODULE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PSE_ID IN NUMBER,
	p_PRODUCT_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER,
	p_STATEMENT_TYPE IN VARCHAR,
	p_STATEMENT_STATE IN NUMBER,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_BAND_KEYWORD IN VARCHAR,
	p_NUM_BANDS OUT NUMBER
	);

FUNCTION COMPONENT_IS_TX_CHARGE
	(
	p_CALLING_MODULE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER
    ) RETURN NUMBER;

FUNCTION GET_TX_SERVICE_TYPE
	(
	p_CALLING_MODULE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER
    ) RETURN VARCHAR;

PROCEDURE GET_TX_CHARGES_FOR_REPORT
	(
	p_CALLING_MODULE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PSE_ID IN NUMBER,
	p_PRODUCT_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER,
	p_STATEMENT_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
    p_CHARGE_ID IN NUMBER
    );

PROCEDURE GET_CHARGES_FOR_REPORT
	(
	p_CALLING_MODULE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PSE_ID IN NUMBER,
	p_PRODUCT_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER,
	p_STATEMENT_TYPE IN NUMBER,
	p_STATEMENT_STATE IN NUMBER,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
    p_COMPONENT_NAME OUT VARCHAR,
    p_USE_NORMAL_DETAIL OUT NUMBER,
    p_HEADER_ROWS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
    );

PROCEDURE GET_INVOICE_LINE_ITEMS
	(
	p_ENTITY_ID IN NUMBER,
	p_ENTITY_TYPE IN VARCHAR2,
	p_STATEMENT_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
    p_LINE_ITEM_OPTION IN VARCHAR2,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE UNROLL_INVOICE_LINE_ITEM
	(
    p_ENTITY_ID IN NUMBER,
    p_ENTITY_TYPE IN VARCHAR2,
    p_AS_OF_DATE IN DATE,
    p_INVOICE_LINE_ITEM IN INVOICE_LINE_ITEM%ROWTYPE,
    p_PRODUCT_COMPONENT_PAIRS OUT VARCHAR2
	);

PROCEDURE GET_INVOICE_REPORT_RECORDS
	(
    p_INVOICE_CATEGORY IN VARCHAR,
    p_INVOICE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
    p_SOMETHING_DONE IN OUT BOOLEAN,
	p_CURSOR IN OUT GA.REFCURSOR
    );

PROCEDURE DATA_EXCHANGE_ENTITY_LIST
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_ENTITY_LABEL OUT VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DATA_EXCHANGE
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN CHAR,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE DATA_IMPORT_CHUNK
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_DATA_EXCHANGE_NAME IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN CHAR,
	p_IMPORT_FILE_PATH IN VARCHAR,
	p_IMPORT_FILE IN CLOB,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE GET_DEFAULT_SYSTEM_ACTION
	(
	p_CONTEXT_ID IN NUMBER,
    p_CONTEXT_TYPE IN VARCHAR,
	p_ACTION_TYPE IN VARCHAR,
    p_MODULE_NAME IN VARCHAR,
	p_ACTION_ID OUT NUMBER,
    p_STATUS OUT NUMBER
	);

PROCEDURE DATA_IMPORT
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN CHAR,
	p_RECORD_DELIMITER IN CHAR,
	p_RECORDS IN VARCHAR,
	p_FILE_PATH IN VARCHAR,
	p_LAST_TIME IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE DATA_EXPORT
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN CHAR,
    p_FILE OUT CLOB,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE BID_OFFER_SUBMIT
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_ACTION IN VARCHAR,
	p_IS_TEST_MODE IN NUMBER,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN CHAR,
	p_SUBMIT_HOURS IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE GET_BID_OFFER_SUBMIT_WARNING
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_ACTION IN VARCHAR,
	p_IS_TEST_MODE IN NUMBER,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN CHAR,
	p_SUBMIT_HOURS IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR,
	p_CONTINUE_BUTTON_CAPTION OUT VARCHAR,
	p_CANCEL_BUTTON_CAPTION OUT VARCHAR,
	p_MUST_CANCEL_SUBMIT OUT NUMBER
	);

PROCEDURE GET_BID_OFFER_FILL_WARNING
    (
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_EXPIRATION_DATE IN DATE,
	p_DAY_NAME IN CHAR,
	p_BEGIN_HOUR IN NUMBER,
	p_END_HOUR IN NUMBER,
	p_PRICE_QUANTITY_PAIRS IN VARCHAR,
	p_TEMPLATE_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
    p_MESSAGE OUT VARCHAR2,
    p_CONTINUE_BUTTON_CAPTION OUT VARCHAR,
	p_CANCEL_BUTTON_CAPTION OUT VARCHAR,
	p_MUST_CANCEL_SUBMIT OUT NUMBER
  );

PROCEDURE GET_SCHEDULING_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
    p_TIME_ZONE IN VARCHAR2,
    p_NOTUSED_ID1 IN NUMBER,
    p_NOTUSED_ID2 IN NUMBER,
    p_NOTUSED_ID3 IN NUMBER,
	p_REPORT_NAME IN VARCHAR2,
    p_REPORT_FILTERS IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_CAST_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_SCENARIO_ID IN NUMBER,
    p_NOTUSED_ID1 IN NUMBER,
    p_NOTUSED_ID2 IN NUMBER,
	p_REPORT_NAME IN VARCHAR2,
    p_REPORT_FILTERS IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_DB_SYSDATE
	(
	p_TIME_ZONE IN VARCHAR,
	p_SYSDATE OUT DATE
	);

PROCEDURE PJM_EXPORT_DATA_MISC
	(
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_AS_OF_DATE IN DATE,
--@@Begin Implementation Override --
	p_CURSOR IN OUT GA.REFCURSOR,
--@@End Implementation Override --
	p_SOMETHING_DONE IN OUT BOOLEAN
	);

FUNCTION GET_ANC_SVC_TOTAL_ALLOCATION
	(
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE
	) RETURN NUMBER;

PROCEDURE PUT_ANC_SVC_TOTAL_ALLOCATION
	(
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_TOTAL_VAL IN NUMBER
	);

PROCEDURE SEED_ANC_SVC_ALLOCATION_NAMES
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_GAS_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_REPORT_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_REPORT_NAME IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE UPDATE_USAGE_FACTOR
	(
	p_CALENDAR_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_ACTUAL_USAGE IN NUMBER,
	p_FACTOR_IS_SEASONAL IN CHAR,
	p_YEARS_TO_APPLY IN NUMBER
	);

PROCEDURE CUSTOM_FORMULA_FUNCTION_DATES
	(
    p_FUNCTION_NAME IN VARCHAR2,
    p_BEGIN_DATE IN DATE,
    p_END_DATE IN DATE,
    p_OUT_BEGIN_DATE OUT DATE,
    p_OUT_END_DATE OUT DATE
    );

PROCEDURE CUSTOM_FORMULA_FUNCTION_SELECT
	(
    p_FUNCTION_NAME IN VARCHAR2,
    p_COLUMN_NAME IN VARCHAR2,
    p_OUT_SELECT OUT VARCHAR2
    );

PROCEDURE GET_PROFILING_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_REPORT_NAME IN VARCHAR,
	p_OPTIONAL_PARAMETER IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL_FORMAT IN VARCHAR,
	p_PROFILE_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_LOAD_PROFILING_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_REPORT_TYPE IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_PROFILE_ID IN NUMBER,
	p_SEASON_DAY_TYPE_NUM IN NUMBER,
	p_NOTUSED_ID IN NUMBER,
	p_REPORT_NAME IN VARCHAR2,
	p_FILTERS IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE UPDATE_CUSTOMER_CONSUMPTION
	(
	p_OLD_CUSTOMER_ID IN NUMBER,
	p_OLD_BEGIN_DATE IN DATE,
	p_OLD_END_DATE IN DATE,
	p_OLD_BILL_CODE IN CHAR,
	p_OLD_CONSUMPTION_CODE IN CHAR,
	p_OLD_RECEIVED_DATE  IN DATE,
	p_END_DATE IN DATE,
	p_CONSUMPTION_CODE IN CHAR,
	p_IGNORE_CONSUMPTION IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_QUOTE_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_REPORT_TYPE IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_QUOTE_ID IN NUMBER,
	p_POS_EVALUATION_ID IN NUMBER,
	p_SCREEN_ID IN NUMBER,
	p_REPORT_NAME IN VARCHAR2,
	p_FILTERS IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_SCHEDULER_TREE_FIELDS
	(
	p_SYSTEM_VIEW_NAME IN VARCHAR2,
	p_REPORT_NAME IN VARCHAR2,
	p_SQL_SELECT OUT VARCHAR2,
	p_SQL_FROM OUT VARCHAR2,
	p_SQL_WHERE OUT VARCHAR2
    );

PROCEDURE GET_SCHEDULER_TREE_FILTER
	(
	p_SYSTEM_VIEW_NAME IN VARCHAR2,
	p_REPORT_NAME IN VARCHAR2,
	p_SQL_FROM OUT VARCHAR2,
	p_SQL_WHERE OUT VARCHAR2
    );

PROCEDURE GET_MARKET_PRICE_TREE
	(
	p_INTERVAL IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_PROFILE_FROM_TO_DATES
	(
	p_PROFILE_ID IN NUMBER,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_FROM_DATE OUT DATE,
	p_TO_DATE OUT DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_LOAD_PROFILE_POINTS
	(
	p_PROFILE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_ALL_DATES IN NUMBER := 0,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_POINT_INDEX IN NUMBER := 1,  --g_DEFAULT_POINT_INDEX,
	p_ALL_INDEXES IN NUMBER := 0,
	p_DAY_SELECTION IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

FUNCTION PROFILE_POINT_FOR_INDEX
	(
	p_PROFILE_ID IN NUMBER,
	p_POINT_INDEX IN NUMBER,
	p_POINT_DATE IN DATE,
	p_AS_OF_DATE IN DATE
	) RETURN NUMBER;

PROCEDURE GET_DAY_TYPE_PROFILE_POINTS
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROFILE_ID IN NUMBER,
	p_HISTORICAL_BEGIN_DATE IN DATE,
	p_HISTORICAL_END_DATE IN DATE,
	p_PROFILE_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_PROFILE_POINT IN OUT NOCOPY PROFILE_POINT_TABLE
	);

PROCEDURE GET_PROFILE_POINTS_TABLE
	(
	p_PROFILE_ID IN NUMBER,
	p_POINT_INDEX IN NUMBER,
	p_CUT_HISTORICAL_BEGIN_DATE IN DATE,
	p_CUT_HISTORICAL_END_DATE IN DATE,
	p_PROFILE_AS_OF_DATE IN DATE,
	p_PROFILE_POINT IN OUT NOCOPY PROFILE_POINT_TABLE
	);

PROCEDURE DAY_PROFILE
	(
	p_PROFILE_ID IN NUMBER,
	p_POINT_INDEX IN NUMBER := 1,  --g_DEFAULT_POINT_INDEX,
	p_CUT_BEGIN_DATE IN DATE,
	p_CUT_END_DATE IN DATE,
	p_PROFILE_AS_OF_DATE IN DATE,
    p_INTERVAL_DIVISOR IN NUMBER,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	);

PROCEDURE GET_PB_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_POSITION_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_REPORT_NAME IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
    );

PROCEDURE BID_OFFER_TRANSACTION_LIST
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_ACTION IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
    );

PROCEDURE LOAD_BALANCING_BALANCE_ALL
	(
    p_TRANSACTION_ID IN NUMBER,
    p_STATEMENT_TYPE IN NUMBER,
    p_BEGIN_DATE IN DATE,
    p_END_DATE IN DATE,
    p_AS_OF_DATE IN DATE,
    p_TIME_ZONE IN VARCHAR,
    p_STATUS OUT NUMBER
    );

PROCEDURE GET_GAS_DELIVERY_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_REPORT_TYPE IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_ID_1 IN NUMBER,
	p_ID_2 IN NUMBER,
	p_ID_3 IN NUMBER,
	p_REPORT_NAME IN VARCHAR2,
	p_FILTERS IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE INVOICE_EMAIL_MESSAGE_BODY
	(
	p_CALLING_MODULE IN VARCHAR2,
	p_MODEL_ID IN NUMBER,
	p_ENTITY_IDs IN ID_TABLE,
	p_EMAIL IN OUT NOCOPY ML.EMAIL_REC,
	p_SOMETHING_DONE OUT BOOLEAN
	);

PROCEDURE INVOICE_EMAIL_ADD_ATTACHMENTS
	(
	p_CALLING_MODULE IN VARCHAR2,
	p_MODEL_ID IN NUMBER,
	p_ENTITY_IDs IN ID_TABLE,
	p_EMAIL IN OUT NOCOPY ML.EMAIL_REC
	);

PROCEDURE DEAL_EVAL_GET_TRANSACTIONS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SOMETHING_DONE OUT BOOLEAN,
	p_IDs OUT ID_TABLE
	);

PROCEDURE BEFORE_DEAL_EVAL_COMMIT
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_OPTION_ID IN NUMBER
	);

PROCEDURE BEFORE_DEAL_EVAL_UNDO
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_OPTION_ID IN NUMBER
	);

PROCEDURE BEFORE_DEAL_EVAL_REJECT
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_OPTION_ID IN NUMBER
	);

PROCEDURE BEFORE_DEAL_EVAL_RESTORE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_OPTION_ID IN NUMBER
	);

PROCEDURE AFTER_DEAL_EVAL_COMMIT
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_OPTION_ID IN NUMBER
	);

PROCEDURE AFTER_DEAL_EVAL_UNDO
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_OPTION_ID IN NUMBER
	);

PROCEDURE AFTER_DEAL_EVAL_REJECT
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_OPTION_ID IN NUMBER
	);

PROCEDURE AFTER_DEAL_EVAL_RESTORE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_OPTION_ID IN NUMBER
	);

PROCEDURE DEAL_EVAL_GET_DATE_RANGE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_IDs IN ID_TABLE,
	p_SOMETHING_DONE OUT BOOLEAN,
	p_OUT_BEGIN_DATE OUT DATE,
	p_OUT_END_DATE OUT DATE
	);

PROCEDURE DEAL_EVAL_PERFORM_EVAL
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_LOAD_TRANSACTION_ID IN NUMBER,
	p_DYNAMIC_TRANSACTION_ID IN NUMBER,
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_OPTION_ID IN NUMBER,
	p_SOMETHING_DONE OUT BOOLEAN
	);

  PROCEDURE CAN_DELETE_TRANSACTION
	(
	p_TRANSACTION_ID IN NUMBER,
	p_CAN_DELETE OUT BOOLEAN
	);

PROCEDURE PRE_MARKET_EXCHANGE
    (
    p_EXTERNAL_SYSTEM_ID IN NUMBER,
    p_EXCHANGE_NAME IN VARCHAR2,
	p_OTHER_PARAMS IN UT.STRING_MAP,
    p_CONTENTS IN CLOB,
    p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER
    );

PROCEDURE POST_MARKET_EXCHANGE
    (
    p_EXTERNAL_SYSTEM_ID IN NUMBER,
    p_EXCHANGE_NAME IN VARCHAR2,
	p_OTHER_PARAMS IN UT.STRING_MAP,
    p_CONTENTS IN CLOB,
    p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER
    );

PROCEDURE AFTER_ACCEPT_VPPS_TO_SCHEDULES
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_SERVICE_CODE IN CHAR,
	p_IS_EXTERNAL IN NUMBER,
	p_VPP_IDs IN NUMBER_COLLECTION
	);

PROCEDURE PROXY_USAGE_PROFILE
	(
	p_FORECAST_DATE IN DATE,
	p_PROXY_DAY_METHOD_ID IN NUMBER,
	p_ACCOUNT_SERVICE_ID IN NUMBER,
	p_PROVIDER_SERVICE_ID IN NUMBER,
	p_CANDIDATE_DATES IN DATE_COLLECTION, -- ORDERED BY DELTA, ASCENDING
	p_HAS_PROXY_PROFILE OUT BOOLEAN,
	p_PROFILE_SOURCE_DATE OUT DATE,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	);

PROCEDURE PRE_ACCOUNT_SYNC
	(
	p_IS_FULL_SYNC IN NUMBER := 0,
	p_BEGIN_DATE IN DATE := NULL
	);

PROCEDURE POST_ACCOUNT_SYNC
	(
	p_IS_FULL_SYNC IN NUMBER := 0,
	p_BEGIN_DATE IN DATE := NULL
	);

PROCEDURE PRE_PROCESS_BILL_CASE(p_BILL_CASE_ID IN BILL_CASE.BILL_CASE_ID%TYPE);
PROCEDURE PRE_GENERATE_BILL_CASE_RESULTS(p_BILL_CASE_ID IN BILL_CASE.BILL_CASE_ID%TYPE);
PROCEDURE POST_PROCESS_BILL_CASE(p_BILL_CASE_ID IN BILL_CASE.BILL_CASE_ID%TYPE);

END XS;
/

