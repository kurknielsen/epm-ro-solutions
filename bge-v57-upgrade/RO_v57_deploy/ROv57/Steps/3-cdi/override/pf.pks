CREATE OR REPLACE PACKAGE RTO_ADMIN.PF AS
--Revision $Revision: 1.193 $

-- Profiling Package --

FUNCTION WHAT_VERSION RETURN VARCHAR;

FUNCTION PRODUCT_FROM_STRING
	(
	p_VALS IN VARCHAR2,
	p_DELIM IN CHAR := ','
	) RETURN NUMBER;

PROCEDURE PUT_LOAD_PROFILE_POINTS
	(
	p_PROFILE_ID IN NUMBER,
	p_POINT_INDEX IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_POINT_VALUES IN VARCHAR,
	p_PROFILE_INTERVAL IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_LOAD_PROFILE_POINTS_TBL
	(
	p_PROFILE_ID IN NUMBER,
	p_POINT_INDEX IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_POINT_VALUES IN OUT NOCOPY GA.NUMBER_TABLE,
	p_PROFILE_INTERVAL IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_PROFILE_NAME_FROM_ID
	(
	p_PROFILE_ID IN NUMBER,
	p_PROFILE_NAME OUT VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_LOAD_PROFILE_STATISTICS
	(
	p_PROFILE_ID IN NUMBER,
	p_VERSION_ID IN NUMBER,
	p_FROM_DATE OUT DATE,
	p_TO_DATE OUT DATE,
	p_PROFILE_COUNT OUT NUMBER,
	p_PROFILE_LOAD_FACTOR OUT NUMBER,
	p_PROFILE_MIN OUT NUMBER,
	p_PROFILE_NZ_MIN OUT NUMBER,
	p_PROFILE_MAX OUT NUMBER,
	p_PROFILE_SUM OUT NUMBER,
	p_PROFILE_MEAN_APE OUT NUMBER,
	p_PROFILE_AVG_DEV_APE OUT NUMBER,
	p_PROFILE_TOTAL_ERROR_PCT OUT NUMBER,
	p_R_SQUARED_MIN OUT NUMBER,
	p_R_SQUARED_MAX OUT NUMBER,
	p_R_SQUARED_FAIL_PCT OUT NUMBER,
	p_T_STAT_TEMP_FAIL_PCT OUT NUMBER,
	p_T_STAT_HUMID_FAIL_PCT OUT NUMBER,
	p_T_STAT_WIND_FAIL_PCT OUT NUMBER,
	p_PROFILE_STATUS OUT VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_LOAD_PROFILE_STATISTICS
	(
	p_PROFILE_ID IN NUMBER,
	p_VERSION_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_FROM_DATE IN DATE,
	p_TO_DATE IN DATE,
	p_PROFILE_COUNT IN NUMBER,
	p_PROFILE_LOAD_FACTOR IN NUMBER,
	p_PROFILE_MIN IN NUMBER,
	p_PROFILE_NZ_MIN IN NUMBER,
	p_PROFILE_MAX IN NUMBER,
	p_PROFILE_SUM IN NUMBER,
	p_PROFILE_MEAN_APE IN NUMBER,
	p_PROFILE_AVG_DEV_APE IN NUMBER,
	p_PROFILE_TOTAL_ERROR_PCT IN NUMBER,
	p_R_SQUARED_MIN IN NUMBER,
	p_R_SQUARED_MAX IN NUMBER,
	p_R_SQUARED_FAIL_PCT IN NUMBER,
	p_T_STAT_TEMP_FAIL_PCT IN NUMBER,
	p_T_STAT_HUMID_FAIL_PCT IN NUMBER,
	p_T_STAT_WIND_FAIL_PCT IN NUMBER,
	p_PROFILE_STATUS IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_LOAD_PROFILE_WRF
	(
	p_PROFILE_ID IN NUMBER,
	p_WRF_LINE_NBR IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_SEGMENT_MIN IN NUMBER,
	p_SEGMENT_MAX IN NUMBER,
	p_WRF_ID OUT NUMBER
	);

PROCEDURE PUT_LOAD_PROFILE_WRF_DATA
	(
	p_PROFILE_ID IN NUMBER,
	p_WRF_SEGMENT_NBR IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_WRF_SEGMENT_VALUES IN VARCHAR,
	p_WRF_MIN IN NUMBER,
	p_WRF_MAX IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_LOAD_PROFILE_WRF_SEGMENT
	(
	p_PROFILE_ID IN NUMBER,
	p_WRF_LINE_NBR IN NUMBER,
	P_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_WRF_TEMP_MIN IN NUMBER,
	p_WRF_TEMP_MAX IN NUMBER,
	p_WRF_LINE_VALUES IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_WEATHER_PARAMETERS
	(
	p_PROFILE_ID IN NUMBER,
	p_VARIABLE_NBR IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_HISTORICAL_PROFILE_STATS
	(
	p_PROFILE_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE APPEND_TO_HISTORICAL_PROFILE
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_VERSION_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_POINT_VALUES IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE ASSIGN_LIBRARY_TO_CALENDAR
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_CALENDAR_NAME IN VARCHAR,
	p_ACCOUNT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE ACCOUNT_FORECAST
	(
	p_MODEL_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE EXPORT_TYPICAL_DAY
	(
	p_LIBRARY_ID IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_SAMPLE_INTERVAL_USAGE
	(
	p_SAMPLE_NAME IN VARCHAR,
	p_METER_NUMBER IN VARCHAR,
	p_ACCOUNT_NUMBER IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PUT_EXTERNAL_METER_DATA
	(
	p_METER_IDENTIFIER IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_MACHINE_NAME IN VARCHAR,
	p_USER_NAME IN VARCHAR,
	p_METER_VALUES IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PROFILE_MONITOR_REQUEST
	(
	p_REQUEST_TYPE IN VARCHAR,
	p_ACCOUNT_IDS IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PROFILE_AS_OF_DATE IN DATE,
	p_USAGE_AS_OF_DATE IN DATE,
	p_MONDAY IN NUMBER,
	p_TUESDAY IN NUMBER,
	p_WEDNESDAY IN NUMBER,
	p_THURSDAY IN NUMBER,
	p_FRIDAY IN NUMBER,
	p_SATURDAY IN NUMBER,
	p_SUNDAY IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_LOAD_PROFILE_BY_LIBRARY
	(
	p_LIBRARY_ID IN NUMBER,
	p_VERSION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PUT_SEASON_BREAKPOINT
	(
	p_SEASON_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_BREAKPOINT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_USAGE_WRF
	(
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_USAGE_WRF_TEMPLATE_NAMES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_CUSTOMER_USAGE_WRF
	(
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_FILTER_STRING IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_ENTITY_USAGE_WRF
	(
	p_ENTITY_TYPE IN VARCHAR,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_FILTER_STRING IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_ENTITY_CONSUMPTION
	(
	p_ENTITY_ID IN NUMBER,
	p_ENTITY_TYPE IN VARCHAR,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GET_PROFILE_AS_OF_DATE
	(
	p_PROFILE_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_PROFILE_AS_OF_DATE OUT DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE USAGE_WRF_REQUEST
	(
	p_PROCESS_ID IN NUMBER,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_REQUESTOR IN VARCHAR,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE USAGE_WRF_REQUEST
	(
	p_PROCESS_ID IN NUMBER,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_REQUESTOR IN VARCHAR,
	p_TRACE_ON IN NUMBER
	);

PROCEDURE RUN_USAGE_WRF_REQUEST
	(
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_SCHEDULE_RUN IN NUMBER,
	p_RUN_AT IN DATE,
	p_REQUESTOR IN VARCHAR,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE GET_ENTITY_USAGE_WRF_POINTS
	(
	p_ENTITY_ID IN NUMBER,
	p_ENTITY_TYPE IN VARCHAR,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE UPDATE_USAGE_WRF_STATUS
	(
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_LAST_RUN_STATUS IN VARCHAR,
	p_STATUS OUT NUMBER
	);
PROCEDURE DELETE_USAGE_WRF_STATISTICS
	(
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_HISTORICAL_PROFILE
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_PROFILE_POINT_VALUES IN VARCHAR,
	p_PROFILE_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_LOAD_PROFILE_COMPLETE
	(
	o_OID OUT NUMBER,
	p_PROFILE_NAME IN VARCHAR,
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_TYPE IN VARCHAR,
	p_PROFILE_POINT_VALUES IN VARCHAR,
	p_PROFILE_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_PROFILE_TEMPLATE_ID IN NUMBER,
	p_PROFILE_SEASON IN VARCHAR,
	p_SOURCE_BEGIN_DATE IN DATE,
	p_SOURCE_END_DATE IN DATE,
	p_SOURCE_PROFILE_ID IN NUMBER,
	p_PROFILE_INTERVAL IN NUMBER,
	p_APP_LOG_DOMAIN_NAME IN VARCHAR DEFAULT 'Profiling',
	p_APP_LOG_APP_NAME IN VARCHAR DEFAULT 'PF',
	p_APP_LOG_EVENT_NAME IN VARCHAR DEFAULT 'PUT_LOAD_PROFILE_COMPLETE',
	p_APP_LOG_EVENT_USER_NAME IN VARCHAR DEFAULT 'UNKNOWN',
	p_LOG_START_STOP IN NUMBER DEFAULT 0,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE PUT_LOAD_PROFILE_POINT
	(
	p_PROFILE_ID IN NUMBER,
	p_POINT_INDEX IN NUMBER,
	p_POINT_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_POINT_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PROFILE_WRF_PROFILES
	(
	p_PROFILE_ID IN NUMBER,
	p_BREAKPOINT_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_PARAMETER_LIST IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_R2_THRESHOLD IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE ACCOUNT_WRF_PROFILES
	(
	p_ACCOUNT_ID IN NUMBER,
	p_TEMPLATE_LIST IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_R2_THRESHOLD IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE ACCOUNT_GROUP_WRF_PROFILES
	(
	p_ACCOUNT_GROUP_ID IN NUMBER,
	p_TEMPLATE_LIST IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_R2_THRESHOLD IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

-- launches background job which execute BATCH_WRF_PROCESS using
-- template and account IDs in WRF_*_TO_RUN_TEMP temporary tables
PROCEDURE RUN_BATCH_WRF
	(
	p_RUN_MODE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
    p_TIME_ZONE IN VARCHAR2,
	p_R2_THRESHOLD IN NUMBER,
	p_MIN_SEGMENTS IN NUMBER,
	p_MAX_SEGMENTS IN NUMBER,
	p_AUTO_APPLY IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_MESSAGE OUT VARCHAR2
	);

-- calculate WRFs for the specified day-types and accounts
PROCEDURE BATCH_WRF_PROCESS
	(
	p_TEMPLATE_IDs IN NUMBER_COLLECTION,
	p_ACCOUNT_IDs IN NUMBER_COLLECTION,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
    p_TIME_ZONE IN VARCHAR2,
	p_R2_THRESHOLD IN NUMBER,
	p_MIN_SEGMENTS IN NUMBER,
	p_MAX_SEGMENTS IN NUMBER,
	p_AUTO_APPLY IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_PROCESS_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR2
	);

PROCEDURE CHOOSE_CANDIDATE
	(
	p_FCM_ID IN NUMBER,
	p_NUM_SEGMENTS IN NUMBER
	);

PROCEDURE USAGE_WRF_REQUEST_BASE
	(
	p_PROCESS_ID IN NUMBER,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BASE_LOAD_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_REQUESTOR IN VARCHAR,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE USAGE_WRF_REQUEST_BASE
	(
	p_PROCESS_ID IN NUMBER,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BASE_LOAD_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_REQUESTOR IN VARCHAR,
	p_TRACE_ON IN NUMBER
	);

PROCEDURE RUN_USAGE_WRF_REQUEST_BASE
	(
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BASE_LOAD_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_SCHEDULE_RUN IN NUMBER,
	p_RUN_AT IN DATE,
	p_REQUESTOR IN VARCHAR,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE USAGE_WRF_REQUEST_ENTITY
	(
	p_MODEL_ID IN NUMBER,
	p_ENTITY_TYPE IN VARCHAR,
	p_PROCESS_ID IN NUMBER,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BASE_LOAD_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_REQUESTOR IN VARCHAR,
	p_ACCT_CALENDAR_BEGIN_DATE IN DATE,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE USAGE_WRF_REQUEST_ENTITY
	(
	p_MODEL_ID IN NUMBER,
	p_ENTITY_TYPE IN VARCHAR,
	p_PROCESS_ID IN NUMBER,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BASE_LOAD_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_REQUESTOR IN VARCHAR,
	p_ACCT_CALENDAR_BEGIN_DATE IN DATE,
	p_TRACE_ON IN NUMBER
	);

PROCEDURE RUN_USAGE_WRF_REQUEST_ENTITY
	(
	p_MODEL_ID IN NUMBER,
	p_ENTITY_TYPE IN VARCHAR,
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BASE_LOAD_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INPUT_AS_OF_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_SCHEDULE_RUN IN NUMBER,
	p_RUN_AT IN DATE,
	p_REQUESTOR IN VARCHAR,
	p_ACCT_CALENDAR_BEGIN_DATE IN DATE,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

PROCEDURE GET_TEMPLATE_LIST
	(
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE UPDATE_CUSTOMER_USAGE_WRF_BASE
	(
	p_CUSTOMER_ID IN NUMBER,
	p_WRF_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BASE_LOAD_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_DEFAULT_ALPHA IN NUMBER,
	p_DEFAULT_BETA IN NUMBER
	);

PROCEDURE UPDATE_ACCOUNT_USAGE_WRF_BASE
	(
	p_MODEL_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_WRF_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_BASE_LOAD_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_OUTPUT_AS_OF_DATE IN DATE,
	p_DEFAULT_ALPHA IN NUMBER,
	p_DEFAULT_BETA IN NUMBER
	);

PROCEDURE GET_PROFILING_REPORT
	(
	p_MODEL_ID IN NUMBER,
	p_REPORT_NAME IN VARCHAR,
	p_OPTIONAL_PARAMETER IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN VARCHAR,
	p_PROFILE_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_PROFILE_FROM_TO_DATES
	(
	p_PROFILE_ID IN NUMBER,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_FROM_DATE OUT DATE,
	p_TO_DATE OUT DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_LOAD_PROFILE_POINTS
	(
	p_PROFILE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_ALL_DATES IN NUMBER := 0,
	p_TIME_ZONE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_POINT_INDEX IN NUMBER := 1,
	p_ALL_INDEXES IN NUMBER := 0,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_ACCOUNT_MODEL_OPTION
	(
	p_ACCOUNT_ID IN NUMBER,
	p_ACCOUNT_MODEL_OPTION OUT VARCHAR2,
	p_STATUS OUT NUMBER
	);

PROCEDURE GET_ACCOUNT_SERV_LOC_METERS
	(
	p_ACCOUNT_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

FUNCTION GET_METER_NAME
	(
	p_METER_ID IN NUMBER
	) RETURN VARCHAR;

FUNCTION GET_METER_IDS_FOR_ACCOUNT
	(
	p_ACCOUNT_ID IN NUMBER
	) RETURN GA.ID_TABLE;

FUNCTION GET_PROFILE_ID_FROM_METER_REF
	(
	p_METER_ID IN NUMBER
	) RETURN NUMBER;

FUNCTION GET_PROFILE_ID
	(
	p_ACCOUNT_ID IN NUMBER
	) RETURN NUMBER;

PROCEDURE CREATE_TYPICAL_DAY_FOR_PROF
	(
	p_MODEL_ID IN NUMBER,
    p_PROFILE_ID IN NUMBER,
    p_ACCOUNT_ID IN NUMBER,
    p_METER_ID IN NUMBER,
    p_PREFIX_NAME IN VARCHAR2,
    p_TEMPLATE_ID IN NUMBER,
	p_SEASON_ID IN NUMBER,
    p_DAY_TYPE_TEXT IN VARCHAR2,
    p_BEGIN_DATE IN DATE,
    p_END_DATE IN DATE,
    p_AS_OF_DATE IN DATE,
    p_TRACE_ON IN NUMBER,
    p_NEW_PROFILE_ID OUT NUMBER,
    p_NEW_LIBRARY_ID OUT NUMBER,
    p_STATUS OUT NUMBER
    );

PROCEDURE PUT_HISTORICAL_PROFILE_TBL
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_PROFILE_POINT_VALUES IN OUT NOCOPY GA.NUMBER_TABLE,
	p_PROFILE_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN NUMBER,
	p_STATUS OUT NUMBER,
    p_LOG_ONLY_ERRORS IN CHAR DEFAULT 'N',
    p_INTERVAL_IS_NUM_MIN IN BOOLEAN := TRUE
	);

FUNCTION GET_ACCOUNT_STATION
	(
	p_ACCOUNT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) RETURN NUMBER;

--@@Begin Implementation Override --
PROCEDURE CREATE_TYPICAL_DAY_PROFILE
   (
   p_PROFILE_ID      IN NUMBER,
   p_TEMPLATE_ID     IN NUMBER,
   p_SEASON_ID       IN NUMBER,
   p_SEASON_DAY_TYPE IN VARCHAR2,
   p_PROFILE_PREFIX  IN VARCHAR2,
   p_BEGIN_DATE      IN DATE,
   p_END_DATE        IN DATE
   );
--@@End Implementation Override --

g_DOMAIN_NAME VARCHAR(16) := 'Profiling';
g_APP_NAME VARCHAR(32) := 'Retail Operations'; --@@Implementation Override--
g_DEFAULT_SEGMENT NUMBER(1) := 1;
g_DEFAULT_INDEX NUMBER(1) := 1;
g_DEFAULT_POINT_INDEX NUMBER(1) := 1;
g_TAB CHAR(1) := CHR(9);
g_ACCOUNT_USAGE_WRF_MIN_POINTS NUMBER(2) := 5;
g_SECOND NUMBER(6,5) := 1/86400;
g_ACCT_CALENDAR_BEGIN_DATE DATE := NULL;
g_DELIMITER VARCHAR2(1) := ',';
g_ALLOW_COMMIT_ROLLBACK BOOLEAN := TRUE;

c_ENTITY_TYPE_CUSTOMER CONSTANT VARCHAR2(1) := 'C';

c_BATCH_RUN_MODE_ALL CONSTANT NUMBER(9) := -1;
c_BATCH_RUN_MODE_AGGREGATE CONSTANT NUMBER(9) := -2;
c_BATCH_RUN_MODE_PERIOD_MTR CONSTANT NUMBER(9) := -3;
c_BATCH_RUN_MODE_INTERVAL_MTR CONSTANT NUMBER(9) := -4;
c_BATCH_RUN_MODE_SELECTED CONSTANT NUMBER(9) := -5;

END;
/

