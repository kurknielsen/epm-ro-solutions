CREATE OR REPLACE PACKAGE BODY CDI_BK AS
TYPE PLS_DATE_TABLE IS TABLE OF DATE INDEX BY PLS_INTEGER;
TYPE PLS_NUMBER_TABLE IS TABLE OF NUMBER INDEX BY PLS_INTEGER;

c_PACKAGE_NAME                 CONSTANT VARCHAR2(32) := 'RO_SYNCH';
c_STEP_NAME                    CONSTANT VARCHAR2(32) := '';
c_SYSTEM_SETTING_MODULE        CONSTANT VARCHAR2(32) := 'Client Data Interface';
c_SYSTEM_SETTING_KEY1          CONSTANT VARCHAR2(32) := 'Data Import';
c_SYSTEM_SETTING_KEY2          CONSTANT VARCHAR2(32) := 'Account Sync';
c_ENTRY                        CONSTANT VARCHAR2(8)  := 'Entry';
c_EXIT                         CONSTANT VARCHAR2(8)  := 'Exit';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'MM/DD/YYYY';

l_PROXY_DAY_METHOD_ID          PLS_INTEGER;
l_CHECK_FOR_PROXY_DAY_METHOD   BOOLEAN := TRUE;

PROCEDURE CACHE_PROXY_DAY_METHOD AS
BEGIN
   SELECT MAX(PROXY_DAY_METHOD_ID) INTO l_PROXY_DAY_METHOD_ID FROM PROXY_DAY_METHOD WHERE PROXY_DAY_METHOD_NAME = GET_DICTIONARY_VALUE('Account Proxy Day Method', GA.GLOBAL_MODEL, c_SYSTEM_SETTING_MODULE, c_SYSTEM_SETTING_KEY1, c_SYSTEM_SETTING_KEY2);
   IF l_PROXY_DAY_METHOD_ID IS NULL THEN
      LOGS.LOG_WARN('The Account Proxy Day Method Is Not Specified In The System Settings (Client Data Interface -> Data Import -> Account Sync).', 'CACHE_PROXY_DAY_METHOD', c_STEP_NAME, c_PACKAGE_NAME);
   END IF;
END CACHE_PROXY_DAY_METHOD;
   
PROCEDURE SYNC_ACCOUNT(p_ACCOUNT_SYNC IN OUT NOCOPY CDI_ACCOUNT_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_ACCOUNT';
v_INDEX       PLS_INTEGER;
v_ACCOUNT_ID  PLS_INTEGER;
v_STATUS      PLS_INTEGER;
v_MARK_TIME   PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_NEW_ACCOUNT BOOLEAN;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   IF p_ACCOUNT_SYNC IS NULL OR p_ACCOUNT_SYNC.COUNT = 0 THEN
      RETURN;
   END IF;
   v_INDEX := p_ACCOUNT_SYNC.FIRST;
   WHILE v_INDEX <= p_ACCOUNT_SYNC.LAST LOOP
      LOGS.LOG_DEBUG('Processing Account: ' || p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      SELECT MAX(ACCOUNT_ID) INTO v_ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_NAME = p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_NAME;
      v_NEW_ACCOUNT := CASE WHEN v_ACCOUNT_ID IS NULL THEN TRUE ELSE FALSE END;
      IO.PUT_ACCOUNT(
         o_OID                          => v_ACCOUNT_ID,
         p_ACCOUNT_NAME                 => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_NAME,
         p_ACCOUNT_ALIAS                => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_ALIAS,
         p_ACCOUNT_DESC                 => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_DESC,
         p_ACCOUNT_ID                   => v_ACCOUNT_ID,
         p_ACCOUNT_DUNS_NUMBER          => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_DUNS_NUMBER,
         p_ACCOUNT_EXTERNAL_IDENTIFIER  => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_EXTERNAL_IDENTIFIER,
         p_ACCOUNT_MODEL_OPTION         => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_MODEL_OPTION,
         p_ACCOUNT_SIC_CODE             => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_SIC_CODE,
         p_ACCOUNT_METER_TYPE           => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_METER_TYPE,
         p_ACCOUNT_METER_EXT_IDENTIFIER => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_METER_EXT_IDENTIFIER,
         p_ACCOUNT_DISPLAY_NAME         => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_DISPLAY_NAME,
         p_ACCOUNT_BILL_OPTION          => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_BILL_OPTION,
         p_ACCOUNT_ROLLUP_ID            => p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_ROLLUP_ID,
         p_IS_EXTERNAL_INTERVAL_USAGE   => p_ACCOUNT_SYNC(v_INDEX).IS_EXTERNAL_INTERVAL_USAGE,
         p_IS_EXTERNAL_BILLED_USAGE     => p_ACCOUNT_SYNC(v_INDEX).IS_EXTERNAL_BILLED_USAGE,
         p_IS_AGGREGATE_ACCOUNT         => p_ACCOUNT_SYNC(v_INDEX).IS_AGGREGATE_ACCOUNT,
         p_IS_UFE_PARTICIPANT           => p_ACCOUNT_SYNC(v_INDEX).IS_UFE_PARTICIPANT,
         p_IS_CREATE_SETTLEMENT_PROFILE => p_ACCOUNT_SYNC(v_INDEX).IS_CREATE_SETTLEMENT_PROFILE,
         p_IS_EXTERNAL_FORECAST         => p_ACCOUNT_SYNC(v_INDEX).IS_EXTERNAL_FORECAST,
         p_IS_SUB_AGGREGATE             => CONSTANTS.NOT_ASSIGNED,
         p_TX_SERVICE_TYPE_ID           => p_ACCOUNT_SYNC(v_INDEX).TX_SERVICE_TYPE_ID,
         p_USE_TOU_USAGE_FACTOR         => CONSTANTS.NOT_ASSIGNED,
         p_MODEL_ID                     => p_ACCOUNT_SYNC(v_INDEX).MODEL_ID);
      IF v_NEW_ACCOUNT THEN
         LOGS.LOG_DEBUG('Detected New Account: ' || p_ACCOUNT_SYNC(v_INDEX).ACCOUNT_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
         RA.PUT_ACCOUNT_STATUS(
            p_ACCOUNT_ID          => v_ACCOUNT_ID,
            p_BEGIN_DATE          => CONSTANTS.LOW_DATE,
            p_END_DATE            => NULL,
            p_ACCOUNT_STATUS_NAME => 'Active',
            p_ACCOUNT_IS_ACTIVE   => 1,
            p_OLD_BEGIN_DATE      => CONSTANTS.LOW_DATE,
            p_STATUS              => v_STATUS);
         IF l_PROXY_DAY_METHOD_ID IS NULL AND l_CHECK_FOR_PROXY_DAY_METHOD THEN
            CACHE_PROXY_DAY_METHOD;
            l_CHECK_FOR_PROXY_DAY_METHOD := FALSE;
         END IF;
         IF l_PROXY_DAY_METHOD_ID IS NOT NULL THEN
            INSERT INTO ACCOUNT_PROXY_DAY_METHOD(ACCOUNT_ID, PROXY_DAY_METHOD_TYPE, BEGIN_DATE, END_DATE, PROXY_DAY_METHOD_ID, ENTRY_DATE)
            VALUES(v_ACCOUNT_ID, 'Forecast', CONSTANTS.LOW_DATE, NULL, l_PROXY_DAY_METHOD_ID, SYSDATE);
         END IF;
      END IF;
      v_INDEX := p_ACCOUNT_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_ACCOUNT;

PROCEDURE SYNC_ESP(p_ESP_SYNC IN OUT NOCOPY CDI_ESP_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_ESP';
v_INDEX     PLS_INTEGER;
v_ESP_ID    PLS_INTEGER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   IF p_ESP_SYNC IS NULL OR p_ESP_SYNC.COUNT = 0 THEN
      RETURN;
   END IF;
   v_INDEX := p_ESP_SYNC.FIRST;
   WHILE v_INDEX <= p_ESP_SYNC.LAST LOOP
      SELECT MAX(ESP_ID) INTO v_ESP_ID FROM ENERGY_SERVICE_PROVIDER WHERE ESP_EXTERNAL_IDENTIFIER = p_ESP_SYNC(v_INDEX).ESP_EXTERNAL_IDENTIFIER;
      IO.PUT_ESP (
         o_OID                       => v_ESP_ID,
         p_ESP_NAME                  => p_ESP_SYNC(v_INDEX).ESP_NAME,
         p_ESP_ALIAS                 => p_ESP_SYNC(v_INDEX).ESP_ALIAS,
         p_ESP_DESC                  => NULL,
         p_ESP_ID                    => v_ESP_ID,
         p_ESP_EXTERNAL_IDENTIFIER   => p_ESP_SYNC(v_INDEX).ESP_EXTERNAL_IDENTIFIER,
         p_ESP_DUNS_NUMBER           => p_ESP_SYNC(v_INDEX).ESP_DUNS_NUMBER,
         p_ESP_STATUS                => p_ESP_SYNC(v_INDEX).ESP_STATUS,
         p_ESP_TYPE                  => p_ESP_SYNC(v_INDEX).ESP_TYPE,
         p_ESP_EXCLUDE_LOAD_SCHEDULE => p_ESP_SYNC(v_INDEX).ESP_EXCLUDE_LOAD_SCHEDULE);
      v_INDEX := p_ESP_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, c_EXIT);
END SYNC_ESP;

PROCEDURE SYNC_PSE(p_PSE_SYNC IN OUT NOCOPY CDI_PSE_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_PSE';
v_INDEX     PLS_INTEGER;
v_PSE_ID    PLS_INTEGER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   IF p_PSE_SYNC IS NULL OR p_PSE_SYNC.COUNT = 0 THEN
      RETURN;
   END IF;
   v_INDEX := p_PSE_SYNC.FIRST;
   WHILE v_INDEX <= p_PSE_SYNC.LAST LOOP
      SELECT MAX(PSE_ID) INTO v_PSE_ID FROM PURCHASING_SELLING_ENTITY WHERE PSE_EXTERNAL_IDENTIFIER = p_PSE_SYNC(v_INDEX).PSE_EXTERNAL_IDENTIFIER;
      IO.PUT_PSE(
         o_OID                          => v_PSE_ID,
         p_PSE_NAME                     => p_PSE_SYNC(v_INDEX).PSE_NAME,
         p_PSE_ALIAS                    => p_PSE_SYNC(v_INDEX).PSE_ALIAS,
         p_PSE_DESC                     => p_PSE_SYNC(v_INDEX).PSE_DESC,
         p_PSE_ID                       => v_PSE_ID,
         p_PSE_NERC_CODE                => p_PSE_SYNC(v_INDEX).PSE_NERC_CODE,
         p_PSE_STATUS                   => p_PSE_SYNC(v_INDEX).PSE_STATUS,
         p_PSE_DUNS_NUMBER              => p_PSE_SYNC(v_INDEX).PSE_DUNS_NUMBER,
         p_PSE_BANK                     => p_PSE_SYNC(v_INDEX).PSE_BANK,
         p_PSE_ACH_NUMBER               => p_PSE_SYNC(v_INDEX).PSE_ACH_NUMBER,
         p_PSE_TYPE                     => p_PSE_SYNC(v_INDEX).PSE_TYPE,
         p_PSE_EXTERNAL_IDENTIFIER      => p_PSE_SYNC(v_INDEX).PSE_EXTERNAL_IDENTIFIER,
         p_PSE_IS_RETAIL_AGGREGATOR     => p_PSE_SYNC(v_INDEX).PSE_IS_RETAIL_AGGREGATOR,
         p_PSE_IS_BACKUP_GENERATION     => p_PSE_SYNC(v_INDEX).PSE_IS_BACKUP_GENERATION,
         p_PSE_EXCLUDE_LOAD_SCHEDULE    => p_PSE_SYNC(v_INDEX).PSE_EXCLUDE_LOAD_SCHEDULE,
         p_IS_BILLING_ENTITY            => NULL,
         p_TIME_ZONE                    => NULL,
         p_STATEMENT_INTERVAL           => NULL,
         p_INVOICE_INTERVAL             => NULL,
         p_WEEK_BEGIN                   => NULL,
         p_INVOICE_LINE_ITEM_OPTION     => NULL,
         p_INVOICE_EMAIL_SUBJECT        => NULL,
         p_INVOICE_EMAIL_PRIORITY       => NULL,
         p_INVOICE_EMAIL_BODY           => NULL,
         p_INVOICE_EMAIL_BODY_MIME_TYPE => NULL,
         p_SCHEDULE_NAME_PREFIX         => NULL,
         p_SCHEDULE_FORMAT              => NULL,
         p_SCHEDULE_INTERVAL            => NULL,
         p_LOAD_ROUNDING_PREFERENCE     => NULL,
         p_LOSS_ROUNDING_PREFERENCE     => NULL,
         p_CREATE_TX_LOSS_SCHEDULE      => NULL,
         p_CREATE_DX_LOSS_SCHEDULE      => NULL,
         p_CREATE_UFE_SCHEDULE          => NULL,
         p_MINIMUM_SCHEDULE_AMT         => NULL);
      v_INDEX := p_PSE_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_PSE;

PROCEDURE ASSIGN_SINGLE_SERVICE_LOCATION(p_SERVICE_LOCATION_NAME IN VARCHAR2) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'ASSIGN_SINGLE_SERVICE_LOCATION';
v_SERVICE_LOCATION_ID PLS_INTEGER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   ID.ID_FOR_SERVICE_LOCATION(p_SERVICE_LOCATION_NAME, v_SERVICE_LOCATION_ID);
   IF v_SERVICE_LOCATION_ID < 0 THEN
      LOGS.LOG_ERROR('Service Location "' || p_SERVICE_LOCATION_NAME || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   END IF;
   INSERT INTO ACCOUNT_SERVICE_LOCATION(ACCOUNT_ID, SERVICE_LOCATION_ID,BEGIN_DATE,ENTRY_DATE)
   SELECT ACCOUNT_ID, v_SERVICE_LOCATION_ID, CONSTANTS.LOW_DATE, SYSDATE
   FROM ACCOUNT A
   WHERE NOT EXISTS (SELECT NULL FROM ACCOUNT_SERVICE_LOCATION WHERE ACCOUNT_ID = A.ACCOUNT_ID);
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END ASSIGN_SINGLE_SERVICE_LOCATION;

PROCEDURE ASSIGN_PERMANENT_PSE_TO_ESP(p_PSE_ESP_SYNC IN OUT NOCOPY CDI_PSE_ESP_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'ASSIGN_PERMANENT_PSE_TO_ESP';
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   IF p_PSE_ESP_SYNC IS NULL OR p_PSE_ESP_SYNC.COUNT = 0 THEN
      RETURN;
   END IF;
   INSERT INTO PSE_ESP(PSE_ID,ESP_ID,BEGIN_DATE,END_DATE,ENTRY_DATE)
   SELECT B.PSE_ID, C.ESP_ID, CONSTANTS.LOW_DATE, NULL, SYSDATE
   FROM TABLE(CAST(p_PSE_ESP_SYNC AS CDI_PSE_ESP_SYNC_LIST)) A
      JOIN PURCHASING_SELLING_ENTITY B ON B.PSE_EXTERNAL_IDENTIFIER = A.PSE_EXTERNAL_IDENTIFIER
      JOIN ENERGY_SERVICE_PROVIDER C ON C.ESP_EXTERNAL_IDENTIFIER = A.ESP_EXTERNAL_IDENTIFIER
   WHERE NOT EXISTS(SELECT NULL FROM PSE_ESP WHERE PSE_ID = B.PSE_ID AND ESP_ID = C.ESP_ID);
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END ASSIGN_PERMANENT_PSE_TO_ESP;

PROCEDURE PUT_ALL_RATE_CLASSES_FOR_EDC(p_EDC_EXTERNAL_IDENTIFIER IN VARCHAR2, p_EDC_RATE_CLASS_SYNC IN OUT NOCOPY CDI_EDC_RATE_CLASS_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'PUT_ALL_RATE_CLASSES_FOR_EDC';
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_EDC_ID    PLS_INTEGER;
v_INDEX     PLS_INTEGER;
v_COUNT     PLS_INTEGER;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   IF p_EDC_RATE_CLASS_SYNC IS NULL OR p_EDC_RATE_CLASS_SYNC.COUNT = 0 THEN
      RETURN;
   END IF;
   SELECT MAX(EDC_ID) INTO v_EDC_ID FROM ENERGY_DISTRIBUTION_COMPANY WHERE EDC_EXTERNAL_IDENTIFIER = p_EDC_EXTERNAL_IDENTIFIER;
   IF v_EDC_ID IS NULL THEN
      LOGS.LOG_ERROR('EDC Associated With External Identifier "' || p_EDC_EXTERNAL_IDENTIFIER || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      RETURN;
   END IF;
   v_INDEX := p_EDC_RATE_CLASS_SYNC.FIRST;
   WHILE v_INDEX <= p_EDC_RATE_CLASS_SYNC.LAST LOOP
      SELECT COUNT(*) INTO v_COUNT FROM EDC_RATE_CLASS WHERE RATE_CLASS = p_EDC_RATE_CLASS_SYNC(v_INDEX).RATE_CLASS AND EDC_ID = v_EDC_ID;
      IF v_COUNT = 0 THEN
         INSERT INTO EDC_RATE_CLASS(EDC_ID, RATE_CLASS)
         VALUES(v_EDC_ID, p_EDC_RATE_CLASS_SYNC(v_INDEX).RATE_CLASS);
      END IF;
      v_INDEX := p_EDC_RATE_CLASS_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END PUT_ALL_RATE_CLASSES_FOR_EDC;

PROCEDURE SYNC_ACCOUNT_EDC_AFTER(p_PERIOD_BEGIN IN DATE, p_ACCOUNT_EDC_SYNC IN OUT NOCOPY CDI_ACCOUNT_EDC_SYNC_LIST) as
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_ACCOUNT_EDC_AFTER';
v_INDEX          PLS_INTEGER;
v_COUNT          PLS_INTEGER;
v_ACCOUNT_ID     PLS_INTEGER;
v_EDC_ID         PLS_INTEGER;
v_ROWID          ROWID;
v_OLD_BEGIN_DATE DATE;
v_OLD_END_DATE   DATE;
v_NEW_BEGIN_DATE DATE;
v_NEW_END_DATE   DATE;
v_CURRENT_KEY    VARCHAR2(64);
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   DELETE FROM ACCOUNT_EDC WHERE BEGIN_DATE >= p_PERIOD_BEGIN;
   UPDATE ACCOUNT_EDC SET END_DATE = p_PERIOD_BEGIN - 1
   WHERE (END_DATE IS NULL OR END_DATE >= p_PERIOD_BEGIN)
      AND ACCOUNT_ID NOT IN (SELECT ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_MODEL_OPTION = 'Aggregate');
   v_INDEX := p_ACCOUNT_EDC_SYNC.FIRST;
   WHILE v_INDEX <= p_ACCOUNT_EDC_SYNC.LAST LOOP
      v_CURRENT_KEY := p_ACCOUNT_EDC_SYNC(v_INDEX).ACCOUNT_IDENTIFIER;
      v_NEW_BEGIN_DATE := p_ACCOUNT_EDC_SYNC(v_INDEX).BEGIN_DATE;
      v_NEW_END_DATE := p_ACCOUNT_EDC_SYNC(v_INDEX).END_DATE;
      SELECT MAX(EDC_ID) INTO v_EDC_ID FROM ENERGY_DISTRIBUTION_COMPANY WHERE EDC_EXTERNAL_IDENTIFIER = p_ACCOUNT_EDC_SYNC(v_INDEX).EDC_IDENTIFIER;
      IF v_EDC_ID IS NULL THEN
         LOGS.LOG_ERROR('EDC Associated With The External Identifier "' || p_ACCOUNT_EDC_SYNC(v_INDEX).EDC_IDENTIFIER || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ELSE
         SELECT MAX(ACCOUNT_ID) INTO v_ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_EXTERNAL_IDENTIFIER = v_CURRENT_KEY;
         IF v_ACCOUNT_ID IS NULL THEN
            LOGS.LOG_ERROR('Account Associated With The External Identifier "' || v_CURRENT_KEY || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
         ELSE
            BEGIN
               SELECT ROWID, BEGIN_DATE, END_DATE INTO v_ROWID, v_OLD_BEGIN_DATE, v_OLD_END_DATE
               FROM ACCOUNT_EDC
               WHERE ACCOUNT_ID = v_ACCOUNT_ID
                  AND EDC_ID = v_EDC_ID
                  AND (BEGIN_DATE BETWEEN v_NEW_BEGIN_DATE AND NVL(v_NEW_END_DATE + 1, CONSTANTS.HIGH_DATE) OR NVL(END_DATE, CONSTANTS.HIGH_DATE) BETWEEN v_NEW_BEGIN_DATE - 1 AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) OR (v_NEW_BEGIN_DATE >= BEGIN_DATE AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) <= NVL(END_DATE, CONSTANTS.HIGH_DATE)))
                  AND EDC_ACCOUNT_NUMBER = p_ACCOUNT_EDC_SYNC(v_INDEX).EDC_ACCOUNT_NUMBER
                  AND EDC_RATE_CLASS = p_ACCOUNT_EDC_SYNC(v_INDEX).EDC_RATE_CLASS
                  AND EDC_STRATA = p_ACCOUNT_EDC_SYNC(v_INDEX).EDC_STRATA;
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_ROWID := NULL;
            END;
            IF v_ROWID IS NOT NULL THEN
               UPDATE ACCOUNT_EDC SET
                  BEGIN_DATE = LEAST(v_NEW_BEGIN_DATE, BEGIN_DATE),
                  END_DATE = DECODE(GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE)), CONSTANTS.HIGH_DATE, NULL, GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE))),
                  ENTRY_DATE = SYSDATE
               WHERE ROWID = v_ROWID;
            ELSE
               INSERT INTO ACCOUNT_EDC(ACCOUNT_ID,EDC_ID,BEGIN_DATE,EDC_ACCOUNT_NUMBER,EDC_RATE_CLASS,EDC_STRATA,END_DATE,ENTRY_DATE)
               VALUES(v_ACCOUNT_ID,v_EDC_ID,v_NEW_BEGIN_DATE,p_ACCOUNT_EDC_SYNC(v_INDEX).EDC_ACCOUNT_NUMBER,p_ACCOUNT_EDC_SYNC(v_INDEX).EDC_RATE_CLASS,p_ACCOUNT_EDC_SYNC(v_INDEX).EDC_STRATA,v_NEW_END_DATE,SYSDATE);
            END IF;
         END IF;
      END IF;
      v_INDEX := p_ACCOUNT_EDC_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_ACCOUNT_EDC_AFTER;

PROCEDURE SYNC_ACCOUNT_ESP_AFTER(p_PERIOD_BEGIN IN DATE, p_ACCOUNT_ESP_SYNC IN OUT NOCOPY CDI_ACCOUNT_ESP_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_ACCOUNT_ESP_AFTER';
v_INDEX          PLS_INTEGER;
v_COUNT          PLS_INTEGER;
v_ACCOUNT_ID     PLS_INTEGER;
v_ESP_ID         PLS_INTEGER;
v_POOL_ID        PLS_INTEGER;
v_ROWID          ROWID;
v_OLD_BEGIN_DATE DATE;
v_OLD_END_DATE   DATE;
v_NEW_BEGIN_DATE DATE;
v_NEW_END_DATE   DATE;
v_CURRENT_KEY    VARCHAR2(64);
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   DELETE FROM ACCOUNT_ESP WHERE BEGIN_DATE >= p_PERIOD_BEGIN;
   UPDATE ACCOUNT_ESP SET END_DATE = p_PERIOD_BEGIN - 1
   WHERE END_DATE IS NULL OR END_DATE >= p_PERIOD_BEGIN;
   v_INDEX := p_ACCOUNT_ESP_SYNC.FIRST;
   WHILE v_INDEX <= p_ACCOUNT_ESP_SYNC.LAST LOOP
      v_CURRENT_KEY := p_ACCOUNT_ESP_SYNC(v_INDEX).ACCOUNT_IDENTIFIER;
      v_NEW_BEGIN_DATE := p_ACCOUNT_ESP_SYNC(v_INDEX).BEGIN_DATE;
      v_NEW_END_DATE := p_ACCOUNT_ESP_SYNC(v_INDEX).END_DATE;
      SELECT MAX(ESP_ID) INTO v_ESP_ID FROM ENERGY_SERVICE_PROVIDER WHERE ESP_EXTERNAL_IDENTIFIER = p_ACCOUNT_ESP_SYNC(v_INDEX).ESP_IDENTIFIER;
      IF v_ESP_ID IS NULL THEN
         LOGS.LOG_ERROR('ESP Associated With The External Identifier "' || p_ACCOUNT_ESP_SYNC(v_INDEX).ESP_IDENTIFIER || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ELSE
         SELECT MAX(ACCOUNT_ID) INTO v_ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_EXTERNAL_IDENTIFIER = v_CURRENT_KEY;
         IF v_ACCOUNT_ID IS NULL THEN
            LOGS.LOG_ERROR('Account Associated With The External Identifier "' || v_CURRENT_KEY || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
         ELSE
            SELECT MAX(POOL_ID) INTO v_POOL_ID FROM POOL WHERE POOL_EXTERNAL_IDENTIFIER = p_ACCOUNT_ESP_SYNC(v_INDEX).POOL_IDENTIFIER;
            IF v_POOL_ID IS NULL THEN
               LOGS.LOG_ERROR('Pool Associated With The External Identifier "' || p_ACCOUNT_ESP_SYNC(v_INDEX).POOL_IDENTIFIER || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
            ELSE
               BEGIN
                  SELECT ROWID, BEGIN_DATE, END_DATE INTO v_ROWID, v_OLD_BEGIN_DATE, v_OLD_END_DATE
                  FROM ACCOUNT_ESP
                  WHERE ACCOUNT_ID = v_ACCOUNT_ID
                     AND ESP_ID = v_ESP_ID
                     AND POOL_ID = v_POOL_ID
                     AND (BEGIN_DATE BETWEEN v_NEW_BEGIN_DATE AND NVL(v_NEW_END_DATE + 1, CONSTANTS.HIGH_DATE) OR NVL(END_DATE, CONSTANTS.HIGH_DATE) BETWEEN v_NEW_BEGIN_DATE - 1 AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) OR (v_NEW_BEGIN_DATE >= BEGIN_DATE AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) <= NVL(END_DATE, CONSTANTS.HIGH_DATE)))
                     AND ESP_ACCOUNT_NUMBER = p_ACCOUNT_ESP_SYNC(v_INDEX).ESP_ACCOUNT_NUMBER;
               EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                     v_ROWID := NULL;
               END;
               IF v_ROWID IS NOT NULL THEN
                  UPDATE ACCOUNT_ESP SET
                     BEGIN_DATE = LEAST(v_NEW_BEGIN_DATE, BEGIN_DATE),
                     END_DATE = DECODE(GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE)), CONSTANTS.HIGH_DATE, NULL, GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE))),
                     ENTRY_DATE = SYSDATE
                  WHERE ROWID = v_ROWID;
               ELSE
                  INSERT INTO ACCOUNT_ESP(ACCOUNT_ID,ESP_ID,POOL_ID,BEGIN_DATE,END_DATE,ESP_ACCOUNT_NUMBER,ENTRY_DATE)
                  VALUES(v_ACCOUNT_ID,v_ESP_ID,v_POOL_ID,v_NEW_BEGIN_DATE,v_NEW_END_DATE,p_ACCOUNT_ESP_SYNC(v_INDEX).ESP_ACCOUNT_NUMBER,SYSDATE);
               END IF;
            END IF;
         END IF;
      END IF;
      v_INDEX := p_ACCOUNT_ESP_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_ACCOUNT_ESP_AFTER;

PROCEDURE SYNC_ACCOUNT_LOSS_FACTOR_AFTER(p_PERIOD_BEGIN IN DATE, p_CASE_ID IN NUMBER, p_ACCOUNT_LOSS_FACTOR_SYNC IN OUT NOCOPY CDI_ACCNT_LOSS_FAC_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_ACCOUNT_LOSS_FACTOR_AFTER';
v_INDEX          PLS_INTEGER;
v_COUNT          PLS_INTEGER;
v_ACCOUNT_ID     PLS_INTEGER;
v_LOSS_FACTOR_ID PLS_INTEGER;
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_ROWID          ROWID;
v_OLD_BEGIN_DATE DATE;
v_OLD_END_DATE   DATE;
v_NEW_BEGIN_DATE DATE;
v_NEW_END_DATE   DATE;
v_CURRENT_KEY    VARCHAR2(64);
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   DELETE FROM ACCOUNT_LOSS_FACTOR WHERE BEGIN_DATE >= p_PERIOD_BEGIN AND CASE_ID = p_CASE_ID;
   UPDATE ACCOUNT_LOSS_FACTOR SET END_DATE = p_PERIOD_BEGIN - 1
   WHERE (END_DATE IS NULL OR END_DATE >= p_PERIOD_BEGIN)
      AND ACCOUNT_ID NOT IN (SELECT ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_MODEL_OPTION = 'Aggregate')
      AND CASE_ID = p_CASE_ID;
   v_INDEX := p_ACCOUNT_LOSS_FACTOR_SYNC.FIRST;
   WHILE v_INDEX <= p_ACCOUNT_LOSS_FACTOR_SYNC.LAST LOOP
      v_CURRENT_KEY := p_ACCOUNT_LOSS_FACTOR_SYNC(v_INDEX).ACCOUNT_IDENTIFIER;
      v_NEW_BEGIN_DATE := p_ACCOUNT_LOSS_FACTOR_SYNC(v_INDEX).BEGIN_DATE;
      v_NEW_END_DATE := p_ACCOUNT_LOSS_FACTOR_SYNC(v_INDEX).END_DATE;
      SELECT MAX(LOSS_FACTOR_ID) INTO v_LOSS_FACTOR_ID FROM LOSS_FACTOR WHERE LOSS_FACTOR_NAME = p_ACCOUNT_LOSS_FACTOR_SYNC(v_INDEX).LOSS_FACTOR_NAME;
      IF v_LOSS_FACTOR_ID IS NULL THEN
         LOGS.LOG_ERROR('Loss Factor Associated With The External Identifier "' || p_ACCOUNT_LOSS_FACTOR_SYNC(v_INDEX).LOSS_FACTOR_NAME || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ELSE
         SELECT MAX(ACCOUNT_ID) INTO v_ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_EXTERNAL_IDENTIFIER = v_CURRENT_KEY;
         IF v_ACCOUNT_ID IS NULL THEN
            LOGS.LOG_ERROR('Account Associated With The External Identifier "' || v_CURRENT_KEY || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
         ELSE
            BEGIN
               SELECT ROWID, BEGIN_DATE, END_DATE INTO v_ROWID, v_OLD_BEGIN_DATE, v_OLD_END_DATE
               FROM ACCOUNT_LOSS_FACTOR
               WHERE CASE_ID = p_CASE_ID
                  AND ACCOUNT_ID = v_ACCOUNT_ID
                  AND LOSS_FACTOR_ID = v_LOSS_FACTOR_ID
                  AND (BEGIN_DATE BETWEEN v_NEW_BEGIN_DATE AND NVL(v_NEW_END_DATE + 1, CONSTANTS.HIGH_DATE) OR NVL(END_DATE, CONSTANTS.HIGH_DATE) BETWEEN v_NEW_BEGIN_DATE - 1 AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) OR (v_NEW_BEGIN_DATE >= BEGIN_DATE AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) <= NVL(END_DATE, CONSTANTS.HIGH_DATE)));
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_ROWID := NULL;
            END;
            IF v_ROWID IS NOT NULL THEN
               UPDATE ACCOUNT_LOSS_FACTOR SET
                  BEGIN_DATE = LEAST(v_NEW_BEGIN_DATE, BEGIN_DATE),
                  END_DATE = DECODE(GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE)),CONSTANTS.HIGH_DATE,NULL,GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE))),
                  ENTRY_DATE = SYSDATE
               WHERE ROWID = v_ROWID;
            ELSE
               INSERT INTO ACCOUNT_LOSS_FACTOR(CASE_ID,ACCOUNT_ID,LOSS_FACTOR_ID,BEGIN_DATE,END_DATE,ENTRY_DATE)
               VALUES(p_CASE_ID,v_ACCOUNT_ID,v_LOSS_FACTOR_ID,v_NEW_BEGIN_DATE,v_NEW_END_DATE,SYSDATE);
            END IF;
         END IF;
      END IF;
      v_INDEX := p_ACCOUNT_LOSS_FACTOR_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_ACCOUNT_LOSS_FACTOR_AFTER;

PROCEDURE SYNC_ACCOUNT_USG_FACTOR_AFTER(p_PERIOD_BEGIN IN DATE, p_CASE_ID IN NUMBER, p_ACCOUNT_USAGE_FACTOR_SYNC IN OUT NOCOPY CDI_ACCNT_USG_FAC_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_ACCOUNT_USG_FACTOR_AFTER';
v_INDEX          PLS_INTEGER;
v_COUNT          PLS_INTEGER;
v_ACCOUNT_ID     PLS_INTEGER;
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_ROWID          ROWID;
v_OLD_BEGIN_DATE DATE;
v_OLD_END_DATE   DATE;
v_NEW_BEGIN_DATE DATE;
v_NEW_END_DATE   DATE;
v_CURRENT_KEY    VARCHAR2(64);
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   DELETE ACCOUNT_USAGE_FACTOR WHERE BEGIN_DATE >= p_PERIOD_BEGIN AND CASE_ID = p_CASE_ID;
   UPDATE ACCOUNT_USAGE_FACTOR SET END_DATE = p_PERIOD_BEGIN - 1 WHERE (END_DATE IS NULL OR END_DATE >= p_PERIOD_BEGIN) AND CASE_ID = p_CASE_ID;
   v_INDEX := p_ACCOUNT_USAGE_FACTOR_SYNC.FIRST;
   WHILE v_INDEX <= p_ACCOUNT_USAGE_FACTOR_SYNC.LAST LOOP
      v_CURRENT_KEY := p_ACCOUNT_USAGE_FACTOR_SYNC(v_INDEX).ACCOUNT_IDENTIFIER;
      v_NEW_BEGIN_DATE := p_ACCOUNT_USAGE_FACTOR_SYNC(v_INDEX).BEGIN_DATE;
      v_NEW_END_DATE := p_ACCOUNT_USAGE_FACTOR_SYNC(v_INDEX).END_DATE;
      SELECT MAX(ACCOUNT_ID) INTO v_ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_EXTERNAL_IDENTIFIER = v_CURRENT_KEY;
      IF v_ACCOUNT_ID IS NULL THEN
         LOGS.LOG_ERROR('Account Associated With The External Identifier "' || v_CURRENT_KEY || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ELSE
         BEGIN
            SELECT ROWID, BEGIN_DATE, END_DATE INTO v_ROWID, v_OLD_BEGIN_DATE, v_OLD_END_DATE
            FROM ACCOUNT_USAGE_FACTOR
            WHERE ACCOUNT_ID = v_ACCOUNT_ID
               AND FACTOR_VAL = p_ACCOUNT_USAGE_FACTOR_SYNC(v_INDEX).FACTOR_VAL
               AND CASE_ID = p_CASE_ID
               AND (BEGIN_DATE BETWEEN v_NEW_BEGIN_DATE AND NVL(v_NEW_END_DATE + 1, CONSTANTS.HIGH_DATE) OR NVL(END_DATE, CONSTANTS.HIGH_DATE) BETWEEN v_NEW_BEGIN_DATE - 1 AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) OR (v_NEW_BEGIN_DATE >= BEGIN_DATE AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) <= NVL(END_DATE, CONSTANTS.HIGH_DATE)));
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
               v_ROWID := NULL;
         END;
         IF v_ROWID IS NOT NULL THEN
            UPDATE ACCOUNT_USAGE_FACTOR SET
               BEGIN_DATE = LEAST(v_NEW_BEGIN_DATE, BEGIN_DATE),
               END_DATE = DECODE(GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE)),CONSTANTS.HIGH_DATE,NULL,GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE))),
               ENTRY_DATE = SYSDATE
            WHERE ROWID = v_ROWID;
         ELSE
            INSERT INTO ACCOUNT_USAGE_FACTOR(CASE_ID,ACCOUNT_ID,BEGIN_DATE,END_DATE,FACTOR_VAL,ENTRY_DATE)
            VALUES(p_CASE_ID,v_ACCOUNT_ID,v_NEW_BEGIN_DATE,v_NEW_END_DATE,p_ACCOUNT_USAGE_FACTOR_SYNC(v_INDEX).FACTOR_VAL,SYSDATE);
         END IF;
      END IF;
      v_INDEX := p_ACCOUNT_USAGE_FACTOR_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_ACCOUNT_USG_FACTOR_AFTER;

PROCEDURE SYNC_ACCOUNT_CALENDAR_AFTER(p_PERIOD_BEGIN IN DATE, p_CALENDAR_TYPE IN VARCHAR2, p_ACCOUNT_CALENDAR_SYNC IN OUT NOCOPY CDI_ACCOUNT_CALENDAR_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_ACCOUNT_CALENDAR_AFTER';
v_INDEX          PLS_INTEGER;
v_COUNT          PLS_INTEGER;
v_ACCOUNT_ID     PLS_INTEGER;
v_CALENDAR_ID    PLS_INTEGER;
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_ROWID          ROWID;
v_OLD_BEGIN_DATE DATE;
v_OLD_END_DATE   DATE;
v_NEW_BEGIN_DATE DATE;
v_NEW_END_DATE   DATE;
v_CURRENT_KEY    VARCHAR2(64);
v_BASE_CASE_ID PLS_INTEGER;----
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   DELETE FROM ACCOUNT_CALENDAR WHERE BEGIN_DATE >= p_PERIOD_BEGIN AND CALENDAR_TYPE = p_CALENDAR_TYPE;
   UPDATE ACCOUNT_CALENDAR SET END_DATE = p_PERIOD_BEGIN - 1
   WHERE (END_DATE IS NULL OR END_DATE >= p_PERIOD_BEGIN)
      AND ACCOUNT_ID NOT IN (SELECT ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_MODEL_OPTION = 'Aggregate')
      AND CALENDAR_TYPE = p_CALENDAR_TYPE;
   v_INDEX := p_ACCOUNT_CALENDAR_SYNC.FIRST;
   WHILE v_INDEX <= p_ACCOUNT_CALENDAR_SYNC.LAST LOOP
      v_CURRENT_KEY := p_ACCOUNT_CALENDAR_SYNC(v_INDEX).ACCOUNT_IDENTIFIER;
      v_NEW_BEGIN_DATE := p_ACCOUNT_CALENDAR_SYNC(v_INDEX).BEGIN_DATE;
      v_NEW_END_DATE := p_ACCOUNT_CALENDAR_SYNC(v_INDEX).END_DATE;
      v_BASE_CASE_ID :=p_ACCOUNT_CALENDAR_SYNC(v_INDEX).CASE_ID;
      SELECT MAX(ACCOUNT_ID) INTO v_ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_EXTERNAL_IDENTIFIER = v_CURRENT_KEY;
      IF v_ACCOUNT_ID IS NULL THEN
         LOGS.LOG_ERROR('Account Associated With The External Identifier "' || v_CURRENT_KEY || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ELSE
         SELECT MAX(CALENDAR_ID) INTO v_CALENDAR_ID FROM CALENDAR WHERE CALENDAR_NAME = p_ACCOUNT_CALENDAR_SYNC(v_INDEX).CALENDAR_NAME;
         IF v_CALENDAR_ID IS NULL THEN
            LOGS.LOG_ERROR('Calendar Associated With The External Identifier "' || p_ACCOUNT_CALENDAR_SYNC(v_INDEX).CALENDAR_NAME || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
         ELSE
            BEGIN
               SELECT ROWID, BEGIN_DATE, END_DATE INTO v_ROWID, v_OLD_BEGIN_DATE, v_OLD_END_DATE
               FROM ACCOUNT_CALENDAR
               WHERE CASE_ID = v_BASE_CASE_ID
                  AND ACCOUNT_ID = v_ACCOUNT_ID
                  AND CALENDAR_ID = v_CALENDAR_ID
                  AND CALENDAR_TYPE = p_CALENDAR_TYPE
                  AND (BEGIN_DATE BETWEEN v_NEW_BEGIN_DATE AND NVL(v_NEW_END_DATE + 1, CONSTANTS.HIGH_DATE) OR NVL(END_DATE, CONSTANTS.HIGH_DATE) BETWEEN v_NEW_BEGIN_DATE - 1 AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) OR (v_NEW_BEGIN_DATE >= BEGIN_DATE AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) <= NVL(END_DATE, CONSTANTS.HIGH_DATE)));
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_ROWID := NULL;
            END;
            IF v_ROWID IS NOT NULL THEN
               UPDATE ACCOUNT_CALENDAR SET
                  BEGIN_DATE = LEAST(v_NEW_BEGIN_DATE, BEGIN_DATE),
                  END_DATE = DECODE(GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE)), CONSTANTS.HIGH_DATE, NULL, GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE))),
                  ENTRY_DATE = SYSDATE
               WHERE ROWID = v_ROWID;
            ELSE
               INSERT INTO ACCOUNT_CALENDAR(CASE_ID,ACCOUNT_ID,CALENDAR_ID,CALENDAR_TYPE,BEGIN_DATE,END_DATE,ENTRY_DATE)
               VALUES(GA.BASE_CASE_ID,v_ACCOUNT_ID,v_CALENDAR_ID,p_CALENDAR_TYPE,v_NEW_BEGIN_DATE,v_NEW_END_DATE,SYSDATE);
            END IF;
         END IF;
      END IF;
      v_INDEX := p_ACCOUNT_CALENDAR_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_ACCOUNT_CALENDAR_AFTER;

PROCEDURE SYNC_ACCOUNT_PRODUCT_AFTER(p_PERIOD_BEGIN IN DATE, p_ACCOUNT_PRODUCT_SYNC IN OUT NOCOPY CDI_ACCOUNT_PRODUCT_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_ACCOUNT_PRODUCT_AFTER';
v_INDEX          PLS_INTEGER;
v_COUNT          PLS_INTEGER;
v_ACCOUNT_ID     PLS_INTEGER;
v_PRODUCT_ID     PLS_INTEGER;
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_ROWID          ROWID;
v_OLD_BEGIN_DATE DATE;
v_OLD_END_DATE   DATE;
v_NEW_BEGIN_DATE DATE;
v_NEW_END_DATE   DATE;
v_CURRENT_KEY    VARCHAR2(64);
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   DELETE FROM ACCOUNT_PRODUCT WHERE BEGIN_DATE >= p_PERIOD_BEGIN;
   UPDATE ACCOUNT_PRODUCT SET END_DATE = p_PERIOD_BEGIN - 1
   WHERE (END_DATE IS NULL OR END_DATE >= p_PERIOD_BEGIN)
      AND ACCOUNT_ID NOT IN (SELECT ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_MODEL_OPTION = 'Aggregate');
   v_INDEX := p_ACCOUNT_PRODUCT_SYNC.FIRST;
   WHILE v_INDEX <= p_ACCOUNT_PRODUCT_SYNC.LAST LOOP
      v_CURRENT_KEY := p_ACCOUNT_PRODUCT_SYNC(v_INDEX).ACCOUNT_IDENTIFIER;
      v_NEW_BEGIN_DATE := p_ACCOUNT_PRODUCT_SYNC(v_INDEX).BEGIN_DATE;
      v_NEW_END_DATE := p_ACCOUNT_PRODUCT_SYNC(v_INDEX).END_DATE;
      SELECT MAX(ACCOUNT_ID) INTO v_ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_EXTERNAL_IDENTIFIER = v_CURRENT_KEY;
      IF v_ACCOUNT_ID IS NULL THEN
         LOGS.LOG_ERROR('Account Associated With The External Identifier "' || v_CURRENT_KEY || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ELSE
         SELECT MAX(PRODUCT_ID) INTO v_PRODUCT_ID FROM PRODUCT WHERE PRODUCT_EXTERNAL_IDENTIFIER = p_ACCOUNT_PRODUCT_SYNC(v_INDEX).PRODUCT_EXTERNAL_IDENTIFIER;
         IF v_PRODUCT_ID IS NULL THEN
            LOGS.LOG_ERROR('Product Associated With The External Identifier "' || p_ACCOUNT_PRODUCT_SYNC(v_INDEX).PRODUCT_EXTERNAL_IDENTIFIER || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
         ELSE
            BEGIN
               SELECT ROWID, BEGIN_DATE, END_DATE INTO v_ROWID, v_OLD_BEGIN_DATE, v_OLD_END_DATE
               FROM ACCOUNT_PRODUCT
               WHERE CASE_ID = GA.BASE_CASE_ID
                  AND ACCOUNT_ID = v_ACCOUNT_ID
                  AND PRODUCT_ID = v_PRODUCT_ID
                  AND PRODUCT_TYPE = p_ACCOUNT_PRODUCT_SYNC(v_INDEX).PRODUCT_TYPE
                  AND(BEGIN_DATE BETWEEN v_NEW_BEGIN_DATE AND NVL(v_NEW_END_DATE + 1, CONSTANTS.HIGH_DATE) OR NVL(END_DATE, CONSTANTS.HIGH_DATE) BETWEEN v_NEW_BEGIN_DATE - 1 AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) OR (v_NEW_BEGIN_DATE >= BEGIN_DATE AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) <= NVL(END_DATE, CONSTANTS.HIGH_DATE)));
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_ROWID := NULL;
            END;
            IF v_ROWID IS NOT NULL THEN
               UPDATE ACCOUNT_PRODUCT SET
                  BEGIN_DATE = LEAST(v_NEW_BEGIN_DATE, BEGIN_DATE),
                  END_DATE = DECODE(GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE)),CONSTANTS.HIGH_DATE,NULL,GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE))),
                  ENTRY_DATE = SYSDATE
               WHERE ROWID = v_ROWID;
            ELSE
               INSERT INTO ACCOUNT_PRODUCT(CASE_ID,ACCOUNT_ID,PRODUCT_ID,PRODUCT_TYPE,BEGIN_DATE,END_DATE,ENTRY_DATE)
               VALUES(GA.BASE_CASE_ID,v_ACCOUNT_ID,v_PRODUCT_ID,p_ACCOUNT_PRODUCT_SYNC(v_INDEX).PRODUCT_TYPE,v_NEW_BEGIN_DATE,v_NEW_END_DATE,SYSDATE);
            END IF;
         END IF;
      END IF;
     v_INDEX := p_ACCOUNT_PRODUCT_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_ACCOUNT_PRODUCT_AFTER;

PROCEDURE PUT_WEATHER_VALUES
   (
   p_STATION_NAME   IN VARCHAR2,
   p_PARAMETER_NAME IN VARCHAR2,
   p_PARAMETER_CODE IN VARCHAR2,
   p_PARAMETER_DATE IN DATE,
   p_TIME_ZONE      IN VARCHAR2,
   p_PARAMETER_VALS IN OUT NOCOPY Ga.NUMBER_TABLE
   ) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'PUT_WEATHER_VALUES';
v_STATION_ID   PLS_INTEGER;
v_PARAMETER_ID PLS_INTEGER;
v_MARK_TIME    PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   ID.ID_FOR_WEATHER_STATION(p_STATION_NAME, v_STATION_ID);
   IF v_STATION_ID < 0 THEN
      LOGS.LOG_ERROR('Weather Station Associated With The Identifier "' || p_STATION_NAME || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   ELSE
      ID.ID_FOR_WEATHER_PARAMETER(p_PARAMETER_NAME, v_PARAMETER_ID);
      IF v_PARAMETER_ID < 0 THEN
         LOGS.LOG_ERROR('Weather Parameter Associated With The Identifier "' || p_PARAMETER_NAME || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ELSE
         WR.STATION_PARAMETER_READINGS(v_STATION_ID, v_PARAMETER_ID, p_PARAMETER_CODE, p_PARAMETER_DATE, p_TIME_ZONE, p_PARAMETER_VALS);
      END IF;
   END IF;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END PUT_WEATHER_VALUES;

PROCEDURE SYNC_POOL(p_POOL_SYNC IN OUT NOCOPY CDI_POOL_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_POOL';
v_INDEX   PLS_INTEGER;
v_UPDATE  PLS_INTEGER := 0;
v_INSERT  PLS_INTEGER := 0;
v_POOL_ID PLS_INTEGER;
v_POOL POOL%ROWTYPE; 
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   IF p_POOL_SYNC IS NULL OR p_POOL_SYNC.COUNT = 0 THEN
      RETURN;
   END IF;
   v_INDEX := p_POOL_SYNC.FIRST;
   WHILE v_INDEX <= p_POOL_SYNC.LAST LOOP
      SELECT MAX(POOL_ID) INTO v_POOL_ID FROM POOL WHERE POOL_NAME = p_POOL_SYNC(v_INDEX).POOL_NAME;
      IF v_POOL_ID IS NULL THEN
         INSERT INTO POOL A(POOL_ID,POOL_NAME,POOL_ALIAS,POOL_DESC,POOL_EXTERNAL_IDENTIFIER,POOL_STATUS,POOL_CATEGORY,POOL_EXCLUDE_LOAD_SCHEDULE,IS_TOU_POOL,ENTRY_DATE,POLR_TYPE,IS_ID_SALES,TARIFF_ID,PLC_BAND,REPORTED_SEGMENT,VOLTAGE_CLASS)
         VALUES(
            OID.NEXTVAL,
            p_POOL_SYNC(v_INDEX).POOL_NAME,
            p_POOL_SYNC(v_INDEX).POOL_ALIAS,
            p_POOL_SYNC(v_INDEX).POOL_DESC,
            p_POOL_SYNC(v_INDEX).POOL_EXTERNAL_IDENTIFIER,
            p_POOL_SYNC(v_INDEX).POOL_STATUS,
            p_POOL_SYNC(v_INDEX).POOL_CATEGORY,
            p_POOL_SYNC(v_INDEX).POOL_EXCLUDE_LOAD_SCHEDULE,
            NVL(p_POOL_SYNC(v_INDEX).IS_TOU_POOL,0),
            SYSDATE,
            p_POOL_SYNC(v_INDEX).POLR_TYPE ,
            p_POOL_SYNC(v_INDEX).IS_ID_SALES,
            p_POOL_SYNC(v_INDEX).TARIFF_ID,
            p_POOL_SYNC(v_INDEX).PLC_BAND,
            p_POOL_SYNC(v_INDEX).REPORTED_SEGMENT,
            p_POOL_SYNC(v_INDEX).VOLTAGE_CLASS);
         v_INSERT := v_INSERT + 1;
      ELSE
         SELECT * INTO v_POOL FROM POOL WHERE POOL_ID = v_POOL_ID;
         IF NOT (v_POOL.POOL_STATUS = p_POOL_SYNC(v_INDEX).POOL_STATUS AND v_POOL.POOL_CATEGORY = p_POOL_SYNC(v_INDEX).POOL_CATEGORY AND v_POOL.POOL_EXCLUDE_LOAD_SCHEDULE = p_POOL_SYNC(v_INDEX).POOL_EXCLUDE_LOAD_SCHEDULE AND v_POOL.REPORTED_SEGMENT = p_POOL_SYNC(v_INDEX).REPORTED_SEGMENT AND v_POOL.VOLTAGE_CLASS = p_POOL_SYNC(v_INDEX).VOLTAGE_CLASS) THEN
            UPDATE POOL SET
               POOL_STATUS                = p_POOL_SYNC(v_INDEX).POOL_STATUS,
               POOL_CATEGORY              = p_POOL_SYNC(v_INDEX).POOL_CATEGORY,
               POOL_EXCLUDE_LOAD_SCHEDULE = p_POOL_SYNC(v_INDEX).POOL_EXCLUDE_LOAD_SCHEDULE,
               REPORTED_SEGMENT           = p_POOL_SYNC(v_INDEX).REPORTED_SEGMENT,
               VOLTAGE_CLASS              = p_POOL_SYNC(v_INDEX).VOLTAGE_CLASS,
               ENTRY_DATE                 = SYSDATE
            WHERE POOL_ID = v_POOL_ID;
            v_UPDATE := v_UPDATE + SQL%ROWCOUNT;
         END IF;
      END IF;
      v_INDEX := p_POOL_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Insert Count: ' || TO_CHAR(v_INSERT) || ', Update Count: ' || TO_CHAR(v_UPDATE) || ', Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_POOL;

PROCEDURE PUT_ONE_CALENDAR_FOR_ALL(p_CALENDAR_NAME IN VARCHAR2, p_CALENDAR_TYPE IN VARCHAR2) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'PUT_ONE_CALENDAR_FOR_ALL';
v_CALENDAR_ID PLS_INTEGER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   ID.ID_FOR_CALENDAR(p_CALENDAR_NAME, v_CALENDAR_ID);
   IF v_CALENDAR_ID < 0 THEN
      LOGS.LOG_ERROR('Calendar Associated With The Identifier "' || p_CALENDAR_NAME || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   ELSE
      INSERT INTO ACCOUNT_CALENDAR(CASE_ID,ACCOUNT_ID,CALENDAR_ID,CALENDAR_TYPE,BEGIN_DATE,ENTRY_DATE)
      SELECT GA.BASE_CASE_ID, ACCOUNT_ID, v_CALENDAR_ID, p_CALENDAR_TYPE, CONSTANTS.LOW_DATE, SYSDATE
      FROM ACCOUNT A
      WHERE NOT EXISTS (SELECT NULL FROM ACCOUNT_CALENDAR WHERE ACCOUNT_ID = A.ACCOUNT_ID AND CALENDAR_TYPE = p_CALENDAR_TYPE);
   END IF;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END PUT_ONE_CALENDAR_FOR_ALL;

PROCEDURE PUT_ONE_SERVICE_LOC_FOR_ALL(p_SERVICE_LOCATION_NAME IN VARCHAR2) IS
v_PROCEDURE_NAME VARCHAR2(30) := 'PUT_ONE_SERVICE_LOC_FOR_ALL';
v_SERVICE_LOCATION_ID PLS_INTEGER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   ID.ID_FOR_SERVICE_LOCATION(p_SERVICE_LOCATION_NAME, v_SERVICE_LOCATION_ID);
   INSERT INTO ACCOUNT_SERVICE_LOCATION(ACCOUNT_ID, SERVICE_LOCATION_ID, BEGIN_DATE, ENTRY_DATE)
   SELECT ACCOUNT_ID, v_SERVICE_LOCATION_ID, CONSTANTS.LOW_DATE, CURRENT_DATE
   FROM ACCOUNT A
   WHERE NOT EXISTS(SELECT NULL FROM ACCOUNT_SERVICE_LOCATION WHERE ACCOUNT_ID = A.ACCOUNT_ID);
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END PUT_ONE_SERVICE_LOC_FOR_ALL;

PROCEDURE SYNC_ACCOUNT_SERVICE_LOCATION(p_PERIOD_BEGIN IN DATE, p_ACCOUNT_SERV_LOC_SYNC IN OUT NOCOPY CDI_ACCNT_SVC_LOC_SYNC_LIST) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'SYNC_ACCOUNT_SERVICE_LOCATION';
v_INDEX               PLS_INTEGER;
v_COUNT               PLS_INTEGER;
v_ACCOUNT_ID          PLS_INTEGER;
v_SERVICE_LOCATION_ID PLS_INTEGER;
v_MARK_TIME           PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_ROWID               ROWID;
v_OLD_BEGIN_DATE      DATE;
v_OLD_END_DATE        DATE;
v_NEW_BEGIN_DATE      DATE;
v_NEW_END_DATE        DATE;
v_CURRENT_KEY         VARCHAR2(64);
BEGIN
   LOGS.LOG_INFO_DETAIL(c_ENTRY, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   DELETE ACCOUNT_SERVICE_LOCATION WHERE BEGIN_DATE >= p_PERIOD_BEGIN;
   UPDATE ACCOUNT_SERVICE_LOCATION SET END_DATE = p_PERIOD_BEGIN - 1
   WHERE (END_DATE IS NULL OR END_DATE >= p_PERIOD_BEGIN)
      AND ACCOUNT_ID NOT IN (SELECT ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_MODEL_OPTION = 'Aggregate');
   v_INDEX := p_ACCOUNT_SERV_LOC_SYNC.FIRST;
   WHILE v_INDEX <= p_ACCOUNT_SERV_LOC_SYNC.LAST LOOP
      v_CURRENT_KEY := p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).ACCOUNT_EXTERNAL_IDENTIFIER;
      v_NEW_BEGIN_DATE := p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).BEGIN_DATE;
      v_NEW_END_DATE := p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).END_DATE;
      SELECT MAX(ACCOUNT_ID) INTO v_ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_EXTERNAL_IDENTIFIER = v_CURRENT_KEY;
      IF v_ACCOUNT_ID IS NULL THEN
         LOGS.LOG_ERROR('Account Associated With The External Identifier "' || v_CURRENT_KEY || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ELSE
         SELECT MAX(SERVICE_LOCATION_ID) INTO v_SERVICE_LOCATION_ID FROM SERVICE_LOCATION WHERE EXTERNAL_IDENTIFIER = p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).SERV_LOC_EXTERNAL_IDENTIFIER;
         IF v_SERVICE_LOCATION_ID IS NULL THEN
            LOGS.LOG_ERROR('Service Location Associated With The External Identifier "' || p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).SERV_LOC_EXTERNAL_IDENTIFIER || '" Is Not Defined', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
         ELSE
            BEGIN
               SELECT ROWID, BEGIN_DATE, END_DATE INTO v_ROWID, v_OLD_BEGIN_DATE, v_OLD_END_DATE
               FROM ACCOUNT_SERVICE_LOCATION
               WHERE ACCOUNT_ID = v_ACCOUNT_ID
                  AND SERVICE_LOCATION_ID = v_SERVICE_LOCATION_ID
                  AND (BEGIN_DATE BETWEEN v_NEW_BEGIN_DATE AND NVL(v_NEW_END_DATE + 1, CONSTANTS.HIGH_DATE) OR NVL(END_DATE, CONSTANTS.HIGH_DATE) BETWEEN v_NEW_BEGIN_DATE - 1 AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) OR (v_NEW_BEGIN_DATE >= BEGIN_DATE AND NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE) <= NVL(END_DATE, CONSTANTS.HIGH_DATE)))
                  AND EDC_IDENTIFIER = p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).EDC_IDENTIFIER
                  AND ESP_IDENTIFIER = p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).ESP_IDENTIFIER;
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  v_ROWID := NULL;
            END;
            IF v_ROWID IS NOT NULL THEN
               UPDATE ACCOUNT_SERVICE_LOCATION SET
                  BEGIN_DATE = LEAST(v_NEW_BEGIN_DATE, BEGIN_DATE),
                  END_DATE = DECODE(GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE)), CONSTANTS.HIGH_DATE, NULL, GREATEST(NVL(v_NEW_END_DATE, CONSTANTS.HIGH_DATE), NVL(END_DATE, CONSTANTS.HIGH_DATE))),
                  ENTRY_DATE = SYSDATE
               WHERE  ROWID = v_ROWID;
            ELSE
               BEGIN
                  INSERT INTO ACCOUNT_SERVICE_LOCATION(ACCOUNT_ID,SERVICE_LOCATION_ID,BEGIN_DATE,END_DATE,EDC_IDENTIFIER,ESP_IDENTIFIER,ENTRY_DATE)
                  VALUES(v_ACCOUNT_ID,v_SERVICE_LOCATION_ID,v_NEW_BEGIN_DATE,v_NEW_END_DATE,p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).EDC_IDENTIFIER,p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).ESP_IDENTIFIER,SYSDATE);
               EXCEPTION
                  WHEN OTHERS THEN
                     ERRS.LOG_AND_CONTINUE(TO_CHAR(v_ACCOUNT_ID) || ',' || TO_CHAR(v_SERVICE_LOCATION_ID) || ',' || TO_CHAR(v_NEW_BEGIN_DATE, c_DATE_FORMAT) || ',' || TO_CHAR(v_NEW_END_DATE, c_DATE_FORMAT) || ',' || p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).EDC_IDENTIFIER || ',' || p_ACCOUNT_SERV_LOC_SYNC(v_INDEX).ESP_IDENTIFIER, p_PROCEDURE_NAME => v_PROCEDURE_NAME);
               END;   
            END IF;
         END IF;
      END IF;
      v_INDEX := p_ACCOUNT_SERV_LOC_SYNC.NEXT(v_INDEX);
   END LOOP;
   LOGS.LOG_INFO_DETAIL('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END SYNC_ACCOUNT_SERVICE_LOCATION;
END CDI_BK;
/
