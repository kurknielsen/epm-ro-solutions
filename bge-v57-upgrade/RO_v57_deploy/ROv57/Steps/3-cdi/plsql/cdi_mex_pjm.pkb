CREATE OR REPLACE PACKAGE BODY CDI_MEX_PJM AS

-- Package Constants --
c_PACKAGE                      CONSTANT VARCHAR2(16) := 'CDI_MEX_PJM';
c_SYSTEM_SETTING_BOOK          CONSTANT VARCHAR2(32) := 'Custom Data Interface';
c_SYSTEM_SETTING_CHAPTER       CONSTANT VARCHAR2(16) := 'Market Exchange';
c_SYSTEM_SETTING_PAGE          CONSTANT VARCHAR2(16) := 'PJM';
c_SETTING_LOG_ONLY             CONSTANT VARCHAR2(32) := 'Log Only';
c_SETTING_SANDBOX              CONSTANT VARCHAR2(32) := 'Sandbox';
c_SETTING_DEBUG                CONSTANT VARCHAR2(32) := 'Debug';
c_PJM_BROWSERLESS_INTERFACE    CONSTANT VARCHAR2(32) := 'pjmbrowserless';
c_PJM_ERPM_MARKET              CONSTANT VARCHAR2(8)  := 'pjmerpm';
c_SUBMIT_ACTION                CONSTANT VARCHAR2(8)  := 'submit';
c_QUERY_ACTION                 CONSTANT VARCHAR2(8)  := 'query';
c_SUBMIT_EXCHANGE_NAME         CONSTANT VARCHAR2(8)  := 'Submit';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'YYYY-MM-DD';
c_NO                           CONSTANT CHAR(1)      := 'N';
c_YES                          CONSTANT CHAR(1)      := 'Y';

-- Package Globals --
l_LOG_ONLY                     NUMBER(1) := 0;

FUNCTION SAFE_STRING
   (
   p_XML IN XMLTYPE,
   p_XPATH IN VARCHAR2,
   p_NAMESPACE IN VARCHAR2 DEFAULT NULL
   ) RETURN VARCHAR2 AS
--Answer The Text For A Path Otherwise Answer Null If It Does Not Exist --
v_XMLTMP XMLTYPE;
BEGIN
   v_XMLTMP := XMLTYPE.EXTRACT(p_XML, p_XPATH, p_NAMESPACE);
   RETURN CASE WHEN v_XMLTMP IS NULL THEN NULL ELSE v_XMLTMP.GETSTRINGVAL END;
END SAFE_STRING;

PROCEDURE RUN_PJM_BROWSERLESS
   (
   p_CREDENTIALS IN MEX_CREDENTIALS,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_PARAMETER_MAP IN MEX_UTIL.PARAMETER_MAP,
   p_REQUEST_APPLICATION IN VARCHAR2, -- esched|msrs|emeter --
   p_REQUEST_DIRECTORY IN VARCHAR2, -- download|upload-- 
   p_REQUEST IN CLOB DEFAULT NULL,
   p_REQUEST_CONTENTTYPE IN VARCHAR2 DEFAULT c_CONTENTTYPE,
   p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER,
   p_RESPONSE OUT CLOB,
   p_STATUS OUT NUMBER
   ) AS
v_PROCEDURE VARCHAR2(32) := 'RUN_PJM_BROWSERLESS';
v_PARAMETER_MAP MEX_UTIL.PARAMETER_MAP := p_PARAMETER_MAP;
v_RESULT MEX_RESULT;
BEGIN
   LOGS.LOG_INFO('Entry');
   l_LOG_ONLY := CASE WHEN NVL(UPPER(SUBSTR(GET_DICTIONARY_VALUE(c_SETTING_SANDBOX, GA.GLOBAL_MODEL, c_SYSTEM_SETTING_BOOK, c_SYSTEM_SETTING_CHAPTER, c_SYSTEM_SETTING_PAGE),1,1)), c_NO) IN (c_YES, '1', 'T') THEN 1 ELSE 0 END;
-- Append To The Parameter Map --
   v_PARAMETER_MAP(c_SANDBOX) := CASE WHEN NVL(UPPER(SUBSTR(GET_DICTIONARY_VALUE(c_SETTING_SANDBOX, GA.GLOBAL_MODEL, c_SYSTEM_SETTING_BOOK, c_SYSTEM_SETTING_CHAPTER, c_SYSTEM_SETTING_PAGE, p_REQUEST_APPLICATION),1,1)), c_NO) IN (c_YES, '1', 'T') THEN 'true' ELSE 'false' END;
   v_PARAMETER_MAP(c_DEBUG) := CASE WHEN NVL(UPPER(SUBSTR(GET_DICTIONARY_VALUE(c_SETTING_DEBUG, GA.GLOBAL_MODEL, c_SYSTEM_SETTING_BOOK, c_SYSTEM_SETTING_CHAPTER, c_SYSTEM_SETTING_PAGE, p_REQUEST_APPLICATION),1,1)), c_NO) IN (c_YES, '1', 'T') THEN 'true' ELSE 'false' END;
   v_PARAMETER_MAP(c_ACTION) := p_REQUEST_DIRECTORY;
   v_PARAMETER_MAP(c_START) := TO_CHAR(p_BEGIN_DATE, c_DATE_FORMAT);
   v_PARAMETER_MAP(c_STOP) := TO_CHAR(p_END_DATE, c_DATE_FORMAT);
-- Make The Request --
   v_RESULT := MEX_SWITCHBOARD.INVOKE(p_MARKET => c_PJM_BROWSERLESS_INTERFACE,
      p_CRED => p_CREDENTIALS,
      p_ACTION => p_REQUEST_APPLICATION,
      p_PARMS => p_PARAMETER_MAP,
      p_REQUEST_CONTENTTYPE => p_REQUEST_CONTENTTYPE,
      p_REQUEST => p_REQUEST,
      p_LOGGER => p_LOGGER,
      p_LOG_ONLY => l_LOG_ONLY);
-- Set The Return Status And Content Container --
   p_STATUS := v_RESULT.STATUS_CODE;
   IF v_RESULT.STATUS_CODE <> MEX_SWITCHBOARD.c_STATUS_SUCCESS THEN
      p_RESPONSE:= NULL;
   ELSE
      p_RESPONSE:= v_RESULT.RESPONSE;
   END IF;
   LOGS.LOG_INFO('Exit');
END RUN_PJM_BROWSERLESS;

PROCEDURE RUN_PJM_ACTION
   (
   p_CREDENTIALS IN MEX_CREDENTIALS,
   p_ACTION IN VARCHAR2, -- query|submit --
   p_XML_REQUEST_BODY IN XMLTYPE,
   p_PJM_NAMESPACE IN VARCHAR2,
   p_MARKET IN VARCHAR2, -- pjmerpm|pjmemkt|pjmeftr --
   p_XML_RESPONSE_BODY OUT XMLTYPE,
   p_STATUS OUT NUMBER,
   p_ERROR_MESSAGE OUT VARCHAR2,
   p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER
   ) AS

v_PROCEDURE VARCHAR2(32) := 'RUN_PJM_ACTION';
v_PJM_ERROR_XML XMLTYPE;
v_PJM_ERROR_CODE VARCHAR2(32);
v_PJM_ERROR_MESSAGE VARCHAR2(4000);
v_PJM_ERROR_LINE VARCHAR2(32);
v_PJM_TRANSACTION_CODE XMLTYPE;
v_RESULT MEX_RESULT;
v_REQUEST CLOB;

BEGIN
   LOGS.LOG_INFO('Entry');
   l_LOG_ONLY := CASE WHEN NVL(UPPER(SUBSTR(GET_DICTIONARY_VALUE(c_SETTING_SANDBOX, GA.GLOBAL_MODEL, c_SYSTEM_SETTING_BOOK, c_SYSTEM_SETTING_CHAPTER, c_SYSTEM_SETTING_PAGE),1,1)), c_NO) IN (c_YES, '1', 'T') THEN 1 ELSE 0 END;
-- Add XML To The Request --
   DBMS_LOB.CREATETEMPORARY(v_REQUEST, TRUE);
   DBMS_LOB.OPEN(v_REQUEST, DBMS_LOB.LOB_READWRITE);
   DBMS_LOB.APPEND(v_REQUEST, p_XML_REQUEST_BODY.GETCLOBVAL());
   DBMS_LOB.CLOSE(v_REQUEST);
-- Make The Request --
   v_RESULT := MEX_SWITCHBOARD.INVOKE(p_MARKET => p_MARKET,
      p_ACTION => p_ACTION,
      p_LOGGER => p_LOGGER,
      p_CRED => p_CREDENTIALS,
      p_REQUEST_CONTENTTYPE => c_CONTENTTYPE,
      p_REQUEST => v_REQUEST,
      p_LOG_ONLY => l_LOG_ONLY);
-- Set The Return Status And Content Container --
  p_STATUS := v_RESULT.STATUS_CODE;
   IF v_RESULT.STATUS_CODE <> MEX_SWITCHBOARD.c_STATUS_SUCCESS THEN
      p_XML_RESPONSE_BODY := NULL;
   ELSE
      p_XML_RESPONSE_BODY := XMLTYPE.CREATEXML(v_RESULT.RESPONSE);
-- If An Error Occured From PJM Parsing, Log It And Return Error --
      v_PJM_ERROR_XML := p_XML_RESPONSE_BODY.EXTRACT('/descendant::Error', p_PJM_NAMESPACE);
      IF v_PJM_ERROR_XML IS NOT NULL THEN
         v_PJM_ERROR_CODE := SAFE_STRING(v_PJM_ERROR_XML, 'Error/Code/text()', p_PJM_NAMESPACE);
         v_PJM_ERROR_MESSAGE := SAFE_STRING(v_PJM_ERROR_XML, 'Error/Text/text()', p_PJM_NAMESPACE);
         v_PJM_ERROR_LINE := SAFE_STRING(v_PJM_ERROR_XML, 'Error/Line/text()', p_PJM_NAMESPACE);
         p_ERROR_MESSAGE := v_PJM_ERROR_CODE || ' ' || v_PJM_ERROR_MESSAGE || ' ' || v_PJM_ERROR_LINE;
         p_LOGGER.LOG_EXCHANGE_ERROR('Parse Errors: ' || p_ERROR_MESSAGE);
         p_STATUS := MEX_SWITCHBOARD.c_STATUS_ERROR;
         p_XML_RESPONSE_BODY := NULL;
      END IF;
   END IF;
--Log The Transaction Code --
   IF p_ACTION = c_SUBMIT_ACTION AND NOT p_XML_RESPONSE_BODY IS NULL THEN
      v_PJM_TRANSACTION_CODE := p_XML_RESPONSE_BODY.EXTRACT('/SubmitResponse/Success/TransactionID/text()', p_PJM_NAMESPACE);
      IF NOT v_PJM_TRANSACTION_CODE IS NULL THEN
         p_LOGGER.LOG_EXCHANGE_IDENTIFIER(v_PJM_TRANSACTION_CODE.GETSTRINGVAL());
      END IF;
   END IF;
   LOGS.LOG_INFO('Exit');
END RUN_PJM_ACTION;

END CDI_MEX_PJM;
/
