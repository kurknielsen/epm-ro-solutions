CREATE OR REPLACE PACKAGE BODY CDI_TASK AS

c_PACKAGE_NAME                 CONSTANT VARCHAR2(32) := 'CDI_TASK';
c_STEP_NAME                    CONSTANT VARCHAR2(32) := '';
c_LOAD_SUPPLIER_CONTRACT_FILE  CONSTANT VARCHAR2(32) := 'CDI: Load Supplier Contract File';
c_IMPORT_SUPPLIER_CONTRACT     CONSTANT VARCHAR2(32) := 'CDI: Import Supplier Contract';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'MM/DD/YYYY';
c_DATE_TIME_FORMAT             CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH24:MI:SS';
c_PSE_IS_RETAIL_AGGREGATOR     CONSTANT NUMBER(1)    := 1;
c_IS_BILLING_ENTITY            CONSTANT NUMBER(1)    := 1;
c_PSE_IS_BACKUP_GENERATION     CONSTANT NUMBER(1)    := 0;
c_POLR_ESCHEDULE_EMAIL         CONSTANT VARCHAR2(32) := 'CDI: POLR eSchedule eMail';
c_POLR_7DAY_AHEAD_PLC_EMAIL    CONSTANT VARCHAR2(32) := 'CDI: POLR 7-Day Ahead PLC eMail';
c_POLR_ECAPACITY_EMAIL         CONSTANT VARCHAR2(32) := 'CDI: POLR eCapacity eMail';
c_POLR_ESCHEDULE_EMAIL_SUBJECT CONSTANT VARCHAR2(64) := 'POLR eSchedule Report-File Attached';
c_POLR_7DAY_EMAIL_SUBJECT      CONSTANT VARCHAR2(64) := '7-Day Ahead Capacity Report-File Attached';
c_POLR_ECAPACITY_SUBJECT       CONSTANT VARCHAR2(64) := 'POLR eCapacity Report-File Attached'; 
c_ACTIVE_STATUS                CONSTANT VARCHAR2(16) := 'Active';
c_MAIL_CATEGORY                CONSTANT VARCHAR2(8)  := 'HIGH';
c_EMAIL_SERVICE_ENABLED        CONSTANT BOOLEAN      := TRUE;
c_CRLF                         CONSTANT CHAR(2)      := CHR(13)||CHR(10);
c_TAB                          CONSTANT CHAR(1)      := CHR(9);
c_COMMA                        CONSTANT CHAR(1)      := ',';

l_EDC_ID                       PLS_INTEGER;
l_TP_ID                        PLS_INTEGER;
l_DEFAULT_PSE_ID               PLS_INTEGER;
l_INC_LIMIT_ID                 PLS_INTEGER;
l_DEC_LIMIT_ID                 PLS_INTEGER;

PROCEDURE INITIALIZE_INTERFACE AS
v_MESSAGE VARCHAR2(1000) := '';
BEGIN
   SELECT MAX(EDC_ID)   INTO l_EDC_ID         FROM ENERGY_DISTRIBUTION_COMPANY WHERE EDC_ALIAS = 'BGE';
   v_MESSAGE := v_MESSAGE || CASE WHEN l_EDC_ID IS NULL THEN 'EDC "BGE" Is Not Defined, ' ELSE '' END;  
   SELECT MAX(TP_ID)    INTO l_TP_ID          FROM TRANSMISSION_PROVIDER       WHERE TP_ALIAS =  'PJM';
   v_MESSAGE := v_MESSAGE || CASE WHEN l_TP_ID IS NULL THEN 'TP "PJM" Is Not Defined, ' ELSE '' END;  
   SELECT MAX(PSE_ID)   INTO l_DEFAULT_PSE_ID FROM PURCHASING_SELLING_ENTITY   WHERE  UPPER(PSE_ALIAS)   = 'DEFAULT';
   v_MESSAGE := v_MESSAGE || CASE WHEN l_DEFAULT_PSE_ID IS NULL THEN 'PSE "DEFAULT" Is Not Defined, ' ELSE '' END;  
   SELECT MAX(LIMIT_ID) INTO l_INC_LIMIT_ID   FROM CONTRACT_LIMIT              WHERE  UPPER(LIMIT_ALIAS) = 'INC THRESHOLD';
   v_MESSAGE := v_MESSAGE || CASE WHEN l_INC_LIMIT_ID IS NULL THEN 'Contract Limit "INC THRESHOLD" Is Not Defined, ' ELSE '' END;  
   SELECT MAX(LIMIT_ID) INTO l_DEC_LIMIT_ID   FROM CONTRACT_LIMIT              WHERE  UPPER(LIMIT_ALIAS) = 'DEC THRESHOLD';
   v_MESSAGE := v_MESSAGE || CASE WHEN l_DEC_LIMIT_ID IS NULL THEN 'Contract Limit "DEC THRESHOLD" Is Not Defined, ' ELSE '' END;
   IF v_MESSAGE <> '' THEN
      ERRS.LOG_AND_RAISE(RTRIM(v_MESSAGE,', '));
   END IF;
   LOGS.LOG_INFO('EDC_ID: ' || TO_CHAR(l_EDC_ID));
   LOGS.LOG_INFO('TP_ID: ' || TO_CHAR(l_TP_ID));
   LOGS.LOG_INFO('Default PSE_ID: ' || TO_CHAR(l_DEFAULT_PSE_ID));
   LOGS.LOG_INFO('INC_LIMIT_ID: ' || TO_CHAR(l_INC_LIMIT_ID));
   LOGS.LOG_INFO('DEC_LIMIT_ID: ' || TO_CHAR(l_DEC_LIMIT_ID));
END INITIALIZE_INTERFACE;

PROCEDURE DEFINE_CONTRACT
   (
   p_CONTRACT_TYPE      IN VARCHAR2,
   p_SUPPLIER_ID        IN VARCHAR2,
   p_SHORT_NAME         IN VARCHAR2,
   p_CONTRACT_ID        IN NUMBER,
   p_BEGIN_DATE         IN DATE,
   p_END_DATE           IN DATE,
   p_PSE_ID             IN NUMBER,
   p_INC_LIMIT_QUANTITY IN NUMBER,
   p_DEC_LIMIT_QUANTITY IN NUMBER,
   p_IMPORT_FILE_PATH   IN VARCHAR2
   ) AS
v_LENGTH PLS_INTEGER := NVL(LENGTH(p_CONTRACT_TYPE),0);
v_CONTRACT_NAME VARCHAR2(32) := CASE WHEN v_LENGTH > 0 THEN SUBSTR(p_SUPPLIER_ID,1,32-(v_LENGTH+1)) || '_' || p_CONTRACT_TYPE ELSE SUBSTR(p_SUPPLIER_ID,1,32) END; 
v_CONTRACT_ID PLS_INTEGER;
BEGIN
   ID.ID_FOR_INTERCHANGE_CONTRACT(v_CONTRACT_NAME, v_CONTRACT_ID);
   IO.PUT_INTERCHANGE_CONTRACT(
      o_OID                  => v_CONTRACT_ID,
      p_CONTRACT_NAME        => v_CONTRACT_NAME,
      p_CONTRACT_ALIAS       => v_CONTRACT_NAME,
      p_CONTRACT_DESC        => SUBSTR(p_SUPPLIER_ID,1,256),
      p_CONTRACT_ID          => CASE WHEN v_CONTRACT_ID = GA.NO_DATA_FOUND THEN CONSTANTS.NOT_ASSIGNED ELSE v_CONTRACT_ID END,
      p_CONTRACT_STATUS      => c_ACTIVE_STATUS,
      p_BEGIN_DATE           => p_BEGIN_DATE,
      p_END_DATE             => p_END_DATE,
      p_IS_EVERGREEN         => NULL,
      p_CONTRACT_TYPE        => NVL(p_CONTRACT_TYPE,'Base'),
      p_BILLING_ENTITY_ID    => p_PSE_ID,
      p_PURCHASER_ID         => NULL,
      p_SELLER_ID            => NULL,
      p_SOURCE_ID            => NULL,
      p_SINK_ID              => NULL,
      p_POR_ID               => NULL,
      p_POD_ID               => NULL,
      p_SC_ID                => NULL,
      p_AGREEMENT_TYPE       => NULL,
      p_APPROVAL_TYPE        => NULL,
      p_MARKET_TYPE          => NULL,
      p_LOSS_OPTION          => NULL,
      p_CONTRACT_FILE_NAME   => SUBSTR(p_IMPORT_FILE_PATH,1,128),
      p_PIPELINE_ID          => NULL,
      p_PIPELINE_TARIFF_TYPE => NULL);
   IF p_CONTRACT_TYPE = 'INC' THEN
      IF p_INC_LIMIT_QUANTITY IS NOT NULL THEN
         EM.PUT_CONTRACT_LIMIT_QUANTITY(
            p_CONTRACT_ID    => v_CONTRACT_ID,
            p_LIMIT_ID       => l_INC_LIMIT_ID,
            p_BEGIN_DATE     => p_BEGIN_DATE,
            p_END_DATE       => p_END_DATE,
            p_LIMIT_QUANTITY => p_INC_LIMIT_QUANTITY,
            p_OLD_LIMIT_ID   => l_INC_LIMIT_ID,
            p_OLD_BEGIN_DATE => p_BEGIN_DATE);
      END IF;
      IF p_DEC_LIMIT_QUANTITY IS NOT NULL THEN
         EM.PUT_CONTRACT_LIMIT_QUANTITY(
            p_CONTRACT_ID    => v_CONTRACT_ID,
            p_LIMIT_ID       => l_DEC_LIMIT_ID,
            p_BEGIN_DATE     => p_BEGIN_DATE,
            p_END_DATE       => p_END_DATE,
            p_LIMIT_QUANTITY => p_DEC_LIMIT_QUANTITY,
            p_OLD_LIMIT_ID   => l_DEC_LIMIT_ID,
            p_OLD_BEGIN_DATE => p_BEGIN_DATE);
      END IF;
   END IF;
   EM.PUT_TP_CONTRACT_NUMBER(
      p_CONTRACT_ID     => v_CONTRACT_ID,
      p_TP_ID           => l_TP_ID,
      p_BEGIN_DATE      => p_BEGIN_DATE,
      p_END_DATE        => p_END_DATE,
      p_CONTRACT_NAME   => SUBSTR(NVL(p_SHORT_NAME, v_CONTRACT_NAME),1,32),
      p_CONTRACT_NUMBER => p_CONTRACT_ID,
      p_OLD_TP_ID       => l_TP_ID,
      p_OLD_BEGIN_DATE  => p_BEGIN_DATE);
END DEFINE_CONTRACT;

FUNCTION VALIDATE_DATE(p_DATE_STRING IN VARCHAR2) RETURN DATE AS
v_DATE DATE;
BEGIN
   v_DATE := TO_DATE(p_DATE_STRING, c_DATE_FORMAT);
   RETURN v_DATE;
EXCEPTION
   WHEN OTHERS THEN
      RETURN NULL;
END VALIDATE_DATE;

FUNCTION GET_PROVIDER_SERVICE_ID(p_EDC_ID IN PLS_INTEGER, p_ESP_ID IN PLS_INTEGER, p_PSE_ID IN PLS_INTEGER) RETURN PLS_INTEGER AS
PRAGMA AUTONOMOUS_TRANSACTION;
v_PROVIDER_SERVICE_ID PLS_INTEGER;
BEGIN
   SELECT MAX(PROVIDER_SERVICE_ID) INTO v_PROVIDER_SERVICE_ID FROM PROVIDER_SERVICE WHERE EDC_ID = p_EDC_ID AND ESP_ID = p_ESP_ID AND PSE_ID = p_PSE_ID;
   IF v_PROVIDER_SERVICE_ID IS NULL THEN
      v_PROVIDER_SERVICE_ID := OID.NEXTVAL;
      INSERT INTO PROVIDER_SERVICE(PROVIDER_SERVICE_ID, EDC_ID, ESP_ID, PSE_ID, ENTRY_DATE)
      VALUES(v_PROVIDER_SERVICE_ID, p_EDC_ID, p_ESP_ID, p_PSE_ID, SYSDATE);
      COMMIT;
   END IF;
   RETURN v_PROVIDER_SERVICE_ID;
END GET_PROVIDER_SERVICE_ID;

PROCEDURE POST_SUPPLIER_CONTRACT_CONTENT AS
CURSOR c_SELECT IS
   SELECT SUPPLIER_TYPE, SUPPLIER_ID, POLR_TYPE, PJM_SHORT, PJM_BASE_ID, PJM_INC_SHORT, PJM_INC_INC_ID, PJM_ALM_ID, BASE_BLOCK_SIZE, NUMBER_OF_BLOCKS, SHARE_OF_LOAD, INC_DEC_START, INC_MW, DEC_MW, POWER_FLOW_START, POWER_FLOW_END, IMPORT_MESSAGE "IMPORT_FILE_PATH", ROWID "ENTRY_ROWID"
   FROM BGE_SUPPLIER_VIEW
   WHERE PROCESS_RECORD = 'Y';
v_PSE_ID PLS_INTEGER; 
v_ESP_ID PLS_INTEGER;
v_PROVIDER_SERVICE_ID PLS_INTEGER;
v_STATUS NUMBER;
v_SYSDATE DATE := SYSDATE;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      IF UPPER(v_SELECT.SUPPLIER_TYPE) = 'COMPETITIVE' THEN
         ID.ID_FOR_PSE_EXTERNAL_IDENTIFIER(SUBSTR(v_SELECT.SUPPLIER_ID,1,32), v_PSE_ID, p_NO_DATA_AS_NOT_ASSIGNED => TRUE);
         IF v_PSE_ID = CONSTANTS.NOT_ASSIGNED THEN
            IO.PUT_PSE(
               o_OID                          => v_PSE_ID,
               p_PSE_NAME                     => SUBSTR(v_SELECT.SUPPLIER_ID,1,32),
               p_PSE_ALIAS                    => SUBSTR(v_SELECT.PJM_SHORT,1,32),
               p_PSE_DESC                     => SUBSTR(v_SELECT.SUPPLIER_ID,1,32),
               p_PSE_ID                       => v_PSE_ID,
               p_PSE_NERC_CODE                => NULL,
               p_PSE_STATUS                   => 'Active',
               p_PSE_DUNS_NUMBER              => NULL,
               p_PSE_BANK                     => NULL,
               p_PSE_ACH_NUMBER               => NULL,
               p_PSE_TYPE                     => 'Marketer',
               p_PSE_EXTERNAL_IDENTIFIER      => SUBSTR(v_SELECT.SUPPLIER_ID,1,32),
               p_PSE_IS_RETAIL_AGGREGATOR     => c_PSE_IS_RETAIL_AGGREGATOR,
               p_PSE_IS_BACKUP_GENERATION     => c_PSE_IS_BACKUP_GENERATION,
               p_PSE_EXCLUDE_LOAD_SCHEDULE    => NULL,
               p_IS_BILLING_ENTITY            => c_IS_BILLING_ENTITY,
               p_TIME_ZONE                    => NULL,
               p_STATEMENT_INTERVAL           => NULL,
               p_INVOICE_INTERVAL             => NULL,
               p_WEEK_BEGIN                   => NULL,
               p_INVOICE_LINE_ITEM_OPTION     => NULL,
               p_INVOICE_EMAIL_SUBJECT        => NULL,
               p_INVOICE_EMAIL_PRIORITY       => NULL,
               p_INVOICE_EMAIL_BODY           => NULL,
               p_INVOICE_EMAIL_BODY_MIME_TYPE => NULL,
               p_SCHEDULE_NAME_PREFIX         => NULL,
               p_SCHEDULE_FORMAT              => NULL,
               p_SCHEDULE_INTERVAL            => NULL,
               p_LOAD_ROUNDING_PREFERENCE     => NULL,
               p_LOSS_ROUNDING_PREFERENCE     => NULL,
               p_CREATE_TX_LOSS_SCHEDULE      => NULL,
               p_CREATE_DX_LOSS_SCHEDULE      => NULL,
               p_CREATE_UFE_SCHEDULE          => NULL,
               p_MINIMUM_SCHEDULE_AMT         => NULL);
         END IF;

         v_ESP_ID := ID.ID_FOR_ESP_EXTERNAL_IDENTIFIER(SUBSTR(v_SELECT.SUPPLIER_ID,1,64), p_NO_DATA_AS_NOT_ASSIGNED => TRUE);
         IF v_ESP_ID = CONSTANTS.NOT_ASSIGNED THEN
            IO.PUT_ESP(
               o_OID                       => v_ESP_ID,
               p_ESP_NAME                  => SUBSTR(v_SELECT.SUPPLIER_ID,1,32),
               p_ESP_ALIAS                 => SUBSTR(v_SELECT.PJM_SHORT,1,32),
               p_ESP_DESC                  => SUBSTR(v_SELECT.SUPPLIER_ID,1,256),
               p_ESP_ID                    => v_ESP_ID,
               p_ESP_EXTERNAL_IDENTIFIER   => SUBSTR(v_SELECT.SUPPLIER_ID,1,64),
               p_ESP_DUNS_NUMBER           => NULL,
               p_ESP_STATUS                => c_ACTIVE_STATUS,
               p_ESP_TYPE                  => 'Certified',
               p_ESP_EXCLUDE_LOAD_SCHEDULE => NULL);
         END IF;
         RA.PUT_PSE_ESP(
            p_ESP_ID         => v_ESP_ID,
            p_PSE_ID         => v_PSE_ID,
            p_BEGIN_DATE     => CONSTANTS.LOW_DATE,
            p_END_DATE       => CONSTANTS.HIGH_DATE,
            p_OLD_PSE_ID     => v_PSE_ID,
            p_OLD_BEGIN_DATE => CONSTANTS.LOW_DATE,
            p_STATUS         => v_STATUS);
      END IF;

      IF v_SELECT.PJM_BASE_ID IS NOT NULL THEN
         DEFINE_CONTRACT(
            NULL,
            v_SELECT.SUPPLIER_ID,
            v_SELECT.PJM_SHORT,
            v_SELECT.PJM_BASE_ID,
            v_SELECT.POWER_FLOW_START,
            v_SELECT.POWER_FLOW_END,
            CASE WHEN UPPER(v_SELECT.SUPPLIER_TYPE) = 'COMPETITIVE' THEN v_PSE_ID ELSE l_DEFAULT_PSE_ID END,
            NULL,
            NULL,
            v_SELECT.IMPORT_FILE_PATH);
      END IF;
      IF v_SELECT.PJM_INC_INC_ID IS NOT NULL THEN
         DEFINE_CONTRACT(
            'INC',
            v_SELECT.SUPPLIER_ID,
            v_SELECT.PJM_INC_SHORT,
            v_SELECT.PJM_INC_INC_ID,
            v_SELECT.POWER_FLOW_START,
            v_SELECT.POWER_FLOW_END,
            CASE WHEN UPPER(v_SELECT.SUPPLIER_TYPE) = 'COMPETITIVE' THEN v_PSE_ID ELSE l_DEFAULT_PSE_ID END,
            v_SELECT.INC_MW,
            v_SELECT.DEC_MW,
            v_SELECT.IMPORT_FILE_PATH);
      END IF;
      UPDATE BGE_SUPPLIER_VIEW SET PROCESS_RECORD = 'P', PROCESS_DATE = v_SYSDATE WHERE ROWID = v_SELECT.ENTRY_ROWID;
   END LOOP;
END POST_SUPPLIER_CONTRACT_CONTENT;

PROCEDURE IMPORT_SUPPLIER_CONTRACT(p_STATUS OUT NUMBER, p_MESSAGE OUT VARCHAR2) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'IMPORT_SUPPLIER_CONTRACT';
v_COUNT PLS_INTEGER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.START_PROCESS(c_IMPORT_SUPPLIER_CONTRACT);
   LOGS.LOG_INFO(c_IMPORT_SUPPLIER_CONTRACT, v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   SELECT COUNT(*) INTO v_COUNT FROM BGE_SUPPLIER_VIEW WHERE PROCESS_RECORD = 'Y';
   IF v_COUNT > 0 THEN
      INITIALIZE_INTERFACE;
      POST_SUPPLIER_CONTRACT_CONTENT;
   END IF;   
   DELETE BGE_SUPPLIER_VIEW WHERE PROCESS_RECORD = 'X';
   COMMIT;
   LOGS.LOG_INFO(c_IMPORT_SUPPLIER_CONTRACT || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ROLLBACK;
      ERRS.ABORT_PROCESS;
END IMPORT_SUPPLIER_CONTRACT;

PROCEDURE LOAD_SUPPLIER_CONTRACT_FILE
   (
   p_IMPORT_FILE      IN CLOB,
   p_IMPORT_FILE_PATH IN VARCHAR2,
   p_STATUS          OUT NUMBER,
   p_MESSAGE         OUT VARCHAR2
   ) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'LOAD_SUPPLIER_CONTRACT_FILE';
v_CONTAINER      PARSE_UTIL.BIG_STRING_TABLE_MP;
v_TOKENS         PARSE_UTIL.STRING_TABLE;
v_DATE           DATE;
v_SYSDATE        DATE := SYSDATE;
v_ERROR_MESSAGE  VARCHAR2(1000);   
v_VALID_COUNT    PLS_INTEGER := 0;
v_INVALID_COUNT  PLS_INTEGER := 0;
v_ERROR_COUNT    PLS_INTEGER := 0;
v_HAVE_ERROR     BOOLEAN;
v_BGE_SUPPLIER_VIEW BGE_SUPPLIER_VIEW%ROWTYPE;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.START_PROCESS(c_LOAD_SUPPLIER_CONTRACT_FILE);
   LOGS.LOG_INFO(c_LOAD_SUPPLIER_CONTRACT_FILE, v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
-- Parse The File Into Records --   
   PARSE_UTIL.PARSE_CLOB_INTO_LINES(p_IMPORT_FILE, v_CONTAINER);
   LOGS.LOG_INFO('Number Of Input Records: ' || TO_CHAR(v_CONTAINER.COUNT), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
-- Process Each Line --
   FOR v_INDEX IN v_CONTAINER.FIRST..v_CONTAINER.LAST LOOP
      v_ERROR_MESSAGE := NULL;
      PARSE_UTIL.PARSE_DELIMITED_STRING(v_CONTAINER(v_INDEX), c_COMMA, v_TOKENS);
      IF v_TOKENS.COUNT = 17 THEN
         v_ERROR_MESSAGE := '';
         BEGIN
            v_ERROR_MESSAGE := v_ERROR_MESSAGE || CASE WHEN TRIM(v_TOKENS(1)) IS NULL THEN 'SUPPLIER_TYPE Is NulL, ' ELSE '' END;
            v_ERROR_MESSAGE := v_ERROR_MESSAGE || CASE WHEN TRIM(v_TOKENS(2)) IS NULL THEN 'SUPPLIER_ID Is Null, '   ELSE '' END;
            v_ERROR_MESSAGE := v_ERROR_MESSAGE || CASE WHEN TRIM(v_TOKENS(4)) IS NULL THEN 'PJM_SHORT Is Null, '     ELSE '' END;
            v_ERROR_MESSAGE := v_ERROR_MESSAGE || CASE WHEN TRIM(v_TOKENS(5)) IS NULL THEN 'PJM_BASE_ID Is Null, '   ELSE '' END;
            v_BGE_SUPPLIER_VIEW.SUPPLIER_TYPE    := TRIM(v_TOKENS(1));
            v_BGE_SUPPLIER_VIEW.SUPPLIER_ID      := TRIM(v_TOKENS(2));
            v_BGE_SUPPLIER_VIEW.POLR_TYPE        := TRIM(v_TOKENS(3));
            v_BGE_SUPPLIER_VIEW.PJM_SHORT        := TRIM(v_TOKENS(4));
            v_BGE_SUPPLIER_VIEW.PJM_BASE_ID      := TRIM(v_TOKENS(5));
            v_BGE_SUPPLIER_VIEW.PJM_INC_SHORT    := TRIM(v_TOKENS(6));
            v_BGE_SUPPLIER_VIEW.PJM_INC_INC_ID   := TRIM(v_TOKENS(7));
            v_BGE_SUPPLIER_VIEW.PJM_ALM_ID       := TRIM(v_TOKENS(8));
            v_BGE_SUPPLIER_VIEW.BASE_BLOCK_SIZE  := TRIM(v_TOKENS(9));
            v_BGE_SUPPLIER_VIEW.NUMBER_OF_BLOCKS := TRIM(v_TOKENS(10));
            v_BGE_SUPPLIER_VIEW.SHARE_OF_LOAD    := TRIM(v_TOKENS(11));
            v_DATE := VALIDATE_DATE(TRIM(v_TOKENS(12)));
            v_ERROR_MESSAGE := v_ERROR_MESSAGE || CASE WHEN TRIM(v_TOKENS(12)) IS NOT NULL AND v_DATE IS NULL THEN 'INC_DEC_START Is Invalid, ' ELSE '' END;
            v_BGE_SUPPLIER_VIEW.INC_DEC_START := v_DATE;
            v_BGE_SUPPLIER_VIEW.INC_MW        := TRIM(v_TOKENS(13));
            v_BGE_SUPPLIER_VIEW.DEC_MW        := TRIM(v_TOKENS(14));
            v_DATE := VALIDATE_DATE(TRIM(v_TOKENS(15)));
            v_ERROR_MESSAGE := v_ERROR_MESSAGE || CASE WHEN v_DATE IS NULL THEN 'POWER_FLOW_START Is Invalid, ' ELSE '' END;
            v_BGE_SUPPLIER_VIEW.POWER_FLOW_START := v_DATE;
            v_DATE := VALIDATE_DATE(TRIM(v_TOKENS(16)));
            v_ERROR_MESSAGE := v_ERROR_MESSAGE || CASE WHEN v_DATE IS NULL THEN 'POWER_FLOW_END Is Invalid, ' ELSE '' END;
            v_BGE_SUPPLIER_VIEW.POWER_FLOW_END := v_DATE;
            v_HAVE_ERROR := v_ERROR_MESSAGE <> '';
            v_BGE_SUPPLIER_VIEW.IMPORT_MESSAGE := CASE WHEN v_HAVE_ERROR THEN RTRIM(v_ERROR_MESSAGE,', ') ELSE p_IMPORT_FILE_PATH END;
            v_BGE_SUPPLIER_VIEW.PROCESS_DATE := v_SYSDATE;
            v_BGE_SUPPLIER_VIEW.PROCESS_RECORD := CASE WHEN v_HAVE_ERROR THEN 'N' ELSE 'Y' END;
            INSERT INTO BGE_SUPPLIER_VIEW VALUES v_BGE_SUPPLIER_VIEW;
            v_VALID_COUNT := v_VALID_COUNT + CASE WHEN v_HAVE_ERROR THEN 0 ELSE 1 END;
            COMMIT;
         EXCEPTION
            WHEN OTHERS THEN
               v_ERROR_MESSAGE := SQLERRM;
         END;
      ELSE
         v_ERROR_MESSAGE := 'Invalid Record Format. Fields Expected: 17, Observed: ' || TO_CHAR(v_TOKENS.COUNT);
      END IF;
      IF v_ERROR_MESSAGE IS NOT NULL THEN
         v_ERROR_COUNT := v_ERROR_COUNT + 1;
         LOGS.LOG_ERROR('Record ' || TO_CHAR(v_INDEX) || ': ' || v_CONTAINER(v_INDEX) || ', Error: ' || RTRIM(v_ERROR_MESSAGE, ', '), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
      ELSE
         LOGS.LOG_DEBUG('Record ' || TO_CHAR(v_INDEX) || ': ' || v_CONTAINER(v_INDEX), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
      END IF;   
   END LOOP;
   COMMIT;   
   LOGS.LOG_INFO(c_LOAD_SUPPLIER_CONTRACT_FILE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   p_MESSAGE := 'Number Of Records In File: ' || TO_CHAR(v_VALID_COUNT + v_INVALID_COUNT) || ', Valid: ' || TO_CHAR(v_VALID_COUNT) || ', Invalid: ' || TO_CHAR(v_INVALID_COUNT) || '.';
   p_STATUS := 0;
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ROLLBACK;
      ERRS.ABORT_PROCESS;
END LOAD_SUPPLIER_CONTRACT_FILE;

PROCEDURE ACCOUNT_DATA_SYNC(p_FROM_DATE IN DATE DEFAULT SYSDATE, p_SYNC_DAYS IN PLS_INTEGER DEFAULT NULL) AS
v_STATUS        NUMBER;
v_MESSAGE       VARCHAR2(1000);
BEGIN
   SECURITY_CONTROLS.SET_CURRENT_USER(SECURITY_CONTROLS.c_SUSER_SYSTEM);
   CDI_ACCOUNT_SYNC.RUN_INTERFACE(p_FROM_DATE, p_SYNC_DAYS, v_STATUS, v_MESSAGE);
END ACCOUNT_DATA_SYNC;

PROCEDURE WEATHER_DATA_IMPORT AS
BEGIN
   SECURITY_CONTROLS.SET_CURRENT_USER(SECURITY_CONTROLS.c_SUSER_SYSTEM);
   CDI_WEATHER.RUN_INTERFACE;
END WEATHER_DATA_IMPORT;

PROCEDURE PERIOD_USAGE_IMPORT AS
v_BEGIN_DATE DATE;
v_END_DATE   DATE;
v_STATUS     NUMBER;
v_MESSAGE    VARCHAR2(1000);
BEGIN
   SECURITY_CONTROLS.SET_CURRENT_USER(SECURITY_CONTROLS.c_SUSER_SYSTEM);
   CDI_PERIOD_USAGE.IMPORT_PERIOD_USAGE(v_BEGIN_DATE, v_END_DATE, v_STATUS, v_MESSAGE);
END PERIOD_USAGE_IMPORT;

PROCEDURE INTERVAL_USAGE_IMPORT AS
v_STATUS  NUMBER;
v_MESSAGE VARCHAR2(1000);
BEGIN
   SECURITY_CONTROLS.SET_CURRENT_USER(SECURITY_CONTROLS.c_SUSER_SYSTEM);
   CDI_INTERVAL_USAGE.IMPORT_INTERVAL_USAGE(v_STATUS, v_MESSAGE);
END INTERVAL_USAGE_IMPORT;

PROCEDURE CUSTOMER_DATA_IMPORT AS
BEGIN
   SECURITY_CONTROLS.SET_CURRENT_USER(SECURITY_CONTROLS.c_SUSER_SYSTEM);
   CDI_CUSTOMER.RUN_CI_FILTER;
END CUSTOMER_DATA_IMPORT;

PROCEDURE ASSIGN_UNIQUE_CHARACTER_CODE AS
v_PROCEDURE_NAME VARCHAR2(32) := 'ASSIGN_UNIQUE_CHARACTER_CODE';
CURSOR c_SELECT IS
   SELECT DISTINCT PJM_SHORT
   FROM (SELECT DISTINCT PJM_SHORT FROM BGE_SUPPLIER_VIEW WHERE UPPER(SUPPLIER_TYPE) = 'POLR' MINUS SELECT DISTINCT PJM_INC_SHORT FROM BGE_SUPPLIER_VIEW)
   ORDER BY PJM_SHORT;
v_COUNT PLS_INTEGER;
v_CODE CHAR(2);
v_NEXT_CODE CHAR(2);
BEGIN
-- Assign A Unique Character Code To Any Supplier Not Having An Assignment --
   FOR v_SELECT IN c_SELECT LOOP
      SELECT COUNT(*), MAX(VALUE) INTO v_COUNT, v_CODE FROM CDI_PJM_SHORT_NAME WHERE PJM_SHORT_NAME = v_SELECT.PJM_SHORT;
--      LOGS.LOG_INFO_DETAIL('PJM Short Name: ' || v_SELECT.PJM_SHORT || ', Count: ' || TO_CHAR(v_COUNT) || ', Code: ' || NVL(v_CODE,'?'), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);  
      IF v_COUNT = 0 THEN
         SELECT MAX(VALUE) INTO v_CODE FROM CDI_PJM_SHORT_NAME;
         IF v_CODE IS NULL THEN
            v_NEXT_CODE := 'AA';
         ELSE
            SELECT NEXT_CHARACTER_CODE INTO v_NEXT_CODE FROM CDI_CHARACTER_CODE_ASSIGNMENT$ WHERE CHARACTER_CODE = v_CODE;
         END IF;
         INSERT INTO CDI_PJM_SHORT_NAME(PJM_SHORT_NAME, VALUE)
         VALUES(v_SELECT.PJM_SHORT, v_NEXT_CODE);
      ELSE
         IF v_CODE IS NULL THEN
            SELECT MAX(VALUE) INTO v_CODE FROM CDI_PJM_SHORT_NAME;
            IF v_CODE IS NULL THEN
               v_NEXT_CODE := 'AA';
            ELSE
               SELECT NEXT_CHARACTER_CODE INTO v_NEXT_CODE FROM CDI_CHARACTER_CODE_ASSIGNMENT$ WHERE CHARACTER_CODE = v_CODE;
            END IF;
            UPDATE CDI_PJM_SHORT_NAME SET VALUE = v_NEXT_CODE WHERE PJM_SHORT_NAME = v_SELECT.PJM_SHORT;
         END IF; 
      END IF;
   END LOOP;
   COMMIT;
END ASSIGN_UNIQUE_CHARACTER_CODE;

PROCEDURE SEND_POLR_7DAY_AHEAD_PLC_EMAIL
   (
   p_BEGIN_DATE IN  DATE,
   p_END_DATE   IN  DATE,
   p_STATUS    OUT NUMBER,
   p_MESSAGE   OUT VARCHAR2
   ) AS
v_PROCEDURE_NAME VARCHAR2(32) := 'SEND_POLR_7DAY_AHEAD_PLC_EMAIL';
CURSOR c_SELECT_SUPPLIER IS SELECT DISTINCT PJM_SHORT_NAME FROM CDI_7DAYS_ICAP;
CURSOR c_SELECT_RECIPIENT(p_PJM_SHORT_NAME IN VARCHAR2) IS
   SELECT EMAIL_DISTRIBUTION
   FROM CDI_SHORT_NAME_EMAIL
   WHERE PJM_SHORT_NAME = p_PJM_SHORT_NAME
      AND p_BEGIN_DATE BETWEEN BEGIN_DATE AND NVL(END_DATE, p_END_DATE)
      AND TRIM(EMAIL_DISTRIBUTION) IS NOT NULL;
CURSOR c_SELECT_POLR_TYPE(p_PJM_SHORT_NAME IN VARCHAR2) IS SELECT DISTINCT POLR_TYPE FROM CDI_7DAYS_ICAP WHERE PJM_SHORT_NAME = p_PJM_SHORT_NAME ORDER BY POLR_TYPE;
CURSOR c_SELECT_POLR_DATE(p_PJM_SHORT_NAME IN VARCHAR2) IS SELECT DISTINCT PLC_DATE  FROM CDI_7DAYS_ICAP WHERE PJM_SHORT_NAME = p_PJM_SHORT_NAME ORDER BY PLC_DATE;
v_BEGIN_DATE  DATE := TRUNC(p_BEGIN_DATE);
v_END_DATE    DATE := TRUNC(p_END_DATE);
v_DAYS        PLS_INTEGER := TO_NUMBER(v_END_DATE-v_BEGIN_DATE) + 1;
v_COUNT       PLS_INTEGER;
v_MESSAGE     VARCHAR2(1000) := '';
v_SENDER      VARCHAR2(256);
v_RECIPIENTS  VARCHAR2(4000) := '';
v_ATTACHMENT  VARCHAR2(16000);
v_ICAP_VALUE  VARCHAR2(24);
v_FILE_SUFFIX CHAR(5);
v_FILE_NAME   VARCHAR2(200);
v_INITIAL     BOOLEAN;
v_EMAIL_REC   ML.EMAIL_REC;
BEGIN
-- Start Process Log --
   LOGS.START_PROCESS(c_POLR_7DAY_AHEAD_PLC_EMAIL);
   LOGS.LOG_INFO(c_POLR_7DAY_AHEAD_PLC_EMAIL || ', Begin Date: ' || TO_CHAR(v_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(v_END_DATE, c_DATE_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   SELECT MAX(EMAIL_ADDRESS) INTO v_SENDER FROM CONTACT WHERE UPPER(EXTERNAL_IDENTIFIER) LIKE '%COORDINATOR%';
   IF v_SENDER IS NULL THEN
      LOGS.LOG_ERROR('RFP Coordinator eMail Address Is Not Defined.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   END IF;
-- Validate Supplier Short Names Defined --
   FOR v_SUPPLIER IN c_SELECT_SUPPLIER LOOP
      SELECT COUNT(*) INTO v_COUNT FROM CDI_PJM_SHORT_NAME WHERE PJM_SHORT_NAME = v_SUPPLIER.PJM_SHORT_NAME;
      IF v_COUNT = 0 THEN
         LOGS.LOG_ERROR('BGE_SUPPLIER_VIEW Does Not Include The Following PJM Short Name: ' || v_SUPPLIER.PJM_SHORT_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      END IF;
   END LOOP;
-- Validate Recipients Have Been Defined --
   FOR v_SUPPLIER IN c_SELECT_SUPPLIER LOOP
      SELECT COUNT(*) INTO v_COUNT FROM CDI_SHORT_NAME_EMAIL WHERE PJM_SHORT_NAME = v_SUPPLIER.PJM_SHORT_NAME AND v_BEGIN_DATE BETWEEN BEGIN_DATE AND NVL(END_DATE, v_END_DATE) AND TRIM(EMAIL_DISTRIBUTION) IS NOT NULL;
      IF v_COUNT = 0 THEN
         LOGS.LOG_ERROR('Email Recipients Not Defined For Supplier PJM Short Name: ' || v_SUPPLIER.PJM_SHORT_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      END IF;      
   END LOOP;
   IF LOGS.GET_ERROR_COUNT <> 0 AND c_EMAIL_SERVICE_ENABLED THEN
      ERRS.RAISE('Errors Detected In The Configuration Setup. See Process Log For Details.');
   END IF;
   LOGS.LOG_INFO_DETAIL('Sender: ' || v_SENDER, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
-- Assign A Unique Character Code To Any Supplier Not Having An Assignment --
   ASSIGN_UNIQUE_CHARACTER_CODE;
-- Iterate Over The Suppliers And Confige The eMail Message --
   FOR v_SELECT_SUPPLIER IN c_SELECT_SUPPLIER LOOP
-- Collect The Recipients --
      v_RECIPIENTS := '';
      FOR v_SELECT_RECIPIENT IN c_SELECT_RECIPIENT(v_SELECT_SUPPLIER.PJM_SHORT_NAME) LOOP
         v_RECIPIENTS := v_RECIPIENTS || TRIM(v_SELECT_RECIPIENT.EMAIL_DISTRIBUTION) || ';';
      END LOOP;
      v_RECIPIENTS := RTRIM(v_RECIPIENTS, ';');
      LOGS.LOG_INFO_DETAIL('Recipients: ' || v_RECIPIENTS, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
-- Collect The Email Attachment Content -- 
      v_ATTACHMENT := 'Capacity PLC(MW) by Service Type for the '|| v_DAYS || ' following Day(s)' || c_CRLF || c_CRLF || 'Date' || c_TAB; 
      FOR v_SELECT_POLR IN c_SELECT_POLR_TYPE(v_SELECT_SUPPLIER.PJM_SHORT_NAME) LOOP
         v_ATTACHMENT := v_ATTACHMENT || c_TAB || TRIM(v_SELECT_POLR.POLR_TYPE);
      END LOOP;
      v_ATTACHMENT := v_ATTACHMENT || c_CRLF;
      FOR v_SELECT_DATE IN c_SELECT_POLR_DATE(v_SELECT_SUPPLIER.PJM_SHORT_NAME) LOOP
         v_INITIAL := TRUE;
         FOR v_SELECT_POLR_TYPE IN c_SELECT_POLR_TYPE(v_SELECT_SUPPLIER.PJM_SHORT_NAME) LOOP
            SELECT TRIM(TO_CHAR(ROUND(SUM(ICAP_VALUE),1),'999990.0')) INTO v_ICAP_VALUE FROM CDI_7DAYS_ICAP WHERE PJM_SHORT_NAME = v_SELECT_SUPPLIER.PJM_SHORT_NAME AND PLC_DATE = v_SELECT_DATE.PLC_DATE AND POLR_TYPE = v_SELECT_POLR_TYPE.POLR_TYPE;
            v_ATTACHMENT := v_ATTACHMENT || c_CRLF || CASE WHEN v_INITIAL THEN TRIM(v_SELECT_DATE.PLC_DATE) ELSE '' END || c_TAB;
            v_INITIAL := FALSE;
         END LOOP;
      END LOOP;
      LOGS.LOG_INFO_DETAIL('Attachment: ' || SUBSTR(v_ATTACHMENT,1,4000), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
-- Configure The Email --
      SELECT NVL(MAX(VALUE),'?') INTO v_FILE_SUFFIX FROM CDI_PJM_SHORT_NAME WHERE PJM_SHORT_NAME = v_SELECT_SUPPLIER.PJM_SHORT_NAME;
      v_FILE_NAME := c_POLR_7DAY_EMAIL_SUBJECT || TO_CHAR(p_BEGIN_DATE,'YYYYMMDD') || '-' || TO_CHAR(p_END_DATE,'YYYYMMDD') || '-' || TRIM(v_FILE_SUFFIX) || '.txt';
      LOGS.LOG_INFO('File Name: ' || v_FILE_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      v_EMAIL_REC := ML.BEGIN_MAIL(c_MAIL_CATEGORY, v_SENDER, c_POLR_7DAY_EMAIL_SUBJECT, v_RECIPIENTS);
      ML.ATTACH_TEXT(v_EMAIL_REC, v_ATTACHMENT, FILENAME => v_FILE_NAME);
      ML.END_MAIL(v_EMAIL_REC, SYSDATE);
   END LOOP;
-- Send The Email --
   IF c_EMAIL_SERVICE_ENABLED THEN
      LOGS.LOG_INFO('eMail Service Enabled. Sending Queued eMail.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ML.PROCESS_QUEUED;
   ELSE
      LOGS.LOG_INFO('eMail Service Is Not Enabled.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   END IF;
   LOGS.LOG_INFO(c_POLR_7DAY_AHEAD_PLC_EMAIL || ' Complete.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ROLLBACK;
      ERRS.ABORT_PROCESS;
END SEND_POLR_7DAY_AHEAD_PLC_EMAIL;

PROCEDURE FIX_START_HOUR(p_FIRST_HOUR IN NUMBER, p_START_HOUR IN OUT NUMBER, p_CONTAINER IN OUT CLOB) AS
v_BUFFER VARCHAR(64) := '';
BEGIN
   IF p_START_HOUR < 0 THEN
      IF p_FIRST_HOUR > 0 THEN
         v_BUFFER := '0-' || TRIM(TO_CHAR(p_FIRST_HOUR,'0')) || ' 0' || c_CRLF;
         DBMS_LOB.WRITEAPPEND(p_CONTAINER, LENGTH(v_BUFFER), v_BUFFER);
      END IF;
      p_START_HOUR := p_FIRST_HOUR;
   END IF;
END FIX_START_HOUR;

PROCEDURE SEND_POLR_ESCHEDULE_EMAIL
   (
   p_BEGIN_DATE IN DATE,
   p_END_DATE   IN DATE,
   p_STATUS    OUT NUMBER,
   p_MESSAGE   OUT VARCHAR2
   ) AS
v_PROCEDURE_NAME VARCHAR2(32) := 'SEND_POLR_ESCHEDULE_EMAIL';
CURSOR c_SELECT_SUPPLIER IS SELECT DISTINCT PJM_SHORT_NAME FROM CDI_PJM_SHORT_NAME;
CURSOR c_SELECT_SCHEDULE IS
   SELECT PJM_SHORT_NAME, PSEUDO_NAME, PJM_CONTRACT_ID, SCHEDULE_TYPE, RFP_TICKET, FROM_CUT(LOAD_DATE, GA.LOCAL_TIME_ZONE) "LOAD_DATE", LOAD_VAL
   FROM CDI_POLR_ESCHEDULE_DATA
   ORDER BY PJM_SHORT_NAME, PSEUDO_NAME, PJM_CONTRACT_ID, RFP_TICKET, LOAD_DATE;
CURSOR c_SELECT_ATTACHMENT IS SELECT PJM_SHORT_NAME, ATTACHMENT FROM CDI_POLR_ESCHEDULE_EMAIL;
CURSOR c_SELECT_DISTRIBUTION(p_PJM_SHORT_NAME IN VARCHAR2) IS
   SELECT DISTINCT EMAIL_DISTRIBUTION FROM CDI_SHORT_NAME_EMAIL
   WHERE PJM_SHORT_NAME = p_PJM_SHORT_NAME
      AND SYSDATE BETWEEN BEGIN_DATE AND NVL(END_DATE, CONSTANTS.HIGH_DATE)
      AND EMAIL_DISTRIBUTION IS NOT NULL;
v_CURRENT_HOUR         NUMBER(2);
v_FIRST_HOUR           NUMBER(2);
v_START_HOUR           NUMBER(2);
v_LOAD_VAL             NUMBER(14,4);
v_LOAD_DATE_STRING     VARCHAR2(32);
v_HEADER               VARCHAR2(16);
v_AMOUNT               VARCHAR2(16);
v_LAST_PSEUDO_NAME     VARCHAR2(64) := CONSTANTS.NOT_ASSIGNED_STRING;
v_LAST_RFP_TICKET      VARCHAR2(64) := CONSTANTS.NOT_ASSIGNED_STRING;
v_LAST_PJM_SHORT_NAME  VARCHAR2(64) := CONSTANTS.NOT_ASSIGNED_STRING;
v_PJM_SHORT_NAME       VARCHAR2(32) := CONSTANTS.NOT_ASSIGNED_STRING;
v_DST_STRING           VARCHAR2(64);
v_LINE                 VARCHAR2(1000);
v_SENDER               VARCHAR2(100);
v_RECIPIENTS           VARCHAR2(1000);
v_FILE_NAME            VARCHAR2(200);
v_LAST_PJM_CONTRACT_ID PLS_INTEGER := -9999;
v_SCHEDULE_TYPE        PLS_INTEGER;
v_COUNT                PLS_INTEGER;
v_IS_FINAL             BOOLEAN;
v_IS_FALLBACK          BOOLEAN;
v_IS_INITIAL           BOOLEAN := TRUE;
v_ATTACHMENT           CLOB;
v_EMAIL_REC            ML.EMAIL_REC;
v_FILE_SUFFIX          CHAR(2);
v_LOAD_DATE            DATE;
v_LAST_LOAD_DATE       DATE := CONSTANTS.LOW_DATE;
   PROCEDURE POST_POLR_ESCHEDULE_EMAIL(p_PJM_SHORT_NAME IN VARCHAR2, p_IS_PROCESSING IN BOOLEAN DEFAULT TRUE) AS
   BEGIN
      IF p_PJM_SHORT_NAME <> v_PJM_SHORT_NAME THEN
         LOGS.LOG_INFO_DETAIL('POST_POLR_ESCHEDULE_EMAIL, Processing PJM Short Name: ' || p_PJM_SHORT_NAME ||  ', Current PJM Short Name: ' || v_PJM_SHORT_NAME || ', Is Initial: ' || CASE WHEN v_IS_INITIAL THEN 'True' ELSE 'False' END  || ', Is Processing: ' || CASE WHEN p_IS_PROCESSING THEN 'True' ELSE 'False' END, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
         IF v_IS_INITIAL THEN 
            DBMS_LOB.CREATETEMPORARY(v_ATTACHMENT, TRUE);
            DBMS_LOB.OPEN(v_ATTACHMENT, DBMS_LOB.LOB_READWRITE);
            v_IS_INITIAL := FALSE;
         ELSE 
            DBMS_LOB.CLOSE(v_ATTACHMENT);
            INSERT INTO CDI_POLR_ESCHEDULE_EMAIL(PJM_SHORT_NAME, ATTACHMENT)
            VALUES(v_PJM_SHORT_NAME, v_ATTACHMENT);
            IF p_IS_PROCESSING THEN
               DBMS_LOB.CREATETEMPORARY(v_ATTACHMENT, TRUE);
               DBMS_LOB.OPEN(v_ATTACHMENT, DBMS_LOB.LOB_READWRITE);
            END IF;
         END IF;
      END IF;      
   END POST_POLR_ESCHEDULE_EMAIL;
BEGIN
-- Start Process Log --
   LOGS.START_PROCESS(c_POLR_ESCHEDULE_EMAIL);
   LOGS.LOG_INFO(c_POLR_ESCHEDULE_EMAIL || ', Begin Date: ' || TO_CHAR(TRUNC(p_BEGIN_DATE), c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(TRUNC(p_END_DATE), c_DATE_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   SELECT MAX(EMAIL_ADDRESS) INTO v_SENDER FROM CONTACT WHERE UPPER(EXTERNAL_IDENTIFIER) LIKE '%COORDINATOR%';
   IF v_SENDER IS NULL THEN
      LOGS.LOG_ERROR('RFP Coordinator eMail Address Is Not Defined.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   END IF;
-- Validate Supplier Short Names Defined --
   FOR v_SUPPLIER IN c_SELECT_SUPPLIER LOOP
      SELECT COUNT(*) INTO v_COUNT FROM CDI_PJM_SHORT_NAME WHERE PJM_SHORT_NAME = v_SUPPLIER.PJM_SHORT_NAME;
      IF v_COUNT = 0 THEN
         LOGS.LOG_ERROR('BGE_SUPPLIER_VIEW Does Not Include The Following PJM Short Name: ' || v_SUPPLIER.PJM_SHORT_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      END IF;
   END LOOP;
-- Validate Recipients Have Been Defined --
   FOR v_SUPPLIER IN c_SELECT_SUPPLIER LOOP
      SELECT COUNT(*) INTO v_COUNT FROM CDI_SHORT_NAME_EMAIL WHERE PJM_SHORT_NAME = v_SUPPLIER.PJM_SHORT_NAME AND TRUNC(p_BEGIN_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE, TRUNC(p_END_DATE)) AND TRIM(EMAIL_DISTRIBUTION) IS NOT NULL;
      IF v_COUNT = 0 THEN
         LOGS.LOG_ERROR('Email Recipients Not Defined For Supplier PJM Short Name: ' || v_SUPPLIER.PJM_SHORT_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      END IF;      
   END LOOP;
   IF LOGS.GET_ERROR_COUNT <> 0 AND c_EMAIL_SERVICE_ENABLED THEN
      ERRS.RAISE('Errors Detected In The Configuration Setup. See Process Log For Details.');
   END IF;
-- Assign A Unique Character Code To Any Supplier Not Having An Assignment --
   ASSIGN_UNIQUE_CHARACTER_CODE;
   LOGS.LOG_INFO_DETAIL('Sender: ' || v_SENDER, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_POLR_ESCHEDULE_EMAIL';
   SELECT MAX(SCHEDULE_TYPE) INTO v_SCHEDULE_TYPE FROM CDI_POLR_ESCHEDULE_DATA;
   v_HEADER := CASE v_SCHEDULE_TYPE WHEN CONSTANTS.SCHEDULE_TYPE_PRELIM THEN '*INTSCH*' ELSE 'ENGREC*' END || c_CRLF;
   v_IS_FINAL := v_SCHEDULE_TYPE = CONSTANTS.SCHEDULE_TYPE_FINAL;
-- Iterate Over The Suppliers And Configer The eMail Messages --
   FOR v_SELECT IN c_SELECT_SCHEDULE LOOP
      v_LOAD_DATE_STRING := TO_CHAR(v_SELECT.LOAD_DATE, c_DATE_FORMAT);
      v_LOAD_DATE := v_SELECT.LOAD_DATE;
      v_LOAD_VAL := ROUND(v_SELECT.LOAD_VAL,3);
      v_AMOUNT := CASE WHEN v_LOAD_VAL < 0 THEN TO_CHAR(v_LOAD_VAL, '990.999') WHEN v_LOAD_VAL = 0 THEN '0' ELSE TO_CHAR(v_LOAD_VAL) END;
      POST_POLR_ESCHEDULE_EMAIL(v_SELECT.PJM_SHORT_NAME);
      v_PJM_SHORT_NAME := v_SELECT.PJM_SHORT_NAME;
      IF (v_LAST_PSEUDO_NAME <> v_SELECT.PSEUDO_NAME) OR (v_LAST_PJM_CONTRACT_ID <> v_SELECT.PJM_CONTRACT_ID) OR (v_LAST_RFP_TICKET <> v_SELECT.RFP_TICKET) OR (v_LAST_LOAD_DATE <> TRUNC(v_SELECT.LOAD_DATE-1/86400)) THEN
         v_LAST_PSEUDO_NAME := v_SELECT.PSEUDO_NAME;
         v_LAST_PJM_CONTRACT_ID := v_SELECT.PJM_CONTRACT_ID;
         v_LAST_RFP_TICKET := v_SELECT.RFP_TICKET;
         v_LAST_LOAD_DATE := TRUNC(v_SELECT.LOAD_DATE-1/86400);
         v_START_HOUR := -1;
         v_LINE := v_HEADER || v_LAST_PSEUDO_NAME || ', ' || v_LAST_PJM_CONTRACT_ID || ', ' || v_LAST_RFP_TICKET || c_CRLF || v_LOAD_DATE_STRING || c_CRLF || CASE WHEN v_IS_FINAL THEN '' ELSE v_LOAD_DATE_STRING || c_CRLF END;
         DBMS_LOB.WRITEAPPEND(v_ATTACHMENT, LENGTH(v_LINE), v_LINE);
      END IF;
      v_CURRENT_HOUR := TO_NUMBER(TO_CHAR(v_LOAD_DATE, 'HH24'));
      v_FIRST_HOUR := v_CURRENT_HOUR - 1;
      IF v_CURRENT_HOUR >= 0 THEN
         IF TO_CHAR(v_LOAD_DATE, c_DATE_TIME_FORMAT) = TO_CHAR(DST_FALL_BACK_DATE(v_LOAD_DATE), c_DATE_TIME_FORMAT) THEN
            v_DST_STRING := '24-25 ' || v_AMOUNT || c_CRLF;
            v_IS_FALLBACK := TRUE;
         ELSIF TO_CHAR(v_LOAD_DATE, c_DATE_TIME_FORMAT) = TO_CHAR(DST_SPRING_AHEAD_DATE(v_LOAD_DATE), c_DATE_TIME_FORMAT) THEN
            FIX_START_HOUR(1, v_START_HOUR, v_ATTACHMENT);
            v_LINE := TRIM(TO_CHAR(v_START_HOUR, CASE WHEN v_START_HOUR <= 9 THEN '0' ELSE '00' END)) || '-02' || TRIM(v_AMOUNT) || c_CRLF;
            DBMS_LOB.WRITEAPPEND(v_ATTACHMENT, LENGTH(v_LINE), v_LINE);
            v_START_HOUR := 3;
         ELSIF v_CURRENT_HOUR = 0 THEN
            v_LINE := '23-24' || ' ' || TRIM(v_AMOUNT) || c_CRLF;
            DBMS_LOB.WRITEAPPEND(v_ATTACHMENT, LENGTH(v_LINE), v_LINE);
            IF v_IS_FALLBACK THEN
               v_IS_FALLBACK := FALSE;
               DBMS_LOB.WRITEAPPEND(v_ATTACHMENT, LENGTH(v_DST_STRING), v_DST_STRING);
            END IF;
         ELSE
            FIX_START_HOUR(v_FIRST_HOUR, v_START_HOUR, v_ATTACHMENT);
            v_LINE := TRIM(TO_CHAR(v_START_HOUR, CASE WHEN v_START_HOUR <= 9 THEN '0' ELSE '00' END)) || '-' || TRIM(TO_CHAR(v_CURRENT_HOUR, CASE WHEN v_START_HOUR < 9 THEN '0' ELSE '00' END)) || '   ' || TRIM(v_AMOUNT) || c_CRLF;
            DBMS_LOB.WRITEAPPEND(v_ATTACHMENT, LENGTH(v_LINE), v_LINE);
            v_START_HOUR := v_CURRENT_HOUR;
         END IF;
         v_COUNT := v_COUNT + 1;
      END IF;
      POST_POLR_ESCHEDULE_EMAIL(v_SELECT.PJM_SHORT_NAME);
   END LOOP;
   FOR v_SELECT IN c_SELECT_ATTACHMENT LOOP
-- Collect The Recipients --
      v_RECIPIENTS := '';
      FOR v_DISTRIBUTION IN c_SELECT_DISTRIBUTION(v_SELECT.PJM_SHORT_NAME) LOOP
         v_RECIPIENTS := v_RECIPIENTS || TRIM(v_DISTRIBUTION.EMAIL_DISTRIBUTION) || ';';
      END LOOP;
      v_RECIPIENTS := RTRIM(v_RECIPIENTS,';');
      LOGS.LOG_INFO_DETAIL('Recipients: ' || v_RECIPIENTS, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      LOGS.LOG_INFO_DETAIL('Attachment: ' || DBMS_LOB.SUBSTR(v_ATTACHMENT, 4000, 1 ), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      SELECT MAX(VALUE) INTO v_FILE_SUFFIX FROM CDI_PJM_SHORT_NAME WHERE PJM_SHORT_NAME = v_SELECT.PJM_SHORT_NAME;
      v_EMAIL_REC := ML.BEGIN_MAIL(c_MAIL_CATEGORY, v_SENDER, c_POLR_ESCHEDULE_EMAIL_SUBJECT, v_RECIPIENTS);
      v_FILE_NAME := 'POLR_eSchedule_' || TO_CHAR(p_BEGIN_DATE,'YYYYMMDD') || '_' || TO_CHAR(p_END_DATE,'YYYYMMDD') || '_' || TRIM(v_FILE_SUFFIX) || '.txt';
      LOGS.LOG_INFO_DETAIL('File Name: ' || v_FILE_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ML.ATTACH_CLOB(v_EMAIL_REC, v_SELECT.ATTACHMENT, FILENAME => v_FILE_NAME);
      ML.END_MAIL(v_EMAIL_REC, SYSDATE);
   END LOOP;
-- Send The Email --
   IF c_EMAIL_SERVICE_ENABLED THEN
      LOGS.LOG_INFO('eMail Service Enabled. Sending Queued eMail.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ML.PROCESS_QUEUED;
   ELSE
      LOGS.LOG_INFO('eMail Service Is Not Enabled.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   END IF;
   LOGS.LOG_INFO(c_POLR_ESCHEDULE_EMAIL || ' Complete.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ROLLBACK;
      ERRS.ABORT_PROCESS;
END SEND_POLR_ESCHEDULE_EMAIL;

PROCEDURE SEND_POLR_RFP_TICKETS_EMAIL
   (
   p_BEGIN_DATE IN DATE,
   p_END_DATE   IN DATE,
   p_STATUS    OUT NUMBER,
   p_MESSAGE   OUT VARCHAR2
   ) AS
v_PROCEDURE_NAME VARCHAR2(32) := 'SEND_POLR_RFP_TICKETS_EMAIL';
CURSOR c_SELECT_SUPPLIER IS
   SELECT PJM_SHORT_NAME FROM (SELECT DISTINCT PJM_SHORT_NAME FROM CDI_POLR_ECAPACITY WHERE PLC_DATE <= p_END_DATE AND  PLC_DATE >= p_BEGIN_DATE MINUS SELECT DISTINCT PJM_INC_SHORT FROM BGE_SUPPLIER_VIEW)
   ORDER BY PJM_SHORT_NAME;
CURSOR c_SELECT_RECIPIENT(p_PJM_SHORT_NAME IN VARCHAR2, p_BEGIN_DATE IN DATE, p_END_DATE IN DATE) IS
   SELECT EMAIL_DISTRIBUTION
   FROM CDI_SHORT_NAME_EMAIL
   WHERE PJM_SHORT_NAME = p_PJM_SHORT_NAME
      AND p_BEGIN_DATE BETWEEN BEGIN_DATE AND NVL(END_DATE, p_END_DATE)
      AND TRIM(EMAIL_DISTRIBUTION) IS NOT NULL;
CURSOR c_SELECT_POLR_RFP_TICKET(p_PJM_SHORT_NAME IN VARCHAR2, p_BEGIN_DATE IN DATE, p_END_DATE IN DATE) IS
   SELECT TO_CHAR(PLC_DATE,'MM/DD/YYYY')||','||TRIM(PSEUDO_NAME)||','||TRIM(PJM_SHORT_NAME)||','||TRIM(RFP_TICKET)||','||TRIM(LTRIM(TO_CHAR(ROUND(ICAP_VALUE,2),'999999990.00')))||','||TRIM(LTRIM(TO_CHAR(ROUND(NSPL_VALUE,2),'999999990.00')))||c_CRLF "CSV_RECORD"
   FROM CDI_POLR_ECAPACITY
   WHERE PJM_SHORT_NAME = p_PJM_SHORT_NAME
      AND PLC_DATE <= p_END_DATE
      AND PLC_DATE >= p_BEGIN_DATE
   ORDER BY PLC_DATE, PSEUDO_NAME, PJM_SHORT_NAME, RFP_TICKET;
v_BEGIN_DATE     DATE := TRUNC(p_BEGIN_DATE);
v_END_DATE       DATE := TRUNC(p_END_DATE);
v_COUNT          PLS_INTEGER;
v_MESSAGE        VARCHAR2(1000) := '';
v_SENDER         VARCHAR2(256);
v_RECIPIENTS     VARCHAR2(4000) := '';
v_PJM_SHORT_NAME VARCHAR2(32);
v_FILE_NAME      VARCHAR2(200);
v_ATTACHMENT     CLOB;
v_EMAIL_REC      ML.EMAIL_REC;
v_FILE_SUFFIX    CHAR(2);
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_POLR_ECAPACITY_EMAIL);
   LOGS.LOG_INFO(c_POLR_ECAPACITY_EMAIL || ', Begin Date: ' || TO_CHAR(TRUNC(p_BEGIN_DATE), c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(TRUNC(p_END_DATE), c_DATE_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
-- Check To See If There Is A Sender eMail Address Defined --
   SELECT MAX(EMAIL_ADDRESS) INTO v_SENDER FROM CONTACT WHERE UPPER(EXTERNAL_IDENTIFIER) LIKE '%COORDINATOR%';
   IF v_SENDER IS NULL THEN
      LOGS.LOG_ERROR('RFP Coordinator eMail Address Is Not Defined.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   END IF;
-- Validate Supplier Short Names Defined --
   FOR v_SUPPLIER IN c_SELECT_SUPPLIER LOOP
      SELECT COUNT(*) INTO v_COUNT FROM CDI_PJM_SHORT_NAME WHERE PJM_SHORT_NAME = v_SUPPLIER.PJM_SHORT_NAME;
      IF v_COUNT = 0 THEN
         LOGS.LOG_ERROR('BGE_SUPPLIER_VIEW Does Not Include The Following PJM Short Name: ' || v_SUPPLIER.PJM_SHORT_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      END IF;
   END LOOP;
-- Validate Recipients Have Been Defined --
   FOR v_SUPPLIER IN c_SELECT_SUPPLIER LOOP
      SELECT COUNT(*) INTO v_COUNT FROM CDI_SHORT_NAME_EMAIL WHERE PJM_SHORT_NAME = v_SUPPLIER.PJM_SHORT_NAME AND TRUNC(p_BEGIN_DATE) BETWEEN BEGIN_DATE AND NVL(END_DATE, TRUNC(p_END_DATE)) AND TRIM(EMAIL_DISTRIBUTION) IS NOT NULL;
      IF v_COUNT = 0 THEN
         LOGS.LOG_ERROR('Email Recipients Not Defined For Supplier PJM Short Name: ' || v_SUPPLIER.PJM_SHORT_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      END IF;      
   END LOOP;
   IF LOGS.GET_ERROR_COUNT <> 0 AND c_EMAIL_SERVICE_ENABLED THEN
      ERRS.RAISE('Errors Detected In The Configuration Setup. See Process Log For Details.');
   END IF;
-- Assign A Unique Character Code To Any Supplier Not Having An Assignment --
   ASSIGN_UNIQUE_CHARACTER_CODE;
   LOGS.LOG_INFO_DETAIL('Sender: ' || v_SENDER, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
-- Iterate Over The POLR Supplier Set --
   FOR v_SELECT_SUPPLIER IN c_SELECT_SUPPLIER LOOP
-- Attach The Content For Each Supplier PJM Short Name --
      DBMS_LOB.CREATETEMPORARY(v_ATTACHMENT, TRUE);
      DBMS_LOB.OPEN(v_ATTACHMENT, DBMS_LOB.LOB_READWRITE);
      FOR v_SELECT_POLR_RFP_TICKET IN c_SELECT_POLR_RFP_TICKET(v_SELECT_SUPPLIER.PJM_SHORT_NAME, v_BEGIN_DATE, v_END_DATE) LOOP
         DBMS_LOB.WRITEAPPEND(v_ATTACHMENT, LENGTH(v_SELECT_POLR_RFP_TICKET.CSV_RECORD), v_SELECT_POLR_RFP_TICKET.CSV_RECORD);
      END LOOP;
-- Get The Short Name To Be Used For This Supplier --
      SELECT COUNT(*) INTO v_COUNT FROM CDI_PJM_SHORT_NAME WHERE PJM_SHORT_NAME = v_SELECT_SUPPLIER.PJM_SHORT_NAME;
      IF v_COUNT = 0 THEN
         SELECT PJM_SHORT INTO v_PJM_SHORT_NAME FROM BGE_SUPPLIER_VIEW WHERE PJM_INC_SHORT = v_SELECT_SUPPLIER.PJM_SHORT_NAME;
      ELSE
         v_PJM_SHORT_NAME :=  v_SELECT_SUPPLIER.PJM_SHORT_NAME;
      END IF;
-- Get The Recipients --
      v_RECIPIENTS := '';
      FOR v_SELECT_RECIPIENT IN c_SELECT_RECIPIENT(v_PJM_SHORT_NAME, TRUNC(SYSDATE), TRUNC(SYSDATE)) LOOP
         v_RECIPIENTS :=  TRIM(v_SELECT_RECIPIENT.EMAIL_DISTRIBUTION) || ';';
      END LOOP;
      v_RECIPIENTS := RTRIM(v_RECIPIENTS,';');
      LOGS.LOG_INFO_DETAIL('Recipients: ' || v_RECIPIENTS, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      LOGS.LOG_INFO_DETAIL('Attachment: ' || DBMS_LOB.SUBSTR(v_ATTACHMENT, 4000, 1 ), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
-- Get The Unique Supplier Character Code --
      SELECT NVL(MAX(VALUE),'?') INTO v_FILE_SUFFIX FROM CDI_PJM_SHORT_NAME WHERE PJM_SHORT_NAME = v_SELECT_SUPPLIER.PJM_SHORT_NAME;
-- Queue The eMail To The Interface --
      v_EMAIL_REC := ML.BEGIN_MAIL(c_MAIL_CATEGORY, v_SENDER, c_POLR_ECAPACITY_SUBJECT, v_RECIPIENTS);
      v_FILE_NAME := 'POLR_eCapacity_' || TO_CHAR(p_BEGIN_DATE,'YYYYMMDD') || '_' || TO_CHAR(p_END_DATE,'YYYYMMDD') || '_' || TRIM(v_FILE_SUFFIX) || '.txt';
      LOGS.LOG_INFO_DETAIL('File Name: ' || v_FILE_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ML.ATTACH_CLOB(v_EMAIL_REC, v_ATTACHMENT, FILENAME => v_FILE_NAME);
      ML.END_MAIL(v_EMAIL_REC, SYSDATE); -- KN 1/2/2021
      DBMS_LOB.CLOSE(v_ATTACHMENT);
   END LOOP;
-- Send The Queued eMail --
   IF c_EMAIL_SERVICE_ENABLED THEN
      LOGS.LOG_INFO('eMail Service Enabled. Sending Queued eMail.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      ML.PROCESS_QUEUED;
   ELSE
      LOGS.LOG_INFO('eMail Service Is Not Enabled.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   END IF;
-- Close The Process Log --
   LOGS.LOG_INFO(c_POLR_ECAPACITY_EMAIL || ' Complete.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ROLLBACK;
      ERRS.ABORT_PROCESS;
END SEND_POLR_RFP_TICKETS_EMAIL;

END CDI_TASK;
/
