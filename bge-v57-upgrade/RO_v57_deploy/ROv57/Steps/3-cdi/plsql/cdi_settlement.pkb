CREATE OR REPLACE PACKAGE BODY CDI_SETTLEMENT AS

c_PACKAGE_NAME                 CONSTANT VARCHAR2(32) := 'CDI_SETTLEMENT';
c_STEP_NAME                    CONSTANT VARCHAR2(32) := '';
c_ACCEPT_SETTLEMENT            CONSTANT VARCHAR2(64) := 'CDI: Accept Settlement';
c_POST_SETTLEMENT_PROFILES     CONSTANT VARCHAR2(64) := 'CDI: Post Settlement Profiles';
c_SELECT_POLR_REPORT           CONSTANT VARCHAR2(64) := 'Select POLR Reports';
c_INSUFFICIENT_PRIVILEGES      CONSTANT VARCHAR2(64) := 'Insufficient Privileges To View Or Modify Content';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'MM/DD/YYYY';
c_DATE_TIME_FORMAT             CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH24:MI:SS';
c_LOAD_NAME                    CONSTANT VARCHAR2(16) := 'BGE System';
c_DEFAULT_SUPPLIER_NAME        CONSTANT VARCHAR2(16) := 'DEFAULT';
c_COMMODITY_NAME               CONSTANT VARCHAR2(16) := 'Retail Load';
c_COMMODITY_TYPE               CONSTANT VARCHAR2(16) := 'Energy';
c_COMMODITY_UNIT               CONSTANT VARCHAR2(16) := 'MWH';
c_LOAD_TRANSACTION_TYPE        CONSTANT VARCHAR2(16) := 'LOAD';
c_DATA_INTERVAL_TYPE           CONSTANT NUMBER(1)    := 1;
c_DAY_TYPE                     CONSTANT CHAR(1)      := '1';

PROCEDURE GATHER_TABLE_STATS(p_TABLE_NAME IN VARCHAR2) IS
BEGIN
   SYS.DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => USER, TABNAME => p_TABLE_NAME, ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, BLOCK_SAMPLE => TRUE, DEGREE => NULL, CASCADE => TRUE);
END GATHER_TABLE_STATS;

PROCEDURE POST_COMPETITIVE_DATA
   (
   p_SCHEDULE_TYPE_NAME IN VARCHAR2,
   p_SCHEDULE_TYPE      IN CHAR,
   p_STATEMENT_TYPE_ID  IN NUMBER,
   p_BEGIN_DATE         IN DATE,
   p_END_DATE           IN DATE
   ) AS
v_PROCEDURE_NAME  VARCHAR2(30) := 'POST_COMPETITIVE_DATA';
v_BEGIN_DATE DATE;
v_END_DATE   DATE;
v_SCHEDULE_ID    PLS_INTEGER;
v_DEFAULT_ESP_ID PLS_INTEGER;
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   SELECT MAX(ESP_ID) INTO v_DEFAULT_ESP_ID FROM ENERGY_SERVICE_PROVIDER WHERE UPPER(ESP_NAME) = c_DEFAULT_SUPPLIER_NAME;
   UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, GA.LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
   DELETE CDI_ACCEPT_LOAD
   WHERE UPPER(TRIM(SCHEDULE_TYPE)) = UPPER(TRIM(p_SCHEDULE_TYPE))
      AND STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID
      AND LOAD_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE;
   LOGS.LOG_INFO('Number Of Records Deleted From The CDI_ACCEPT_LOAD Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   COMMIT;
   INSERT INTO CDI_ACCEPT_LOAD(TARIFF_ID, REPORTING_SEGMENT, VOLTAGE_CLASS, PLC_BAND, POLR_TYPE, ESP_NAME, ESP_ID, POOL_NAME, POOL_ID, PSE_NAME, PSE_ID, SERVICE_POINT_ID, PJM_CONTRACT_ID, LOAD_DATE, SCHEDULE_TYPE, STATEMENT_TYPE_ID, SCHEDULE_TYPE_NAME, IS_ALM, IS_INC, LOAD_VAL, TX_LOSS_VAL, DX_LOSS_VAL, UE_LOSS_VAL)
   WITH DATE_TIME AS
      (SELECT CUT_DATE, LOCAL_DAY_TRUNC_DATE FROM SYSTEM_DATE_TIME WHERE TIME_ZONE = GA.LOCAL_TIME_ZONE AND DATA_INTERVAL_TYPE = c_DATA_INTERVAL_TYPE AND DAY_TYPE = c_DAY_TYPE AND CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE),
   CONTRACT AS
      (SELECT A.SERVICE_OBLIGATION_ID, F.TARIFF_ID, F.REPORTED_SEGMENT, F.VOLTAGE_CLASS, F.PLC_BAND, F.POLR_TYPE, D.ESP_NAME, D.ESP_ID, F.POOL_NAME, F.POOL_ID, E.PSE_NAME, E.PSE_ID, G.SERVICE_POINT_ID,
       H.BEGIN_DATE "CONTRACT_BEGIN_DATE", H.END_DATE "CONTRACT_END_DATE", I.CONTRACT_NUMBER, I.BEGIN_DATE "TP_BEGIN_DATE", I.END_DATE "TP_END_DATE"
      FROM SERVICE_OBLIGATION           A
         JOIN PROVIDER_SERVICE          B ON B.PROVIDER_SERVICE_ID = A.PROVIDER_SERVICE_ID
         JOIN SERVICE_DELIVERY          C ON C.SERVICE_DELIVERY_ID = A.SERVICE_DELIVERY_ID
         JOIN ENERGY_SERVICE_PROVIDER   D ON D.ESP_ID = B.ESP_ID AND D.ESP_ID <> v_DEFAULT_ESP_ID
         JOIN PURCHASING_SELLING_ENTITY E ON E.PSE_ID = B.PSE_ID
         JOIN POOL                      F ON F.POOL_ID = C.POOL_ID
         JOIN SERVICE_POINT             G ON G.SERVICE_POINT_ID = C.SERVICE_POINT_ID
         JOIN INTERCHANGE_CONTRACT      H ON H.CONTRACT_NAME = E.PSE_NAME
         JOIN TP_CONTRACT_NUMBER        I ON I.CONTRACT_ID = H.CONTRACT_ID
      WHERE A.MODEL_ID = GA.ELECTRIC_MODEL
         AND A.SCENARIO_ID = GA.BASE_SCENARIO_ID
         AND A.AS_OF_DATE = CONSTANTS.LOW_DATE)
   SELECT TARIFF_ID, REPORTED_SEGMENT, VOLTAGE_CLASS, PLC_BAND, POLR_TYPE, ESP_NAME, ESP_ID, POOL_NAME, POOL_ID, PSE_NAME, PSE_ID, SERVICE_POINT_ID, CONTRACT_NUMBER "PJM_CONTRACT_ID", LOAD_DATE, SERVICE_CODE "SCHEDULE_TYPE", p_STATEMENT_TYPE_ID "STATEMENT_TYPE_ID", p_SCHEDULE_TYPE_NAME "SCHEDULE_TYPE_NAME", 0 "IS_ALM", 0 "IS_INC", SUM(LOAD_VAL), SUM(TX_LOSS_VAL), SUM(DX_LOSS_VAL), SUM(UFE_LOAD_VAL) 
   FROM
      (SELECT C.TARIFF_ID, C.REPORTED_SEGMENT, C.VOLTAGE_CLASS, C.PLC_BAND, C.POLR_TYPE, C.ESP_NAME, C.ESP_ID, C.POOL_NAME, C.POOL_ID, C.PSE_NAME, C.PSE_ID, C.SERVICE_POINT_ID, C.CONTRACT_NUMBER, L.LOAD_DATE, L.SERVICE_CODE, L.LOAD_VAL, L.TX_LOSS_VAL, L.DX_LOSS_VAL, L.UFE_LOAD_VAL
      FROM DATE_TIME T 
         JOIN CONTRACT C ON T.LOCAL_DAY_TRUNC_DATE BETWEEN C.CONTRACT_BEGIN_DATE AND NVL(C.CONTRACT_END_DATE, T.LOCAL_DAY_TRUNC_DATE) AND T.LOCAL_DAY_TRUNC_DATE BETWEEN C.TP_BEGIN_DATE AND NVL(C.TP_END_DATE, T.LOCAL_DAY_TRUNC_DATE)    
         JOIN SERVICE_OBLIGATION_LOAD L ON L.SERVICE_OBLIGATION_ID = C.SERVICE_OBLIGATION_ID AND L.SERVICE_CODE = p_SCHEDULE_TYPE AND L.LOAD_DATE = T.CUT_DATE AND L.LOAD_CODE = GA.STANDARD)
   GROUP BY TARIFF_ID, REPORTED_SEGMENT, VOLTAGE_CLASS, PLC_BAND, POLR_TYPE, ESP_NAME, ESP_ID, POOL_NAME, POOL_ID, PSE_NAME, PSE_ID, SERVICE_POINT_ID, CONTRACT_NUMBER, LOAD_DATE, SERVICE_CODE;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_ACCEPT_LOAD Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   COMMIT;
END POST_COMPETITIVE_DATA;

PROCEDURE POST_NON_COMPETITIVE_DATA
   (
   p_SCHEDULE_TYPE_NAME IN VARCHAR2,
   p_SCHEDULE_TYPE      IN CHAR,
   p_STATEMENT_TYPE_ID  IN NUMBER,
   p_BEGIN_DATE         IN DATE,
   p_END_DATE           IN DATE
   ) AS
v_PROCEDURE_NAME  VARCHAR2(30) := 'POST_NON_COMPETITIVE_DATA';
v_BEGIN_DATE DATE;
v_END_DATE   DATE;
v_DATE       DATE;
v_DEFAULT_ESP_ID PLS_INTEGER;
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, GA.LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
   SELECT MAX(ESP_ID) INTO v_DEFAULT_ESP_ID FROM ENERGY_SERVICE_PROVIDER WHERE ESP_NAME = c_DEFAULT_SUPPLIER_NAME;
   ASSERT(v_DEFAULT_ESP_ID IS NOT NULL, 'The Default Supplier "' || c_DEFAULT_SUPPLIER_NAME || '" Is Not Defined.');
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_ACCEPT_LOAD_BK';
   INSERT INTO CDI_ACCEPT_LOAD_BK(TARIFF_ID, REPORTING_SEGMENT, VOLTAGE_CLASS, PLC_BAND, POLR_TYPE, ESP_NAME, ESP_ID, POOL_NAME, POOL_ID, PSE_NAME, PSE_ID, SERVICE_POINT_ID, RFP_TICKET, PJM_CONTRACT_ID, SCHEDULE_TYPE_NAME, IS_ALM, LOAD_VAL, TX_LOSS_VAL, DX_LOSS_VAL, UE_LOSS_VAL, LOAD_DATE, STATEMENT_TYPE_ID, SCHEDULE_TYPE)
   WITH NON_COMPETITIVE AS
      (SELECT A.SERVICE_OBLIGATION_ID, F.TARIFF_ID, F.REPORTED_SEGMENT, F.VOLTAGE_CLASS, F.PLC_BAND, F.POLR_TYPE, D.ESP_NAME, D.ESP_ID, F.POOL_NAME, F.POOL_ID, C.PSE_NAME, C.PSE_ID, G.SERVICE_POINT_NAME, G.SERVICE_POINT_ID
      FROM SERVICE_OBLIGATION           A
         JOIN PROVIDER_SERVICE          B ON B.PROVIDER_SERVICE_ID = A.PROVIDER_SERVICE_ID AND B.ESP_ID = v_DEFAULT_ESP_ID
         JOIN PURCHASING_SELLING_ENTITY C ON C.PSE_ID = B.PSE_ID
         JOIN ENERGY_SERVICE_PROVIDER   D ON D.ESP_ID = B.ESP_ID
         JOIN SERVICE_DELIVERY          E ON E.SERVICE_DELIVERY_ID = A.SERVICE_DELIVERY_ID
         JOIN POOL                      F ON F.POOL_ID = E.POOL_ID
         JOIN SERVICE_POINT             G ON G.SERVICE_POINT_ID = E.SERVICE_POINT_ID
      WHERE A.MODEL_ID = GA.ELECTRIC_MODEL
         AND A.SCENARIO_ID = GA.BASE_SCENARIO_ID
         AND A.AS_OF_DATE = CONSTANTS.LOW_DATE)
   SELECT TARIFF_ID, REPORTED_SEGMENT, VOLTAGE_CLASS, PLC_BAND, POLR_TYPE, ESP_NAME, ESP_ID, POOL_NAME, POOL_ID, PSE_NAME, PSE_ID, SERVICE_POINT_ID, NULL RFP_TICKET, NULL PJM_CONTRACT_ID, p_SCHEDULE_TYPE_NAME, 0 IS_ALM, SUM(LOAD_VAL), SUM(TX_LOSS_VAL), SUM(DX_LOSS_VAL), SUM(UFE_LOAD_VAL), LOAD_DATE, p_STATEMENT_TYPE_ID, SERVICE_CODE
   FROM NON_COMPETITIVE X
      JOIN SERVICE_OBLIGATION_LOAD L ON L.SERVICE_OBLIGATION_ID = X.SERVICE_OBLIGATION_ID AND L.SERVICE_CODE = p_SCHEDULE_TYPE
   GROUP BY TARIFF_ID, REPORTED_SEGMENT, VOLTAGE_CLASS, PLC_BAND, POLR_TYPE, ESP_NAME, ESP_ID, POOL_NAME, POOL_ID, PSE_NAME, PSE_ID, SERVICE_POINT_ID, LOAD_DATE, SERVICE_CODE;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_ACCEPT_LOAD_BK Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   COMMIT;
   GATHER_TABLE_STATS('CDI_ACCEPT_LOAD_BK');
   INSERT INTO CDI_ACCEPT_LOAD(TARIFF_ID, REPORTING_SEGMENT, VOLTAGE_CLASS, PLC_BAND, POLR_TYPE, ESP_NAME, ESP_ID, POOL_NAME, POOL_ID, PSE_NAME, PSE_ID, SERVICE_POINT_ID, RFP_TICKET, SCHEDULE_TYPE_NAME, IS_ALM, STATEMENT_TYPE_ID, SCHEDULE_TYPE, IS_INC, PJM_CONTRACT_ID, LOAD_DATE, LOAD_VAL, TX_LOSS_VAL, DX_LOSS_VAL, UE_LOSS_VAL)
   WITH INC_DEC AS
      (SELECT PLC_DATE, RFP_TICKET, POLR_TYPE, BASE_LOAD_FACTOR,   0 IS_INC FROM CDI_BASE_LOAD_ALLOC WHERE BASE_LOAD_FACTOR <> 1 UNION ALL
       SELECT PLC_DATE, RFP_TICKET, POLR_TYPE, 1-BASE_LOAD_FACTOR, 1 IS_INC FROM CDI_BASE_LOAD_ALLOC WHERE BASE_LOAD_FACTOR <> 1 UNION ALL
       SELECT PLC_DATE, RFP_TICKET, POLR_TYPE, BASE_LOAD_FACTOR,   0 IS_INC FROM CDI_BASE_LOAD_ALLOC WHERE BASE_LOAD_FACTOR = 1),
   NON_COMPETITIVE AS
      (SELECT DISTINCT L.TARIFF_ID, L.REPORTING_SEGMENT, L.VOLTAGE_CLASS, L.PLC_BAND, L.POLR_TYPE, L.ESP_NAME, L.ESP_ID, L.POOL_NAME, L.POOL_ID, L.PSE_NAME, L.PSE_ID, L.SERVICE_POINT_ID, A.SUPPLIER_ID, L.STATEMENT_TYPE_ID, L.SCHEDULE_TYPE, A.PJM_INC_INC_ID, A.PJM_BASE_ID, L.SCHEDULE_TYPE_NAME, L.IS_ALM, L.LOAD_DATE, L.LOAD_VAL, A.SHARE_OF_LOAD, L.TX_LOSS_VAL, L.DX_LOSS_VAL, L.UE_LOSS_VAL, T.LOCAL_DAY_TRUNC_DATE
      FROM BGE_SUPPLIER_VIEW     A
         JOIN CDI_ACCEPT_LOAD_BK L ON L.POLR_TYPE = A.POLR_TYPE
         JOIN SYSTEM_DATE_TIME   T ON T.TIME_ZONE = GA.LOCAL_TIME_ZONE AND T.DATA_INTERVAL_TYPE = c_DATA_INTERVAL_TYPE AND T.DAY_TYPE = c_DAY_TYPE AND T.CUT_DATE = L.LOAD_DATE AND T.LOCAL_DAY_TRUNC_DATE >=  A.POWER_FLOW_START AND T.LOCAL_DAY_TRUNC_DATE <= NVL(A.POWER_FLOW_END, T.LOCAL_DAY_TRUNC_DATE))
   SELECT A.TARIFF_ID, A.REPORTING_SEGMENT, A.VOLTAGE_CLASS, A.PLC_BAND, A.POLR_TYPE, A.ESP_NAME, A.ESP_ID, A.POOL_NAME, A.POOL_ID, A.PSE_NAME, A.PSE_ID, A.SERVICE_POINT_ID, A.SUPPLIER_ID "RFP_TICKET", A.SCHEDULE_TYPE_NAME, A.IS_ALM, A.STATEMENT_TYPE_ID, A.SCHEDULE_TYPE, NVL(B.IS_INC, 0) "IS_INC", (CASE WHEN NVL(B.IS_INC,0) = 1 THEN A.PJM_INC_INC_ID ELSE A.PJM_BASE_ID END) "PJM_CONTRACT_ID", A.LOAD_DATE,
      SUM(A.LOAD_VAL    * A.SHARE_OF_LOAD * NVL(B.BASE_LOAD_FACTOR,1)) "LOAD_VAL",
      SUM(A.TX_LOSS_VAL * A.SHARE_OF_LOAD * NVL(B.BASE_LOAD_FACTOR,1)) "TX_LOSS_VAL",
      SUM(A.DX_LOSS_VAL * A.SHARE_OF_LOAD * NVL(B.BASE_LOAD_FACTOR,1)) "DX_LOSS_VAL",
      SUM(A.UE_LOSS_VAL * A.SHARE_OF_LOAD * NVL(B.BASE_LOAD_FACTOR,1)) "UE_LOSS_VAL"
   FROM NON_COMPETITIVE A
      LEFT JOIN INC_DEC B ON B.PLC_DATE = A.LOCAL_DAY_TRUNC_DATE AND B.POLR_TYPE = A.POLR_TYPE AND B.RFP_TICKET = A.SUPPLIER_ID
   GROUP BY A.TARIFF_ID, A.REPORTING_SEGMENT, A.VOLTAGE_CLASS, A.PLC_BAND, A.POLR_TYPE, A.ESP_NAME, A.ESP_ID, A.POOL_NAME, A.POOL_ID, A.PSE_NAME, A.PSE_ID, A.SERVICE_POINT_ID, A.SUPPLIER_ID, A.SCHEDULE_TYPE_NAME, A.IS_ALM, A.STATEMENT_TYPE_ID, A.SCHEDULE_TYPE, NVL(B.IS_INC, 0), (CASE WHEN NVL(B.IS_INC,0) = 1 THEN A.PJM_INC_INC_ID ELSE A.PJM_BASE_ID END), A.LOAD_DATE;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_ACCEPT_LOAD Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   COMMIT;
END POST_NON_COMPETITIVE_DATA;

PROCEDURE POST_FINAL_RECON_CALC(p_SCHEDULE_TYPE IN NUMBER, p_BEGIN_DATE IN DATE, p_END_DATE IN DATE) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'POST_FINAL_RECON_CALC';
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   INSERT INTO CDI_POLR_ESCHEDULE(LOAD_DATE, PSEUDO_NAME, PJM_CONTRACT_ID, RFP_TICKET, SCHEDULE_TYPE, PJM_SHORT_NAME, LOAD_VAL)
   SELECT LOAD_DATE, PSEUDO_NAME, PJM_CONTRACT_ID, RFP_TICKET, CASE WHEN p_SCHEDULE_TYPE = 3 THEN 4 ELSE 6 END "SCHEDULE_TYPE", PJM_SHORT_NAME,
      SUM(CASE WHEN SCHEDULE_TYPE = 3 THEN NVL(LOAD_VAL,0) ELSE 0 END) - SUM(CASE WHEN SCHEDULE_TYPE = CASE WHEN p_SCHEDULE_TYPE = 3 THEN 2 ELSE 5 END THEN LOAD_VAL ELSE 0 END)
   FROM CDI_POLR_ESCHEDULE
   WHERE LOAD_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
   GROUP BY LOAD_DATE,PSEUDO_NAME, PJM_CONTRACT_ID, RFP_TICKET, CASE WHEN p_SCHEDULE_TYPE = 3 THEN 4 ELSE 6 END, PJM_SHORT_NAME;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_POLR_ESCHEDULE Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   COMMIT;
END POST_FINAL_RECON_CALC;

PROCEDURE POST_POLR_SCHEDULE(p_SCHEDULE_TYPE IN PLS_INTEGER, p_BEGIN_DATE IN DATE, p_END_DATE IN DATE) AS
v_PROCEDURE_NAME  VARCHAR2(30) := 'POST_POLR_ESCHEDULE';
v_BEGIN_DATE DATE;
v_END_DATE   DATE;
v_RFP_TICKET     VARCHAR2(32) := '1';
v_POLR_TYPE      VARCHAR2(16) := '1';
v_PJM_CONTRACT   VARCHAR2(64) := '1';
v_POLR_NAME      VARCHAR2(64) := '1';
v_PJM_SHORT_NAME VARCHAR2(64);
v_LOAD_AMT NUMBER(18,6);
v_INC_AMT  NUMBER(18,6);
v_COUNT     PLS_INTEGER := 0;
v_START     PLS_INTEGER := CASE p_SCHEDULE_TYPE WHEN 3 THEN 3 WHEN 2 THEN 2 ELSE p_SCHEDULE_TYPE END;
v_SAVE_TYPE PLS_INTEGER := CASE p_SCHEDULE_TYPE WHEN 3 THEN 3 WHEN 2 THEN 2 ELSE 5 END;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
CURSOR c_SELECT IS
   SELECT RFP_TICKET, POLR_TYPE, POLR_TYPE || SUBSTR(UPPER(VOLTAGE_CLASS),1,3) || SUBSTR(REPORTING_SEGMENT,1,2) || SUBSTR(REPORTING_SEGMENT,4,4) "POLR_NAME", PJM_CONTRACT_ID, 1.0 "LOSS_UPLIFT", LOAD_DATE, IS_ALM, IS_INC,
      SUM(CASE WHEN IS_ALM = 0 THEN LOAD_VAL + TX_LOSS_VAL + DX_LOSS_VAL ELSE 0 END) "NOT_ALM_LOAD",
      SUM(CASE WHEN IS_ALM = 0 THEN UE_LOSS_VAL ELSE 0 END) "NOT_ALM_UFE",
      SUM(CASE WHEN IS_ALM = 1 THEN LOAD_VAL + TX_LOSS_VAL + DX_LOSS_VAL ELSE 0 END) "IS_ALM_LOAD",
      SUM(CASE WHEN IS_ALM = 1 THEN UE_LOSS_VAL ELSE 0 END) "IS_ALM_UFE",
      SUM(CASE WHEN IS_INC = 1 THEN LOAD_VAL + TX_LOSS_VAL + DX_LOSS_VAL + UE_LOSS_VAL ELSE 0 END) "IS_INC_LOAD"
   FROM CDI_ACCEPT_LOAD
   WHERE STATEMENT_TYPE_ID = v_START
      AND LOAD_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
      AND RFP_TICKET IS NOT NULL
   GROUP BY RFP_TICKET, POLR_TYPE, POLR_TYPE || SUBSTR(UPPER(VOLTAGE_CLASS),1,3) || SUBSTR(REPORTING_SEGMENT,1,2) || SUBSTR(REPORTING_SEGMENT,4,4), PJM_CONTRACT_ID, LOAD_DATE, IS_ALM, IS_INC
   ORDER BY RFP_TICKET, POLR_TYPE, POLR_NAME, PJM_CONTRACT_ID, LOAD_DATE;
BEGIN
   UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, GA.LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
--  2 Preliminary
--  3 Final
--  4 POLR Reconciliation
--  5 Post-Final Settlement
--  6 Imbalance Between Final And Post-Final
   IF p_SCHEDULE_TYPE = 2 THEN
      DELETE CDI_POLR_ESCHEDULE WHERE LOAD_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE AND SCHEDULE_TYPE = p_SCHEDULE_TYPE;
   ELSIF p_SCHEDULE_TYPE = 3 THEN
      DELETE CDI_POLR_ESCHEDULE WHERE LOAD_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE AND SCHEDULE_TYPE IN (3,4);
   ELSIF p_SCHEDULE_TYPE > 3 THEN
      DELETE CDI_POLR_ESCHEDULE WHERE LOAD_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE AND SCHEDULE_TYPE IN (5,6);
   END IF;
   COMMIT;
   FOR v_SELECT IN c_SELECT LOOP
      v_LOAD_AMT  := NVL((v_SELECT.NOT_ALM_LOAD - (v_SELECT.IS_ALM_LOAD * (v_SELECT.LOSS_UPLIFT - 1)) + (v_SELECT.NOT_ALM_UFE + v_SELECT.IS_ALM_UFE)),0);
      v_INC_AMT   := NVL(v_SELECT.IS_INC_LOAD,0);
      IF (v_RFP_TICKET <> v_SELECT.RFP_TICKET) OR (v_POLR_TYPE <> v_SELECT.POLR_TYPE) OR (v_POLR_NAME <> v_SELECT.POLR_NAME) OR (v_PJM_CONTRACT <> v_SELECT.PJM_CONTRACT_ID) THEN
         SELECT MAX(PJM_SHORT) INTO v_PJM_SHORT_NAME
         FROM BGE_SUPPLIER_VIEW
         WHERE  SUPPLIER_ID = v_SELECT.RFP_TICKET
            AND TRIM(POLR_TYPE) = v_SELECT.POLR_TYPE
            AND v_SELECT.LOAD_DATE >= POWER_FLOW_START
            AND TRUNC(v_SELECT.LOAD_DATE - 1/86400) <= NVL(POWER_FLOW_END, v_SELECT.LOAD_DATE);
         IF v_PJM_SHORT_NAME IS NULL THEN
            ERRS.LOG_AND_RAISE('PJM Short Name Not Found For RFP Ticket: ' || v_SELECT.RFP_TICKET || ', POLR Type: ' || v_SELECT.POLR_TYPE || ', PJM Contract: ' || v_SELECT.PJM_CONTRACT_ID);
         END IF;
         v_RFP_TICKET   :=  v_SELECT.RFP_TICKET;
         v_POLR_TYPE    :=  v_SELECT.POLR_TYPE;
         v_PJM_CONTRACT := v_SELECT.PJM_CONTRACT_ID;
         v_POLR_NAME    := v_SELECT.POLR_NAME;
      END IF;
      IF v_SELECT.IS_INC = 0 THEN
         INSERT INTO CDI_POLR_ESCHEDULE(LOAD_DATE, PSEUDO_NAME, PJM_CONTRACT_ID, RFP_TICKET, SCHEDULE_TYPE, PJM_SHORT_NAME, LOAD_VAL)
         VALUES(v_SELECT.LOAD_DATE, v_SELECT.POLR_NAME, v_SELECT.PJM_CONTRACT_ID, v_SELECT.RFP_TICKET, v_SAVE_TYPE, v_PJM_SHORT_NAME, v_LOAD_AMT);
      ELSE
         INSERT INTO CDI_POLR_ESCHEDULE(LOAD_DATE,PSEUDO_NAME, PJM_CONTRACT_ID,RFP_TICKET,SCHEDULE_TYPE,PJM_SHORT_NAME,LOAD_VAL)
         VALUES(v_SELECT.LOAD_DATE, v_SELECT.POLR_NAME, v_SELECT.PJM_CONTRACT_ID, v_SELECT.RFP_TICKET, v_SAVE_TYPE, v_PJM_SHORT_NAME, v_INC_AMT);
      END IF;
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
   END LOOP;
  COMMIT;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_POLR_ESCHEDULE Table: ' || TO_CHAR(v_COUNT), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
  IF p_SCHEDULE_TYPE > 2 THEN
     POST_FINAL_RECON_CALC(v_SAVE_TYPE, v_BEGIN_DATE, v_END_DATE);
  END IF;
  COMMIT;
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
END POST_POLR_SCHEDULE;

PROCEDURE GET_LOAD_TRANSACTION_ID
   (
   p_TRANSACTION_NAME    IN VARCHAR2,
   p_BEGIN_DATE          IN DATE,
   p_END_DATE            IN DATE,
   p_CONTRACT_NUMBER     IN VARCHAR2,
   p_PSE_ID              IN PLS_INTEGER,
   p_ESP_ID              IN PLS_INTEGER,
   p_POOL_ID             IN PLS_INTEGER,
   p_SERVICE_POINT_ID    IN PLS_INTEGER,
   p_LINK_TRANSACTION_ID IN PLS_INTEGER,
   p_RFP_TICKET          IN VARCHAR2,
   p_POLR_TYPE           IN VARCHAR2,
   p_IS_INC              IN PLS_INTEGER,
   p_PSE_NAME            IN VARCHAR2,
   p_LOAD_TRANSACTION_ID IN OUT PLS_INTEGER
   ) AS
v_PROCEDURE_NAME   VARCHAR2(30) := 'GET_LOAD_TRANSACTION_ID';
v_TRANSACTION_NAME VARCHAR2(64) := p_TRANSACTION_NAME;
v_COMMODITY_ID   PLS_INTEGER;
v_CONTRACT_ID    PLS_INTEGER;
v_TRANSACTION_ID PLS_INTEGER;
v_SC_ID          PLS_INTEGER;
v_EDC_ID         PLS_INTEGER;
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   IF p_RFP_TICKET IS NULL OR p_RFP_TICKET = '' THEN
      SELECT MAX(CONTRACT_ID) INTO v_CONTRACT_ID FROM INTERCHANGE_CONTRACT WHERE CONTRACT_NAME = p_PSE_NAME;
      IF v_CONTRACT_ID IS NULL THEN
         ERRS.LOG_AND_RAISE('A Contract With The Name Matching Supplier "' || p_PSE_NAME || '" Is Not Defined.');
      END IF;   
   ELSE
      IF p_IS_INC = 0 THEN
         SELECT MAX(CONTRACT_ID) INTO v_CONTRACT_ID FROM INTERCHANGE_CONTRACT WHERE CONTRACT_NAME = p_RFP_TICKET;
         IF v_CONTRACT_ID IS NULL THEN
            ERRS.LOG_AND_RAISE('A Contract With The Name Matching RFP Ticket "' || p_RFP_TICKET || '" Is Not Defined.');
         END IF;   
      ELSE
         SELECT MAX(CONTRACT_ID) INTO v_CONTRACT_ID FROM INTERCHANGE_CONTRACT WHERE CONTRACT_NAME = p_RFP_TICKET || '_INC';
         IF v_CONTRACT_ID IS NULL THEN
            ERRS.LOG_AND_RAISE('A Contract With The Name Matching RFP Ticket "' || p_RFP_TICKET || '_INC" Is Not Defined.');
         END IF;   
         v_TRANSACTION_NAME := v_TRANSACTION_NAME || '_INC';
      END IF;
   END IF;
   ID.ID_FOR_TRANSACTION(v_TRANSACTION_NAME, 'Load', FALSE, v_TRANSACTION_ID);
   IF v_TRANSACTION_ID = GA.NO_DATA_FOUND THEN
      ID.ID_FOR_TRANSACTION(v_TRANSACTION_NAME, 'Load', TRUE, v_TRANSACTION_ID);
      ID.ID_FOR_COMMODITY(c_COMMODITY_NAME, FALSE, v_COMMODITY_ID);
      IF v_COMMODITY_ID = GA.NO_DATA_FOUND THEN
         ERRS.LOG_AND_RAISE('Commodity "' || c_COMMODITY_NAME || '" Is Not Defined.');
      END IF;
      ID.ID_FOR_SC('PJM', FALSE, v_SC_ID);
      IF v_SC_ID = GA.NO_DATA_FOUND THEN
         ERRS.LOG_AND_RAISE('Schedule Coordinator "PJM" Is Not Defined.');
      END IF;
      ID.ID_FOR_EDC('BGE', FALSE, v_EDC_ID);
      IF v_EDC_ID = GA.NO_DATA_FOUND THEN
         ERRS.LOG_AND_RAISE('Energy Distribution Company "BGE" Is Not Defined.');
      END IF;
      UPDATE INTERCHANGE_TRANSACTION SET
         TRANSACTION_IDENTIFIER = p_CONTRACT_NUMBER,
         BEGIN_DATE             = TRUNC(p_BEGIN_DATE),
         END_DATE               = TRUNC(p_END_DATE),
         TRANSACTION_INTERVAL   = 'Hour',
         EXTERNAL_INTERVAL      = 'Hour',
         TRANSACTION_CODE       = 1,
         CONTRACT_ID            = v_CONTRACT_ID,
         COMMODITY_ID           = v_COMMODITY_ID,
         PURCHASER_ID           = p_PSE_ID,
         SELLER_ID              = p_PSE_ID,
         POR_ID                 = p_SERVICE_POINT_ID,
         POD_ID                 = p_SERVICE_POINT_ID,
         ZOR_ID                 = CONSTANTS.NOT_ASSIGNED,
         ZOD_ID                 = CONSTANTS.NOT_ASSIGNED,
         SC_ID                  = v_SC_ID,
         PSE_ID                 = p_PSE_ID,
         ESP_ID                 = p_ESP_ID,
         EDC_ID                 = v_EDC_ID,
         POOL_ID                = p_POOL_ID,
         IS_EXPORT_SCHEDULE     = 1,
         SCHEDULE_GROUP_ID      = CONSTANTS.NOT_ASSIGNED,
         LINK_TRANSACTION_ID    = p_LINK_TRANSACTION_ID,
         ENTRY_DATE             = SYSDATE
      WHERE TRANSACTION_ID = v_TRANSACTION_ID;
   ELSE
      UPDATE INTERCHANGE_TRANSACTION SET
         BEGIN_DATE  = LEAST(TRUNC(p_BEGIN_DATE), BEGIN_DATE),
         END_DATE    = GREATEST(TRUNC(p_END_DATE), END_DATE),
         CONTRACT_ID = v_CONTRACT_ID,
         ENTRY_DATE  = SYSDATE
      WHERE TRANSACTION_ID = v_TRANSACTION_ID;
   END IF;
   IF p_IS_INC = 1 THEN
      LOGS.LOG_DEBUG(v_TRANSACTION_NAME || ', ' || TO_CHAR(v_TRANSACTION_ID));
   END IF;
   COMMIT;
   p_LOAD_TRANSACTION_ID := v_TRANSACTION_ID;
END GET_LOAD_TRANSACTION_ID;

PROCEDURE ACCEPT_OBLIGATION
   (
   p_SCHEDULE_TYPE_NAME IN VARCHAR2,
   p_SCHEDULE_TYPE      IN CHAR,
   p_STATEMENT_TYPE_ID  IN NUMBER,
   p_BEGIN_DATE         IN DATE,
   p_END_DATE           IN DATE
   ) AS
v_PROCEDURE_NAME      VARCHAR2(30) := 'ACCEPT_OBLIGATION';
v_BEGIN_DATE          DATE;
v_END_DATE            DATE;
v_TRANSACTION_NAME    VARCHAR2(256);
v_TRANSACTION_ID      PLS_INTEGER;
v_CONTRACT_ID         PLS_INTEGER;
v_COMMODITY_ID        PLS_INTEGER;
v_LOAD_TRANSACTION_ID PLS_INTEGER;
v_DEFAULT_ESP_ID      PLS_INTEGER;
v_COUNT               PLS_INTEGER := 0;
v_SCHEDULE_TYPE       PLS_INTEGER := p_STATEMENT_TYPE_ID;
v_MARK_TIME           PLS_INTEGER := DBMS_UTILITY.GET_TIME;
CURSOR c_SELECT IS
   SELECT CASE WHEN ESP_ID = v_DEFAULT_ESP_ID THEN RFP_TICKET || '_' ||POLR_TYPE || '_' || VOLTAGE_CLASS || '_' || REPORTING_SEGMENT ELSE PSE_NAME || '_' || POLR_TYPE || '_' || VOLTAGE_CLASS || '_' || REPORTING_SEGMENT END "TRANSACTION_NAME",
      RFP_TICKET, POLR_TYPE, IS_INC, LOAD_DATE, PSE_NAME, PSE_ID, ESP_ID, PJM_CONTRACT_ID "CONTRACT_NUMBER",
      SUM(NVL(LOAD_VAL,0))    "LOAD_VAL",
      SUM(NVL(TX_LOSS_VAL,0)) "TX_LOSS_VAL",
      SUM(NVL(DX_LOSS_VAL,0)) "DX_LOSS_VAL",
      SUM(NVL(UE_LOSS_VAL,0)) "UE_LOSS_VAL"
   FROM CDI_ACCEPT_LOAD
   WHERE LOAD_DATE <= v_END_DATE
      AND LOAD_DATE >= v_BEGIN_DATE
      AND SCHEDULE_TYPE_NAME = p_SCHEDULE_TYPE_NAME
      AND TRIM(SCHEDULE_TYPE) = TRIM(p_SCHEDULE_TYPE)
      AND STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID
   GROUP BY CASE WHEN ESP_ID = v_DEFAULT_ESP_ID THEN RFP_TICKET || '_' ||POLR_TYPE || '_' || VOLTAGE_CLASS || '_' || REPORTING_SEGMENT ELSE PSE_NAME || '_' || POLR_TYPE || '_' || VOLTAGE_CLASS || '_' || REPORTING_SEGMENT END, RFP_TICKET, POLR_TYPE, IS_INC, LOAD_DATE, PSE_NAME, PSE_ID, ESP_ID, PJM_CONTRACT_ID
   ORDER BY LOAD_DATE;
BEGIN
   SELECT MAX(ESP_ID) INTO v_DEFAULT_ESP_ID FROM ENERGY_SERVICE_PROVIDER WHERE ESP_NAME = c_DEFAULT_SUPPLIER_NAME;
   ASSERT(v_DEFAULT_ESP_ID IS NOT NULL, 'The Default Supplier "' || c_DEFAULT_SUPPLIER_NAME || '" Is Not Defined.');
  UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, GA.LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
   LOGS.LOG_INFO('Schedule Type Name: ' || p_SCHEDULE_TYPE_NAME || ', Schedule Type: ' || p_SCHEDULE_TYPE || ', Statement Type Id: '  || TO_CHAR(p_STATEMENT_TYPE_ID), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.LOG_INFO('Begin Date: ' || TO_CHAR(v_BEGIN_DATE, c_DATE_TIME_FORMAT) || ', End Date: ' || TO_CHAR(v_END_DATE, c_DATE_TIME_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   IF GA.ENABLE_LOAD_SCHEDULE_DELETE THEN
      DELETE IT_SCHEDULE
      WHERE TRANSACTION_ID IN (SELECT TRANSACTION_ID FROM INTERCHANGE_TRANSACTION WHERE UPPER(TRANSACTION_TYPE) = c_LOAD_TRANSACTION_TYPE)
         AND SCHEDULE_TYPE = v_SCHEDULE_TYPE
         AND SCHEDULE_STATE = GA.INTERNAL_STATE
         AND SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
         AND AS_OF_DATE = CONSTANTS.LOW_DATE;
      COMMIT;
   END IF;
   FOR v_SELECT IN c_SELECT LOOP
      GET_LOAD_TRANSACTION_ID(
         p_TRANSACTION_NAME    => v_SELECT.TRANSACTION_NAME,
         p_BEGIN_DATE          => v_BEGIN_DATE,
         p_END_DATE            => v_END_DATE,
         p_CONTRACT_NUMBER     => v_SELECT.CONTRACT_NUMBER,
         p_PSE_ID              => v_SELECT.PSE_ID,
         p_ESP_ID              => v_SELECT.ESP_ID,
         p_POOL_ID             => CONSTANTS.NOT_ASSIGNED,
         p_SERVICE_POINT_ID    => CONSTANTS.NOT_ASSIGNED,
         p_LINK_TRANSACTION_ID => CONSTANTS.NOT_ASSIGNED,
         p_RFP_TICKET          => v_SELECT.RFP_TICKET,
         p_POLR_TYPE           => v_SELECT.POLR_TYPE,
         p_IS_INC              => v_SELECT.IS_INC,
         p_PSE_NAME            => v_SELECT.PSE_NAME,
         p_LOAD_TRANSACTION_ID => v_LOAD_TRANSACTION_ID);
      INSERT INTO IT_SCHEDULE(TRANSACTION_ID, SCHEDULE_TYPE, SCHEDULE_STATE, SCHEDULE_DATE, AS_OF_DATE, AMOUNT)
      VALUES(v_LOAD_TRANSACTION_ID, v_SCHEDULE_TYPE, GA.INTERNAL_STATE, v_SELECT.LOAD_DATE, CONSTANTS.LOW_DATE, v_SELECT.LOAD_VAL + v_SELECT.DX_LOSS_VAL + v_SELECT.TX_LOSS_VAL + v_SELECT.UE_LOSS_VAL);
      v_COUNT := v_COUNT + SQL%ROWcOUNT;
   END LOOP;
   LOGS.LOG_INFO('Number Of Records Posted To The IT_SCHEDULE Table: ' || TO_CHAR(v_COUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   COMMIT;
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END ACCEPT_OBLIGATION;

PROCEDURE ACCEPT_SETTLEMENT
   (
   p_SETTLEMENT_TYPE_ORDER IN NUMBER,
   p_BEGIN_DATE            IN DATE,
   p_END_DATE              IN DATE,
   p_STATUS               OUT NUMBER,
   p_MESSAGE              OUT VARCHAR2
   ) AS
v_PROCEDURE_NAME  VARCHAR2(30) := 'ACCEPT_SETTLEMENT';
CURSOR c_SELECT_POLR_TYPE IS SELECT DISTINCT POLR_TYPE FROM CDI_ACCEPT_LOAD WHERE LOAD_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE;
CURSOR c_SELECT_POLR_SHARE IS SELECT POLR_TYPE, ROUND(SUM(SHARE_OF_LOAD),5) SHARE_OF_LOAD FROM BGE_SUPPLIER_VIEW WHERE p_BEGIN_DATE BETWEEN POWER_FLOW_START AND NVL(POWER_FLOW_END, p_END_DATE) GROUP BY POLR_TYPE;
v_SETTLEMENT_TYPE_NAME VARCHAR2(64);
v_SERVICE_CODE       CHAR(1);
v_STATEMENT_TYPE_ID  NUMBER(9);
v_HAVE_ERROR         BOOLEAN := FALSE;
v_COUNT              PLS_INTEGER;
v_MARK_TIME          PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_ACCEPT_SETTLEMENT);
   p_MESSAGE := NULL;
   p_STATUS := GA.SUCCESS;
   LOGS.LOG_INFO('Settlement Type Order: ' || TO_CHAR(p_SETTLEMENT_TYPE_ORDER) || ', Begin Date: ' || TO_CHAR(p_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(p_END_DATE, c_DATE_FORMAT), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   SELECT MAX(A.SETTLEMENT_TYPE_NAME), MAX(A.SERVICE_CODE), MAX(B.STATEMENT_TYPE_ID) INTO v_SETTLEMENT_TYPE_NAME, v_SERVICE_CODE, v_STATEMENT_TYPE_ID
   FROM SETTLEMENT_TYPE A JOIN STATEMENT_TYPE B ON UPPER(B.STATEMENT_TYPE_NAME) = UPPER(A.SETTLEMENT_TYPE_NAME)
   WHERE A.SETTLEMENT_TYPE_ORDER = p_SETTLEMENT_TYPE_ORDER;
   LOGS.LOG_INFO('Settlement Type Name: ' || v_SETTLEMENT_TYPE_NAME || ', Service Code: ' || v_SERVICE_CODE || ', Statement Type Id: ' || TO_CHAR(v_STATEMENT_TYPE_ID), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);

   FOR v_SELECT IN c_SELECT_POLR_TYPE LOOP
       SELECT COUNT(*) INTO v_COUNT FROM BGE_SUPPLIER_VIEW WHERE POLR_TYPE = v_SELECT.POLR_TYPE AND p_BEGIN_DATE BETWEEN POWER_FLOW_START AND NVL(POWER_FLOW_END, p_END_DATE);
       IF v_COUNT = 0 THEN
         LOGS.LOG_ERROR(v_SELECT.POLR_TYPE || ' Exists In The Settlement Load But Not In BGE_SUPPLIER_VIEW Table For The Specified Date Range', v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
         v_HAVE_ERROR := TRUE;
       END IF;  
   END LOOP;

   FOR v_SELECT IN c_SELECT_POLR_SHARE LOOP
      IF v_SELECT.SHARE_OF_LOAD <> 1 THEN
         LOGS.LOG_ERROR('The Share Of The Load In The BGE_SUPPLIER_VIEW Does Not Sum To 1 For POLR Type: ' || v_SELECT.POLR_TYPE || ', Share Of Load: ' || TO_CHAR(v_SELECT.SHARE_OF_LOAD), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
         v_HAVE_ERROR := TRUE;
      END IF;
   END LOOP;

   IF NOT v_HAVE_ERROR THEN
      POST_COMPETITIVE_DATA(v_SETTLEMENT_TYPE_NAME, v_SERVICE_CODE, v_STATEMENT_TYPE_ID, p_BEGIN_DATE, p_END_DATE);
      POST_NON_COMPETITIVE_DATA(v_SETTLEMENT_TYPE_NAME, v_SERVICE_CODE, v_STATEMENT_TYPE_ID, p_BEGIN_DATE, p_END_DATE);
      ACCEPT_OBLIGATION(v_SETTLEMENT_TYPE_NAME, v_SERVICE_CODE, v_STATEMENT_TYPE_ID, p_BEGIN_DATE, p_END_DATE);
   END IF;

   POST_POLR_SCHEDULE(CASE p_SETTLEMENT_TYPE_ORDER WHEN 1 THEN 2 WHEN 2 THEN 3 ELSE v_STATEMENT_TYPE_ID END, p_BEGIN_DATE, p_END_DATE);

-- Stop The Process Log --
   p_MESSAGE := c_ACCEPT_SETTLEMENT || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100));
   LOGS.LOG_INFO(p_MESSAGE, v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ERRS.ABORT_PROCESS;
END ACCEPT_SETTLEMENT;

PROCEDURE LIST_SETTLEMENT_RUN_TYPE(p_LABEL OUT VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   p_LABEL := 'Settlement Type';
   OPEN p_CURSOR FOR
      SELECT SETTLEMENT_TYPE_NAME "RUN_TYPE", SETTLEMENT_TYPE_ORDER "RUN_ID"
      FROM SETTLEMENT_TYPE
      ORDER BY SETTLEMENT_TYPE_ORDER; 
END LIST_SETTLEMENT_RUN_TYPE;

PROCEDURE DEX_ACCEPT_SETTLEMENT
   (
   p_ENTITY_LIST IN VARCHAR2,  --Settlement Type Id--
   p_BEGIN_DATE  IN DATE,
   p_END_DATE    IN DATE,
   p_STATUS     OUT NUMBER,
   p_MESSAGE    OUT VARCHAR2
   ) AS
BEGIN
   ACCEPT_SETTLEMENT(
      p_SETTLEMENT_TYPE_ORDER => TO_NUMBER(p_ENTITY_LIST),
      p_BEGIN_DATE            => p_BEGIN_DATE,
      p_END_DATE              => p_END_DATE,
      p_STATUS                => p_STATUS,
      p_MESSAGE               => p_MESSAGE);
EXCEPTION
   WHEN OTHERS THEN
      p_STATUS := SQLCODE;
      p_MESSAGE := SQLERRM;
END DEX_ACCEPT_SETTLEMENT;

PROCEDURE POST_SETTLEMENT_PROFILES
   (
   p_BEGIN_DATE IN DATE, 
   p_END_DATE IN DATE, 
   p_STATUS OUT NUMBER, 
   p_MESSAGE OUT VARCHAR2
   ) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'POST_SETTLEMENT_PROFILES';
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_COUNT PLS_INTEGER;
CURSOR c_SELECT IS SELECT PROFILE_SET_ID, PROFILE_ID FROM LOAD_PROFILE_SET WHERE PROFILE_SET_ID IN (SELECT PROFILE_SET_ID FROM LOAD_PROFILE_SET_MEMBER);
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_POST_SETTLEMENT_PROFILES);
   p_MESSAGE := NULL;
   p_STATUS := GA.SUCCESS;
   FOR v_SELECT IN c_SELECT LOOP
      PI.CREATE_LR_RESULTANT_PROFILE(
         p_MODEL_ID                  => GA.ELECTRIC_MODEL,
         p_PROFILE_SET_ID            => v_SELECT.PROFILE_SET_ID,
         p_RESULTANT_PROFILE_ID      => v_SELECT.PROFILE_ID,
         p_PROFILE_STATUS            => 'Production',
         p_PROFILE_INTERVALS_PER_DAY => 24,
         p_ROLLUP_INTERVAL           => 'Hour',
         p_BEGIN_DATE                => p_BEGIN_DATE,
         p_END_DATE                  => p_END_DATE,
         p_AS_OF_DATE                => CONSTANTS.LOW_DATE,
         p_WANT_AVG                  => 1,
         p_STATUS                    => p_STATUS);
      ERRS.VALIDATE_STATUS('PI.CREATE_LR_RESULTANT_PROFILE', p_STATUS);
      v_COUNT := v_COUNT + 1;
   END LOOP;
-- Stop The Process Log --
   p_MESSAGE := 'Number Of Profiles Processed: ' || TO_CHAR(v_COUNT);
   LOGS.LOG_INFO(p_MESSAGE, v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   LOGS.LOG_INFO(c_POST_SETTLEMENT_PROFILES || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ERRS.ABORT_PROCESS;
END POST_SETTLEMENT_PROFILES;

PROCEDURE ROUND_PJM_ESCHEDULE
   (
   p_SCHEDULE_TYPE IN NUMBER,
   p_SCHEDULE_STATE IN NUMBER,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE
   ) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'ROUND_PJM_ESCHEDULE';
v_BEGIN_DATE     DATE;
v_END_DATE       DATE;
v_SCHEDULE_DATE  DATE;
v_CONTRACT       VARCHAR2(64);
v_CONTRACT_NAME  VARCHAR2(64);
v_LOAD_VAL       NUMBER(14,4);
v_SCHEDULE_VAL   NUMBER(14,4);
v_DELTA          NUMBER(14,4);
v_CONTRACT_ID    NUMBER(9);
v_BOLMAX         BOOLEAN;
v_ROUND          NUMBER;
v_COUNT          PLS_INTEGER;
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
CURSOR c_SELECT(p_SERVICE_DATE IN DATE) IS
SELECT *
FROM IT_SCHEDULE
WHERE SCHEDULE_TYPE  = p_SCHEDULE_TYPE
   AND SCHEDULE_STATE = GA.INTERNAL_STATE
   AND SCHEDULE_DATE  = p_SERVICE_DATE
   AND AMOUNT = 
      (SELECT MAX(AMOUNT)
      FROM IT_SCHEDULE
      WHERE SCHEDULE_TYPE  = p_SCHEDULE_TYPE
         AND SCHEDULE_STATE = GA.INTERNAL_STATE
         AND SCHEDULE_DATE  = p_SERVICE_DATE
         AND TRANSACTION_ID IN (SELECT A.TRANSACTION_ID FROM INTERCHANGE_TRANSACTION A JOIN TP_CONTRACT_NUMBER B ON B.CONTRACT_NUMBER = v_CONTRACT AND B.CONTRACT_ID = A.CONTRACT_ID))
   AND TRANSACTION_ID IN (SELECT A.TRANSACTION_ID FROM INTERCHANGE_TRANSACTION A JOIN TP_CONTRACT_NUMBER B ON B.CONTRACT_NUMBER = v_CONTRACT AND B.CONTRACT_ID = A.CONTRACT_ID);
BEGIN
   UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, GA.LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

   SELECT MAX(TRIM(VALUE)) INTO v_CONTRACT FROM SYSTEM_DICTIONARY WHERE MODULE = 'Scheduling' AND UPPER(KEY1) = 'PJM EXPORT' AND SETTING_NAME = 'Rounding Correction Contract ID';
   IF v_CONTRACT IS NULL THEN
      ERRS.LOG_AND_RAISE('SYSTEM SETTING "Rounding Correction Contract ID" Not Found.');
   END IF;

   SELECT TO_NUMBER(TRIM(MAX(VALUE))) INTO v_ROUND FROM SYSTEM_DICTIONARY WHERE MODULE = 'Scheduling' AND UPPER(KEY1) = 'PJM EXPORT' AND SETTING_NAME = 'Rounding Correction Max. Value (MW)';
   IF v_CONTRACT IS NULL THEN
      ERRS.LOG_AND_RAISE('System Setting "Rounding Correction Maximum Value (MW)" Not Found.');
   END IF;

   SELECT COUNT(*) INTO v_COUNT FROM TP_CONTRACT_NUMBER WHERE CONTRACT_NUMBER = v_CONTRACT;
   IF v_CONTRACT IS NULL THEN
      ERRS.LOG_AND_RAISE('Transportation Provider Contract "' || v_CONTRACT || '" Not Found.');
   END IF;

   v_SCHEDULE_DATE := v_BEGIN_DATE;
   WHILE v_SCHEDULE_DATE <= v_END_DATE LOOP
      SELECT ROUND(MAX(LOAD_VAL),3) INTO v_LOAD_VAL
      FROM AREA A
         JOIN AREA_LOAD AL ON  AL.AREA_ID = A.AREA_ID AND AL.CASE_ID = GA.BASE_CASE_ID AND AL.LOAD_CODE = CONSTANTS.CODE_ACTUAL AND AL.AS_OF_DATE = CONSTANTS.LOW_DATE AND AL.LOAD_DATE = v_SCHEDULE_DATE
      WHERE A.AREA_NAME = c_LOAD_NAME;
      IF v_LOAD_VAL IS NULL THEN
         ERRS.LOG_AND_RAISE('System Load Not Found For Service Date: ' || FROM_CUT_AS_HED(v_SCHEDULE_DATE, LOCAL_TIME_ZONE));
      END IF;

      SELECT ROUND(SUM(B.AMOUNT),3) INTO v_SCHEDULE_VAL
      FROM INTERCHANGE_TRANSACTION A
         JOIN IT_SCHEDULE B ON B.TRANSACTION_ID = A.TRANSACTION_ID AND B.SCHEDULE_TYPE = p_SCHEDULE_TYPE AND B.SCHEDULE_STATE = GA.INTERNAL_STATE AND B.SCHEDULE_DATE = v_SCHEDULE_DATE
         JOIN TP_CONTRACT_NUMBER C ON C.CONTRACT_ID = A.CONTRACT_ID AND UPPER(C.CONTRACT_NAME) NOT LIKE '%_ALM'
         JOIN SYSTEM_DATE_TIME T ON T.TIME_ZONE = GA.LOCAL_TIME_ZONE AND T.DATA_INTERVAL_TYPE  = c_DATA_INTERVAL_TYPE AND T.DAY_TYPE = c_DAY_TYPE AND T.CUT_DATE = B.SCHEDULE_DATE AND T.LOCAL_DAY_TRUNC_DATE BETWEEN C.BEGIN_DATE AND NVL(C.END_DATE, T.LOCAL_DAY_TRUNC_DATE)
      WHERE A.TRANSACTION_TYPE = 'Load'
         AND A.IS_EXPORT_SCHEDULE = 1;
      IF v_SCHEDULE_VAL IS NULL THEN
         ERRS.LOG_AND_RAISE('Schedules Not Found For Service Date: ' || FROM_CUT_AS_HED(v_SCHEDULE_DATE, LOCAL_TIME_ZONE));
      END IF;
      v_DELTA := ABS(v_LOAD_VAL-v_SCHEDULE_VAL);
      IF v_DELTA > v_ROUND THEN
         ERRS.LOG_AND_RAISE('The System Load-Schedule Delta "' || TO_CHAR(v_DELTA) ||  '" Is Greater Than "' || TO_CHAR(v_ROUND) || '" For ' || FROM_CUT_AS_HED(v_SCHEDULE_DATE, GA.LOCAL_TIME_ZONE));
      END IF;
      v_DELTA := ROUND(v_LOAD_VAL-v_SCHEDULE_VAL,3);
      v_BOLMAX := TRUE;
      FOR v_SELECT IN c_SELECT(v_SCHEDULE_DATE) LOOP
         IF v_BOLMAX THEN
            SELECT MAX(B.CONTRACT_NAME) INTO v_CONTRACT_NAME FROM INTERCHANGE_TRANSACTION A JOIN TP_CONTRACT_NUMBER B ON B.CONTRACT_ID = A.CONTRACT_ID WHERE A.TRANSACTION_ID = v_SELECT.TRANSACTION_ID;
            IF UPPER(v_CONTRACT_NAME) LIKE '%ALM%' THEN
               ERRS.LOG_AND_RAISE('Contract Id "' || v_CONTRACT || '" Has An ALM Contract "' || v_CONTRACT_NAME ||'".');
            END IF;
            UPDATE IT_SCHEDULE SET AMOUNT = AMOUNT + v_DELTA
            WHERE TRANSACTION_ID = v_SELECT.TRANSACTION_ID
               AND SCHEDULE_TYPE  = v_SELECT.SCHEDULE_TYPE
               AND SCHEDULE_STATE = SCHEDULE_STATE
               AND SCHEDULE_DATE  = v_SCHEDULE_DATE;
            v_BOLMAX := FALSE;
         END IF;
      END LOOP;
      v_SCHEDULE_DATE := v_SCHEDULE_DATE + 1/24;
   END LOOP;
   COMMIT;
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, c_STEP_NAME, c_PACKAGE_NAME);
END ROUND_PJM_ESCHEDULE;

END CDI_SETTLEMENT;
/

