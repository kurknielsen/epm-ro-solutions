CREATE OR REPLACE PACKAGE BODY CDI_ANCILLARY_SERVICE AS

TYPE t_COUNTER IS TABLE OF PLS_INTEGER INDEX BY VARCHAR2(100);

c_SET_INITIAL_BID_BLOCK_SIZE   CONSTANT VARCHAR2(64) := 'CDI: Set Initial Bid Block Size';
c_ACCEPT_PLC_NSPL_SCHEDULE     CONSTANT VARCHAR2(64) := 'CDI: Accept PLC/NSPL Schedule';
c_ACCEPT_FTR_NSPL_SCHEDULE     CONSTANT VARCHAR2(64) := 'CDI: Accept FTR NSPL Schedule';
c_POST_DEFAULT_PLC             CONSTANT VARCHAR2(64) := 'CDI: Post Default PLC';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'MM/DD/YYYY';
c_DATE_TIME_FORMAT             CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH24:MI:SS';
c_PLC_NAME                     CONSTANT VARCHAR2(16) := 'ICAP';
c_NSPL_NAME                    CONSTANT VARCHAR2(16) := 'Network Service';
c_DEFAULT_SUPPLIER_NAME        CONSTANT VARCHAR2(16) := 'DEFAULT';
c_ONE_SECOND                   CONSTANT NUMBER       := 1/86400;
c_COMMA                        CONSTANT CHAR(1)      := ',';

l_MESSAGE VARCHAR2(1000);
l_STATUS  NUMBER;

PROCEDURE POST_COMPETITIVE_POLR
   (
   p_BEGIN_DATE IN DATE,
   p_END_DATE   IN DATE,
   p_ICAP_ID    IN PLS_INTEGER,
   p_NSPL_ID    IN PLS_INTEGER
   ) AS
v_ICAP_VALUE   NUMBER;
v_NET_VALUE    NUMBER;
v_COUNT        PLS_INTEGER := 0;
v_SERVICE_DATE DATE := TRUNC(p_BEGIN_DATE);
BEGIN
   WHILE v_SERVICE_DATE <= p_END_DATE LOOP
      MERGE INTO CDI_PLC_NSPL_STAGE T
      USING
         (SELECT PLC_DATE, ESP_ID, PSE_ID, CONTRACT_NAME "PJM_SHORT_NAME", POLR_TYPE, VOLTAGE_CLASS, REPORTED_SEGMENT, TICKET_NUMBER, PLC_BAND, SUM(ICAP_VALUE) "ICAP_VALUE", SUM(NSPL_VALUE) "NSPL_VALUE"
         FROM
            (SELECT v_SERVICE_DATE "PLC_DATE", B.ESP_ID, F.PSE_ID, G.CONTRACT_NAME, D.POLR_TYPE, D.VOLTAGE_CLASS, D.REPORTED_SEGMENT, NULL "TICKET_NUMBER", D.PLC_BAND,
               SUM(CASE WHEN A.ANCILLARY_SERVICE_ID = p_ICAP_ID THEN A.SERVICE_VAL END) "ICAP_VALUE",
               SUM(CASE WHEN A.ANCILLARY_SERVICE_ID = p_NSPL_ID THEN A.SERVICE_VAL END) "NSPL_VALUE"
            FROM AGGREGATE_ANCILLARY_SERVICE  A
               JOIN AGGREGATE_ACCOUNT_ESP     B ON B.AGGREGATE_ID = A.AGGREGATE_ID AND v_SERVICE_DATE BETWEEN B.BEGIN_DATE AND NVL(B.END_DATE, v_SERVICE_DATE)
               JOIN ENERGY_SERVICE_PROVIDER   C ON C.ESP_ID = B.ESP_ID
               JOIN POOL                      D ON D.POOL_ID = B.POOL_ID
               JOIN PSE_ESP                   H ON H.ESP_ID = B.ESP_ID AND v_SERVICE_DATE BETWEEN H.BEGIN_DATE AND NVL(H.END_DATE, v_SERVICE_DATE)
               JOIN PURCHASING_SELLING_ENTITY F ON F.PSE_ID = H.PSE_ID
               JOIN INTERCHANGE_CONTRACT      E ON E.CONTRACT_NAME = F.PSE_NAME AND v_SERVICE_DATE BETWEEN E.BEGIN_DATE AND NVL(E.END_DATE, v_SERVICE_DATE)
               JOIN TP_CONTRACT_NUMBER        G ON G.CONTRACT_ID = E.CONTRACT_ID AND v_SERVICE_DATE BETWEEN G.BEGIN_DATE AND NVL(G.END_DATE, v_SERVICE_DATE)
               JOIN ACCOUNT_EDC               I ON I.ACCOUNT_ID = B.ACCOUNT_ID AND v_SERVICE_DATE BETWEEN I.BEGIN_DATE AND NVL(I.END_DATE, v_SERVICE_DATE)
            WHERE A.SERVICE_DATE = v_SERVICE_DATE
            GROUP BY B.ESP_ID, F.PSE_ID, G.CONTRACT_NAME, D.POLR_TYPE, G.CONTRACT_NAME, D.VOLTAGE_CLASS, D.REPORTED_SEGMENT, D.PLC_BAND
            UNION
            SELECT v_SERVICE_DATE "PLC_DATE", B.ESP_ID, F.PSE_ID, G.CONTRACT_NAME, D.POLR_TYPE, D.VOLTAGE_CLASS, D.REPORTED_SEGMENT, NULL "TICKET_NUMBER", D.PLC_BAND,
               SUM(CASE WHEN A.ANCILLARY_SERVICE_ID = p_ICAP_ID THEN A.SERVICE_VAL END) "ICAP_VALUE",
               SUM(CASE WHEN A.ANCILLARY_SERVICE_ID = p_NSPL_ID THEN A.SERVICE_VAL END) "NSPL_VALUE"
            FROM ACCOUNT_ANCILLARY_SERVICE    A
               JOIN ACCOUNT_ESP               B ON B.ACCOUNT_ID = A.ACCOUNT_ID AND v_SERVICE_DATE BETWEEN B.BEGIN_DATE AND NVL(B.END_DATE, v_SERVICE_DATE)
               JOIN ENERGY_SERVICE_PROVIDER   C ON C.ESP_ID = B.ESP_ID
               JOIN POOL                      D ON D.POOL_ID = B.POOL_ID
               JOIN PSE_ESP                   H ON H.ESP_ID = B.ESP_ID
               JOIN PURCHASING_SELLING_ENTITY F ON F.PSE_ID = H.PSE_ID
               JOIN INTERCHANGE_CONTRACT      E ON E.CONTRACT_NAME = F.PSE_NAME AND v_SERVICE_DATE BETWEEN E.BEGIN_DATE AND NVL(E.END_DATE, v_SERVICE_DATE)
               JOIN TP_CONTRACT_NUMBER        G ON G.CONTRACT_ID = E.CONTRACT_ID AND v_SERVICE_DATE BETWEEN G.BEGIN_DATE AND NVL(G.END_DATE, v_SERVICE_DATE)
               JOIN ACCOUNT_EDC               I ON I.ACCOUNT_ID = B.ACCOUNT_ID AND v_SERVICE_DATE BETWEEN I.BEGIN_DATE AND NVL(I.END_DATE, v_SERVICE_DATE)
            WHERE v_SERVICE_DATE BETWEEN A.BEGIN_DATE AND NVL(A.END_DATE, v_SERVICE_DATE)
            GROUP BY B.ESP_ID, F.PSE_ID, G.CONTRACT_NAME, D.POLR_TYPE, D.VOLTAGE_CLASS, D.REPORTED_SEGMENT, D.PLC_BAND)
         GROUP BY PLC_DATE, ESP_ID, PSE_ID, CONTRACT_NAME, POLR_TYPE, VOLTAGE_CLASS, REPORTED_SEGMENT, TICKET_NUMBER, PLC_BAND) S
      ON(TRUNC(T.PLC_DATE) = TRUNC(S.PLC_DATE) AND T.ESP_ID = S.ESP_ID AND T.PSE_ID = S.PSE_ID AND NVL(T.PJM_SHORT_NAME,'X') = NVL(S.PJM_SHORT_NAME, 'X') AND NVL(T.POLR_TYPE,'X') = NVL(S.POLR_TYPE, 'X') AND NVL(T.VOLTAGE_CLASS, 'X') = NVL(S.VOLTAGE_CLASS, 'X') AND NVL(T.REPORTED_SEGMENT, 'X') = NVL(S.REPORTED_SEGMENT, 'X') AND NVL(T.RFT_TICKET_NUMBER, 'X') = NVL(S.TICKET_NUMBER, 'X') AND NVL(T.PLC_BAND, 'X') = NVL(S.PLC_BAND, 'X'))
      WHEN MATCHED THEN
         UPDATE SET T.ICAP_VALUE = S.ICAP_VALUE, T.NSPL_VALUE = S.NSPL_VALUE
      WHEN NOT MATCHED THEN
         INSERT(PLC_DATE, ESP_ID, PSE_ID, PJM_SHORT_NAME, POLR_TYPE, VOLTAGE_CLASS, REPORTED_SEGMENT, RFT_TICKET_NUMBER, PLC_BAND, ICAP_VALUE, NSPL_VALUE)
         VALUES(S.PLC_DATE, S.ESP_ID, S.PSE_ID, S.PJM_SHORT_NAME, S.POLR_TYPE, S.VOLTAGE_CLASS, S.REPORTED_SEGMENT, NULL, S.PLC_BAND, S.ICAP_VALUE, S.NSPL_VALUE);
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
      v_SERVICE_DATE := v_SERVICE_DATE + 1;
   END LOOP;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_PLC_NSPL_LOAD_STAGE Table: ' || TO_CHAR(v_COUNT));
END POST_COMPETITIVE_POLR;

PROCEDURE POST_NON_COMPETITIVE_POLR
   (
   p_BEGIN_DATE    IN  DATE,
   p_END_DATE      IN  DATE,
   p_ICAP_VALUE    IN  NUMBER,
   p_NSPL_VALUE    IN  NUMBER
   ) AS
v_ICAP_VALUE   NUMBER;
v_NET_VALUE    NUMBER;
v_SERVICE_DATE DATE := TRUNC(p_BEGIN_DATE);
v_COUNT        PLS_INTEGER := 0;
CURSOR c_SELECT(p_SERVICE_DATE IN DATE) IS
   SELECT ESP_ID, PSE_ID, POLR_TYPE, VOLTAGE_CLASS, REPORTED_SEGMENT, PLC_BAND, SUM(ICAP_VALUE) "ICAP_VALUE", SUM(NSPL_VALUE) "NSPL_VALUE"
   FROM
      (SELECT B.ESP_ID, F.PSE_ID, D.POLR_TYPE, D.VOLTAGE_CLASS, D.REPORTED_SEGMENT, D.PLC_BAND,
         SUM(CASE WHEN A.ANCILLARY_SERVICE_ID = p_ICAP_VALUE THEN A.SERVICE_VAL END) "ICAP_VALUE",
         SUM(CASE WHEN A.ANCILLARY_SERVICE_ID = p_NSPL_VALUE THEN A.SERVICE_VAL END) "NSPL_VALUE"
      FROM AGGREGATE_ANCILLARY_SERVICE  A
         JOIN AGGREGATE_ACCOUNT_ESP     B ON B.AGGREGATE_ID = A.AGGREGATE_ID AND p_SERVICE_DATE BETWEEN B.BEGIN_DATE AND NVL(B.END_DATE, p_SERVICE_DATE)
         JOIN ENERGY_SERVICE_PROVIDER   C ON C.ESP_ID = B.ESP_ID AND UPPER(C.ESP_NAME) = c_DEFAULT_SUPPLIER_NAME
         JOIN POOL                      D ON D.POOL_ID = B.POOL_ID
         JOIN PSE_ESP                   E ON E.ESP_ID = B.ESP_ID AND p_SERVICE_DATE BETWEEN E.BEGIN_DATE AND NVL(E.END_DATE, p_SERVICE_DATE)
         JOIN PURCHASING_SELLING_ENTITY F ON F.PSE_ID = E.PSE_ID
         JOIN ACCOUNT_EDC               G ON G.ACCOUNT_ID = B.ACCOUNT_ID AND p_SERVICE_DATE BETWEEN G.BEGIN_DATE AND NVL(G.END_DATE, p_SERVICE_DATE)
      WHERE A.SERVICE_DATE = p_SERVICE_DATE
      GROUP BY B.ESP_ID, F.PSE_ID, D.POLR_TYPE, D.VOLTAGE_CLASS, D.REPORTED_SEGMENT, D.PLC_BAND
      UNION
      SELECT B.ESP_ID, F.PSE_ID, D.POLR_TYPE, D.VOLTAGE_CLASS, D.REPORTED_SEGMENT, D.PLC_BAND,
         SUM(CASE WHEN A.ANCILLARY_SERVICE_ID = p_ICAP_VALUE THEN A.SERVICE_VAL END) "ICAP_VALUE",
         SUM(CASE WHEN A.ANCILLARY_SERVICE_ID = p_NSPL_VALUE THEN A.SERVICE_VAL END) "NSPL_VALUE"
      FROM ACCOUNT_ANCILLARY_SERVICE    A
         JOIN ACCOUNT_ESP               B ON B.ACCOUNT_ID = A.ACCOUNT_ID AND p_SERVICE_DATE BETWEEN B.BEGIN_DATE AND NVL(B.END_DATE, p_SERVICE_DATE)
         JOIN ENERGY_SERVICE_PROVIDER   C ON C.ESP_ID = B.ESP_ID AND UPPER(C.ESP_NAME) = c_DEFAULT_SUPPLIER_NAME
         JOIN POOL                      D ON D.POOL_ID = B.POOL_ID
         JOIN PSE_ESP                   H ON H.ESP_ID = B.ESP_ID AND p_SERVICE_DATE BETWEEN H.BEGIN_DATE AND NVL(H.END_DATE, p_SERVICE_DATE)
         JOIN PURCHASING_SELLING_ENTITY F ON F.PSE_ID = H.PSE_ID
         JOIN ACCOUNT_EDC               I ON I.ACCOUNT_ID = A.ACCOUNT_ID AND p_SERVICE_DATE BETWEEN I.BEGIN_DATE AND NVL(I.END_DATE, p_SERVICE_DATE)
      WHERE p_SERVICE_DATE BETWEEN A.BEGIN_DATE AND NVL(A.END_DATE, p_SERVICE_DATE)
      GROUP BY B.ESP_ID, F.PSE_ID, D.POLR_TYPE, D.VOLTAGE_CLASS, D.REPORTED_SEGMENT, D.PLC_BAND)
   GROUP BY ESP_ID, PSE_ID, POLR_TYPE, VOLTAGE_CLASS, REPORTED_SEGMENT, PLC_BAND;
BEGIN
   WHILE v_SERVICE_DATE <= p_END_DATE LOOP
      FOR v_SELECT IN c_SELECT(v_SERVICE_DATE) LOOP
         INSERT INTO CDI_PLC_NSPL_STAGE(PLC_DATE,ESP_ID,PSE_ID,PJM_SHORT_NAME,POLR_TYPE,VOLTAGE_CLASS,REPORTED_SEGMENT,RFT_TICKET_NUMBER,PLC_BAND,ICAP_VALUE,NSPL_VALUE)
         SELECT v_SERVICE_DATE, v_SELECT.ESP_ID, v_SELECT.PSE_ID, A.PJM_SHORT, v_SELECT.POLR_TYPE, v_SELECT.VOLTAGE_CLASS, v_SELECT.REPORTED_SEGMENT, A.SUPPLIER_ID, v_SELECT.PLC_BAND, SUM(v_SELECT.ICAP_VALUE * A.SHARE_OF_LOAD), SUM(v_SELECT.NSPL_VALUE* A.SHARE_OF_LOAD)
         FROM BGE_SUPPLIER_VIEW A
         WHERE A.POLR_TYPE = v_SELECT.POLR_TYPE
            AND v_SERVICE_DATE BETWEEN A.POWER_FLOW_START AND A.POWER_FLOW_END
         GROUP BY v_SELECT.ESP_ID, v_SELECT.PSE_ID, A.PJM_SHORT, v_SELECT.POLR_TYPE, v_SELECT.VOLTAGE_CLASS, v_SELECT.REPORTED_SEGMENT, A.SUPPLIER_ID, v_SELECT.PLC_BAND;
         v_COUNT := v_COUNT + SQL%ROWCOUNT;
      END LOOP;
      v_SERVICE_DATE := v_SERVICE_DATE + 1;
   END LOOP;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_PLC_NSPL_LOAD_STAGE Table: ' || TO_CHAR(v_COUNT));
END POST_NON_COMPETITIVE_POLR;

PROCEDURE POST_INCREMENT_DECREMENT(p_BEGIN_DATE IN DATE, p_END_DATE IN DATE) AS
v_BASE_SIZE_PRL   NUMBER(14,3);
v_BASE_SIZE_PRX   NUMBER(14,3);
v_BASE_SIZE       NUMBER(14,3);
v_TOLERANCE       NUMBER(14,3);
v_BASE_PERCENT    NUMBER(9,7);
v_INC_PERCENT     NUMBER(9,7);
v_DEDUCTION       NUMBER(14,3);
v_DEDUCTION_PRL   NUMBER(14,3);
v_DEDUCTION_PRX   NUMBER(14,3);
v_AGG_BLOCK_ADJUSTMENT     NUMBER(14,3);
v_PRL_AGG_BLOCK_ADJUSTMENT NUMBER(14,3);
v_PRX_AGG_BLOCK_ADJUSTMENT NUMBER(14,3);
v_INC_LABEL       CHAR(1);
v_DEC_LABEL       CHAR(1);
v_PRX_PERCENT_DEC NUMBER;
v_PRL_PERCENT_DEC NUMBER;
v_INC_MW          NUMBER := TO_NUMBER(GET_DICTIONARY_VALUE('INC_MW',0,'Settlement','INC_DEC','?','?',0));
v_DEC_MW          NUMBER := TO_NUMBER(GET_DICTIONARY_VALUE('DEC_MW',0,'Settlement','INC_DEC','?','?',0));
v_INDEX           VARCHAR2(100);
v_COUNTER         t_COUNTER;
CURSOR c_SELECT_POLR IS
   SELECT PLC_DATE, CASE POLR_TYPE WHEN 'PRL' THEN 'PRC' WHEN 'PRX' THEN 'PRC' ELSE POLR_TYPE END "POLR_TYPE",
      SUM(ICAP_VALUE) "ICAP_VALUE",
      SUM(NSPL_VALUE) "NSPL_VALUE",
      SUM(CASE WHEN POLR_TYPE IN ('PRL') THEN ICAP_VALUE ELSE 0 END) "ICAP_VALUE_PRL",
      SUM(CASE WHEN POLR_TYPE IN ('PRL') THEN NSPL_VALUE ELSE 0 END) "NSPL_VALUE_PRL",
      SUM(CASE WHEN POLR_TYPE IN ('PRX') THEN ICAP_VALUE ELSE 0 END) "ICAP_VALUE_PRX",
      SUM(CASE WHEN POLR_TYPE IN ('PRX') THEN NSPL_VALUE ELSE 0 END) "NSPL_VALUE_PRX"
   FROM CDI_PLC_LOAD
   WHERE PLC_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
      AND RFT_TICKET_NUMBER IS NOT NULL
   GROUP BY PLC_DATE, CASE POLR_TYPE WHEN 'PRL' THEN 'PRC' WHEN 'PRX' THEN 'PRC' ELSE POLR_TYPE END
   ORDER BY PLC_DATE, POLR_TYPE;
CURSOR c_SELECT(p_PLC_DATE IN DATE, p_POLR_TYPE IN VARCHAR2) IS
SELECT DISTINCT
   CASE WHEN POLR_TYPE = 'PRC' THEN BASE_BLOCK_SIZE_PRL/ DECODE(NUMBER_OF_BLOCKS_PRL,0,1,NUMBER_OF_BLOCKS_PRL) + (BASE_BLOCK_SIZE_PRX/ DECODE(NUMBER_OF_BLOCKS_PRX,0,1,NUMBER_OF_BLOCKS_PRX) ) + INC_MW ELSE BASE_BLOCK_SIZE END "BASE_BLOCK_SIZE2",
   CASE WHEN POLR_TYPE = 'PRC' THEN SHARE_OF_LOAD_PRL/ DECODE(NUMBER_OF_BLOCKS_PRL,0,1,NUMBER_OF_BLOCKS_PRL) + (SHARE_OF_LOAD_PRX/ DECODE(NUMBER_OF_BLOCKS_PRX,0,1,NUMBER_OF_BLOCKS_PRX) ) ELSE SHARE_OF_LOAD2 END "SHARE_OF_LOAD",
   X.*
FROM
   (SELECT
      A.RFT_TICKET_NUMBER RFP_TICKET_NUMBER,
      DECODE(B.POLR_TYPE,'PRL','PRC','PRX', 'PRC',B.POLR_TYPE) "POLR_TYPE",
      A.PLC_DATE              "PLC_DATE",
      A.PJM_SHORT_NAME        "PJM_SHORT_NAME",
      B.PJM_INC_SHORT         "PJM_INC_SHORT",
      SUM(B.NUMBER_OF_BLOCKS) "NUMBER_OF_BLOCKS",
      MAX(B.NUMBER_OF_BLOCKS) "MAX_NUMBER_OF_BLOCKS",
      AVG(B.INC_MW * 1000)    "INC_MW",
      AVG(B.DEC_MW * 1000)    "DEC_MW",
      SUM(C.BASE_BLOCK_SIZE)  "BASE_BLOCK_SIZE",
      C.EFFECTIVE_DATE        "EFFECTIVE_DATE",
      B.POWER_FLOW_END        "POWER_FLOW_END",
      SUM(B.SHARE_OF_LOAD)    "SHARE_OF_LOAD2",
      SUM(A.ICAP_VALUE)       "ICAP_VALUE",
      SUM(A.NSPL_VALUE)       "NSPL_VALUE",
      SUM(CASE WHEN C.POLR_TYPE = 'PRL' THEN  C.BASE_BLOCK_SIZE ELSE 0 END )                   "BASE_BLOCK_SIZE_PRL",
      SUM(CASE WHEN C.POLR_TYPE = 'PRX' THEN  C.BASE_BLOCK_SIZE ELSE 0 END )                   "BASE_BLOCK_SIZE_PRX",
      SUM(CASE WHEN B.POLR_TYPE = 'PRL' THEN  B.NUMBER_OF_BLOCKS ELSE 0 END )                  "NUMBER_OF_BLOCKS_PRL",
      SUM(CASE WHEN B.POLR_TYPE = 'PRX' THEN  B.NUMBER_OF_BLOCKS ELSE 0 END )                  "NUMBER_OF_BLOCKS_PRX",
      SUM(CASE WHEN B.POLR_TYPE = 'PRL' THEN  B.SHARE_OF_LOAD ELSE 0 END )                     "SHARE_OF_LOAD_PRL",
      SUM(CASE WHEN B.POLR_TYPE = 'PRX' THEN  B.SHARE_OF_LOAD ELSE 0 END )                     "SHARE_OF_LOAD_PRX",
      AVG(CASE WHEN B.POLR_TYPE = 'PRX' THEN  B.DEC_MW * 1000  ELSE NULL END )                 "DEC_MW_PRX",
      AVG(CASE WHEN B.POLR_TYPE = 'PRL' THEN  B.DEC_MW * 1000  ELSE NULL END )                 "DEC_MW_PRL",
      AVG(CASE WHEN B.POLR_TYPE = 'PRX' THEN  B.INC_MW * 1000  ELSE NULL END)                  "INC_MW_PRX",
      AVG(CASE WHEN B.POLR_TYPE = 'PRL' THEN  B.INC_MW * 1000  ELSE NULL END )                 "INC_MW_PRL",
      SUM(CASE WHEN C.POLR_TYPE = 'PRL' THEN  C.BASE_BLOCK_SIZE - B.DEC_MW * 1000 ELSE 0 END ) "DEC_BASE_BLOCK_SIZE_PRL",
      SUM(CASE WHEN C.POLR_TYPE = 'PRX' THEN  C.BASE_BLOCK_SIZE - B.DEC_MW * 1000 ELSE 0 END ) "DEC_BASE_BLOCK_SIZE_PRX"
   FROM
      (SELECT PLC_DATE, DECODE(POLR_TYPE,'PRL','PRC','PRX','PRC', POLR_TYPE) POLR_TYPE, RFT_TICKET_NUMBER, PJM_SHORT_NAME, SUM(ICAP_VALUE) "ICAP_VALUE", SUM(NSPL_VALUE) "NSPL_VALUE"
      FROM CDI_PLC_LOAD WHERE DECODE(POLR_TYPE,'PRL','PRC','PRX','PRC', POLR_TYPE) = p_POLR_TYPE
      GROUP BY PLC_DATE, DECODE(POLR_TYPE,'PRL','PRC','PRX','PRC', POLR_TYPE), RFT_TICKET_NUMBER, PJM_SHORT_NAME) A,
         BGE_SUPPLIER_VIEW B, CDI_BID_BLOCK_HIST C
   WHERE A.PLC_DATE = p_PLC_DATE
      AND A.POLR_TYPE = p_POLR_TYPE
      AND DECODE(B.POLR_TYPE,'PRL','PRC','PRX', 'PRC', B.POLR_TYPE) = A.POLR_TYPE
      AND DECODE(C.POLR_TYPE,'PRL','PRC','PRX', 'PRC', C.POLR_TYPE) = A.POLR_TYPE
      AND A.RFT_TICKET_NUMBER = B.SUPPLIER_ID
      AND B.PJM_INC_SHORT IS NOT NULL
      AND C.RFP_ID = B.SUPPLIER_ID
      AND C.POLR_TYPE = B.POLR_TYPE
      AND p_PLC_DATE BETWEEN B.INC_DEC_START AND NVL(B.POWER_FLOW_END, p_PLC_DATE)
      AND p_PLC_DATE BETWEEN C.EFFECTIVE_DATE /*+ 1/(24*60) */  AND NVL(C.STOP_DATE, p_PLC_DATE)
   GROUP BY A.RFT_TICKET_NUMBER, DECODE(B.POLR_TYPE,'PRL','PRC','PRX', 'PRC', B.POLR_TYPE), A.PLC_DATE, A.PJM_SHORT_NAME, B.PJM_INC_SHORT, C.EFFECTIVE_DATE, B.POWER_FLOW_END) X
ORDER BY RFP_TICKET_NUMBER, POLR_TYPE;

BEGIN
   LOGS.LOG_INFO('System Settings INC_MW: ' || TO_CHAR(v_INC_MW) || ', DEC_MW: ' || TO_CHAR(v_DEC_MW));
   v_COUNTER('CDI_BID_BLOCK_HIST') := 0;
   v_COUNTER('CDI_BID_BLOCK_HIST-PRL') := 0;
   v_COUNTER('CDI_BID_BLOCK_HIST-PRX') := 0;
   v_COUNTER('CDI_INC_DEC_EVENT_HIST') := 0;
   v_COUNTER('CDI_INC_DEC_EVENT_HIST-PRL') := 0;
   v_COUNTER('CDI_INC_DEC_EVENT_HIST-PRX') := 0;
   v_COUNTER('CDI_BASE_LOAD_ALLOC') := 0;
   FOR v_SELECT_POLR IN c_SELECT_POLR LOOP
      LOGS.LOG_DEBUG('PLC_DATE: ' || TO_CHAR(v_SELECT_POLR.PLC_DATE, c_DATE_FORMAT) || ', POLR_TYPE: ' || v_SELECT_POLR.POLR_TYPE || ', ICAP_VALUE: ' || TO_CHAR(v_SELECT_POLR.ICAP_VALUE) || ', NSPL_VALUE: ' || TO_CHAR(v_SELECT_POLR.NSPL_VALUE) || ', ICAP_VALUE_PRL: ' || TO_CHAR(v_SELECT_POLR.ICAP_VALUE_PRL) || ', NSPL_VALUE_PRL: ' || TO_CHAR(v_SELECT_POLR.NSPL_VALUE_PRL) || ', ICAP_VALUE_PRX: ' || TO_CHAR(v_SELECT_POLR.ICAP_VALUE_PRX) || ', NSPL_VALUE_PRX: ' || TO_CHAR(v_SELECT_POLR.NSPL_VALUE_PRX));
      FOR v_SELECT IN c_SELECT(v_SELECT_POLR.PLC_DATE, v_SELECT_POLR.POLR_TYPE) LOOP
         IF v_SELECT.POLR_TYPE = 'PRC' THEN
            BEGIN
               SELECT SUM(AGG_BLOCK_ADJUSTMENT),
                  SUM(CASE WHEN POLR_TYPE = 'PRL' THEN AGG_BLOCK_ADJUSTMENT ELSE 0 END),
                  SUM(CASE WHEN POLR_TYPE = 'PRX' THEN AGG_BLOCK_ADJUSTMENT ELSE 0 END)
               INTO v_AGG_BLOCK_ADJUSTMENT, v_PRL_AGG_BLOCK_ADJUSTMENT, v_PRX_AGG_BLOCK_ADJUSTMENT
               FROM CDI_PLC_ANNUAL_ADJUST
               WHERE RFP_TICKET = v_SELECT.RFP_TICKET_NUMBER
                  AND PJM_SHORT_NAME = v_SELECT.PJM_SHORT_NAME
                  AND POLR_TYPE IN ('PRL','PRX')
                  AND v_SELECT.PLC_DATE BETWEEN BEGIN_DATE AND NVL(END_DATE, v_SELECT.PLC_DATE);
            EXCEPTION
               WHEN OTHERS THEN
                  v_AGG_BLOCK_ADJUSTMENT := 0;
                  v_PRL_AGG_BLOCK_ADJUSTMENT :=0;
                  v_PRX_AGG_BLOCK_ADJUSTMENT:=0;
            END;
            v_TOLERANCE := v_SELECT.BASE_BLOCK_SIZE_PRL + v_SELECT.BASE_BLOCK_SIZE_PRX;
            v_DEDUCTION := v_SELECT.BASE_BLOCK_SIZE_PRL + v_SELECT.BASE_BLOCK_SIZE_PRX;
            v_PRX_PERCENT_DEC := CASE WHEN v_TOLERANCE <> 0 THEN v_SELECT.BASE_BLOCK_SIZE_PRX / v_TOLERANCE ELSE 0 END;
            v_PRL_PERCENT_DEC := CASE WHEN v_TOLERANCE <> 0 THEN v_SELECT.BASE_BLOCK_SIZE_PRL / v_TOLERANCE ELSE 0 END;
            v_BASE_SIZE_PRL   := CASE WHEN v_SELECT.NUMBER_OF_BLOCKS_PRL <> 0 THEN ((v_SELECT_POLR.ICAP_VALUE_PRL * v_SELECT.SHARE_OF_LOAD_PRL)) + NVL(v_PRL_AGG_BLOCK_ADJUSTMENT,0) ELSE 0 END;
            v_BASE_SIZE_PRX   := CASE WHEN v_SELECT.NUMBER_OF_BLOCKS_PRX <> 0 THEN ((v_SELECT_POLR.ICAP_VALUE_PRX * v_SELECT.SHARE_OF_LOAD_PRX)) + NVL(v_PRX_AGG_BLOCK_ADJUSTMENT,0) ELSE 0 END;
            v_BASE_SIZE := v_BASE_SIZE_PRL + v_BASE_SIZE_PRX;
        ELSE
            BEGIN
               SELECT AGG_BLOCK_ADJUSTMENT INTO v_AGG_BLOCK_ADJUSTMENT
               FROM CDI_PLC_ANNUAL_ADJUST
               WHERE RFP_TICKET = v_SELECT.RFP_TICKET_NUMBER
                  AND PJM_SHORT_NAME = v_SELECT.PJM_SHORT_NAME
                  AND POLR_TYPE = v_SELECT.POLR_TYPE
                  AND v_SELECT.PLC_DATE BETWEEN BEGIN_DATE AND NVL(END_DATE, v_SELECT.PLC_DATE);
            EXCEPTION
               WHEN OTHERS THEN
                  v_AGG_BLOCK_ADJUSTMENT := 0;
            END;
            v_TOLERANCE := v_SELECT.BASE_BLOCK_SIZE;
            v_DEDUCTION := v_SELECT.BASE_BLOCK_SIZE ;
            v_BASE_SIZE := (v_SELECT.ICAP_VALUE * v_SELECT.SHARE_OF_LOAD) + v_AGG_BLOCK_ADJUSTMENT;
         END IF;
         v_BASE_SIZE     := CASE WHEN v_SELECT.MAX_NUMBER_OF_BLOCKS <> 0 THEN v_BASE_SIZE     / v_SELECT.MAX_NUMBER_OF_BLOCKS ELSE 0 END;
         v_BASE_SIZE_PRX := CASE WHEN v_SELECT.MAX_NUMBER_OF_BLOCKS <> 0 THEN v_BASE_SIZE_PRX / v_SELECT.MAX_NUMBER_OF_BLOCKS ELSE 0 END;
         v_BASE_SIZE_PRL := CASE WHEN v_SELECT.MAX_NUMBER_OF_BLOCKS <> 0 THEN v_BASE_SIZE_PRL / v_SELECT.MAX_NUMBER_OF_BLOCKS ELSE 0 END;

         LOGS.LOG_DEBUG('TOLERANCE: ' || TO_CHAR(v_TOLERANCE) || ', DEDUCTION: ' || TO_CHAR(v_DEDUCTION) || ', PRX_PERCENT_DEC: ' || TO_CHAR(ROUND(v_PRX_PERCENT_DEC,6)) || ', PRL_PERCENT_DEC: ' || TO_CHAR(ROUND(v_PRL_PERCENT_DEC,6)) || ', BASE_SIZE_PRL: ' || TO_CHAR(v_BASE_SIZE_PRL) || ', BASE_SIZE_PRX: ' || TO_CHAR(v_BASE_SIZE_PRX) || ', BASE_SIZE: ' || TO_CHAR(v_BASE_SIZE) || ', BASE_PERCENT: ' || TO_CHAR(v_BASE_PERCENT) || ', INC_PERCENT: ' || TO_CHAR(v_INC_PERCENT) || ', INC_LABEL: ' || v_INC_LABEL || ', DEC_LABEL: ' || v_DEC_LABEL);

         IF v_BASE_SIZE > (v_TOLERANCE + v_INC_MW) THEN
            LOGS.LOG_DEBUG('Increment Mode');
            v_TOLERANCE := v_TOLERANCE + v_INC_MW ;
            v_BASE_PERCENT :=  CASE WHEN v_BASE_SIZE <> 0 THEN v_TOLERANCE / v_BASE_SIZE ELSE 0 END;
            v_INC_PERCENT  :=  1 - v_BASE_PERCENT;
            INSERT INTO CDI_PLC_LOAD(PLC_DATE, ESP_ID, PSE_ID, PJM_SHORT_NAME, POLR_TYPE, VOLTAGE_CLASS, REPORTED_SEGMENT, RFT_TICKET_NUMBER, PLC_BAND, ICAP_VALUE, NSPL_VALUE)
            SELECT DISTINCT PLC_DATE, ESP_ID, PSE_ID, v_SELECT.PJM_INC_SHORT, POLR_TYPE, VOLTAGE_CLASS, REPORTED_SEGMENT, RFT_TICKET_NUMBER, PLC_BAND, ICAP_VALUE * v_INC_PERCENT, NSPL_VALUE * v_INC_PERCENT
            FROM CDI_PLC_LOAD
            WHERE PLC_DATE = v_SELECT.PLC_DATE
               AND RFT_TICKET_NUMBER = v_SELECT.RFP_TICKET_NUMBER
               AND PJM_SHORT_NAME    = v_SELECT.PJM_SHORT_NAME
               AND CASE POLR_TYPE WHEN 'PRL' THEN 'PRC' WHEN 'PRX' THEN 'PRC' ELSE POLR_TYPE END = v_SELECT.POLR_TYPE;
            UPDATE CDI_PLC_LOAD SET ICAP_VALUE = ICAP_VALUE * v_BASE_PERCENT, NSPL_VALUE = NSPL_VALUE * v_BASE_PERCENT
            WHERE PLC_DATE = v_SELECT.PLC_DATE
               AND RFT_TICKET_NUMBER = v_SELECT.RFP_TICKET_NUMBER
               AND NVL(PJM_SHORT_NAME,'X') = NVL(v_SELECT.PJM_SHORT_NAME,'X')
               AND CASE NVL(POLR_TYPE,'X') WHEN 'PRL' THEN 'PRC' WHEN 'PRX' THEN 'PRC' ELSE NVL(POLR_TYPE,'X') END = NVL(v_SELECT.POLR_TYPE,'X');
            v_INC_LABEL := 'Y';
            v_DEC_LABEL := 'N';
         ELSIF v_BASE_SIZE < (v_DEDUCTION - v_DEC_MW) THEN
            LOGS.LOG_DEBUG('Decrement Mode');
            v_DEDUCTION := v_DEDUCTION - v_DEC_MW * FLOOR((v_DEDUCTION - v_BASE_SIZE)/v_DEC_MW);
            UPDATE CDI_BID_BLOCK_HIST SET STOP_DATE = v_SELECT.PLC_DATE - 1, EFFECTIVE_DATE = LEAST(v_SELECT.EFFECTIVE_DATE, v_SELECT.PLC_DATE - 2)
            WHERE RFP_ID = v_SELECT.RFP_TICKET_NUMBER
               AND CASE POLR_TYPE WHEN 'PRL' THEN 'PRC' WHEN 'PRX' THEN 'PRC' ELSE POLR_TYPE END = v_SELECT.POLR_TYPE
               AND EFFECTIVE_DATE = v_SELECT.EFFECTIVE_DATE;
            IF v_SELECT.POLR_TYPE = 'PRC' THEN
               INSERT INTO CDI_BID_BLOCK_HIST(RFP_ID, POLR_TYPE, BASE_BLOCK_SIZE, EFFECTIVE_DATE, STOP_DATE)
               VALUES(v_SELECT.RFP_TICKET_NUMBER, 'PRL', v_DEDUCTION * v_PRL_PERCENT_DEC, v_SELECT.PLC_DATE, GREATEST(v_SELECT.PLC_DATE + 1, v_SELECT.POWER_FLOW_END));
               v_COUNTER('CDI_BID_BLOCK_HIST-PRL') := v_COUNTER('CDI_BID_BLOCK_HIST-PRL') + SQL%ROWCOUNT;
               INSERT INTO CDI_BID_BLOCK_HIST(RFP_ID, POLR_TYPE, BASE_BLOCK_SIZE, EFFECTIVE_DATE, STOP_DATE)
               VALUES(v_SELECT.RFP_TICKET_NUMBER, 'PRX', v_DEDUCTION * v_PRX_PERCENT_DEC, v_SELECT.PLC_DATE, GREATEST(v_SELECT.PLC_DATE + 1, v_SELECT.POWER_FLOW_END));
               v_COUNTER('CDI_BID_BLOCK_HIST-PRX') := v_COUNTER('CDI_BID_BLOCK_HIST-PRX') + SQL%ROWCOUNT;
            ELSE
               INSERT INTO CDI_BID_BLOCK_HIST(RFP_ID, POLR_TYPE, BASE_BLOCK_SIZE, EFFECTIVE_DATE, STOP_DATE)
               VALUES(v_SELECT.RFP_TICKET_NUMBER, v_SELECT.POLR_TYPE, v_DEDUCTION, v_SELECT.PLC_DATE, GREATEST(v_SELECT.PLC_DATE + 1, v_SELECT.POWER_FLOW_END));
               v_COUNTER('CDI_BID_BLOCK_HIST') := v_COUNTER('CDI_BID_BLOCK_HIST') + SQL%ROWCOUNT;
            END IF;
            v_BASE_PERCENT := 1;
            v_INC_PERCENT  := 0;
            v_INC_LABEL := 'N';
            v_DEC_LABEL := 'Y';
         ELSE
            LOGS.LOG_DEBUG('Normal Mode');
            v_BASE_PERCENT := 1;
            v_INC_PERCENT  := 0;
            v_INC_LABEL := 'N';
            v_DEC_LABEL := 'N';
         END IF;

         IF v_SELECT.POLR_TYPE = 'PRC' THEN
            IF v_SELECT.BASE_BLOCK_SIZE_PRX <> 0 AND v_BASE_SIZE_PRX <> 0 THEN
               INSERT INTO CDI_INC_DEC_EVENT_HIST(RFP_TICKET, PJM_SHORT_NAME, POLR_TYPE, BASE_BLOCK_SIZE, NEW_BLOCK_SIZE, INC, DEC, PLC_DATE)
               VALUES(v_SELECT.RFP_TICKET_NUMBER, v_SELECT.PJM_SHORT_NAME, 'PRX', v_SELECT.BASE_BLOCK_SIZE_PRX, v_BASE_SIZE_PRX, v_INC_LABEL, v_DEC_LABEL, v_SELECT.PLC_DATE);
               v_COUNTER('CDI_INC_DEC_EVENT_HIST-PRX') := v_COUNTER('CDI_INC_DEC_EVENT_HIST-PRX') + SQL%ROWCOUNT;
            END IF;
            IF v_SELECT.BASE_BLOCK_SIZE_PRL <> 0 AND v_BASE_SIZE_PRL <> 0 THEN
               INSERT INTO CDI_INC_DEC_EVENT_HIST(RFP_TICKET, PJM_SHORT_NAME, POLR_TYPE, BASE_BLOCK_SIZE, NEW_BLOCK_SIZE, INC, DEC, PLC_DATE)
               VALUES(v_SELECT.RFP_TICKET_NUMBER, v_SELECT.PJM_SHORT_NAME, 'PRL', v_SELECT.BASE_BLOCK_SIZE_PRL, v_BASE_SIZE_PRL, v_INC_LABEL, v_DEC_LABEL, v_SELECT.PLC_DATE);
               v_COUNTER('CDI_INC_DEC_EVENT_HIST-PRL') := v_COUNTER('CDI_INC_DEC_EVENT_HIST-PRL') + SQL%ROWCOUNT;
            END IF;
         ELSE
            INSERT INTO CDI_INC_DEC_EVENT_HIST(RFP_TICKET, PJM_SHORT_NAME, POLR_TYPE, BASE_BLOCK_SIZE, NEW_BLOCK_SIZE, INC, DEC, PLC_DATE)
            VALUES(v_SELECT.RFP_TICKET_NUMBER, v_SELECT.PJM_SHORT_NAME, v_SELECT.POLR_TYPE, v_SELECT.BASE_BLOCK_SIZE, v_BASE_SIZE, v_INC_LABEL, v_DEC_LABEL, v_SELECT.PLC_DATE);
            v_COUNTER('CDI_INC_DEC_EVENT_HIST') := v_COUNTER('CDI_INC_DEC_EVENT_HIST') + SQL%ROWCOUNT;
         END IF;

         MERGE INTO CDI_BASE_LOAD_ALLOC T
         USING
         (SELECT v_SELECT.PLC_DATE "PLC_DATE", v_SELECT.RFP_TICKET_NUMBER "RFP_TICKET", v_SELECT.POLR_TYPE "POLR_TYPE", CASE WHEN v_INC_LABEL = 'N' THEN 1 ELSE CASE WHEN v_BASE_SIZE <> 0 THEN v_TOLERANCE / v_BASE_SIZE ELSE 0 END END "BASE_LOAD_FACTOR" FROM DUAL WHERE v_SELECT.POLR_TYPE <> 'PRC'
         UNION ALL
         SELECT v_SELECT.PLC_DATE "PLC_DATE", v_SELECT.RFP_TICKET_NUMBER "RFP_TICKET",              'PRX' "POLR_TYPE", CASE WHEN v_INC_LABEL = 'N' THEN 1 ELSE CASE WHEN v_BASE_SIZE <> 0 THEN v_TOLERANCE / v_BASE_SIZE ELSE 0 END END "BASE_LOAD_FACTOR" FROM DUAL WHERE v_SELECT.POLR_TYPE = 'PRC'
         UNION ALL
         SELECT v_SELECT.PLC_DATE "PLC_DATE", v_SELECT.RFP_TICKET_NUMBER "RFP_TICKET",              'PRL' "POLR_TYPE", CASE WHEN v_INC_LABEL = 'N' THEN 1 ELSE CASE WHEN v_BASE_SIZE <> 0 THEN v_TOLERANCE / v_BASE_SIZE ELSE 0 END END "BASE_LOAD_FACTOR" FROM DUAL WHERE v_SELECT.POLR_TYPE = 'PRC') S
         ON (T.PLC_DATE = S.PLC_DATE AND T.RFP_TICKET = S.RFP_TICKET AND T.POLR_TYPE = S.POLR_TYPE)
         WHEN MATCHED THEN
            UPDATE SET T.BASE_LOAD_FACTOR = S.BASE_LOAD_FACTOR
         WHEN NOT MATCHED THEN
            INSERT(PLC_DATE, RFP_TICKET, POLR_TYPE, BASE_LOAD_FACTOR)
            VALUES(S.PLC_DATE, S.RFP_TICKET, S.POLR_TYPE, S.BASE_LOAD_FACTOR);
         v_COUNTER('CDI_BASE_LOAD_ALLOC') := v_COUNTER('CDI_BASE_LOAD_ALLOC') + SQL%ROWCOUNT;
      END LOOP;
   END LOOP;
   v_INDEX := v_COUNTER.FIRST;
   WHILE v_INDEX IS NOT NULL LOOP
      LOGS.LOG_INFO('Number Of Records Posted To ' || v_INDEX || ': ' || TO_CHAR(v_COUNTER(v_INDEX)));
      v_INDEX := v_COUNTER.NEXT(v_INDEX);
   END LOOP;
END POST_INCREMENT_DECREMENT;

PROCEDURE POST_PJM_ECAPACITY(p_BEGIN_DATE IN DATE, p_END_DATE IN DATE) AS
v_PRIOR_DATE DATE := CONSTANTS.LOW_DATE;
v_PLC_ID  PLS_INTEGER;
v_NSPL_ID PLS_INTEGER;
v_NSPL_VALUE NUMBER;
v_NSPL_TOTAL NUMBER;
v_NSPL_RATIO NUMBER;
v_PLC_TOTAL  NUMBER;
v_PLC_VALUE  NUMBER;
v_PLC_RATIO  NUMBER;
v_ALLOCATE BOOLEAN;
v_NSPL_ROUND_SHORT_NAME VARCHAR2(100);
v_PLC_ALLOCATION_VAL ANCILLARY_SERVICE_ALLOCATION.ALLOCATION_VAL%TYPE;
v_NSPL_ALLOCATION_VAL ANCILLARY_SERVICE_ALLOCATION.ALLOCATION_VAL%TYPE;
CURSOR c_SELECT_PLC_NSPL IS
   SELECT PLC_DATE, PJM_SHORT_NAME, SUM(ICAP_VALUE) "PLC_VALUE", SUM(NSPL_VALUE) "NSPL_VALUE"
   FROM CDI_PLC_LOAD
   WHERE PLC_DATE <= p_END_DATE
      AND PLC_DATE >= p_BEGIN_DATE
   GROUP BY PLC_DATE, PJM_SHORT_NAME
   ORDER BY PLC_DATE, PJM_SHORT_NAME;
CURSOR c_SELECT_ADJUSTMENT IS
   SELECT PLC_DATE, SUM(NSPL_VAL) "NSPL_VAL" FROM CDI_PJM_ECAPACITY_ADJ GROUP BY PLC_DATE;
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PJM_ECAPACITY_ADJ';
   SELECT  NVL(MAX(ANCILLARY_SERVICE_ID), CONSTANTS.NOT_ASSIGNED) INTO v_PLC_ID FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_PLC_NAME;
   ASSERT(v_PLC_ID <> CONSTANTS.NOT_ASSIGNED, 'Ancillary Service For Peak Load Capacity Is Not Defined');
   SELECT  NVL(MAX(ANCILLARY_SERVICE_ID), CONSTANTS.NOT_ASSIGNED) INTO v_NSPL_ID FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_NSPL_NAME;
   ASSERT(v_NSPL_ID <> CONSTANTS.NOT_ASSIGNED, 'Ancillary Service For Network Service Peak Load Is Not Defined');
   SELECT MAX(ALLOCATION_VAL)*1000 INTO v_PLC_ALLOCATION_VAL FROM ANCILLARY_SERVICE_ALLOCATION WHERE ANCILLARY_SERVICE_ID = v_PLC_ID AND ALLOCATION_NAME = c_PLC_NAME AND p_BEGIN_DATE BETWEEN BEGIN_DATE AND END_DATE;
   LOGS.LOG_INFO('Peak Load Capacity Allocation Value: ' || TO_CHAR(v_PLC_ALLOCATION_VAL));
   IF NVL(v_PLC_ALLOCATION_VAL,0) <= 0 THEN
      ERRS.LOG_AND_RAISE('Peak Load Capacity Allocation Value Is Not Defined For ' || TO_CHAR(p_BEGIN_DATE, c_DATE_FORMAT));
   END IF;
   SELECT  MAX(ALLOCATION_VAL)*1000 INTO v_NSPL_ALLOCATION_VAL FROM ANCILLARY_SERVICE_ALLOCATION WHERE ANCILLARY_SERVICE_ID = v_NSPL_ID AND ALLOCATION_NAME = c_NSPL_NAME AND p_BEGIN_DATE BETWEEN BEGIN_DATE AND END_DATE;
   LOGS.LOG_INFO('Network Service Peak Load Allocation Value: ' || TO_CHAR(v_NSPL_ALLOCATION_VAL));
   IF NVL(v_NSPL_ALLOCATION_VAL,0) <= 0 THEN
      ERRS.LOG_AND_RAISE('Network Service Peak Load Allocation Value Is Not Defined For ' || TO_CHAR(p_BEGIN_DATE, c_DATE_FORMAT));
   END IF;
   v_NSPL_ROUND_SHORT_NAME := GET_DICTIONARY_VALUE('NSPL Rounding Correction Short Name', GA.ELECTRIC_MODEL, 'Scheduling', 'PJM Export');
   v_ALLOCATE := v_NSPL_ROUND_SHORT_NAME IS NOT NULL;
   LOGS.LOG_INFO('NSPL Allocation Enabled: ' || CASE WHEN v_ALLOCATE THEN 'Yes' ELSE 'No' END);

   FOR v_SELECT IN c_SELECT_PLC_NSPL LOOP
      IF NOT (v_PRIOR_DATE = v_SELECT.PLC_DATE) THEN
         SELECT SUM(NVL(NSPL_VALUE,0)) INTO v_NSPL_TOTAL FROM CDI_PLC_LOAD WHERE PLC_DATE = v_SELECT.PLC_DATE;
         SELECT SUM(NVL(ICAP_VALUE,0)) INTO v_PLC_TOTAL  FROM CDI_PLC_LOAD WHERE PLC_DATE = v_SELECT.PLC_DATE;
         v_NSPL_RATIO := CASE WHEN v_NSPL_TOTAL <> 0 THEN v_NSPL_ALLOCATION_VAL / v_NSPL_TOTAL ELSE 0 END;
         v_PLC_RATIO :=  CASE WHEN v_PLC_TOTAL  <> 0 THEN v_PLC_ALLOCATION_VAL  / v_PLC_TOTAL  ELSE 0 END;
         v_PRIOR_DATE := v_SELECT.PLC_DATE;
         UPDATE CDI_NETWORK_RECON_FACTOR SET FACTOR = v_NSPL_RATIO, ICAP_FACTOR = v_PLC_RATIO WHERE PLC_DATE = TRUNC(v_PRIOR_DATE);
         IF SQL%NOTFOUND THEN
            INSERT INTO CDI_NETWORK_RECON_FACTOR(PLC_DATE, FACTOR, ICAP_FACTOR) VALUES(TRUNC(v_PRIOR_DATE), v_NSPL_RATIO, v_PLC_RATIO);
         END IF;
      END IF;
      v_NSPL_VALUE := ROUND((v_SELECT.NSPL_VALUE*v_NSPL_RATIO)/1000,1);
      v_PLC_VALUE  := ROUND(v_SELECT.PLC_VALUE/1000,1);
      UPDATE CDI_PJM_ECAPACITY_ADJ SET NSPL_VAL = v_NSPL_VALUE, ICAP_VAL = v_PLC_VALUE WHERE PLC_DATE = v_SELECT.PLC_DATE AND PJM_SHORT_NAME = v_SELECT.PJM_SHORT_NAME;
      IF SQL%NOTFOUND THEN
         INSERT INTO CDI_PJM_ECAPACITY_ADJ(PLC_DATE, PJM_SHORT_NAME, ICAP_VAL, NSPL_VAL)
         VALUES(v_SELECT.PLC_DATE, v_SELECT.PJM_SHORT_NAME, v_PLC_VALUE, v_NSPL_VALUE);
      END IF;
      v_PRIOR_DATE := v_SELECT.PLC_DATE;
   END LOOP;

-- Allocate The Daily Difference--
   IF v_ALLOCATE THEN
      v_NSPL_TOTAL := ROUND((v_NSPL_ALLOCATION_VAL/1000),1);
      FOR v_SELECT IN c_SELECT_ADJUSTMENT LOOP
         v_NSPL_VALUE := v_NSPL_TOTAL - v_SELECT.NSPL_VAL;
         UPDATE CDI_PJM_ECAPACITY_ADJ SET NSPL_VAL = NSPL_VAL + v_NSPL_VALUE WHERE PLC_DATE = v_SELECT.PLC_DATE AND UPPER(PJM_SHORT_NAME) = UPPER(v_NSPL_ROUND_SHORT_NAME);
      END LOOP;
   END IF;
   COMMIT;
END POST_PJM_ECAPACITY;

FUNCTION GET_PLC_NSPL_CONTRACT
   (
   p_CONTRACT_NAME  IN VARCHAR2,
   p_CONTRACT_ALIAS IN VARCHAR2,
   p_CONTRACT_TYPE  IN VARCHAR2,
   p_BEGIN_DATE     IN DATE,
   p_END_DATE       IN DATE
   ) RETURN PLS_INTEGER AS
v_CONTRACT_ID PLS_INTEGER;
BEGIN
   SELECT MAX(CONTRACT_ID) INTO v_CONTRACT_ID FROM INTERCHANGE_CONTRACT WHERE CONTRACT_NAME = p_CONTRACT_NAME;
   IF v_CONTRACT_ID IS NULL THEN
      IO.PUT_INTERCHANGE_CONTRACT(
         o_OID                  => v_CONTRACT_ID,
         p_CONTRACT_NAME        => p_CONTRACT_NAME,
         p_CONTRACT_ALIAS       => p_CONTRACT_ALIAS,
         p_CONTRACT_DESC        => 'Retail Operations Generated Contract On '  || TO_CHAR(SYSDATE, c_DATE_TIME_FORMAT),
         p_CONTRACT_ID          => v_CONTRACT_ID,
         p_CONTRACT_STATUS      => 'Active',
         p_BEGIN_DATE           => p_BEGIN_DATE,
         p_END_DATE             => p_END_DATE,
         p_IS_EVERGREEN         => CONSTANTS.NOT_ASSIGNED,
         p_CONTRACT_TYPE        => p_CONTRACT_TYPE,
         p_BILLING_ENTITY_ID    => CONSTANTS.NOT_ASSIGNED,
         p_PURCHASER_ID         => CONSTANTS.NOT_ASSIGNED,
         p_SELLER_ID            => CONSTANTS.NOT_ASSIGNED,
         p_SOURCE_ID            => CONSTANTS.NOT_ASSIGNED,
         p_SINK_ID              => CONSTANTS.NOT_ASSIGNED,
         p_POR_ID               => CONSTANTS.NOT_ASSIGNED,
         p_POD_ID               => CONSTANTS.NOT_ASSIGNED,
         p_SC_ID                => CONSTANTS.NOT_ASSIGNED,
         p_AGREEMENT_TYPE       => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_APPROVAL_TYPE        => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_MARKET_TYPE          => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_LOSS_OPTION          => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_CONTRACT_FILE_NAME   => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_PIPELINE_ID          => CONSTANTS.NOT_ASSIGNED,
         p_PIPELINE_TARIFF_TYPE => CONSTANTS.UNDEFINED_ATTRIBUTE);
      INSERT INTO TP_CONTRACT_NUMBER(CONTRACT_ID, TP_ID, BEGIN_DATE, END_DATE, CONTRACT_NAME, CONTRACT_NUMBER, ENTRY_DATE)
      VALUES(v_CONTRACT_ID, CONSTANTS.NOT_ASSIGNED, p_BEGIN_DATE, p_END_DATE, p_CONTRACT_ALIAS, CONSTANTS.UNDEFINED_ATTRIBUTE, SYSDATE);   
      LOGS.LOG_INFO('New Ancillary Service Transaction Contract: ' || p_CONTRACT_NAME);
   ELSE
      UPDATE INTERCHANGE_CONTRACT SET BEGIN_DATE = LEAST(BEGIN_DATE, p_BEGIN_DATE), END_DATE = GREATEST(END_DATE, p_END_DATE) WHERE CONTRACT_ID = v_CONTRACT_ID;
      UPDATE TP_CONTRACT_NUMBER   SET BEGIN_DATE = LEAST(BEGIN_DATE, p_BEGIN_DATE), END_DATE = GREATEST(END_DATE, p_END_DATE) WHERE CONTRACT_ID = v_CONTRACT_ID;
   END IF;
RETURN v_CONTRACT_ID;
END GET_PLC_NSPL_CONTRACT;

FUNCTION GET_PLC_NSPL_TRANSACTION
   (
   p_TRANSACTION_NAME  IN VARCHAR2,
   p_TRANSACTION_ALIAS IN VARCHAR2,
   p_TRANSACTION_CODE  IN CHAR,
   p_BEGIN_DATE        IN DATE,
   p_END_DATE          IN DATE
   ) RETURN PLS_INTEGER AS
v_TRANSACTION_ID    PLS_INTEGER;
v_COMMODITY_ID      PLS_INTEGER;
v_SCHEDULE_GROUP_ID PLS_INTEGER;
v_CONTRACT_ID       PLS_INTEGER;
BEGIN
   SELECT MAX(TRANSACTION_ID) INTO v_TRANSACTION_ID FROM INTERCHANGE_TRANSACTION WHERE TRANSACTION_NAME = p_TRANSACTION_NAME;
   IF v_TRANSACTION_ID IS NULL THEN
      SELECT MAX(COMMODITY_ID) INTO v_COMMODITY_ID FROM IT_COMMODITY WHERE COMMODITY_NAME = CASE WHEN p_TRANSACTION_CODE = 'C' THEN 'Capacity' ELSE 'Transmission' END;
      SELECT MAX(SCHEDULE_GROUP_ID) INTO v_SCHEDULE_GROUP_ID FROM SCHEDULE_GROUP WHERE SCHEDULE_GROUP_NAME = 'EGS';
      v_CONTRACT_ID := GET_PLC_NSPL_CONTRACT(p_TRANSACTION_NAME, p_TRANSACTION_ALIAS, CASE WHEN p_TRANSACTION_CODE = 'C' THEN 'PLC' ELSE 'NSPL' END, p_BEGIN_DATE, p_END_DATE);
      IO.PUT_TRANSACTION(
         o_OID                      => v_TRANSACTION_ID,
         p_TRANSACTION_NAME         => p_TRANSACTION_NAME,
         p_TRANSACTION_ALIAS        => p_TRANSACTION_ALIAS,
         p_TRANSACTION_DESC         => 'Retail Operations Generated Ancillary Transaction On '  || TO_CHAR(SYSDATE, c_DATE_TIME_FORMAT),
         p_TRANSACTION_ID           => v_TRANSACTION_ID,
         p_TRANSACTION_TYPE         => 'Ancillary',
         p_TRANSACTION_CODE         => p_TRANSACTION_CODE,
         p_TRANSACTION_IDENTIFIER   => CASE WHEN p_TRANSACTION_CODE = 'C' THEN 'Peak Load Capacity' ELSE 'Network Service Peak Load' END,
         p_IS_FIRM                  => CONSTANTS.NOT_ASSIGNED,
         p_IS_IMPORT_SCHEDULE       => CONSTANTS.NOT_ASSIGNED,
         p_IS_EXPORT_SCHEDULE       => CONSTANTS.NOT_ASSIGNED,
         p_IS_BALANCE_TRANSACTION   => CONSTANTS.NOT_ASSIGNED,
         p_IS_BID_OFFER             => CONSTANTS.NOT_ASSIGNED,
         p_IS_EXCLUDE_FROM_POSITION => CONSTANTS.NOT_ASSIGNED,
         p_IS_IMPORT_EXPORT         => CONSTANTS.NOT_ASSIGNED,
         p_IS_DISPATCHABLE          => CONSTANTS.NOT_ASSIGNED,
         p_TRANSACTION_INTERVAL     => CONSTANTS.INTERVAL_DAY,
         p_EXTERNAL_INTERVAL        => CONSTANTS.INTERVAL_DAY,
         p_ETAG_CODE                => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_BEGIN_DATE               => p_BEGIN_DATE,
         p_END_DATE                 => p_END_DATE,
         p_PURCHASER_ID             => CONSTANTS.NOT_ASSIGNED,
         p_SELLER_ID                => CONSTANTS.NOT_ASSIGNED,
         p_CONTRACT_ID              => v_CONTRACT_ID,
         p_SC_ID                    => CONSTANTS.NOT_ASSIGNED,
         p_POR_ID                   => CONSTANTS.NOT_ASSIGNED,
         p_POD_ID                   => CONSTANTS.NOT_ASSIGNED,
         p_COMMODITY_ID             => v_COMMODITY_ID,
         p_SERVICE_TYPE_ID          => CONSTANTS.NOT_ASSIGNED,
         p_TX_TRANSACTION_ID        => CONSTANTS.NOT_ASSIGNED,
         p_PATH_ID                  => CONSTANTS.NOT_ASSIGNED,
         p_LINK_TRANSACTION_ID      => CONSTANTS.NOT_ASSIGNED,
         p_EDC_ID                   => CONSTANTS.NOT_ASSIGNED,
         p_PSE_ID                   => CONSTANTS.NOT_ASSIGNED,
         p_ESP_ID                   => CONSTANTS.NOT_ASSIGNED,
         p_POOL_ID                  => CONSTANTS.NOT_ASSIGNED,
         p_SCHEDULE_GROUP_ID        => v_SCHEDULE_GROUP_ID,
         p_MARKET_PRICE_ID          => CONSTANTS.NOT_ASSIGNED,
         p_ZOR_ID                   => CONSTANTS.NOT_ASSIGNED,
         p_ZOD_ID                   => CONSTANTS.NOT_ASSIGNED,
         p_SOURCE_ID                => CONSTANTS.NOT_ASSIGNED,
         p_SINK_ID                  => CONSTANTS.NOT_ASSIGNED,
         p_RESOURCE_ID              => CONSTANTS.NOT_ASSIGNED,
         p_AGREEMENT_TYPE           => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_APPROVAL_TYPE            => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_LOSS_OPTION              => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_TRAIT_CATEGORY           => CONSTANTS.UNDEFINED_ATTRIBUTE,
         p_TP_ID                    => CONSTANTS.NOT_ASSIGNED);
      LOGS.LOG_INFO('New Ancillary Service Transaction: ' || p_TRANSACTION_NAME);
   ELSE
      UPDATE INTERCHANGE_TRANSACTION SET BEGIN_DATE = LEAST(BEGIN_DATE, p_BEGIN_DATE), END_DATE = GREATEST(END_DATE, p_END_DATE) WHERE TRANSACTION_ID = v_TRANSACTION_ID;
      v_CONTRACT_ID := GET_PLC_NSPL_CONTRACT(p_TRANSACTION_NAME, p_TRANSACTION_ALIAS, CASE WHEN p_TRANSACTION_CODE = 'C' THEN 'PLC' ELSE 'NSPL' END, p_BEGIN_DATE, p_END_DATE);
   END IF;
   RETURN v_TRANSACTION_ID;
END GET_PLC_NSPL_TRANSACTION;

PROCEDURE POST_PLC_NSPL_SCHEDULE(p_BEGIN_DATE IN DATE, p_END_DATE IN DATE) AS
CURSOR c_SELECT_ANCILLARY IS SELECT ANCILLARY_SERVICE_ALIAS, SUBSTR(ANCILLARY_SERVICE_TYPE,1,1) "ANCILLARY_SERVICE_TYPE" FROM ANCILLARY_SERVICE WHERE SUBSTR(ANCILLARY_SERVICE_TYPE,1,1) IN ('C','N');
CURSOR c_SELECT_TRANSACTION IS SELECT DISTINCT PJM_SHORT_NAME FROM CDI_PJM_ECAPACITY_ADJ ORDER BY PJM_SHORT_NAME;
v_TRANSACTION_NAME VARCHAR2(128);
v_TRANSACTION_ID   PLS_INTEGER;
v_COUNT            PLS_INTEGER;
BEGIN
   FOR v_SELECT_ANCILLARY IN c_SELECT_ANCILLARY LOOP
      v_COUNT := 0;
      FOR v_SELECT_TRANSACTION IN c_SELECT_TRANSACTION LOOP
         v_TRANSACTION_NAME := 'PJM-' || v_SELECT_TRANSACTION.PJM_SHORT_NAME || '_' || v_SELECT_ANCILLARY.ANCILLARY_SERVICE_ALIAS;
         v_TRANSACTION_ID := GET_PLC_NSPL_TRANSACTION(v_TRANSACTION_NAME, v_SELECT_TRANSACTION.PJM_SHORT_NAME, v_SELECT_ANCILLARY.ANCILLARY_SERVICE_TYPE, p_BEGIN_DATE, p_END_DATE);
         DELETE IT_SCHEDULE
         WHERE TRANSACTION_ID = v_TRANSACTION_ID
            AND SCHEDULE_TYPE = CONSTANTS.SCHEDULE_TYPE_FINAL 
            AND SCHEDULE_STATE = CONSTANTS.INTERNAL_STATE
            AND SCHEDULE_DATE BETWEEN p_BEGIN_DATE + c_ONE_SECOND AND p_END_DATE + c_ONE_SECOND
            AND AS_OF_DATE = CONSTANTS.LOW_DATE;
         INSERT INTO IT_SCHEDULE(TRANSACTION_ID, SCHEDULE_TYPE, SCHEDULE_STATE, SCHEDULE_DATE, AS_OF_DATE, AMOUNT)
         SELECT v_TRANSACTION_ID, CONSTANTS.SCHEDULE_TYPE_FINAL, CONSTANTS.INTERNAL_STATE, PLC_DATE + c_ONE_SECOND, CONSTANTS.LOW_DATE, CASE WHEN v_SELECT_ANCILLARY.ANCILLARY_SERVICE_TYPE = 'C' THEN ICAP_VAL ELSE NSPL_VAL END
         FROM CDI_PJM_ECAPACITY_ADJ
         WHERE PJM_SHORT_NAME = v_SELECT_TRANSACTION.PJM_SHORT_NAME;
         v_COUNT := v_COUNT + SQL%ROWCOUNT;
      END LOOP;
      LOGS.LOG_INFO('Number Of ' || CASE WHEN v_SELECT_ANCILLARY.ANCILLARY_SERVICE_TYPE = 'C' THEN 'PLC' ELSE 'NSPL' END || ' Records Posted To The IT_SCHEDULE Table: ' || TO_CHAR(v_COUNT));
   END LOOP;
END POST_PLC_NSPL_SCHEDULE;

--PROCEDURE ACCEPT_PLC_NSPL_SCHEDULE
--   (
--   p_BEGIN_DATE IN DATE,
--   p_END_DATE   IN DATE,
--   p_ENABLE     IN BOOLEAN,
--   p_STATUS    OUT NUMBER,
--   p_MESSAGE   OUT VARCHAR2
--   ) AS
--v_BEGIN_DATE DATE := TRUNC(p_BEGIN_DATE);
--v_END_DATE   DATE := TRUNC(GREATEST(p_BEGIN_DATE, p_END_DATE));
--v_ICAP_ID    PLS_INTEGER;
--v_NSPL_ID    PLS_INTEGER;
--v_MARK_TIME  PLS_INTEGER := DBMS_UTILITY.GET_TIME;
--BEGIN
---- Start The Process Log --
--   LOGS.START_PROCESS(c_ACCEPT_PLC_NSPL_SCHEDULE);
--   LOGS.LOG_INFO('Begin Date: ' || TO_CHAR(p_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(p_END_DATE, c_DATE_FORMAT));
--   SELECT NVL(MAX(ANCILLARY_SERVICE_ID), CONSTANTS.NOT_ASSIGNED) INTO v_ICAP_ID FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_PLC_NAME;
--   ASSERT(v_ICAP_ID <> CONSTANTS.NOT_ASSIGNED, 'Peak Load Capacity Ancillary Service "' || c_PLC_NAME || '" Is Not Defined.');
--   SELECT NVL(MAX(ANCILLARY_SERVICE_ID), CONSTANTS.NOT_ASSIGNED) INTO v_NSPL_ID FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_NSPL_NAME;
--   ASSERT(v_NSPL_ID <> CONSTANTS.NOT_ASSIGNED, 'Network Service Ancillary Service "' || c_NSPL_NAME || '" Is Not Defined.');
--
--   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_NSPL_STAGE';
--   DELETE CDI_PLC_LOAD WHERE PLC_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE;
--   LOGS.LOG_INFO('Number Of Records Deleted From The CDI_PLC_LOAD Table: ' || TO_CHAR(SQL%ROWCOUNT));
--   DELETE CDI_BASE_LOAD_ALLOC    WHERE PLC_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE;
--   LOGS.LOG_INFO('Number Of Records Deleted From The CDI_BASE_LOAD_ALLOC Table: ' || TO_CHAR(SQL%ROWCOUNT));
--   DELETE CDI_INC_DEC_EVENT_HIST WHERE PLC_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE;
--   LOGS.LOG_INFO('Number Of Records Deleted From The CDI_INC_DEC_EVENT_HIST Table: ' || TO_CHAR(SQL%ROWCOUNT));
--   COMMIT;
----   POST_COMPETITIVE_POLR(v_BEGIN_DATE, v_END_DATE, v_ICAP_ID, v_NSPL_ID);
--   POST_NON_COMPETITIVE_POLR(v_BEGIN_DATE, v_END_DATE, v_ICAP_ID, v_NSPL_ID);
--
--   INSERT INTO CDI_PLC_LOAD(PLC_DATE, ESP_ID, PSE_ID, PJM_SHORT_NAME, POLR_TYPE, VOLTAGE_CLASS, REPORTED_SEGMENT, RFT_TICKET_NUMBER, PLC_BAND, ICAP_VALUE, NSPL_VALUE)
--   SELECT PLC_DATE, ESP_ID, PSE_ID, PJM_SHORT_NAME, POLR_TYPE, VOLTAGE_CLASS, REPORTED_SEGMENT, RFT_TICKET_NUMBER, PLC_BAND, ICAP_VALUE, NSPL_VALUE
--   FROM CDI_PLC_NSPL_STAGE;
--   COMMIT;
--   
---- Post The Inc-Dec Content When In Production Mode --
--    IF p_ENABLE THEN
--       DELETE CDI_INC_DEC_EVENT_HIST WHERE PLC_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE;
--       LOGS.LOG_INFO('Number Of Records Deleted From The CDI_INC_DEC_EVENT_HIST Table: ' || TO_CHAR(SQL%ROWCOUNT));
--       POST_INCREMENT_DECREMENT(v_BEGIN_DATE, v_END_DATE);
--    END IF;
--    
--   POST_PJM_ECAPACITY(v_BEGIN_DATE, v_END_DATE);
--   POST_PLC_NSPL_SCHEDULE(v_BEGIN_DATE, v_END_DATE);   
--
---- Stop The Process Log --
--   p_MESSAGE := c_ACCEPT_PLC_NSPL_SCHEDULE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100));
--   LOGS.LOG_INFO(p_MESSAGE);
--   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
--   COMMIT;
--EXCEPTION
--   WHEN OTHERS THEN
--      p_STATUS := SQLCODE;
--      p_MESSAGE := SQLERRM;
--      ERRS.ABORT_PROCESS;
--END ACCEPT_PLC_NSPL_SCHEDULE;

PROCEDURE ACCEPT_PLC_NSPL_SCHEDULE
   (
   p_BEGIN_DATE IN DATE,
   p_END_DATE   IN DATE,
   p_ENABLE     IN BOOLEAN,
   p_STATUS    OUT NUMBER,
   p_MESSAGE   OUT VARCHAR2
   ) AS
v_BEGIN_DATE DATE := TRUNC(p_BEGIN_DATE);
v_END_DATE   DATE := TRUNC(GREATEST(p_BEGIN_DATE, p_END_DATE));
v_STATUS     NUMBER;
v_ICAP_ID    PLS_INTEGER;
v_NSPL_ID    PLS_INTEGER;
v_MARK_TIME  PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_ACCEPT_PLC_NSPL_SCHEDULE);
   LOGS.LOG_INFO('Begin Date: ' || TO_CHAR(v_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(v_END_DATE, c_DATE_FORMAT));
   SELECT NVL(MAX(ANCILLARY_SERVICE_ID), CONSTANTS.NOT_ASSIGNED) INTO v_ICAP_ID FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_PLC_NAME;
   ASSERT(v_ICAP_ID <> CONSTANTS.NOT_ASSIGNED, 'Peak Load Capacity Ancillary Service "' || c_PLC_NAME || '" Is Not Defined.');
   SELECT NVL(MAX(ANCILLARY_SERVICE_ID), CONSTANTS.NOT_ASSIGNED) INTO v_NSPL_ID FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_NSPL_NAME;
   ASSERT(v_NSPL_ID <> CONSTANTS.NOT_ASSIGNED, 'Network Service Ancillary Service "' || c_NSPL_NAME || '" Is Not Defined.');
-- Call The Legacy Code To Process --  
   CDI_STORE_PLC_DETAIL.MAIN(v_BEGIN_DATE, v_END_DATE, CASE WHEN p_ENABLE THEN 2 ELSE 1 END, v_STATUS);
-- Stop The Process Log --
   p_MESSAGE := c_ACCEPT_PLC_NSPL_SCHEDULE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100));
   LOGS.LOG_INFO(p_MESSAGE);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_STATUS := SQLCODE;
      p_MESSAGE := SQLERRM;
      ERRS.ABORT_PROCESS;
END ACCEPT_PLC_NSPL_SCHEDULE;

PROCEDURE ACCEPT_PLC_NSPL_OPTION_LIST(p_LABEL OUT VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   p_LABEL := 'Option';
   OPEN p_CURSOR FOR
      SELECT 'Forward Looking'      "OPTION_NAME", 1 "OPTION_ID" FROM DUAL UNION 
      SELECT 'eCapacity Submission' "OPTION_NAME", 2 "OPTION_ID" FROM DUAL
      ORDER BY OPTION_ID;
END ACCEPT_PLC_NSPL_OPTION_LIST;

PROCEDURE DEX_ACCEPT_PLC_NSPL_SCHEDULE
   (
   p_ENTITY_LIST IN VARCHAR2,  --Accept PLC Option Id--
   p_BEGIN_DATE  IN DATE,
   p_END_DATE    IN DATE,
   p_STATUS     OUT NUMBER,
   p_MESSAGE    OUT VARCHAR2
   ) AS
BEGIN
   ACCEPT_PLC_NSPL_SCHEDULE(p_BEGIN_DATE, p_END_DATE, TRIM(p_ENTITY_LIST) = '2', p_STATUS, p_MESSAGE);
END DEX_ACCEPT_PLC_NSPL_SCHEDULE;

--PROCEDURE SET_INITIAL_BID_BLOCK_SIZE
--   (
--   p_BEGIN_DATE IN DATE,
--   p_END_DATE   IN DATE,
--   p_STATUS    OUT NUMBER,
--   p_MESSAGE   OUT VARCHAR2
--   ) AS
--v_BEGIN_DATE DATE := TRUNC(p_BEGIN_DATE);
--v_PRIOR_DATE DATE := v_BEGIN_DATE - 1;
--v_BLOCK_SIZE NUMBER(14,3);
--v_MARK_TIME  PLS_INTEGER := DBMS_UTILITY.GET_TIME;
--CURSOR c_SELECT_POLR IS
--   SELECT POLR_TYPE, SUM(ICAP_VALUE) "ICAP_VALUE"
--   FROM CDI_PLC_LOAD
--   WHERE PLC_DATE = v_BEGIN_DATE
--      AND RFT_TICKET_NUMBER  IS NOT NULL
--   GROUP BY POLR_TYPE;
--CURSOR c_SELECT_RFP(p_POLR_TYPE IN VARCHAR2) IS
--   SELECT SUPPLIER_ID, BASE_BLOCK_SIZE, NUMBER_OF_BLOCKS, SHARE_OF_LOAD, INC_DEC_START, POWER_FLOW_END
--   FROM BGE_SUPPLIER_VIEW X
--   WHERE POLR_TYPE = p_POLR_TYPE
--      AND INC_DEC_START = v_BEGIN_DATE
--      AND NOT EXISTS (SELECT NULL FROM CDI_BID_BLOCK_HIST WHERE RFP_ID = X.SUPPLIER_ID AND POLR_TYPE = X.POLR_TYPE AND BASE_BLOCK_SIZE IS NOT NULL)
--   ORDER BY SUPPLIER_ID, INC_DEC_START, POWER_FLOW_END;
--BEGIN
---- Start The Process Log --
--   LOGS.START_PROCESS(c_SET_INITIAL_BID_BLOCK_SIZE);
--   LOGS.LOG_INFO('Begin Date: ' || TO_CHAR(p_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(p_END_DATE, c_DATE_FORMAT));
--   DELETE CDI_BID_BLOCK_HIST WHERE EFFECTIVE_DATE = v_PRIOR_DATE;
--   LOGS.LOG_INFO('Number Of "' || TO_CHAR(v_PRIOR_DATE, c_DATE_FORMAT) || '" Dated Records Deleted From The CDI_BID_BLOCK_HIST Table: ' || TO_CHAR(SQL%ROWCOUNT));
--   INSERT INTO CDI_BID_BLOCK_HIST(RFP_ID, POLR_TYPE, BASE_BLOCK_SIZE, EFFECTIVE_DATE, STOP_DATE)
--   SELECT SUPPLIER_ID, POLR_TYPE, BASE_BLOCK_SIZE, v_PRIOR_DATE, POWER_FLOW_END - 1
--   FROM BGE_SUPPLIER_VIEW
--   WHERE INC_DEC_START = v_BEGIN_DATE
--      AND BASE_BLOCK_SIZE IS NOT NULL;
--   LOGS.LOG_INFO('Number Of "' || TO_CHAR(v_BEGIN_DATE, c_DATE_FORMAT) || '" Dated Records Posted To The CDI_BID_BLOCK_HIST Table: ' || TO_CHAR(SQL%ROWCOUNT));
--   FOR v_SELECT_POLR IN c_SELECT_POLR LOOP
--      LOGS.LOG_INFO('Processing POLR Type: ' || v_SELECT_POLR.POLR_TYPE);
--      FOR v_SELECT_RFP IN c_SELECT_RFP(v_SELECT_POLR.POLR_TYPE) LOOP
--         v_BLOCK_SIZE := CASE WHEN v_SELECT_RFP.NUMBER_OF_BLOCKS <> 0 THEN (v_SELECT_POLR.ICAP_VALUE * v_SELECT_RFP.SHARE_OF_LOAD) / v_SELECT_RFP.NUMBER_OF_BLOCKS ELSE 0 END;
--         INSERT INTO CDI_BID_BLOCK_HIST(RFP_ID, POLR_TYPE, BASE_BLOCK_SIZE, EFFECTIVE_DATE, STOP_DATE)
--         VALUES(v_SELECT_RFP.SUPPLIER_ID, v_SELECT_POLR.POLR_TYPE, v_BLOCK_SIZE, v_PRIOR_DATE, v_SELECT_RFP.POWER_FLOW_END - 1);
--         LOGS.LOG_INFO('Number Of "' || v_SELECT_POLR.POLR_TYPE || '" Records Posted To The CDI_BID_BLOCK_HIST Table: ' || TO_CHAR(SQL%ROWCOUNT));
--      END LOOP;
--   END LOOP;
--COMMIT;
---- Stop The Process Log --
--   LOGS.LOG_INFO(c_SET_INITIAL_BID_BLOCK_SIZE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
--   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
--   COMMIT;
--EXCEPTION
--   WHEN OTHERS THEN
--      ERRS.ABORT_PROCESS;
--END SET_INITIAL_BID_BLOCK_SIZE;

PROCEDURE SET_INITIAL_BID_BLOCK_SIZE
   (
   p_BEGIN_DATE IN DATE,
   p_END_DATE   IN DATE,
   p_STATUS    OUT NUMBER,
   p_MESSAGE   OUT VARCHAR2
   ) AS
v_MARK_TIME  PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_SET_INITIAL_BID_BLOCK_SIZE);
   LOGS.LOG_INFO('Begin Date: ' || TO_CHAR(p_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(p_END_DATE, c_DATE_FORMAT));
-- Call The Legacy Code To Process --  
   CDI_STORE_PLC_DETAIL.GET_INIT_BID_BLOCK_SIZE(p_BEGIN_DATE, p_END_DATE);
-- Stop The Process Log --
   LOGS.LOG_INFO(c_SET_INITIAL_BID_BLOCK_SIZE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ERRS.ABORT_PROCESS;
END SET_INITIAL_BID_BLOCK_SIZE;

PROCEDURE POST_DEFAULT_PLC(p_PLAN_YEAR IN DATE, p_STATUS OUT NUMBER, p_MESSAGE OUT VARCHAR2) AS
CURSOR c_SELECT IS SELECT ANCILLARY_SERVICE_ID, ANCILLARY_SERVICE_NAME, CASE ANCILLARY_SERVICE_NAME WHEN 'ICAP' THEN 'C' WHEN 'Network Service' THEN 'T' ELSE '?' END  ANCILLARY_SERVICE_TYPE FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME IN ('ICAP','Network Service');
v_TAG_ID VARCHAR2(16);
v_PLAN_YEAR NUMBER(4) := TO_NUMBER(TO_CHAR(p_PLAN_YEAR,'YYYY'));
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_CODE CHAR(1);
v_COUNT PLS_INTEGER := 0;
v_TOTAL PLS_INTEGER := 0;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_POST_DEFAULT_PLC);
   LOGS.LOG_INFO('Plan Year Date: ' || TO_CHAR(p_PLAN_YEAR, c_DATE_FORMAT));
   FOR v_SELECT IN c_SELECT LOOP 
-- Utilize Premise Inheritance To Assign The Default PLC/NSPL Value --
      v_CODE := v_SELECT.ANCILLARY_SERVICE_TYPE;    
      v_TAG_ID := v_PLAN_YEAR || v_CODE;    
      v_BEGIN_DATE := CASE WHEN v_SELECT.ANCILLARY_SERVICE_TYPE = 'C' THEN TO_DATE('06/01/' || TO_CHAR(v_PLAN_YEAR),   c_DATE_FORMAT) ELSE TO_DATE('01/01/' || TO_CHAR(v_PLAN_YEAR), c_DATE_FORMAT) END;
      v_END_DATE   := CASE WHEN v_SELECT.ANCILLARY_SERVICE_TYPE = 'C' THEN TO_DATE('05/31/' || TO_CHAR(v_PLAN_YEAR+1), c_DATE_FORMAT) ELSE TO_DATE('12/31/' || TO_CHAR(v_PLAN_YEAR), c_DATE_FORMAT) END; 
      LOGS.LOG_INFO('Ancillary Service: ' || v_SELECT.ANCILLARY_SERVICE_NAME || ', Plan Year Begin Date: ' || TO_CHAR(v_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(v_END_DATE, c_DATE_FORMAT));
      MERGE INTO CDI_PLC_ICAP_TX T
      USING
         (WITH MISSING AS (
            SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER 
            FROM
               (SELECT DISTINCT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER   
               FROM BGE_MASTER_ACCOUNT
               WHERE TERMINATION_DATE >= p_PLAN_YEAR) A
            WHERE NOT EXISTS (SELECT NULL FROM CDI_PLC_ICAP_TX WHERE BILL_ACCOUNT = A.BILL_ACCOUNT AND SERVICE_POINT = A.SERVICE_POINT AND PREMISE_NUMBER = A.PREMISE_NUMBER AND TAG_ID = v_TAG_ID))
         SELECT *
         FROM
            (SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, v_TAG_ID "TAG_ID", v_BEGIN_DATE "BEGIN_DATE", v_END_DATE "END_DATE", (SELECT AVG(TAG_VAL) FROM CDI_PLC_ICAP_TX WHERE PREMISE_NUMBER = A.PREMISE_NUMBER AND TAG_ID = A.TAG_ID) "TAG_VAL"
            FROM (SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, (SELECT MAX(TAG_ID) FROM CDI_PLC_ICAP_TX WHERE PREMISE_NUMBER = X.PREMISE_NUMBER AND SUBSTR(TAG_ID,5,1) = v_CODE AND SUBSTR(TAG_ID,1,4) <= SUBSTR(v_TAG_ID,1,4)) "TAG_ID" FROM MISSING X) A)
         WHERE TAG_VAL IS NOT NULL) S
      ON (T.BILL_ACCOUNT = S.BILL_ACCOUNT AND T.SERVICE_POINT = S.SERVICE_POINT AND T.PREMISE_NUMBER = S.PREMISE_NUMBER AND T.TAG_ID = S.TAG_ID)
      WHEN NOT MATCHED THEN
         INSERT(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL)
         VALUES(S.BILL_ACCOUNT, S.SERVICE_POINT, S.PREMISE_NUMBER, S.TAG_ID, S.BEGIN_DATE, S.END_DATE, S.TAG_VAL);
      v_COUNT := SQL%ROWCOUNT;   
      LOGS.LOG_INFO('Number Of "' || v_SELECT.ANCILLARY_SERVICE_NAME || '" Premise Inheritance Default Assignments: ' || TO_CHAR(v_COUNT));
      v_TOTAL := v_TOTAL + v_COUNT;
-- For Any Default Account Without A Premise Inheritance Assignment Use Rate Class/Voltage Assignment --
   MERGE INTO CDI_PLC_ICAP_TX T
   USING(
      WITH MISSING AS (
         SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, ALLOCATION_NAME
         FROM
            (SELECT DISTINCT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, RATE_CLASS || '-' || VOLTAGE_LEVEL "ALLOCATION_NAME" 
            FROM BGE_MASTER_ACCOUNT
            WHERE TERMINATION_DATE >= p_PLAN_YEAR) A
         WHERE NOT EXISTS (SELECT NULL FROM CDI_PLC_ICAP_TX WHERE BILL_ACCOUNT = A.BILL_ACCOUNT AND SERVICE_POINT = A.SERVICE_POINT AND PREMISE_NUMBER = A.PREMISE_NUMBER AND TAG_ID = v_TAG_ID))
      SELECT *
      FROM
         (SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, v_TAG_ID "TAG_ID", v_BEGIN_DATE "BEGIN_DATE", v_END_DATE "END_DATE",
            (SELECT DEFAULT_VAL FROM ANCILLARY_SERVICE_ALLOCATION WHERE ALLOCATION_NAME = A.ALLOCATION_NAME AND BEGIN_DATE = v_BEGIN_DATE AND END_DATE = v_END_DATE) "TAG_VAL"
         FROM MISSING A)
      WHERE TAG_VAL IS NOT NULL) S
   ON (T.BILL_ACCOUNT = S.BILL_ACCOUNT AND T.SERVICE_POINT = S.SERVICE_POINT AND T.PREMISE_NUMBER = S.PREMISE_NUMBER AND T.TAG_ID = S.TAG_ID)
      WHEN NOT MATCHED THEN
         INSERT(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL)
         VALUES(S.BILL_ACCOUNT, S.SERVICE_POINT, S.PREMISE_NUMBER, S.TAG_ID, S.BEGIN_DATE, S.END_DATE, S.TAG_VAL);
      v_COUNT := SQL%ROWCOUNT;            
      LOGS.LOG_INFO('Number Of "' || v_SELECT.ANCILLARY_SERVICE_NAME || '" Ancillary Service Allocation Default Assignments: ' || TO_CHAR(v_COUNT));
      v_TOTAL := v_TOTAL + v_COUNT;
   END LOOP;
-- Stop The Process Log --
   p_MESSAGE := c_POST_DEFAULT_PLC || ' Complete. Number Of Default Assignments: ' || TO_CHAR(v_TOTAL) || '. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100));
   LOGS.LOG_INFO(p_MESSAGE);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_STATUS := SQLCODE;
      p_MESSAGE := SQLERRM;
      ERRS.ABORT_PROCESS;
END POST_DEFAULT_PLC;

PROCEDURE DEX_POST_DEFAULT_PLC(p_BEGIN_DATE IN DATE, p_STATUS OUT NUMBER, p_MESSAGE OUT VARCHAR2) AS
BEGIN
   POST_DEFAULT_PLC(TRUNC(p_BEGIN_DATE), p_STATUS, p_MESSAGE);
END DEX_POST_DEFAULT_PLC;

PROCEDURE SERVICE_TYPE_LIST(p_LABEL OUT VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   p_LABEL := 'Service Type';
   OPEN p_CURSOR FOR
      SELECT 'PLC' "SERVICE_TYPE", 1 "SERVICE_TYPE_ID" FROM DUAL
      UNION
      SELECT 'NSPL' "SERVICE_TYPE", 2 "SERVICE_TYPE_ID" FROM DUAL
      ORDER BY SERVICE_TYPE_ID; 
END SERVICE_TYPE_LIST;

PROCEDURE LOAD_PLC_NSPL_INT_FROM_FILE
   (
   p_ENTITY_LIST      IN VARCHAR2,  --Service Type--
   p_IMPORT_FILE      IN CLOB,
   p_IMPORT_FILE_PATH IN VARCHAR2,
   p_STATUS          OUT NUMBER,
   p_MESSAGE         OUT VARCHAR2
   ) AS
v_CONTAINER PARSE_UTIL.BIG_STRING_TABLE_MP;
v_TOKENS PARSE_UTIL.STRING_TABLE;
v_BILL_ACCOUNT NUMBER(10);
v_SERVICE_POINT NUMBER(10);
v_PREMISE_NUMBER NUMBER(10);
v_PEAK_DATE DATE;
v_POINT_VAL NUMBER;
v_COUNT PLS_INTEGER := 0;
BEGIN
-- Clear Target Tables Prior To Loading --
   IF p_ENTITY_LIST = 'PLC' THEN
      DELETE /*RTO_STAGING*/ PLC_ICAP_INT_VALUE;
   ELSIF p_ENTITY_LIST = 'NSPL' THEN
      DELETE /*RTO_STAGING*/ PLC_TX_INT_VALUE;
   END IF;
   COMMIT;
-- Parse The File Into Records --   
   PARSE_UTIL.PARSE_CLOB_INTO_LINES(p_IMPORT_FILE, v_CONTAINER);
-- Process Each Line --
   FOR v_INDEX IN v_CONTAINER.FIRST..v_CONTAINER.LAST LOOP
      PARSE_UTIL.PARSE_DELIMITED_STRING(v_CONTAINER(v_INDEX), c_COMMA, v_TOKENS);
      IF v_TOKENS.COUNT = 5 THEN
         v_BILL_ACCOUNT   := TRIM(v_TOKENS(1));
         v_SERVICE_POINT  := TRIM(v_TOKENS(2));
         v_PREMISE_NUMBER := TRIM(v_TOKENS(3));
         v_PEAK_DATE      := TO_DATE(TRIM(v_TOKENS(4)), c_DATE_TIME_FORMAT);
         v_POINT_VAL      := TRIM(v_TOKENS(5));
         IF p_ENTITY_LIST = 'PLC' THEN
            MERGE INTO /*RTO_STAGING*/ PLC_ICAP_INT_VALUE T
            USING (SELECT v_BILL_ACCOUNT "BILL_ACCOUNT", v_SERVICE_POINT "SERVICE_POINT", v_PREMISE_NUMBER "PREMISE_NUMBER", v_PEAK_DATE "PEAK_DATE", v_POINT_VAL "POINT_VAL" FROM DUAL) S
            ON (T.BILL_ACCOUNT = S.BILL_ACCOUNT AND T.SERVICE_POINT = S.SERVICE_POINT AND T.PREMISE_NUMBER = S.PREMISE_NUMBER AND T.PEAK_DATE = S.PEAK_DATE)
            WHEN MATCHED THEN
               UPDATE SET T.POINT_VAL = S.POINT_VAL
            WHEN NOT MATCHED THEN
               INSERT(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, PEAK_DATE, POINT_VAL)
               VALUES(S.BILL_ACCOUNT, S.SERVICE_POINT, S.PREMISE_NUMBER, S.PEAK_DATE, S.POINT_VAL);
            v_COUNT := v_COUNT + 1;
         ELSIF p_ENTITY_LIST = 'NSPL' THEN
            MERGE INTO /*RTO_STAGING*/ PLC_TX_INT_VALUE T
            USING (SELECT v_BILL_ACCOUNT "BILL_ACCOUNT", v_SERVICE_POINT "SERVICE_POINT", v_PREMISE_NUMBER "PREMISE_NUMBER", v_PEAK_DATE "PEAK_DATE", v_POINT_VAL "POINT_VAL" FROM DUAL) S
            ON (T.BILL_ACCOUNT = S.BILL_ACCOUNT AND T.SERVICE_POINT = S.SERVICE_POINT AND T.PREMISE_NUMBER = S.PREMISE_NUMBER AND T.PEAK_DATE = S.PEAK_DATE)
            WHEN MATCHED THEN
               UPDATE SET T.POINT_VAL = S.POINT_VAL
            WHEN NOT MATCHED THEN
               INSERT(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, PEAK_DATE, POINT_VAL)
               VALUES(S.BILL_ACCOUNT, S.SERVICE_POINT, S.PREMISE_NUMBER, S.PEAK_DATE, S.POINT_VAL);
            v_COUNT := v_COUNT + 1;
         END IF;
      END IF;
   END LOOP;
   p_STATUS := 0;
   p_MESSAGE := 'Import Complete. Number Of Records Posted To The Staging Table: ' || TO_CHAR(v_COUNT) || '.';
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
END LOAD_PLC_NSPL_INT_FROM_FILE;

PROCEDURE POST_FTR_NSPL_SCHEDULE(p_SCHEDULE_DATE IN DATE) AS
CURSOR c_SELECT IS
   SELECT PJM_SHORT_NAME, SUM(NSPL_VALUE) "FTR_NSPL_VALUE"
   FROM CDI_PLC_NSPL_STAGE
   WHERE PLC_DATE = p_SCHEDULE_DATE
   GROUP BY PJM_SHORT_NAME
   ORDER BY PJM_SHORT_NAME;
v_TRANSACTION_NAME VARCHAR2(128);
v_TRANSACTION_ID   PLS_INTEGER;
v_COUNT            PLS_INTEGER := 0;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      v_TRANSACTION_NAME := 'PJM-' || v_SELECT.PJM_SHORT_NAME || '_Network Service';
      v_TRANSACTION_ID := GET_PLC_NSPL_TRANSACTION(v_TRANSACTION_NAME, v_SELECT.PJM_SHORT_NAME, 'N', p_SCHEDULE_DATE, p_SCHEDULE_DATE);
      DELETE IT_SCHEDULE
      WHERE TRANSACTION_ID = v_TRANSACTION_ID
         AND SCHEDULE_TYPE = CONSTANTS.SCHEDULE_TYPE_FINAL 
         AND SCHEDULE_STATE = CONSTANTS.INTERNAL_STATE
         AND SCHEDULE_DATE = p_SCHEDULE_DATE + c_ONE_SECOND
         AND AS_OF_DATE = CONSTANTS.LOW_DATE;
      INSERT INTO IT_SCHEDULE(TRANSACTION_ID, SCHEDULE_TYPE, SCHEDULE_STATE, SCHEDULE_DATE, AS_OF_DATE, AMOUNT)
      VALUES(v_TRANSACTION_ID, CONSTANTS.SCHEDULE_TYPE_FINAL, CONSTANTS.INTERNAL_STATE, p_SCHEDULE_DATE + c_ONE_SECOND, CONSTANTS.LOW_DATE, v_SELECT.FTR_NSPL_VALUE);
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
   END LOOP;
   LOGS.LOG_INFO('Number Of FTR-NSPL Records Posted To The IT_SCHEDULE Table: ' || TO_CHAR(v_COUNT));
END POST_FTR_NSPL_SCHEDULE;

PROCEDURE ACCEPT_FTR_NSPL_SCHEDULE(p_BEGIN_DATE IN DATE, p_STATUS OUT NUMBER, p_MESSAGE OUT VARCHAR2) AS
v_SCHEDULE_DATE DATE := TRUNC(p_BEGIN_DATE);
v_ICAP_ID    PLS_INTEGER;
v_NSPL_ID    PLS_INTEGER;
v_MARK_TIME  PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_ACCEPT_FTR_NSPL_SCHEDULE);
   LOGS.LOG_INFO('Schedule Date: ' || TO_CHAR(v_SCHEDULE_DATE, c_DATE_FORMAT));
   SELECT NVL(MAX(ANCILLARY_SERVICE_ID), CONSTANTS.NOT_ASSIGNED) INTO v_ICAP_ID FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_PLC_NAME;
   ASSERT(v_ICAP_ID <> CONSTANTS.NOT_ASSIGNED, 'Peak Load Capacity Ancillary Service "' || c_PLC_NAME || '" Is Not Defined.');
   SELECT NVL(MAX(ANCILLARY_SERVICE_ID), CONSTANTS.NOT_ASSIGNED) INTO v_NSPL_ID FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_NSPL_NAME;
   ASSERT(v_NSPL_ID <> CONSTANTS.NOT_ASSIGNED, 'Network Service Ancillary Service "' || c_NSPL_NAME || '" Is Not Defined.');
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_NSPL_STAGE';
   POST_COMPETITIVE_POLR(v_SCHEDULE_DATE, v_SCHEDULE_DATE, v_ICAP_ID, v_NSPL_ID);
   POST_NON_COMPETITIVE_POLR(v_SCHEDULE_DATE, v_SCHEDULE_DATE, v_ICAP_ID, v_NSPL_ID);
   POST_FTR_NSPL_SCHEDULE(v_SCHEDULE_DATE);   
-- Stop The Process Log --
   p_MESSAGE := c_ACCEPT_FTR_NSPL_SCHEDULE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100));
   LOGS.LOG_INFO(p_MESSAGE);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_STATUS := SQLCODE;
      p_MESSAGE := SQLERRM;
      ERRS.ABORT_PROCESS;
END ACCEPT_FTR_NSPL_SCHEDULE;


END CDI_ANCILLARY_SERVICE;
/

