CREATE OR REPLACE PACKAGE BODY CDI_LOAD_PROFILE_UI AS

-- Package Types --
SUBTYPE INTERNAL_ID IS NUMBER(9);
TYPE r_CALENDAR_MANAGEMENT IS RECORD(BEGIN_DATE DATE, END_DATE DATE, PROFILE_LIBRARY_ID INTEGER, PROFILE_ID INTEGER, ADJ_OP CHAR(1), ADJ_VAL NUMBER);
TYPE t_CALENDAR_MANAGEMENT IS TABLE OF r_CALENDAR_MANAGEMENT INDEX BY PLS_INTEGER;
 
-- Constants --
c_NO_EXECUTION_PRIVILEGE       CONSTANT VARCHAR2(128):= 'The User Does Not Have The Assigned Access Privilege To Execute This System Action.';
c_SYSTEM_SETTING_LIBRARY       CONSTANT NUMBER(1)    := 0;
c_SYSTEM_SETTING_BOOK          CONSTANT VARCHAR2(32) := 'Client Data Interface';
c_SYSTEM_SETTING_CHAPTER       CONSTANT VARCHAR2(16) := 'Load Profile';
c_SYSTEM_SETTING_PAGE_CALENDAR CONSTANT VARCHAR2(16) := 'Calendar';
c_SYSTEM_SETTING_PAGE_SETTLE   CONSTANT VARCHAR2(32) := 'Settlement Profile';
c_SETTING_ENABLE_TRANSCRIPT    CONSTANT VARCHAR2(32) := 'Enable Transcript';
c_SETTING_ENABLE_TRACE         CONSTANT VARCHAR2(32) := 'Enable Trace';
c_SETTING_BEGIN_DAY_OFFSET     CONSTANT VARCHAR2(48) := 'Period Begin Day Offset'; -- The Number Of Days From The Current Date To Begin Settlement Profile Generation --
c_SETTING_END_DAY_OFFSET       CONSTANT VARCHAR2(48) := 'Period End Day Offset'; -- The Number Of Days From The Current Date To End Settlement Profile Generation --
c_CALC_TYPICAL_DAY_PROFILES    CONSTANT VARCHAR2(32) := 'Calculate Typical Day Profiles';
c_CALC_WEATHER_INDEX_PROFILE   CONSTANT VARCHAR2(32) := 'Calculate Weather Index Profile';
c_EXPORT_LOAD_PROFILE          CONSTANT VARCHAR2(32) := 'Export Load Profile';
c_CALENDAR_MANAGEMENT          CONSTANT VARCHAR2(32) := 'Calendar Management';
c_CALENDAR_MANAGEMENT_ASSIGN   CONSTANT VARCHAR2(32) := 'Calendar Management-Assignment';
c_CALENDAR_MANAGEMENT_ADJUST   CONSTANT VARCHAR2(32) := 'Calendar Management-Adjustment';
c_GENERATE_SETTLEMENT_PROFILES CONSTANT VARCHAR2(32) := 'Generate Settlement Profiles';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'MM/DD/YYYY';
c_DATE_TIME_FORMAT             CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH24:MI';
c_ASSIGNMENT                   CONSTANT VARCHAR2(32) := 'Assignment';
c_ADJUSTMENT                   CONSTANT VARCHAR2(32) := 'Adjustment';
c_CONTAINER_IDENT              CONSTANT VARCHAR2(32) := 'LOAD_PROFILE_EXPORT_CONTAINER';
c_TYPICAL_DAY_SUFFIX           CONSTANT VARCHAR2(16) := ' (Typical Day)';
c_PROFILING_DOMAIN_NAME        CONSTANT VARCHAR(16)   := 'Profiling';
c_COLOR_RED                    CONSTANT VARCHAR2(8)  := 'red';
c_COLOR_BLUE                   CONSTANT VARCHAR2(8)  := 'blue';
c_COLOR_GREEN                  CONSTANT VARCHAR2(8)  := 'green';
c_BOLD                         CONSTANT PLS_INTEGER  := 1;

c_RUN_MODE_INTERVAL_METERED    CONSTANT NUMBER(2)    := -4;
c_RUN_MODE_SELECTED_ACCOUNTS   CONSTANT NUMBER(2)    := -5;
c_SECOND                       CONSTANT NUMBER       := 1/(24*60*60);
c_STD_TIME_ZONE                CONSTANT CHAR(3)      := STD_TIME_ZONE(LOCAL_TIME_ZONE);
c_YES                          CONSTANT CHAR(1)      := 'Y';
c_NO                           CONSTANT CHAR(1)      := 'N';
c_COMMA                        CONSTANT CHAR(1)      := ',';
c_CRLF                         CONSTANT CHAR(2)      := CHR(13) || CHR(10);

l_ENABLE_TRACE                 BOOLEAN;
l_BEGIN_DAY_OFFSET             PLS_INTEGER;
l_END_DAY_OFFSET               PLS_INTEGER;

PROCEDURE STOP_PROCESS AS
-- Wrapper For LOGS.STOP_PROCESS --
v_MESSAGE VARCHAR2(32);
v_STATUS NUMBER;
BEGIN 
   LOGS.STOP_PROCESS(v_MESSAGE, v_STATUS);
END STOP_PROCESS;

PROCEDURE INITIALIZE_INTERFACE(p_INTERFACE_NAME IN VARCHAR2) AS
BEGIN
   IF p_INTERFACE_NAME = c_GENERATE_SETTLEMENT_PROFILES THEN
      l_ENABLE_TRACE := UPPER(SUBSTR(NVL(GET_DICTIONARY_VALUE(c_SETTING_ENABLE_TRACE, c_SYSTEM_SETTING_LIBRARY, c_SYSTEM_SETTING_BOOK, c_SYSTEM_SETTING_CHAPTER, c_SYSTEM_SETTING_PAGE_SETTLE), c_NO),1,1)) = SUBSTR(c_YES,1,1);
      l_BEGIN_DAY_OFFSET := NVL(GET_DICTIONARY_VALUE(c_SETTING_BEGIN_DAY_OFFSET, c_SYSTEM_SETTING_LIBRARY, c_SYSTEM_SETTING_BOOK, c_SYSTEM_SETTING_CHAPTER, c_SYSTEM_SETTING_PAGE_SETTLE), -1);
      l_END_DAY_OFFSET := NVL(GET_DICTIONARY_VALUE(c_SETTING_END_DAY_OFFSET, c_SYSTEM_SETTING_LIBRARY, c_SYSTEM_SETTING_BOOK, c_SYSTEM_SETTING_CHAPTER, c_SYSTEM_SETTING_PAGE_SETTLE), -1);
      LOGS.LOG_INFO('Begin Day Offset: ' || TO_CHAR(l_BEGIN_DAY_OFFSET));
      LOGS.LOG_INFO('End Day Offset: ' || TO_CHAR(l_END_DAY_OFFSET));
      LOGS.LOG_INFO('Enable Trace: ' || CASE WHEN l_ENABLE_TRACE THEN c_YES ELSE c_NO END);
   END IF;
END INITIALIZE_INTERFACE;

PROCEDURE GET_LOAD_PROFILE_LIBRARY(p_PROFILE_TYPE IN VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
v_COUNT PLS_INTEGER;
BEGIN
   SELECT COUNT(*) INTO v_COUNT FROM LOAD_PROFILE_LIBRARY X WHERE EXISTS (SELECT NULL FROM LOAD_PROFILE WHERE PROFILE_LIBRARY_ID = X.PROFILE_LIBRARY_ID AND PROFILE_TYPE = p_PROFILE_TYPE AND PROFILE_DESC <> 'RetailOffice Created Settlement Profile');
   IF v_COUNT = 0 THEN
      OPEN p_CURSOR FOR
         SELECT 'No ' || p_PROFILE_TYPE || ' Profile Defined' AS PROFILE_LIBRARY_NAME, -1 AS PROFILE_LIBRARY_ID FROM DUAL;
   ELSE
      OPEN p_CURSOR FOR
         SELECT DISTINCT PROFILE_LIBRARY_NAME, PROFILE_LIBRARY_ID
         FROM LOAD_PROFILE_LIBRARY X
         WHERE EXISTS (SELECT NULL FROM LOAD_PROFILE WHERE PROFILE_LIBRARY_ID = X.PROFILE_LIBRARY_ID AND PROFILE_TYPE = p_PROFILE_TYPE AND PROFILE_DESC <> 'RetailOffice Created Settlement Profile')
         ORDER BY PROFILE_LIBRARY_NAME;
   END IF; 
END GET_LOAD_PROFILE_LIBRARY;

FUNCTION GET_SEASONS_FOR_TEMPLATE(p_TEMPLATE_ID IN NUMBER) RETURN VARCHAR2 AS
v_SEASONS VARCHAR2(4000) := '';
CURSOR c_SELECT IS
   SELECT DISTINCT S.SEASON_NAME FROM TEMPLATE_SEASON_DAY_NAME T JOIN SEASON S ON S.SEASON_ID = T.SEASON_ID WHERE T.TEMPLATE_ID = p_TEMPLATE_ID
   ORDER BY SEASON_NAME;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      v_SEASONS := v_SEASONS || v_SELECT.SEASON_NAME || ',';
   END LOOP;
   RETURN RTRIM(v_SEASONS,',');
END GET_SEASONS_FOR_TEMPLATE;

PROCEDURE GET_TYPICAL_DAY_RUN_TEMPLATE(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   MERGE INTO CDI_TYPICAL_DAY_RUN_TEMPLATE T
   USING (SELECT TEMPLATE_ID FROM TEMPLATE WHERE IS_DAY_TYPE = 1) S
   ON (T.TEMPLATE_ID = S.TEMPLATE_ID)
   WHEN NOT MATCHED THEN
      INSERT (TEMPLATE_ID, IS_SELECTED) VALUES (S.TEMPLATE_ID, 0);
   COMMIT;
   OPEN p_CURSOR FOR
      SELECT T.TEMPLATE_NAME, T.TEMPLATE_ID, R.IS_SELECTED, GET_SEASONS_FOR_TEMPLATE(T.TEMPLATE_ID) AS PARAMETERS
      FROM CDI_TYPICAL_DAY_RUN_TEMPLATE R
         JOIN TEMPLATE T ON T.TEMPLATE_ID = R.TEMPLATE_ID
   ORDER BY T.TEMPLATE_NAME;
END GET_TYPICAL_DAY_RUN_TEMPLATE;

PROCEDURE PUT_TYPICAL_DAY_RUN_TEMPLATE(p_TEMPLATE_ID IN NUMBER, p_IS_SELECTED IN NUMBER) AS
BEGIN
   UPDATE CDI_TYPICAL_DAY_RUN_TEMPLATE SET IS_SELECTED = p_IS_SELECTED WHERE TEMPLATE_ID = p_TEMPLATE_ID;
   COMMIT;
END PUT_TYPICAL_DAY_RUN_TEMPLATE;

PROCEDURE SELECT_ALL_TYPICAL_DAYS AS
BEGIN
   UPDATE CDI_TYPICAL_DAY_RUN_TEMPLATE SET IS_SELECTED = 1;
   COMMIT;
END SELECT_ALL_TYPICAL_DAYS;

PROCEDURE DESELECT_ALL_TYPICAL_DAYS AS
BEGIN
   UPDATE CDI_TYPICAL_DAY_RUN_TEMPLATE SET IS_SELECTED = 0;
   COMMIT;
END DESELECT_ALL_TYPICAL_DAYS;

PROCEDURE GET_TYPICAL_DAY_RUN_ACCOUNT
   (
   p_RUN_MODE_ID IN NUMBER,
   p_ACCOUNT_FILTER IN VARCHAR2,
   p_ACCOUNT_FILTER_TYPE_ID IN NUMBER,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
BEGIN
   IF p_RUN_MODE_ID <> PF.c_BATCH_RUN_MODE_SELECTED THEN
      OPEN p_CURSOR FOR
         SELECT '<html><i>(No Account Selection Necessary)</i></html>' AS ACCOUNT_NAME, NULL AS ACCOUNT_ID, NULL AS IS_SELECTED FROM DUAL;
   ELSE
      OPEN p_CURSOR FOR
         SELECT DISTINCT A.ACCOUNT_NAME, A.ACCOUNT_ID,
            CASE WHEN R.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END AS IS_SELECTED,
            MIN(P.PROFILE_SOURCE_BEGIN_DATE)                 AS SOURCE_BEGIN_DATE,
            MAX(P.PROFILE_SOURCE_END_DATE)                   AS SOURCE_END_DATE
         FROM ACCOUNT A
            JOIN LOAD_PROFILE P ON P.PROFILE_ACCOUNT_REF = TO_CHAR(A.ACCOUNT_ID) AND P.PROFILE_TYPE = 'Historical'
            LEFT JOIN CDI_TYPICAL_DAY_RUN_ACCOUNT R ON R.ACCOUNT_ID = A.ACCOUNT_ID
         WHERE (CASE WHEN p_ACCOUNT_FILTER_TYPE_ID = 0 THEN UPPER(A.ACCOUNT_NAME) ELSE UPPER(A.ACCOUNT_ALIAS) END) LIKE '%' || UPPER(p_ACCOUNT_FILTER) || '%'
         GROUP BY A.ACCOUNT_NAME, A.ACCOUNT_ID, CASE WHEN R.ACCOUNT_ID IS NULL THEN 0 ELSE 1 END
         ORDER BY A.ACCOUNT_NAME;
   END IF;
END GET_TYPICAL_DAY_RUN_ACCOUNT;

PROCEDURE PUT_TYPICAL_DAY_RUN_ACCOUNT(p_ACCOUNT_ID IN NUMBER, p_IS_SELECTED IN NUMBER, p_OLD_IS_SELECTED IN NUMBER) AS
BEGIN
   IF NVL(p_IS_SELECTED,0) = NVL(p_OLD_IS_SELECTED,0) THEN
      RETURN;
   END IF;
   IF NVL(p_IS_SELECTED,0) = 0 THEN
      DELETE CDI_TYPICAL_DAY_RUN_ACCOUNT WHERE ACCOUNT_ID = p_ACCOUNT_ID;
   ELSE
      INSERT INTO CDI_TYPICAL_DAY_RUN_ACCOUNT(ACCOUNT_ID) VALUES(p_ACCOUNT_ID);
   END IF;
END PUT_TYPICAL_DAY_RUN_ACCOUNT;

PROCEDURE GET_TYPICAL_DAY_RUN_PROFILE(p_PROFILE_LIBRARY_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   IF p_PROFILE_LIBRARY_ID IS NULL THEN
      OPEN p_CURSOR FOR
         SELECT '<html><i>(No Profile Library Selected)</i></html>' AS PROFILE_NAME, NULL AS PROFILE_ID, NULL AS IS_SELECTED FROM DUAL;
   ELSE
      OPEN p_CURSOR FOR
         SELECT A.PROFILE_NAME,
            A.PROFILE_ID,
            CASE WHEN R.PROFILE_ID IS NULL THEN 0 ELSE 1 END AS IS_SELECTED,
            B.FROM_DATE AS SOURCE_BEGIN_DATE,
            B."TO_DATE" AS SOURCE_END_DATE
         FROM LOAD_PROFILE A
            JOIN LOAD_PROFILE_STATISTICS B ON B.PROFILE_ID = A.PROFILE_ID
            LEFT JOIN CDI_TYPICAL_DAY_RUN_PROFILE R ON R.PROFILE_ID = A.PROFILE_ID
         WHERE A.PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
            AND A.PROFILE_TYPE = 'Historical'
         ORDER BY PROFILE_NAME;
   END IF;
END GET_TYPICAL_DAY_RUN_PROFILE;

PROCEDURE PUT_TYPICAL_DAY_RUN_PROFILE(p_PROFILE_ID IN NUMBER, p_IS_SELECTED IN NUMBER, p_OLD_IS_SELECTED IN NUMBER) AS
BEGIN
   IF NVL(p_IS_SELECTED,0) = NVL(p_OLD_IS_SELECTED,0) THEN
      RETURN;
   END IF;
   IF NVL(p_IS_SELECTED,0) = 0 THEN
      DELETE CDI_TYPICAL_DAY_RUN_PROFILE WHERE PROFILE_ID = p_PROFILE_ID;
   ELSE
      INSERT INTO CDI_TYPICAL_DAY_RUN_PROFILE(PROFILE_ID) VALUES(p_PROFILE_ID);
   END IF;
END PUT_TYPICAL_DAY_RUN_PROFILE;

PROCEDURE GET_TYPICAL_DAY_LIBRARY(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   GET_LOAD_PROFILE_LIBRARY('Typical Day', p_CURSOR);
END GET_TYPICAL_DAY_LIBRARY;

PROCEDURE GET_TYPICAL_DAY_PROFILE(p_PROFILE_LIBRARY_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT CASE WHEN POINT_HOUR = '00' THEN '24' ELSE POINT_HOUR END AS POINT_HOUR, PROFILE_NAME, POINT_VAL
      FROM
         (SELECT PROFILE_NAME, TO_CHAR(FROM_CUT(B.POINT_DATE, LOCAL_TIME_ZONE),'HH24') AS POINT_HOUR, B.POINT_VAL 
         FROM LOAD_PROFILE A
            JOIN LOAD_PROFILE_POINT B ON B.PROFILE_ID = A.PROFILE_ID
         WHERE A.PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
            AND A.PROFILE_TYPE = 'Typical Day')
      ORDER BY POINT_HOUR, PROFILE_NAME;
END GET_TYPICAL_DAY_PROFILE;

PROCEDURE CALC_TYPICAL_DAY_PROFILE
   (
   p_RUN_MODE_ID IN NUMBER,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_TEMPLATES IN VARCHAR2,
   p_ACCOUNTS IN VARCHAR2,
   p_AUTO_APPLY IN NUMBER,
   p_ASSIGN_BEGIN_DATE IN DATE,
   p_LOG_LEVEL IN NUMBER
   ) AS
CURSOR c_SELECT(p_ACCOUNT_ID IN INTERNAL_ID, p_TEMPLATE_ID IN INTERNAL_ID) IS
   SELECT A.PROFILE_ID, B.SEASON_ID
   FROM LOAD_PROFILE A
      CROSS JOIN (SELECT DISTINCT SEASON_ID FROM TEMPLATE_SEASON_DAY_NAME WHERE TEMPLATE_ID = p_TEMPLATE_ID) B
   WHERE A.PROFILE_ACCOUNT_REF = TO_CHAR(p_ACCOUNT_ID)
      AND PROFILE_TYPE = 'Historical';
v_ACCOUNT_NAME VARCHAR2(128);
v_CALENDAR_NAME VARCHAR2(128);
v_PROFILE_LIBRARY_NAME VARCHAR2(128);
v_PROFILE_SEASON VARCHAR2(32);
v_PROFILE_ID INTERNAL_ID;
v_PROFILE_LIBRARY_ID INTERNAL_ID;
v_ACCOUNT_ID INTERNAL_ID;
v_CALENDAR_ID INTERNAL_ID;
v_STATUS PLS_INTEGER;
v_COUNT PLS_INTEGER := 0;
v_TEMPLATES GA.NUMBER_TABLE;
v_ACCOUNTS GA.NUMBER_TABLE;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_CALC_TYPICAL_DAY_PROFILES);
   LOGS.LOG_INFO(c_CALC_TYPICAL_DAY_PROFILES);
   LOGS.LOG_INFO('Run Mode: ' || TO_CHAR(p_RUN_MODE_ID)); 
   LOGS.LOG_INFO('Begin Date: ' || TO_CHAR(p_BEGIN_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO('End Date: ' || TO_CHAR(p_END_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO('Templates: ' || SUBSTR(p_TEMPLATES,1,4000)); 
   LOGS.LOG_INFO('Accounts: ' || SUBSTR(p_ACCOUNTS,1,4000)); 
   LOGS.LOG_INFO('Auto Apply: ' || CASE WHEN p_AUTO_APPLY = 1 THEN c_YES ELSE c_NO END); 
   LOGS.LOG_INFO('Assign Begin Date: ' || TO_CHAR(p_ASSIGN_BEGIN_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO('Log Level: ' || TO_CHAR(p_LOG_LEVEL));
   IF p_LOG_LEVEL <= LOGS.c_LEVEL_DEBUG THEN 
      LOGS.SET_CURRENT_LOG_LEVEL(p_LOG_LEVEL);
      LOGS.SET_PERSISTING_TRACE(TRUE);
   END IF;   
-- Check That Current User Has The Assigned Privilege To Execute This Interface --
   IF NOT CAN_WRITE(c_PROFILING_DOMAIN_NAME) THEN
      LOGS.LOG_ERROR(c_NO_EXECUTION_PRIVILEGE);
      STOP_PROCESS;
      RETURN;
   END IF;
-- Set The Global Assignment Date Parameter --
   PF.g_ACCT_CALENDAR_BEGIN_DATE := p_ASSIGN_BEGIN_DATE;
-- Cache The Templates --
   UT.TOKENS_FROM_STRING_TO_NUMBERS(p_TEMPLATES, c_COMMA, v_TEMPLATES);
-- Cache The Accounts --
   UT.TOKENS_FROM_STRING_TO_NUMBERS(p_ACCOUNTS, c_COMMA, v_ACCOUNTS);
-- Set The Amount Of Work To Perform --
   LOGS.INIT_PROCESS_PROGRESS(p_TOTAL_WORK => v_TEMPLATES.COUNT * v_ACCOUNTS.COUNT);
-- Iterate Over The Selected Accounts --
   FOR v_ACCOUNT_INDEX IN 1..v_ACCOUNTS.COUNT LOOP
      v_COUNT := 0;
      v_ACCOUNT_ID := v_ACCOUNTS(v_ACCOUNT_INDEX);
-- Account Name Is Used As A Prefix When Creating The Load Profile Library (Prefixed To "_Library") And Load Profile (Prefixed To Template Name) -- 
      SELECT ACCOUNT_NAME INTO v_ACCOUNT_NAME FROM ACCOUNT WHERE ACCOUNT_ID = v_ACCOUNT_ID;
-- Iterate Over The Selected Templates --
      FOR v_TEMPLATE_INDEX IN 1..v_TEMPLATES.COUNT LOOP
-- Iterate Over The Seasons Defined For The Template --
         FOR v_SELECT IN c_SELECT(v_ACCOUNT_ID, v_TEMPLATES(v_TEMPLATE_INDEX)) LOOP
            SELECT SEASON_NAME INTO v_PROFILE_SEASON FROM SEASON WHERE SEASON_ID = v_SELECT.SEASON_ID;
            LOGS.LOG_INFO('Processing Account: ' || TO_CHAR(v_ACCOUNT_ID) || ', Template: ' || TO_CHAR(v_TEMPLATES(v_TEMPLATE_INDEX)) || ', Season: ' || v_PROFILE_SEASON); 
            PF.CREATE_TYPICAL_DAY_FOR_PROF( 
               p_MODEL_ID       => GA.DEFAULT_MODEL,
               p_PROFILE_ID     => v_SELECT.PROFILE_ID,
               p_ACCOUNT_ID     => NULL,
               p_METER_ID       => CONSTANTS.NOT_ASSIGNED,
               p_PREFIX_NAME    => v_ACCOUNT_NAME,
               p_TEMPLATE_ID    => v_TEMPLATES(v_TEMPLATE_INDEX),
               p_SEASON_ID      => v_SELECT.SEASON_ID,
               p_DAY_TYPE_TEXT  => v_PROFILE_SEASON,
               p_BEGIN_DATE     => p_BEGIN_DATE,
               p_END_DATE       => p_END_DATE,
               p_AS_OF_DATE     => CONSTANTS.LOW_DATE,
               p_TRACE_ON       => 0,
               p_NEW_PROFILE_ID => v_PROFILE_ID,
               p_NEW_LIBRARY_ID => v_PROFILE_LIBRARY_ID,
               p_STATUS         => v_STATUS);
            ERRS.VALIDATE_STATUS('PF.CREATE_TYPICAL_DAY_FOR_PROF', v_STATUS);
            v_COUNT := v_COUNT + 1;
         END LOOP;
-- Increment Progress --
         LOGS.INCREMENT_PROCESS_PROGRESS;
      END LOOP;
-- Assign The Profile Library To A Calendar And The Calendar To The Account --
      IF v_COUNT > 0 AND NVL(p_AUTO_APPLY,0) = 1 THEN
-- Assign The Calendar To The Account --
         v_CALENDAR_NAME := v_ACCOUNT_NAME || c_TYPICAL_DAY_SUFFIX;
         v_PROFILE_LIBRARY_NAME := v_ACCOUNT_NAME || c_TYPICAL_DAY_SUFFIX;
         ID.ID_FOR_CALENDAR(p_CALENDAR_NAME => v_CALENDAR_NAME, p_CREATE_IF_NOT_FOUND => TRUE, p_CALENDAR_ID => v_CALENDAR_ID);
         IF v_CALENDAR_ID = GA.NO_DATA_FOUND THEN
            LOGS.LOG_ERROR('Could Not Assign Account: ' || v_ACCOUNT_NAME || ' To Calendar "'|| v_CALENDAR_NAME || '". Calendar Is Not Defined.'); 
         ELSE
            LOGS.LOG_INFO('Assign Account: ' || v_ACCOUNT_NAME || ' To Calendar: ' || v_CALENDAR_NAME || ' For Profile Library: ' || v_PROFILE_LIBRARY_NAME); 
            LOGS.LOG_INFO('Calendar Id: ' || TO_CHAR(v_CALENDAR_ID) || ', Account Id: ' || TO_CHAR(v_ACCOUNT_ID));
--            PF.ASSIGN_LIBRARY_TO_CALENDAR(v_PROFILE_LIBRARY_NAME, v_CALENDAR_NAME, v_ACCOUNT_ID, p_TERMINATE_USAGE_FACTOR => TRUE, p_STATUS => v_STATUS);
            ERRS.VALIDATE_STATUS('PF.ASSIGN_LIBRARY_TO_CALENDAR', v_STATUS);
         END IF;
      END IF;
      LOGS.LOG_INFO(v_ACCOUNT_NAME || ' Typical Day Profile Generation Count: ' || TO_CHAR(v_COUNT)); 
   END LOOP;
-- Stop The Process Log --
   LOGS.LOG_INFO(c_CALC_TYPICAL_DAY_PROFILES || ' Complete');
   STOP_PROCESS;
   PF.g_ACCT_CALENDAR_BEGIN_DATE := NULL;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      PF.g_ACCT_CALENDAR_BEGIN_DATE := NULL;
      ERRS.ABORT_PROCESS;
END CALC_TYPICAL_DAY_PROFILE;

PROCEDURE CALC_TYPICAL_DAY_PROFILE
   (
   p_TEMPLATES IN VARCHAR2,
   p_PROFILES IN VARCHAR2,
   p_PROFILE_PREFIX IN VARCHAR2,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_LOG_LEVEL IN NUMBER
   ) AS
CURSOR c_SELECT(p_TEMPLATE_ID IN INTERNAL_ID) IS
   SELECT A.SEASON_ID, B.SEASON_NAME
   FROM TEMPLATE_SEASON_DAY_NAME A
      JOIN SEASON B ON B.SEASON_ID = A.SEASON_ID
   WHERE A.TEMPLATE_ID = p_TEMPLATE_ID;
v_COUNT PLS_INTEGER := 0;
v_TEMPLATES GA.NUMBER_TABLE;
v_PROFILES GA.NUMBER_TABLE;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_CALC_TYPICAL_DAY_PROFILES);
   LOGS.LOG_INFO(c_CALC_TYPICAL_DAY_PROFILES);
   LOGS.LOG_INFO('Begin Date: ' || TO_CHAR(p_BEGIN_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO('End Date: ' || TO_CHAR(p_END_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO('Templates: ' || SUBSTR(p_TEMPLATES,1,4000)); 
   LOGS.LOG_INFO('Profiles: ' || SUBSTR(p_PROFILES,1,4000)); 
   LOGS.LOG_INFO('Profile Prefix: ' || p_PROFILE_PREFIX); 
   LOGS.LOG_INFO('Log Level: ' || TO_CHAR(p_LOG_LEVEL)); 
   IF p_LOG_LEVEL <= LOGS.c_LEVEL_DEBUG THEN 
      LOGS.SET_CURRENT_LOG_LEVEL(p_LOG_LEVEL);
      LOGS.SET_PERSISTING_TRACE(TRUE);
   END IF;   
-- Check That Current User Has The Assigned Privilege To Execute This Interface --
   IF NOT CAN_WRITE(c_PROFILING_DOMAIN_NAME) THEN
      LOGS.LOG_ERROR(c_NO_EXECUTION_PRIVILEGE);
      STOP_PROCESS;
      RETURN;
   END IF;
-- Cache The Templates --
   UT.TOKENS_FROM_STRING_TO_NUMBERS(p_TEMPLATES, c_COMMA, v_TEMPLATES);
-- Cache The Profiles --
   UT.TOKENS_FROM_STRING_TO_NUMBERS(p_PROFILES, c_COMMA, v_PROFILES);
-- Set The Amount Of Work To Perform --
   LOGS.INIT_PROCESS_PROGRESS(p_TOTAL_WORK => v_TEMPLATES.COUNT * v_PROFILES.COUNT);
-- Iterate Over The Selected Source Profiles --
   FOR v_PROFILE_INDEX IN 1..v_PROFILES.COUNT LOOP
-- Iterate Over The Selected Templates --
      FOR v_TEMPLATE_INDEX IN 1..v_TEMPLATES.COUNT LOOP
-- Iterate Over The Seasons Defined For The Template --
         FOR v_SELECT IN c_SELECT(v_TEMPLATES(v_TEMPLATE_INDEX)) LOOP
            LOGS.LOG_DEBUG('Processing Profile: ' || TO_CHAR(v_PROFILES(v_PROFILE_INDEX)) || ', Template: ' || TO_CHAR(v_TEMPLATES(v_TEMPLATE_INDEX)) || ', Season: ' || v_SELECT.SEASON_NAME); 
            PF.CREATE_TYPICAL_DAY_PROFILE( 
               p_PROFILE_ID      => v_PROFILES(v_PROFILE_INDEX),
               p_TEMPLATE_ID     => v_TEMPLATES(v_TEMPLATE_INDEX),
               p_SEASON_ID       => v_SELECT.SEASON_ID,
               p_SEASON_DAY_TYPE => v_SELECT.SEASON_NAME,
               p_PROFILE_PREFIX  => p_PROFILE_PREFIX,
               p_BEGIN_DATE      => p_BEGIN_DATE,
               p_END_DATE        => p_END_DATE);
            v_COUNT := v_COUNT + 1;
         END LOOP;
-- Increment Progress --
         LOGS.INCREMENT_PROCESS_PROGRESS;
      END LOOP;
   END LOOP;
   LOGS.LOG_INFO('Typical Day Profile Creation Count: ' || TO_CHAR(v_COUNT)); 
-- Stop The Process Log --
   LOGS.LOG_INFO(c_CALC_TYPICAL_DAY_PROFILES || ' Complete');
   STOP_PROCESS;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      ERRS.ABORT_PROCESS;
END CALC_TYPICAL_DAY_PROFILE;

PROCEDURE RUN_CALC_ACCOUNT_TYPICAL_DAY
   (
   p_RUN_MODE_ID IN NUMBER,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_AUTO_APPLY IN NUMBER,
   p_ASSIGN_BEGIN_DATE IN DATE,
   p_MESSAGE OUT VARCHAR2
   ) AS
CURSOR c_SELECT_TEMPLATES IS SELECT TEMPLATE_ID FROM CDI_TYPICAL_DAY_RUN_TEMPLATE;
CURSOR c_SELECT_ACCOUNTS  IS SELECT ACCOUNT_ID FROM CDI_TYPICAL_DAY_RUN_ACCOUNT;
CURSOR c_SELECT_ALL_ACCOUNTS IS
   SELECT ACCOUNT_ID
   FROM ACCOUNT A
      JOIN LOAD_PROFILE B ON B.PROFILE_ACCOUNT_REF = TO_CHAR(A.ACCOUNT_ID) AND B.PROFILE_TYPE = 'Historical'
   WHERE A.ACCOUNT_MODEL_OPTION = 'Account'
      AND A.ACCOUNT_METER_TYPE = 'Interval';
v_PLSQL_BLOCK VARCHAR2(4000);
v_JOB_NAME VARCHAR2(64) := 'RUN_CALC_ACCOUNT_TYPICAL_DAY';
v_COUNT PLS_INTEGER;
v_TEMPLATES VARCHAR2(32000);
v_ACCOUNTS  VARCHAR2(32000);
v_LOG_LEVEL NUMBER(3) := LOGS.CURRENT_LOG_LEVEL;
BEGIN
-- Check That Current User Has The Assigned Privilege To Execute This Interface --
   IF NOT CAN_WRITE(c_PROFILING_DOMAIN_NAME) THEN
      p_MESSAGE := c_NO_EXECUTION_PRIVILEGE;
      RETURN;
   END IF;
-- Check If There Has Been Content Specified --
   SELECT COUNT(*) INTO v_COUNT FROM CDI_TYPICAL_DAY_RUN_TEMPLATE;
   IF v_COUNT = 0 THEN
      p_MESSAGE := 'No Templates Have Been Selected For Processing!';
      RETURN;
   END IF;
   IF p_RUN_MODE_ID = c_RUN_MODE_SELECTED_ACCOUNTS THEN
      SELECT COUNT(*) INTO v_COUNT FROM CDI_TYPICAL_DAY_RUN_ACCOUNT;
      IF v_COUNT = 0 THEN
         p_MESSAGE := 'No Accounts Have Been Selected For Processing!';
         RETURN;
      END IF;
   END IF;
-- Check To See If There Is A Job Currently Running -- 
   SELECT COUNT(*) INTO v_COUNT FROM USER_SCHEDULER_JOBS WHERE JOB_NAME = v_JOB_NAME AND STATE = 'RUNNING';
   IF v_COUNT = 0 THEN
-- Package The Template Ids --
      FOR v_SELECT IN c_SELECT_TEMPLATES LOOP
         v_TEMPLATES := v_TEMPLATES || TO_CHAR(v_SELECT.TEMPLATE_ID) || c_COMMA;
      END LOOP;
      v_TEMPLATES := RTRIM(v_TEMPLATES, c_COMMA);
-- Package The Account Ids --
      IF p_RUN_MODE_ID = c_RUN_MODE_SELECTED_ACCOUNTS THEN
         FOR v_SELECT IN c_SELECT_ACCOUNTS LOOP
            v_ACCOUNTS := v_ACCOUNTS || TO_CHAR(v_SELECT.ACCOUNT_ID) || c_COMMA;
         END LOOP;
      ELSE
         FOR v_SELECT IN c_SELECT_ALL_ACCOUNTS LOOP
            v_ACCOUNTS := v_ACCOUNTS || TO_CHAR(v_SELECT.ACCOUNT_ID) || c_COMMA;
         END LOOP;
      END IF;
      v_ACCOUNTS := RTRIM(v_ACCOUNTS, c_COMMA);
-- Invoke The Background Process --
      v_PLSQL_BLOCK := 'BEGIN SECURITY_CONTROLS.SET_CURRENT_USER(' || UT.GET_LITERAL_FOR_STRING('System') || '); CDI_LOAD_PROFILE_UI.CALC_TYPICAL_DAY_PROFILE(p_RUN_MODE_ID => ' || TO_CHAR(p_RUN_MODE_ID) || ', p_BEGIN_DATE => TO_DATE(''' || TO_CHAR(p_BEGIN_DATE,'MM/DD/YYYY') || ''',''MM/DD/YYYY''), p_END_DATE => TO_DATE(''' || TO_CHAR(p_END_DATE,'MM/DD/YYYY') || ''',''MM/DD/YYYY''), p_TEMPLATES => ''' || v_TEMPLATES || ''', p_ACCOUNTS => ''' || v_ACCOUNTS || ''', p_AUTO_APPLY => ' || TO_CHAR(p_AUTO_APPLY) || ', p_ASSIGN_BEGIN_DATE => TO_DATE(''' || TO_CHAR(p_ASSIGN_BEGIN_DATE,'MM/DD/YYYY') || ''',''MM/DD/YYYY''), p_LOG_LEVEL => ' || TO_CHAR(v_LOG_LEVEL) || '); END;'; 
      DBMS_SCHEDULER.CREATE_JOB(v_JOB_NAME, 'PLSQL_BLOCK', v_PLSQL_BLOCK, START_DATE => NULL, ENABLED => TRUE, AUTO_DROP => TRUE, COMMENTS => 'Job Initiated By ' || SECURITY_CONTROLS.CURRENT_USER);
      p_MESSAGE := '"' || c_CALC_TYPICAL_DAY_PROFILES || '" Job Submitted.' || c_CRLF || 'See The Process Log To Monitor Job Progress.' || CASE WHEN v_LOG_LEVEL < LOGS.c_LEVEL_INFO THEN c_CRLF || v_PLSQL_BLOCK ELSE '' END;
   ELSE
      p_MESSAGE := '"' || c_CALC_TYPICAL_DAY_PROFILES || '" Job Is Currently Running.' || c_CRLF || 'Only One Job Should Be Active At Any Time.';
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
END RUN_CALC_ACCOUNT_TYPICAL_DAY;

PROCEDURE RUN_CALC_PROFILE_TYPICAL_DAY
   (
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_PROFILE_PREFIX IN VARCHAR,
   p_MESSAGE OUT VARCHAR2
   ) AS
CURSOR c_SELECT_TEMPLATES IS SELECT TEMPLATE_ID FROM CDI_TYPICAL_DAY_RUN_TEMPLATE WHERE IS_SELECTED = 1;
CURSOR c_SELECT_PROFILES  IS SELECT PROFILE_ID  FROM CDI_TYPICAL_DAY_RUN_PROFILE;
v_PLSQL_BLOCK VARCHAR2(4000);
v_JOB_NAME VARCHAR2(64) := 'RUN_CALC_PROFILE_TYPICAL_DAY';
v_COUNT PLS_INTEGER;
v_TEMPLATES VARCHAR2(32000);
v_PROFILES  VARCHAR2(32000);
v_LOG_LEVEL NUMBER(3) := LOGS.CURRENT_LOG_LEVEL;
BEGIN
-- Check That Current User Has The Assigned Privilege To Execute This Interface --
   IF NOT CAN_WRITE(c_PROFILING_DOMAIN_NAME) THEN
      p_MESSAGE := c_NO_EXECUTION_PRIVILEGE;
      RETURN;
   END IF;
-- Check If There Has Been Content Specified --
   SELECT COUNT(*) INTO v_COUNT FROM CDI_TYPICAL_DAY_RUN_TEMPLATE WHERE IS_SELECTED = 1;
   IF v_COUNT = 0 THEN
      p_MESSAGE := 'No Templates Have Been Selected For Processing!';
      RETURN;
   END IF;
   SELECT COUNT(*) INTO v_COUNT FROM CDI_TYPICAL_DAY_RUN_PROFILE;
   IF v_COUNT = 0 THEN
      p_MESSAGE := 'No Profiles Have Been Selected For Processing!';
      RETURN;
   END IF;
-- Check To See If There Is A Job Currently Running -- 
   SELECT COUNT(*) INTO v_COUNT FROM USER_SCHEDULER_JOBS WHERE JOB_NAME = v_JOB_NAME AND STATE = 'RUNNING';
   IF v_COUNT = 0 THEN
-- Package The Template Ids --
      FOR v_SELECT IN c_SELECT_TEMPLATES LOOP
         v_TEMPLATES := v_TEMPLATES || TO_CHAR(v_SELECT.TEMPLATE_ID) || c_COMMA;
      END LOOP;
      v_TEMPLATES := RTRIM(v_TEMPLATES, c_COMMA);
-- Package The Account Ids --
      FOR v_SELECT IN c_SELECT_PROFILES LOOP
         v_PROFILES := v_PROFILES || TO_CHAR(v_SELECT.PROFILE_ID) || c_COMMA;
      END LOOP;
      v_PROFILES := RTRIM(v_PROFILES, c_COMMA);
-- Invoke The Background Process --
      v_PLSQL_BLOCK := 'BEGIN SECURITY_CONTROLS.SET_CURRENT_USER(' || UT.GET_LITERAL_FOR_STRING('System') || '); CDI_LOAD_PROFILE_UI.CALC_TYPICAL_DAY_PROFILE(p_TEMPLATES => ''' || v_TEMPLATES || ''', p_PROFILES => ''' || v_PROFILES || ''', p_PROFILE_PREFIX => ''' || p_PROFILE_PREFIX || ''', p_BEGIN_DATE => TO_DATE(''' || TO_CHAR(p_BEGIN_DATE,'MM/DD/YYYY') || ''',''MM/DD/YYYY''), p_END_DATE => TO_DATE(''' || TO_CHAR(p_END_DATE,'MM/DD/YYYY') || ''',''MM/DD/YYYY''), p_LOG_LEVEL => ' || TO_CHAR(v_LOG_LEVEL) || '); END;'; 
      DBMS_SCHEDULER.CREATE_JOB(v_JOB_NAME, 'PLSQL_BLOCK', v_PLSQL_BLOCK, START_DATE => NULL, ENABLED => TRUE, AUTO_DROP => TRUE, COMMENTS => 'Job Initiated By ' || SECURITY_CONTROLS.CURRENT_USER);
      p_MESSAGE := '"' || c_CALC_TYPICAL_DAY_PROFILES || '" Job Submitted.' || c_CRLF || 'See The Process Log To Monitor Job Progress.' || CASE WHEN v_LOG_LEVEL < LOGS.c_LEVEL_INFO THEN c_CRLF || v_PLSQL_BLOCK ELSE '' END;
   ELSE
      p_MESSAGE := '"' || c_CALC_TYPICAL_DAY_PROFILES || '" Job Is Currently Running.' || c_CRLF || 'Only One Job Should Be Active At Any Time.';
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
END RUN_CALC_PROFILE_TYPICAL_DAY;

PROCEDURE ASSIGN_ACCOUNT_REFERENCE(p_MESSAGE OUT VARCHAR2) AS
-- Set Account Reference For Historical Load Profiles --
BEGIN
   MERGE INTO LOAD_PROFILE T
   USING
      (SELECT B.PROFILE_ID, A.ACCOUNT_ID
      FROM ACCOUNT A
         JOIN LOAD_PROFILE B ON B.PROFILE_NAME = A.ACCOUNT_NAME AND B.PROFILE_TYPE = 'Historical' AND B.PROFILE_ACCOUNT_REF <> TO_CHAR(A.ACCOUNT_ID)
      WHERE A.ACCOUNT_MODEL_OPTION = 'Account'
         AND A.ACCOUNT_METER_TYPE = 'Interval') S
   ON (T.PROFILE_ID = S.PROFILE_ID)
   WHEN MATCHED THEN UPDATE SET PROFILE_ACCOUNT_REF = TO_CHAR(S.ACCOUNT_ID);
   p_MESSAGE := 'Number Of Interval Metered Accounts Referenced To An Associated Historical Load Profile: ' || TO_CHAR(SQL%ROWCOUNT);
END ASSIGN_ACCOUNT_REFERENCE;

PROCEDURE GET_HISTORICAL_PROFILE_LIBRARY(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   GET_LOAD_PROFILE_LIBRARY('Historical', p_CURSOR);
END GET_HISTORICAL_PROFILE_LIBRARY;

PROCEDURE GET_HISTORICAL_PROFILE_SUMMARY(p_PROFILE_LIBRARY_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   IF p_PROFILE_LIBRARY_ID = -1 THEN
      OPEN p_CURSOR FOR
         SELECT NULL FROM DUAL;
   ELSE
      OPEN p_CURSOR FOR
      SELECT A.PROFILE_NAME,
         TEXT_UTIL.TO_CHAR_DATE(B.FROM_DATE) "PROFILE_BEGIN_DATE",
         TEXT_UTIL.TO_CHAR_DATE(B.TO_DATE) "PROFILE_END_DATE",
         B.PROFILE_STATUS,
         B.PROFILE_COUNT,
         B.PROFILE_MIN "PROFILE_MINIMUM",
         B.PROFILE_NZ_MIN "PROFILE_NZ_MINIMUM",
         B.PROFILE_MAX "PROFILE_MAXIMUM",
         DATE_UTIL.GET_PROFILE_INTERVAL_NAME(A.PROFILE_INTERVAL) "PROFILE_INTERVAL",
         CASE WHEN C.ACCOUNT_ID IS NULL THEN 'Not Assigned' ELSE C.ACCOUNT_NAME END AS PROFILE_ACCOUNT_REF,
         A.PROFILE_ID,
         C.ACCOUNT_ID,
         C.ACCOUNT_NAME,
         CASE WHEN C.ACCOUNT_ID IS NULL THEN 2 ELSE 1 END "DISPLAY_CODE" 
      FROM LOAD_PROFILE A
         JOIN LOAD_PROFILE_STATISTICS B ON B.PROFILE_ID = A.PROFILE_ID
         LEFT JOIN ACCOUNT C ON TO_CHAR(C.ACCOUNT_ID) = A.PROFILE_ACCOUNT_REF
      WHERE A.PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
         AND A.PROFILE_TYPE = 'Historical'
         AND A.PROFILE_DESC <> 'Retail%Created Settlement Profile'
      ORDER BY A.PROFILE_NAME;
   END IF;
END GET_HISTORICAL_PROFILE_SUMMARY;

PROCEDURE GET_DAILY_HISTORICAL_PROFILE
   (
   p_PROFILE_ID IN NUMBER,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_DISPLAY_ZERO_DAYS IN NUMBER,
   p_USE_DATE_RANGE IN NUMBER,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
v_BEGIN_DATE DATE := p_BEGIN_DATE;
v_END_DATE DATE := p_END_DATE;
BEGIN
   IF p_PROFILE_ID IS NULL THEN
      OPEN p_CURSOR FOR SELECT NULL FROM DUAL;
      RETURN;
   END IF;
   IF p_USE_DATE_RANGE = 0 THEN
      SELECT FROM_DATE, TO_DATE INTO v_BEGIN_DATE, v_END_DATE FROM LOAD_PROFILE_STATISTICS WHERE PROFILE_ID = p_PROFILE_ID;
   END IF;
   UT.CUT_DATE_RANGE(v_BEGIN_DATE, v_END_DATE, GA.CUT_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
   OPEN p_CURSOR FOR
      SELECT *
      FROM
         (SELECT POINT_DAY,HR_01,HR_02,HR_03,HR_04,HR_05,HR_06,HR_07,HR_08,HR_09,HR_10,HR_11,HR_12,HR_13,HR_14,HR_15,HR_16,HR_17,HR_18,HR_19,HR_20,HR_21,HR_22,HR_23,HR_24,
            CASE WHEN HR_01+HR_02+HR_03+HR_04+HR_05+HR_06+HR_07+HR_08+HR_09+HR_10+HR_11+HR_12+HR_13+HR_14+HR_15+HR_16+HR_17+HR_18+HR_19+HR_20+HR_21+HR_22+HR_23+HR_24 IS NULL THEN 3 ELSE 1 END "DISPLAY_CODE"
         FROM
            (SELECT POINT_DAY,
               MAX(CASE WHEN POINT_HOUR =  1 THEN POINT_VALUE ELSE NULL END) "HR_01",
               MAX(CASE WHEN POINT_HOUR =  2 THEN POINT_VALUE ELSE NULL END) "HR_02",
               MAX(CASE WHEN POINT_HOUR =  3 THEN POINT_VALUE ELSE NULL END) "HR_03",
               MAX(CASE WHEN POINT_HOUR =  4 THEN POINT_VALUE ELSE NULL END) "HR_04",
               MAX(CASE WHEN POINT_HOUR =  5 THEN POINT_VALUE ELSE NULL END) "HR_05",
               MAX(CASE WHEN POINT_HOUR =  6 THEN POINT_VALUE ELSE NULL END) "HR_06",
               MAX(CASE WHEN POINT_HOUR =  7 THEN POINT_VALUE ELSE NULL END) "HR_07",
               MAX(CASE WHEN POINT_HOUR =  8 THEN POINT_VALUE ELSE NULL END) "HR_08",
               MAX(CASE WHEN POINT_HOUR =  9 THEN POINT_VALUE ELSE NULL END) "HR_09",
               MAX(CASE WHEN POINT_HOUR = 10 THEN POINT_VALUE ELSE NULL END) "HR_10",
               MAX(CASE WHEN POINT_HOUR = 11 THEN POINT_VALUE ELSE NULL END) "HR_11",
               MAX(CASE WHEN POINT_HOUR = 12 THEN POINT_VALUE ELSE NULL END) "HR_12",
               MAX(CASE WHEN POINT_HOUR = 13 THEN POINT_VALUE ELSE NULL END) "HR_13",
               MAX(CASE WHEN POINT_HOUR = 14 THEN POINT_VALUE ELSE NULL END) "HR_14",
               MAX(CASE WHEN POINT_HOUR = 15 THEN POINT_VALUE ELSE NULL END) "HR_15",
               MAX(CASE WHEN POINT_HOUR = 16 THEN POINT_VALUE ELSE NULL END) "HR_16",
               MAX(CASE WHEN POINT_HOUR = 17 THEN POINT_VALUE ELSE NULL END) "HR_17",
               MAX(CASE WHEN POINT_HOUR = 18 THEN POINT_VALUE ELSE NULL END) "HR_18",
               MAX(CASE WHEN POINT_HOUR = 19 THEN POINT_VALUE ELSE NULL END) "HR_19",
               MAX(CASE WHEN POINT_HOUR = 20 THEN POINT_VALUE ELSE NULL END) "HR_20",
               MAX(CASE WHEN POINT_HOUR = 21 THEN POINT_VALUE ELSE NULL END) "HR_21",
               MAX(CASE WHEN POINT_HOUR = 22 THEN POINT_VALUE ELSE NULL END) "HR_22",
               MAX(CASE WHEN POINT_HOUR = 23 THEN POINT_VALUE ELSE NULL END) "HR_23",
               MAX(CASE WHEN POINT_HOUR =  0 THEN POINT_VALUE ELSE NULL END) "HR_24",
               CASE WHEN NVL(MIN(POINT_VALUE),0) = 0 THEN 3 ELSE 1 END "DISPLAY_CODE",
               p_PROFILE_ID "PROFILE_ID"
            FROM
               (SELECT P.PROFILE_ID, TRUNC(FROM_CUT(P.POINT_DATE, GA.CUT_TIME_ZONE) -0.00001) "POINT_DAY", TO_NUMBER(TO_CHAR(FROM_CUT(P.POINT_DATE, GA.CUT_TIME_ZONE),'HH24')) "POINT_HOUR", P.POINT_VAL "POINT_VALUE"
               FROM LOAD_PROFILE_POINT P
               WHERE P.PROFILE_ID = p_PROFILE_ID
                  AND P.POINT_INDEX = 1
                  AND P.AS_OF_DATE = CONSTANTS.LOW_DATE
                  AND P.POINT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE) 
            GROUP BY POINT_DAY))
      WHERE CASE WHEN p_DISPLAY_ZERO_DAYS = 1 THEN CASE WHEN DISPLAY_CODE = 3 THEN 1 ELSE 0 END ELSE 1 END = 1
      ORDER BY POINT_DAY;
     
END GET_DAILY_HISTORICAL_PROFILE;

PROCEDURE GET_HOURLY_HISTORICAL_PROFILE
   (
   p_PROFILE_ID IN NUMBER,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_DISPLAY_ZERO_LOAD IN NUMBER,
   p_USE_DATE_RANGE IN NUMBER,
   p_INTERVAL OUT VARCHAR2,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
v_BEGIN_DATE DATE := p_BEGIN_DATE;
v_END_DATE DATE := p_END_DATE;
v_PROFILE_INTERVAL PLS_INTEGER := 24;
BEGIN
   IF p_PROFILE_ID IS NULL THEN
      OPEN p_CURSOR FOR SELECT NULL FROM DUAL;
      RETURN;
   END IF;
   IF p_USE_DATE_RANGE = 0 THEN
      SELECT FROM_DATE, TO_DATE INTO v_BEGIN_DATE, v_END_DATE FROM LOAD_PROFILE_STATISTICS WHERE PROFILE_ID = p_PROFILE_ID;
   END IF;
   UT.CUT_DATE_RANGE(v_BEGIN_DATE, v_END_DATE, GA.CUT_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
   SELECT NVL(MAX(PROFILE_INTERVAL),24) INTO v_PROFILE_INTERVAL FROM LOAD_PROFILE WHERE PROFILE_ID = p_PROFILE_ID;
   p_INTERVAL := DATE_UTIL.GET_PROFILE_INTERVAL_NAME(v_PROFILE_INTERVAL);
   OPEN p_CURSOR FOR
      SELECT P.PROFILE_ID, CDI_FROM_CUT_AS_STD(P.POINT_DATE) "POINT_DATE", P.POINT_VAL, CASE WHEN NVL(P.POINT_VAL,0) = 0 THEN 3 ELSE 1 END "DISPLAY_CODE"
      FROM LOAD_PROFILE_POINT P
      WHERE P.PROFILE_ID = p_PROFILE_ID
         AND P.POINT_INDEX = 1
         AND P.AS_OF_DATE = CONSTANTS.LOW_DATE
         AND P.POINT_DATE BETWEEN  v_BEGIN_DATE AND v_END_DATE
         AND CASE WHEN p_DISPLAY_ZERO_LOAD = 1 THEN CASE WHEN NVL(P.POINT_VAL,0) = 0 THEN 1 ELSE 0 END ELSE 1 END = 1
      ORDER BY P.POINT_DATE;
END GET_HOURLY_HISTORICAL_PROFILE;

PROCEDURE PUT_DAILY_HISTORICAL_PROFILE
   (
   p_PROFILE_ID IN NUMBER,
   p_POINT_DAY IN DATE,
   p_HR_01 IN NUMBER,
   p_HR_02 IN NUMBER,
   p_HR_03 IN NUMBER,
   p_HR_04 IN NUMBER,
   p_HR_05 IN NUMBER,
   p_HR_06 IN NUMBER,
   p_HR_07 IN NUMBER,
   p_HR_08 IN NUMBER,
   p_HR_09 IN NUMBER,
   p_HR_10 IN NUMBER,
   p_HR_11 IN NUMBER,
   p_HR_12 IN NUMBER,
   p_HR_13 IN NUMBER,
   p_HR_14 IN NUMBER,
   p_HR_15 IN NUMBER,
   p_HR_16 IN NUMBER,
   p_HR_17 IN NUMBER,
   p_HR_18 IN NUMBER,
   p_HR_19 IN NUMBER,
   p_HR_20 IN NUMBER,
   p_HR_21 IN NUMBER,
   p_HR_22 IN NUMBER,
   p_HR_23 IN NUMBER,
   p_HR_24 IN NUMBER
   ) AS
v_STATUS NUMBER;
BEGIN
   MERGE INTO LOAD_PROFILE_POINT T
   USING
      (SELECT p_POINT_DAY + 1/24 "POINT_DATE", p_HR_01 "POINT_VAL" FROM DUAL
      UNION SELECT p_POINT_DAY + 2/24, p_HR_02 FROM DUAL
      UNION SELECT p_POINT_DAY + 3/24, p_HR_03 FROM DUAL
      UNION SELECT p_POINT_DAY + 4/24, p_HR_04 FROM DUAL
      UNION SELECT p_POINT_DAY + 5/24, p_HR_05 FROM DUAL
      UNION SELECT p_POINT_DAY + 6/24, p_HR_06 FROM DUAL
      UNION SELECT p_POINT_DAY + 7/24, p_HR_07 FROM DUAL
      UNION SELECT p_POINT_DAY + 8/24, p_HR_08 FROM DUAL
      UNION SELECT p_POINT_DAY + 9/24, p_HR_09 FROM DUAL
      UNION SELECT p_POINT_DAY + 10/24, p_HR_10 FROM DUAL
      UNION SELECT p_POINT_DAY + 11/24, p_HR_11 FROM DUAL
      UNION SELECT p_POINT_DAY + 12/24, p_HR_12 FROM DUAL
      UNION SELECT p_POINT_DAY + 13/24, p_HR_13 FROM DUAL
      UNION SELECT p_POINT_DAY + 14/24, p_HR_14 FROM DUAL
      UNION SELECT p_POINT_DAY + 15/24, p_HR_15 FROM DUAL
      UNION SELECT p_POINT_DAY + 16/24, p_HR_16 FROM DUAL
      UNION SELECT p_POINT_DAY + 17/24, p_HR_17 FROM DUAL
      UNION SELECT p_POINT_DAY + 18/24, p_HR_18 FROM DUAL
      UNION SELECT p_POINT_DAY + 19/24, p_HR_19 FROM DUAL
      UNION SELECT p_POINT_DAY + 20/24, p_HR_20 FROM DUAL
      UNION SELECT p_POINT_DAY + 21/24, p_HR_21 FROM DUAL
      UNION SELECT p_POINT_DAY + 22/24, p_HR_22 FROM DUAL
      UNION SELECT p_POINT_DAY + 23/24, p_HR_23 FROM DUAL
      UNION SELECT p_POINT_DAY + 24/24, p_HR_24 FROM DUAL) S
   ON (T.PROFILE_ID = p_PROFILE_ID AND T.POINT_DATE = S.POINT_DATE AND T.POINT_INDEX = 1 AND T.AS_OF_DATE = CONSTANTS.LOW_DATE)
   WHEN MATCHED THEN UPDATE SET T.POINT_VAL = S.POINT_VAL;
   PF.PUT_HISTORICAL_PROFILE_STATS(p_PROFILE_ID, CONSTANTS.LOW_DATE, v_STATUS);
END PUT_DAILY_HISTORICAL_PROFILE;

PROCEDURE FILTER_WEATHER_INDEX_LIBRARY(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   GET_LOAD_PROFILE_LIBRARY('Weather', p_CURSOR);
END FILTER_WEATHER_INDEX_LIBRARY;

PROCEDURE FILTER_WEATHER_INDEX_PROFILE(p_PROFILE_LIBRARY_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT PROFILE_NAME, PROFILE_ID
      FROM LOAD_PROFILE
      WHERE PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
         AND PROFILE_TYPE = 'Weather'
      ORDER BY PROFILE_NAME;
END FILTER_WEATHER_INDEX_PROFILE;

PROCEDURE GET_WEATHER_INDEX_PROFILE
   (
   p_PROFILE_ID IN NUMBER,
   p_INDEX_LOWER_LIMIT IN NUMBER,
   p_INDEX_UPPER_LIMIT IN NUMBER,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
v_INDEX_LOWER_LIMIT PLS_INTEGER := CASE WHEN NVL(p_INDEX_LOWER_LIMIT,0) = 0 THEN -999 ELSE p_INDEX_LOWER_LIMIT END;
v_INDEX_UPPER_LIMIT PLS_INTEGER := CASE WHEN NVL(p_INDEX_UPPER_LIMIT,0) = 0 THEN  999 ELSE p_INDEX_UPPER_LIMIT END;
v_INDEX_BASE PLS_INTEGER;
BEGIN
   SELECT ABS(MIN(POINT_INDEX)) + 1001 INTO v_INDEX_BASE FROM LOAD_PROFILE_POINT WHERE PROFILE_ID = p_PROFILE_ID;
   OPEN p_CURSOR FOR
      SELECT CASE WHEN POINT_HOUR = '00' THEN '24' ELSE POINT_HOUR END AS POINT_HOUR,
         CASE WHEN POINT_INDEX < 0 THEN '-' ELSE NULL END || LPAD(TO_CHAR(ABS(POINT_INDEX)),3,'0') AS PROFILE_NAME,
         PROFILE_BASE_INDEX,
         POINT_VAL
      FROM
         (SELECT POINT_INDEX, POINT_INDEX + v_INDEX_BASE AS PROFILE_BASE_INDEX, TO_CHAR(FROM_CUT(POINT_DATE, LOCAL_TIME_ZONE),'HH24') AS POINT_HOUR, POINT_VAL 
         FROM LOAD_PROFILE_POINT
         WHERE PROFILE_ID = p_PROFILE_ID
            AND POINT_INDEX BETWEEN v_INDEX_LOWER_LIMIT AND v_INDEX_UPPER_LIMIT)
      ORDER BY POINT_HOUR, POINT_INDEX;
END GET_WEATHER_INDEX_PROFILE;

PROCEDURE FILTER_LOAD_PROFILE_LIBRARY(p_FILTER_PROFILE_TYPE IN VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
v_COUNT PLS_INTEGER;
v_PROFILE_TYPE VARCHAR2(32) := CASE WHEN p_FILTER_PROFILE_TYPE = 'Weather Index' THEN 'Weather' ELSE p_FILTER_PROFILE_TYPE END;
BEGIN
   OPEN p_CURSOR FOR
      SELECT DISTINCT PROFILE_LIBRARY_NAME, PROFILE_LIBRARY_ID
      FROM LOAD_PROFILE_LIBRARY X
      WHERE EXISTS (SELECT NULL FROM LOAD_PROFILE WHERE PROFILE_LIBRARY_ID = X.PROFILE_LIBRARY_ID AND PROFILE_TYPE = v_PROFILE_TYPE AND PROFILE_DESC <> 'RetailOffice Created Settlement Profile')
      ORDER BY PROFILE_LIBRARY_NAME;
END FILTER_LOAD_PROFILE_LIBRARY;

PROCEDURE FILTER_LOAD_PROFILE(p_FILTER_PROFILE_TYPE IN VARCHAR2, p_FILTER_PROFILE_LIBRARY_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
v_PROFILE_TYPE VARCHAR2(32) := CASE WHEN p_FILTER_PROFILE_TYPE = 'Weather Index' THEN 'Weather' ELSE p_FILTER_PROFILE_TYPE END;
BEGIN
   OPEN p_CURSOR FOR
      SELECT PROFILE_NAME, PROFILE_ID
      FROM LOAD_PROFILE
      WHERE PROFILE_LIBRARY_ID = p_FILTER_PROFILE_LIBRARY_ID
         AND PROFILE_TYPE = v_PROFILE_TYPE
      ORDER BY PROFILE_NAME;
END FILTER_LOAD_PROFILE;

PROCEDURE GET_LOAD_PROFILE_POINT
   (
   p_FILTER_PROFILE_TYPE IN VARCHAR2,
   p_FILTER_PROFILE_ID IN NUMBER,
   p_FILTER_USE_DATE_RANGE IN NUMBER,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_INTERVAL OUT VARCHAR2,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_PROFILE_INTERVAL PLS_INTEGER := 24;
v_STD_TIME_ZONE CHAR(3) := STD_TIME_ZONE(GA.LOCAL_TIME_ZONE);
BEGIN
   p_INTERVAL := DATE_UTIL.GET_PROFILE_INTERVAL_NAME(v_PROFILE_INTERVAL);
   SELECT NVL(MAX(PROFILE_INTERVAL),24) INTO v_PROFILE_INTERVAL FROM LOAD_PROFILE WHERE PROFILE_ID = p_FILTER_PROFILE_ID;
   CASE p_FILTER_PROFILE_TYPE
      WHEN 'Historical' THEN
         IF p_FILTER_USE_DATE_RANGE = 1 THEN 
            UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, v_STD_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
         ELSE   
            SELECT FROM_DATE, TO_DATE INTO v_BEGIN_DATE, v_END_DATE FROM LOAD_PROFILE_STATISTICS WHERE PROFILE_ID = p_FILTER_PROFILE_ID;
            UT.CUT_DATE_RANGE(v_BEGIN_DATE, v_END_DATE, v_STD_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
         END IF;
         OPEN p_CURSOR FOR
            SELECT CDI_FROM_CUT_AS_STD(POINT_DATE) "POINT_IDENTIFIER", POINT_VAL, POINT_DATE, POINT_INDEX, PROFILE_ID 
            FROM LOAD_PROFILE_POINT
            WHERE PROFILE_ID = p_FILTER_PROFILE_ID
               AND POINT_INDEX BETWEEN 0 AND 1
               AND AS_OF_DATE = CONSTANTS.LOW_DATE
               AND POINT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
            ORDER BY POINT_DATE;
      WHEN 'Weather Index' THEN
         OPEN p_CURSOR FOR
            SELECT CASE WHEN POINT_INDEX < 0 THEN '-' ELSE NULL END || LPAD(TO_CHAR(ABS(POINT_INDEX)),3,'0') || ' ' || CASE WHEN POINT_HOUR = '00' THEN '24' ELSE POINT_HOUR END || ':00' "POINT_IDENTIFIER",
            POINT_VAL, POINT_DATE, POINT_INDEX, PROFILE_ID
            FROM
               (SELECT PROFILE_ID, POINT_DATE, POINT_INDEX, TO_CHAR(FROM_CUT(POINT_DATE, LOCAL_TIME_ZONE),'HH24') AS POINT_HOUR, POINT_VAL 
               FROM LOAD_PROFILE_POINT
               WHERE PROFILE_ID = p_FILTER_PROFILE_ID
                  AND AS_OF_DATE = CONSTANTS.LOW_DATE)
            ORDER BY 1;
      WHEN 'Typical Day' THEN
         OPEN p_CURSOR FOR
            SELECT 'Typical Day Not Implemented' AS POINT_IDENTIFIER FROM DUAL;
   END CASE;
END GET_LOAD_PROFILE_POINT;

PROCEDURE PUT_LOAD_PROFILE_POINT
   (
   p_FILTER_PROFILE_TYPE IN VARCHAR2,
   p_PROFILE_ID IN NUMBER,
   p_POINT_INDEX IN NUMBER,
   p_POINT_DATE IN DATE,
   p_POINT_VAL IN NUMBER
   ) AS
BEGIN
   IF p_FILTER_PROFILE_TYPE IN ('Historical', 'Weather Index') THEN
      UPDATE LOAD_PROFILE_POINT SET POINT_VAL = p_POINT_VAL, POINT_INDEX = p_POINT_INDEX
      WHERE PROFILE_ID = p_PROFILE_ID
         AND AS_OF_DATE = CONSTANTS.LOW_DATE
         AND POINT_DATE = p_POINT_DATE;
   END IF;
END PUT_LOAD_PROFILE_POINT;

PROCEDURE FILTER_CALENDAR
   (
   p_CALENDAR_FILTER IN VARCHAR2,
   p_FILTER_LIBRARY_ASSIGNMENTS IN NUMBER,
   p_FILTER_PROFILE_ASSIGNMENTS IN NUMBER,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT CDI_TO_HTML_FONT_COLOR(CALENDAR_NAME, CASE ASSIGNMENT_TYPE WHEN 'B' THEN c_COLOR_RED WHEN 'P' THEN c_COLOR_GREEN WHEN 'L' THEN c_COLOR_BLUE END, c_BOLD) AS FILTER_CALENDAR_NAME, CALENDAR_ID AS FILTER_CALENDAR_ID
      FROM CALENDAR A
      WHERE CALENDAR_ID > 1
         AND UPPER(CALENDAR_NAME) LIKE UPPER(NVL(p_CALENDAR_FILTER,'%'))
         AND (p_FILTER_PROFILE_ASSIGNMENTS = 1 AND EXISTS (SELECT NULL FROM CALENDAR_PROFILE WHERE CALENDAR_ID = A.CALENDAR_ID)
            OR (p_FILTER_LIBRARY_ASSIGNMENTS = 1 AND EXISTS (SELECT NULL FROM CALENDAR_PROFILE_LIBRARY WHERE CALENDAR_ID = A.CALENDAR_ID)))
      ORDER BY ASSIGNMENT_TYPE, CALENDAR_NAME;
END FILTER_CALENDAR;

PROCEDURE GET_CALENDAR_PROFILE_LIBRARY(p_FILTER_CALENDAR_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT B.PROFILE_LIBRARY_ID AS ASSIGN_PROFILE_LIBRARY_ID,
         B.PROFILE_LIBRARY_NAME AS ASSIGN_PROFILE_LIBRARY_NAME,
         A.BEGIN_DATE AS ASSIGN_BEGIN_DATE,
         A.END_DATE AS ASSIGN_END_DATE,
         A.ENTRY_DATE AS ASSIGN_ENTRY_DATE,
         A.CALENDAR_ID AS ASSIGN_CALENDAR_ID
      FROM CALENDAR_PROFILE_LIBRARY A
         JOIN LOAD_PROFILE_LIBRARY B ON B.PROFILE_LIBRARY_ID = A.PROFILE_LIBRARY_ID
      WHERE A.CALENDAR_ID = p_FILTER_CALENDAR_ID
      ORDER BY A.BEGIN_DATE, B.PROFILE_LIBRARY_NAME;
END GET_CALENDAR_PROFILE_LIBRARY;

PROCEDURE GET_CALENDAR_PROFILE(p_FILTER_CALENDAR_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT B.PROFILE_ID AS ASSIGN_PROFILE_ID,
         B.PROFILE_NAME AS ASSIGN_PROFILE_NAME,
         C.PROFILE_LIBRARY_NAME AS ASSIGN_LIBRARY_NAME,
         A.BEGIN_DATE AS ASSIGN_BEGIN_DATE,
         A.END_DATE AS ASSIGN_END_DATE,
         A.ENTRY_DATE AS ASSIGN_ENTRY_DATE,
         A.CALENDAR_ID AS ASSIGN_CALENDAR_ID
      FROM CALENDAR_PROFILE A
         JOIN LOAD_PROFILE B ON B.PROFILE_ID = A.PROFILE_ID
         JOIN LOAD_PROFILE_LIBRARY C ON C.PROFILE_LIBRARY_ID = B.PROFILE_LIBRARY_ID
      WHERE A.CALENDAR_ID = p_FILTER_CALENDAR_ID
      ORDER BY A.BEGIN_DATE, B.PROFILE_NAME;
END GET_CALENDAR_PROFILE;

PROCEDURE GET_LIBRARY_ASSIGN_CANDIDATES(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT PROFILE_LIBRARY_ID, PROFILE_LIBRARY_NAME
      FROM LOAD_PROFILE_LIBRARY
      ORDER BY PROFILE_LIBRARY_NAME;
END GET_LIBRARY_ASSIGN_CANDIDATES;

PROCEDURE GET_PROFILE_ASSIGN_CANDIDATES(p_PROFILE_LIBRARY_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT PROFILE_ID, PROFILE_NAME, PROFILE_NAME AS SORT_ORDER
      FROM LOAD_PROFILE
      WHERE PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
      UNION SELECT -1 AS PROFILE_ID, '<All Profiles>' PROFILE_NAME, '0' AS SORT_ORDER FROM DUAL
      ORDER BY SORT_ORDER;
END GET_PROFILE_ASSIGN_CANDIDATES;

PROCEDURE GET_CALENDAR_ASSIGNMENT
   (
   p_FILTER_CALENDAR_ID IN NUMBER,
   p_FILTER_USE_DATE_RANGE IN NUMBER,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_LABEL_ASSIGNMENT_COVERAGE OUT VARCHAR2,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
v_BEGIN_DATE DATE := CASE WHEN p_FILTER_USE_DATE_RANGE = 1 THEN p_BEGIN_DATE ELSE CONSTANTS.LOW_DATE  END;
v_END_DATE DATE   := CASE WHEN p_FILTER_USE_DATE_RANGE = 1 THEN p_END_DATE   ELSE CONSTANTS.HIGH_DATE END;
v_EARLY_DATE DATE;
v_LATE_DATE DATE;
v_COUNT PLS_INTEGER;
BEGIN
   SELECT MIN(BEGIN_DATE), MAX(END_DATE), COUNT(*) INTO v_EARLY_DATE, v_LATE_DATE, v_COUNT FROM
      (SELECT A.BEGIN_DATE, NVL(A.END_DATE, CONSTANTS.HIGH_DATE) AS END_DATE
      FROM CALENDAR_PROFILE_LIBRARY A
         JOIN LOAD_PROFILE_LIBRARY B ON B.PROFILE_LIBRARY_ID = A.PROFILE_LIBRARY_ID
      WHERE A.CALENDAR_ID = p_FILTER_CALENDAR_ID
      UNION SELECT A.BEGIN_DATE, NVL(A.END_DATE, CONSTANTS.HIGH_DATE)
      FROM CALENDAR_PROFILE A
         JOIN LOAD_PROFILE B ON B.PROFILE_ID = A.PROFILE_ID
         JOIN LOAD_PROFILE_LIBRARY C ON C.PROFILE_LIBRARY_ID = B.PROFILE_LIBRARY_ID
      WHERE A.CALENDAR_ID = p_FILTER_CALENDAR_ID);
   p_LABEL_ASSIGNMENT_COVERAGE := CASE WHEN v_COUNT > 0 THEN TO_CHAR(v_EARLY_DATE, c_DATE_FORMAT) || '-' ||  TO_CHAR(v_LATE_DATE, c_DATE_FORMAT) || ' (' || TO_CHAR(v_COUNT) || ')' ELSE '<html><font color="red">None</font></html>' END;
   SELECT COUNT(*) INTO v_COUNT FROM
      (SELECT A.BEGIN_DATE, A.END_DATE
      FROM CALENDAR_PROFILE_LIBRARY A
         JOIN LOAD_PROFILE_LIBRARY B ON B.PROFILE_LIBRARY_ID = A.PROFILE_LIBRARY_ID
      WHERE A.CALENDAR_ID = p_FILTER_CALENDAR_ID
         AND A.BEGIN_DATE <= v_END_DATE
         AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE
      UNION SELECT A.BEGIN_DATE, A.END_DATE
      FROM CALENDAR_PROFILE A
         JOIN LOAD_PROFILE B ON B.PROFILE_ID = A.PROFILE_ID
         JOIN LOAD_PROFILE_LIBRARY C ON C.PROFILE_LIBRARY_ID = B.PROFILE_LIBRARY_ID
      WHERE A.CALENDAR_ID = p_FILTER_CALENDAR_ID
         AND A.BEGIN_DATE <= v_END_DATE
         AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE);
   IF v_COUNT > 0 THEN
      OPEN p_CURSOR FOR
         SELECT
            'Library'              AS ASSIGN_CALENDAR_TYPE,
            A.BEGIN_DATE           AS ASSIGN_BEGIN_DATE,
            A.END_DATE             AS ASSIGN_END_DATE,
            C.PROFILE_NAME         AS ASSIGN_PROFILE_NAME,
            B.PROFILE_LIBRARY_NAME AS ASSIGN_LIBRARY_NAME,
            C.PROFILE_TYPE         AS ASSIGN_PROFILE_TYPE,
            A.ENTRY_DATE           AS ASSIGN_ENTRY_DATE,
            A.CALENDAR_ID          AS ENTRY_CALENDAR_ID,
            B.PROFILE_LIBRARY_ID   AS ENTRY_LIBRARY_ID,
            C.PROFILE_ID           AS ENTRY_PROFILE_ID,
            A.BEGIN_DATE           AS ENTRY_BEGIN_DATE,
            A.END_DATE             AS ENTRY_END_DATE
         FROM CALENDAR_PROFILE_LIBRARY A
            JOIN LOAD_PROFILE_LIBRARY  B ON B.PROFILE_LIBRARY_ID = A.PROFILE_LIBRARY_ID
            JOIN LOAD_PROFILE          C ON C.PROFILE_LIBRARY_ID = B.PROFILE_LIBRARY_ID
         WHERE A.CALENDAR_ID = p_FILTER_CALENDAR_ID
            AND A.BEGIN_DATE <= v_END_DATE
            AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE
         UNION SELECT
            'Profile'              AS ASSIGN_CALENDAR_TYPE,
            A.BEGIN_DATE           AS ASSIGN_BEGIN_DATE,
            A.END_DATE             AS ASSIGN_END_DATE,
            B.PROFILE_NAME         AS ASSIGN_PROFILE_NAME,
            C.PROFILE_LIBRARY_NAME AS ASSIGN_LIBRARY_NAME,
            B.PROFILE_TYPE         AS ASSIGN_PROFILE_TYPE,
            A.ENTRY_DATE           AS ASSIGN_ENTRY_DATE,
            A.CALENDAR_ID          AS ENTRY_CALENDAR_ID,
            C.PROFILE_LIBRARY_ID   AS ENTRY_LIBRARY_ID,
            B.PROFILE_ID           AS ENTRY_PROFILE_ID,
            A.BEGIN_DATE           AS ENTRY_BEGIN_DATE,
            A.END_DATE             AS ENTRY_END_DATE
         FROM CALENDAR_PROFILE        A
            JOIN LOAD_PROFILE         B ON B.PROFILE_ID = A.PROFILE_ID
            JOIN LOAD_PROFILE_LIBRARY C ON C.PROFILE_LIBRARY_ID = B.PROFILE_LIBRARY_ID
         WHERE A.CALENDAR_ID = p_FILTER_CALENDAR_ID
            AND A.BEGIN_DATE <= v_END_DATE
            AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE
         ORDER BY 1;
   ELSE
      OPEN p_CURSOR FOR
         SELECT 
            NULL           AS ASSIGN_BEGIN_DATE,
            NULL           AS ASSIGN_END_DATE,
            'Not Assigned' AS ASSIGN_PROFILE_NAME,
            'Not Assigned' AS ASSIGN_LIBRARY_NAME,
            NULL           AS ASSIGN_PROFILE_TYPE,
            NULL           AS ASSIGN_ENTRY_DATE,
            '<html><font color="red"><b><i>No content for date range</i></b></font></html>' AS ASSIGN_MESSAGE,
            p_FILTER_CALENDAR_ID AS ENTRY_CALENDAR_ID
         FROM DUAL;
   END IF;  
END GET_CALENDAR_ASSIGNMENT;

PROCEDURE PUT_CALENDAR_ASSIGNMENT
   (
   p_ENTRY_CALENDAR_ID IN NUMBER,
   p_ENTRY_LIBRARY_ID IN NUMBER,
   p_ENTRY_PROFILE_ID IN NUMBER,
   p_ENTRY_BEGIN_DATE IN DATE,
   p_ENTRY_END_DATE IN DATE,
   p_ASSIGN_BEGIN_DATE IN DATE,
   p_ASSIGN_END_DATE IN DATE
   ) AS
BEGIN
   IF p_ENTRY_PROFILE_ID IS NOT NULL THEN
      UPDATE CALENDAR_PROFILE SET BEGIN_DATE = p_ASSIGN_BEGIN_DATE, END_DATE = p_ASSIGN_END_DATE
      WHERE CALENDAR_ID = p_ENTRY_CALENDAR_ID
         AND PROFILE_ID = p_ENTRY_PROFILE_ID
         AND BEGIN_DATE = p_ENTRY_BEGIN_DATE
         AND END_DATE   = p_ENTRY_END_DATE; 
   ELSIF p_ENTRY_LIBRARY_ID IS NOT NULL THEN
      UPDATE CALENDAR_PROFILE_LIBRARY SET BEGIN_DATE = p_ASSIGN_BEGIN_DATE, END_DATE = p_ASSIGN_END_DATE
      WHERE CALENDAR_ID         = p_ENTRY_CALENDAR_ID
         AND PROFILE_LIBRARY_ID = p_ENTRY_LIBRARY_ID
         AND BEGIN_DATE         = p_ENTRY_BEGIN_DATE
         AND END_DATE           = p_ENTRY_END_DATE; 
   END IF;
END PUT_CALENDAR_ASSIGNMENT;

PROCEDURE CUT_CALENDAR_ASSIGNMENT
   (
   p_ENTRY_CALENDAR_ID IN NUMBER,
   p_ENTRY_LIBRARY_ID IN NUMBER,
   p_ENTRY_PROFILE_ID IN NUMBER,
   p_ASSIGN_BEGIN_DATE IN DATE,
   p_ASSIGN_END_DATE IN DATE
   ) AS
BEGIN
   IF p_ENTRY_PROFILE_ID IS NOT NULL THEN
      DELETE CALENDAR_PROFILE
      WHERE CALENDAR_ID = p_ENTRY_CALENDAR_ID
         AND PROFILE_ID = p_ENTRY_PROFILE_ID
         AND BEGIN_DATE = p_ASSIGN_BEGIN_DATE
         AND END_DATE   = p_ASSIGN_END_DATE; 
   ELSIF p_ENTRY_LIBRARY_ID IS NOT NULL THEN
      DELETE CALENDAR_PROFILE_LIBRARY
      WHERE CALENDAR_ID         = p_ENTRY_CALENDAR_ID
         AND PROFILE_LIBRARY_ID = p_ENTRY_LIBRARY_ID
         AND BEGIN_DATE         = p_ASSIGN_BEGIN_DATE
         AND END_DATE           = p_ASSIGN_END_DATE; 
   END IF;
END CUT_CALENDAR_ASSIGNMENT;

PROCEDURE GET_CALENDAR_ADJUSTMENT
   (
   p_FILTER_CALENDAR_ID IN NUMBER,
   p_FILTER_USE_DATE_RANGE IN NUMBER,
   p_BEGIN_DATE IN DATE,
   p_END_DATE IN DATE,
   p_LABEL_ADJUSTMENT_COVERAGE OUT VARCHAR2,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
v_BEGIN_DATE DATE := CASE WHEN p_FILTER_USE_DATE_RANGE = 1 THEN p_BEGIN_DATE ELSE CONSTANTS.LOW_DATE  END;
v_END_DATE DATE   := CASE WHEN p_FILTER_USE_DATE_RANGE = 1 THEN p_END_DATE   ELSE CONSTANTS.HIGH_DATE END;
v_EARLY_DATE DATE;
v_LATE_DATE DATE;
v_COUNT PLS_INTEGER;
BEGIN
   SELECT MIN(BEGIN_DATE), MAX(NVL(END_DATE, CONSTANTS.HIGH_DATE)), COUNT(*) INTO v_EARLY_DATE, v_LATE_DATE, v_COUNT
   FROM CALENDAR_ADJUSTMENT
   WHERE CALENDAR_ID = p_FILTER_CALENDAR_ID;
   p_LABEL_ADJUSTMENT_COVERAGE := CASE WHEN v_COUNT > 0 THEN TO_CHAR(v_EARLY_DATE, c_DATE_FORMAT) || '-' ||  TO_CHAR(v_LATE_DATE, c_DATE_FORMAT) || ' (' || TO_CHAR(v_COUNT) || ')' ELSE '<html><font color="red">None</font></html>' END;
   SELECT COUNT(*) INTO v_COUNT
   FROM CALENDAR_ADJUSTMENT
   WHERE CALENDAR_ID = p_FILTER_CALENDAR_ID
      AND BEGIN_DATE <= v_END_DATE
      AND NVL(END_DATE, CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE;
   IF v_COUNT > 0 THEN
      OPEN p_CURSOR FOR
         SELECT 
            A.BEGIN_DATE  AS ADJUST_BEGIN_DATE,
            A.END_DATE    AS ADJUST_END_DATE,
            CASE A.ADJ_OP WHEN 'A' THEN 'Adder' WHEN 'M' THEN 'Multiplier' ELSE '?' END AS ADJUST_OPERATION,
            A.ADJ_VAL     AS ADJUST_VALUE,
            A.ENTRY_DATE  AS ADJUST_ENTRY_DATE,
            A.CALENDAR_ID AS ENTRY_CALENDAR_ID,
            A.BEGIN_DATE  AS ENTRY_BEGIN_DATE,
            A.END_DATE    AS ENTRY_END_DATE
         FROM CALENDAR_ADJUSTMENT A
         WHERE A.CALENDAR_ID = p_FILTER_CALENDAR_ID
            AND A.BEGIN_DATE <= v_END_DATE
            AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE
         ORDER BY 1;
   ELSE
      OPEN p_CURSOR FOR
         SELECT 
            NULL AS ADJUST_BEGIN_DATE,
            NULL AS ADJUST_END_DATE,
            NULL AS ADJUST_OPERATION,
            NULL AS ADJUST_VALUE,
            NULL AS ADJUST_ENTRY_DATE,
            '<html><font color="red"><b><i>No content for date range</i></b></font></html>' AS ADJUST_MESSAGE,
            p_FILTER_CALENDAR_ID AS ENTRY_CALENDAR_ID
         FROM DUAL;
   END IF;  
END GET_CALENDAR_ADJUSTMENT;

PROCEDURE PUT_CALENDAR_ADJUSTMENT
   (
   p_ENTRY_CALENDAR_ID IN NUMBER,
   p_ENTRY_BEGIN_DATE IN DATE,
   p_ENTRY_END_DATE IN DATE,
   p_ADJUST_BEGIN_DATE IN DATE,
   p_ADJUST_END_DATE IN DATE,
   p_ADJUST_OPERATION IN VARCHAR2,
   p_ADJUST_VALUE IN NUMBER
   ) AS
BEGIN
   UPDATE CALENDAR_ADJUSTMENT SET BEGIN_DATE = p_ADJUST_BEGIN_DATE, END_DATE = p_ADJUST_END_DATE, ADJ_VAL = p_ADJUST_VALUE
   WHERE CALENDAR_ID = p_ENTRY_CALENDAR_ID
      AND BEGIN_DATE = p_ENTRY_BEGIN_DATE
      AND END_DATE   = p_ENTRY_END_DATE
      AND ADJ_OP     = SUBSTR(p_ADJUST_OPERATION,1,1);
END PUT_CALENDAR_ADJUSTMENT;

PROCEDURE CUT_CALENDAR_ADJUSTMENT
   (
   p_ENTRY_CALENDAR_ID IN NUMBER,
   p_ADJUST_BEGIN_DATE IN DATE,
   p_ADJUST_END_DATE IN DATE,
   p_ADJUST_OPERATION IN VARCHAR2
   ) AS
BEGIN
   DELETE CALENDAR_ADJUSTMENT
   WHERE CALENDAR_ID = p_ENTRY_CALENDAR_ID
      AND BEGIN_DATE = p_ADJUST_BEGIN_DATE
      AND END_DATE   = p_ADJUST_END_DATE 
      AND ADJ_OP     = SUBSTR(p_ADJUST_OPERATION,1,1);
END CUT_CALENDAR_ADJUSTMENT;

PROCEDURE GET_CALENDAR_MANAGEMENT
   (
   p_CALENDAR_MANAGEMENT_TYPE IN VARCHAR2,
   p_FILTER_CALENDAR_ID IN NUMBER,
   p_LABEL_CALENDAR_NAME OUT VARCHAR2,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
BEGIN
   SELECT MAX(CALENDAR_NAME) INTO p_LABEL_CALENDAR_NAME FROM CALENDAR WHERE CALENDAR_ID = p_FILTER_CALENDAR_ID;
   OPEN p_CURSOR FOR
      SELECT *
      FROM CDI_CALENDAR_MANAGEMENT
      WHERE CALENDAR_ID = p_FILTER_CALENDAR_ID
         AND CALENDAR_MANAGEMENT_TYPE = p_CALENDAR_MANAGEMENT_TYPE
      ORDER BY PROFILE_LIBRARY_NAME, PROFILE_NAME;
END GET_CALENDAR_MANAGEMENT;

PROCEDURE PUT_CALENDAR_MANAGEMENT
   (
   p_CALENDAR_MANAGEMENT_TYPE IN VARCHAR2,
   p_CALENDAR_MANAGEMENT_ID   IN NUMBER,
   p_ENTRY_CALENDAR_ID        IN NUMBER,
   p_INCLUDE_ENTRY            IN NUMBER,
   p_PROFILE_LIBRARY_ID       IN NUMBER,
   p_PROFILE_ID               IN NUMBER,   
   p_ADJUSTMENT_OPERATION     IN VARCHAR2,
   p_ADJUSTMENT_VALUE         IN NUMBER,
   p_MONTH_JAN IN NUMBER,
   p_MONTH_FEB IN NUMBER,
   p_MONTH_MAR IN NUMBER,
   p_MONTH_APR IN NUMBER,
   p_MONTH_MAY IN NUMBER,
   p_MONTH_JUN IN NUMBER,
   p_MONTH_JUL IN NUMBER,
   p_MONTH_AUG IN NUMBER,
   p_MONTH_SEP IN NUMBER,
   p_MONTH_OCT IN NUMBER,
   p_MONTH_NOV IN NUMBER,
   p_MONTH_DEC IN NUMBER,
   p_DAY_MON   IN NUMBER,
   p_DAY_TUE   IN NUMBER,
   p_DAY_WED   IN NUMBER,
   p_DAY_THU   IN NUMBER,
   p_DAY_FRI   IN NUMBER,
   p_DAY_SAT   IN NUMBER,
   p_DAY_SUN   IN NUMBER,
   p_MESSAGE  OUT VARCHAR2
   ) AS
v_CALENDAR_MANAGEMENT_ID INTEGER := p_CALENDAR_MANAGEMENT_ID;
v_CALENDAR_NAME VARCHAR2(128);
v_PROFILE_LIBRARY_NAME VARCHAR2(128);
v_PROFILE_NAME VARCHAR2(128);
BEGIN
   IF v_CALENDAR_MANAGEMENT_ID IS NULL THEN
      SELECT CDI_CALENDAR_MANAGEMENT_ID.NEXTVAL INTO v_CALENDAR_MANAGEMENT_ID FROM DUAL;
      SELECT MAX(CALENDAR_NAME) INTO v_CALENDAR_NAME FROM CALENDAR WHERE CALENDAR_ID = p_ENTRY_CALENDAR_ID;
   END IF;
   IF p_CALENDAR_MANAGEMENT_TYPE = 'Assignment' THEN
      SELECT MAX(PROFILE_LIBRARY_NAME) INTO v_PROFILE_LIBRARY_NAME FROM LOAD_PROFILE_LIBRARY WHERE PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID;      
      SELECT NVL(MAX(PROFILE_NAME), '<All Profiles>') INTO v_PROFILE_NAME FROM LOAD_PROFILE WHERE PROFILE_ID = p_PROFILE_ID;
   END IF;     
   MERGE INTO CDI_CALENDAR_MANAGEMENT T
   USING (SELECT v_CALENDAR_MANAGEMENT_ID AS CALENDAR_MANAGEMENT_ID FROM DUAL) S
   ON (T.CALENDAR_MANAGEMENT_ID = S.CALENDAR_MANAGEMENT_ID)
   WHEN MATCHED THEN
      UPDATE SET
         T.PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID, T.PROFILE_ID = p_PROFILE_ID, T.ADJUSTMENT_OPERATION = p_ADJUSTMENT_OPERATION, T.ADJUSTMENT_VALUE = p_ADJUSTMENT_VALUE,
         T.MONTH_JAN = p_MONTH_JAN, T.MONTH_FEB = p_MONTH_FEB, T.MONTH_MAR = p_MONTH_MAR, T.MONTH_APR = p_MONTH_APR, T.MONTH_MAY = p_MONTH_MAY, T.MONTH_JUN = p_MONTH_JUN, T.MONTH_JUL = p_MONTH_JUL, T.MONTH_AUG = p_MONTH_AUG, T.MONTH_SEP = p_MONTH_SEP, T.MONTH_OCT = p_MONTH_OCT, T.MONTH_NOV = p_MONTH_NOV, T.MONTH_DEC = p_MONTH_DEC,
         T.DAY_MON = p_DAY_MON, T.DAY_TUE = p_DAY_TUE, T.DAY_WED = p_DAY_WED, T.DAY_THU = p_DAY_THU, T.DAY_FRI = p_DAY_FRI, T.DAY_SAT = p_DAY_SAT, T.DAY_SUN = p_DAY_SUN, INCLUDE_ENTRY = p_INCLUDE_ENTRY, ENTRY_DATE = SYSDATE, PROFILE_NAME = v_PROFILE_NAME, PROFILE_LIBRARY_NAME = v_PROFILE_LIBRARY_NAME
   WHEN NOT MATCHED THEN
      INSERT (CALENDAR_MANAGEMENT_ID, CALENDAR_MANAGEMENT_TYPE, CALENDAR_ID, PROFILE_LIBRARY_ID, PROFILE_ID, ADJUSTMENT_OPERATION, ADJUSTMENT_VALUE, MONTH_JAN, MONTH_FEB, MONTH_MAR, MONTH_APR, MONTH_MAY, MONTH_JUN, MONTH_JUL, MONTH_AUG, MONTH_SEP, MONTH_OCT, MONTH_NOV, MONTH_DEC, DAY_MON, DAY_TUE, DAY_WED, DAY_THU, DAY_FRI, DAY_SAT, DAY_SUN, INCLUDE_ENTRY, ENTRY_DATE, PROFILE_NAME, PROFILE_LIBRARY_NAME, CALENDAR_NAME)
      VALUES (v_CALENDAR_MANAGEMENT_ID, p_CALENDAR_MANAGEMENT_TYPE, p_ENTRY_CALENDAR_ID, p_PROFILE_LIBRARY_ID, p_PROFILE_ID, p_ADJUSTMENT_OPERATION, p_ADJUSTMENT_VALUE, p_MONTH_JAN, p_MONTH_FEB, p_MONTH_MAR, p_MONTH_APR, p_MONTH_MAY, p_MONTH_JUN, p_MONTH_JUL, p_MONTH_AUG, p_MONTH_SEP, p_MONTH_OCT, p_MONTH_NOV, p_MONTH_DEC, p_DAY_MON, p_DAY_TUE, p_DAY_WED, p_DAY_THU, p_DAY_FRI, p_DAY_SAT, p_DAY_SUN, P_INCLUDE_ENTRY, SYSDATE, v_PROFILE_NAME, v_PROFILE_LIBRARY_NAME, v_CALENDAR_NAME);
END PUT_CALENDAR_MANAGEMENT;

PROCEDURE CUT_CALENDAR_MANAGEMENT(p_CALENDAR_MANAGEMENT_ID IN NUMBER) AS
BEGIN
   DELETE CDI_CALENDAR_MANAGEMENT WHERE CALENDAR_MANAGEMENT_ID = p_CALENDAR_MANAGEMENT_ID;
END CUT_CALENDAR_MANAGEMENT;

PROCEDURE APPLY_CALENDAR_MANAGEMENT_TYPE
   (
   p_CALENDAR_ID IN NUMBER,
   p_CALENDAR_MANAGEMENT_TYPE IN VARCHAR2,
   p_APPLY_BEGIN_DATE IN DATE,
   p_APPLY_END_DATE IN DATE,
   p_APPLY_DELETE IN NUMBER,
   p_COUNT OUT PLS_INTEGER,
   p_MESSAGE OUT VARCHAR2
   ) AS
CURSOR c_TEMPLATE IS
   SELECT CALENDAR_MANAGEMENT_ID
   FROM CDI_CALENDAR_MANAGEMENT
   WHERE CALENDAR_ID = p_CALENDAR_ID
      AND INCLUDE_ENTRY = 1
      AND CALENDAR_MANAGEMENT_TYPE = p_CALENDAR_MANAGEMENT_TYPE
   ORDER BY CALENDAR_MANAGEMENT_ID;
CURSOR c_SELECT (p_CALENDAR_MANAGEMENT_ID IN NUMBER) IS
   SELECT A.PROFILE_LIBRARY_ID, A.PROFILE_ID, A.ADJUSTMENT_OPERATION, A.ADJUSTMENT_VALUE, T.LOCAL_DAY, LAG(T.LOCAL_DAY) OVER(ORDER BY T.LOCAL_DAY) AS PRIOR_DAY
   FROM CDI_CALENDAR_MANAGEMENT A
      CROSS JOIN (SELECT p_APPLY_BEGIN_DATE + (LEVEL-1) AS LOCAL_DAY FROM DUAL CONNECT BY LEVEL <= (p_APPLY_END_DATE - p_APPLY_BEGIN_DATE + 1)) T
   WHERE CALENDAR_MANAGEMENT_ID = p_CALENDAR_MANAGEMENT_ID
      AND (A.IS_MONTH_FILTER + A.IS_DAY_FILTER = 2 AND
       ((CASE WHEN A.MONTH_JAN = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'JAN' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_FEB = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'FEB' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_MAR = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'MAR' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_APR = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'APR' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_MAY = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'MAY' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_JUN = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'JUN' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_JUL = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'JUL' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_AUG = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'AUG' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_SEP = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'SEP' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_OCT = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'OCT' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_NOV = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'NOV' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_DEC = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'DEC' THEN 1 ELSE 0 END = 1)
       AND  
        (CASE WHEN A.DAY_MON   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY')  = 'MON' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_TUE   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY')  = 'TUE' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_WED   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY')  = 'WED' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_THU   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY')  = 'THU' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_FRI   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY')  = 'FRI' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_SAT   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY')  = 'SAT' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_SUN   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY')  = 'SUN' THEN 1 ELSE 0 END = 1))
      OR (A.IS_MONTH_FILTER + A.IS_DAY_FILTER = 1 AND
       ((CASE WHEN A.MONTH_JAN = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'JAN' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_FEB = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'FEB' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_MAR = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'MAR' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_APR = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'APR' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_MAY = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'MAY' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_JUN = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'JUN' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_JUL = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'JUL' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_AUG = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'AUG' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_SEP = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'SEP' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_OCT = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'OCT' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_NOV = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'NOV' THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.MONTH_DEC = 1 AND TO_CHAR(T.LOCAL_DAY,'MON') = 'DEC' THEN 1 ELSE 0 END = 1)
       OR  
        (CASE WHEN A.DAY_MON   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY') = 'MON'  THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_TUE   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY') = 'TUE'  THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_WED   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY') = 'WED'  THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_THU   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY') = 'THU'  THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_FRI   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY') = 'FRI'  THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_SAT   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY') = 'SAT'  THEN 1 ELSE 0 END = 1 OR
         CASE WHEN A.DAY_SUN   = 1 AND TO_CHAR(T.LOCAL_DAY,'DY') = 'SUN'  THEN 1 ELSE 0 END = 1))))
   ORDER BY LOCAL_DAY;
v_LOCAL_DAY DATE;
v_SYSDATE DATE := SYSDATE;
v_INDEX PLS_INTEGER := 0;
v_CALENDAR_MANAGEMENT t_CALENDAR_MANAGEMENT;
   PROCEDURE SET_CALENDAR_MANAGEMENT(p_SELECT IN c_SELECT%ROWTYPE) AS
   BEGIN
      v_INDEX := v_INDEX + 1;
      v_CALENDAR_MANAGEMENT(v_INDEX).PROFILE_LIBRARY_ID := p_SELECT.PROFILE_LIBRARY_ID;
      v_CALENDAR_MANAGEMENT(v_INDEX).PROFILE_ID := p_SELECT.PROFILE_ID;
      v_CALENDAR_MANAGEMENT(v_INDEX).BEGIN_DATE := p_SELECT.LOCAL_DAY;
      v_CALENDAR_MANAGEMENT(v_INDEX).ADJ_OP := SUBSTR(p_SELECT.ADJUSTMENT_OPERATION,1,1);
      v_CALENDAR_MANAGEMENT(v_INDEX).ADJ_VAL := p_SELECT.ADJUSTMENT_VALUE;
   END SET_CALENDAR_MANAGEMENT;
BEGIN
   p_COUNT := 0;
   IF p_APPLY_DELETE = 1 THEN
      IF p_CALENDAR_MANAGEMENT_TYPE = c_ASSIGNMENT THEN
         DELETE CALENDAR_PROFILE WHERE CALENDAR_ID = p_CALENDAR_ID AND BEGIN_DATE <= p_APPLY_END_DATE AND NVL(END_DATE, CONSTANTS.HIGH_DATE) >= p_APPLY_BEGIN_DATE;
         LOGS.LOG_INFO_DETAIL('Calendar Profile Delete Count: ' || TO_CHAR(SQL%ROWCOUNT)); 
         DELETE CALENDAR_PROFILE_LIBRARY WHERE CALENDAR_ID = p_CALENDAR_ID AND BEGIN_DATE <= p_APPLY_END_DATE AND NVL(END_DATE, CONSTANTS.HIGH_DATE) >= p_APPLY_BEGIN_DATE;
         LOGS.LOG_INFO_DETAIL('Calendar Profile Library Delete Count: ' || TO_CHAR(SQL%ROWCOUNT)); 
      ELSIF p_CALENDAR_MANAGEMENT_TYPE = c_ADJUSTMENT THEN
         DELETE CALENDAR_ADJUSTMENT WHERE CALENDAR_ID = p_CALENDAR_ID AND BEGIN_DATE <= p_APPLY_END_DATE AND NVL(END_DATE, CONSTANTS.HIGH_DATE) >= p_APPLY_BEGIN_DATE;
         LOGS.LOG_INFO_DETAIL('Calendar Adjustment Delete Count: ' || TO_CHAR(SQL%ROWCOUNT)); 
      END IF;
   END IF;
   FOR v_TEMPLATE IN c_TEMPLATE LOOP
      LOGS.LOG_INFO_DETAIL('Processing Calendar Management Id: ' || TO_CHAR(v_TEMPLATE.CALENDAR_MANAGEMENT_ID)); 
      v_CALENDAR_MANAGEMENT.DELETE;
      v_INDEX := 0;
      FOR v_SELECT IN c_SELECT(v_TEMPLATE.CALENDAR_MANAGEMENT_ID) LOOP
         LOGS.LOG_INFO_DETAIL('Local Day: ' || TO_CHAR(v_SELECT.LOCAL_DAY, c_DATE_FORMAT)); 
         v_LOCAL_DAY := v_SELECT.LOCAL_DAY;
         IF v_INDEX = 0 THEN
            SET_CALENDAR_MANAGEMENT(v_SELECT);
         END IF;   
         IF v_SELECT.LOCAL_DAY - 1 <> v_SELECT.PRIOR_DAY THEN
            v_CALENDAR_MANAGEMENT(v_INDEX).END_DATE := v_SELECT.PRIOR_DAY;
            SET_CALENDAR_MANAGEMENT(v_SELECT);
         END IF;
      END LOOP;
      IF v_INDEX > 0 THEN
         v_CALENDAR_MANAGEMENT(v_INDEX).END_DATE := v_LOCAL_DAY;
         LOGS.LOG_INFO_DETAIL('Calendar Management Count: ' || TO_CHAR(v_CALENDAR_MANAGEMENT.COUNT)); 
         FOR v_N IN 1..v_CALENDAR_MANAGEMENT.COUNT LOOP
            LOGS.LOG_INFO_DETAIL('Profile Library: ' || TO_CHAR(v_CALENDAR_MANAGEMENT(v_N).PROFILE_LIBRARY_ID) || ', Profile: ' || TO_CHAR(v_CALENDAR_MANAGEMENT(v_N).PROFILE_ID) || ', Begin: ' || TO_CHAR(v_CALENDAR_MANAGEMENT(v_N).BEGIN_DATE, c_DATE_FORMAT)  || ', End: ' || TO_CHAR(v_CALENDAR_MANAGEMENT(v_N).END_DATE, c_DATE_FORMAT));
            IF p_CALENDAR_MANAGEMENT_TYPE = c_ASSIGNMENT THEN
               IF v_CALENDAR_MANAGEMENT(v_N).PROFILE_ID IS NOT NULL THEN
                  MERGE INTO CALENDAR_PROFILE T
                  USING (SELECT p_CALENDAR_ID AS CALENDAR_ID, v_CALENDAR_MANAGEMENT(v_N).PROFILE_ID AS PROFILE_ID, v_CALENDAR_MANAGEMENT(v_N).BEGIN_DATE AS BEGIN_DATE, v_CALENDAR_MANAGEMENT(v_N).END_DATE AS END_DATE, v_SYSDATE AS ENTRY_DATE FROM DUAL) S
                  ON (T.CALENDAR_ID = S.CALENDAR_ID AND T.PROFILE_ID = S.PROFILE_ID AND T.BEGIN_DATE = S.BEGIN_DATE)
                  WHEN MATCHED THEN
                     UPDATE SET T.END_DATE = S.END_DATE, T.ENTRY_DATE = S.ENTRY_DATE
                  WHEN NOT MATCHED THEN
                     INSERT(CALENDAR_ID, PROFILE_ID, BEGIN_DATE, END_DATE, ENTRY_DATE)
                     VALUES(S.CALENDAR_ID, S.PROFILE_ID, S.BEGIN_DATE, S.END_DATE, S.ENTRY_DATE);
                  p_COUNT := p_COUNT + 1;
               ELSIF v_CALENDAR_MANAGEMENT(v_N).PROFILE_LIBRARY_ID IS NOT NULL THEN
                  MERGE INTO CALENDAR_PROFILE_LIBRARY T
                  USING (SELECT p_CALENDAR_ID AS CALENDAR_ID, v_CALENDAR_MANAGEMENT(v_N).PROFILE_LIBRARY_ID AS PROFILE_LIBRARY_ID, v_CALENDAR_MANAGEMENT(v_N).BEGIN_DATE AS BEGIN_DATE, v_CALENDAR_MANAGEMENT(v_N).END_DATE AS END_DATE, v_SYSDATE AS ENTRY_DATE FROM DUAL) S
                  ON (T.CALENDAR_ID = S.CALENDAR_ID AND T.PROFILE_LIBRARY_ID = S.PROFILE_LIBRARY_ID AND T.BEGIN_DATE = S.BEGIN_DATE)
                  WHEN MATCHED THEN
                     UPDATE SET T.END_DATE = S.END_DATE, T.ENTRY_DATE = S.ENTRY_DATE
                  WHEN NOT MATCHED THEN
                     INSERT(CALENDAR_ID, PROFILE_LIBRARY_ID, BEGIN_DATE, END_DATE, ENTRY_DATE)
                     VALUES(S.CALENDAR_ID, S.PROFILE_LIBRARY_ID, S.BEGIN_DATE, S.END_DATE, S.ENTRY_DATE);
                  p_COUNT := p_COUNT + 1;
               END IF;
            ELSIF p_CALENDAR_MANAGEMENT_TYPE = c_ADJUSTMENT THEN
               LOGS.LOG_INFO_DETAIL('Operation: ' || v_CALENDAR_MANAGEMENT(v_N).ADJ_OP || ', Value: ' || v_CALENDAR_MANAGEMENT(v_N).ADJ_VAL);
               MERGE INTO CALENDAR_ADJUSTMENT T 
               USING (SELECT p_CALENDAR_ID AS CALENDAR_ID, v_CALENDAR_MANAGEMENT(v_N).BEGIN_DATE AS BEGIN_DATE, v_CALENDAR_MANAGEMENT(v_N).END_DATE AS END_DATE, v_CALENDAR_MANAGEMENT(v_N).ADJ_OP AS ADJ_OP, v_CALENDAR_MANAGEMENT(v_N).ADJ_VAL AS ADJ_VAL, v_SYSDATE AS ENTRY_DATE FROM DUAL) S
               ON (T.CALENDAR_ID = S.CALENDAR_ID AND T.BEGIN_DATE = S.BEGIN_DATE)
               WHEN MATCHED THEN
                  UPDATE SET T.END_DATE = S.END_DATE, T.ENTRY_DATE = S.ENTRY_DATE
               WHEN NOT MATCHED THEN
                  INSERT(CALENDAR_ID, BEGIN_DATE, END_DATE, ADJ_OP, ADJ_VAL, ENTRY_DATE)
                  VALUES(S.CALENDAR_ID, S.BEGIN_DATE, S.END_DATE, S.ADJ_OP, S.ADJ_VAL, S.ENTRY_DATE);
                  p_COUNT := p_COUNT + 1;
            END IF;
         END LOOP;
      END IF;
   END LOOP;
END APPLY_CALENDAR_MANAGEMENT_TYPE;

PROCEDURE APPLY_CALENDAR_ASSIGNMENTS
   (
   p_ENTRY_CALENDAR_ID IN NUMBER,
   p_APPLY_BEGIN_DATE IN DATE,
   p_APPLY_END_DATE IN DATE,
   p_APPLY_DELETE IN NUMBER,
   p_MESSAGE OUT VARCHAR2
   ) AS
v_COUNT PLS_INTEGER := 0;
v_ENABLE_NEW_PROCESS BOOLEAN := LOGS.CURRENT_LOG_LEVEL < LOGS.c_LEVEL_INFO;
BEGIN
-- Start The Process Log --
   IF v_ENABLE_NEW_PROCESS THEN
      LOGS.START_PROCESS(c_CALENDAR_MANAGEMENT_ASSIGN);
   END IF;
   LOGS.LOG_INFO_DETAIL(c_CALENDAR_MANAGEMENT_ASSIGN);
   LOGS.LOG_INFO_DETAIL('Calendar Id: ' || TO_CHAR(p_ENTRY_CALENDAR_ID)); 
   LOGS.LOG_INFO_DETAIL('Begin Date: ' || TO_CHAR(p_APPLY_BEGIN_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO_DETAIL('End Date: ' || TO_CHAR(p_APPLY_BEGIN_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO_DETAIL('Delete Existing Assignments: ' || CASE WHEN p_APPLY_DELETE = 1 THEN c_YES ELSE c_NO END); 
-- Check That Current User Has The Assigned Privilege To Execute This Interface --
   IF NOT CAN_WRITE(c_PROFILING_DOMAIN_NAME) THEN
      LOGS.LOG_ERROR(c_NO_EXECUTION_PRIVILEGE);
      STOP_PROCESS;
      RETURN;
   END IF;
-- Initailize Interface --
   INITIALIZE_INTERFACE(c_CALENDAR_MANAGEMENT);
-- Apply Calendar Assignments --
   APPLY_CALENDAR_MANAGEMENT_TYPE(p_ENTRY_CALENDAR_ID, c_ASSIGNMENT, p_APPLY_BEGIN_DATE, p_APPLY_END_DATE, p_APPLY_DELETE, v_COUNT, p_MESSAGE);
   p_MESSAGE := 'Apply Calendar Assignments Complete, Number Of Records Posted: ' || TO_CHAR(v_COUNT);
   LOGS.LOG_INFO_DETAIL(p_MESSAGE);
   LOGS.LOG_INFO_DETAIL(c_CALENDAR_MANAGEMENT_ASSIGN || ' Complete');
-- Stop The Process Log --
   IF v_ENABLE_NEW_PROCESS THEN
      STOP_PROCESS;
   END IF;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      ROLLBACK;
      IF v_ENABLE_NEW_PROCESS THEN
         ERRS.ABORT_PROCESS;
      END IF;
END APPLY_CALENDAR_ASSIGNMENTS;

PROCEDURE APPLY_CALENDAR_ADJUSTMENTS
   (
   p_ENTRY_CALENDAR_ID IN NUMBER,
   p_APPLY_BEGIN_DATE IN DATE,
   p_APPLY_END_DATE IN DATE,
   p_APPLY_DELETE IN NUMBER,
   p_MESSAGE OUT VARCHAR2
   ) AS
v_COUNT PLS_INTEGER := 0;
v_ENABLE_NEW_PROCESS BOOLEAN := LOGS.CURRENT_LOG_LEVEL < LOGS.c_LEVEL_INFO;
BEGIN
-- Start The Process Log --
   IF v_ENABLE_NEW_PROCESS THEN
      LOGS.START_PROCESS(c_CALENDAR_MANAGEMENT_ADJUST);
   END IF;
   LOGS.LOG_INFO_DETAIL(c_CALENDAR_MANAGEMENT_ADJUST);
   LOGS.LOG_INFO_DETAIL('Calendar Id: ' || TO_CHAR(p_ENTRY_CALENDAR_ID)); 
   LOGS.LOG_INFO_DETAIL('Begin Date: ' || TO_CHAR(p_APPLY_BEGIN_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO_DETAIL('End Date: ' || TO_CHAR(p_APPLY_BEGIN_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO_DETAIL('Delete Existing Adjustments: ' || CASE WHEN p_APPLY_DELETE = 1 THEN c_YES ELSE c_NO END); 
-- Check That Current User Has The Assigned Privilege To Execute This Interface --
   IF NOT CAN_WRITE(c_PROFILING_DOMAIN_NAME) THEN
      LOGS.LOG_ERROR(c_NO_EXECUTION_PRIVILEGE);
      STOP_PROCESS;
      RETURN;
   END IF;
-- Initailize Interface --
   INITIALIZE_INTERFACE(c_CALENDAR_MANAGEMENT);
-- Apply Calendar Adjustments --
   APPLY_CALENDAR_MANAGEMENT_TYPE(p_ENTRY_CALENDAR_ID, c_ADJUSTMENT, p_APPLY_BEGIN_DATE, p_APPLY_END_DATE, p_APPLY_DELETE, v_COUNT, p_MESSAGE);
   p_MESSAGE := 'Apply Calendar Adjustments Complete, Number Of Records Posted: ' || TO_CHAR(v_COUNT);
   LOGS.LOG_INFO_DETAIL(p_MESSAGE);
   LOGS.LOG_INFO_DETAIL(c_CALENDAR_MANAGEMENT_ADJUST || ' Complete');
-- Stop The Process Log --
   IF v_ENABLE_NEW_PROCESS THEN
      STOP_PROCESS;
   END IF;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      ROLLBACK;
      IF v_ENABLE_NEW_PROCESS THEN
         ERRS.ABORT_PROCESS;
      END IF;
END APPLY_CALENDAR_ADJUSTMENTS;

PROCEDURE GENERATE_SETTLEMENT_PROFILES(p_BEGIN_DATE IN DATE DEFAULT NULL, p_END_DATE IN DATE DEFAULT NULL) AS
v_REQUEST_TYPE            CHAR(1)      := 'S';
v_REQUEST_MODE            NUMBER(9)    := GA.STANDARD_MODE;
v_SCENARIO_ID             NUMBER(9)    := GA.BASE_SCENARIO_ID;
v_MODEL_ID                NUMBER(1)    := GA.ELECTRIC_MODEL;
v_PROCESS_ID              NUMBER(12)   := NULL;
v_EDC_ID                  NUMBER(9)    := CONSTANTS.ALL_ID; 
v_ESP_ID                  NUMBER(9)    := CONSTANTS.ALL_ID;
v_ACCOUNT_ID              NUMBER(9)    := CONSTANTS.ALL_ID;
v_INPUT_AS_OF_DATE        DATE         := CONSTANTS.LOW_DATE;
v_OUTPUT_AS_OF_DATE       DATE         := CONSTANTS.LOW_DATE;
v_PROFILE_AS_OF_DATE      DATE         := CONSTANTS.LOW_DATE;
v_APPLY_USAGE_FACTOR      NUMBER(1)    := 1;
v_APPLY_UFE               NUMBER(1)    := 1;
v_APPLY_UFE_OTHER         NUMBER(1)    := 0;
v_APPLY_EXTERNAL_FORECAST NUMBER(1)    := 0;
v_REQUESTOR               VARCHAR2(32) := 'System';
v_TRACE_ON                PLS_INTEGER  := 0;
v_STATUS                  NUMBER;
v_MESSAGE                 VARCHAR2(4000);
v_BEGIN_DATE              DATE;
v_END_DATE                DATE;
v_PROFILE_BEGIN_DATE      DATE;
BEGIN
-- Start The Process Log --
   SECURITY_CONTROLS.SET_CURRENT_USER('System');
   LOGS.START_PROCESS(c_GENERATE_SETTLEMENT_PROFILES);
   LOGS.LOG_INFO(c_GENERATE_SETTLEMENT_PROFILES);

-- Initialize Interface --   
   INITIALIZE_INTERFACE(c_GENERATE_SETTLEMENT_PROFILES);

-- Set Runtime Parameters --
   v_BEGIN_DATE := NVL(p_BEGIN_DATE, TRUNC(SYSDATE) + l_BEGIN_DAY_OFFSET);
   v_END_DATE := NVL(p_END_DATE, TRUNC(SYSDATE) + l_END_DAY_OFFSET);
   IF v_END_DATE < v_BEGIN_DATE THEN
      ERRS.RAISE_BUSINESS_RULE_ERROR(' Computed End Date Is Before Computed Begin Date'); 
   END IF;
   v_PROFILE_BEGIN_DATE := v_BEGIN_DATE;
   v_TRACE_ON := CASE WHEN l_ENABLE_TRACE THEN 1 ELSE 0 END;
   
   LOGS.LOG_INFO('Begin Date: ' || TO_CHAR(v_BEGIN_DATE, c_DATE_FORMAT)); 
   LOGS.LOG_INFO('End Date: '   || TO_CHAR(v_END_DATE,   c_DATE_FORMAT)); 

-- Update The Is Create Settlement Profile Attribute That Controls What Accounts Will Have Settlement Profiles Generated --
   MERGE INTO ACCOUNT T
   USING (SELECT ACCOUNT_ID, 1 AS IS_CREATE_SETTLEMENT_PROFILE FROM ACCOUNT WHERE ACCOUNT_MODEL_OPTION = 'Aggregate' AND IS_CREATE_SETTLEMENT_PROFILE = 0) S
   ON (T.ACCOUNT_ID = S.ACCOUNT_ID)
   WHEN MATCHED THEN UPDATE SET T.IS_CREATE_SETTLEMENT_PROFILE = S.IS_CREATE_SETTLEMENT_PROFILE, ENTRY_DATE = SYSDATE;
   LOGS.LOG_INFO('Account "Is Create Settlement Profile" Attribute Updates: ' || TO_CHAR(SQL%ROWCOUNT));
   COMMIT;
   
-- Request Retail Operations To Generate Settlement Profiles --
   FS.CAST_SERVICE_REQUEST(v_REQUEST_TYPE,v_REQUEST_MODE,v_SCENARIO_ID,v_MODEL_ID,v_PROCESS_ID,v_EDC_ID,v_ESP_ID,v_ACCOUNT_ID,v_BEGIN_DATE,v_END_DATE,v_INPUT_AS_OF_DATE,v_OUTPUT_AS_OF_DATE,v_BEGIN_DATE,v_PROFILE_AS_OF_DATE,v_APPLY_USAGE_FACTOR,v_APPLY_UFE,v_APPLY_UFE_OTHER,v_APPLY_EXTERNAL_FORECAST,v_REQUESTOR,v_TRACE_ON,v_STATUS,v_MESSAGE);

-- Stop The Process Log --
   LOGS.LOG_INFO(c_GENERATE_SETTLEMENT_PROFILES || ' Complete.');
   STOP_PROCESS;

EXCEPTION
   WHEN OTHERS THEN
      ERRS.ABORT_PROCESS;
END GENERATE_SETTLEMENT_PROFILES;

PROCEDURE FILTER_ACCOUNT(p_ACCOUNT_FILTER IN VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT ACCOUNT_NAME AS FILTER_ACCOUNT_NAME, ACCOUNT_ID AS FILTER_ACCOUNT_ID
      FROM ACCOUNT A
      WHERE UPPER(ACCOUNT_NAME) LIKE UPPER(NVL(p_ACCOUNT_FILTER,'%'))
      ORDER BY ACCOUNT_NAME;
END FILTER_ACCOUNT;

PROCEDURE GET_PROFILE_ACCOUNT_REFERENCE(p_PROFILE_ID IN NUMBER, p_FILTER_ACCOUNT_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT ACCOUNT_NAME, PROFILE_NAME, IS_ACCOUNT_REFERENCE, REFERENCE_PROFILE_ID, REFERENCE_ACCOUNT_ID,
         '<html><font color=' || CASE WHEN X.IS_ACCOUNT_REFERENCE = 1 THEN 'green' ELSE 'red' END || '><b>' || ACCOUNT_NAME || '</html>' AS DISPLAY_ACCOUNT_NAME
      FROM
         (SELECT B.ACCOUNT_NAME,
            A.PROFILE_NAME,
            CASE WHEN A.PROFILE_ACCOUNT_REF = TO_CHAR(B.ACCOUNT_ID) THEN 1 ELSE 0 END AS IS_ACCOUNT_REFERENCE,
            A.PROFILE_ID AS REFERENCE_PROFILE_ID,
            B.ACCOUNT_ID AS REFERENCE_ACCOUNT_ID
         FROM LOAD_PROFILE A
            CROSS JOIN (SELECT ACCOUNT_ID, ACCOUNT_NAME FROM ACCOUNT WHERE ACCOUNT_ID = p_FILTER_ACCOUNT_ID) B
         WHERE A.PROFILE_ID = p_PROFILE_ID) X;
END GET_PROFILE_ACCOUNT_REFERENCE;

PROCEDURE PUT_PROFILE_ACCOUNT_REFERENCE
   (
   p_PROFILE_NAME IN VARCHAR2,
   p_ACCOUNT_NAME IN VARCHAR2,
   p_REFERENCE_PROFILE_ID IN NUMBER,
   p_REFERENCE_ACCOUNT_ID IN NUMBER,
   p_IS_ACCOUNT_REFERENCE IN NUMBER,
   p_MESSAGE OUT VARCHAR2
   ) AS
BEGIN
   UPDATE LOAD_PROFILE SET PROFILE_ACCOUNT_REF = CASE WHEN p_IS_ACCOUNT_REFERENCE = 1 THEN TO_CHAR(p_REFERENCE_ACCOUNT_ID) ELSE '?' END
   WHERE PROFILE_ID = p_REFERENCE_PROFILE_ID;
   p_MESSAGE := 'Profile "' || p_PROFILE_NAME || CASE WHEN p_IS_ACCOUNT_REFERENCE = 1 THEN '" Assigned To ' ELSE '" Unassigned From ' END || ' Account "' || p_ACCOUNT_NAME || '".';
END PUT_PROFILE_ACCOUNT_REFERENCE;

PROCEDURE GET_LOCAL_PROFILE(p_CURSOR OUT GA.REFCURSOR) AS
v_COUNT PLS_INTEGER;
BEGIN
   SELECT COUNT(*) INTO v_COUNT FROM CDI_LOCAL_PROFILE_POINT;
   IF v_COUNT = 0 THEN
      OPEN p_CURSOR FOR SELECT '<html><font color=red>Run Data Exchange To Import</html>' AS FILTER_PROFILE_IDENTIFIER FROM DUAL;
   ELSE
      OPEN p_CURSOR FOR
         SELECT DISTINCT PROFILE_IDENTIFIER AS FILTER_PROFILE_IDENTIFIER
         FROM CDI_LOCAL_PROFILE_POINT
         ORDER BY 1;
   END IF;
END GET_LOCAL_PROFILE;

PROCEDURE GET_SEASON_DAY_TYPE(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT TEMPLATE_NAME AS SEASON_DAY_TYPE_NAME, TEMPLATE_ID AS SEASON_DAY_TYPE_ID
      FROM TEMPLATE
      WHERE TEMPLATE_ID > 0
         AND IS_DAY_TYPE = 1
      ORDER BY TEMPLATE_NAME;
END GET_SEASON_DAY_TYPE;

PROCEDURE GET_WEATHER_STATION(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT STATION_NAME, STATION_ID
      FROM WEATHER_STATION
      WHERE STATION_ID > 0
      ORDER BY STATION_NAME;
END GET_WEATHER_STATION;

PROCEDURE GET_PROFILE_LIBRARY(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT DISTINCT PROFILE_LIBRARY_NAME, PROFILE_LIBRARY_ID
      FROM LOAD_PROFILE_LIBRARY
      ORDER BY PROFILE_LIBRARY_NAME;
END GET_PROFILE_LIBRARY;

PROCEDURE GET_LOCAL_PROFILE_POINT
   (
   p_PROFILE_IDENTIFIER IN VARCHAR2,
   p_STATION_ID IN NUMBER,
   p_CURSOR OUT GA.REFCURSOR
   ) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT TO_CHAR(A.PROFILE_POINT_DATE, c_DATE_TIME_FORMAT) AS DISPLAY_DATE, A.PROFILE_POINT_VALUE
      FROM CDI_LOCAL_PROFILE_POINT A
      WHERE A.PROFILE_IDENTIFIER = p_PROFILE_IDENTIFIER
      ORDER BY A.PROFILE_POINT_DATE;
END GET_LOCAL_PROFILE_POINT;

FUNCTION WIND_CHILL(p_T IN NUMBER, p_V IN NUMBER) RETURN NUMBER AS
-- Wind Chill (deg F) = 35.74 + 0.6215T - 35.75(V**0.16) + 0.4275T(V**0.16) Where: T = Air Temperature (degrees F) and V = Wind Speed (mph)
-- Note: Wind Chill Temperature is currently only defined for temperatures at or below 50 degrees F and Wind speeds above 3 mph, per NWS (http://www.nws.noaa.gov/om/windchill)
BEGIN
   RETURN CASE WHEN p_T <= 50 AND p_V > 3 THEN ROUND(35.74 + (0.6215 * p_T) - (35.75 * POWER(p_V,0.16)) + (0.4275 * p_T * POWER(p_V,0.16))) ELSE p_T END;
END WIND_CHILL;

FUNCTION HEAT_INDEX(p_T IN NUMBER, p_RH IN NUMBER) RETURN NUMBER AS
-- The computation of the heat index is a refinement of a result obtained by multiple regression analysis carried out by Lans P. Rothfusz and described in a 1990 National Weather Service (NWS) Technical Attachment (SR 90-23).
-- The regression equation of Rothfusz is
--    HI = -42.379 + 2.04901523*T + 10.14333127*RH - .22475541*T*RH - .00683783*T*T - .05481717*RH*RH + .00122874*T*T*RH + .00085282*T*RH*RH - .00000199*T*T*RH*RH 
--    where T is temperature in degrees F and RH is relative humidity in percent.  HI is the heat index expressed as an apparent temperature in degrees F.
--
-- If the RH is less than 13% and the temperature is between 80 and 112 degrees F, then the following adjustment is subtracted from HI:
--   Adjustment = [(13-RH)/4]*SQRT{[17-ABS(T-95.)]/17} 
-- If the RH is greater than 85% and the temperature is between 80 and 87 degrees F, then the following adjustment is added to HI:
--   Adjustment = [(RH-85)/10] * [(87-T)/5]
--
-- The Rothfusz regression is not appropriate when conditions of temperature and humidity warrant a heat index value below about 80 degrees F. In those cases, a simpler formula is applied to calculate values consistent with Steadman's results:
--    HI = 0.5 * {T + 61.0 + [(T-68.0)*1.2] + (RH*0.094)}
-- In practice, the simple formula is computed first and the result averaged with the temperature.
v_HI NUMBER;
BEGIN
   IF p_T >= 80 THEN
      v_HI := -42.379 + (2.04901523*p_T) + (10.14333127*p_RH) - (.22475541*p_T*p_RH) - (.00683783*p_T*p_T) - (.05481717*p_RH*p_RH) + (.00122874*p_T*p_T*p_RH) + (.00085282*p_T*p_RH*p_RH) - (.00000199*p_T*p_T*p_RH*p_RH);
      IF p_RH < 13 AND p_T BETWEEN 80 AND 112 THEN
         v_HI := v_HI - (((13-p_RH)/4) * SQRT((17-ABS(p_T-95.))/17)); 
      ELSIF p_RH > 85 AND p_T BETWEEN 80 AND 87 THEN
         v_HI := v_HI + (((p_RH-85)/10) * ((87-p_T)/5));
      END IF;
   ELSE
      v_HI := ((0.5 * (p_T + 61.0 + ((p_T-68.0)*1.2) + (p_RH*0.094))) + p_T) / 2;
   END IF;
   RETURN v_HI;
END HEAT_INDEX;

PROCEDURE POST_TEMPERATURE_INDEX
   (
   p_SEASON_DAY_TYPE_ID IN NUMBER,
   p_STATION_ID IN NUMBER,
   p_HEAT_INDEX IN NUMBER,
   p_WIND_CHILL IN NUMBER
   ) AS
CURSOR c_SELECT IS
   SELECT X.*, ROWID FROM CDI_LOCAL_PROFILE_POINT X WHERE TEMPERATURE IS NOT NULL;
v_ROWID ROWID;
v_WEATHER_INDEX NUMBER;
BEGIN
   UPDATE CDI_LOCAL_PROFILE_POINT SET PROFILE_POINT_SELECTED = NULL, TEMPERATURE = NULL, HUMIDITY = NULL, WIND_SPEED = NULL, WEATHER_INDEX = NULL;
   COMMIT;
   UPDATE CDI_LOCAL_PROFILE_POINT X SET
      PROFILE_POINT_SELECTED = 1,
      TEMPERATURE = (SELECT PARAMETER_VAL FROM STATION_PARAMETER_VALUE WHERE STATION_ID = p_STATION_ID AND PARAMETER_ID = (SELECT PARAMETER_ID FROM WEATHER_PARAMETER WHERE PARAMETER_NAME = 'Temperature') AND PARAMETER_CODE = CONSTANTS.CODE_ACTUAL AND PARAMETER_DATE = X.PROFILE_POINT_CUT_DATE),
      HUMIDITY    = CASE WHEN p_HEAT_INDEX = 1 THEN (SELECT PARAMETER_VAL FROM STATION_PARAMETER_VALUE WHERE STATION_ID = p_STATION_ID AND PARAMETER_ID = (SELECT PARAMETER_ID FROM WEATHER_PARAMETER WHERE PARAMETER_NAME = 'Humidity')   AND PARAMETER_CODE = CONSTANTS.CODE_ACTUAL AND PARAMETER_DATE = X.PROFILE_POINT_CUT_DATE) ELSE NULL END,
      WIND_SPEED  = CASE WHEN p_WIND_CHILL = 1 THEN (SELECT PARAMETER_VAL FROM STATION_PARAMETER_VALUE WHERE STATION_ID = p_STATION_ID AND PARAMETER_ID = (SELECT PARAMETER_ID FROM WEATHER_PARAMETER WHERE PARAMETER_NAME = 'Wind Speed') AND PARAMETER_CODE = CONSTANTS.CODE_ACTUAL AND PARAMETER_DATE = X.PROFILE_POINT_CUT_DATE) ELSE NULL END
   WHERE X.PROFILE_POINT_DATE IN
      (SELECT C.PROFILE_POINT_DATE
      FROM SEASON_TEMPLATE A
         JOIN SEASON_DATES B ON B.SEASON_ID = A.SEASON_ID
         JOIN CDI_LOCAL_PROFILE_POINT C ON C.PROFILE_POINT_DATE BETWEEN B.BEGIN_DATE AND B.END_DATE AND C.PROFILE_POINT_DAY_NAME = A.DAY_NAME
      WHERE A.TEMPLATE_ID = p_SEASON_DAY_TYPE_ID);
   COMMIT;
   FOR v_SELECT IN c_SELECT LOOP
      v_ROWID := v_SELECT.ROWID;
      IF v_SELECT.TEMPERATURE >= 80 AND p_HEAT_INDEX = 1 THEN
         v_WEATHER_INDEX := HEAT_INDEX(v_SELECT.TEMPERATURE, NVL(v_SELECT.HUMIDITY,0)); 
      ELSIF v_SELECT.TEMPERATURE < 50 AND p_WIND_CHILL = 1 THEN
         v_WEATHER_INDEX := WIND_CHILL(v_SELECT.TEMPERATURE, NVL(v_SELECT.WIND_SPEED,0)); 
      ELSE
         v_WEATHER_INDEX := v_SELECT.TEMPERATURE; 
      END IF;
      UPDATE CDI_LOCAL_PROFILE_POINT SET WEATHER_INDEX = ROUND(v_WEATHER_INDEX) WHERE ROWID = v_ROWID;
   END LOOP;
   COMMIT;
END POST_TEMPERATURE_INDEX;

PROCEDURE MVAR_REG_WEATHER_INDEX_PROFILE
   (
   p_SEASON_DAY_TYPE_ID IN NUMBER,
   p_STATION_ID IN NUMBER,
   p_CALC_METHOD IN NUMBER,
   p_EXCLUDE_OUTLIERS IN NUMBER
   ) AS
CURSOR c_SELECT IS
   SELECT PROFILE_POINT_HOUR, WEATHER_INDEX, AVG(PROFILE_POINT_VALUE) AS PROFILE_POINT_VALUE
   FROM CDI_LOCAL_PROFILE_POINT
   WHERE PROFILE_POINT_SELECTED = 1
   GROUP BY PROFILE_POINT_HOUR, WEATHER_INDEX;
v_N NUMBER := 0;
v_M NUMBER := 2;
v_X GA.NUMBER_TABLE;
v_Y GA.NUMBER_TABLE;
v_B GA.NUMBER_TABLE;
v_T GA.NUMBER_TABLE;
v_R NUMBER;
v_TSTAT_CRITICAL NUMBER;
v_ELAPSED_TIME PLS_INTEGER;
v_ACTUAL NUMBER;
v_FORECAST NUMBER;
v_ERROR NUMBER;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      v_N := v_N + 1;
      v_X(v_X.COUNT+1) := v_SELECT.PROFILE_POINT_HOUR;
      v_X(v_X.COUNT+1) := 1; -- Constant --
      v_X(v_X.COUNT+1) := v_SELECT.WEATHER_INDEX;
      v_Y(v_X.COUNT+1) := v_SELECT.PROFILE_POINT_VALUE;
   END LOOP;
-- Call The Regression --
   UT.MVAR_REG(
      p_N => v_N, -- Number Of Observations
      p_M => v_M, -- Number Of Independent Variables
      p_X => v_X, -- Independent Variable(X) Values (N,M) Array
      p_Y => v_Y, -- Dependent Variable(Y) Values
      p_B => v_B, -- X Coefficients
      p_T => v_T, -- T Statistic
      p_R => v_R, -- R2 Statistic
      p_TSTAT_CRITICAL => v_TSTAT_CRITICAL, -- T Statistic Critical
      p_ELAPSED_TIME   => v_ELAPSED_TIME);
      
   FOR v_INDEX IN 1..v_N LOOP
      v_ACTUAL := v_Y(v_INDEX);
      v_FORECAST := v_B(1) + v_X((v_INDEX-1) * v_M + 2) * v_B(2) + v_X((v_INDEX-1) * v_M + 3) * v_B(3);
      v_ERROR := GREATEST(v_FORECAST,0) - v_ACTUAL;
   END LOOP;

END MVAR_REG_WEATHER_INDEX_PROFILE;

PROCEDURE RUN_CALC_WEATHER_INDEX_PROFILE
   (
   p_SEASON_DAY_TYPE_NAME IN VARCHAR2,
   p_SEASON_DAY_TYPE_ID IN NUMBER,
   p_STATION_NAME IN VARCHAR2,
   p_STATION_ID IN NUMBER,
   p_HEAT_INDEX IN NUMBER,
   p_WIND_CHILL IN NUMBER,
   p_CALC_METHOD IN NUMBER,
   p_EXCLUDE_OUTLIERS IN NUMBER,
   p_PROFILE_LIBRARY_NAME IN VARCHAR2,
   p_PROFILE_LIBRARY_ID IN NUMBER,
   p_PROFILE_NAME IN VARCHAR2,
   p_MESSAGE OUT VARCHAR2
   ) AS
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_CALC_WEATHER_INDEX_PROFILE);
   LOGS.LOG_INFO(c_CALC_WEATHER_INDEX_PROFILE);
   LOGS.LOG_INFO('Season Day Type: ' || p_SEASON_DAY_TYPE_NAME); 
   LOGS.LOG_INFO('Station: '         || p_STATION_NAME); 
   LOGS.LOG_INFO('Heat Index: '      || CASE WHEN p_HEAT_INDEX = 1 THEN c_YES ELSE c_NO END); 
   LOGS.LOG_INFO('Wind Speed: '      || CASE WHEN p_WIND_CHILL = 1 THEN c_YES ELSE c_NO END); 
   LOGS.LOG_INFO('Calc Method: '     || TO_CHAR(p_CALC_METHOD)); 
   LOGS.LOG_INFO('Profile Library: ' || p_PROFILE_LIBRARY_NAME); 
   LOGS.LOG_INFO('Profile Name: '    || p_PROFILE_NAME); 

-- Check That Current User Has The Assigned Privilege To Execute This Interface --
   IF NOT CAN_WRITE(c_PROFILING_DOMAIN_NAME) THEN
      LOGS.LOG_ERROR(c_NO_EXECUTION_PRIVILEGE);
      STOP_PROCESS;
      RETURN;
   END IF;

-- Initialize Interface --   
   INITIALIZE_INTERFACE(c_CALC_WEATHER_INDEX_PROFILE);

-- Prepare The Associated Weather Parameters For This Index --   
   POST_TEMPERATURE_INDEX(p_SEASON_DAY_TYPE_ID, p_STATION_ID, p_HEAT_INDEX, p_WIND_CHILL);

-- Stop The Process Log --
   LOGS.LOG_INFO(c_CALC_WEATHER_INDEX_PROFILE || ' Complete');
   STOP_PROCESS;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      ROLLBACK;
      ERRS.ABORT_PROCESS;
END RUN_CALC_WEATHER_INDEX_PROFILE;

PROCEDURE EXPORT_LOAD_PROFILE_LIST(p_PROFILE_TYPE IN VARCHAR2, p_CURSOR OUT GA.REFCURSOR, p_LABEL OUT VARCHAR2) AS
BEGIN
   IF p_PROFILE_TYPE = 'Typical Day' THEN
      p_LABEL := 'Typical Day Library';
      OPEN p_CURSOR FOR
         SELECT PROFILE_LIBRARY_NAME
         FROM LOAD_PROFILE_LIBRARY WHERE PROFILE_LIBRARY_ID IN (SELECT DISTINCT PROFILE_LIBRARY_ID FROM LOAD_PROFILE WHERE PROFILE_TYPE = 'Typical Day')
         ORDER BY PROFILE_LIBRARY_NAME;
   ELSE
      p_LABEL := 'Profile Type Library';
      OPEN p_CURSOR FOR SELECT 'Unknown' FROM DUAL;
   END IF;
END EXPORT_LOAD_PROFILE_LIST;

PROCEDURE EXPORT_LOAD_PROFILE
   (
   p_PROFILE_TYPE           IN VARCHAR2,  
   p_ENTITY_LIST            IN VARCHAR2,
   p_ENTITY_LIST_DELIMITER  IN VARCHAR2,
   p_FILE                  OUT CLOB,
   p_STATUS                OUT NUMBER,
   p_MESSAGE               OUT VARCHAR2
   ) AS
CURSOR c_SELECT(p_PROFILE_LIBRARY_NAME IN VARCHAR2) IS
   SELECT PROFILE_TYPE||','||PROFILE_LIBRARY_NAME||','||PROFILE_NAME||','||HR01||','||HR02||','||HR03||','||HR04||','||HR05||','||HR06||','||HR07||','||HR08||','||HR09||','||HR10||','||HR11||','||HR12||','||HR13||','||HR14||','||HR15||','||HR16||','||HR17||','||HR18||','||HR19||','||HR20||','||HR21||','||HR22||','||HR23||','||HR24||c_CRLF AS CSV_FORMAT
   FROM TYPICAL_DAY_PROFILE_EXPORT$
   WHERE PROFILE_LIBRARY_NAME = p_PROFILE_LIBRARY_NAME
   ORDER BY PROFILE_TYPE, PROFILE_LIBRARY_NAME, PROFILE_NAME;
v_TOKENS PARSE_UTIL.STRING_TABLE;
v_CONTAINER CLOB;
v_COUNT PLS_INTEGER;
v_TOTAL PLS_INTEGER := 0;
BEGIN
-- Start The Process Log --
   SECURITY_CONTROLS.SET_CURRENT_USER(SECURITY_CONTROLS.c_SUSER_SYSTEM);
   LOGS.START_PROCESS(c_EXPORT_LOAD_PROFILE);
   LOGS.LOG_INFO('Profile Type: ' || p_PROFILE_TYPE);
   p_MESSAGE := '';
   p_STATUS := 0;
   DBMS_LOB.CREATETEMPORARY(v_CONTAINER, TRUE);
   DBMS_LOB.OPEN(v_CONTAINER, DBMS_LOB.LOB_READWRITE);
   PARSE_UTIL.PARSE_DELIMITED_STRING(p_ENTITY_LIST, p_ENTITY_LIST_DELIMITER, v_TOKENS);
   FOR v_INDEX IN v_TOKENS.FIRST..v_TOKENS.LAST LOOP
      v_COUNT := 0;
      FOR v_SELECT IN c_SELECT(v_TOKENS(v_INDEX)) LOOP
         DBMS_LOB.WRITEAPPEND(v_CONTAINER, LENGTH(v_SELECT.CSV_FORMAT), v_SELECT.CSV_FORMAT);
         v_COUNT := v_COUNT + 1;
      END LOOP;
      LOGS.LOG_INFO('Load Profile Library: "' || v_TOKENS(v_INDEX) || '", Record Export Count: ' || TO_CHAR(v_COUNT));
      v_TOTAL := v_TOTAL + v_COUNT;  
   END LOOP;
   DBMS_LOB.CLOSE(v_CONTAINER);
   DELETE CLOB_STAGING WHERE CLOB_IDENT = c_CONTAINER_IDENT;
   INSERT INTO CLOB_STAGING(CLOB_IDENT, CLOB_VAL) VALUES(c_CONTAINER_IDENT, v_CONTAINER);
   COMMIT;
   SELECT CLOB_VAL INTO p_FILE FROM CLOB_STAGING WHERE CLOB_IDENT = c_CONTAINER_IDENT;
   DBMS_LOB.FREETEMPORARY(v_CONTAINER);
   p_MESSAGE := 'Load Profile Export Complete. Number Of Records Written To File: ' || TO_CHAR(v_TOTAL);
-- Stop The Process Log --
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ERRS.ABORT_PROCESS;
END EXPORT_LOAD_PROFILE;

PROCEDURE GET_PROFILE_LIBRARY_ENTITY(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT PROFILE_LIBRARY_ID, PROFILE_LIBRARY_NAME, PROFILE_LIBRARY_ALIAS, PROFILE_LIBRARY_DESC, ENTRY_DATE
      FROM LOAD_PROFILE_LIBRARY
      ORDER BY PROFILE_LIBRARY_NAME;
END GET_PROFILE_LIBRARY_ENTITY;

PROCEDURE PUT_PROFILE_LIBRARY_ENTITY
   (
   p_PROFILE_LIBRARY_ID    IN NUMBER,
   p_PROFILE_LIBRARY_NAME  IN VARCHAR2,
   p_PROFILE_LIBRARY_ALIAS IN VARCHAR2,
   p_PROFILE_LIBRARY_DESC  IN VARCHAR2
   ) AS
v_OID PLS_INTEGER;
BEGIN
   IO.PUT_LOAD_PROFILE_LIBRARY( 
      o_OID => v_OID,
      p_PROFILE_LIBRARY_NAME  => p_PROFILE_LIBRARY_NAME,
      p_PROFILE_LIBRARY_ALIAS => p_PROFILE_LIBRARY_ALIAS,
      p_PROFILE_LIBRARY_DESC  => p_PROFILE_LIBRARY_DESC,
      p_PROFILE_LIBRARY_ID    => p_PROFILE_LIBRARY_ID);
END PUT_PROFILE_LIBRARY_ENTITY;

PROCEDURE CUT_PROFILE_LIBRARY_ENTITY(p_PROFILE_LIBRARY_ID IN NUMBER) AS
BEGIN
   DELETE LOAD_PROFILE_LIBRARY WHERE PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID;
END CUT_PROFILE_LIBRARY_ENTITY;

PROCEDURE GET_PROFILE_LIBRARY_ASSIGNMENT(p_PROFILE_LIBRARY_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT PROFILE_LIBRARY_ID, PROFILE_ID, PROFILE_NAME, PROFILE_ALIAS, PROFILE_DESC, PROFILE_TYPE, PROFILE_OPERATION, PROFILE_ORIGIN, PROFILE_RATE_CLASS, PROFILE_DAY_TYPE, PROFILE_ACCOUNT_REF, PROFILE_METER_REF, PROFILE_SIC_CODE, PROFILE_SEASON, PROFILE_SYSTEM_LOAD, PROFILE_ADJUSTMENT_OPTION, PROFILE_STATION_ID, PROFILE_TEMPLATE_ID, PROFILE_SOURCE_BEGIN_DATE, PROFILE_SOURCE_END_DATE, PROFILE_SOURCE_ID, PROFILE_INTERVAL, PROFILE_SOURCE_VERSION, PROFILE_BREAKPOINT_INTERVAL, IS_EXTERNAL_PROFILE, ENTRY_DATE
      FROM LOAD_PROFILE
      WHERE PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
      ORDER BY PROFILE_NAME;
END GET_PROFILE_LIBRARY_ASSIGNMENT;

PROCEDURE PUT_PROFILE_LIBRARY_ASSIGNMENT(p_PROFILE_LIBRARY_ID IN NUMBER, p_PROFILE_ID IN NUMBER) AS
BEGIN
   UPDATE LOAD_PROFILE SET PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID
   WHERE PROFILE_ID = p_PROFILE_ID;
END PUT_PROFILE_LIBRARY_ASSIGNMENT;

PROCEDURE CUT_PROFILE_LIBRARY_ASSIGNMENT(p_PROFILE_ID IN NUMBER) AS
BEGIN
   UPDATE LOAD_PROFILE SET PROFILE_LIBRARY_ID = CONSTANTS.NOT_ASSIGNED
   WHERE PROFILE_ID = p_PROFILE_ID;
END CUT_PROFILE_LIBRARY_ASSIGNMENT;

END CDI_LOAD_PROFILE_UI;
/
