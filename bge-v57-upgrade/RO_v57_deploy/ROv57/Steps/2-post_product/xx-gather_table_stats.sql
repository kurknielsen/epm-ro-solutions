CREATE OR REPLACE PROCEDURE X_GATHER_TABLE_STATS AS
CURSOR c_SELECT IS SELECT TABLE_NAME, NVL(NUM_ROWS,0) "NUM_ROWS" FROM USER_TABLES ORDER BY NUM_ROWS DESC;
v_SQLERRM VARCHAR2(4000);
v_ENTRY_ID PLS_INTEGER := 0;
BEGIN
   CDI_POST_TO_TRACE('X_GATHER_TABLE_STATS', 'ENTRY', TRUE);
   FOR v_SELECT IN c_SELECT LOOP
      v_ENTRY_ID := v_ENTRY_ID + 1;
      CDI_POST_TO_TRACE(v_SELECT.TABLE_NAME, TO_CHAR(v_SELECT.NUM_ROWS));
      BEGIN
         DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => USER, TABNAME => v_SELECT.TABLE_NAME, ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, BLOCK_SAMPLE => TRUE, DEGREE => NULL, CASCADE => TRUE);
      EXCEPTION
         WHEN OTHERS THEN
            v_SQLERRM := SQLERRM;
            CDI_POST_TO_TRACE(v_SELECT.TABLE_NAME, v_SQLERRM);
      END;
   END LOOP;
   CDI_POST_TO_TRACE('X_GATHER_TABLE_STATS', 'EXIT');
END X_GATHER_TABLE_STATS;
/

BEGIN DBMS_SCHEDULER.CREATE_JOB(DBMS_SCHEDULER.GENERATE_JOB_NAME('STATS_JOB#'), 'PLSQL_BLOCK', 'BEGIN X_GATHER_TABLE_STATS; END;', START_DATE => NULL, ENABLED => TRUE, AUTO_DROP => TRUE, COMMENTS => 'Job Initiated By ' || USER);END;

SELECT * FROM USER_SCHEDULER_RUNNING_JOBS WHERE JOB_NAME LIKE 'STATS_JOB#%';

SELECT * FROM USER_SCHEDULER_JOB_RUN_DETAILS WHERE JOB_NAME LIKE 'STATS_JOB#%';

SELECT * FROM CDI_TRACE ORDER BY 1;

SELECT COUNT(*) FROM CDI_TRACE;

SELECT COUNT(*) FROM USER_TABLES;

SELECT TABLE_NAME, NVL(NUM_ROWS,0) AS NUM_ROWS FROM USER_TABLES ORDER BY NUM_ROWS DESC;

