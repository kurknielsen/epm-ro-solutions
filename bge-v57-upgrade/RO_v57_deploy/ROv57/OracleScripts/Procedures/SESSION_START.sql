CREATE OR REPLACE PROCEDURE SESSION_START IS
-- Revision: $Revision: 1.6 $
v_CURRENT_USER 	VARCHAR2(64);
v_LOGGED_ON		BOOLEAN := FALSE;
v_JOB_NAME      VARCHAR2(64);
v_JOB_USER_ID   APPLICATION_USER.USER_ID%TYPE;
v_IS_JOB        BOOLEAN;

v_SID NUMBER;
v_INSTANCE NUMBER;
v_AUDSID NUMBER; 
BEGIN
	DBMS_SESSION.SET_IDENTIFIER('VENTYX EMO');

	--If this is a dbms_scheduler job, the BG_JOB_ID will be non-null.
	v_IS_JOB := SYS_CONTEXT('USERENV','BG_JOB_ID') IS NOT NULL;

	IF v_IS_JOB THEN
	
		v_SID := SYS_CONTEXT('USERENV', 'SID');
		v_INSTANCE := SYS_CONTEXT('USERENV', 'INSTANCE');
		v_AUDSID := SYS_CONTEXT('USERENV', 'SESSIONID');
		
		--See if we can get the job name for this job.
		SELECT MAX(RJ.JOB_NAME)
		INTO v_JOB_NAME
		FROM USER_SCHEDULER_RUNNING_JOBS RJ, V$SESSION S
		WHERE S.SID = v_SID
			AND S.AUDSID = v_AUDSID
			AND RJ.SESSION_ID = S.SID
			AND RJ.SLAVE_OS_PROCESS_ID = S.PROCESS
			AND RJ.RUNNING_INSTANCE = v_INSTANCE;
			
		--If we can't get the name, it hasn't been initialized yet.  Just return,
		--  and the job will call SESSION_START again, at which time this job will be
		--  available in the running jobs view.
		IF v_JOB_NAME IS NULL THEN
			RETURN;
		ELSE
			-- Look up the USER_ID in the JOB_DATA table.
			SELECT MAX(J.USER_ID) INTO v_JOB_USER_ID FROM JOB_DATA J WHERE J.JOB_NAME = v_JOB_NAME;
			
			IF v_JOB_USER_ID IS NOT NULL THEN
				SELECT MAX(USER_NAME) INTO v_CURRENT_USER FROM APPLICATION_USER WHERE USER_ID = v_JOB_USER_ID;
			END IF;			
		END IF;
	ELSIF GA.DIRECT_ORACLE_LOGIN_MODE THEN
		v_CURRENT_USER := USER;
	ELSE
		v_CURRENT_USER := SYS_CONTEXT('USERENV','OS_USER');
	END IF;

	SECURITY_CONTROLS.SET_CURRENT_USER(v_CURRENT_USER);
	v_LOGGED_ON := TRUE;
	
	--Init the System Session table for this session.
	MERGE INTO SYSTEM_SESSION TRG
		USING (SELECT SYS_CONTEXT('USERENV', 'SID') SESSION_SID, SYS_CONTEXT('USERENV', 'SESSIONID') SESSION_AUDSID FROM DUAL) SRC
		ON (TRG.SESSION_SID = SRC.SESSION_SID AND TRG.SESSION_AUDSID = SRC.SESSION_AUDSID )
	WHEN MATCHED THEN UPDATE SET 
		CURRENT_PROCESS_ID = NULL,
		LOG_LEVEL = NULL,
		KEEP_EVENT_DETAIL = NULL,
		PERSIST_TRACE = NULL
	WHEN NOT MATCHED THEN
		INSERT (SESSION_SID, SESSION_AUDSID)
		VALUES (SRC.SESSION_SID, SRC.SESSION_AUDSID);

	IF GA.EVENT_LOG_FOR_LOGON_LOGOFF THEN
		IF SECURITY_CONTROLS.CURRENT_USER IS NULL THEN
			LOGS.LOG_NOTICE(v_CURRENT_USER||' has attempted to log on - session is unauthenticated');
		ELSE
			LOGS.LOG_INFO(v_CURRENT_USER||' has logged on');
		END IF;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		IF GA.EVENT_LOG_FOR_LOGON_LOGOFF AND v_LOGGED_ON THEN
			ERRS.LOG_AND_CONTINUE(v_CURRENT_USER||' was logged on prior to exception');
		ELSE
			ERRS.LOG_AND_CONTINUE(v_CURRENT_USER||' could not be logged on');
		END IF;

END SESSION_START;
/
