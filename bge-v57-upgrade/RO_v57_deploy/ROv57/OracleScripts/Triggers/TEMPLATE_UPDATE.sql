CREATE OR REPLACE TRIGGER TEMPLATE_UPDATE
  AFTER UPDATE ON TEMPLATE
  FOR EACH ROW
DECLARE
  
BEGIN
  IF :NEW.IS_DAY_TYPE = 0 AND 
  	:NEW.IS_DST_OBSERVANT <> :OLD.IS_DST_OBSERVANT THEN
	
	-- GOING TO OBSERVANT TO NON-OBSERVANT, SET ALL DST_TYPES TO 'NONE' PERIOD
	IF :NEW.IS_DST_OBSERVANT = 0 THEN
	
		MERGE INTO TEMPLATE_DATES TD
		USING (SELECT TD.TIME_ZONE,
					TD.TEMPLATE_ID,
					TD.HOLIDAY_SET_ID,
					TD.LOCAL_DATE,
					TO_CUT(TD.LOCAL_DATE, STD_TIME_ZONE(TD.TIME_ZONE)) AS CUT_BEGIN_DATE,
					TO_CUT(TD.LOCAL_DATE + 1, STD_TIME_ZONE(TD.TIME_ZONE)) AS CUT_END_DATE,
					TGT.DAY_TYPE_ID AS NEW_DAY_TYPE_ID
				FROM TEMPLATE_DATES TD,
					TEMPLATE_DAY_TYPE SRC,
					TEMPLATE_DAY_TYPE TGT
				WHERE TD.TEMPLATE_ID = :NEW.TEMPLATE_ID
					AND SUBSTR(TD.TIME_ZONE, 2, 1) = 'D' -- ONLY BOTHER FOR DST TIME ZONES
					AND SRC.DAY_TYPE_ID = TD.DAY_TYPE_ID
					AND TGT.TEMPLATE_ID = SRC.TEMPLATE_ID
					AND TGT.SEASON_ID = SRC.SEASON_ID
					AND TGT.DAY_NAME = SRC.DAY_NAME
					AND TGT.DST_TYPE = CONSTANTS.DST_TYPE_NONE ) UPD
		ON (UPD.TIME_ZONE = TD.TIME_ZONE
			AND UPD.TEMPLATE_ID = TD.TEMPLATE_ID
			AND UPD.HOLIDAY_SET_ID = TD.HOLIDAY_SET_ID
			AND UPD.LOCAL_DATE = TD.LOCAL_DATE)
		WHEN MATCHED THEN
			UPDATE SET TD.DAY_TYPE_ID = UPD.NEW_DAY_TYPE_ID,
						TD.CUT_BEGIN_DATE = UPD.CUT_BEGIN_DATE,
						TD.CUT_END_DATE = UPD.CUT_END_DATE;
	ELSE
	
		MERGE INTO TEMPLATE_DATES TD
		USING (SELECT TD.TIME_ZONE,
					TD.TEMPLATE_ID,
					TD.HOLIDAY_SET_ID,
					TD.LOCAL_DATE,
					TO_CUT(TD.LOCAL_DATE, TD.TIME_ZONE) AS CUT_BEGIN_DATE,
					TO_CUT(TD.LOCAL_DATE+1, TD.TIME_ZONE) AS CUT_END_DATE,
					TGT.DAY_TYPE_ID AS NEW_DAY_TYPE_ID
				FROM TEMPLATE_DATES TD,
					TEMPLATE_DAY_TYPE SRC,
					TEMPLATE_DAY_TYPE TGT,
					DST_TYPE DT
				WHERE TD.LOCAL_DATE BETWEEN DT.BEGIN_DATE AND DT.END_DATE
					AND TD.TEMPLATE_ID = :NEW.TEMPLATE_ID
					AND SUBSTR(TD.TIME_ZONE, 2, 1) = 'D' -- ONLY BOTHER FOR DST TIME ZONES
					AND SRC.DAY_TYPE_ID = TD.DAY_TYPE_ID
					AND TGT.TEMPLATE_ID = SRC.TEMPLATE_ID
					AND TGT.SEASON_ID = SRC.SEASON_ID
					AND TGT.DAY_NAME = SRC.DAY_NAME
					AND TGT.DST_TYPE = DT.DST_TYPE ) UPD
		ON (UPD.TIME_ZONE = TD.TIME_ZONE
			AND UPD.TEMPLATE_ID = TD.TEMPLATE_ID
			AND UPD.HOLIDAY_SET_ID = TD.HOLIDAY_SET_ID
			AND UPD.LOCAL_DATE = TD.LOCAL_DATE)
		WHEN MATCHED THEN
			UPDATE SET TD.DAY_TYPE_ID = UPD.NEW_DAY_TYPE_ID,
						TD.CUT_BEGIN_DATE = UPD.CUT_BEGIN_DATE,
						TD.CUT_END_DATE = UPD.CUT_END_DATE;
						
	END IF;
  END IF;
END TEMPLATE_UPDATE;
/
