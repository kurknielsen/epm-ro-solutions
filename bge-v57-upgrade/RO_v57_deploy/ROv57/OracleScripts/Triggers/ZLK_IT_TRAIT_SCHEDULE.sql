CREATE OR REPLACE TRIGGER ZLK_IT_TRAIT_SCHEDULE
	BEFORE INSERT OR DELETE OR UPDATE
	ON IT_TRAIT_SCHEDULE
	FOR EACH ROW
DECLARE
	v_LOCK_STATE CHAR(1);
BEGIN
	IF UPDATING THEN
	
		-- attempts to set LOCK_STATE to NULL will silently do nothing
		:new.LOCK_STATE := NVL(:new.LOCK_STATE, :old.LOCK_STATE);
	
		-- did key columns change? If so, we need to check old and new
		-- lock states
		IF NOT ((:new.TRANSACTION_ID IS NULL AND :old.TRANSACTION_ID IS NULL) OR :new.TRANSACTION_ID = :old.TRANSACTION_ID) OR
		   NOT ((:new.SCHEDULE_STATE IS NULL AND :old.SCHEDULE_STATE IS NULL) OR :new.SCHEDULE_STATE = :old.SCHEDULE_STATE) OR
		   NOT ((:new.TRAIT_GROUP_ID IS NULL AND :old.TRAIT_GROUP_ID IS NULL) OR :new.TRAIT_GROUP_ID = :old.TRAIT_GROUP_ID) OR
		   NOT ((:new.STATEMENT_TYPE_ID IS NULL AND :old.STATEMENT_TYPE_ID IS NULL) OR :new.STATEMENT_TYPE_ID = :old.STATEMENT_TYPE_ID) OR
		   NOT ((:new.SCHEDULE_DATE IS NULL AND :old.SCHEDULE_DATE IS NULL) OR :new.SCHEDULE_DATE = :old.SCHEDULE_DATE) THEN
		
			SECURITY_CONTROLS.ENFORCE_LOCK_STATE(:old.LOCK_STATE);
		
			-- query for new lock state
			SELECT MIN(LOCK_STATE)
			INTO v_LOCK_STATE
			FROM IT_TRAIT_SCHEDULE_LOCK_SUMMARY
			WHERE TRANSACTION_ID = :new.TRANSACTION_ID
				  AND SCHEDULE_STATE = :new.SCHEDULE_STATE
				  AND TRAIT_GROUP_ID = :new.TRAIT_GROUP_ID
				  AND STATEMENT_TYPE_ID = :new.STATEMENT_TYPE_ID
				  AND BEGIN_DATE <= :new.SCHEDULE_DATE
				  AND END_DATE >= :new.SCHEDULE_DATE;
		
			SECURITY_CONTROLS.ENFORCE_LOCK_STATE(v_LOCK_STATE);
			:new.LOCK_STATE := NVL(v_LOCK_STATE,'U');
		
		-- only do something if this is not a no-op update
		ELSIF NOT ((:new.TRAIT_INDEX IS NULL AND :old.TRAIT_INDEX IS NULL) OR :new.TRAIT_INDEX = :old.TRAIT_INDEX) OR
			  NOT ((:new.SET_NUMBER IS NULL AND :old.SET_NUMBER IS NULL) OR :new.SET_NUMBER = :old.SET_NUMBER) OR
			  NOT ((:new.SCHEDULE_END_DATE IS NULL AND :old.SCHEDULE_END_DATE IS NULL) OR :new.SCHEDULE_END_DATE = :old.SCHEDULE_END_DATE) OR
			  NOT ((:new.TRAIT_VAL IS NULL AND :old.TRAIT_VAL IS NULL) OR :new.TRAIT_VAL = :old.TRAIT_VAL) THEN
		
			SECURITY_CONTROLS.ENFORCE_LOCK_STATE(:new.LOCK_STATE);
		
		ELSE
			-- no-op update? then make sure entry date is not changed
			:new.ENTRY_DATE := :old.ENTRY_DATE;
		
		END IF;
		
	ELSIF INSERTING THEN
	
		-- query for lock state
		SELECT MIN(LOCK_STATE)
		INTO v_LOCK_STATE
		FROM IT_TRAIT_SCHEDULE_LOCK_SUMMARY
		WHERE TRANSACTION_ID = :new.TRANSACTION_ID
			  AND SCHEDULE_STATE = :new.SCHEDULE_STATE
			  AND TRAIT_GROUP_ID = :new.TRAIT_GROUP_ID
			  AND STATEMENT_TYPE_ID = :new.STATEMENT_TYPE_ID
			  AND BEGIN_DATE <= :new.SCHEDULE_DATE
			  AND END_DATE >= :new.SCHEDULE_DATE;
	
		SECURITY_CONTROLS.ENFORCE_LOCK_STATE(v_LOCK_STATE);
		:new.LOCK_STATE := NVL(v_LOCK_STATE,'U');
	
	ELSE -- must be DELETING
	
		SECURITY_CONTROLS.ENFORCE_LOCK_STATE(:old.LOCK_STATE);
	
	END IF;

END ZLK_IT_TRAIT_SCHEDULE;
/
