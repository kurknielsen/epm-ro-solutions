CREATE OR REPLACE TRIGGER ZLK_TX_SUB_STATION_MTR_PT_VAL
	BEFORE INSERT OR DELETE OR UPDATE
	ON TX_SUB_STATION_METER_PT_VALUE
	FOR EACH ROW
DECLARE
	v_LOCK_STATE CHAR(1);
BEGIN
	IF UPDATING THEN
	
		-- attempts to set LOCK_STATE to NULL will silently do nothing
		:new.LOCK_STATE := NVL(:new.LOCK_STATE, :old.LOCK_STATE);
	
		-- did key columns change? If so, we need to check old and new
		-- lock states
		IF NOT ((:new.METER_POINT_ID IS NULL AND :old.METER_POINT_ID IS NULL) OR :new.METER_POINT_ID = :old.METER_POINT_ID) OR
		   NOT ((:new.MEASUREMENT_SOURCE_ID IS NULL AND :old.MEASUREMENT_SOURCE_ID IS NULL) OR :new.MEASUREMENT_SOURCE_ID = :old.MEASUREMENT_SOURCE_ID) OR
		   NOT ((:new.METER_CODE IS NULL AND :old.METER_CODE IS NULL) OR :new.METER_CODE = :old.METER_CODE) OR
		   NOT ((:new.METER_DATE IS NULL AND :old.METER_DATE IS NULL) OR :new.METER_DATE = :old.METER_DATE) THEN
		
			SECURITY_CONTROLS.ENFORCE_LOCK_STATE(:old.LOCK_STATE);
		
			-- query for new lock state
			SELECT MIN(LOCK_STATE)
			INTO v_LOCK_STATE
			FROM TX_SUB_STATION_MTR_PT_VAL_LK_S
			WHERE METER_POINT_ID = :new.METER_POINT_ID
				  AND MEASUREMENT_SOURCE_ID = :new.MEASUREMENT_SOURCE_ID
				  AND METER_CODE = :new.METER_CODE
				  AND BEGIN_DATE <= :new.METER_DATE
				  AND END_DATE >= :new.METER_DATE;
		
			SECURITY_CONTROLS.ENFORCE_LOCK_STATE(v_LOCK_STATE);
			:new.LOCK_STATE := NVL(v_LOCK_STATE,'U');
		
		-- only do something if this is not a no-op update
		ELSIF NOT ((:new.METER_VAL IS NULL AND :old.METER_VAL IS NULL) OR :new.METER_VAL = :old.METER_VAL) OR
			  NOT ((:new.METER_VAL_CARRY_FWD IS NULL AND :old.METER_VAL_CARRY_FWD IS NULL) OR :new.METER_VAL_CARRY_FWD = :old.METER_VAL_CARRY_FWD) OR
			  NOT ((:new.METER_VAL_ACCUM IS NULL AND :old.METER_VAL_ACCUM IS NULL) OR :new.METER_VAL_ACCUM = :old.METER_VAL_ACCUM) OR
			  NOT ((:new.METER_VAL_QUAL_CODE IS NULL AND :old.METER_VAL_QUAL_CODE IS NULL) OR :new.METER_VAL_QUAL_CODE = :old.METER_VAL_QUAL_CODE) OR
			  NOT ((:new.TRUNCATED_VAL IS NULL AND :old.TRUNCATED_VAL IS NULL) OR :new.TRUNCATED_VAL = :old.TRUNCATED_VAL) OR
			  NOT ((:new.TRUNCATED_VAL_ACCUM IS NULL AND :old.TRUNCATED_VAL_ACCUM IS NULL) OR :new.TRUNCATED_VAL_ACCUM = :old.TRUNCATED_VAL_ACCUM) OR
			  NOT ((:new.TRUNCATED_VAL_QUAL_CODE IS NULL AND :old.TRUNCATED_VAL_QUAL_CODE IS NULL) OR :new.TRUNCATED_VAL_QUAL_CODE = :old.TRUNCATED_VAL_QUAL_CODE) OR
			  NOT ((:new.LIFETIME_VAL_ACCUM IS NULL AND :old.LIFETIME_VAL_ACCUM IS NULL) OR :new.LIFETIME_VAL_ACCUM = :old.LIFETIME_VAL_ACCUM) THEN
		
			SECURITY_CONTROLS.ENFORCE_LOCK_STATE(:new.LOCK_STATE);
		
		ELSE
			-- no-op update? then make sure entry date is not changed
			:new.ENTRY_DATE := :old.ENTRY_DATE;
		
		END IF;
		
	ELSIF INSERTING THEN
	
		-- query for lock state
		SELECT MIN(LOCK_STATE)
		INTO v_LOCK_STATE
		FROM TX_SUB_STATION_MTR_PT_VAL_LK_S
		WHERE METER_POINT_ID = :new.METER_POINT_ID
			  AND MEASUREMENT_SOURCE_ID = :new.MEASUREMENT_SOURCE_ID
			  AND METER_CODE = :new.METER_CODE
			  AND BEGIN_DATE <= :new.METER_DATE

			  AND END_DATE >= :new.METER_DATE;
	
		SECURITY_CONTROLS.ENFORCE_LOCK_STATE(v_LOCK_STATE);
		:new.LOCK_STATE := NVL(v_LOCK_STATE,'U');
	
	ELSE -- must be DELETING
	
		SECURITY_CONTROLS.ENFORCE_LOCK_STATE(:old.LOCK_STATE);
	
	END IF;

END ZLK_TX_SUB_STATION_MTR_PT_VAL;
/
