CREATE OR REPLACE TRIGGER SRVCE_LOC_AGGRGTN_SYNC_STATMNT
	AFTER UPDATE OR INSERT ON SERVICE_LOCATION
BEGIN
	IF ACCOUNTS_METERS.g_SRVCE_LOC_USE_TRIGGER THEN
		FOR v_REC IN
			(SELECT SL.*
			FROM SERVICE_LOCATION SL, RTO_WORK RW
			WHERE SL.SERVICE_LOCATION_ID = RW.WORK_XID
				AND RW.WORK_ID = CONSTANTS.SRVCE_LOC_AGGRGTN_SYNC_WORK_ID)
		LOOP
			IF NVL(v_REC.FEEDER_SEGMENT_ID, CONSTANTS.NOT_ASSIGNED) != CONSTANTS.NOT_ASSIGNED THEN
				SELECT TFS.FEEDER_ID, TF.SUB_STATION_ID, TSS.SERVICE_ZONE_ID
					INTO v_REC.FEEDER_ID, v_REC.SUB_STATION_ID, v_REC.SERVICE_ZONE_ID
				FROM TX_FEEDER_SEGMENT TFS, TX_FEEDER TF, TX_SUB_STATION TSS
				WHERE TFS.FEEDER_SEGMENT_ID = v_REC.FEEDER_SEGMENT_ID
					AND TF.FEEDER_ID = TFS.FEEDER_ID
					AND TSS.SUB_STATION_ID = TF.SUB_STATION_ID;
			ELSIF NVL(v_REC.FEEDER_ID, CONSTANTS.NOT_ASSIGNED) != CONSTANTS.NOT_ASSIGNED THEN
				SELECT TF.SUB_STATION_ID, TSS.SERVICE_ZONE_ID
					INTO v_REC.SUB_STATION_ID, v_REC.SERVICE_ZONE_ID
				FROM TX_FEEDER TF, TX_SUB_STATION TSS
				WHERE TF.FEEDER_ID = v_REC.FEEDER_ID
					AND TSS.SUB_STATION_ID = TF.SUB_STATION_ID;
			ELSIF NVL(v_REC.SUB_STATION_ID, CONSTANTS.NOT_ASSIGNED) != CONSTANTS.NOT_ASSIGNED THEN
				SELECT TSS.SERVICE_ZONE_ID
					INTO v_REC.SERVICE_ZONE_ID
				FROM TX_SUB_STATION TSS
				WHERE TSS.SUB_STATION_ID = v_REC.SUB_STATION_ID;
			END IF;

			ACCOUNTS_METERS.g_SRVCE_LOC_USE_TRIGGER := FALSE;

			UPDATE SERVICE_LOCATION
			SET ROW = v_REC
			WHERE SERVICE_LOCATION_ID = v_REC.SERVICE_LOCATION_ID;

			ACCOUNTS_METERS.g_SRVCE_LOC_USE_TRIGGER := TRUE;

		END LOOP;

		DELETE FROM RTO_WORK
		WHERE WORK_ID = CONSTANTS.SRVCE_LOC_AGGRGTN_SYNC_WORK_ID;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		ACCOUNTS_METERS.g_SRVCE_LOC_USE_TRIGGER := TRUE;
		ERRS.LOG_AND_RAISE();

END SRVCE_LOC_AGGRGTN_SYNC_STATMNT;
/
