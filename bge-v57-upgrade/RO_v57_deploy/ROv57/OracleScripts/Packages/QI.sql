CREATE OR REPLACE PACKAGE QI AS
--Revision $Revision: 1.87 $

-- Quote Management Interface Package --.

FUNCTION WHAT_VERSION RETURN VARCHAR;


PROCEDURE POSITION_ANALYSIS_EVALUATIONS
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE COPY_POSITION_EVALUATION_DATA
	(
	p_OLD_EVALUATION_ID IN NUMBER,
	p_NEW_EVALUATION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE EVALUATION_NAMES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_IDS_FROM_NAMES_LIST
	(
	p_NAMES_LIST IN VARCHAR,
	p_DOMAIN IN VARCHAR,
	p_DELIMITER IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE POSITION_ANALYSIS_PARTICIPANTS
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE POSITION_ANALYSIS_RESULTS
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_RESULT_TYPE IN NUMBER,
	p_VIEW_TYPE IN NUMBER,
	p_MONTH IN NUMBER,
	p_DAY_TYPE IN VARCHAR,
	p_PERIOD_TOTAL IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE POSITION_ANALYSIS_SUPPLY_BLKS
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE POSITION_ANALYSIS_TRANSACTIONS
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE POSITION_ANALYSIS_TXN_GAS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE POSITION_ANALYSIS_TXN_INFO
	(
	p_TRANSACTION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PRICING_ANALYSIS_RESULTS
	(
	p_QUOTE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PERIOD_ID IN NUMBER,
	p_PERIOD_TOTAL IN NUMBER,
	p_RESULT_TYPE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_PARTICIPANT_ENROLLMENT
	(
	p_EVALUATION_ID IN NUMBER,
	p_PARTICIPANT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_POS_WEATHER_PARAM_VAL
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_INTERVAL IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_POS_WEATHER_PROJECTIONS
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_STATION_ID_LIST IN VARCHAR2,
	p_PARAMETER_INTERVAL IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_POS_MARKET_PRICE_VAL
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_INTERVAL IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_POS_SPOT_MKT_PROJECTIONS
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PUT_PARTICIPANT_ENROLLMENT
	(
	p_EVALUATION_ID IN NUMBER,
	p_PARTICIPANT_ID IN NUMBER,
	p_ENROLLMENT_MONTH IN DATE,
	p_ENROLLMENT IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_POS_SPOT_MARKET_PRICE_LIST
	(
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_INTERVAL IN VARCHAR,
	p_DATE_VAL_LIST IN VARCHAR2,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_POS_SPOT_MARKET_PRICE_MON
	(
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_DATE IN DATE,
	p_PEAK_PRICE_VAL IN NUMBER,
	p_OFFPK_PRICE_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_POS_SPOT_MARKET_PRICE_VAL
	(
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_INTERVAL IN VARCHAR,
	p_PRICE_DATE IN DATE,
	p_PRICE_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_POS_WEATHER_PARAMETER_LIST
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_INTERVAL IN VARCHAR,
	p_DATE_VAL_LIST IN VARCHAR2,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_POS_WEATHER_PARAMETER_VAL
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_INTERVAL IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_PARAMETER_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_POSITION_SUPPLY_BLOCK
	(
	p_EVALUATION_ID IN NUMBER,
	p_BLOCK_ORDER IN NUMBER,
	p_TEMPLATE_NAME IN VARCHAR,
	p_BLOCK_QUANTITY IN NUMBER,
	p_BLOCK_PRICE IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_POSITION_TRANSACTION
	(
	p_EVALUATION_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_PROSPECT
	(
	p_SCREEN_ID IN NUMBER,
	p_PROSPECT_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_ACCOUNT_NUMBER IN VARCHAR,
	p_COMPARE_PRODUCT_ID IN NUMBER,
	p_PROFILE_CALENDAR_ID IN NUMBER,
	p_EDC_EXTERNAL_NAME IN VARCHAR,
	p_EDC_TARIFF IN VARCHAR,
	p_EDC_RATE_CLASS IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_PROSPECT_DATA
	(
	p_SCREEN_ID IN NUMBER,
	p_PROSPECT_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_ACCOUNT_NUMBER IN VARCHAR,
	p_COMPARE_PRODUCT_ID IN NUMBER,
	p_PROFILE_CALENDAR_ID IN NUMBER,
	p_EDC_EXTERNAL_NAME IN VARCHAR,
	p_EDC_TARIFF IN VARCHAR,
	p_EDC_RATE_CLASS IN VARCHAR,
	p_CONSUMPTION_DATA_LIST IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_PROSPECT_DATA_MULTI_REC
	(
	p_SCREEN_ID IN NUMBER,
	p_MULTI_REC_DATA_LIST IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_PROSPECT_SCREEN_EVALUATION
    (
	p_SCREEN_ID IN NUMBER,
	p_OFFER_PRODUCT_ID IN NUMBER,
	p_COST_PRODUCT_ID IN NUMBER,
	p_COMPARE_PRODUCT_ID IN NUMBER,
	p_PROFILE_CALENDAR_ID IN NUMBER,
	p_PROSPECT_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_LOSS_FACTOR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_EVALUATION_ID IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PROSPECT_EVAL_DISTINCT_OFFERS
	(
	p_SCREEN_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PROSPECT_EVAL_OFFERS
	(
	p_SCREEN_ID IN NUMBER,
	p_SHOW_ALL_PROSPECTS IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE QUOTE_CALENDAR_PRODUCTS
	(
	p_QUOTE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE QUOTE_NAMES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE QUOTE_SCENARIOS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE SCHEDULE_TEMPLATES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE GET_CALENDAR_PROJECTION
	(
	p_MODEL_ID IN NUMBER,
	p_CALENDAR_ID IN NUMBER,
	p_PROJECTION_TYPE IN VARCHAR,
	p_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_INTERVAL IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE QUOTE_PRICING_SEASONS
	(
	p_QUOTE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PUT_QUOTE_PRICING_SEASON
	(
	p_QUOTE_ID IN NUMBER,
	p_PRICING_MONTH IN NUMBER,
	p_PRICING_SEASON IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE TREE_BRANCHES_ACCOUNT
    (
	p_REQUEST_TYPE IN CHAR,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_DISPLAY_PREFERENCE IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SORT_PREFERENCE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE TREE_BRANCHES_ENROLLMENT
    (
	p_REQUEST_TYPE IN CHAR,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_DISPLAY_PREFERENCE IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_INCLUDE_STANDARD_OFFER IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE TREE_NODES_ACCOUNT
    (
	p_REQUEST_TYPE IN CHAR,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_PSE_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_POOL_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SORT_PREFERENCE IN NUMBER,
	p_SEARCH_STRING IN VARCHAR := '%%',
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

g_ALL_STRING VARCHAR(5) := '<ALL>';
g_TOTAL NUMBER(2) := -2;
g_TRACE_TARGET CHAR(1) := 'T';
g_UNKNOWN NUMBER(4) := -999;
g_MODULE_NAME VARCHAR(16) := 'QUOTE MANAGEMENT';
g_DOMAIN_NAME VARCHAR(16) := 'QUOTE MANAGEMENT';
g_SECOND NUMBER(6,5) :=  .00001;

TYPE STRING_TABLE_LARGE IS TABLE OF VARCHAR(2000) INDEX BY BINARY_INTEGER;

END;
/
CREATE OR REPLACE PACKAGE BODY QI AS
---------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.87 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE POSITION_ANALYSIS_EVALUATIONS
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- ANSWER THE APPROPRIATE ENTRIES IN POSITION_ANALYSIS_EVALUATION TABLE.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	    SELECT
	  		  EVALUATION_ID,
			  EVALUATION_NAME,
			  EVALUATION_DESC,
			  BEGIN_DATE,
			  END_DATE,
	  		  MARKET_PRICE_ID,
			  LAST_RUN_DATE,
			  ENTRY_DATE
		FROM  POSITION_ANALYSIS_EVALUATION
  		ORDER BY 2,4;

END POSITION_ANALYSIS_EVALUATIONS;
---------------------------------------------------------------------------------------------------
PROCEDURE COPY_POSITION_EVALUATION_DATA
	(
	p_OLD_EVALUATION_ID IN NUMBER,
	p_NEW_EVALUATION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

v_NEW_PARTICIPANT_ID NUMBER(9);

CURSOR c_PARTICIPANT IS
	SELECT *
	FROM POSITION_ANALYSIS_PARTICIPANT
	WHERE EVALUATION_ID = p_OLD_EVALUATION_ID;

-- COPY POSITION_ANALYSIS_EVALUATION data from given EVALUATION_ID to new EVALUATION_ID
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	--Delete any records that might be using the p_NEW_EVALUATION_ID
	DELETE FROM POSITION_ANALYSIS_CANDIDATE
		   WHERE EVALUATION_ID = p_NEW_EVALUATION_ID;
	DELETE FROM POSITION_ANALYSIS_SEGMENT
		   WHERE EVALUATION_ID = p_NEW_EVALUATION_ID;
	DELETE FROM POSITION_ANALYSIS_SPOT_MARKET
		   WHERE EVALUATION_ID = p_NEW_EVALUATION_ID;
	DELETE FROM POSITION_ANALYSIS_SUPPLY_BLOCK
		   WHERE EVALUATION_ID = p_NEW_EVALUATION_ID;
	DELETE FROM POSITION_ANALYSIS_TRANSACTION
		   WHERE EVALUATION_ID = p_NEW_EVALUATION_ID;
	DELETE FROM POSITION_ANALYSIS_WEATHER
		   WHERE EVALUATION_ID = p_NEW_EVALUATION_ID;
	DELETE FROM POSITION_ANALYSIS_PARTICIPANT
		   WHERE EVALUATION_ID = p_NEW_EVALUATION_ID;
	DELETE FROM POSITION_ANALYSIS_ENROLLMENT
		   WHERE EVALUATION_ID = p_NEW_EVALUATION_ID;

	--Insert copies of the old Evaluation records into all the input tables for Position Analysis
	-- (but not the LOAD and REVENUE results tables)
	INSERT INTO POSITION_ANALYSIS_CANDIDATE
	   (SELECT
		    p_NEW_EVALUATION_ID "EVALUATION_ID",
			ACCOUNT_ID,
			SERVICE_LOCATION_ID,
			METER_ID,
			AGGREGATE_ID,
			EDC_ID,
			PSE_ID,
			ESP_ID,
			POOL_ID,
			CALENDAR_ID,
			PRODUCT_ID,
			LOSS_FACTOR_ID,
			USAGE_FACTOR,
			ENROLLMENT
		FROM POSITION_ANALYSIS_CANDIDATE
		WHERE EVALUATION_ID = p_OLD_EVALUATION_ID);

	INSERT INTO POSITION_ANALYSIS_SEGMENT
	   (SELECT
		    p_NEW_EVALUATION_ID "EVALUATION_ID",
			SEGMENT_NAME,
			SEGMENT_TYPE,
			SEGMENT_DAY_TYPE,
			SEGMENT_DATE,
			SEGMENT_ORDER,
			SEGMENT_QUANTITY,
			SEGMENT_COST
		FROM POSITION_ANALYSIS_SEGMENT
		WHERE EVALUATION_ID = p_OLD_EVALUATION_ID);

	INSERT INTO POSITION_ANALYSIS_SPOT_MARKET
	   (SELECT
		    p_NEW_EVALUATION_ID "EVALUATION_ID",
			MARKET_PRICE_ID,
			PRICE_INTERVAL,
			PRICE_DATE,
			PRICE_VAL,
			SYSDATE "ENTRY_DATE"
		FROM POSITION_ANALYSIS_SPOT_MARKET
		WHERE EVALUATION_ID = p_OLD_EVALUATION_ID);

	INSERT INTO POSITION_ANALYSIS_SUPPLY_BLOCK
	   (SELECT
		    p_NEW_EVALUATION_ID "EVALUATION_ID",
			BLOCK_ORDER,
			TEMPLATE_NAME,
			BLOCK_QUANTITY,
			BLOCK_PRICE,
			MARKET_PRICE_ID,
			BEGIN_DATE,
			END_DATE,
			SYSDATE "ENTRY_DATE"
		FROM POSITION_ANALYSIS_SUPPLY_BLOCK
		WHERE EVALUATION_ID = p_OLD_EVALUATION_ID);

	INSERT INTO POSITION_ANALYSIS_TRANSACTION
	   (SELECT
		    p_NEW_EVALUATION_ID "EVALUATION_ID",
			TRANSACTION_ID,
			SYSDATE "ENTRY_DATE"
		FROM POSITION_ANALYSIS_TRANSACTION
		WHERE EVALUATION_ID = p_OLD_EVALUATION_ID);

	INSERT INTO POSITION_ANALYSIS_WEATHER
	   (SELECT
		    p_NEW_EVALUATION_ID "EVALUATION_ID",
			STATION_ID,
			PARAMETER_ID,
			PARAMETER_INTERVAL,
			PARAMETER_DATE,
			PARAMETER_VAL,
			SYSDATE "ENTRY_DATE"
		FROM POSITION_ANALYSIS_WEATHER
		WHERE EVALUATION_ID = p_OLD_EVALUATION_ID);

	--Unlike the other tables which use EVALUATION_ID in the Primary Key,
	--the _PARTICIPANT Primary Key is PARTICIPANT_ID only,
	--so we must create new PARTICIPANT_IDs for the copied Participants,
	--and associate the copied Enrollments with the new Participants.

	FOR v_PARTICIPANT IN c_PARTICIPANT LOOP
		SELECT QID.NEXTVAL INTO v_NEW_PARTICIPANT_ID FROM DUAL;
		INSERT INTO POSITION_ANALYSIS_PARTICIPANT (
				PARTICIPANT_ID,
				EVALUATION_ID,
				PARTICIPANT_ENTITY_ID,
				PARTICIPANT_TYPE,
				PARTICIPANT_NAME,
				LOSS_FACTOR_ID,
				STATION_ID,
				CALENDAR_ID,
				PRODUCT_ID,
				CALENDAR_PROJECTION_TYPE,
				USAGE_FACTOR,
				USE_BILLING_DETERMINANTS,
				ENTRY_DATE)
		   VALUES (
			    v_NEW_PARTICIPANT_ID,
				p_NEW_EVALUATION_ID,
				v_PARTICIPANT.PARTICIPANT_ENTITY_ID,
				v_PARTICIPANT.PARTICIPANT_TYPE,
				v_PARTICIPANT.PARTICIPANT_NAME,
				v_PARTICIPANT.LOSS_FACTOR_ID,
				v_PARTICIPANT.STATION_ID,
				v_PARTICIPANT.CALENDAR_ID,
				v_PARTICIPANT.PRODUCT_ID,
				v_PARTICIPANT.CALENDAR_PROJECTION_TYPE,
				v_PARTICIPANT.USAGE_FACTOR,
				v_PARTICIPANT.USE_BILLING_DETERMINANTS,
				SYSDATE);

		INSERT INTO POSITION_ANALYSIS_ENROLLMENT
		   (SELECT
			    p_NEW_EVALUATION_ID "EVALUATION_ID",
			    v_NEW_PARTICIPANT_ID "PARTICIPANT_ID",
				ENROLLMENT_MONTH,
				ENROLLMENT,
				SYSDATE "ENTRY_DATE"
			FROM POSITION_ANALYSIS_ENROLLMENT
			WHERE EVALUATION_ID = p_OLD_EVALUATION_ID
			  AND PARTICIPANT_ID = v_PARTICIPANT.PARTICIPANT_ID);
	END LOOP;

END COPY_POSITION_EVALUATION_DATA;
---------------------------------------------------------------------------------------------------
PROCEDURE EVALUATION_NAMES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- ANSWER THE EVALUATION_NAMES AND IDS IN POSITION_ANALYSIS_EVALUATION TABLE.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	    SELECT
			  EVALUATION_NAME,
	  		  EVALUATION_ID
		FROM  POSITION_ANALYSIS_EVALUATION
  		ORDER BY 1;

END EVALUATION_NAMES;
---------------------------------------------------------------------------------------------------
PROCEDURE GET_IDS_FROM_NAMES_LIST
	(
	p_NAMES_LIST IN VARCHAR,
	p_DOMAIN IN VARCHAR,
	p_DELIMITER IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

v_NAMES GA.STRING_TABLE;
v_WORK_ID NUMBER;
v_INDEX BINARY_INTEGER;

BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UT.TOKENS_FROM_STRING(p_NAMES_LIST, p_DELIMITER, v_NAMES);
	UT.GET_RTO_WORK_ID(v_WORK_ID);

	FOR v_INDEX IN v_NAMES.FIRST..v_NAMES.LAST LOOP
		IF v_NAMES.EXISTS(v_INDEX) THEN
			UT.POST_RTO_WORK(v_WORK_ID, v_INDEX, UPPER(v_NAMES(v_INDEX)));
		END IF;
	END LOOP;

	IF UPPER(p_DOMAIN) = 'CALENDAR' THEN
		OPEN p_CURSOR FOR
			SELECT
				CALENDAR_NAME,
				CALENDAR_ID
			FROM CALENDAR
			WHERE UPPER(CALENDAR_NAME) IN (SELECT WORK_DATA FROM RTO_WORK WHERE WORK_ID = v_WORK_ID);

	ELSIF UPPER(p_DOMAIN) = 'PRODUCT' THEN
		OPEN p_CURSOR FOR
			SELECT
				PRODUCT_NAME,
				PRODUCT_ID
			FROM PRODUCT
			WHERE UPPER(PRODUCT_NAME) IN (SELECT WORK_DATA FROM RTO_WORK WHERE WORK_ID = v_WORK_ID);

	ELSIF UPPER(p_DOMAIN) = 'EDC' THEN
		OPEN p_CURSOR FOR
			SELECT
				EDC_NAME,
				EDC_ID
			FROM ENERGY_DISTRIBUTION_COMPANY
			WHERE UPPER(EDC_NAME) IN (SELECT WORK_DATA FROM RTO_WORK WHERE WORK_ID = v_WORK_ID);

	ELSIF UPPER(p_DOMAIN) = 'PERIOD' THEN
		OPEN p_CURSOR FOR
			SELECT
				PERIOD_NAME,
				PERIOD_ID
			FROM PERIOD
			WHERE UPPER(PERIOD_NAME) IN (SELECT WORK_DATA FROM RTO_WORK WHERE WORK_ID = v_WORK_ID);

	ELSIF UPPER(p_DOMAIN) = 'TEMPLATE' THEN
		OPEN p_CURSOR FOR
			SELECT
				TEMPLATE_NAME,
				TEMPLATE_ID
			FROM TEMPLATE
			WHERE UPPER(TEMPLATE_NAME) IN (SELECT WORK_DATA FROM RTO_WORK WHERE WORK_ID = v_WORK_ID);

	ELSIF UPPER(p_DOMAIN) = 'TEMPLATE_PERIOD' THEN
		OPEN p_CURSOR FOR
			SELECT DISTINCT TEMPLATE_NAME || ';' || PERIOD_NAME "TEMPLATE_PERIOD_NAME",
				   P.PERIOD_ID "TEMPLATE_PERIOD_ID",
				   T.TEMPLATE_ID
			FROM SEASON_TEMPLATE S, TEMPLATE T, PERIOD P
			WHERE S.TEMPLATE_ID = T.TEMPLATE_ID
			  AND S.PERIOD_ID = P.PERIOD_ID
			ORDER BY 1;

	ELSE
		p_CURSOR := CU.NULL_CURSOR;
		p_STATUS := GA.NO_DATA_FOUND;

	END IF;

	UT.PURGE_RTO_WORK(v_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(v_WORK_ID);
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		ERRS.LOG_AND_RAISE();

END GET_IDS_FROM_NAMES_LIST;
---------------------------------------------------------------------------------------------------
PROCEDURE POSITION_ANALYSIS_PARTICIPANTS
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS
-- ANSWER THE APPROPRIATE ENTRIES IN POSITION_ANALYSIS_PARTICIPANT TABLE.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	    SELECT
	  		  PARTICIPANT_TYPE "Type",
	  		  PARTICIPANT_ID,
			  PARTICIPANT_NAME "Name",
			  PARTICIPANT_ENTITY_ID,
	  		  PA.CALENDAR_ID,
			  C.CALENDAR_NAME "CALENDAR",
	  		  PA.PRODUCT_ID,
			  P.PRODUCT_NAME "PRODUCT",
			  PA.STATION_ID,
			  W.STATION_NAME "STATION",
	  		  USAGE_FACTOR,
			  PA.LOSS_FACTOR_ID,
			  L.LOSS_FACTOR_NAME "LOSS_FACTOR",
	  		  USE_BILLING_DETERMINANTS "USE_HISTORICAL_USAGE"
		FROM  POSITION_ANALYSIS_PARTICIPANT PA, CALENDAR C, PRODUCT P, LOSS_FACTOR L, WEATHER_STATION W
		WHERE EVALUATION_ID = p_EVALUATION_ID
		  AND PA.CALENDAR_ID = C.CALENDAR_ID (+)
		  AND PA.PRODUCT_ID = P.PRODUCT_ID (+)
		  AND PA.LOSS_FACTOR_ID = L.LOSS_FACTOR_ID (+)
		  AND PA.STATION_ID = W.STATION_ID (+)
  		ORDER BY PARTICIPANT_TYPE;

END POSITION_ANALYSIS_PARTICIPANTS;
---------------------------------------------------------------------------------------------------
PROCEDURE POSITION_ANALYSIS_RESULTS
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_RESULT_TYPE IN NUMBER,
	p_VIEW_TYPE IN NUMBER,
	p_MONTH IN NUMBER,
	p_DAY_TYPE IN VARCHAR,
	p_PERIOD_TOTAL IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

c_LOAD_AND_SUPPLY NUMBER := 0;
c_REVENUE_AND_COST NUMBER := 1;
c_SPOT NUMBER := 2;
c_MARK_TO_MKT NUMBER := 3;
c_RISK_ANALYSIS NUMBER := 4;
c_MONTHLY NUMBER := 0;
c_ANNUAL NUMBER := 365;
v_BEGIN_DATE DATE;
v_END_DATE DATE;

-- Answer the appropriate Results from POSITION_ANALYSIS_SEGMENT table.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	SELECT BEGIN_DATE, END_DATE INTO v_BEGIN_DATE, v_END_DATE
	FROM POSITION_ANALYSIS_EVALUATION
	WHERE EVALUATION_ID = p_EVALUATION_ID;

	IF p_VIEW_TYPE = c_MONTHLY THEN
	    --Limit dates to selected month
		UT.CUT_DATE_RANGE(p_MODEL_ID, ADD_MONTHS(v_BEGIN_DATE,p_MONTH - 1), ADD_MONTHS(v_BEGIN_DATE,p_MONTH) - 1, LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
	ELSE
		--Use Evaluation DATES
		UT.CUT_DATE_RANGE(p_MODEL_ID, v_BEGIN_DATE, v_END_DATE, LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
	END IF;

	IF p_RESULT_TYPE = c_LOAD_AND_SUPPLY THEN

	    OPEN p_CURSOR FOR
			SELECT 'Load' "SEGMENT_TYPE", SEGMENT_DATE, SEGMENT_ORDER, SEGMENT_QUANTITY, SEGMENT_COST
			FROM POSITION_ANALYSIS_SEGMENT
			WHERE EVALUATION_ID = p_EVALUATION_ID
				AND SEGMENT_TYPE = 'L'
				AND SEGMENT_DAY_TYPE = p_DAY_TYPE
				AND SEGMENT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
			UNION
			--Use 'Load' segment for dates, A.SEGMENT_DATE, to ensure that there is
			--  a row for each hour of the day, since other segments can be sparse.
			--For now, all block segments are grouped as a single block with the same SEGMENT_ORDER,
			--  so they will graph as a single line.  VB graphing code would need to be changed to support multiple blocks.
			SELECT 'Blocks' "SEGMENT_TYPE", A.SEGMENT_DATE, 1 "SEGMENT_ORDER", SUM(B.SEGMENT_QUANTITY), SUM(B.SEGMENT_COST)
			FROM POSITION_ANALYSIS_SEGMENT A, POSITION_ANALYSIS_SEGMENT B
			WHERE A. EVALUATION_ID = p_EVALUATION_ID
				AND A.SEGMENT_TYPE = 'L'
				AND A.SEGMENT_DAY_TYPE = p_DAY_TYPE
				AND A.SEGMENT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
				AND B.EVALUATION_ID(+) = A.EVALUATION_ID
				AND B.SEGMENT_TYPE(+) = 'B'
				AND B.SEGMENT_DAY_TYPE(+) = p_DAY_TYPE
				AND B.SEGMENT_DATE(+) = A.SEGMENT_DATE
			GROUP BY A.SEGMENT_DATE
			UNION
			SELECT 'Transaction' "SEGMENT_TYPE", A.SEGMENT_DATE, 0 "SEGMENT_ORDER", SUM(B.SEGMENT_QUANTITY), SUM(B.SEGMENT_COST) --B.SEGMENT_ORDER, B.SEGMENT_QUANTITY, B.SEGMENT_COST
			FROM POSITION_ANALYSIS_SEGMENT A, POSITION_ANALYSIS_SEGMENT B
			WHERE A. EVALUATION_ID = p_EVALUATION_ID
				AND A.SEGMENT_TYPE = 'L'
				AND A.SEGMENT_DAY_TYPE = p_DAY_TYPE
				AND A.SEGMENT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
				AND B.EVALUATION_ID(+) = A.EVALUATION_ID
				AND B.SEGMENT_TYPE(+) = 'T'
				AND B.SEGMENT_DAY_TYPE(+) = p_DAY_TYPE
				AND B.SEGMENT_DATE(+) = A.SEGMENT_DATE
			GROUP BY A.SEGMENT_DATE
			ORDER BY SEGMENT_ORDER,SEGMENT_TYPE,SEGMENT_DATE;

	ELSIF p_RESULT_TYPE = c_SPOT THEN
		--Spot segment only
	    OPEN p_CURSOR FOR
			SELECT 'Spot' "SEGMENT_TYPE", A.SEGMENT_DATE, B.SEGMENT_QUANTITY "SPOT_QUANTITY" , B.SEGMENT_COST "SPOT_COST"
			FROM POSITION_ANALYSIS_SEGMENT A, POSITION_ANALYSIS_SEGMENT B
			WHERE A.EVALUATION_ID = p_EVALUATION_ID
				AND A.SEGMENT_TYPE = 'L'
				AND A.SEGMENT_DAY_TYPE = p_DAY_TYPE
				AND A.SEGMENT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
				AND B.EVALUATION_ID(+) = A.EVALUATION_ID
				AND B.SEGMENT_TYPE(+) = 'S'
				AND B.SEGMENT_DAY_TYPE(+) = p_DAY_TYPE
				AND B.SEGMENT_DATE(+) = A.SEGMENT_DATE
			ORDER BY A.SEGMENT_DATE;

	ELSIF p_RESULT_TYPE = c_REVENUE_AND_COST THEN
		--Financial Results
--reu: fix multiple rows per month in pos.analysis financial results
--QI pkg, PROCEDURE POSITION_ANALYSIS_RESULTS

	    OPEN p_CURSOR FOR
	    	--Use subqueries for WK_DAYS and TYPICAL WEEKDAY and WEEKEND costs
			--  to reduce recalculations and improve query speed.
			SELECT
			  	  'All Participants' "PARTICIPANT_ID",
				  R.MONTH,
				  R.ENERGY,
				  R.DEMAND,
				  R.REVENUE,
				  R.REVENUE/R.ENERGY "$_REVENUE/MWH",
				  --W.WK_DAYS,
				  --W.WKEND_DAYS,
				  --X.TYPICAL_WEEKDAY_COST "TYPICAL_WEEKDAY_COST",
				  --Y.TYPICAL_WEEKEND_COST "TYPICAL_WEEKEND_COST",
				  ((X.TYPICAL_WEEKDAY_COST * W.WK_DAYS) + (Y.TYPICAL_WEEKEND_COST * W.WKEND_DAYS)) "NET_COST",
				  ((X.TYPICAL_WEEKDAY_COST * W.WK_DAYS) + (Y.TYPICAL_WEEKEND_COST * W.WKEND_DAYS))/R.ENERGY "$_COST/MWH",
				  R.REVENUE - ((X.TYPICAL_WEEKDAY_COST * W.WK_DAYS) + (Y.TYPICAL_WEEKEND_COST * W.WKEND_DAYS)) "PROFIT"
			FROM (SELECT
				  TRUNC(REVENUE_MONTH, 'MONTH') "MONTH",
				  SUM(REVENUE_ENERGY) "ENERGY",
				  SUM(REVENUE_DEMAND) "DEMAND",
				  SUM(REVENUE_AMOUNT) "REVENUE",
				  SUM(REVENUE_AMOUNT)/SUM(REVENUE_ENERGY) "$_REVENUE/MWH"
				  FROM POSITION_ANALYSIS_REVENUE
				  WHERE EVALUATION_ID = p_EVALUATION_ID
				  GROUP BY TRUNC(REVENUE_MONTH, 'MONTH')
				  )R,
		    	(SELECT DISTINCT
					  WD.MONTH "MONTH",
					  WD.WK_DAYS "WK_DAYS",
					  TO_NUMBER(TO_CHAR(LAST_DAY(R.REVENUE_MONTH),'DD')) - WD.WK_DAYS "WKEND_DAYS"
				FROM POSITION_ANALYSIS_REVENUE R,
			    	(SELECT
						  TRUNC(R.REVENUE_MONTH, 'MONTH') "MONTH",
						  WEEK_DAYS_IN_RANGE(R.REVENUE_MONTH,LAST_DAY(R.REVENUE_MONTH)) "WK_DAYS"--,
					FROM POSITION_ANALYSIS_REVENUE R
					WHERE R.EVALUATION_ID = p_EVALUATION_ID
					) WD
				WHERE R.EVALUATION_ID = p_EVALUATION_ID
				AND WD.MONTH = TRUNC(R.REVENUE_MONTH, 'MONTH')
				) W,
		    	(SELECT DISTINCT
					  TRUNC(B.SEGMENT_DATE, 'MONTH') "MONTH",
					  SUM(B.SEGMENT_COST) "TYPICAL_WEEKDAY_COST"
				FROM POSITION_ANALYSIS_SEGMENT B
				WHERE B.EVALUATION_ID = p_EVALUATION_ID
				  AND B.SEGMENT_TYPE <> 'L'
				  AND B.SEGMENT_DAY_TYPE = 'D'
				  --AND TRUNC(B.SEGMENT_DATE - g_SECOND, 'MONTH') = TRUNC(R.REVENUE_MONTH, 'MONTH')
				GROUP BY
					  TRUNC(B.SEGMENT_DATE, 'MONTH')
				) X,
		    	(SELECT DISTINCT
					  TRUNC(B.SEGMENT_DATE, 'MONTH') "MONTH",
					  SUM(B.SEGMENT_COST) "TYPICAL_WEEKEND_COST"
				FROM POSITION_ANALYSIS_SEGMENT B
				WHERE B.EVALUATION_ID = p_EVALUATION_ID
				  AND B.SEGMENT_TYPE <> 'L'
				  AND B.SEGMENT_DAY_TYPE = 'E'
				  --AND TRUNC(B.SEGMENT_DATE - g_SECOND, 'MONTH') = TRUNC(R.REVENUE_MONTH, 'MONTH')
				GROUP BY
					  TRUNC(B.SEGMENT_DATE, 'MONTH')
				) Y
			WHERE TRUNC(W.MONTH, 'MONTH') = TRUNC(R.MONTH, 'MONTH')
			  AND TRUNC(X.MONTH, 'MONTH') = TRUNC(R.MONTH, 'MONTH')
			  AND TRUNC(Y.MONTH, 'MONTH') = TRUNC(R.MONTH, 'MONTH')
			 ORDER BY 2;

	ELSIF p_RESULT_TYPE = c_MARK_TO_MKT THEN
	    --stub
		OPEN p_CURSOR FOR
	    	SELECT
				  TRUNC(SYSDATE) "DAY",
				  'MTM' "ANALYSIS",
				  15 "COST",
				  15 "MARKET"
		  	FROM DUAL
			UNION
	    	SELECT
				  TRUNC(SYSDATE+1) "DAY",
				  'MTM' "ANALYSIS",
				  15 "COST",
				  20 "MARKET"
		  	FROM DUAL
			UNION
	    	SELECT
				  TRUNC(SYSDATE+2) "DAY",
				  'MTM' "ANALYSIS",
				  15 "COST",
				  25 "MARKET"
		  	FROM DUAL;

	ELSIF p_RESULT_TYPE = c_RISK_ANALYSIS THEN
	    --stub
	    OPEN p_CURSOR FOR
	    	SELECT
				  TRUNC(SYSDATE) "DAY",
				  'RISK' "ANALYSIS",
				  15 "COST",
				  15 "MARKET"
		  	FROM DUAL
			UNION
	    	SELECT
				  TRUNC(SYSDATE+1) "DAY",
				  'RISK' "ANALYSIS",
				  15 "COST",
				  20 "MARKET"
		  	FROM DUAL
			UNION
	    	SELECT
				  TRUNC(SYSDATE+2) "DAY",
				  'RISK' "ANALYSIS",
				  15 "COST",
				  25 "MARKET"
		  	FROM DUAL;

	ELSE
	    OPEN p_CURSOR FOR
	    	SELECT
		  		  NULL FROM DUAL;
	END IF;

END POSITION_ANALYSIS_RESULTS;
---------------------------------------------------------------------------------------------------
PROCEDURE POSITION_ANALYSIS_SUPPLY_BLKS
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- ANSWER THE APPROPRIATE ENTRIES IN POSITION_ANALYSIS_SUPPLY_BLOCK TABLE.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	    SELECT
			  PS.TEMPLATE_NAME "Template_Name",
	  		  PS.BLOCK_ORDER,
	  		  PS.BLOCK_QUANTITY "Quantity",
			  PS.BLOCK_PRICE "Price",
	  		  PS.MARKET_PRICE_ID,
			  M.MARKET_PRICE_NAME "Market_Price",
	  		  PS.BEGIN_DATE,
	  		  PS.END_DATE
		FROM  POSITION_ANALYSIS_SUPPLY_BLOCK PS, MARKET_PRICE M
		WHERE PS.EVALUATION_ID = p_EVALUATION_ID
		  AND M.MARKET_PRICE_ID (+) = PS.MARKET_PRICE_ID
  		ORDER BY PS.BLOCK_ORDER;

END POSITION_ANALYSIS_SUPPLY_BLKS;
---------------------------------------------------------------------------------------------------
PROCEDURE POSITION_ANALYSIS_TRANSACTIONS
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- ANSWER THE APPROPRIATE ENTRIES IN POSITION_ANALYSIS_TRANSACTION TABLE.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	    SELECT
			  A.TRANSACTION_NAME "Name",
	  		  PT.TRANSACTION_ID,
			  B.PSE_NAME "PURCHASER",
	  		  A.PURCHASER_ID,
			  C.PSE_NAME "SELLER",
	  		  A.SELLER_ID,
			  D.SERVICE_POINT_NAME "POR",
	  		  A.POR_ID,
			  E.SERVICE_POINT_NAME "POD",
	  		  A.POD_ID,
	  		  A.BEGIN_DATE,
	  		  A.END_DATE
		FROM  POSITION_ANALYSIS_TRANSACTION PT, INTERCHANGE_TRANSACTION A, PURCHASING_SELLING_ENTITY B, PURCHASING_SELLING_ENTITY C, SERVICE_POINT D, SERVICE_POINT E
		WHERE PT.EVALUATION_ID = p_EVALUATION_ID
		  AND A.TRANSACTION_ID = PT.TRANSACTION_ID
		  AND A.PURCHASER_ID = B.PSE_ID(+)
		  AND A.SELLER_ID = C.PSE_ID(+)
		  AND A.POR_ID = D.SERVICE_POINT_ID(+)
		  AND A.POD_ID = E.SERVICE_POINT_ID(+)
  		ORDER BY A.TRANSACTION_NAME;

END POSITION_ANALYSIS_TRANSACTIONS;
---------------------------------------------------------------------------------------------------
PROCEDURE POSITION_ANALYSIS_TXN_GAS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- ANSWER Supply Contract information about the given INTERCHANGE_TRANSACTION.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	    SELECT
			  A.TRANSACTION_NAME "Name",
	  		  A.TRANSACTION_ID,
			  B.PSE_NAME "PURCHASER",
	  		  A.PURCHASER_ID,
			  C.PSE_NAME "SELLER",
	  		  A.SELLER_ID,
			  D.SERVICE_POINT_NAME "POR",
	  		  A.POR_ID,
			  E.SERVICE_POINT_NAME "POD",
	  		  A.POD_ID,
	  		  A.BEGIN_DATE,
	  		  A.END_DATE
		FROM  INTERCHANGE_TRANSACTION A, PURCHASING_SELLING_ENTITY B, PURCHASING_SELLING_ENTITY C, SERVICE_POINT D, SERVICE_POINT E
		WHERE A.TRANSACTION_ID = p_TRANSACTION_ID
		  AND A.PURCHASER_ID = B.PSE_ID(+)
		  AND A.SELLER_ID = C.PSE_ID(+)
		  AND A.POR_ID = D.SERVICE_POINT_ID(+)
		  AND A.POD_ID = E.SERVICE_POINT_ID(+)
  		ORDER BY A.TRANSACTION_NAME;

END POSITION_ANALYSIS_TXN_GAS;
---------------------------------------------------------------------------------------------------
PROCEDURE POSITION_ANALYSIS_TXN_INFO
	(
	p_TRANSACTION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- ANSWER Supply Contract information about the given INTERCHANGE_TRANSACTION.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	    SELECT
			  A.TRANSACTION_NAME "Name",
	  		  A.TRANSACTION_ID,
			  B.PSE_NAME "PURCHASER",
	  		  A.PURCHASER_ID,
			  C.PSE_NAME "SELLER",
	  		  A.SELLER_ID,
			  D.SERVICE_POINT_NAME "POR",
	  		  A.POR_ID,
			  E.SERVICE_POINT_NAME "POD",
	  		  A.POD_ID,
	  		  A.BEGIN_DATE,
	  		  A.END_DATE
		FROM  INTERCHANGE_TRANSACTION A, PURCHASING_SELLING_ENTITY B, PURCHASING_SELLING_ENTITY C, SERVICE_POINT D, SERVICE_POINT E
		WHERE A.TRANSACTION_ID = p_TRANSACTION_ID
		  AND A.PURCHASER_ID = B.PSE_ID(+)
		  AND A.SELLER_ID = C.PSE_ID(+)
		  AND A.POR_ID = D.SERVICE_POINT_ID(+)
		  AND A.POD_ID = E.SERVICE_POINT_ID(+)
  		ORDER BY A.TRANSACTION_NAME;

END POSITION_ANALYSIS_TXN_INFO;
---------------------------------------------------------------------------------------------------
PROCEDURE PRICING_ANALYSIS_RESULTS
	(
	p_QUOTE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PERIOD_ID IN NUMBER,
	p_PERIOD_TOTAL IN NUMBER,
	p_RESULT_TYPE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

c_REVENUE_AND_COST  NUMBER := 0;
c_PER_UNIT_REVENUE_AND_COST  NUMBER := 1;
c_SEASONAL_PER_UNIT_RATES  NUMBER := 2;

-- Answer the summary results for a quote execution.

BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	IF p_RESULT_TYPE = c_REVENUE_AND_COST THEN

		OPEN p_CURSOR FOR
			SELECT QUOTE_SCENARIO,
				DECODE(p_PERIOD_TOTAL, g_TOTAL, p_END_DATE, QUOTE_MONTH) "QUOTE_MONTH",
				SUM(NVL(QUOTE_ENERGY,0)) "QUOTE_ENERGY",
				MAX(NVL(QUOTE_DEMAND,0)) "QUOTE_DEMAND",
				SUM(NVL(QUOTE_COMPARE,0)) "COMPARE_COST",
				SUM(NVL(QUOTE_REVENUE,0)) "QUOTE_REVENUE",
				SUM(NVL(QUOTE_COST,0)) "QUOTE_COST",
				SUM(NVL(QUOTE_REVENUE-QUOTE_COST,0)) "MARGIN",
				100 * (SUM(NVL(QUOTE_REVENUE,0)) - SUM(NVL(QUOTE_COST,0))) / (SUM(NVL(QUOTE_REVENUE,0)) + 0.001) "MARGIN %",
				SUM(NVL(QUOTE_COMPARE-QUOTE_REVENUE,0)) "SAVINGS",
				100 * (SUM(NVL(QUOTE_COMPARE,0)) - SUM(NVL(QUOTE_REVENUE,0))) / (SUM(NVL(QUOTE_COMPARE,0)) + 0.001) "SAVINGS %"
 			FROM QUOTE_COMPONENT_POSITION
			WHERE QUOTE_ID = p_QUOTE_ID
				AND QUOTE_MONTH BETWEEN TRUNC(p_BEGIN_DATE,'MONTH') AND LAST_DAY(p_END_DATE)
				AND PERIOD_ID = DECODE(p_PERIOD_ID, g_TOTAL, PERIOD_ID, p_PERIOD_ID)
			GROUP BY QUOTE_SCENARIO,
                DECODE(p_PERIOD_TOTAL, g_TOTAL, p_END_DATE, QUOTE_MONTH)
 			ORDER BY QUOTE_SCENARIO, QUOTE_MONTH;

	ELSIF p_RESULT_TYPE = c_PER_UNIT_REVENUE_AND_COST THEN
        --Per unit
		OPEN p_CURSOR FOR
			SELECT QUOTE_SCENARIO,
				DECODE(p_PERIOD_TOTAL, g_TOTAL, p_END_DATE, QUOTE_MONTH) "QUOTE_MONTH",
				SUM(NVL(QUOTE_ENERGY,0)) "QUOTE_ENERGY",
				MAX(NVL(QUOTE_DEMAND,0)) "QUOTE_DEMAND",
				SUM(NVL(QUOTE_COMPARE,0)) / (SUM(NVL(QUOTE_ENERGY,0)) + 0.001) "COMPARE_$/_UNIT",
				SUM(NVL(QUOTE_REVENUE,0)) / (SUM(NVL(QUOTE_ENERGY,0)) + 0.001) "REVENUE_$/_UNIT",
				SUM(NVL(QUOTE_COST,0)) / (SUM(NVL(QUOTE_ENERGY,0)) + 0.001) "COST_$/_UNIT",
				SUM(NVL(QUOTE_REVENUE-QUOTE_COST,0)) "MARGIN",
				100 * (SUM(NVL(QUOTE_REVENUE,0)) - SUM(NVL(QUOTE_COST,0))) / (SUM(NVL(QUOTE_REVENUE,0)) + 0.001) "MARGIN %",
				SUM(NVL(QUOTE_COMPARE-QUOTE_REVENUE,0)) "SAVINGS",
				100 * (SUM(NVL(QUOTE_COMPARE,0)) - SUM(NVL(QUOTE_REVENUE,0))) / (SUM(NVL(QUOTE_COMPARE,0)) + 0.001) "SAVINGS %"
			FROM QUOTE_COMPONENT_POSITION
			WHERE QUOTE_ID = p_QUOTE_ID
				AND QUOTE_MONTH BETWEEN TRUNC(p_BEGIN_DATE,'MONTH') AND LAST_DAY(p_END_DATE)
				AND PERIOD_ID = DECODE(p_PERIOD_ID, g_TOTAL, PERIOD_ID, p_PERIOD_ID)
			GROUP BY QUOTE_SCENARIO, DECODE(p_PERIOD_TOTAL, g_TOTAL, p_END_DATE, QUOTE_MONTH)
			ORDER BY QUOTE_SCENARIO, QUOTE_MONTH;

	ELSIF p_RESULT_TYPE = c_SEASONAL_PER_UNIT_RATES THEN
        --SEASONAL per unit RATES
		OPEN p_CURSOR FOR
			SELECT QUOTE_SCENARIO,
				DECODE(p_PERIOD_TOTAL, g_TOTAL, p_END_DATE, QUOTE_MONTH) "QUOTE_MONTH",
                PRICING_SEASON,
                SEASONAL_COMPARE_RATE,
                SEASONAL_REVENUE_RATE,
                SEASONAL_COST_RATE,
				SUM(NVL(QUOTE_COMPARE,0)) / (SUM(NVL(QUOTE_ENERGY,0)) + 0.001) "COMPARE_$/_UNIT",
				SUM(NVL(QUOTE_REVENUE,0)) / (SUM(NVL(QUOTE_ENERGY,0)) + 0.001) "REVENUE_$/_UNIT",
				SUM(NVL(QUOTE_COST,0)) / (SUM(NVL(QUOTE_ENERGY,0)) + 0.001) "COST_$/_UNIT",
				SUM(NVL(QUOTE_REVENUE-QUOTE_COST,0)) "MARGIN",
				100 * (SUM(NVL(QUOTE_REVENUE,0)) - SUM(NVL(QUOTE_COST,0))) / (SUM(NVL(QUOTE_REVENUE,0)) + 0.001) "MARGIN %",
				SUM(NVL(QUOTE_COMPARE-QUOTE_REVENUE,0)) "SAVINGS",
				100 * (SUM(NVL(QUOTE_COMPARE,0)) - SUM(NVL(QUOTE_REVENUE,0))) / (SUM(NVL(QUOTE_COMPARE,0)) + 0.001) "SAVINGS %",
				SUM(NVL(QUOTE_ENERGY,0)) "QUOTE_ENERGY",
				MAX(NVL(QUOTE_DEMAND,0)) "QUOTE_DEMAND"
			FROM QUOTE_COMPONENT_POSITION
			WHERE QUOTE_ID = p_QUOTE_ID
				AND QUOTE_MONTH BETWEEN TRUNC(p_BEGIN_DATE,'MONTH') AND LAST_DAY(p_END_DATE)
				AND PERIOD_ID = DECODE(p_PERIOD_ID, g_TOTAL, PERIOD_ID, p_PERIOD_ID)
			GROUP BY QUOTE_SCENARIO,
                PRICING_SEASON,
                DECODE(p_PERIOD_TOTAL, g_TOTAL, p_END_DATE, QUOTE_MONTH),
                SEASONAL_COMPARE_RATE,
                SEASONAL_REVENUE_RATE,
                SEASONAL_COST_RATE
			ORDER BY QUOTE_SCENARIO, QUOTE_MONTH;

	ELSE
	    OPEN p_CURSOR FOR
	    	SELECT
		  		  NULL FROM DUAL;
	END IF;

END PRICING_ANALYSIS_RESULTS;
---------------------------------------------------------------------------------------------------
PROCEDURE GET_PARTICIPANT_ENROLLMENT
	(
	p_EVALUATION_ID IN NUMBER,
	p_PARTICIPANT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the appropriate entries in POSITION_ANALYSIS_ENROLLMENT table.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	    SELECT
	  		  ENROLLMENT_MONTH,
	  		  ENROLLMENT
		FROM  POSITION_ANALYSIS_ENROLLMENT
		WHERE PARTICIPANT_ID = p_PARTICIPANT_ID
		  AND EVALUATION_ID = p_EVALUATION_ID
		  --Note ENROLLMENT_MONTH is stored as midnite TRUNC'd date
		  AND ENROLLMENT_MONTH BETWEEN TRUNC(p_BEGIN_DATE) AND TRUNC(p_END_DATE)
  		ORDER BY ENROLLMENT_MONTH;

END GET_PARTICIPANT_ENROLLMENT;
---------------------------------------------------------------------------------------------------
PROCEDURE GET_POS_WEATHER_PARAM_VAL
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_INTERVAL IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
-- Answer the appropriate entries in POSITION_ANALYSIS_WEATHER table.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	IF p_PARAMETER_INTERVAL = 'H' THEN
	    UT.CUT_DATE_RANGE(p_MODEL_ID, p_BEGIN_DATE, p_END_DATE, LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
    ELSE	--Monthly and Daily Dates are TRUNCed (at midnite)
		v_BEGIN_DATE := TRUNC(p_BEGIN_DATE);
		v_END_DATE := TRUNC(p_END_DATE);
	END IF;

	OPEN p_CURSOR FOR
	    SELECT
			  PARAMETER_DATE "DATE",
	  		  PARAMETER_VAL "VALUE"
		FROM  POSITION_ANALYSIS_WEATHER
		WHERE EVALUATION_ID = p_EVALUATION_ID
		  AND STATION_ID = p_STATION_ID
		  AND PARAMETER_ID = p_PARAMETER_ID
		  AND PARAMETER_INTERVAL = p_PARAMETER_INTERVAL  --'M' or 'H', Monthly or Hourly
		  AND PARAMETER_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		ORDER BY 1;

END GET_POS_WEATHER_PARAM_VAL;
---------------------------------------------------------------------------------------------------
PROCEDURE GET_POS_WEATHER_PROJECTIONS
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_STATION_ID_LIST IN VARCHAR2,
	p_PARAMETER_INTERVAL IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

v_ID_TABLE GA.ID_TABLE;
v_WORK_ID NUMBER;
v_INDEX BINARY_INTEGER;
v_BEGIN_DATE DATE;
v_END_DATE DATE;

-- ANSWER THE APPROPRIATE ENTRIES IN POSITION_ANALYSIS_WEATHER TABLE.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	IF p_PARAMETER_INTERVAL = 'H' THEN
	    UT.CUT_DATE_RANGE(p_MODEL_ID, p_BEGIN_DATE, p_END_DATE, LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
    ELSE	--Monthly Dates are TRUNCed (at midnite)
		v_BEGIN_DATE := TRUNC(p_BEGIN_DATE);
		v_END_DATE := TRUNC(p_END_DATE);
	END IF;

	UT.IDS_FROM_STRING(p_STATION_ID_LIST,',',v_ID_TABLE);

	UT.GET_RTO_WORK_ID(v_WORK_ID);

	FOR v_INDEX IN v_ID_TABLE.FIRST..v_ID_TABLE.LAST LOOP
		IF v_ID_TABLE.EXISTS(v_INDEX) THEN
			UT.POST_RTO_WORK(v_WORK_ID, v_INDEX, v_ID_TABLE(v_INDEX));
		END IF;
	END LOOP;

	OPEN p_CURSOR FOR
	    SELECT J.STATION_ID,
			  STATION_NAME "Station",
			  J.PARAMETER_ID,
			  PARAMETER_NAME "Parameter",
	  		  'Average' "Measure",
			  J.PARAMETER_DATE "MONTH",
	  		  J.PARAMETER_VAL "VALUE"
		FROM  POSITION_ANALYSIS_WEATHER J,
			  WEATHER_STATION W,
			  WEATHER_PARAMETER P
		WHERE J.EVALUATION_ID = p_EVALUATION_ID
		  AND J.STATION_ID IN (SELECT WORK_XID FROM RTO_WORK WHERE WORK_ID = v_WORK_ID)
		  AND PARAMETER_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		  AND J.STATION_ID = W.STATION_ID
		  AND J.PARAMETER_ID = P.PARAMETER_ID
		  AND J.PARAMETER_INTERVAL = p_PARAMETER_INTERVAL  --'M' or 'H', Monthly or Hourly
		ORDER BY 2,4,5,6;

	UT.PURGE_RTO_WORK(v_WORK_ID);

	EXCEPTION
		WHEN OTHERS THEN
			BEGIN
				UT.PURGE_RTO_WORK(v_WORK_ID);
			EXCEPTION
				WHEN OTHERS THEN
					ERRS.LOG_AND_CONTINUE();
			END;
			ERRS.LOG_AND_RAISE();

END GET_POS_WEATHER_PROJECTIONS;
---------------------------------------------------------------------------------------------------
PROCEDURE GET_POS_MARKET_PRICE_VAL
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_INTERVAL IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_PRICE_INTERVAL VARCHAR(16);
-- Answer the appropriate entries in POSITION_ANALYSIS_SPOT_MARKET table.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;
	IF p_PRICE_INTERVAL = 'H' THEN
	    UT.CUT_DATE_RANGE(p_MODEL_ID, p_BEGIN_DATE, p_END_DATE, CUT_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
		v_PRICE_INTERVAL := p_PRICE_INTERVAL;
    ELSE	--Monthly, Daily Dates are TRUNCed (at midnite)
		v_BEGIN_DATE := TRUNC(p_BEGIN_DATE);
		v_END_DATE := TRUNC(p_END_DATE);
		IF p_PRICE_INTERVAL = 'A' THEN
		    v_PRICE_INTERVAL := 'H';
		ELSE
			v_PRICE_INTERVAL := p_PRICE_INTERVAL;
		END IF;
	END IF;

	OPEN p_CURSOR FOR
	    SELECT
			  PRICE_DATE "DATE",
	  		  PRICE_VAL "VALUE"
		FROM  POSITION_ANALYSIS_SPOT_MARKET
		WHERE EVALUATION_ID = p_EVALUATION_ID
		  AND MARKET_PRICE_ID = p_MARKET_PRICE_ID
		  AND PRICE_INTERVAL = v_PRICE_INTERVAL
		  AND PRICE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		ORDER BY 1;

END GET_POS_MARKET_PRICE_VAL;
---------------------------------------------------------------------------------------------------
PROCEDURE GET_POS_SPOT_MKT_PROJECTIONS
	(
	p_MODEL_ID IN NUMBER,
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

--v_BEGIN_DATE DATE;
--v_END_DATE DATE;

-- Answer the projections from POSITION_ANALYSIS_SPOT_MARKET table.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	--UT.CUT_DATE_RANGE(p_MODEL_ID, p_BEGIN_DATE, p_END_DATE, LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
	IF p_MODEL_ID = GA.ELECTRIC_MODEL THEN
		OPEN p_CURSOR FOR
		    SELECT
				  A.PRICE_DATE "MONTH",
		  		  B.PRICE_VAL "PEAK_AVERAGE",
		  		  D.PRICE_VAL "OFFPK_AVERAGE",
		  		  C.PRICE_VAL "PEAK_HISTORICAL",
		  		  A.PRICE_VAL "OFFPK_HISTORICAL",
		  		  X1.PEAK_FORWARD "PEAK_FORWARD",
		  		  X2.OFFPEAK_FORWARD "OFFPK_FORWARD",
		  		  X3.ANYTIME_FORWARD "ATC_FORWARD"
			FROM  POSITION_ANALYSIS_SPOT_MARKET A, POSITION_ANALYSIS_SPOT_MARKET B, POSITION_ANALYSIS_SPOT_MARKET C, POSITION_ANALYSIS_SPOT_MARKET D,
				  (SELECT
				  	  CONTRACT_MONTH,
					  GREATEST((BID_PRICE + ASK_PRICE)/2, (LOW_PRICE + HIGH_PRICE)/2) "PEAK_FORWARD"
					  FROM  MARKET_FORWARD_PRICE M1
					  WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
					    AND CONTRACT_TYPE = 'P'
						AND CONTRACT_DATE =
						    (SELECT MAX(CONTRACT_DATE)
				   	        FROM  MARKET_FORWARD_PRICE M2
				    	  	WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
						      AND M1.CONTRACT_MONTH = M2.CONTRACT_MONTH
							  AND M1.CONTRACT_TYPE = M2.CONTRACT_TYPE
						  	GROUP BY CONTRACT_MONTH, CONTRACT_TYPE
							)
					) X1,
				  (SELECT
				  	  CONTRACT_MONTH,
				  	  GREATEST((BID_PRICE + ASK_PRICE)/2, (LOW_PRICE + HIGH_PRICE)/2) "OFFPEAK_FORWARD"
					  FROM  MARKET_FORWARD_PRICE M1
					  WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
					    AND CONTRACT_TYPE = 'O'
						AND CONTRACT_DATE =
						    (SELECT MAX(CONTRACT_DATE)
				   	        FROM  MARKET_FORWARD_PRICE M2
				    	  	WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
						      AND M1.CONTRACT_MONTH = M2.CONTRACT_MONTH
							  AND M1.CONTRACT_TYPE = M2.CONTRACT_TYPE
						  	GROUP BY CONTRACT_MONTH, CONTRACT_TYPE
							)
					) X2,
				  (SELECT
				  	  CONTRACT_MONTH,
				  	  GREATEST((BID_PRICE + ASK_PRICE)/2, (LOW_PRICE + HIGH_PRICE)/2) "ANYTIME_FORWARD"
					  FROM  MARKET_FORWARD_PRICE M1
					  WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
					    AND CONTRACT_TYPE = 'A'
						AND CONTRACT_DATE =
						    (SELECT MAX(CONTRACT_DATE)
				   	        FROM  MARKET_FORWARD_PRICE M2
				    	  	WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
						      AND M1.CONTRACT_MONTH = M2.CONTRACT_MONTH
							  AND M1.CONTRACT_TYPE = M2.CONTRACT_TYPE
						  	GROUP BY CONTRACT_MONTH, CONTRACT_TYPE
							)
					) X3
			WHERE A.EVALUATION_ID = p_EVALUATION_ID
			  AND A.MARKET_PRICE_ID = p_MARKET_PRICE_ID
			  AND A.PRICE_INTERVAL = 'F'  -- "OFFPK_HISTORICAL"
			  AND A.PRICE_DATE BETWEEN TRUNC(p_BEGIN_DATE) AND TRUNC(p_END_DATE)
			  AND B.EVALUATION_ID(+) = A.EVALUATION_ID
			  AND B.MARKET_PRICE_ID(+) = A.MARKET_PRICE_ID
			  AND B.PRICE_INTERVAL(+) = 'P'  -- "PK_SEED"
			  AND B.PRICE_DATE(+) =A.PRICE_DATE
			  AND C.EVALUATION_ID(+) = A.EVALUATION_ID
			  AND C.MARKET_PRICE_ID(+) = A.MARKET_PRICE_ID
			  AND C.PRICE_INTERVAL(+) = 'K'  -- "PK_HISTORICAL"
			  AND C.PRICE_DATE(+) =A.PRICE_DATE
			  AND D.EVALUATION_ID(+) = A.EVALUATION_ID
			  AND D.MARKET_PRICE_ID(+) = A.MARKET_PRICE_ID
			  AND D.PRICE_INTERVAL(+) = 'O'  -- "OFFPK_SEED"
			  AND D.PRICE_DATE(+) =A.PRICE_DATE
			  AND X1.CONTRACT_MONTH(+) = A.PRICE_DATE
			  AND X2.CONTRACT_MONTH(+) = A.PRICE_DATE
			  AND X3.CONTRACT_MONTH(+) = A.PRICE_DATE
			ORDER BY 1;
	ELSE	--GAS MODEL
		OPEN p_CURSOR FOR
		    SELECT
				  A.PRICE_DATE "MONTH",
		  		  B.PRICE_VAL "AVERAGE",
		  		  A.PRICE_VAL "HISTORICAL",
		  		  X1.FORWARD "FORWARD"
			FROM  POSITION_ANALYSIS_SPOT_MARKET A, POSITION_ANALYSIS_SPOT_MARKET B,
				  (SELECT
				  	  CONTRACT_MONTH,
					  GREATEST((BID_PRICE + ASK_PRICE)/2, (LOW_PRICE + HIGH_PRICE)/2) "FORWARD"
					  FROM  MARKET_FORWARD_PRICE M1
					  WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
					    AND CONTRACT_TYPE = 'A'
						AND CONTRACT_DATE =
						    (SELECT MAX(CONTRACT_DATE)
				   	        FROM  MARKET_FORWARD_PRICE M2
				    	  	WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
						      AND M1.CONTRACT_MONTH = M2.CONTRACT_MONTH
							  AND M1.CONTRACT_TYPE = M2.CONTRACT_TYPE
						  	GROUP BY CONTRACT_MONTH, CONTRACT_TYPE
							)
					) X1
			WHERE A.EVALUATION_ID = p_EVALUATION_ID
			  AND A.MARKET_PRICE_ID = p_MARKET_PRICE_ID
			  AND (A.PRICE_INTERVAL = 'F' OR A.PRICE_INTERVAL = 'K') -- "HISTORICAL"
			  AND A.PRICE_DATE BETWEEN TRUNC(p_BEGIN_DATE) AND TRUNC(p_END_DATE)
			  AND B.EVALUATION_ID(+) = A.EVALUATION_ID
			  AND B.MARKET_PRICE_ID(+) = A.MARKET_PRICE_ID
			  AND (B.PRICE_INTERVAL = 'P' OR B.PRICE_INTERVAL = 'O')  -- "SEED"
			  AND B.PRICE_DATE(+) =A.PRICE_DATE
			  AND X1.CONTRACT_MONTH(+) = A.PRICE_DATE
			ORDER BY 1;
	END IF;

END GET_POS_SPOT_MKT_PROJECTIONS;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_PARTICIPANT_ENROLLMENT
	(
	p_EVALUATION_ID IN NUMBER,
	p_PARTICIPANT_ID IN NUMBER,
	p_ENROLLMENT_MONTH IN DATE,
	p_ENROLLMENT IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

-- Put a POSITION_ANALYSIS_ENROLLMENT record
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UPDATE POSITION_ANALYSIS_ENROLLMENT SET
		ENROLLMENT = p_ENROLLMENT,
		ENTRY_DATE = SYSDATE
	WHERE PARTICIPANT_ID = p_PARTICIPANT_ID
	  AND EVALUATION_ID = p_EVALUATION_ID
	  AND ENROLLMENT_MONTH = p_ENROLLMENT_MONTH;

	IF SQL%NOTFOUND THEN
		INSERT INTO POSITION_ANALYSIS_ENROLLMENT (
			EVALUATION_ID,
			PARTICIPANT_ID,
			ENROLLMENT_MONTH,
			ENROLLMENT,
			ENTRY_DATE)
		VALUES (
			p_EVALUATION_ID,
			p_PARTICIPANT_ID,
			p_ENROLLMENT_MONTH,
			p_ENROLLMENT,
			SYSDATE);
	END IF;

END PUT_PARTICIPANT_ENROLLMENT;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_POS_SPOT_MARKET_PRICE_LIST
	(
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_INTERVAL IN VARCHAR,
	p_DATE_VAL_LIST IN VARCHAR2,
	p_STATUS OUT NUMBER
	) AS

v_ARGUMENTS_TABLE GA.STRING_TABLE;
v_VALUES_TABLE GA.STRING_TABLE;
v_DATE_TIME_TABLE GA.STRING_TABLE;
v_DATE DATE;
v_INDEX BINARY_INTEGER;

-- Put multiple POSITION_ANALYSIS_SPOT_MARKET records from list of Dates, Values;
-- Note: Each SPOT_MARKET record is delimited by ";" (semicolon)
--   and the HED DateTime and Value that is in that record are separated by a "," (comma),
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UT.TOKENS_FROM_STRING(p_DATE_VAL_LIST, ';', v_ARGUMENTS_TABLE);  --Split records by semicolon
	--DBMS_OUTPUT.PUT_LINE('PUT_POS_SPOT_MARKET_PRICE_LIST.v_ARGUMENTS_TABLE.LAST = ' || SUBSTR(TO_CHAR(v_ARGUMENTS_TABLE.LAST),1,200));

	FOR v_INDEX IN v_ARGUMENTS_TABLE.FIRST..v_ARGUMENTS_TABLE.LAST LOOP
		IF LENGTH(v_ARGUMENTS_TABLE(v_INDEX)) > 0 THEN
			UT.TOKENS_FROM_STRING(v_ARGUMENTS_TABLE(v_INDEX), ',', v_VALUES_TABLE);  --Split date time and Value by comma

			UT.TOKENS_FROM_STRING(v_VALUES_TABLE(1), ' ', v_DATE_TIME_TABLE);  --Split HED date and time by space

			IF v_DATE_TIME_TABLE.LAST > 1 THEN
				v_DATE := FROM_HED(v_DATE_TIME_TABLE(1),v_DATE_TIME_TABLE(2));
			ELSE
				v_DATE := TO_DATE(v_DATE_TIME_TABLE(1), 'YYYY-MM-DD');
			END IF;

			PUT_POS_SPOT_MARKET_PRICE_VAL(
				p_EVALUATION_ID,
				p_MARKET_PRICE_ID,
				p_PRICE_INTERVAL,
				v_DATE,	--p_PRICE_DATE,
				TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(2)))),	--p_PRICE_VAL,
				p_STATUS);

		END IF;
	END LOOP;

END PUT_POS_SPOT_MARKET_PRICE_LIST;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_POS_SPOT_MARKET_PRICE_MON
	(
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_DATE IN DATE,
	p_PEAK_PRICE_VAL IN NUMBER,
	p_OFFPK_PRICE_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

-- Put PEAK AND OFFPK POSITION_ANALYSIS_SPOT_MARKET records.

BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	PUT_POS_SPOT_MARKET_PRICE_VAL (
		p_EVALUATION_ID,
		p_MARKET_PRICE_ID,
		'P',
		p_PRICE_DATE,
		p_PEAK_PRICE_VAL,
		p_STATUS);

	PUT_POS_SPOT_MARKET_PRICE_VAL (
		p_EVALUATION_ID,
		p_MARKET_PRICE_ID,
		'O',
		p_PRICE_DATE,
		p_OFFPK_PRICE_VAL,
		p_STATUS);

END PUT_POS_SPOT_MARKET_PRICE_MON;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_POS_SPOT_MARKET_PRICE_VAL
	(
	p_EVALUATION_ID IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_INTERVAL IN VARCHAR,
	p_PRICE_DATE IN DATE,
	p_PRICE_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

-- Put a POSITION_ANALYSIS_SPOT_MARKET record.

BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UPDATE POSITION_ANALYSIS_SPOT_MARKET SET
		PRICE_VAL = p_PRICE_VAL,
		ENTRY_DATE = SYSDATE
	WHERE  EVALUATION_ID = p_EVALUATION_ID
		AND MARKET_PRICE_ID = p_MARKET_PRICE_ID
		AND PRICE_INTERVAL = p_PRICE_INTERVAL  --'P' or 'O' Monthly, or 'H' Hourly
		AND PRICE_DATE = p_PRICE_DATE;

	IF SQL%NOTFOUND THEN
		INSERT INTO POSITION_ANALYSIS_SPOT_MARKET (
			EVALUATION_ID,
			MARKET_PRICE_ID,
			PRICE_INTERVAL,
			PRICE_DATE,
			PRICE_VAL,
			ENTRY_DATE)
		VALUES (
			p_EVALUATION_ID,
			p_MARKET_PRICE_ID,
			p_PRICE_INTERVAL,
			p_PRICE_DATE,
			p_PRICE_VAL,
			SYSDATE);
	END IF;

END PUT_POS_SPOT_MARKET_PRICE_VAL;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_POS_WEATHER_PARAMETER_LIST
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_INTERVAL IN VARCHAR,
	p_DATE_VAL_LIST IN VARCHAR2,
	p_STATUS OUT NUMBER
	) AS

v_ARGUMENTS_TABLE GA.STRING_TABLE;
v_VALUES_TABLE GA.STRING_TABLE;
v_DATE_TIME_TABLE GA.STRING_TABLE;
v_DATE DATE;
v_INDEX BINARY_INTEGER;

-- Put multiple POSITION_ANALYSIS_WEATHER records from list of Dates, Values;
-- Note: Each WEATHER record is delimited by ";" (semicolon)
--   and the HED DateTime and Value that is in that record are separated by a "," (comma),
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UT.TOKENS_FROM_STRING(p_DATE_VAL_LIST, ';', v_ARGUMENTS_TABLE);  --Split records by semicolon
	--DBMS_OUTPUT.PUT_LINE('PUT_POS_WEATHER_PARAMETER_LIST.v_ARGUMENTS_TABLE.LAST = ' || SUBSTR(TO_CHAR(v_ARGUMENTS_TABLE.LAST),1,200));

	FOR v_INDEX IN v_ARGUMENTS_TABLE.FIRST..v_ARGUMENTS_TABLE.LAST LOOP
		IF LENGTH(v_ARGUMENTS_TABLE(v_INDEX)) > 0 THEN
			UT.TOKENS_FROM_STRING(v_ARGUMENTS_TABLE(v_INDEX), ',', v_VALUES_TABLE);  --Split date time and Value by comma

			UT.TOKENS_FROM_STRING(v_VALUES_TABLE(1), ' ', v_DATE_TIME_TABLE);  --Split HED date and time by space

			IF v_DATE_TIME_TABLE.LAST > 1 THEN
				v_DATE := FROM_HED(v_DATE_TIME_TABLE(1),v_DATE_TIME_TABLE(2));
			ELSE
				v_DATE := TO_DATE(v_DATE_TIME_TABLE(1), 'YYYY-MM-DD');
			END IF;

			PUT_POS_WEATHER_PARAMETER_VAL(
				p_EVALUATION_ID,
				p_STATION_ID,
				p_PARAMETER_ID,
				p_PARAMETER_INTERVAL,
				v_DATE,	--p_PARAMETER_DATE,
				TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(2)))),	--p_PARAMETER_VAL,
				p_STATUS);

		END IF;
	END LOOP;

END PUT_POS_WEATHER_PARAMETER_LIST;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_POS_WEATHER_PARAMETER_VAL
	(
	p_EVALUATION_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_INTERVAL IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_PARAMETER_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

-- Put a POSITION_ANALYSIS_WEATHER record
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UPDATE POSITION_ANALYSIS_WEATHER SET
		PARAMETER_VAL = p_PARAMETER_VAL,
		ENTRY_DATE = SYSDATE
	WHERE  EVALUATION_ID = p_EVALUATION_ID
		AND STATION_ID = p_STATION_ID
		AND PARAMETER_ID = p_PARAMETER_ID
		AND PARAMETER_INTERVAL = p_PARAMETER_INTERVAL  --'M' or 'H', Monthly or Hourly
		AND PARAMETER_DATE = p_PARAMETER_DATE;

	IF SQL%NOTFOUND THEN
		INSERT INTO POSITION_ANALYSIS_WEATHER (
			EVALUATION_ID,
			STATION_ID,
			PARAMETER_ID,
			PARAMETER_INTERVAL,
			PARAMETER_DATE,
			PARAMETER_VAL,
			ENTRY_DATE)
		VALUES (
			p_EVALUATION_ID,
			p_STATION_ID,
			p_PARAMETER_ID,
			p_PARAMETER_INTERVAL,
			p_PARAMETER_DATE,
			p_PARAMETER_VAL,
			SYSDATE);
	END IF;


END PUT_POS_WEATHER_PARAMETER_VAL;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_POSITION_SUPPLY_BLOCK
	(
	p_EVALUATION_ID IN NUMBER,
	p_BLOCK_ORDER IN NUMBER,
	p_TEMPLATE_NAME IN VARCHAR,
	p_BLOCK_QUANTITY IN NUMBER,
	p_BLOCK_PRICE IN NUMBER,
	p_MARKET_PRICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

-- Put a POSITION_ANALYSIS_SUPPLY_BLOCK record
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UPDATE POSITION_ANALYSIS_SUPPLY_BLOCK SET
		TEMPLATE_NAME = p_TEMPLATE_NAME,
		BLOCK_QUANTITY = p_BLOCK_QUANTITY,
		BLOCK_PRICE = p_BLOCK_PRICE,
		MARKET_PRICE_ID = p_MARKET_PRICE_ID,
		BEGIN_DATE = p_BEGIN_DATE,
		END_DATE = p_END_DATE,
		ENTRY_DATE = SYSDATE
	WHERE BLOCK_ORDER = p_BLOCK_ORDER
		AND EVALUATION_ID = p_EVALUATION_ID;

	IF SQL%NOTFOUND THEN
		INSERT INTO POSITION_ANALYSIS_SUPPLY_BLOCK (
			EVALUATION_ID,
			BLOCK_ORDER,
			TEMPLATE_NAME,
			BLOCK_QUANTITY,
			BLOCK_PRICE,
			MARKET_PRICE_ID,
			BEGIN_DATE,
			END_DATE,
			ENTRY_DATE)
		VALUES (
			p_EVALUATION_ID,
			p_BLOCK_ORDER,
			p_TEMPLATE_NAME,
			p_BLOCK_QUANTITY,
			p_BLOCK_PRICE,
			p_MARKET_PRICE_ID,
			p_BEGIN_DATE,
			p_END_DATE,
			SYSDATE);
	END IF;

END PUT_POSITION_SUPPLY_BLOCK;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_POSITION_TRANSACTION
	(
	p_EVALUATION_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

-- Put a POSITION_ANALYSIS_TRANSACTION record
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UPDATE POSITION_ANALYSIS_TRANSACTION SET
		ENTRY_DATE = SYSDATE
	WHERE TRANSACTION_ID = p_TRANSACTION_ID
		AND EVALUATION_ID = p_EVALUATION_ID;

	IF SQL%NOTFOUND THEN
		INSERT INTO POSITION_ANALYSIS_TRANSACTION (
			EVALUATION_ID,
			TRANSACTION_ID,
			ENTRY_DATE)
		VALUES (
			p_EVALUATION_ID,
			p_TRANSACTION_ID,
			SYSDATE);
	END IF;

END PUT_POSITION_TRANSACTION;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_PROSPECT_CONSUMPTION
	(
	p_PROSPECT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PERIOD_CODE IN VARCHAR,
	p_PERIOD_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_ENERGY IN VARCHAR,
	p_DEMAND IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UPDATE PROSPECT_CONSUMPTION SET
		PERIOD_ID = NVL(p_PERIOD_ID, 0),
		TEMPLATE_ID = NVL(p_TEMPLATE_ID, 0),
		ENERGY = NVL(p_ENERGY, 0),
		DEMAND = NVL(p_DEMAND, 0)
	WHERE PROSPECT_ID = p_PROSPECT_ID
		AND BEGIN_DATE = p_BEGIN_DATE
		AND END_DATE = p_END_DATE
		AND PERIOD_CODE = NVL(p_PERIOD_CODE, '?');

	IF SQL%NOTFOUND THEN
		INSERT INTO PROSPECT_CONSUMPTION (
			PROSPECT_ID,
			BEGIN_DATE,
			END_DATE,
			PERIOD_CODE,
			PERIOD_ID,
			TEMPLATE_ID,
			ENERGY,
			DEMAND)
		VALUES (
			p_PROSPECT_ID,
			p_BEGIN_DATE,
			p_END_DATE,
			NVL(p_PERIOD_CODE, '?'),
			NVL(p_PERIOD_ID, 0),
			NVL(p_TEMPLATE_ID, 0),
			p_ENERGY,
			p_DEMAND);
	END IF;

END PUT_PROSPECT_CONSUMPTION;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_PROSPECT
	(
	p_SCREEN_ID IN NUMBER,
	p_PROSPECT_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_ACCOUNT_NUMBER IN VARCHAR,
	p_COMPARE_PRODUCT_ID IN NUMBER,
	p_PROFILE_CALENDAR_ID IN NUMBER,
	p_EDC_EXTERNAL_NAME IN VARCHAR,
	p_EDC_TARIFF IN VARCHAR,
	p_EDC_RATE_CLASS IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Put a PROSPECT record
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UPDATE PROSPECT SET
		PROSPECT_ID = p_PROSPECT_ID,
		EDC_ID = p_EDC_ID,
		COMPARE_PRODUCT_ID = p_COMPARE_PRODUCT_ID,
		PROFILE_CALENDAR_ID = p_PROFILE_CALENDAR_ID
	WHERE SCREEN_ID = p_SCREEN_ID
		AND EDC_NAME = p_EDC_EXTERNAL_NAME
		AND ACCOUNT_NUMBER = p_ACCOUNT_NUMBER
		AND EDC_TARIFF = p_EDC_TARIFF
		AND EDC_RATE_CLASS = p_EDC_RATE_CLASS;

	IF SQL%NOTFOUND THEN
		INSERT INTO PROSPECT (
			SCREEN_ID,
			PROSPECT_ID,
			EDC_ID,
			ACCOUNT_NUMBER,
			COMPARE_PRODUCT_ID,
			PROFILE_CALENDAR_ID,
			EDC_NAME,
			EDC_TARIFF,
			EDC_RATE_CLASS)
		VALUES (
			p_SCREEN_ID,
			p_PROSPECT_ID,
			p_EDC_ID,
			p_ACCOUNT_NUMBER,
			p_COMPARE_PRODUCT_ID,
			p_PROFILE_CALENDAR_ID,
			p_EDC_EXTERNAL_NAME,
			p_EDC_TARIFF,
			p_EDC_RATE_CLASS);
	END IF;

END PUT_PROSPECT;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_PROSPECT_DATA
	(
	p_SCREEN_ID IN NUMBER,
	p_PROSPECT_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_ACCOUNT_NUMBER IN VARCHAR,
	p_COMPARE_PRODUCT_ID IN NUMBER,
	p_PROFILE_CALENDAR_ID IN NUMBER,
	p_EDC_EXTERNAL_NAME IN VARCHAR,
	p_EDC_TARIFF IN VARCHAR,
	p_EDC_RATE_CLASS IN VARCHAR,
	p_CONSUMPTION_DATA_LIST IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

v_ARGUMENTS_TABLE GA.STRING_TABLE;
v_VALUES_TABLE GA.STRING_TABLE;
v_INDEX BINARY_INTEGER;
v_PROSPECT_ID NUMBER;

-- Put a PROSPECT record, and multiple records of PROSPECT_CONSUMPTION data
-- Note: Each PROSPECT_CONSUMPTION record is delimited by ";" (semicolon)
--   and each argument to PUT_PROSPECT_CONSUMPTION that is in that record is delimited by "," (comma),
--   so neither delimiter (";" or ",") can appear in the dates or numbers of the imported consumption fields.
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UT.TOKENS_FROM_STRING(p_CONSUMPTION_DATA_LIST, ';', v_ARGUMENTS_TABLE);

	IF p_PROSPECT_ID = CONSTANTS.NOT_ASSIGNED THEN
		SELECT QID.NEXTVAL INTO v_PROSPECT_ID FROM DUAL;
	ELSE
		v_PROSPECT_ID := p_PROSPECT_ID;
	END IF;

	PUT_PROSPECT(
			p_SCREEN_ID,
			v_PROSPECT_ID,
			p_EDC_ID,
			p_ACCOUNT_NUMBER,
			p_COMPARE_PRODUCT_ID,
			p_PROFILE_CALENDAR_ID,
			p_EDC_EXTERNAL_NAME,
			p_EDC_TARIFF,
			p_EDC_RATE_CLASS,
			p_STATUS);

	IF p_STATUS >= 0 THEN
		FOR v_INDEX IN v_ARGUMENTS_TABLE.FIRST..v_ARGUMENTS_TABLE.LAST LOOP
			IF LENGTH(v_ARGUMENTS_TABLE(v_INDEX)) > 0 THEN
				UT.TOKENS_FROM_STRING(v_ARGUMENTS_TABLE(v_INDEX), ',', v_VALUES_TABLE);
				PUT_PROSPECT_CONSUMPTION(v_PROSPECT_ID,
										 TO_DATE(v_VALUES_TABLE(1),'YYYYMMDD'),
										 TO_DATE(v_VALUES_TABLE(2),'YYYYMMDD'),
										 LTRIM(RTRIM(v_VALUES_TABLE(3))),  -- PERIOD_CODE
										 TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(4)))),  -- PERIOD_ID
										 TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(5)))),  -- TEMPLATE_ID
										 TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(6)))),--(6) -- ENERGY
										 TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(7)))),--(7) -- DEMAND
										 p_STATUS);
			END IF;
		END LOOP;
	END IF;

END PUT_PROSPECT_DATA;
---------------------------------------------------------------------------------------------------
PROCEDURE TOKENS_FROM_STRING_LARGE
	(
	p_STRING IN VARCHAR,
	p_DELIMETER IN CHAR,
	p_STRING_TABLE OUT STRING_TABLE_LARGE
	) AS

v_COUNT BINARY_INTEGER := 0;
v_BEGIN_POS NUMBER := 1;
v_END_POS NUMBER := 1;
v_LENGTH NUMBER;
v_TOKEN VARCHAR(2000);
v_LOOP_COUNTER NUMBER;

BEGIN

-- IF THE ARGUMENT STRING IS EMPTY THEN EXIT THE PROCEDURE

	IF LTRIM(RTRIM(p_STRING)) IS NULL THEN
		RETURN;
	END IF;

	v_LENGTH := LENGTH(p_STRING);
	v_LOOP_COUNTER := 0;

	LOOP
		v_END_POS := INSTR(p_STRING, p_DELIMETER, v_BEGIN_POS);
		IF v_END_POS = 0 THEN
			v_TOKEN := LTRIM(RTRIM(SUBSTR(p_STRING, v_BEGIN_POS)));
			v_END_POS := v_LENGTH;
		ELSE
			v_TOKEN := LTRIM(RTRIM(SUBSTR(p_STRING, v_BEGIN_POS, v_END_POS - v_BEGIN_POS)));
		END IF;
		v_COUNT := v_COUNT + 1;
		p_STRING_TABLE(v_COUNT) := v_TOKEN;
		v_BEGIN_POS := v_END_POS + 1;
		v_LOOP_COUNTER := v_LOOP_COUNTER + 1;
		IF v_LOOP_COUNTER > 10000 THEN
			ERRS.RAISE(MSGCODES.c_ERR_RUNAWAY_LOOP);
		END IF;
		EXIT WHEN v_BEGIN_POS > v_LENGTH;
	END LOOP;

-- IF THE ARGUMENT STRING IS TERMINATED WITH THE DELIMITER THEN APPEND A NULL STRING TOKEN TO THE TABLE

	IF SUBSTR(p_STRING, v_LENGTH) = p_DELIMETER THEN
		v_COUNT := v_COUNT + 1;
		p_STRING_TABLE(v_COUNT) := NULL;
	END IF;

	EXCEPTION
	    WHEN VALUE_ERROR THEN
			ERRS.RAISE(MSGCODES.c_ERR_GENERAL, 'VALUE_ERROR: LOOP_COUNTER=' || v_LOOP_COUNTER
			|| ',TOKEN=' || v_TOKEN
			|| ',BEGIN_POS=' || TO_CHAR(v_BEGIN_POS)
			|| ',END_POS=' || TO_CHAR(v_END_POS)
			|| ',LENGTH=' || TO_CHAR(v_LENGTH));

END TOKENS_FROM_STRING_LARGE;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_PROSPECT_DATA_MULTI_REC
	(
	p_SCREEN_ID IN NUMBER,
	p_MULTI_REC_DATA_LIST IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

v_ARGUMENTS_TABLE STRING_TABLE_LARGE;
v_VALUES_TABLE STRING_TABLE_LARGE;
v_INDEX BINARY_INTEGER;
v_VAL_INDEX BINARY_INTEGER;

-- Put multiple records of Prospect data
-- Note: Each Prospect's record is delimited by "|" (vertical bar)
--   and each argument to PUT_PROSPECT_DATA that is in that record is delimited by "~" (tilde),
--   so neither delimiter ("|" or "~") can appear in the imported data.
BEGIN

	IF NOT CAN_WRITE(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	QI.TOKENS_FROM_STRING_LARGE(p_MULTI_REC_DATA_LIST, '|', v_ARGUMENTS_TABLE);
	--DBMS_OUTPUT.PUT_LINE('PUT_PROSPECT_DATA_MULTI_REC.v_ARGUMENTS_TABLE.LAST = ' || SUBSTR(TO_CHAR(v_ARGUMENTS_TABLE.LAST),1,200));

	FOR v_INDEX IN v_ARGUMENTS_TABLE.FIRST..v_ARGUMENTS_TABLE.LAST LOOP
		IF LENGTH(v_ARGUMENTS_TABLE(v_INDEX)) > 0 THEN
			QI.TOKENS_FROM_STRING_LARGE(v_ARGUMENTS_TABLE(v_INDEX), '~', v_VALUES_TABLE);
			PUT_PROSPECT_DATA(
					p_SCREEN_ID,
					TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(1)))),	--v_PROSPECT_ID,
					TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(2)))),	--p_EDC_ID,
					v_VALUES_TABLE(3),				--p_ACCOUNT_NUMBER,
					TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(4)))),	--p_COMPARE_PRODUCT_ID,
					TO_NUMBER(LTRIM(RTRIM(v_VALUES_TABLE(5)))),	--p_PROFILE_CALENDAR_ID,
					v_VALUES_TABLE(6),				--p_EDC_EXTERNAL_NAME,
					v_VALUES_TABLE(7),				--p_EDC_TARIFF,
					v_VALUES_TABLE(8),				--p_EDC_RATE_CLASS,
					v_VALUES_TABLE(9),					--p_CONSUMPTION_DATA_LIST,
					p_STATUS);

		END IF;
	END LOOP;

END PUT_PROSPECT_DATA_MULTI_REC;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_PROSPECT_SCREEN_EVALUATION
    (
	p_SCREEN_ID IN NUMBER,
	p_OFFER_PRODUCT_ID IN NUMBER,
	p_COST_PRODUCT_ID IN NUMBER,
	p_COMPARE_PRODUCT_ID IN NUMBER,
	p_PROFILE_CALENDAR_ID IN NUMBER,
	p_PROSPECT_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_LOSS_FACTOR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_EVALUATION_ID IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

v_EVALUATION_ID NUMBER;

BEGIN

	p_STATUS := GA.SUCCESS;

	IF p_EVALUATION_ID = CONSTANTS.NOT_ASSIGNED THEN
		SELECT QID.NEXTVAL INTO v_EVALUATION_ID FROM DUAL;
	ELSE
		v_EVALUATION_ID := p_EVALUATION_ID;
	END IF;

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('PUT_PROSPECT_SCREEN_EVALUATION Begins at ' || UT.TRACE_DATE(SYSDATE));
		LOGS.LOG_DEBUG('SCREEN_ID=' || TO_CHAR(p_SCREEN_ID));
		LOGS.LOG_DEBUG('EVALUATION_ID=' || TO_CHAR(v_EVALUATION_ID));
		LOGS.LOG_DEBUG('OFFER_PRODUCT_ID=' || TO_CHAR(p_OFFER_PRODUCT_ID));
		LOGS.LOG_DEBUG('COST_PRODUCT_ID=' || TO_CHAR(p_COST_PRODUCT_ID));
		LOGS.LOG_DEBUG('COMPARE_PRODUCT_ID=' || TO_CHAR(p_COMPARE_PRODUCT_ID));
		LOGS.LOG_DEBUG('PROFILE_CALENDAR_ID=' || TO_CHAR(p_PROFILE_CALENDAR_ID));
		LOGS.LOG_DEBUG('PROSPECT_ID=' || TO_CHAR(p_PROSPECT_ID));
		LOGS.LOG_DEBUG('BEGIN_DATE=' || TO_CHAR(p_BEGIN_DATE));
		LOGS.LOG_DEBUG('END_DATE=' || TO_CHAR(p_END_DATE));
	END IF;

   UPDATE PROSPECT_SCREEN_EVALUATION SET
		OFFER_PRODUCT_ID = p_OFFER_PRODUCT_ID,
		COST_PRODUCT_ID = p_COST_PRODUCT_ID,
		BEGIN_DATE = TRUNC(p_BEGIN_DATE),
		END_DATE = TRUNC(p_END_DATE),
		STATION_ID = p_STATION_ID,
		LOSS_FACTOR_ID = p_LOSS_FACTOR_ID,
		ENTRY_DATE = SYSDATE
	WHERE SCREEN_ID = p_SCREEN_ID
		AND EVALUATION_ID = v_EVALUATION_ID
		AND PROSPECT_ID = p_PROSPECT_ID
		AND COMPARE_PRODUCT_ID = p_COMPARE_PRODUCT_ID
		AND PROFILE_CALENDAR_ID = p_PROFILE_CALENDAR_ID;

	IF SQL%NOTFOUND THEN
		IF LOGS.IS_DEBUG_ENABLED THEN
			LOGS.LOG_DEBUG('SQL%NOTFOUND - Insert Into PROSPECT_SCREEN_EVALUATION');
		END IF;
		INSERT INTO PROSPECT_SCREEN_EVALUATION (
			SCREEN_ID,
			OFFER_PRODUCT_ID,
			COST_PRODUCT_ID,
			COMPARE_PRODUCT_ID,
			PROFILE_CALENDAR_ID,
			PROSPECT_ID,
			STATION_ID,
			LOSS_FACTOR_ID,
			BEGIN_DATE,
			END_DATE,
			EVALUATION_ID,
			ENTRY_DATE)
		VALUES (
			p_SCREEN_ID,
			p_OFFER_PRODUCT_ID,
			p_COST_PRODUCT_ID,
			p_COMPARE_PRODUCT_ID,
			p_PROFILE_CALENDAR_ID,
			p_PROSPECT_ID,
			p_STATION_ID,
			p_LOSS_FACTOR_ID,
			TRUNC(p_BEGIN_DATE),
			TRUNC(p_END_DATE),
			v_EVALUATION_ID,
			SYSDATE);
	END IF;

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('PUT_PROSPECT_SCREEN_EVALUATION Finished at ' || UT.TRACE_DATE(SYSDATE));
	END IF;

END PUT_PROSPECT_SCREEN_EVALUATION;
---------------------------------------------------------------------------------------------------
PROCEDURE PROSPECT_EVAL_DISTINCT_OFFERS
	(
	p_SCREEN_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the PROSPECT_SCREEN_EVALUATION records
--   that match the SCREEN_ID.
-- If p_DISTINCT_OFFERS = 1 then only return records that have
--   DISTINCT combinations of COMPARE_PRODUCT_ID and PROFILE_CALENDAR_ID.
-- Used to populate the Evaluation Offers grid.
BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT A.OFFER_PRODUCT_ID,
			   P1.PRODUCT_NAME "Offer Product",
			   0 AS "Evaluate",
			   A.EVALUATION_ID "Offer Number",
			   A.COST_PRODUCT_ID,
			   P2.PRODUCT_NAME "Cost Product",
			   D.COMPARE_PRODUCT_ID,
			   P3.PRODUCT_NAME "Compare Product",
			   D.PROFILE_CALENDAR_ID,
			   C.CALENDAR_NAME "Load Profile Calendar",
			   A.LOSS_FACTOR_ID,
			   L.LOSS_FACTOR_NAME "Loss_Factor",
			   A.BEGIN_DATE "Begin_Date",
			   A.END_DATE "End_Date",
			   A.EVALUATION_ID
		FROM DISTINCT_PROSPECT_OFFERS D, PROSPECT_SCREEN_EVALUATION A, CALENDAR C, PRODUCT P1, PRODUCT P2, PRODUCT P3, LOSS_FACTOR L
		WHERE D.SCREEN_ID = p_SCREEN_ID
		  AND A.SCREEN_ID(+) = D.SCREEN_ID
		  AND A.COMPARE_PRODUCT_ID(+) = D.COMPARE_PRODUCT_ID
		  AND A.PROFILE_CALENDAR_ID(+) = D.PROFILE_CALENDAR_ID
		  AND P1.PRODUCT_ID(+) = A.OFFER_PRODUCT_ID
		  AND P2.PRODUCT_ID(+) = A.COST_PRODUCT_ID
		  AND P3.PRODUCT_ID = D.COMPARE_PRODUCT_ID
		  AND C.CALENDAR_ID = D.PROFILE_CALENDAR_ID
		  AND L.LOSS_FACTOR_ID(+) = A.LOSS_FACTOR_ID
		ORDER BY A.EVALUATION_ID;

END PROSPECT_EVAL_DISTINCT_OFFERS;
---------------------------------------------------------------------------------------------------
PROCEDURE PROSPECT_EVAL_OFFERS
	(
	p_SCREEN_ID IN NUMBER,
	p_SHOW_ALL_PROSPECTS IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the PROSPECT_SCREEN_EVALUATION records
--   that match the SCREEN_ID.
-- If p_SHOW_ALL_PROSPECTS = 0 then only return records that have
--   DISTINCT combinations of COMPARE_PRODUCT_ID and PROFILE_CALENDAR_ID.
-- Used to populate the Evaluation Offers grid.
BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	IF p_SHOW_ALL_PROSPECTS = 0 THEN
		OPEN p_CURSOR FOR
			SELECT A.OFFER_PRODUCT_ID,
				   P1.PRODUCT_NAME "Offer Product",
				   0 AS "Evaluate",
				   A.EVALUATION_ID "Offer Number",
				   A.COST_PRODUCT_ID,
				   P2.PRODUCT_NAME "Cost Product",
				   D.COMPARE_PRODUCT_ID,
				   P3.PRODUCT_NAME "Compare Product",
				   D.PROFILE_CALENDAR_ID,
				   C.CALENDAR_NAME "Load Profile Calendar",
				   A.LOSS_FACTOR_ID,
				   L.LOSS_FACTOR_NAME "Loss_Factor",
				   A.BEGIN_DATE "Begin_Date",
				   A.END_DATE "End_Date",
				   A.PROSPECT_ID,
				   A.EVALUATION_ID
			FROM (SELECT DISTINCT
					 SCREEN_ID,
					 COMPARE_PRODUCT_ID,
					 PROFILE_CALENDAR_ID
				  FROM PROSPECT
				  WHERE COMPARE_PRODUCT_ID > 0
				    AND PROFILE_CALENDAR_ID > 0
				  ) D,   --DISTINCT_PROSPECT_OFFERS D,
			    PROSPECT_SCREEN_EVALUATION A, CALENDAR C,
				PRODUCT P1, PRODUCT P2, PRODUCT P3, LOSS_FACTOR L
			WHERE D.SCREEN_ID = p_SCREEN_ID
			  AND A.SCREEN_ID(+) = D.SCREEN_ID
			  AND A.COMPARE_PRODUCT_ID(+) = D.COMPARE_PRODUCT_ID
			  AND A.PROFILE_CALENDAR_ID(+) = D.PROFILE_CALENDAR_ID
			  AND A.PROSPECT_ID(+) = 0   --PROSPECT_ID = 0 for Distinct Offers
			  AND P1.PRODUCT_ID(+) = A.OFFER_PRODUCT_ID
			  AND P2.PRODUCT_ID(+) = A.COST_PRODUCT_ID
			  AND P3.PRODUCT_ID = D.COMPARE_PRODUCT_ID
			  AND C.CALENDAR_ID = D.PROFILE_CALENDAR_ID
			  AND L.LOSS_FACTOR_ID(+) = A.LOSS_FACTOR_ID
			ORDER BY A.EVALUATION_ID;
    ELSE
		OPEN p_CURSOR FOR
			SELECT A.OFFER_PRODUCT_ID,
				   P1.PRODUCT_NAME "Offer Product",
				   0 AS "Evaluate",
				   A.EVALUATION_ID "Offer Number",
				   A.COST_PRODUCT_ID,
				   P2.PRODUCT_NAME "Cost Product",
				   D.COMPARE_PRODUCT_ID,
				   P3.PRODUCT_NAME "Compare Product",
				   D.PROFILE_CALENDAR_ID,
				   C.CALENDAR_NAME "Load Profile Calendar",
				   A.LOSS_FACTOR_ID,
				   L.LOSS_FACTOR_NAME "Loss_Factor",
				   A.BEGIN_DATE "Begin_Date",
				   A.END_DATE "End_Date",
				   D.PROSPECT_ID,
				   D.ACCOUNT_NUMBER,
				   D.EDC_NAME,
				   D.EDC_TARIFF,
				   D.EDC_RATE_CLASS,
				   A.EVALUATION_ID
			FROM
				PROSPECT D,
			    PROSPECT_SCREEN_EVALUATION A, CALENDAR C,
				PRODUCT P1, PRODUCT P2, PRODUCT P3, LOSS_FACTOR L
			WHERE D.SCREEN_ID = p_SCREEN_ID
			  AND A.SCREEN_ID(+) = D.SCREEN_ID
			  AND A.PROSPECT_ID(+) = D.PROSPECT_ID
			  AND A.COMPARE_PRODUCT_ID(+) = D.COMPARE_PRODUCT_ID
			  AND A.PROFILE_CALENDAR_ID(+) = D.PROFILE_CALENDAR_ID
			  AND P1.PRODUCT_ID(+) = A.OFFER_PRODUCT_ID
			  AND P2.PRODUCT_ID(+) = A.COST_PRODUCT_ID
			  AND P3.PRODUCT_ID = D.COMPARE_PRODUCT_ID
			  AND C.CALENDAR_ID = D.PROFILE_CALENDAR_ID
			  AND L.LOSS_FACTOR_ID(+) = A.LOSS_FACTOR_ID
			ORDER BY A.EVALUATION_ID;
	END IF;

END PROSPECT_EVAL_OFFERS;
---------------------------------------------------------------------------------------------------
PROCEDURE QUOTE_CALENDAR_PRODUCTS
	(
	p_QUOTE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the QUOTE_CALENDAR_PRODUCT records matching the criteria
BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT A.IS_SELECTED_OFFER "OFFER",
			   A.QUOTE_ID,
			   A.QUOTE_SCENARIO,
			   A.PROFILE_CALENDAR_ID "CALENDAR_ID",
			   B.CALENDAR_NAME,
			   A.COMPARE_PRODUCT_ID,
			   E.PRODUCT_NAME "COMPARE_PRODUCT",
			   A.OFFER_PRODUCT_ID,
			   C.PRODUCT_NAME "OFFER_PRODUCT",
			   A.COST_PRODUCT_ID,
			   D.PRODUCT_NAME "COST_PRODUCT",
			   A.LOSS_FACTOR_ID,
			   L.LOSS_FACTOR_NAME "LOSS_FACTOR",
			   A.USE_BILLING_DETERMINANTS "USE_HISTORICAL_USAGE",
			   A.ENTRY_DATE
		FROM QUOTE_CALENDAR_PRODUCT A, CALENDAR B, PRODUCT C, PRODUCT D, PRODUCT E, LOSS_FACTOR L
		WHERE A.QUOTE_ID = DECODE(p_QUOTE_ID, CONSTANTS.ALL_ID, QUOTE_ID, p_QUOTE_ID)
		  AND B.CALENDAR_ID(+) =A.PROFILE_CALENDAR_ID
		  AND C.PRODUCT_ID(+) = A.OFFER_PRODUCT_ID
		  AND D.PRODUCT_ID(+) = A.COST_PRODUCT_ID
		  AND E.PRODUCT_ID(+) = A.COMPARE_PRODUCT_ID
		  AND L.LOSS_FACTOR_ID(+) = A.LOSS_FACTOR_ID
		ORDER BY 1;

END QUOTE_CALENDAR_PRODUCTS;
---------------------------------------------------------------------------------------------------
PROCEDURE QUOTE_NAMES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the names of QUOTE_REQUESTs.

BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT
			   QUOTE_NAME,
			   QUOTE_ID,
			   CAMPAIGN_NAME,
			   CUSTOMER_NAME
		FROM QUOTE_REQUEST
		WHERE QUOTE_ID > 0
		ORDER BY QUOTE_NAME;

END QUOTE_NAMES;
---------------------------------------------------------------------------------------------------
PROCEDURE QUOTE_SCENARIOS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the names of QUOTE_SCENARIOS.

BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT
			  A.QUOTE_NAME,
			  A.QUOTE_ID,
			  B.QUOTE_SCENARIO,
			  A.CAMPAIGN_NAME,
			  A.CUSTOMER_NAME,
	  		  B.PROFILE_CALENDAR_ID "CALENDAR_ID",
			  C.CALENDAR_NAME "CALENDAR",
	  		  B.OFFER_PRODUCT_ID "PRODUCT_ID",
			  P.PRODUCT_NAME "PRODUCT",
			  A.STATION_ID,
			  W.STATION_NAME "STATION",
			  B.LOSS_FACTOR_ID,
			  L.LOSS_FACTOR_NAME "LOSS_FACTOR",
			  0.0 "USAGE_FACTOR",
			  A.NUMBER_OF_CUSTOMERS "ENROLLMENT"
		FROM QUOTE_REQUEST A, QUOTE_CALENDAR_PRODUCT B, CALENDAR C, PRODUCT P, LOSS_FACTOR L, WEATHER_STATION W
		WHERE A.QUOTE_ID > 0
		  AND A.QUOTE_ID = B.QUOTE_ID
		  AND B.PROFILE_CALENDAR_ID = C.CALENDAR_ID (+)
		  AND B.OFFER_PRODUCT_ID = P.PRODUCT_ID (+)
		  AND B.LOSS_FACTOR_ID = L.LOSS_FACTOR_ID (+)
		  AND A.STATION_ID = W.STATION_ID (+)
		ORDER BY QUOTE_NAME, QUOTE_SCENARIO;

END QUOTE_SCENARIOS;
---------------------------------------------------------------------------------------------------
PROCEDURE PRODUCTION_ACCOUNTS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the names of QUOTE_SCENARIOS.

BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT
			  A.ACCOUNT_NAME,
			  A.ACCOUNT_ID,
	  		  AC.CALENDAR_ID "CALENDAR_ID",
			  C.CALENDAR_NAME "CALENDAR",
	  		  AP.PRODUCT_ID "PRODUCT_ID",
			  P.PRODUCT_NAME "PRODUCT",
			  W.STATION_ID,
			  W.STATION_NAME "STATION",
			  AL.LOSS_FACTOR_ID,
			  L.LOSS_FACTOR_NAME "LOSS_FACTOR"
		FROM ACCOUNT A, ACCOUNT_SERVICE_LOCATION ASL, SERVICE_LOCATION SL, ACCOUNT_CALENDAR AC, CALENDAR C, ACCOUNT_PRODUCT AP, PRODUCT P, ACCOUNT_LOSS_FACTOR AL, LOSS_FACTOR L, WEATHER_STATION W
		WHERE A.ACCOUNT_ID > 0
		  AND A.ACCOUNT_ID = ASL.ACCOUNT_ID
		  AND SL.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
		  AND AC.CALENDAR_ID = C.CALENDAR_ID (+)
		  AND AP.PRODUCT_ID = P.PRODUCT_ID (+)
		  AND AL.LOSS_FACTOR_ID = L.LOSS_FACTOR_ID (+)
		  AND SL.WEATHER_STATION_ID = W.STATION_ID (+)
		ORDER BY ACCOUNT_NAME;

END PRODUCTION_ACCOUNTS;
---------------------------------------------------------------------------------------------------
PROCEDURE SCHEDULE_TEMPLATES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- ANSWER THE SCHEDULE_TEMPLATE NAMES IN SCHEDULE_TEMPLATE TABLE.
BEGIN
	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
	    SELECT
			  TEMPLATE_NAME
		FROM  SCHEDULE_TEMPLATE
  		ORDER BY 1;

END SCHEDULE_TEMPLATES;
---------------------------------------------------------------------------------------------------
PROCEDURE GET_CALENDAR_PROJECTION
	(
	p_MODEL_ID IN NUMBER,
	p_CALENDAR_ID IN NUMBER,
	p_PROJECTION_TYPE IN VARCHAR,
	p_TEMPLATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_INTERVAL IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the names and IDs of calendars.

v_AS_OF_DATE DATE;
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_INTERVAL VARCHAR(16);

BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;
	v_AS_OF_DATE := CORRECTED_AS_OF_DATE(p_AS_OF_DATE,'Profiling');

	IF SUBSTR(p_PROJECTION_TYPE,1,1) = 'M' THEN
		OPEN p_CURSOR FOR
			SELECT FROM_CUT_AS_HED(B.PROJECTION_DATE, STD_TIME_ZONE(LOCAL_TIME_ZONE), p_INTERVAL, p_MODEL_ID) AS PROJECTION_DATE,
				B.PERIOD_ID, SUM(B.ENERGY) AS ENERGY, MAX(B.DEMAND) AS DEMAND
			FROM CALENDAR_PROJECTION A, PROJECTION_PATTERN B
			WHERE CALENDAR_ID = p_CALENDAR_ID
				AND PROJECTION_TYPE = 'MONTH'
				AND TEMPLATE_ID = CONSTANTS.NOT_ASSIGNED
				AND AS_OF_DATE =
					(SELECT MAX(AS_OF_DATE)
					FROM CALENDAR_PROJECTION
					WHERE CALENDAR_ID = A.CALENDAR_ID
						AND PROJECTION_TYPE = A.PROJECTION_TYPE
						AND TEMPLATE_ID = A.TEMPLATE_ID
						AND AS_OF_DATE <= v_AS_OF_DATE)
				AND B.PROJECTION_ID = A.PROJECTION_ID
				AND B.PROJECTION_DATE BETWEEN TRUNC(p_BEGIN_DATE,'DD') AND TRUNC(p_END_DATE,'DD')
			GROUP BY FROM_CUT_AS_HED(B.PROJECTION_DATE, STD_TIME_ZONE(LOCAL_TIME_ZONE), p_INTERVAL, p_MODEL_ID), B.PERIOD_ID
			ORDER BY 1,2;
	ELSE
		SELECT DECODE(p_INTERVAL, 'DD', 'DAY', 'MM', 'MONTH', 'HOUR') INTO v_INTERVAL FROM DUAL;
		v_BEGIN_DATE := TRUNC(p_BEGIN_DATE, p_INTERVAL);
		v_END_DATE := ADVANCE_DATE(TRUNC(p_END_DATE, p_INTERVAL), v_INTERVAL);
		OPEN p_CURSOR FOR
			SELECT FROM_CUT_AS_HED(B.PROJECTION_DATE, STD_TIME_ZONE(LOCAL_TIME_ZONE), p_INTERVAL, 2) AS PROJECTION_DATE,
				B.PERIOD_ID, SUM(B.ENERGY) AS ENERGY, MAX(B.DEMAND) AS DEMAND
			FROM CALENDAR_PROJECTION A, PROJECTION_PATTERN B
			WHERE CALENDAR_ID = p_CALENDAR_ID
				AND PROJECTION_TYPE = 'DAY'
				AND TEMPLATE_ID = p_TEMPLATE_ID
				AND AS_OF_DATE =
					(SELECT MAX(AS_OF_DATE)
					FROM CALENDAR_PROJECTION
					WHERE CALENDAR_ID = A.CALENDAR_ID
						AND PROJECTION_TYPE = A.PROJECTION_TYPE
						AND TEMPLATE_ID = A.TEMPLATE_ID
						AND AS_OF_DATE <= v_AS_OF_DATE)
				AND B.PROJECTION_ID = A.PROJECTION_ID
				AND B.PROJECTION_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
			GROUP BY FROM_CUT_AS_HED(B.PROJECTION_DATE, STD_TIME_ZONE(LOCAL_TIME_ZONE), p_INTERVAL, 2), B.PERIOD_ID
			ORDER BY 1,2;
	END IF;


END GET_CALENDAR_PROJECTION;
---------------------------------------------------------------------------------------------------
PROCEDURE QUOTE_PRICING_SEASONS
	(
	p_QUOTE_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the QUOTE_CALENDAR_PRODUCT records matching the criteria
BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT
			   QUOTE_ID,
			   PRICING_MONTH,
			   PRICING_SEASON,
			   ENTRY_DATE
		FROM QUOTE_PRICING_SEASON
		WHERE (QUOTE_ID = p_QUOTE_ID OR p_QUOTE_ID = CONSTANTS.ALL_ID)
		ORDER BY 1;

END QUOTE_PRICING_SEASONS;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_QUOTE_PRICING_SEASON
	(
	p_QUOTE_ID IN NUMBER,
	p_PRICING_MONTH IN NUMBER,
	p_PRICING_SEASON IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

BEGIN

	p_STATUS := GA.SUCCESS;

	UPDATE QUOTE_PRICING_SEASON SET
		PRICING_SEASON = p_PRICING_SEASON,
		ENTRY_DATE = SYSDATE
	WHERE QUOTE_ID = p_QUOTE_ID
		AND PRICING_MONTH = p_PRICING_MONTH;

	IF SQL%NOTFOUND THEN
		INSERT INTO QUOTE_PRICING_SEASON (
			QUOTE_ID,
			PRICING_MONTH,
			PRICING_SEASON,
			ENTRY_DATE)
		VALUES (
			p_QUOTE_ID,
			p_PRICING_MONTH,
			p_PRICING_SEASON,
			SYSDATE);
	END IF;

END PUT_QUOTE_PRICING_SEASON;
---------------------------------------------------------------------------------------------------
PROCEDURE TREE_BRANCHES_ACCOUNT
    (
	p_REQUEST_TYPE IN CHAR,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_DISPLAY_PREFERENCE IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SORT_PREFERENCE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer a recordset containing the EDC-PSE-ESP relationships
-- p_SORT_PREFERENCE only code 2 supported here - Missing Values; Otherwise Alpha Sort

BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

    QC.TREE_BRANCHES_ACCOUNT
        (
    	p_REQUEST_TYPE,
    	p_MODEL_ID,
    	p_SCENARIO_ID,
    	p_DISPLAY_PREFERENCE,
    	p_BEGIN_DATE,
    	p_END_DATE,
    	p_AS_OF_DATE,
    	p_SORT_PREFERENCE,
    	p_STATUS,
    	p_CURSOR
    	);

END TREE_BRANCHES_ACCOUNT;
---------------------------------------------------------------------------------------------------
PROCEDURE TREE_BRANCHES_ENROLLMENT
    (
	p_REQUEST_TYPE IN CHAR,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_DISPLAY_PREFERENCE IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_INCLUDE_STANDARD_OFFER IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer a recordset containing the EDC-PSE-ESP relationships for Enrollment

BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

    QC.TREE_BRANCHES_ENROLLMENT
        (
    	p_REQUEST_TYPE,
    	p_MODEL_ID,
    	p_SCENARIO_ID,
    	p_DISPLAY_PREFERENCE,
    	p_BEGIN_DATE,
    	p_END_DATE,
    	p_AS_OF_DATE,
    	p_INCLUDE_STANDARD_OFFER,
    	p_STATUS,
    	p_CURSOR
    	);

END TREE_BRANCHES_ENROLLMENT;
---------------------------------------------------------------------------------------------------
PROCEDURE TREE_NODES_ACCOUNT
    (
	p_REQUEST_TYPE IN CHAR,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_PSE_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_POOL_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_SORT_PREFERENCE IN NUMBER,
	p_SEARCH_STRING IN VARCHAR := '%%',
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer a recordset containing the retail accounts associated with an EDC-PSE-ESP.

BEGIN

	QC.TREE_NODES_ACCOUNT(p_REQUEST_TYPE, p_MODEL_ID, p_SCENARIO_ID, p_EDC_ID, p_PSE_ID, p_ESP_ID, p_POOL_ID, p_BEGIN_DATE, p_END_DATE, p_AS_OF_DATE, p_SORT_PREFERENCE, p_SEARCH_STRING, p_STATUS, p_CURSOR);

END TREE_NODES_ACCOUNT;
---------------------------------------------------------------------------------------------------
END QI;
/
