CREATE OR REPLACE PACKAGE BODY DX AS
---------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.1 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ROLLUP (
	p_ROLLUP_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
v_ROLLUP RTO_ROLLUP%ROWTYPE;
v_ROLLUP_ID NUMBER;
v_ROLLUP_CATEGORY RTO_ROLLUP.ROLLUP_CATEGORY%TYPE;
CURSOR c_ROLLUP IS
	SELECT ROLLUP_ID
	FROM RTO_ROLLUP
	WHERE ROLLUP_PARENT_ID = p_ROLLUP_ID;
BEGIN

	IF NOT CAN_DELETE('Public') THEN
		ERRS.RAISE_NO_WRITE_MODULE('Public');
	END IF;

	SELECT * INTO v_ROLLUP FROM RTO_ROLLUP WHERE ROLLUP_ID = p_ROLLUP_ID;
	v_ROLLUP_CATEGORY := UPPER(LTRIM(RTRIM(v_ROLLUP.ROLLUP_CATEGORY)));
	IF v_ROLLUP_CATEGORY = 'DELIVERY' THEN
		UPDATE SERVICE_POINT
		SET ROLLUP_ID = 0
		WHERE ROLLUP_ID = v_ROLLUP.ROLLUP_ID;
	END IF;
	IF v_ROLLUP_CATEGORY = 'BUSINESS' THEN
		UPDATE SERVICE_LOCATION
		SET BUSINESS_ROLLUP_ID = 0
		WHERE BUSINESS_ROLLUP_ID = v_ROLLUP.ROLLUP_ID;
	END IF;
	IF v_ROLLUP_CATEGORY = 'GEOGRAPHIC' THEN
		UPDATE SERVICE_LOCATION
		SET GEOGRAPHIC_ROLLUP_ID = 0
		WHERE GEOGRAPHIC_ROLLUP_ID = v_ROLLUP.ROLLUP_ID;
	END IF;
--
-- DELETE ANY CHILDREN OF THIS ROLLUP
--
	OPEN c_ROLLUP;
	LOOP
		FETCH c_ROLLUP INTO v_ROLLUP_ID;
		EXIT WHEN c_ROLLUP%NOTFOUND;
		DX.REMOVE_ROLLUP(v_ROLLUP_ID,p_STATUS);
	END LOOP;
	CLOSE c_ROLLUP;
	DELETE RTO_ROLLUP WHERE ROLLUP_ID = p_ROLLUP_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_ROLLUP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PHONES_FOR_CONTACT
	(
	p_CONTACT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE ALL THE PHONE NUMBERS IN THE DATABASE FOR A CERTAIN CONTACT.
-- THIS IS NECESSARY TO ENSURE THAT A USER CAN DELETE RECORDS.
BEGIN

	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTACT_ID, EC.ED_CONTACT);

	DELETE FROM PHONE_NUMBER WHERE CONTACT_ID = p_CONTACT_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_PHONES_FOR_CONTACT;
----------------------------------------------------------------------------------------------------
-- Deprecated
PROCEDURE REMOVE_TRANSACTION
	(
	p_TRANSACTION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

    DE.DEL_TRANSACTION(p_TRANSACTION_ID, P_STATUS);

END REMOVE_TRANSACTION;
----------------------------------------------------------------------------------------------------
-- Deprecated
PROCEDURE REMOVE_SYSTEM_ACTION
	(
	p_ACTION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

    DE.DEL_SYSTEM_ACTION(p_ACTION_ID, P_STATUS);

END REMOVE_SYSTEM_ACTION;
----------------------------------------------------------------------------------------------------
-- Deprecated
PROCEDURE REMOVE_CONTACT
	(
	p_CONTACT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

    DE.DEL_CONTACT(p_CONTACT_ID, P_STATUS);

END REMOVE_CONTACT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ENTITY_DOMAIN_ADDRESS
	(
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_OWNER_ENTITY_ID IN NUMBER,
	p_CATEGORY_ID IN NUMBER
	) AS
BEGIN

	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_OWNER_ENTITY_ID, p_ENTITY_DOMAIN_ID);

 	DELETE FROM ENTITY_DOMAIN_ADDRESS
 	WHERE ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
 		AND OWNER_ENTITY_ID = p_OWNER_ENTITY_ID
 		AND CATEGORY_ID = p_CATEGORY_ID;

END REMOVE_ENTITY_DOMAIN_ADDRESS;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ENTITY_DOMAIN_CONTACT
	(
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_OWNER_ENTITY_ID IN NUMBER,
	p_CATEGORY_ID IN NUMBER,
	p_CONTACT_ID IN NUMBER
	) AS
BEGIN

	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_OWNER_ENTITY_ID, p_ENTITY_DOMAIN_ID);

 	DELETE FROM ENTITY_DOMAIN_CONTACT
 	WHERE ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
 		AND OWNER_ENTITY_ID = p_OWNER_ENTITY_ID
 		AND CATEGORY_ID = p_CATEGORY_ID
		AND CONTACT_ID = p_CONTACT_ID;

END REMOVE_ENTITY_DOMAIN_CONTACT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ENTITY_COLUMN
	(
    p_REALM_ID NUMBER,
    p_ENTITY_COLUMN VARCHAR2
    ) AS

BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_REALM_ID, EC.ED_SYSTEM_REALM);

    DELETE FROM SYSTEM_REALM_COLUMN A
    WHERE A.REALM_ID = p_REALM_ID
    	AND A.ENTITY_COLUMN = p_ENTITY_COLUMN;

END REMOVE_ENTITY_COLUMN;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CATEGORY
	(
	o_SUCCESS OUT NUMBER,
	p_CATEGORY_ID IN NUMBER
	)
	AS
v_COUNT NUMBER;
--CHECK TO MAKE SURE THE CATEGORY IS NOT IN USE BY ANY RECORD
--IN EITHER THE ADDRESS TABLE OR THE CONTACT TABLE.
--IF IT IS, RETURN v_CATEGORY_IN_USE.  OTHERWISE, DELETE THE RECORD.
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_DELETE_ENT, p_CATEGORY_ID, EC.ED_CATEGORY);

	SELECT COUNT(1)
	INTO v_COUNT
	FROM (SELECT 1 FROM ENTITY_DOMAIN_CONTACT
			WHERE CATEGORY_ID = p_CATEGORY_ID
			UNION ALL
			SELECT 1 FROM ENTITY_DOMAIN_ADDRESS
			WHERE CATEGORY_ID = p_CATEGORY_ID);

	IF v_COUNT <> 0 THEN
		o_SUCCESS := GA.CATEGORY_IN_USE;
		RETURN;
	ELSE
		--THE CATEGORY IS NOT IN USE
		DELETE FROM CATEGORY WHERE CATEGORY_ID = p_CATEGORY_ID;
		o_SUCCESS := GA.SUCCESS;
	END IF;

END REMOVE_CATEGORY;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CONTACT_CATEGORY
    (
    p_CONTACT_ID IN NUMBER,
    p_CATEGORY_ID IN NUMBER
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTACT_ID, EC.ED_CONTACT);

    DELETE CONTACT_CATEGORY
    WHERE CONTACT_ID = p_CONTACT_ID
        AND CATEGORY_ID = p_CATEGORY_ID;

END REMOVE_CONTACT_CATEGORY;
----------------------------------------------------------------------------------------------------
-- Deprecated
PROCEDURE REMOVE_CALENDAR
	(
	p_CALENDAR_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

	DE.DEL_CALENDAR(p_CALENDAR_ID, p_STATUS);

END REMOVE_CALENDAR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CALENDAR_ADJUSTMENT
	(
	p_CALENDAR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
--REMOVE THE SPECIFIED CALENDAR_ADJUSTMENT
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CALENDAR_ID, EC.ED_CALENDAR);

	DELETE FROM CALENDAR_ADJUSTMENT
	WHERE CALENDAR_ID = p_CALENDAR_ID AND
		BEGIN_DATE = TRUNC(p_BEGIN_DATE);

	p_STATUS := GA.SUCCESS;

END REMOVE_CALENDAR_ADJUSTMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CALENDAR_PROFILE
	(
	p_CALENDAR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_PROFILE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
--REMOVE THE SPECIFIED CALENDAR_PROFILE
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CALENDAR_ID, EC.ED_CALENDAR);

	DELETE FROM CALENDAR_PROFILE
	WHERE CALENDAR_ID = p_CALENDAR_ID AND
		BEGIN_DATE = TRUNC(p_BEGIN_DATE) AND
		PROFILE_ID = p_PROFILE_ID;

	p_STATUS := GA.SUCCESS;

END REMOVE_CALENDAR_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CALENDAR_PROFILE_LIB
	(
	p_CALENDAR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)	AS
--REMOVE THE SPECIFIED CALENDAR_PROFILE
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CALENDAR_ID, EC.ED_CALENDAR);

	DELETE FROM CALENDAR_PROFILE_LIBRARY
	WHERE CALENDAR_ID = p_CALENDAR_ID AND
		BEGIN_DATE = TRUNC(p_BEGIN_DATE) AND
		PROFILE_LIBRARY_ID = p_PROFILE_LIBRARY_ID;

	p_STATUS := GA.SUCCESS;

END REMOVE_CALENDAR_PROFILE_LIB;
----------------------------------------------------------------------------------------------------
-- Deprecated
PROCEDURE REMOVE_ACCOUNT
	(
	p_ACCOUNT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
BEGIN

	DE.DEL_ACCOUNT(p_ACCOUNT_ID, p_STATUS);

END REMOVE_ACCOUNT;
----------------------------------------------------------------------------------------------------
-- Deprecated
PROCEDURE REMOVE_SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
BEGIN

	DE.DEL_SERVICE_LOCATION(p_SERVICE_LOCATION_ID, p_STATUS);

END REMOVE_SERVICE_LOCATION;
----------------------------------------------------------------------------------------------------
-- Deprecated
PROCEDURE REMOVE_METER
	(
	p_METER_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
BEGIN

	DE.DEL_METER(p_METER_ID, p_STATUS);

END REMOVE_METER;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ENTITY_ATTRIBUTE_VALUE
	(
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_OWNER_ENTITY_ID IN NUMBER,
	p_ATTRIBUTE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_OWNER_ENTITY_ID, p_ENTITY_DOMAIN_ID);

	DELETE FROM TEMPORAL_ENTITY_ATTRIBUTE
	WHERE ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
		AND OWNER_ENTITY_ID = p_OWNER_ENTITY_ID
		AND ATTRIBUTE_ID = p_ATTRIBUTE_ID
		AND BEGIN_DATE = p_BEGIN_DATE;

	p_STATUS := GA.SUCCESS;

END REMOVE_ENTITY_ATTRIBUTE_VALUE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_TEMPORAL_ATTRIBUTE
	(
	p_OWNER_ENTITY_ID IN NUMBER,
	p_ATTRIBUTE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
v_ENTITY_DOMAIN_ID	ENTITY_ATTRIBUTE.ENTITY_DOMAIN_ID%TYPE;
BEGIN
	SELECT ENTITY_DOMAIN_ID
	INTO v_ENTITY_DOMAIN_ID
	FROM ENTITY_ATTRIBUTE
	WHERE ATTRIBUTE_ID = p_ATTRIBUTE_ID;

	REMOVE_ENTITY_ATTRIBUTE_VALUE(v_ENTITY_DOMAIN_ID, p_OWNER_ENTITY_ID, p_ATTRIBUTE_ID, p_BEGIN_DATE, p_STATUS);

END REMOVE_TEMPORAL_ATTRIBUTE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
	IF NOT CAN_DELETE('Public') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Public');
	END IF;

	DELETE FROM ENTITY_ATTRIBUTE
	WHERE ATTRIBUTE_ID = p_ATTRIBUTE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_ENTITY_ATTRIBUTE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_CALENDAR
	(
	p_CASE_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_CALENDAR_ID IN NUMBER,
	p_CALENDAR_TYPE IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_CALENDAR
	WHERE CASE_ID = p_CASE_ID AND
		ACCOUNT_ID = p_ACCOUNT_ID AND
		CALENDAR_ID = p_CALENDAR_ID AND
		CALENDAR_TYPE = p_CALENDAR_TYPE AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_CALENDAR;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_CONTRACT
	(
	p_CONTRACT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM SERVICE_CONTRACT
	WHERE CONTRACT_ID = p_CONTRACT_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_CONTRACT;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_CONTRACT_LIMIT_QUANTITY
	(
	p_CONTRACT_ID IN NUMBER,
	p_LIMIT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTRACT_ID, EC.ED_INTERCHANGE_CONTRACT);

	DELETE FROM CONTRACT_LIMIT_QUANTITY
	WHERE CONTRACT_ID = p_CONTRACT_ID AND
	   LIMIT_ID = p_LIMIT_ID AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;
END REMOVE_CONTRACT_LIMIT_QUANTITY;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_CONTRACT_LIMIT
   (
	p_LIMIT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM CONTRACT_LIMIT
	WHERE LIMIT_ID = p_LIMIT_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_CONTRACT_LIMIT;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_BILL_CYCLE_PERIOD
   (
	p_BILL_CYCLE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
CURSOR c_BILL_CYCLE_PERIOD IS
	SELECT *
	FROM BILL_CYCLE_PERIOD
	WHERE BILL_CYCLE_ID = p_BILL_CYCLE_ID
	ORDER BY BEGIN_DATE DESC;
v_END_DATE DATE;
v_INITIAL BOOLEAN;
v_BILL_CYCLE_PERIOD BILL_CYCLE_PERIOD%ROWTYPE;
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_BILL_CYCLE_ID, EC.ED_BILL_CYCLE);


	DELETE FROM BILL_CYCLE_PERIOD
	WHERE BILL_CYCLE_ID = p_BILL_CYCLE_ID AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

-- MAKE SURE THEY ALL LINE UP.
	OPEN c_BILL_CYCLE_PERIOD;
	v_INITIAL := TRUE;
	LOOP
		FETCH c_BILL_CYCLE_PERIOD INTO v_BILL_CYCLE_PERIOD;
		EXIT WHEN c_BILL_CYCLE_PERIOD%NOTFOUND;
		IF v_INITIAL THEN
			v_END_DATE := v_BILL_CYCLE_PERIOD.END_DATE;
			v_INITIAL := FALSE;
		END IF;
		UPDATE BILL_CYCLE_PERIOD
		SET END_DATE = GREATEST(v_END_DATE, v_BILL_CYCLE_PERIOD.BEGIN_DATE)
		WHERE BILL_CYCLE_ID = v_BILL_CYCLE_PERIOD.BILL_CYCLE_ID
			AND BEGIN_DATE = v_BILL_CYCLE_PERIOD.BEGIN_DATE;
		v_END_DATE := v_BILL_CYCLE_PERIOD.BEGIN_DATE - 1;
	END LOOP;
	CLOSE c_BILL_CYCLE_PERIOD;
END REMOVE_BILL_CYCLE_PERIOD;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_BILL_CYCLE
   (
	p_BILL_CYCLE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM BILL_CYCLE
	WHERE BILL_CYCLE_ID = p_BILL_CYCLE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_BILL_CYCLE;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_ACCOUNT_EDC
	(
	p_ACCOUNT_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_EDC
	WHERE ACCOUNT_ID = p_ACCOUNT_ID AND
		EDC_ID = p_EDC_ID AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_EDC;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_ESP
	(
	p_ACCOUNT_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_POOL_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_ESP
	WHERE ACCOUNT_ID = p_ACCOUNT_ID AND
		ESP_ID = p_ESP_ID AND
		POOL_ID = p_POOL_ID AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_ESP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_LOSS_FACTOR
	(
	p_CASE_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_LOSS_FACTOR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_LOSS_FACTOR
	WHERE CASE_ID = p_CASE_ID AND
		ACCOUNT_ID = p_ACCOUNT_ID AND
		LOSS_FACTOR_ID = p_LOSS_FACTOR_ID AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SERVICE_LOCATION_MRSP
	(
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_MRSP_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM SERVICE_LOCATION_MRSP
	WHERE SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID AND
		MRSP_ID = p_MRSP_ID AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_SERVICE_LOCATION_MRSP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_PRODUCT
	(
	p_CASE_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_PRODUCT_ID IN NUMBER,
	p_PRODUCT_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_PRODUCT
	WHERE CASE_ID = p_CASE_ID AND
		ACCOUNT_ID = p_ACCOUNT_ID AND
		PRODUCT_ID = p_PRODUCT_ID AND
		PRODUCT_TYPE = p_PRODUCT_TYPE AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_PRODUCT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_SERVICE_LOCATN
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_SERVICE_LOCATION
	WHERE ACCOUNT_ID = p_ACCOUNT_ID AND
		SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_SERVICE_LOCATN;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_ACCOUNT_USAGE_FACTOR
	(
	p_CASE_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_USAGE_FACTOR
	WHERE CASE_ID = p_CASE_ID AND
		ACCOUNT_ID = p_ACCOUNT_ID AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_USAGE_FACTOR;

PROCEDURE REMOVE_ESP
	(
	p_ESP_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ENERGY_SERVICE_PROVIDER
	WHERE ESP_ID = p_ESP_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_ESP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_EDC
	(
	p_EDC_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ENERGY_DISTRIBUTION_COMPANY
	WHERE EDC_ID = p_EDC_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_EDC;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SC
	(
	p_SC_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM SCHEDULE_COORDINATOR
	WHERE SC_ID = p_SC_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_SC;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_MRSP
	(
	p_MRSP_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM METER_READING_SERVICE_PROVIDER
	WHERE MRSP_ID = p_MRSP_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_MRSP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_TP
	(
	p_TP_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM TRANSMISSION_PROVIDER
	WHERE TP_ID = p_TP_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_TP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CA
	(
	p_CA_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM CONTROL_AREA
	WHERE CA_ID = p_CA_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_CA;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PSE
	(
	p_PSE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM PURCHASING_SELLING_ENTITY
	WHERE PSE_ID = p_PSE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_PSE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_GROUP
	(
	p_ACCOUNT_GROUP_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_GROUP
	WHERE ACCOUNT_GROUP_ID = p_ACCOUNT_GROUP_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_GROUP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CONTACT_PHONE_NUMBER
	(
	p_CONTACT_ID IN NUMBER,
	p_PHONE_TYPE IN VARCHAR2
	)
	AS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTACT_ID, EC.ED_CONTACT);

	DELETE FROM PHONE_NUMBER
	WHERE CONTACT_ID = p_CONTACT_ID
		AND PHONE_TYPE = p_PHONE_TYPE;

END REMOVE_CONTACT_PHONE_NUMBER;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_METER_CALENDAR
	(
	p_CASE_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_CALENDAR_ID IN NUMBER,
	p_CALENDAR_TYPE IN VARCHAR2,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM METER_CALENDAR
	WHERE CASE_ID = p_CASE_ID AND
		METER_ID = p_METER_ID AND
		CALENDAR_ID = p_CALENDAR_ID AND
		UPPER(CALENDAR_TYPE) = LTRIM(RTRIM(UPPER(p_CALENDAR_TYPE))) AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_METER_CALENDAR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_METER_PRODUCT
	(
	p_CASE_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_PRODUCT_ID IN NUMBER,
	p_PRODUCT_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM METER_PRODUCT
	WHERE CASE_ID = p_CASE_ID AND
		METER_ID = p_METER_ID AND
		PRODUCT_ID = p_PRODUCT_ID AND
		PRODUCT_TYPE = p_PRODUCT_TYPE AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_METER_PRODUCT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_METER_USAGE_FACTOR
	(
	p_CASE_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM METER_USAGE_FACTOR
	WHERE CASE_ID = p_CASE_ID AND
		METER_ID = p_METER_ID AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_METER_USAGE_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_METER_LOSS_FACTOR
	(
	p_CASE_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_LOSS_FACTOR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM METER_LOSS_FACTOR
	WHERE CASE_ID = p_CASE_ID AND
		METER_ID = p_METER_ID AND
		LOSS_FACTOR_ID = p_LOSS_FACTOR_ID AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_METER_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PSE_ESP
	(
	p_ESP_ID IN NUMBER,
	p_PSE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_ESP_ID, EC.ED_ESP);

	DELETE FROM PSE_ESP
	WHERE ESP_ID = p_ESP_ID AND
		PSE_ID = p_PSE_ID AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;
END REMOVE_PSE_ESP;


----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PSE_CUSTOM_INVOICE
	(
	p_PSE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PSE_ID, EC.ED_PSE);

	DELETE FROM PSE_CUSTOM_INVOICE
	WHERE PSE_ID = p_PSE_ID AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;
END REMOVE_PSE_CUSTOM_INVOICE;


----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_EDC_RATE_CLASS
	(
	p_EDC_ID IN NUMBER,
	p_RATE_CLASS IN VARCHAR,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_EDC_ID, EC.ED_EDC);

	DELETE FROM EDC_RATE_CLASS
	WHERE EDC_ID = p_EDC_ID AND
		LTRIM(RTRIM(UPPER(RATE_CLASS))) = LTRIM(RTRIM(UPPER(p_RATE_CLASS)));
	p_STATUS := GA.SUCCESS;
END REMOVE_EDC_RATE_CLASS;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_LOSS_FACTOR
	(
	p_LOSS_FACTOR_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM LOSS_FACTOR
	WHERE LOSS_FACTOR_ID = p_LOSS_FACTOR_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_LOSS_FACTOR_MODEL
	(
	p_PATTERN_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS

-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM LOSS_FACTOR_MODEL
	WHERE PATTERN_ID = p_PATTERN_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_LOSS_FACTOR_MODEL;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SERVICE_LOCATION_METER
	(
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM SERVICE_LOCATION_METER
	WHERE SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID AND
		METER_ID = p_METER_ID AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_SERVICE_LOCATION_METER;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT
	(
	p_COMPONENT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT
	WHERE COMPONENT_ID = p_COMPONENT_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PRODUCT
	(
	p_PRODUCT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM PRODUCT
	WHERE PRODUCT_ID = p_PRODUCT_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_PRODUCT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_BLOCK_RATE
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_BLOCK_MIN IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_BLOCK_RATE
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
        AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND BEGIN_DATE = p_BEGIN_DATE
		AND BLOCK_MIN = p_BLOCK_MIN;
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_BLOCK_RATE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PRODUCT_COMPONENT
	(
	p_PRODUCT_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PRODUCT_ID, EC.ED_PRODUCT);

	DELETE FROM PRODUCT_COMPONENT
	WHERE PRODUCT_ID = p_PRODUCT_ID
		AND COMPONENT_ID = p_COMPONENT_ID
		AND BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;
END REMOVE_PRODUCT_COMPONENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_FLAT_RATE
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_FLAT_RATE
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_FLAT_RATE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_MARKET_PRICE
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_MARKET_PRICE
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_MARKET_PRICE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_TOU_RATE
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_PERIOD_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_TOU_RATE
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
		AND PERIOD_ID = p_PERIOD_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_TOU_RATE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SEASON
	(
	p_SEASON_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM SEASON
	WHERE SEASON_ID = p_SEASON_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_SEASON;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PERIOD
	(
	p_PERIOD_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM PERIOD
	WHERE PERIOD_ID = p_PERIOD_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_PERIOD;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_HOLIDAY
	(
	p_HOLIDAY_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM HOLIDAY
	WHERE HOLIDAY_ID = p_HOLIDAY_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_HOLIDAY;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_HOLIDAY_OBSERVANCE
	(
	p_HOLIDAY_ID IN NUMBER,
	p_HOLIDAY_YEAR IN NUMBER,
	p_STATUS OUT NUMBER
	)AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_HOLIDAY_ID, EC.ED_HOLIDAY);

	DELETE FROM HOLIDAY_OBSERVANCE
	WHERE HOLIDAY_ID = p_HOLIDAY_ID
		AND HOLIDAY_YEAR = p_HOLIDAY_YEAR;
	p_STATUS := GA.SUCCESS;
END REMOVE_HOLIDAY_OBSERVANCE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_HOLIDAY_SCHEDULE
	(
	p_HOLIDAY_SET_ID IN NUMBER,
	p_HOLIDAY_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_HOLIDAY_SET_ID, EC.ED_HOLIDAY_SET);

	DELETE FROM HOLIDAY_SCHEDULE
	WHERE HOLIDAY_SET_ID = p_HOLIDAY_SET_ID
		AND HOLIDAY_ID = p_HOLIDAY_ID;
	p_STATUS := GA.SUCCESS;
END REMOVE_HOLIDAY_SCHEDULE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_HOLIDAY_SET
	(
	p_HOLIDAY_SET_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM HOLIDAY_SET
	WHERE HOLIDAY_SET_ID = p_HOLIDAY_SET_ID;

	p_STATUS := GA.SUCCESS;

END REMOVE_HOLIDAY_SET;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_TEMPLATE
	(
	p_TEMPLATE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM TEMPLATE
	WHERE TEMPLATE_ID = p_TEMPLATE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_TEMPLATE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SEASON_TEMPLATES
	(
	p_TEMPLATE_ID IN NUMBER,
	p_SEASON_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- DELETE ALL EXISTING SEASON TEMPLATES FOR THE CURRENT SEASON AND TEMPLATE.
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM SEASON_TEMPLATE
	WHERE TEMPLATE_ID = p_TEMPLATE_ID
		AND SEASON_ID = p_SEASON_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_SEASON_TEMPLATES;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_TP_CONTRACT_NUMBER
	(
	p_CONTRACT_ID IN NUMBER,
	p_TP_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTRACT_ID, EC.ED_INTERCHANGE_CONTRACT);

	DELETE FROM TP_CONTRACT_NUMBER
	WHERE CONTRACT_ID = p_CONTRACT_ID
		AND TP_ID = p_TP_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;
END REMOVE_TP_CONTRACT_NUMBER;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_AGGREGATE_ACCOUNT_ESP
	(
	p_ACCOUNT_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_POOL_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM AGGREGATE_ACCOUNT_ESP
	WHERE ACCOUNT_ID = p_ACCOUNT_ID AND
		ESP_ID = p_ESP_ID AND
		POOL_ID = p_POOL_ID AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_AGGREGATE_ACCOUNT_ESP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ESP_POOL
	(
	p_POOL_ID IN NUMBER,
	p_ESP_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_POOL_ID, EC.ED_POOL);

	DELETE FROM ESP_POOL
	WHERE POOL_ID = p_POOL_ID AND
		ESP_ID = p_ESP_ID AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;
END REMOVE_ESP_POOL;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_POOL_SUB_POOL
	(
	p_POOL_ID IN NUMBER,
	p_SUB_POOL_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_POOL_ID, EC.ED_POOL);

	DELETE FROM POOL_SUB_POOL
	WHERE POOL_ID = p_POOL_ID AND
		SUB_POOL_ID = p_SUB_POOL_ID AND
		TRUNC(BEGIN_DATE) = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;
END REMOVE_POOL_SUB_POOL;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_RECURSIVE
	(
	p_ACCOUNT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS

--REMOVES THE SPECIFIED ACCOUNTS AND ALL SERVICE LOCATIONS
--AND METERS ASSOCIATED WITH IT, AS LONG AS THEY ARE NOT
--ASSOCIATED WITH OTHER ACCOUNTS.
CURSOR c_ACCOUNT_SERVICE_LOCATION IS
	SELECT *
	FROM ACCOUNT_SERVICE_LOCATION
	WHERE ACCOUNT_ID = p_ACCOUNT_ID
		AND NOT SERVICE_LOCATION_ID IN
			(SELECT SERVICE_LOCATION_ID
			FROM ACCOUNT_SERVICE_LOCATION
			WHERE ACCOUNT_ID <> p_ACCOUNT_ID);
v_ACCOUNT_SERVICE_LOCATION ACCOUNT_SERVICE_LOCATION%ROWTYPE;

BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

--REMOVE ASSOCIATED SERVICE LOCATIONS
	OPEN c_ACCOUNT_SERVICE_LOCATION;
	LOOP
		FETCH c_ACCOUNT_SERVICE_LOCATION INTO v_ACCOUNT_SERVICE_LOCATION;
		EXIT WHEN c_ACCOUNT_SERVICE_LOCATION%NOTFOUND;
		REMOVE_SERVICE_LOCN_RECURSIVE(v_ACCOUNT_SERVICE_LOCATION.SERVICE_LOCATION_ID,p_STATUS);
	END LOOP;
	CLOSE c_ACCOUNT_SERVICE_LOCATION;

--REMOVE THE ACTUAL ACCOUNT
	REMOVE_ACCOUNT(p_ACCOUNT_ID,p_STATUS);

END REMOVE_ACCOUNT_RECURSIVE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SERVICE_LOCN_RECURSIVE
	(
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS

--REMOVES THE SERVICE LOCATION AND ALL ITS
--ASSOCIATED METERS FROM THE DATABASE.
CURSOR c_SERVICE_LOCATION_METER IS
	SELECT *
	FROM SERVICE_LOCATION_METER
	WHERE SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID;

v_SERVICE_LOCATION_METER SERVICE_LOCATION_METER%ROWTYPE;

BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	OPEN c_SERVICE_LOCATION_METER;
	LOOP
		FETCH c_SERVICE_LOCATION_METER INTO v_SERVICE_LOCATION_METER;
		EXIT WHEN c_SERVICE_LOCATION_METER%NOTFOUND;
		REMOVE_METER(v_SERVICE_LOCATION_METER.METER_ID,p_STATUS);
	END LOOP;
	CLOSE c_SERVICE_LOCATION_METER;

	REMOVE_SERVICE_LOCATION(p_SERVICE_LOCATION_ID,p_STATUS);

END REMOVE_SERVICE_LOCN_RECURSIVE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ANCILLARY_SERVICE
	(
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ANCILLARY_SERVICE
	WHERE ANCILLARY_SERVICE_ID = p_ANCILLARY_SERVICE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_ANCILLARY_SERVICE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_ANCILLARY_SERV
	(
	p_ACCOUNT_ID IN NUMBER,
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_ANCILLARY_SERVICE
	WHERE ACCOUNT_ID = p_ACCOUNT_ID
		AND ANCILLARY_SERVICE_ID = p_ANCILLARY_SERVICE_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_ANCILLARY_SERV;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_METER_ANCILLARY_SERV
	(
	p_METER_ID IN NUMBER,
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM METER_ANCILLARY_SERVICE
	WHERE METER_ID = p_METER_ID
		AND ANCILLARY_SERVICE_ID = p_ANCILLARY_SERVICE_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_METER_ANCILLARY_SERV;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_IMBALANCE
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_IMBALANCE
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_IMBALANCE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_IMB_BAND
	(
	p_IMBALANCE_ID IN NUMBER,
	p_BAND_TYPE IN VARCHAR,
	p_BAND_NUMBER IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_IMBALANCE_BAND
	WHERE IMBALANCE_ID = p_IMBALANCE_ID
		AND UPPER(BAND_TYPE) = UPPER(LTRIM(RTRIM(p_BAND_TYPE)))
		AND BAND_NUMBER = p_BAND_NUMBER;
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_IMB_BAND;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_COIN_PEAK
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_COINCIDENT_PEAK
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_COIN_PEAK;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_EN_ATTRIBUTE
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_ATTRIBUTE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_ENTITY_ATTRIBUTE
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
		AND ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
		AND ENTITY_ATTRIBUTE_ID = p_ATTRIBUTE_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_EN_ATTRIBUTE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_PERCENTAGE
	(
	p_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_COMPONENT_ID, EC.ED_COMPONENT);

	DELETE FROM COMPONENT_PERCENTAGE
	WHERE COMPONENT_ID = p_COMPONENT_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;
END REMOVE_COMPONENT_PERCENTAGE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CONTRACT_PROD_COMPONENT
	(
	p_CONTRACT_ID IN NUMBER,
	p_PRODUCT_ID IN NUMBER,
	p_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Billing') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Billing');
	END IF;

	DELETE FROM CONTRACT_PRODUCT_COMPONENT
	WHERE CONTRACT_ID = p_CONTRACT_ID
		AND PRODUCT_ID = p_PRODUCT_ID
		AND COMPONENT_ID = p_COMPONENT_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_CONTRACT_PROD_COMPONENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_EDC_LOSS_FACTOR
	(
	p_EDC_ID IN NUMBER,
	p_CASE_ID IN NUMBER,
	p_LOSS_FACTOR_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_EDC_ID, EC.ED_EDC);

	DELETE FROM EDC_LOSS_FACTOR
	WHERE EDC_ID = p_EDC_ID
		AND CASE_ID = p_CASE_ID
		AND LOSS_FACTOR_ID = p_LOSS_FACTOR_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;
END REMOVE_EDC_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_MARKET_PRICE
	(
	p_MARKET_PRICE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM MARKET_PRICE
	WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_MARKET_PRICE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_MARKET_PRICE_VALUE
	(
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_DATE IN VARCHAR,
	p_PRICE_TIME IN VARCHAR,
	p_PRICE_CODE IN CHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM MARKET_PRICE_VALUE
	WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
		AND PRICE_DATE = DATE_TIME_AS_CUT(p_PRICE_DATE,p_PRICE_TIME,p_TIME_ZONE)
		AND PRICE_CODE = p_PRICE_CODE;
	p_STATUS := GA.SUCCESS;

END REMOVE_MARKET_PRICE_VALUE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_MARKET_PRICE_COMPOSITE
	(
	p_MARKET_PRICE_ID IN NUMBER,
	p_COMPOSITE_MARKET_PRICE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_MARKET_PRICE_ID, EC.ED_MARKET_PRICE);

	DELETE FROM MARKET_PRICE_COMPOSITE
	WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
		AND COMPOSITE_MARKET_PRICE_ID = p_COMPOSITE_MARKET_PRICE_ID;
	p_STATUS := GA.SUCCESS;
END REMOVE_MARKET_PRICE_COMPOSITE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_METER
	(
	p_ACCOUNT_ID IN NUMBER,
	p_METER_NAME IN VARCHAR,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_METER
	WHERE ACCOUNT_ID = p_ACCOUNT_ID
		AND UPPER(METER_NAME) = LTRIM(RTRIM(UPPER(p_METER_NAME)));
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_METER;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_STATION_PARAMETER
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_STATION_ID, EC.ED_WEATHER_STATION);

	DELETE FROM WEATHER_STATION_PARAMETER
	WHERE STATION_ID = p_STATION_ID
		AND PARAMETER_ID = p_PARAMETER_ID;
	p_STATUS := GA.SUCCESS;
END REMOVE_STATION_PARAMETER;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_STATION_COMPOSITE
	(
	p_STATION_ID IN NUMBER,
	p_COMPOSITE_STATION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_STATION_ID, EC.ED_WEATHER_STATION);

	DELETE FROM WEATHER_STATION_COMPOSITE
	WHERE STATION_ID = p_STATION_ID
		AND COMPOSITE_STATION_ID = p_COMPOSITE_STATION_ID;
	p_STATUS := GA.SUCCESS;
END REMOVE_STATION_COMPOSITE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PARAMETER_COMPOSITE
	(
	p_PARAMETER_ID IN NUMBER,
	p_COMPOSITE_PARAMETER_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PARAMETER_ID, EC.ED_WEATHER_PARAMETER);

	DELETE FROM WEATHER_PARAMETER_COMPOSITE
	WHERE PARAMETER_ID = p_PARAMETER_ID
		AND COMPOSITE_PARAMETER_ID = p_COMPOSITE_PARAMETER_ID;
	p_STATUS := GA.SUCCESS;
END REMOVE_PARAMETER_COMPOSITE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SYSTEM_LOAD_AREA
	(
	p_SYSTEM_LOAD_ID IN NUMBER,
	p_AREA_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_SYSTEM_LOAD_ID, EC.ED_SYSTEM_LOAD);

	DELETE FROM SYSTEM_LOAD_AREA
	WHERE SYSTEM_LOAD_ID = p_SYSTEM_LOAD_ID
		AND AREA_ID = p_AREA_ID;
	p_STATUS := GA.SUCCESS;
END REMOVE_SYSTEM_LOAD_AREA;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_AREA_LOAD
	(
	p_AREA_ID IN NUMBER,
	p_LOAD_DATE IN DATE,
	p_LOAD_CODE IN CHAR,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM AREA_LOAD
	WHERE AREA_ID = p_AREA_ID
		AND LOAD_DATE = TRUNC(p_LOAD_DATE)
		AND UPPER(LOAD_CODE) = LTRIM(RTRIM(UPPER(p_LOAD_CODE)));
	p_STATUS := GA.SUCCESS;

END REMOVE_AREA_LOAD;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_WEATHER_STATION
	(
	p_STATION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Weather') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Weather');
	END IF;

	DELETE FROM WEATHER_STATION
	WHERE STATION_ID = p_STATION_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_WEATHER_STATION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_WEATHER_PARAMETER
	(
	p_PARAMETER_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Weather') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Weather');
	END IF;

	DELETE FROM WEATHER_PARAMETER
	WHERE PARAMETER_ID = p_PARAMETER_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_WEATHER_PARAMETER;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SYSTEM_LOAD
	(
	p_SYSTEM_LOAD_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM SYSTEM_LOAD
	WHERE SYSTEM_LOAD_ID = p_SYSTEM_LOAD_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_SYSTEM_LOAD;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_AREA
	(
	p_AREA_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM AREA
	WHERE AREA_ID = p_AREA_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_AREA;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_VERSION
	(
	p_VERSION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
v_INITIAL BOOLEAN;
v_UNTIL_DATE DATE;
v_VERSION_DOMAIN VERSION.VERSION_DOMAIN%TYPE;

CURSOR c_VERSION(cp_VERSION_DOMAIN IN VARCHAR2) IS
    SELECT * FROM VERSION
	WHERE UPPER(VERSION_DOMAIN) = UPPER(LTRIM(RTRIM(cp_VERSION_DOMAIN)))
	ORDER BY AS_OF_DATE DESC;

-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Public') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Public');
	END IF;

	--Determine the version domain
	SELECT VERSION_DOMAIN
	INTO v_VERSION_DOMAIN
	FROM VERSION
	WHERE VERSION_ID = p_VERSION_ID;

	--Delete the Version.
	DELETE FROM VERSION
	WHERE VERSION_ID = p_VERSION_ID;
	p_STATUS := GA.SUCCESS;


	--Make sure all the versions are continuous.
	v_INITIAL := TRUE;
    FOR v_VERSION IN c_VERSION(v_VERSION_DOMAIN) LOOP
		IF v_INITIAL THEN
			v_UNTIL_DATE := TO_DATE('12/31/9999','MM/DD/YYYY');
			v_INITIAL := FALSE;
		END IF;
		UPDATE VERSION
		SET UNTIL_DATE = GREATEST(v_UNTIL_DATE, v_VERSION.AS_OF_DATE)
		WHERE VERSION_ID = v_VERSION.VERSION_ID;
		v_UNTIL_DATE := v_VERSION.AS_OF_DATE - 1;
	END LOOP;

END REMOVE_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_QUOTE_REQUEST
	(
	p_QUOTE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Quote Management') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Quote Management');
	END IF;

	DELETE FROM QUOTE_REQUEST
	WHERE QUOTE_ID = p_QUOTE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_QUOTE_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_QUOTE_CALENDAR_PRODUCT
	(
	p_QUOTE_ID IN NUMBER,
	p_QUOTE_SCENARIO IN VARCHAR,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Quote Management') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Quote Management');
	END IF;

	DELETE FROM QUOTE_CALENDAR_PRODUCT
	WHERE QUOTE_ID = p_QUOTE_ID
		AND QUOTE_SCENARIO = p_QUOTE_SCENARIO;
	p_STATUS := GA.SUCCESS;

END REMOVE_QUOTE_CALENDAR_PRODUCT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_QUOTE_BILLING_DETERMIN
	(
	p_QUOTE_ID IN NUMBER,
	p_PERIOD_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Quote Management') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Quote Management');
	END IF;

	DELETE FROM QUOTE_BILLING_DETERMINANT
	WHERE QUOTE_ID = p_QUOTE_ID
		AND PERIOD_ID = p_PERIOD_ID
		AND BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_QUOTE_BILLING_DETERMIN;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_ACCOUNT_SCHEDULE_GROUP
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SCHEDULE_GROUP_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Date Setup');
	END IF;

	DELETE FROM ACCOUNT_SCHEDULE_GROUP
	WHERE ACCOUNT_ID = p_ACCOUNT_ID
		AND SCHEDULE_GROUP_ID = p_SCHEDULE_GROUP_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_SCHEDULE_GROUP;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_METER_SCHEDULE_GROUP
	(
	p_METER_ID IN NUMBER,
	p_SCHEDULE_GROUP_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM METER_SCHEDULE_GROUP
	WHERE METER_ID = p_METER_ID
		AND SCHEDULE_GROUP_ID = p_SCHEDULE_GROUP_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_METER_SCHEDULE_GROUP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SCHEDULE_GROUP
	(
	p_SCHEDULE_GROUP_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM SCHEDULE_GROUP
	WHERE SCHEDULE_GROUP_ID = p_SCHEDULE_GROUP_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_SCHEDULE_GROUP;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_MARKET_FORWARD_PRICE
	(
	p_MARKET_PRICE_ID IN NUMBER,
	p_CONTRACT_MONTH IN DATE,
	p_CONTRACT_TYPE IN CHAR,
	p_CONTRACT_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_MARKET_PRICE_ID, EC.ED_MARKET_PRICE);

	DELETE FROM MARKET_FORWARD_PRICE
	WHERE MARKET_PRICE_ID = p_MARKET_PRICE_ID
		AND CONTRACT_MONTH = TRUNC(p_CONTRACT_MONTH,'MM')
		AND CONTRACT_TYPE = UPPER(p_CONTRACT_TYPE)
		AND CONTRACT_DATE = TRUNC(p_CONTRACT_DATE);
	p_STATUS := GA.SUCCESS;
END REMOVE_MARKET_FORWARD_PRICE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_BALANCE_TRANSACTION
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BALANCE_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE
	) AS
v_ASSIGNMENT_ID NUMBER(9);
v_COUNT_PERIODS NUMBER;
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_TRANSACTION_ID, EC.ED_TRANSACTION);
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_BALANCE_TRANSACTION_ID, EC.ED_TRANSACTION);

	SELECT ASSIGNMENT_ID
	INTO v_ASSIGNMENT_ID
	FROM IT_ASSIGNMENT
	WHERE FROM_TRANSACTION_ID = p_TRANSACTION_ID
		AND TO_TRANSACTION_ID = p_BALANCE_TRANSACTION_ID
		AND ASSIGNMENT_TYPE = LB.g_BALANCING_ASSIGNMENT_TYPE;

	-- delete this relationship from IT_ASSIGNMENT_PERIOD
	DELETE FROM IT_ASSIGNMENT_PERIOD
	WHERE ASSIGNMENT_ID = v_ASSIGNMENT_ID
		AND BEGIN_DATE = p_BEGIN_DATE;

	-- if there are now no relationships between these two transactions, delete
	-- the parent record from IT_ASSIGNMENT
	SELECT COUNT(*)
	INTO v_COUNT_PERIODS
	FROM IT_ASSIGNMENT_PERIOD
	WHERE ASSIGNMENT_ID = v_ASSIGNMENT_ID;

	IF v_COUNT_PERIODS = 0 THEN
		DELETE FROM IT_ASSIGNMENT
		WHERE ASSIGNMENT_ID = v_ASSIGNMENT_ID;
	END IF;

END REMOVE_BALANCE_TRANSACTION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_BALANCING_TRANSACTION
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BALANCING_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE
	) AS
v_ASSIGNMENT_ID NUMBER(9);
v_COUNT_PERIODS NUMBER;
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_TRANSACTION_ID, EC.ED_TRANSACTION);
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_BALANCING_TRANSACTION_ID, EC.ED_TRANSACTION);

	SELECT ASSIGNMENT_ID
	INTO v_ASSIGNMENT_ID
	FROM IT_ASSIGNMENT
	WHERE FROM_TRANSACTION_ID = p_BALANCING_TRANSACTION_ID
		AND TO_TRANSACTION_ID = p_TRANSACTION_ID
		AND ASSIGNMENT_TYPE = LB.g_BALANCING_ASSIGNMENT_TYPE;

	-- delete this relationship from IT_ASSIGNMENT_PERIOD
	DELETE FROM IT_ASSIGNMENT_PERIOD
	WHERE ASSIGNMENT_ID = v_ASSIGNMENT_ID
		AND BEGIN_DATE = p_BEGIN_DATE;

	-- if there are now no relationships between these two transactions, delete
	-- the parent record from IT_ASSIGNMENT
	SELECT COUNT(*)
	INTO v_COUNT_PERIODS
	FROM IT_ASSIGNMENT_PERIOD
	WHERE ASSIGNMENT_ID = v_ASSIGNMENT_ID;

	IF v_COUNT_PERIODS = 0 THEN
		DELETE FROM IT_ASSIGNMENT
		WHERE ASSIGNMENT_ID = v_ASSIGNMENT_ID;
	END IF;

END REMOVE_BALANCING_TRANSACTION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_TRANSACTION_LIMIT
	(
	p_TRANSACTION_ID IN NUMBER,
	p_LIMIT_INTERVAL IN VARCHAR2,
	p_BEGIN_DATE IN DATE
	) AS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_TRANSACTION_ID, EC.ED_TRANSACTION);

	DELETE FROM INTERCHANGE_TRANSACTION_LIMIT
	WHERE TRANSACTION_ID = p_TRANSACTION_ID
		AND LIMIT_INTERVAL = p_LIMIT_INTERVAL
		AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_TRANSACTION_LIMIT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PROSPECT_SCREEN
	(
	p_SCREEN_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Quote Management') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Quote Management');
	END IF;

	DELETE FROM PROSPECT_SCREEN
	WHERE SCREEN_ID = p_SCREEN_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_PROSPECT_SCREEN;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_POOL
	(
	p_POOL_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM POOL
	WHERE POOL_ID = p_POOL_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_POOL;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_SYSTEM_EVENT
	(
	p_EVENT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM SYSTEM_EVENT
	WHERE EVENT_ID = p_EVENT_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_SYSTEM_EVENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_USAGE_WRF_TEMPLATE
	(
	p_WRF_ID IN NUMBER,
	p_TEMPLATE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

	IF NOT CAN_DELETE('Profiling') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Profiling');
	END IF;

	DELETE FROM USAGE_WRF_TEMPLATE
	WHERE WRF_ID = p_WRF_ID
		AND TEMPLATE_ID = p_TEMPLATE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_USAGE_WRF_TEMPLATE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_LOAD_PROFILE
	(
	p_PROFILE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

	IF NOT CAN_DELETE('Profiling') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Profiling');
	END IF;

	-- just delete row from LOAD_PROFILE and let triggers clean everything up
	DELETE FROM LOAD_PROFILE WHERE PROFILE_ID = p_PROFILE_ID;

	p_STATUS := GA.SUCCESS;

END REMOVE_LOAD_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_LOAD_PROFILE_VERSION
	(
	p_PROFILE_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

v_COUNT NUMBER;

BEGIN

	IF NOT CAN_DELETE('Profiling') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Profiling');
	END IF;

	-- As-Of Dates in Profiling should be equal to As-Of Dates of their corresponding versions,
	-- so a simple equality test to the As-Of Date should be sufficient to wipe this version
	DELETE FROM LOAD_PROFILE_POINT WHERE PROFILE_ID = p_PROFILE_ID AND AS_OF_DATE = p_AS_OF_DATE;
	DELETE FROM LOAD_PROFILE_STATISTICS WHERE PROFILE_ID = p_PROFILE_ID AND AS_OF_DATE = p_AS_OF_DATE;
	DELETE FROM LOAD_PROFILE_WRF WHERE PROFILE_ID = p_PROFILE_ID AND AS_OF_DATE = p_AS_OF_DATE;

	-- if there are no more LOAD_PROFILE_STATISTICS rows for this profile, delete it completely
	SELECT COUNT(*) INTO v_COUNT FROM LOAD_PROFILE_STATISTICS WHERE PROFILE_ID = p_PROFILE_ID;
	IF v_COUNT = 0 THEN
		REMOVE_LOAD_PROFILE (p_PROFILE_ID, p_STATUS);
	ELSE
		p_STATUS := GA.SUCCESS;
	END IF;

END REMOVE_LOAD_PROFILE_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SYSTEM_DICTIONARY
	(
	p_MODEL_ID IN NUMBER,
	p_KEY1 IN VARCHAR,
	p_KEY2 IN VARCHAR,
	p_KEY3 IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
v_MODULE VARCHAR2(64);
v_KEY1 VARCHAR2(64);
v_KEY2 VARCHAR2(64);
v_KEY3 VARCHAR2(64);
v_SETTING_NAME VARCHAR2(64);
BEGIN
	TRANSLATE_OLD_DICTIONARY_KEYS(p_KEY1,p_KEY2,p_KEY3,v_MODULE,v_KEY1,v_KEY2,v_KEY3,v_SETTING_NAME);
	REMOVE_SYSTEM_DICTIONARY_E(p_MODEL_ID,v_MODULE,v_KEY1,v_KEY2,v_KEY3,v_SETTING_NAME,p_STATUS);
END REMOVE_SYSTEM_DICTIONARY;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SYSTEM_DICTIONARY_E
	(
	p_MODEL_ID IN NUMBER,
	p_MODULE IN VARCHAR2,
	p_KEY1 IN VARCHAR2,
	p_KEY2 IN VARCHAR2,
	p_KEY3 IN VARCHAR2,
	p_SETTING_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Admin') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Admin');
	END IF;

	DELETE FROM SYSTEM_DICTIONARY
	WHERE MODEL_ID = p_MODEL_ID
		AND MODULE = LTRIM(RTRIM(p_MODULE))
		AND KEY1 = LTRIM(RTRIM(p_KEY1))
		AND KEY2 = LTRIM(RTRIM(p_KEY2))
		AND KEY3 = LTRIM(RTRIM(p_KEY3))
		AND SETTING_NAME = LTRIM(RTRIM(p_SETTING_NAME));
	p_STATUS := GA.SUCCESS;

END REMOVE_SYSTEM_DICTIONARY_E;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SYSTEM_LABEL
	(
	p_MODEL_ID IN NUMBER,
	p_MODULE IN VARCHAR,
	p_KEY1 IN VARCHAR,
	p_KEY2 IN VARCHAR,
	p_KEY3 IN VARCHAR,
	p_POSITION IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Admin') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Admin');
	END IF;

	DELETE FROM SYSTEM_LABEL
	WHERE MODEL_ID = p_MODEL_ID
		AND UPPER(MODULE) = UPPER(p_MODULE)
		AND UPPER(KEY1) LIKE UPPER(p_KEY1)
		AND UPPER(KEY2) LIKE UPPER(p_KEY2)
		AND UPPER(KEY3) LIKE UPPER(p_KEY3)
		AND (POSITION = p_POSITION OR p_POSITION = -1);

    p_STATUS := GA.SUCCESS;

END REMOVE_SYSTEM_LABEL;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_POSITION_EVALUATION
    (
	p_EVALUATION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Quote Management') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Quote Management');
	END IF;

	DELETE FROM POSITION_ANALYSIS_EVALUATION
	WHERE EVALUATION_ID = p_EVALUATION_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_POSITION_EVALUATION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_POSITION_PARTICIPANT
    (
	p_EVALUATION_ID IN NUMBER,
	p_PARTICIPANT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Quote Management') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Quote Management');
	END IF;

	DELETE FROM POSITION_ANALYSIS_PARTICIPANT
	WHERE EVALUATION_ID = p_EVALUATION_ID
	  AND PARTICIPANT_ID = p_PARTICIPANT_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_POSITION_PARTICIPANT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_POSITION_SUPPLY_BLOCK
    (
	p_EVALUATION_ID IN NUMBER,
	p_BLOCK_ORDER IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Quote Management') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Quote Management');
	END IF;

	DELETE FROM POSITION_ANALYSIS_SUPPLY_BLOCK
	WHERE EVALUATION_ID = p_EVALUATION_ID
	  AND BLOCK_ORDER = p_BLOCK_ORDER;
	p_STATUS := GA.SUCCESS;

END REMOVE_POSITION_SUPPLY_BLOCK;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_POSITION_TRANSACTION
    (
	p_EVALUATION_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Quote Management') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Quote Management');
	END IF;

	DELETE FROM POSITION_ANALYSIS_TRANSACTION
	WHERE EVALUATION_ID = p_EVALUATION_ID
	  AND TRANSACTION_ID = p_TRANSACTION_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_POSITION_TRANSACTION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_COMBINATION
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_COMBINED_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_COMBINATION
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
        AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
		AND COMBINED_COMPONENT_ID = p_COMBINED_COMPONENT_ID
        AND BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_COMBINATION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_COMPOSITE
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_BLOCK_MIN IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Product') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Product');
	END IF;

	DELETE FROM COMPONENT_COMPOSITE
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
        AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND BEGIN_DATE = p_BEGIN_DATE
        AND BLOCK_MIN = p_BLOCK_MIN;
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_COMPOSITE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_GROWTH
	(
	p_CASE_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_GROWTH
	WHERE CASE_ID = p_CASE_ID AND
		ACCOUNT_ID = p_ACCOUNT_ID AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_GROWTH;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_METER_GROWTH
	(
	p_CASE_ID IN NUMBER,
	p_METER_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM METER_GROWTH
	WHERE CASE_ID = p_CASE_ID AND
		METER_ID = p_METER_ID AND
		BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_METER_GROWTH;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_GROWTH_PATTERN
	(
	p_PATTERN_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM GROWTH_PATTERN
	WHERE PATTERN_ID = p_PATTERN_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_GROWTH_PATTERN;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CASE_LABEL
	(
	p_CASE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM CASE_LABEL
	WHERE CASE_ID = p_CASE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_CASE_LABEL;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SCENARIO
	(
	p_SCENARIO_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM SCENARIO
	WHERE SCENARIO_ID = p_SCENARIO_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_SCENARIO;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_ACCOUNT_STATUS
	(
	p_ACCOUNT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ACCOUNT_STATUS
	WHERE ACCOUNT_ID = p_ACCOUNT_ID
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_STATUS;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_EDC_CONVERSION_FACTOR
	(
	p_EDC_ID IN NUMBER,
	p_SERVICE_AREA_ID IN NUMBER,
	p_FACTOR_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_EDC_ID, EC.ED_EDC);

	DELETE FROM EDC_CONVERSION_FACTOR
	WHERE EDC_ID = p_EDC_ID
		AND SERVICE_AREA_ID = p_SERVICE_AREA_ID
		AND FACTOR_CODE = p_FACTOR_CODE
		AND BEGIN_DATE = TRUNC(p_BEGIN_DATE);
	p_STATUS := GA.SUCCESS;
END REMOVE_EDC_CONVERSION_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_GROUP_ASSIGN
	(
	p_ACCOUNT_ID IN NUMBER,
	p_ACCOUNT_GROUP_ID IN NUMBER,
	p_ASSIGNMENT_CATEGORY IN VARCHAR,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Billing') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Billing');
	END IF;

	DELETE FROM ACCOUNT_GROUP_ASSIGNMENT
	WHERE ACCOUNT_ID = p_ACCOUNT_ID
		AND ACCOUNT_GROUP_ID = p_ACCOUNT_GROUP_ID
		AND ASSIGNMENT_CATEGORY = p_ASSIGNMENT_CATEGORY;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_GROUP_ASSIGN;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_BILL_CYCLE
	(
	p_ACCOUNT_ID IN NUMBER,
	p_BILL_CYCLE_ID IN NUMBER,
	p_BILL_CYCLE_ENTITY IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Billing') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Billing');
	END IF;

	DELETE FROM ACCOUNT_BILL_CYCLE
	WHERE ACCOUNT_ID = p_ACCOUNT_ID
		AND BILL_CYCLE_ID = p_BILL_CYCLE_ID
		AND BILL_CYCLE_ENTITY = p_BILL_CYCLE_ENTITY
		AND BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_BILL_CYCLE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ACCOUNT_BILL_PARTY
	(
	p_ACCOUNT_ID IN NUMBER,
	p_BILL_PARTY_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Billing') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Billing');
	END IF;

	DELETE FROM ACCOUNT_BILL_PARTY
	WHERE ACCOUNT_ID = p_ACCOUNT_ID
		AND BILL_PARTY_ID = p_BILL_PARTY_ID
		AND BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_ACCOUNT_BILL_PARTY;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_BILL_PARTY
	(
	p_BILL_PARTY_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Billing') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Billing');
	END IF;

	DELETE FROM BILL_PARTY
	WHERE BILL_PARTY_ID = p_BILL_PARTY_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_BILL_PARTY;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_METER_BILL_CYCLE
	(
	p_METER_ID IN NUMBER,
	p_BILL_CYCLE_ID IN NUMBER,
	p_BILL_CYCLE_ENTITY IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Billing') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Billing');
	END IF;

	DELETE FROM METER_BILL_CYCLE
	WHERE METER_ID = p_METER_ID
		AND BILL_CYCLE_ID = p_BILL_CYCLE_ID
		AND BILL_CYCLE_ENTITY = p_BILL_CYCLE_ENTITY
		AND BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_METER_BILL_CYCLE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_METER_BILL_PARTY
	(
	p_METER_ID IN NUMBER,
	p_BILL_PARTY_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Billing') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Billing');
	END IF;

	DELETE FROM METER_BILL_PARTY
	WHERE METER_ID = p_METER_ID
		AND BILL_PARTY_ID = p_BILL_PARTY_ID
		AND BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_METER_BILL_PARTY;
----------------------------------------------------------------------------------------------------

PROCEDURE REMOVE_SYSTEM_OBJECT
       (
       p_PARENT_OBJECT_ID IN NUMBER,
       p_OBJECT_ID IN NUMBER,
       p_STATUS OUT NUMBER
       )
       AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
v_CATEGORY VARCHAR2(32);
BEGIN

--DEPRECATED -- USE THE SO PACKAGE INSTEAD TO GET PROPER CLS.

       IF NOT CAN_DELETE('Admin') THEN
              ERRS.RAISE_NO_DELETE_MODULE('Admin');
       END IF;

       IF p_OBJECT_ID = -1 THEN
              SELECT OBJECT_CATEGORY INTO v_CATEGORY
              FROM SYSTEM_OBJECT WHERE OBJECT_ID = p_PARENT_OBJECT_ID;

              -- clear grid configuration
              IF v_CATEGORY = 'Grid' THEN
                  DELETE FROM SYSTEM_OBJECT
                  WHERE PARENT_OBJECT_ID = p_PARENT_OBJECT_ID;
              END IF;
       ELSE
              DELETE FROM SYSTEM_OBJECT
              WHERE OBJECT_ID = p_OBJECT_ID;
       END IF;

       p_STATUS := GA.SUCCESS;

END REMOVE_SYSTEM_OBJECT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_BREAKPOINT
	(
	p_BREAKPOINT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

	IF NOT CAN_DELETE('Profiling') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Profiling');
	END IF;

	-- just delete row from BREAKPOINT and let triggers clean everything up
	DELETE FROM BREAKPOINT
	WHERE BREAKPOINT_ID = p_BREAKPOINT_ID;

	p_STATUS := GA.SUCCESS;

END REMOVE_BREAKPOINT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_BREAKPOINT_VALUES
	(
	p_BREAKPOINT_ID IN NUMBER,
	p_KEEP_HOUR_ZERO IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

v_FROM_HOUR NUMBER;

BEGIN

	IF NOT CAN_DELETE('Profiling') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Profiling');
	END IF;

	IF p_KEEP_HOUR_ZERO = 0 THEN
		v_FROM_HOUR := 0;
	ELSE
		v_FROM_HOUR := 1;
	END IF;

	-- Delete ALL values for given BREAKPOINT
	DELETE FROM BREAKPOINT_VALUE
	WHERE BREAKPOINT_ID = p_BREAKPOINT_ID
	  AND BREAKPOINT_HOUR >= v_FROM_HOUR;

	p_STATUS := GA.SUCCESS;

END REMOVE_BREAKPOINT_VALUES;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_CONV_RATE
	(
	p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
	p_SCHEDULE_GROUP_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Billing') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Billing');
	END IF;

	DELETE FROM COMPONENT_CONVERSION_RATE
	WHERE COMPONENT_ID = p_COMPONENT_ID
    	AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
		AND SCHEDULE_GROUP_ID = p_SCHEDULE_GROUP_ID
		AND BEGIN_DATE = p_BEGIN_DATE;
	p_STATUS := GA.SUCCESS;

END REMOVE_COMPONENT_CONV_RATE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SERVICE_POINT
	(
	p_SERVICE_POINT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
-- REMOVE THE RECORD SPECIFIED BY THE ID
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM SERVICE_POINT
	WHERE SERVICE_POINT_ID = p_SERVICE_POINT_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_SERVICE_POINT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_LOAD_PROFILE_SET
	(
	p_PROFILE_SET_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

	IF NOT CAN_DELETE('Profiling') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Profiling');
	END IF;

	-- just delete row from LOAD_PROFILE_SET and let triggers clean everything up
	DELETE FROM LOAD_PROFILE_SET
	WHERE PROFILE_SET_ID = p_PROFILE_SET_ID;

	p_STATUS := GA.SUCCESS;

END REMOVE_LOAD_PROFILE_SET;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_LOAD_PROF_SET_MEMBERS
	(
	p_PROFILE_SET_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

	IF NOT CAN_DELETE('Profiling') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Profiling');
	END IF;

	-- Delete all members from LOAD_PROFILE_SET_MEMBER for the given PROFILE_SET_ID
	DELETE FROM LOAD_PROFILE_SET_MEMBER
	WHERE PROFILE_SET_ID = p_PROFILE_SET_ID;

	p_STATUS := GA.SUCCESS;

END REMOVE_LOAD_PROF_SET_MEMBERS;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CUSTOMER_AGGREGATE_ACCO
	(
	p_CUSTOMER_ID IN NUMBER,
	p_AGGREGATE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM AGGREGATE_ACCOUNT_CUSTOMER
	WHERE AGGREGATE_ID = p_AGGREGATE_ID
		AND CUSTOMER_ID = p_CUSTOMER_ID
		AND BEGIN_DATE = p_BEGIN_DATE;

	p_STATUS := GA.SUCCESS;

END REMOVE_CUSTOMER_AGGREGATE_ACCO;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ANC_SVC_ALLOCATION
	(
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_ALLOCATION_NAME IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM ANCILLARY_SERVICE_ALLOCATION
	WHERE ANCILLARY_SERVICE_ID = p_ANCILLARY_SERVICE_ID
			AND ALLOCATION_NAME = p_ALLOCATION_NAME
			AND BEGIN_DATE = p_BEGIN_DATE;

	p_STATUS := GA.SUCCESS;

END REMOVE_ANC_SVC_ALLOCATION;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ANC_SVC_AREA_PEAK
	(
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_AREA_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_PEAK_DATE IN DATE,
	p_PEAK_TIME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

v_PEAK_DATE DATE;
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	v_PEAK_DATE := DATE_TIME_AS_CUT(TO_CHAR(p_PEAK_DATE,'YYYY-MM-DD'),p_PEAK_TIME,p_TIME_ZONE);

	DELETE FROM ANCILLARY_SERVICE_AREA_PEAK
	WHERE ANCILLARY_SERVICE_ID = p_ANCILLARY_SERVICE_ID
			AND AREA_ID = p_AREA_ID
			AND BEGIN_DATE = p_BEGIN_DATE
			AND PEAK_DATE = v_PEAK_DATE;

	p_STATUS := GA.SUCCESS;


END REMOVE_ANC_SVC_AREA_PEAK;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_FML_ITERATOR
    (
    p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
    p_ITERATOR_NAME IN VARCHAR2,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_COMPONENT_ID, EC.ED_COMPONENT);

    DELETE COMPONENT_FORMULA_ITERATOR
    WHERE COMPONENT_ID = p_COMPONENT_ID
        AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
        AND ITERATOR_NAME = p_ITERATOR_NAME
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_COMPONENT_FML_ITERATOR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_FORMULA_INPUT
    (
    p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
    p_INPUT_NAME IN VARCHAR2,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_COMPONENT_ID, EC.ED_COMPONENT);

    DELETE COMPONENT_FORMULA_INPUT
    WHERE COMPONENT_ID = p_COMPONENT_ID
        AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
        AND INPUT_NAME = p_INPUT_NAME
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_COMPONENT_FORMULA_INPUT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_FORMULA_VAR
    (
    p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
    p_VARIABLE_NAME IN VARCHAR2,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_COMPONENT_ID, EC.ED_COMPONENT);

    DELETE COMPONENT_FORMULA_VARIABLE
    WHERE COMPONENT_ID = p_COMPONENT_ID
        AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
        AND VARIABLE_NAME = p_VARIABLE_NAME
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_COMPONENT_FORMULA_VAR;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_FML_RESULT
    (
    p_COMPONENT_ID IN NUMBER,
    p_SUB_COMPONENT_TYPE IN VARCHAR2,
    p_SUB_COMPONENT_ID IN NUMBER,
    p_ENTITY_DOMAIN_ID IN NUMBER,
    p_ENTITY_ID IN NUMBER,
    p_BEGIN_DATE IN DATE,
    p_WHAT_FIELD IN VARCHAR2
    ) AS
v_ENTITY_ID COMPONENT_FORMULA_INPUT.ENTITY_ID%TYPE;
v_ENTITY_TYPE COMPONENT_FORMULA_INPUT.ENTITY_TYPE%TYPE;
v_WHAT_FIELD COMPONENT_FORMULA_RESULT.WHAT_FIELD%TYPE;
BEGIN
	-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_COMPONENT_ID, EC.ED_COMPONENT);
	PR.GET_ENTITY_ID_AND_TYPE_FROM_UI(p_ENTITY_ID, FALSE, v_ENTITY_ID, v_ENTITY_TYPE);
	v_WHAT_FIELD := PR.TRANSLATE_FORMULA_INPUT_FIELD(p_WHAT_FIELD,0);

    DELETE COMPONENT_FORMULA_RESULT
    WHERE COMPONENT_ID = p_COMPONENT_ID
        AND SUB_COMPONENT_TYPE = p_SUB_COMPONENT_TYPE
        AND SUB_COMPONENT_ID = p_SUB_COMPONENT_ID
        AND ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
        AND ENTITY_TYPE = v_ENTITY_TYPE
        AND ENTITY_ID = v_ENTITY_ID
        AND BEGIN_DATE = p_BEGIN_DATE
        AND WHAT_FIELD = v_WHAT_FIELD;

END REMOVE_COMPONENT_FML_RESULT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_INVOICE_GROUP
	(
	p_INVOICE_GROUP_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN
	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM INVOICE_GROUP WHERE INVOICE_GROUP_ID = p_INVOICE_GROUP_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_INVOICE_GROUP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_STATEMENT_TYPE
	(
	p_STATEMENT_TYPE_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN
	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM STATEMENT_TYPE WHERE STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID;
	p_STATUS := GA.SUCCESS;

END REMOVE_STATEMENT_TYPE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CUSTOMER_USAGE_FACTOR
	(
	p_CUSTOMER_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN

	IF NOT CAN_DELETE('Data Setup') THEN
		ERRS.RAISE_NO_DELETE_MODULE('Data Setup');
	END IF;

	DELETE FROM CUSTOMER_USAGE_FACTOR
	WHERE CUSTOMER_ID = p_CUSTOMER_ID AND
		BEGIN_DATE = TRUNC(p_BEGIN_DATE);

	p_STATUS := GA.SUCCESS;

END REMOVE_CUSTOMER_USAGE_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PATH_SEGMENT
	(
	p_PATH_ID IN NUMBER,
	p_SEGMENT_ID IN NUMBER,
	p_SEGMENT_POS IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PATH_ID, EC.ED_PATH);

	DELETE FROM TX_PATH_SEGMENT
	WHERE PATH_ID = p_PATH_ID
		AND SEGMENT_ID = p_SEGMENT_ID
		AND SEGMENT_POS = p_SEGMENT_POS;

	p_STATUS := GA.SUCCESS;
END REMOVE_PATH_SEGMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SYSTEM_ACTION_ROLE
	(
	p_ACTION_ID IN NUMBER,
	p_ROLE_ID IN NUMBER,
	p_REALM_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_ACTION_ID, EC.ED_SYSTEM_ACTION);

	DELETE FROM SYSTEM_ACTION_ROLE
	WHERE ACTION_ID = p_ACTION_ID
		AND ROLE_ID = p_ROLE_ID
		AND REALM_ID = p_REALM_ID;

	p_STATUS := GA.SUCCESS;
END REMOVE_SYSTEM_ACTION_ROLE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SYSTEM_ACTION_DOMAIN
	(
	p_ACTION_ID IN NUMBER,
	p_ROLE_ID IN NUMBER,
	p_REALM_ID IN NUMBER,
    p_DOMAIN_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_ACTION_ID, EC.ED_SYSTEM_ACTION);

	DELETE FROM SYSTEM_ACTION_ROLE
	WHERE ACTION_ID = p_ACTION_ID
		AND ROLE_ID = p_ROLE_ID
		AND REALM_ID = p_REALM_ID
        AND ENTITY_DOMAIN_ID = p_DOMAIN_ID;

	p_STATUS := GA.SUCCESS;
END REMOVE_SYSTEM_ACTION_DOMAIN;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ETAG_DETAIL
	(
	p_TRANSACTION_ID  IN NUMBER,
    p_ETAG_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS
-- REMOVE THE RECORD SPECIFIED BY THE INPUTS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_TRANSACTION_ID, EC.ED_TRANSACTION);


	DELETE FROM ETAG_TRANSACTION
	WHERE TRANSACTION_ID = p_TRANSACTION_ID
		AND ETAG_ID = p_ETAG_ID;

	p_STATUS := GA.SUCCESS;
END REMOVE_ETAG_DETAIL;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_HEAT_RATE_CURVE_POINT
	(
	p_HEAT_RATE_CURVE_ID IN NUMBER,
	p_PARAMETER_1_VAL IN NUMBER,
	p_PARAMETER_2_VAL IN NUMBER,
	p_PARAMETER_3_VAL IN NUMBER,
	p_OPERATING_MODE IN VARCHAR2,
	p_AMOUNT IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_HEAT_RATE_CURVE_ID, EC.ED_HEAT_RATE_CURVE);

	DELETE FROM HEAT_RATE_CURVE_POINT
	WHERE HEAT_RATE_CURVE_ID = p_HEAT_RATE_CURVE_ID
		AND PARAMETER_1_VAL = p_PARAMETER_1_VAL
		AND PARAMETER_2_VAL = p_PARAMETER_2_VAL
		AND PARAMETER_3_VAL = p_PARAMETER_3_VAL
		AND OPERATING_MODE = p_OPERATING_MODE
		AND AMOUNT = p_AMOUNT;

	p_STATUS := GA.SUCCESS;
END REMOVE_HEAT_RATE_CURVE_POINT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SCHEDULE_TEMPLATE
	(
	p_TEMPLATE_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER
	) AS

v_TEMPLATE_TYPE SCHEDULE_TEMPLATE.TEMPLATE_TYPE%TYPE;

BEGIN

    p_STATUS := GA.SUCCESS;

	-- Cannot delete a 'Special' Template Type
	BEGIN
		SELECT TEMPLATE_TYPE INTO v_TEMPLATE_TYPE
		FROM SCHEDULE_TEMPLATE
		WHERE TEMPLATE_NAME = p_TEMPLATE_NAME;

		ASSERT(v_TEMPLATE_TYPE <> 0, 'Cannot delete ' || p_TEMPLATE_NAME || ' template.');
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			NULL;
	END;

	DELETE SCHEDULE_TEMPLATE
	WHERE TEMPLATE_NAME = p_TEMPLATE_NAME;

END REMOVE_SCHEDULE_TEMPLATE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CONDITIONAL_FORMAT_ITEM
	(
	p_CONDITIONAL_FORMAT_ID IN NUMBER,
    p_ITEM_NUMBER IN NUMBER
	) AS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONDITIONAL_FORMAT_ID, EC.ED_CONDITIONAL_FORMAT);

	DELETE CONDITIONAL_FORMAT_ITEM A
	WHERE A.CONDITIONAL_FORMAT_ID = p_CONDITIONAL_FORMAT_ID AND A.ITEM_NUMBER = p_ITEM_NUMBER;

END REMOVE_CONDITIONAL_FORMAT_ITEM;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_STORAGE_CAPACITY
	(
    p_CONTRACT_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
	) AS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTRACT_ID, EC.ED_INTERCHANGE_CONTRACT);

	DELETE STORAGE_CAPACITY
	WHERE CONTRACT_ID = p_CONTRACT_ID
		AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_STORAGE_CAPACITY;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_STORAGE_RATCHET
	(
    p_CONTRACT_ID IN NUMBER,
    p_BEGIN_DATE IN DATE,
	p_PERIOD_BEGIN IN DATE,
	p_FROM_PCT_FULL IN NUMBER
	) AS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTRACT_ID, EC.ED_INTERCHANGE_CONTRACT);

	DELETE STORAGE_RATCHET
	WHERE CONTRACT_ID = p_CONTRACT_ID
		AND BEGIN_DATE = p_BEGIN_DATE
		AND PERIOD_BEGIN = p_PERIOD_BEGIN
		AND FROM_PCT_FULL = p_FROM_PCT_FULL;

END REMOVE_STORAGE_RATCHET;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PIPELINE_POINT_LIMIT
	(
    p_CONTRACT_ID IN NUMBER,
	p_SERVICE_POINT_ID IN NUMBER,
    p_BEGIN_DATE IN DATE,
	p_PERIOD_BEGIN IN DATE
	) AS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTRACT_ID, EC.ED_INTERCHANGE_CONTRACT);

	DELETE PIPELINE_POINT_LIMIT
	WHERE CONTRACT_ID = p_CONTRACT_ID
		AND SERVICE_POINT_ID = p_SERVICE_POINT_ID
		AND BEGIN_DATE = p_BEGIN_DATE
		AND PERIOD_BEGIN = p_PERIOD_BEGIN;

END REMOVE_PIPELINE_POINT_LIMIT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PIPELINE_SEGMENT_LIMIT
	(
    p_CONTRACT_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
    p_BEGIN_DATE IN DATE,
	p_PERIOD_BEGIN IN DATE
	) AS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTRACT_ID, EC.ED_INTERCHANGE_CONTRACT);

	DELETE PIPELINE_SEGMENT_LIMIT
	WHERE CONTRACT_ID = p_CONTRACT_ID
		AND POR_ID = p_POR_ID
		AND POD_ID = p_POD_ID
		AND BEGIN_DATE = p_BEGIN_DATE
		AND PERIOD_BEGIN = p_PERIOD_BEGIN;

END REMOVE_PIPELINE_SEGMENT_LIMIT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PIPELINE_TARIFF_RATE
	(
    p_CONTRACT_ID IN NUMBER,
	p_PIPELINE_TARIFF_TYPE IN VARCHAR2,
    p_BEGIN_DATE IN DATE,
	p_PERIOD_BEGIN IN DATE,
	p_ZOR_ID IN NUMBER,
	p_ZOD_ID IN NUMBER,
	p_ZONE_ORDER IN NUMBER,
	p_FROM_MILEAGE IN NUMBER
	) AS
BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTRACT_ID, EC.ED_INTERCHANGE_CONTRACT);

	DELETE PIPELINE_TARIFF_RATE
	WHERE CONTRACT_ID = p_CONTRACT_ID
		AND PIPELINE_TARIFF_TYPE = p_PIPELINE_TARIFF_TYPE
		AND BEGIN_DATE = p_BEGIN_DATE
		AND PERIOD_BEGIN = p_PERIOD_BEGIN
		AND ZOR_ID = p_ZOR_ID
		AND ZOD_ID = p_ZOD_ID
		AND ZONE_ORDER = p_ZONE_ORDER
		AND FROM_MILEAGE = p_FROM_MILEAGE;

END REMOVE_PIPELINE_TARIFF_RATE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_IT_SEGMENT
	(
	p_IT_SEGMENT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;

	DELETE IT_SEGMENT
	WHERE IT_SEGMENT_ID = p_IT_SEGMENT_ID;

END REMOVE_IT_SEGMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ENTITY_ASSIGNMENT
	(
	p_ENTITY_GROUP_ID IN NUMBER,
	p_ENTITY_ID IN NUMBER,
	p_ENTITY2_ID IN NUMBER,
	p_ENTITY3_ID IN NUMBER,
	p_ENTITY4_ID IN NUMBER,
	p_ENTITY5_ID IN NUMBER,
	p_ENTITY6_ID IN NUMBER,
	p_ENTITY7_ID IN NUMBER,
	p_ENTITY8_ID IN NUMBER,
	p_ENTITY9_ID IN NUMBER,
	p_ENTITY10_ID IN NUMBER,
	p_BEGIN_DATE IN DATE
	) AS

BEGIN
-- DATA LEVEL SECURITY
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_ENTITY_GROUP_ID, EC.ED_ENTITY_GROUP);

	DELETE FROM ENTITY_GROUP_ASSIGNMENT E
	WHERE E.ENTITY_GROUP_ID = p_ENTITY_GROUP_ID
		AND E.ENTITY_ID = p_ENTITY_ID
		AND NVL(E.ENTITY2_ID, CONSTANTS.NULL_ID) = NVL(p_ENTITY2_ID, CONSTANTS.NULL_ID)
		AND NVL(E.ENTITY3_ID, CONSTANTS.NULL_ID) = NVL(p_ENTITY3_ID, CONSTANTS.NULL_ID)
		AND NVL(E.ENTITY4_ID, CONSTANTS.NULL_ID) = NVL(p_ENTITY4_ID, CONSTANTS.NULL_ID)
		AND NVL(E.ENTITY5_ID, CONSTANTS.NULL_ID) = NVL(p_ENTITY5_ID, CONSTANTS.NULL_ID)
		AND NVL(E.ENTITY6_ID, CONSTANTS.NULL_ID) = NVL(p_ENTITY6_ID, CONSTANTS.NULL_ID)
		AND NVL(E.ENTITY7_ID, CONSTANTS.NULL_ID) = NVL(p_ENTITY7_ID, CONSTANTS.NULL_ID)
		AND NVL(E.ENTITY8_ID, CONSTANTS.NULL_ID) = NVL(p_ENTITY8_ID, CONSTANTS.NULL_ID)
		AND NVL(E.ENTITY9_ID, CONSTANTS.NULL_ID) = NVL(p_ENTITY9_ID, CONSTANTS.NULL_ID)
		AND NVL(E.ENTITY10_ID, CONSTANTS.NULL_ID) = NVL(p_ENTITY10_ID, CONSTANTS.NULL_ID)
		AND E.BEGIN_DATE = p_BEGIN_DATE;


END REMOVE_ENTITY_ASSIGNMENT;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_CALC_PROCESS_GLOBAL
    (
    p_CALC_PROCESS_ID IN NUMBER,
    p_GLOBAL_NAME IN VARCHAR2
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CALC_PROCESS_ID, EC.ED_CALC_PROCESS);

    DELETE CALCULATION_PROCESS_GLOBAL
    WHERE CALC_PROCESS_ID = p_CALC_PROCESS_ID
        AND GLOBAL_NAME = p_GLOBAL_NAME;

END REMOVE_CALC_PROCESS_GLOBAL;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_CALC_PROCESS_STEP
    (
    p_CALC_STEP_ID IN NUMBER
    ) AS
v_CALC_PROCESS_ID CALCULATION_PROCESS_STEP.CALC_PROCESS_ID%TYPE;
BEGIN
    BEGIN
        SELECT CALC_PROCESS_ID INTO v_CALC_PROCESS_ID
        FROM CALCULATION_PROCESS_STEP
        WHERE CALC_STEP_ID = p_CALC_STEP_ID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN; -- return successfully since there is nothing to delete
    END;

-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, v_CALC_PROCESS_ID, EC.ED_CALC_PROCESS);

    DELETE CALCULATION_PROCESS_STEP
    WHERE CALC_STEP_ID = p_CALC_STEP_ID;

END REMOVE_CALC_PROCESS_STEP;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_COMPONENT_FORMULA_PARM
    (
    p_COMPONENT_ID IN NUMBER,
    p_PARAMETER_NAME IN VARCHAR2
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_COMPONENT_ID, EC.ED_COMPONENT);

    DELETE COMPONENT_FORMULA_PARAMETER
    WHERE COMPONENT_ID = p_COMPONENT_ID
        AND PARAMETER_NAME = p_PARAMETER_NAME;

END REMOVE_COMPONENT_FORMULA_PARM;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_SUB_STATION_METER_OWNER
    (
    p_METER_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_METER_ID, EC.ED_SUB_STATION_METER);

    DELETE TX_SUB_STATION_METER_OWNER
    WHERE METER_ID = p_METER_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_SUB_STATION_METER_OWNER;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_SUB_STATION_MTR_PT_SRC
    (
    p_METER_POINT_ID IN NUMBER,
    p_MEASUREMENT_SOURCE_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_METER_POINT_ID, EC.ED_SUB_STATION_METER_POINT);

    DELETE TX_SUB_STATION_METER_PT_SOURCE
    WHERE METER_POINT_ID = p_METER_POINT_ID
        AND MEASUREMENT_SOURCE_ID = p_MEASUREMENT_SOURCE_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_SUB_STATION_MTR_PT_SRC;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_SUB_STATION_MTR_PT_LOSS
    (
    p_METER_POINT_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_METER_POINT_ID, EC.ED_SUB_STATION_METER_POINT);

    DELETE TX_SUB_STATION_METER_PT_LOSS
    WHERE METER_POINT_ID = p_METER_POINT_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_SUB_STATION_MTR_PT_LOSS;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_RESOURCE_OWNER
    (
    p_RESOURCE_ID IN NUMBER,
    p_OWNER_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_RESOURCE_ID, EC.ED_SUPPLY_RESOURCE);

    DELETE SUPPLY_RESOURCE_OWNER
    WHERE RESOURCE_ID = p_RESOURCE_ID
        AND OWNER_ID = p_OWNER_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_RESOURCE_OWNER;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_RESOURCE_METER
    (
    p_RESOURCE_ID IN NUMBER,
    p_METER_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_RESOURCE_ID, EC.ED_SUPPLY_RESOURCE);

    DELETE SUPPLY_RESOURCE_METER
    WHERE RESOURCE_ID = p_RESOURCE_ID
        AND METER_ID = p_METER_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_RESOURCE_METER;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SYSTEM_ALERT_TRIGGER
    (
    p_ALERT_ID IN NUMBER,
    p_TRIGGER_TYPE IN VARCHAR2,
    p_TRIGGER_LEVEL_ID IN NUMBER,
    p_EXACT_LEVEL IN NUMBER,
    p_PROCESS_NAME IN VARCHAR2,
    p_NAME_IS_REG_EXP IN NUMBER,
    p_TRIGGER_VALUE IN VARCHAR2,
    p_VALUE_IS_REG_EXP IN NUMBER
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_ALERT_ID, EC.ED_SYSTEM_ALERT);

    DELETE SYSTEM_ALERT_TRIGGER
    WHERE ALERT_ID = p_ALERT_ID
        AND TRIGGER_TYPE = p_TRIGGER_TYPE
        AND TRIGGER_LEVEL = p_TRIGGER_LEVEL_ID
        AND EXACT_LEVEL = p_EXACT_LEVEL
        AND PROCESS_NAME = p_PROCESS_NAME
        AND NAME_IS_REG_EXP = p_NAME_IS_REG_EXP
        AND TRIGGER_VALUE = p_TRIGGER_VALUE
        AND VALUE_IS_REG_EXP = p_VALUE_IS_REG_EXP;

END REMOVE_SYSTEM_ALERT_TRIGGER;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_COMP_FML_ENTITY_REF
    (
    p_COMPONENT_ID IN NUMBER,
    p_REFERENCE_NAME IN VARCHAR2
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_COMPONENT_ID, EC.ED_COMPONENT);

    DELETE COMPONENT_FORMULA_ENTITY_REF
    WHERE COMPONENT_ID = p_COMPONENT_ID
        AND REFERENCE_NAME = p_REFERENCE_NAME;

END REMOVE_COMP_FML_ENTITY_REF;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_ENTITY_NOTE
    (
    p_ENTITY_DOMAIN_ID IN NUMBER,
    p_ENTITY_ID IN NUMBER,
    p_NOTE_TYPE IN VARCHAR2,
    p_NOTE_DATE IN DATE,
    p_NOTE_AUTHOR_ID IN NUMBER
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_ENTITY_DOMAIN_ID, EC.ED_ENTITY_DOMAIN);

    DELETE ENTITY_NOTE
    WHERE ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
        AND ENTITY_ID = p_ENTITY_ID
        AND NOTE_TYPE = p_NOTE_TYPE
        AND NOTE_DATE = p_NOTE_DATE
        AND NOTE_AUTHOR_ID = p_NOTE_AUTHOR_ID;

END REMOVE_ENTITY_NOTE;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_DATA_VALIDATION_RULE
    (
    p_ENTITY_DOMAIN_ID IN NUMBER,
    p_ENTITY_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_ENTITY_DOMAIN_ID, EC.ED_ENTITY_DOMAIN);

    DELETE DATA_VALIDATION_RULE
    WHERE ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
        AND ENTITY_ID = p_ENTITY_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_DATA_VALIDATION_RULE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_TRANSACTION_TRAIT
	(
	p_TRAIT_GROUP_ID IN NUMBER,
	p_TRAIT_INDEX IN NUMBER
	) AS
BEGIN
-- Data-Level Security
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_TRAIT_GROUP_ID, EC.ED_TRANSACTION_TRAIT_GROUP);

	DELETE TRANSACTION_TRAIT
	WHERE TRAIT_GROUP_ID = p_TRAIT_GROUP_ID
		AND TRAIT_INDEX = p_TRAIT_INDEX;

END REMOVE_TRANSACTION_TRAIT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_CONTRACT_ASSIGNMENT
	(
	p_CONTRACT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_ENTITY_ID IN NUMBER
	) AS

BEGIN

	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_CONTRACT_ID, EC.ED_CONTRACT);

	DELETE CONTRACT_ASSIGNMENT
	WHERE OWNER_ENTITY_ID = p_ENTITY_ID
		AND BEGIN_DATE = p_BEGIN_DATE
		AND ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
		AND CONTRACT_ID = p_CONTRACT_ID;

END REMOVE_CONTRACT_ASSIGNMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PROGRAM_EXECUTION_TYPE
    (
    p_PROGRAM_ID IN NUMBER,
    p_EXECUTION_TYPE IN VARCHAR2
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PROGRAM_ID, EC.ED_PROGRAM);

    DELETE PROGRAM_EXECUTION_TYPE
    WHERE PROGRAM_ID = p_PROGRAM_ID
        AND EXECUTION_TYPE = p_EXECUTION_TYPE;

END REMOVE_PROGRAM_EXECUTION_TYPE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PROGRAM_NOTIFICATION
    (
    p_PROGRAM_ID IN NUMBER,
    p_NOTIF_HOUR IN NUMBER,
    p_NOTIF_MINUTE IN NUMBER,
    p_METHOD IN VARCHAR2
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PROGRAM_ID, EC.ED_PROGRAM);

    DELETE PROGRAM_NOTIFICATION
    WHERE PROGRAM_ID = p_PROGRAM_ID
        AND HOUR = p_NOTIF_HOUR
        AND MINUTE = p_NOTIF_MINUTE
        AND METHOD = p_METHOD;

END REMOVE_PROGRAM_NOTIFICATION;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_PROGRAM_LIMIT
    (
    p_PROGRAM_ID IN NUMBER,
    p_LIMIT_TYPE IN VARCHAR2,
    p_LIMIT_PERIOD IN VARCHAR2,
	p_TEMPLATE_ID IN NUMBER,
	p_PERIOD_ID IN NUMBER
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PROGRAM_ID, EC.ED_PROGRAM);

    DELETE PROGRAM_LIMIT
    WHERE PROGRAM_ID = p_PROGRAM_ID
        AND LIMIT_TYPE = p_LIMIT_TYPE
        AND LIMIT_PERIOD = p_LIMIT_PERIOD
		AND TEMPLATE_ID = p_TEMPLATE_ID
		AND PERIOD_ID = p_PERIOD_ID;

END REMOVE_PROGRAM_LIMIT;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_PROGRAM_REQ_EQUIPMENT
    (
    p_PROGRAM_ID IN NUMBER,
    p_EQUIPMENT_TYPE IN VARCHAR2
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PROGRAM_ID, EC.ED_PROGRAM);

    DELETE PROGRAM_REQUIRED_EQUIPMENT
    WHERE PROGRAM_ID = p_PROGRAM_ID
        AND EQUIPMENT_TYPE = p_EQUIPMENT_TYPE;

END REMOVE_PROGRAM_REQ_EQUIPMENT;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_PROGRAM_DER_TYPE
    (
    p_PROGRAM_ID IN NUMBER,
    p_DER_TYPE_ID IN NUMBER
    ) AS
	v_COUNT NUMBER;
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PROGRAM_ID, EC.ED_PROGRAM);

	-- Cannot delete a DER Type if it has Payment information associated with it
	BEGIN
		SELECT COUNT(1) INTO v_COUNT
		FROM PROGRAM_DER_PAYMENT
		WHERE PROGRAM_ID = p_PROGRAM_ID
			AND DER_TYPE_ID = p_DER_TYPE_ID;

		ASSERT(v_COUNT <= 0, 'Resource Type - ' || EI.GET_ENTITY_NAME(EC.ED_DER_TYPE, p_DER_TYPE_ID) || ' participation in the program cannot be deleted.'
				|| ' Remove payment information associated with the Resource Type before deleting Resource Type participation in the Program.');
	EXCEPTION
		WHEN MSGCODES.e_ERR_NO_SUCH_ENTRY THEN
			NULL;
	END;

    DELETE PROGRAM_DER_TYPE
    WHERE PROGRAM_ID = p_PROGRAM_ID
        AND DER_TYPE_ID = p_DER_TYPE_ID;

END REMOVE_PROGRAM_DER_TYPE;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_PROGRAM_DER_PAYMENT
    (
    p_PROGRAM_ID IN NUMBER,
    p_PAYMENT_TYPE IN VARCHAR2,
	p_DER_TYPE_ID IN NUMBER
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PROGRAM_ID, EC.ED_PROGRAM);

    DELETE PROGRAM_DER_PAYMENT
    WHERE PROGRAM_ID = p_PROGRAM_ID
        AND PAYMENT_TYPE = p_PAYMENT_TYPE
		AND DER_TYPE_ID = p_DER_TYPE_ID;

END REMOVE_PROGRAM_DER_PAYMENT;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_PROGRAM_PAYMENT
    (
    p_PROGRAM_ID IN NUMBER,
	p_PAYMENT_TYPE IN VARCHAR2,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PROGRAM_ID, EC.ED_PROGRAM);

    DELETE PROGRAM_PAYMENT
    WHERE PROGRAM_ID = p_PROGRAM_ID
        AND BEGIN_DATE = p_BEGIN_DATE
		AND PAYMENT_TYPE = p_PAYMENT_TYPE;

END REMOVE_PROGRAM_PAYMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_DER_TYPE_CALENDAR
    (
    p_DER_TYPE_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_DER_TYPE_ID, EC.ED_DER_TYPE);

    DELETE DER_TYPE_CALENDAR
    WHERE DER_TYPE_ID = p_DER_TYPE_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_DER_TYPE_CALENDAR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_DER_CALENDAR
    (
    p_DER_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_DER_ID, EC.ED_DER);

    DELETE DER_CALENDAR
    WHERE DER_ID = p_DER_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_DER_CALENDAR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_DER_SCALE_FACTOR
    (
    p_DER_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_DER_ID, EC.ED_DER);

    DELETE DER_SCALE_FACTOR
    WHERE DER_ID = p_DER_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_DER_SCALE_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_DER_STATUS
    (
    p_DER_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_DER_ID, EC.ED_DER);

    DELETE DER_STATUS
    WHERE DER_ID = p_DER_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_DER_STATUS;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_TX_SEGMENT_LOSS_FACTOR
    (
    p_FEEDER_SEGMENT_ID IN NUMBER,
    p_BEGIN_DATE IN DATE
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_FEEDER_SEGMENT_ID, EC.ED_TX_FEEDER_SEGMENT);

    DELETE TX_FEEDER_SEGMENT_LOSS_FACTOR
    WHERE FEEDER_SEGMENT_ID = p_FEEDER_SEGMENT_ID
        AND BEGIN_DATE = p_BEGIN_DATE;

END REMOVE_TX_SEGMENT_LOSS_FACTOR;
--------------------------------------------------------------------------------
PROCEDURE REMOVE_PROGRAM_THRESHOLD
    (
    p_PROGRAM_ID IN NUMBER,
    p_THRESHOLD_NAME IN VARCHAR2,
    p_MIN_VALUE IN NUMBER
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PROGRAM_ID, EC.ED_PROGRAM);

    DELETE PROGRAM_THRESHOLD
    WHERE PROGRAM_ID = p_PROGRAM_ID
        AND THRESHOLD_NAME = p_THRESHOLD_NAME
        AND MIN_VALUE = p_MIN_VALUE;

END REMOVE_PROGRAM_THRESHOLD;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_IT_SCHED_MANAGEMENT_MAP
    (
    p_TRANSACTION_ID IN NUMBER,
    p_STATEMENT_TYPE_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER
    ) AS
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_SCHED_MAN_MAP, p_TRANSACTION_ID, EC.ED_TRANSACTION);

    DELETE IT_SCHEDULE_MANAGEMENT_MAP
    WHERE TRANSACTION_ID = p_TRANSACTION_ID
        AND STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID
		AND SCHEDULE_STATE = p_SCHEDULE_STATE;

END REMOVE_IT_SCHED_MANAGEMENT_MAP;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_SEASON_TEMPLATE
	(
	p_TEMPLATE_ID IN NUMBER,
	p_SEASON_ID IN NUMBER,
	p_DAY_NAME IN VARCHAR2,
	p_BEGIN_INTERVAL IN VARCHAR
	) AS
	
BEGIN
-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_TEMPLATE_ID, EC.ED_TEMPLATE);

    DELETE FROM SEASON_TEMPLATE ST
	WHERE ST.TEMPLATE_ID = p_TEMPLATE_ID
		AND ST.SEASON_ID = p_SEASON_ID
		AND ST.DAY_NAME = p_DAY_NAME
		AND SUBSTR(ST.BEGIN_INTERVAL,1,5) = p_BEGIN_INTERVAL;
	
		
END REMOVE_SEASON_TEMPLATE;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_PSE_INVOICE_RECIPIENT
    (
    p_PSE_ID IN NUMBER,
	p_EMAIL_REC_TYPE IN VARCHAR2,
    p_RECIPIENT_ID IN NUMBER
    ) AS
	
v_IS_CONTACT BOOLEAN;
BEGIN

-- Data-Level Security
    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PSE_ID, EC.ED_PSE);
	
	v_IS_CONTACT := CASE WHEN p_RECIPIENT_ID < 0 THEN FALSE ELSE TRUE END;
	IF v_IS_CONTACT THEN
	    SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_RECIPIENT_ID, EC.ED_CONTACT);
		
		DELETE PSE_INVOICE_RECIPIENT
		WHERE PSE_ID = p_PSE_ID
			AND EMAIL_REC_TYPE = p_EMAIL_REC_TYPE
			AND CONTACT_ID = p_RECIPIENT_ID;
	ELSE 
		SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_RECIPIENT_ID, EC.ED_ENTITY_GROUP);	
		
		DELETE PSE_INVOICE_RECIPIENT
		WHERE PSE_ID = p_PSE_ID
			AND EMAIL_REC_TYPE = p_EMAIL_REC_TYPE
			AND CONTACT_GROUP_ID = p_RECIPIENT_ID;
	END IF;

END REMOVE_PSE_INVOICE_RECIPIENT;
----------------------------------------------------------------------------------------------------
PROCEDURE REMOVE_INVOICE_BODY
	(
	p_PSE_ID IN NUMBER
	) AS
	
BEGIN

-- Data-Level Security
	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_UPDATE_ENT, p_PSE_ID, EC.ED_PSE);
	
	UPDATE PURCHASING_SELLING_ENTITY PSE
	SET PSE.INVOICE_EMAIL_BODY_MIME_TYPE = NULL, PSE.INVOICE_EMAIL_BODY = NULL
	WHERE PSE.PSE_ID = p_PSE_ID;

END REMOVE_INVOICE_BODY;
----------------------------------------------------------------------------------------------------

END DX;
/
