CREATE OR REPLACE PACKAGE FL AS
--Revision $Revision: 1.4 $

-- Forecasting Long Term Package

FUNCTION WHAT_VERSION RETURN VARCHAR;

FUNCTION COERCE_DATE_TO_DAY_TYPE
	(
	p_DATE IN DATE,
	p_DAY_TYPE IN NUMBER
	) RETURN DATE;

PROCEDURE GET_LONG_TERM_DATE_RANGE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_RUN_MODE IN NUMBER,
	p_LT_BEGIN_DATE OUT DATE,
	p_LT_END_DATE OUT DATE
	);

FUNCTION GET_LONG_TERM_CASE_ID
	(
	p_RUN_MODE IN NUMBER,
	p_IS_DAILY_TOTAL IN BOOLEAN
	) RETURN NUMBER;

PROCEDURE CREATE_LONG_TERM_PROFILES
	(
	p_CAST_CONTEXT IN OUT NOCOPY CAST_CONTEXT_TYPE,
	p_RUN_MODE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_STATUS OUT NUMBER
	);

g_DEFAULT_POINT_INDEX NUMBER(1) := 1;

g_CASE_LONG_TERM_MONTHLY VARCHAR2(32) := 'Long Term Monthly';
g_CASE_LONG_TERM_WEEKLY VARCHAR2(32) := 'Long Term Weekly';
g_CASE_DAILY_TOTAL VARCHAR2(32) := 'Forecast Daily Total';

g_CAL_TYPE_LONG_TERM_MONTHLY VARCHAR2(32) := 'Forecast';
g_CAL_TYPE_LONG_TERM_WEEKLY VARCHAR2(32) := 'Forecast';
g_CAL_TYPE_DAILY_TOTAL VARCHAR2(32) := 'LT Daily Total';

g_PROFILE_LIBRARY_LT_MONTHLY VARCHAR2(32) := 'Long Term Monthly Averages';
g_PROFILE_LIBRARY_LT_WEEKLY VARCHAR2(32) := 'Long Term Weekly Averages';
g_PROFILE_LIBRARY_DAILY_TOTAL VARCHAR2(32) := 'Forecast Daily Totals';

END FL;
/
CREATE OR REPLACE PACKAGE BODY FL AS

FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.4 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
FUNCTION COERCE_DATE_TO_DAY_TYPE
	(
	p_DATE IN DATE,
	p_DAY_TYPE IN NUMBER
	) RETURN DATE IS

v_DATE DATE;
v_INDEX BINARY_INTEGER;

BEGIN

	v_DATE := p_DATE;

	FOR v_INDEX IN 1..6 LOOP
		--IF WE ARE COERCING TO A WEEKEND, MAKE SURE IT IS SATURDAY OR SUNDAY.
		IF (p_DAY_TYPE = GA.WEEK_END AND TO_CHAR(v_DATE,'D') IN(1,7))
		--IF WE ARE COERCING TO A WEEKDAY, MAKE SURE IT IS MON-FRI AND NOT A HOLIDAY.
		OR (p_DAY_TYPE = GA.WEEK_DAY AND TO_CHAR(v_DATE,'D') BETWEEN 2 AND 6 AND NOT IS_HOLIDAY(v_DATE)) THEN
			RETURN v_DATE;
		END IF;
		v_DATE := v_DATE + 1;
	END LOOP;

	RETURN v_DATE;

END COERCE_DATE_TO_DAY_TYPE;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_LONG_TERM_DATE_RANGE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_RUN_MODE IN NUMBER,
	p_LT_BEGIN_DATE OUT DATE,
	p_LT_END_DATE OUT DATE
	) AS
BEGIN

	IF p_RUN_MODE = GA.WEEK_MODE THEN
		p_LT_BEGIN_DATE := TRUNC(p_BEGIN_DATE, 'DAY');
		p_LT_END_DATE := TRUNC(p_END_DATE, 'DAY') + 6;
	ELSE --GA.MONTH_MODE
		p_LT_BEGIN_DATE := TRUNC(p_BEGIN_DATE, 'MONTH');
		p_LT_END_DATE := LAST_DAY(TRUNC(p_END_DATE, 'MONTH'));
	END IF;

END GET_LONG_TERM_DATE_RANGE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_LONG_TERM_TARGET_DATE
	(
	p_DATE IN DATE,
	p_RUN_MODE IN NUMBER
	) RETURN DATE IS
	v_TARGET_DATE DATE;
	v_DAY_TYPE NUMBER;
BEGIN

	--DETERMINE THE DAY TYPE OF THE ORIGINAL DATE.
	IF TO_CHAR(p_DATE, 'D') IN (1,7) OR IS_HOLIDAY(p_DATE) THEN
		v_DAY_TYPE := GA.WEEK_END;
	ELSE
		v_DAY_TYPE := GA.WEEK_DAY;
	END IF;

	--NOW SHIFT THE FIRST DATE OF THE WEEK/MONTH TO THAT DAY TYPE.
	--THIS IS THE DATE THAT THE FORECAST WILL USE TO LOOK UP THE PROFILE.
	IF p_RUN_MODE = GA.WEEK_MODE THEN
		--FIND THE FIRST DAY OF THE WEEK, THEN COERCE TO THE PROPER DAY TYPE.
		v_TARGET_DATE := COERCE_DATE_TO_DAY_TYPE(TRUNC(p_DATE, 'DAY'), v_DAY_TYPE);
	ELSIF p_RUN_MODE = GA.MONTH_MODE THEN
		--FIND THE FIRST DAY OF THE MONTH, THEN COERCE TO THE PROPER DAY TYPE.
		v_TARGET_DATE := COERCE_DATE_TO_DAY_TYPE(TRUNC(p_DATE, 'MM'), v_DAY_TYPE);
	ELSE
		v_TARGET_DATE := p_DATE;
	END IF;

	RETURN v_TARGET_DATE;

END GET_LONG_TERM_TARGET_DATE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_LONG_TERM_CALENDAR_NAME
	(
	p_CALENDAR_NAME IN VARCHAR2,
	p_RUN_MODE IN NUMBER,
	p_DEPENDS_ON_WEATHER IN BOOLEAN,
	p_STATION_NAME IN VARCHAR2,
	p_IS_DAILY_TOTAL IN BOOLEAN
	) RETURN VARCHAR2 IS
	v_PREFIX VARCHAR2(8);
	v_STATION_ABBR WEATHER_STATION.STATION_NAME%TYPE;
BEGIN

	IF p_IS_DAILY_TOTAL THEN
		v_PREFIX := 'FDT_';
	ELSIF p_RUN_MODE = GA.WEEK_MODE THEN
		v_PREFIX := 'LTW_';
	ELSIF p_RUN_MODE = GA.MONTH_MODE THEN
		v_PREFIX := 'LTM_';
	ELSE
		v_PREFIX := 'LTX_';
	END IF;

	IF p_DEPENDS_ON_WEATHER THEN
		v_STATION_ABBR := p_STATION_NAME || '_';
	ELSE
		v_STATION_ABBR := 'ALL_';
	END IF;

	RETURN SUBSTR(v_PREFIX || v_STATION_ABBR || p_CALENDAR_NAME, 1, 64);
END GET_LONG_TERM_CALENDAR_NAME;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_PROFILE_INFO_FROM_CAL
	(
	p_CALENDAR_ID IN NUMBER,
	p_IS_WEATHER_DEPENDENT OUT BOOLEAN,
	p_PROFILE_INTERVAL OUT NUMBER
	) AS
	v_IS_WEATHER_DEPENDENT NUMBER(1);
BEGIN

	SELECT NVL(MAX(IS_WEATHER_DEPENDENT),0),
		NVL(MAX(PROFILE_INTERVAL), 24)
	INTO v_IS_WEATHER_DEPENDENT, p_PROFILE_INTERVAL
	FROM
	(
		SELECT CASE UPPER(SUBSTR(B.PROFILE_TYPE,1,3)) WHEN 'HIS' THEN 0 WHEN 'TYP' THEN 0 ELSE 1 END "IS_WEATHER_DEPENDENT",
			B.PROFILE_INTERVAL
		FROM CALENDAR_PROFILE A, LOAD_PROFILE B
		WHERE A.CALENDAR_ID = p_CALENDAR_ID
			AND A.PROFILE_ID = B.PROFILE_ID
		UNION ALL
		SELECT CASE UPPER(SUBSTR(B.PROFILE_TYPE,1,3)) WHEN 'HIS' THEN 0 WHEN 'TYP' THEN 0 ELSE 1 END "IS_WEATHER_DEPENDENT",
			B.PROFILE_INTERVAL
		FROM CALENDAR_PROFILE_LIBRARY A, LOAD_PROFILE B
		WHERE A.CALENDAR_ID = p_CALENDAR_ID
			AND B.PROFILE_LIBRARY_ID = A.PROFILE_LIBRARY_ID
	);

	p_IS_WEATHER_DEPENDENT := v_IS_WEATHER_DEPENDENT <> 0;

END GET_PROFILE_INFO_FROM_CAL;
----------------------------------------------------------------------------------------------------
FUNCTION GET_LONG_TERM_CASE_ID
	(
	p_RUN_MODE IN NUMBER,
	p_IS_DAILY_TOTAL IN BOOLEAN
	) RETURN NUMBER IS
	v_CASE_ID NUMBER(9);
	v_CASE_NAME CASE_LABEL.CASE_NAME%TYPE;
	v_CASE_CATEGORY CASE_LABEL.CASE_CATEGORY%TYPE;
BEGIN

	IF p_IS_DAILY_TOTAL THEN
		v_CASE_NAME := g_CASE_DAILY_TOTAL;
	ELSIF p_RUN_MODE = GA.WEEK_MODE THEN
		v_CASE_NAME := g_CASE_LONG_TERM_WEEKLY;
	ELSE
		v_CASE_NAME := g_CASE_LONG_TERM_MONTHLY;
	END IF;

	v_CASE_CATEGORY := 'Calendar';

	ID.ID_FOR_CASE(v_CASE_NAME, v_CASE_CATEGORY, TRUE, v_CASE_ID);
	RETURN v_CASE_ID;
END GET_LONG_TERM_CASE_ID;
----------------------------------------------------------------------------------------------------
PROCEDURE ASSIGN_LT_CALENDAR_TO_ACCOUNT
	(
	p_CALENDAR_ID IN NUMBER,
	p_ACCOUNT_ID IN NUMBER,
	p_RUN_MODE IN NUMBER,
	p_IS_DAILY_TOTAL IN BOOLEAN,
	p_STATUS OUT NUMBER
	) AS
	v_CALENDAR_TYPE ACCOUNT_CALENDAR.CALENDAR_TYPE%TYPE;
	v_CASE_ID NUMBER(9);
	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
BEGIN
	v_CASE_ID := GET_LONG_TERM_CASE_ID(p_RUN_MODE, p_IS_DAILY_TOTAL);

	IF p_IS_DAILY_TOTAL THEN
		v_CALENDAR_TYPE := g_CAL_TYPE_DAILY_TOTAL;
	ELSIF p_RUN_MODE = GA.WEEK_MODE THEN
		v_CALENDAR_TYPE := g_CAL_TYPE_LONG_TERM_WEEKLY;
	ELSE
		v_CALENDAR_TYPE := g_CAL_TYPE_LONG_TERM_MONTHLY;
	END IF;

	v_BEGIN_DATE := TO_DATE('1-JAN-2000', 'DD-MON-YYYY');
	v_END_DATE := NULL;

	RA.PUT_ACCOUNT_CALENDAR(v_CASE_ID, p_ACCOUNT_ID, p_CALENDAR_ID, v_CALENDAR_TYPE, v_BEGIN_DATE, v_END_DATE, v_CASE_ID, p_CALENDAR_ID, v_CALENDAR_TYPE, v_BEGIN_DATE, p_STATUS);
END ASSIGN_LT_CALENDAR_TO_ACCOUNT;
----------------------------------------------------------------------------------------------------
FUNCTION GET_LONG_TERM_PROFILE_ID
	(
	p_LT_CALENDAR_NAME IN VARCHAR2,
	p_PROFILE_INTERVAL IN NUMBER,
	p_RUN_MODE IN NUMBER,
	p_IS_DAILY_TOTAL IN BOOLEAN
	) RETURN NUMBER IS
	v_PROFILE_ID NUMBER(9);
	v_PROFILE_LIBRARY_NAME LOAD_PROFILE_LIBRARY.PROFILE_LIBRARY_NAME%TYPE;
BEGIN

	IF p_IS_DAILY_TOTAL THEN
		v_PROFILE_LIBRARY_NAME := g_PROFILE_LIBRARY_DAILY_TOTAL;
	ELSIF p_RUN_MODE = GA.WEEK_MODE THEN
		v_PROFILE_LIBRARY_NAME := g_PROFILE_LIBRARY_LT_WEEKLY;
	ELSE
		v_PROFILE_LIBRARY_NAME := g_PROFILE_LIBRARY_LT_MONTHLY;
	END IF;

	--Use the LT Calendar Name as the Profile Name.
	ID.ID_FOR_LOAD_PROFILE(v_PROFILE_LIBRARY_NAME, p_LT_CALENDAR_NAME, TRUE, v_PROFILE_ID);

	--TODO: THIS COULD BE MORE ELEGANT.
	UPDATE LOAD_PROFILE SET PROFILE_TYPE = 'Historical' WHERE PROFILE_ID = v_PROFILE_ID;
	UPDATE LOAD_PROFILE SET PROFILE_INTERVAL = p_PROFILE_INTERVAL WHERE PROFILE_ID = v_PROFILE_ID;

	RETURN v_PROFILE_ID;
END GET_LONG_TERM_PROFILE_ID;
----------------------------------------------------------------------------------------------------
PROCEDURE ASSIGN_PROFILE_TO_CALENDAR
	(
	p_PROFILE_ID IN NUMBER,
	p_CALENDAR_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
BEGIN

	v_BEGIN_DATE := TO_DATE('1-JAN-2000', 'DD-MON-YYYY');
	v_END_DATE := NULL;

	CA.PUT_CALENDAR_PROFILE(p_CALENDAR_ID, p_PROFILE_ID, v_BEGIN_DATE, v_END_DATE, p_PROFILE_ID, v_BEGIN_DATE, p_STATUS);

END ASSIGN_PROFILE_TO_CALENDAR;
----------------------------------------------------------------------------------------------------
PROCEDURE UPDATE_LONG_TERM_PROFILE_DATA
	(
	p_WORK_ID IN NUMBER,
	p_CAST_CONTEXT IN OUT NOCOPY CAST_CONTEXT_TYPE,
	p_RUN_MODE IN NUMBER,
	p_FORECAST_CALENDAR_ID IN NUMBER,
	p_LONG_TERM_PROFILE_ID IN NUMBER,
	p_DAILY_TOTAL_PROFILE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_TIME_ZONE IN VARCHAR2
	) AS

	v_PROFILE GA.NUMBER_TABLE;
	v_CURRENT_DATE DATE := TRUNC(p_CAST_CONTEXT.BEGIN_DATE);
	v_EDC_ID NUMBER(9) := CONSTANTS.NOT_ASSIGNED;
	v_PROFILE_TYPE CHAR(1);
	v_PROFILE_SOURCE_DATE DATE;
	v_INDEX BINARY_INTEGER;
	v_DAILY_TOTAL NUMBER := 0;
	v_CUT_BEGIN_DATE DATE;
	v_CUT_END_DATE DATE;
	v_TIME_ZONE VARCHAR2(3) := STD_TIME_ZONE(p_TIME_ZONE);
	v_TARGET_DAY DATE;
	v_INTERVAL_DIVISOR NUMBER;
BEGIN

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('UPDATE_LONG_TERM_PROFILE_DATA ' || UT.TRACE_DATE(SYSDATE));
		LOGS.LOG_DEBUG('BEGIN_DATE=' || UT.TRACE_DATE(p_CAST_CONTEXT.BEGIN_DATE));
		LOGS.LOG_DEBUG('END_DATE=' || UT.TRACE_DATE(p_CAST_CONTEXT.END_DATE));
		LOGS.LOG_DEBUG('CURRENT_DATE=' || UT.TRACE_DATE(v_CURRENT_DATE));
		LOGS.LOG_DEBUG('WORK_ID=' || p_WORK_ID);
		LOGS.LOG_DEBUG('RUN_MODE=' || p_RUN_MODE);
		LOGS.LOG_DEBUG('FORECAST_CALENDAR_ID=' || p_FORECAST_CALENDAR_ID);
		LOGS.LOG_DEBUG('LONG_TERM_PROFILE_ID=' || p_LONG_TERM_PROFILE_ID);
		LOGS.LOG_DEBUG('DAILY_TOTAL_PROFILE_ID=' || p_DAILY_TOTAL_PROFILE_ID);
		LOGS.LOG_DEBUG('STATION_ID=' || p_STATION_ID);
		LOGS.LOG_DEBUG('TIME_ZONE=' || p_TIME_ZONE);
	END IF;

	--COMMENTED FOR DEBUG ONLY
	--CLEAR OUT THE DAILY TOTALS PROFILE.
	DELETE LOAD_PROFILE_POINT
	WHERE PROFILE_ID = p_DAILY_TOTAL_PROFILE_ID
		AND POINT_INDEX = g_DEFAULT_POINT_INDEX
		AND POINT_DATE BETWEEN p_CAST_CONTEXT.BEGIN_DATE AND p_CAST_CONTEXT.END_DATE;

	--CLEAR OUT THE LONG TERM AVERAGES PROFILE.
	UT.CUT_DATE_RANGE(p_CAST_CONTEXT.MODEL_ID, p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.END_DATE, v_TIME_ZONE, v_CUT_BEGIN_DATE, v_CUT_END_DATE);
	DELETE LOAD_PROFILE_POINT
	WHERE PROFILE_ID = p_LONG_TERM_PROFILE_ID
		AND POINT_INDEX = g_DEFAULT_POINT_INDEX
		AND POINT_DATE BETWEEN v_CUT_BEGIN_DATE AND v_CUT_END_DATE;

	--LOOP OVER EACH DAY
	WHILE v_CURRENT_DATE <= p_CAST_CONTEXT.END_DATE LOOP

		v_DAILY_TOTAL := 0;
		v_TARGET_DAY := GET_LONG_TERM_TARGET_DATE(v_CURRENT_DATE, p_RUN_MODE);

		p_CAST_CONTEXT.SERVICE_DATE := v_CURRENT_DATE;
		p_CAST_CONTEXT.PROFILE_DATE := v_CURRENT_DATE;

		FP.COMPOSITE_PROFILE_FOR_CALENDAR(p_CAST_CONTEXT, p_STATION_ID, p_FORECAST_CALENDAR_ID, v_EDC_ID, FALSE, v_PROFILE_TYPE, v_PROFILE_SOURCE_DATE, v_PROFILE);
		v_INTERVAL_DIVISOR := FW.INTERVAL_DIVISOR(v_PROFILE.COUNT);

		--LOOP OVER EACH VALUE IN THE PROFILE.
		FOR v_INDEX IN v_PROFILE.FIRST.. v_PROFILE.LAST LOOP

			--STORE EACH VALUE TO THE WORK TABLE.
			INSERT INTO RTO_WORK(WORK_ID, WORK_XID, WORK_DATE, WORK_DATA)
			VALUES(p_WORK_ID, p_LONG_TERM_PROFILE_ID, v_TARGET_DAY + (v_INDEX * v_INTERVAL_DIVISOR), v_PROFILE(v_INDEX));

			IF LOGS.IS_DEBUG_ENABLED THEN
				LOGS.LOG_DEBUG('CURRENT_DATE=' || UT.TRACE_DATE(v_CURRENT_DATE));
				LOGS.LOG_DEBUG('TARGET_DATE=' || UT.TRACE_DATE(v_TARGET_DAY + (v_INDEX * v_INTERVAL_DIVISOR)));
				LOGS.LOG_DEBUG('VALUE=' || v_PROFILE(v_INDEX));
			END IF;

			--STORE UP THE DAILY TOTAL.
			v_DAILY_TOTAL := v_DAILY_TOTAL + v_PROFILE(v_INDEX);
		END LOOP;

		--SAVE THE DAILY TOTAL TO THE PROFILE.
		INSERT INTO LOAD_PROFILE_POINT (PROFILE_ID, POINT_INDEX, POINT_DATE, AS_OF_DATE, POINT_VAL)
		VALUES (p_DAILY_TOTAL_PROFILE_ID, g_DEFAULT_POINT_INDEX, v_CURRENT_DATE, p_CAST_CONTEXT.OUTPUT_AS_OF_DATE, v_DAILY_TOTAL);

		v_PROFILE.DELETE;
		FW.RELEASE_WEATHER;
		v_CURRENT_DATE := v_CURRENT_DATE + 1;
	END LOOP;

	--SAVE THE LT AVERAGE PROFILE VALUE
	INSERT INTO LOAD_PROFILE_POINT (PROFILE_ID, POINT_INDEX, POINT_DATE, AS_OF_DATE, POINT_VAL)
	SELECT p_LONG_TERM_PROFILE_ID, g_DEFAULT_POINT_INDEX, X.WORK_DATE, p_CAST_CONTEXT.OUTPUT_AS_OF_DATE, AVG(TO_NUMBER(X.WORK_DATA))
	FROM RTO_WORK X
	WHERE X.WORK_ID = p_WORK_ID
		AND X.WORK_XID = p_LONG_TERM_PROFILE_ID
	GROUP BY X.WORK_DATE;

	FP.PUT_LOAD_PROFILE_STATISTICS(p_LONG_TERM_PROFILE_ID, g_DEFAULT_POINT_INDEX, p_CAST_CONTEXT.OUTPUT_AS_OF_DATE);
	FP.PUT_LOAD_PROFILE_STATISTICS(p_DAILY_TOTAL_PROFILE_ID, g_DEFAULT_POINT_INDEX, p_CAST_CONTEXT.OUTPUT_AS_OF_DATE);

	--CLEAR OUT WORK TABLE FOR THIS PROFILE.
	DELETE RTO_WORK WHERE WORK_ID = p_WORK_ID AND WORK_XID = p_LONG_TERM_PROFILE_ID;

END UPDATE_LONG_TERM_PROFILE_DATA;
----------------------------------------------------------------------------------------------------
PROCEDURE CREATE_LONG_TERM_PROFILES
	(
	p_CAST_CONTEXT IN OUT NOCOPY CAST_CONTEXT_TYPE,
	p_RUN_MODE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_STATUS OUT NUMBER
	) AS

	v_PREV_CALENDAR_ID NUMBER(9) := -1;
	v_PREV_STATION_ID NUMBER(9) := -1;
	v_LT_CALENDAR_NAME CALENDAR.CALENDAR_NAME%TYPE;
	v_LT_CALENDAR_ID NUMBER(9);
	v_LT_PROFILE_ID NUMBER(9);
	v_LT_PROFILE_INTERVAL LOAD_PROFILE.PROFILE_INTERVAL%TYPE;
	v_DAILY_TOTAL_CALENDAR_NAME CALENDAR.CALENDAR_NAME%TYPE;
	v_DAILY_TOTAL_CALENDAR_ID NUMBER(9);
	v_DAILY_TOTAL_PROFILE_ID NUMBER(9);
	v_DAILY_TOTAL_PROFILE_INTERVAL LOAD_PROFILE.PROFILE_INTERVAL%TYPE := 1;
	v_WORK_ID NUMBER(9);
	v_CALENDAR_DEPENDS_ON_WEATHER BOOLEAN;

	CURSOR c_CALENDARS IS
		SELECT A.CALENDAR_ID, A.ACCOUNT_ID, B.CALENDAR_NAME, D.WEATHER_STATION_ID "STATION_ID", E.STATION_NAME
		FROM ACCOUNT_CALENDAR A, CALENDAR B, ACCOUNT_SERVICE_LOCATION C, SERVICE_LOCATION D, WEATHER_STATION E
		WHERE A.CASE_ID = GA.BASE_CASE_ID
			AND A.CALENDAR_TYPE = 'Forecast'
			AND A.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE
			AND NVL(A.END_DATE, p_CAST_CONTEXT.BEGIN_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND B.CALENDAR_ID = A.CALENDAR_ID
			AND C.ACCOUNT_ID = A.ACCOUNT_ID
			AND C.BEGIN_DATE <= p_CAST_CONTEXT.END_DATE
			AND NVL(C.END_DATE, p_CAST_CONTEXT.BEGIN_DATE) >= p_CAST_CONTEXT.BEGIN_DATE
			AND D.SERVICE_LOCATION_ID = C.SERVICE_LOCATION_ID
			AND E.STATION_ID = D.WEATHER_STATION_ID
			--NEXT LINE FOR DEBUG ONLY
			--AND A.ACCOUNT_ID = 28424
		ORDER BY 1;

BEGIN

	UT.GET_RTO_WORK_ID(v_WORK_ID);
	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('CREATE_LONG_TERM_PROFILES ' || UT.TRACE_DATE(SYSDATE));
	END IF;

	--FOR EACH FORECAST CALENDAR
	FOR v_CALENDARS IN c_CALENDARS LOOP

		IF LOGS.IS_DEBUG_ENABLED THEN
			LOGS.LOG_DEBUG('CREATING LT PROFILE FOR ACCOUNT_ID=' || v_CALENDARS.ACCOUNT_ID);
		END IF;

		--IF THIS IS A DIFFERENT CALENDAR/STATION COMBO, THEN INITIALIZE IT.
		IF v_PREV_CALENDAR_ID <> v_CALENDARS.CALENDAR_ID OR v_PREV_STATION_ID <> v_CALENDARS.STATION_ID THEN

			--DETERMINE WHETHER THIS FORECAST CALENDAR DEPENDS ON A WEATHER STATION.
			GET_PROFILE_INFO_FROM_CAL(v_CALENDARS.CALENDAR_ID, v_CALENDAR_DEPENDS_ON_WEATHER, v_LT_PROFILE_INTERVAL);

			--WE NEED TO INITIALIZE A NEW CALENDAR ONLY IF IT IS A NEW CALENDAR ID, OR IF IT
			--IS WEATHER DEPENDENT (AND HENCE, A NEW STATION ID FOR THE SAME CALENDAR).
			--WE DON'T NEED TO INITIALIZE AGAIN IF A NON-WEATHER-DEPENDENT CALENDAR HAS A NEW STATION ID
			--BECAUSE THE STATION DOESN'T AFFECT THE PROFILE.
			IF v_CALENDAR_DEPENDS_ON_WEATHER OR v_PREV_CALENDAR_ID <> v_CALENDARS.CALENDAR_ID THEN

				--CREATE THE NEW CALENDARS IF THEY DO NOT EXIST.
				v_LT_CALENDAR_NAME := GET_LONG_TERM_CALENDAR_NAME(v_CALENDARS.CALENDAR_NAME, p_RUN_MODE, v_CALENDAR_DEPENDS_ON_WEATHER, v_CALENDARS.STATION_NAME, FALSE);
				ID.ID_FOR_CALENDAR(v_LT_CALENDAR_NAME, TRUE, v_LT_CALENDAR_ID);
				v_DAILY_TOTAL_CALENDAR_NAME := GET_LONG_TERM_CALENDAR_NAME(v_CALENDARS.CALENDAR_NAME, p_RUN_MODE, v_CALENDAR_DEPENDS_ON_WEATHER, v_CALENDARS.STATION_NAME, TRUE);
				ID.ID_FOR_CALENDAR(v_DAILY_TOTAL_CALENDAR_NAME, TRUE, v_DAILY_TOTAL_CALENDAR_ID);

				--GET THE LONG TERM PROFILES AND ASSIGN IT TO THE CALENDARS.
				v_LT_PROFILE_ID := GET_LONG_TERM_PROFILE_ID(v_LT_CALENDAR_NAME, v_LT_PROFILE_INTERVAL, p_RUN_MODE, FALSE);
				ASSIGN_PROFILE_TO_CALENDAR(v_LT_PROFILE_ID, v_LT_CALENDAR_ID, p_STATUS);
				v_DAILY_TOTAL_PROFILE_ID := GET_LONG_TERM_PROFILE_ID(v_DAILY_TOTAL_CALENDAR_NAME, v_DAILY_TOTAL_PROFILE_INTERVAL, p_RUN_MODE, TRUE);
				ASSIGN_PROFILE_TO_CALENDAR(v_DAILY_TOTAL_PROFILE_ID, v_DAILY_TOTAL_CALENDAR_ID, p_STATUS);

				--UPDATE THE LONG TERM PROFILE WITH THE LATEST DATA
				UPDATE_LONG_TERM_PROFILE_DATA(v_WORK_ID, p_CAST_CONTEXT, p_RUN_MODE, v_CALENDARS.CALENDAR_ID, v_LT_PROFILE_ID, v_DAILY_TOTAL_PROFILE_ID, v_CALENDARS.STATION_ID, p_TIME_ZONE);
			END IF;
			v_PREV_CALENDAR_ID := v_CALENDARS.CALENDAR_ID;
			v_PREV_STATION_ID := v_CALENDARS.STATION_ID;

		END IF;

		--ASSIGN THE LT CALENDARS TO THE ACCOUNT.
		ASSIGN_LT_CALENDAR_TO_ACCOUNT(v_LT_CALENDAR_ID, v_CALENDARS.ACCOUNT_ID, p_RUN_MODE, FALSE, p_STATUS);
		ASSIGN_LT_CALENDAR_TO_ACCOUNT(v_DAILY_TOTAL_CALENDAR_ID, v_CALENDARS.ACCOUNT_ID, p_RUN_MODE, TRUE, p_STATUS);
		COMMIT;
	END LOOP;

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('END CREATE_LONG_TERM_PROFILES ' || UT.TRACE_DATE(SYSDATE));
	END IF;

END CREATE_LONG_TERM_PROFILES;
--------------------------------------------------------------------------------------------------
END FL;
/
