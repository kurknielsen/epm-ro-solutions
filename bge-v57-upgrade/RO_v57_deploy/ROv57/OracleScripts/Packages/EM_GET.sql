
CREATE OR REPLACE PACKAGE EM_GET AS
-- Revision: $Revision: 1.11 $

-- Entity Input/Output package

-- NOTE: This package is AUTO-GENERATED

FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE ACCOUNT
	(
	p_ACCOUNT_ID IN NUMBER,
	p_ACCOUNT_NAME OUT VARCHAR2,
	p_ACCOUNT_ALIAS OUT VARCHAR2,
	p_ACCOUNT_DESC OUT VARCHAR2,
	p_ACCOUNT_DUNS_NUMBER OUT VARCHAR2,
	p_ACCOUNT_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_ACCOUNT_MODEL_OPTION OUT VARCHAR2,
	p_ACCOUNT_SIC_CODE OUT VARCHAR2,
	p_ACCOUNT_METER_TYPE OUT VARCHAR2,
	p_ACCOUNT_METER_EXT_IDENTIFIER OUT VARCHAR2,
	p_ACCOUNT_DISPLAY_NAME OUT VARCHAR2,
	p_ACCOUNT_BILL_OPTION OUT VARCHAR2,
	p_ACCOUNT_ROLLUP_ID OUT NUMBER,
	p_IS_EXTERNAL_INTERVAL_USAGE OUT NUMBER,
	p_IS_EXTERNAL_BILLED_USAGE OUT NUMBER,
	p_IS_AGGREGATE_ACCOUNT OUT NUMBER,
	p_IS_UFE_PARTICIPANT OUT NUMBER,
	p_IS_CREATE_SETTLEMENT_PROFILE OUT NUMBER,
	p_IS_EXTERNAL_FORECAST OUT NUMBER,
	p_IS_SUB_AGGREGATE OUT NUMBER,
	p_TX_SERVICE_TYPE_ID OUT NUMBER,
	p_TX_SERVICE_TYPE_DISP OUT VARCHAR2,
	p_USE_TOU_USAGE_FACTOR OUT NUMBER,
	p_MODEL_ID OUT NUMBER
	);

PROCEDURE ACCOUNT_GROUP
	(
	p_ACCOUNT_GROUP_ID IN NUMBER,
	p_ACCOUNT_GROUP_NAME OUT VARCHAR2,
	p_ACCOUNT_GROUP_ALIAS OUT VARCHAR2,
	p_ACCOUNT_GROUP_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	);

PROCEDURE ANCILLARY_SERVICE
	(
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_ANCILLARY_SERVICE_NAME OUT VARCHAR2,
	p_ANCILLARY_SERVICE_ALIAS OUT VARCHAR2,
	p_ANCILLARY_SERVICE_DESC OUT VARCHAR2,
	p_ANCILLARY_SERVICE_TYPE OUT VARCHAR2,
	p_PROVIDER_CATEGORY OUT VARCHAR2,
	p_PROVIDER_ID OUT NUMBER,
	p_TRANSACTION_TYPE OUT VARCHAR2,
	p_IT_COMMODITY_ID OUT NUMBER,
	p_IT_COMMODITY_DISP OUT VARCHAR2,
	p_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_MINIMUM_SCHEDULE_AMT OUT NUMBER,
	p_ANCILLARY_SERVICE_UNIT OUT VARCHAR2
	);

PROCEDURE AREA
	(
	p_AREA_ID IN NUMBER,
	p_AREA_NAME OUT VARCHAR2,
	p_AREA_ALIAS OUT VARCHAR2,
	p_AREA_DESC OUT VARCHAR2,
	p_AREA_INTERVAL OUT VARCHAR2,
	p_PROJECTION_PERIOD OUT VARCHAR2
	);

PROCEDURE BILL_CYCLE
	(
	p_BILL_CYCLE_ID IN NUMBER,
	p_BILL_CYCLE_NAME OUT VARCHAR2,
	p_BILL_CYCLE_ALIAS OUT VARCHAR2,
	p_BILL_CYCLE_DESC OUT VARCHAR2
	);

PROCEDURE BILL_PARTY
	(
	p_BILL_PARTY_ID IN NUMBER,
	p_BILL_PARTY_NAME OUT VARCHAR2,
	p_BILL_PARTY_ALIAS OUT VARCHAR2,
	p_BILL_PARTY_DESC OUT VARCHAR2,
	p_BILL_PARTY_STATUS OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_IS_INVOICE_DETAIL OUT NUMBER
	);

PROCEDURE CA
	(
	p_CA_ID IN NUMBER,
	p_CA_NAME OUT VARCHAR2,
	p_CA_ALIAS OUT VARCHAR2,
	p_CA_DESC OUT VARCHAR2,
	p_CA_NERC_CODE OUT VARCHAR2,
	p_CA_STATUS OUT VARCHAR2,
	p_CA_DUNS_NUMBER OUT VARCHAR2
	);

PROCEDURE CALC_PROCESS
	(
	p_CALC_PROCESS_ID IN NUMBER,
	p_CALC_PROCESS_NAME OUT VARCHAR2,
	p_CALC_PROCESS_ALIAS OUT VARCHAR2,
	p_CALC_PROCESS_DESC OUT VARCHAR2,
	p_CALC_PROCESS_CATEGORY OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_PROCESS_INTERVAL OUT VARCHAR2,
	p_WEEK_BEGIN OUT VARCHAR2,
	p_CONTEXT_DOMAIN_ID OUT NUMBER,
	p_CONTEXT_DOMAIN_DISP OUT VARCHAR2,
	p_CONTEXT_REALM_ID OUT NUMBER,
	p_CONTEXT_REALM_DISP OUT VARCHAR2,
	p_CONTEXT_GROUP_ID OUT NUMBER,
	p_CONTEXT_GROUP_DISP OUT VARCHAR2,
	p_CONTEXT_NAME OUT VARCHAR2,
	p_IS_STATEMENT_TYPE_SPECIFIC OUT NUMBER
	);

PROCEDURE CALENDAR
	(
	p_CALENDAR_ID IN NUMBER,
	p_CALENDAR_NAME OUT VARCHAR2,
	p_CALENDAR_ALIAS OUT VARCHAR2,
	p_CALENDAR_DESC OUT VARCHAR2,
	p_ASSIGNMENT_TYPE OUT VARCHAR2,
	p_HAS_ADJUSTMENTS OUT NUMBER
	);

PROCEDURE CASE_LABEL
	(
	p_CASE_ID IN NUMBER,
	p_CASE_NAME OUT VARCHAR2,
	p_CASE_ALIAS OUT VARCHAR2,
	p_CASE_DESC OUT VARCHAR2,
	p_CASE_CATEGORY OUT VARCHAR2
	);

PROCEDURE CATEGORY
	(
	p_CATEGORY_ID IN NUMBER,
	p_CATEGORY_NAME OUT VARCHAR2,
	p_CATEGORY_ALIAS OUT VARCHAR2,
	p_CATEGORY_DESC OUT VARCHAR2
	);

PROCEDURE COMPONENT
	(
	p_COMPONENT_ID IN NUMBER,
	p_COMPONENT_NAME OUT VARCHAR2,
	p_COMPONENT_ALIAS OUT VARCHAR2,
	p_COMPONENT_DESC OUT VARCHAR2,
	p_COMPONENT_ENTITY OUT VARCHAR2,
	p_CHARGE_TYPE OUT VARCHAR2,
	p_RATE_STRUCTURE OUT VARCHAR2,
	p_RATE_INTERVAL OUT VARCHAR2,
	p_IS_REBILL OUT NUMBER,
	p_IS_TAXED OUT NUMBER,
	p_IS_CUSTOM_CHARGE OUT NUMBER,
	p_IS_CREDIT_CHARGE OUT NUMBER,
	p_IS_INCLUDE_TX_LOSS OUT NUMBER,
	p_IS_INCLUDE_DX_LOSS OUT NUMBER,
	p_TEMPLATE_ID OUT NUMBER,
	p_TEMPLATE_DISP OUT VARCHAR2,
	p_MARKET_PRICE_ID OUT NUMBER,
	p_MARKET_PRICE_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_MODEL_ID OUT NUMBER,
	p_EVENT_ID OUT NUMBER,
	p_EVENT_DISP OUT VARCHAR2,
	p_COMPONENT_REFERENCE OUT VARCHAR2,
	p_INVOICE_GROUP_ID OUT NUMBER,
	p_INVOICE_GROUP_DISP OUT VARCHAR2,
	p_INVOICE_GROUP_ORDER OUT NUMBER,
	p_COMPUTATION_ORDER OUT NUMBER,
	p_QUANTITY_UNIT OUT VARCHAR2,
	p_CURRENCY_UNIT OUT VARCHAR2,
	p_QUANTITY_TYPE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_COMPONENT_CATEGORY OUT VARCHAR2,
	p_GL_DEBIT_ACCOUNT OUT VARCHAR2,
	p_GL_CREDIT_ACCOUNT OUT VARCHAR2,
	p_FIRM_NON_FIRM OUT VARCHAR2,
	p_EXCLUDE_FROM_INVOICE OUT NUMBER,
	p_EXCLUDE_FROM_INVOICE_TOTAL OUT NUMBER,
	p_IMBALANCE_TYPE OUT VARCHAR2,
	p_ACCUMULATION_PERIOD OUT NUMBER,
	p_BASE_COMPONENT_ID OUT NUMBER,
	p_BASE_COMPONENT_DISP OUT VARCHAR2,
	p_BASE_LIMIT_ID OUT NUMBER,
	p_BASE_LIMIT_DISP OUT VARCHAR2,
	p_MARKET_TYPE OUT VARCHAR2,
	p_MARKET_PRICE_TYPE OUT VARCHAR2,
	p_WHICH_INTERVAL OUT VARCHAR2,
	p_LMP_PRICE_CALC OUT VARCHAR2,
	p_LMP_INCLUDE_EXT OUT NUMBER,
	p_LMP_INCLUDE_SALES OUT VARCHAR2,
	p_CHARGE_WHEN OUT VARCHAR2,
	p_BILATERALS_SIGN OUT NUMBER,
	p_LMP_COMMODITY_ID OUT NUMBER,
	p_LMP_COMMODITY_DISP OUT VARCHAR2,
	p_LMP_BASE_COMMODITY_ID OUT NUMBER,
	p_LMP_BASE_COMMODITY_DISP OUT VARCHAR2,
	p_USE_ZONAL_PRICE OUT NUMBER,
	p_ALTERNATE_PRICE OUT VARCHAR2,
	p_ALTERNATE_PRICE_FUNCTION OUT VARCHAR2,
	p_EXCLUDE_FROM_BILLING_EXPORT OUT NUMBER,
	p_IS_DEFAULT_TEMPLATE OUT NUMBER,
	p_KWH_MULTIPLIER OUT NUMBER,
	p_ANCILLARY_SERVICE_ID OUT NUMBER,
	p_ANCILLARY_SERVICE_DISP OUT VARCHAR2,
	p_APPLY_RATE_FOR OUT VARCHAR2,
	p_LOSS_ADJ_TYPE OUT NUMBER
	);

PROCEDURE CONDITIONAL_FORMAT
	(
	p_CONDITIONAL_FORMAT_ID IN NUMBER,
	p_CONDITIONAL_FORMAT_NAME OUT VARCHAR2,
	p_CONDITIONAL_FORMAT_ALIAS OUT VARCHAR2,
	p_CONDITIONAL_FORMAT_DESC OUT VARCHAR2,
	p_CONDITIONAL_FORMAT_MODULE OUT VARCHAR2
	);

PROCEDURE CONTACT
	(
	p_CONTACT_ID IN NUMBER,
	p_CONTACT_NAME OUT VARCHAR2,
	p_CONTACT_ALIAS OUT VARCHAR2,
	p_CONTACT_DESC OUT VARCHAR2,
	p_CONTACT_STATUS OUT VARCHAR2,
	p_EMAIL_ADDRESS OUT VARCHAR2,
	p_FIRST_NAME OUT VARCHAR2,
	p_MIDDLE_NAME OUT VARCHAR2,
	p_LAST_NAME OUT VARCHAR2,
	p_SALUTATION OUT VARCHAR2,
	p_TITLE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	);

PROCEDURE CONTRACT
	(
	p_CONTRACT_ID IN NUMBER,
	p_CONTRACT_NAME OUT VARCHAR2,
	p_CONTRACT_ALIAS OUT VARCHAR2,
	p_CONTRACT_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_IS_ESTIMATED_END_DATE OUT NUMBER,
	p_IS_EVERGREEN OUT NUMBER,
	p_IS_INTERRUPTIBLE OUT NUMBER,
	p_EXPECTED_RENEWAL_PCT OUT NUMBER,
	p_NEXT_ACTION_DATE OUT DATE,
	p_NOTIFICATION_REQUIREMENTS OUT VARCHAR2,
	p_CURTAILMENT_ABILITY OUT VARCHAR2,
	p_PENALTY_CLAUSES OUT VARCHAR2,
	p_PRICING_MODEL OUT VARCHAR2
	);

PROCEDURE CONTRACT_LIMIT
	(
	p_LIMIT_ID IN NUMBER,
	p_LIMIT_NAME OUT VARCHAR2,
	p_LIMIT_ALIAS OUT VARCHAR2,
	p_LIMIT_DESC OUT VARCHAR2,
	p_LIMIT_TYPE OUT VARCHAR2,
	p_LIMIT_MEASURE OUT VARCHAR2,
	p_LIMIT_INTERVAL OUT VARCHAR2,
	p_LIMIT_IS_SEASONABLE OUT NUMBER,
	p_TEMPLATE_ID OUT NUMBER,
	p_TEMPLATE_DISP OUT VARCHAR2,
	p_PERIOD_ID OUT NUMBER,
	p_PERIOD_DISP OUT VARCHAR2
	);

PROCEDURE CUSTOMER
	(
	p_CUSTOMER_ID IN NUMBER,
	p_CUSTOMER_NAME OUT VARCHAR2,
	p_CUSTOMER_ALIAS OUT VARCHAR2,
	p_CUSTOMER_DESC OUT VARCHAR2,
	p_CUSTOMER_IDENTIFIER OUT VARCHAR2,
	p_CUSTOMER_STATUS OUT VARCHAR2,
	p_CUSTOMER_IS_ACTIVE OUT NUMBER
	);

PROCEDURE DATA_LOCK_GROUP
	(
	p_DATA_LOCK_GROUP_ID IN NUMBER,
	p_DATA_LOCK_GROUP_NAME OUT VARCHAR2,
	p_DATA_LOCK_GROUP_ALIAS OUT VARCHAR2,
	p_DATA_LOCK_GROUP_DESC OUT VARCHAR2,
	p_DATA_LOCK_GROUP_INTERVAL OUT VARCHAR2,
	p_IS_AUTOMATIC OUT NUMBER,
	p_AUTOLOCK_DATE_FORMULA OUT VARCHAR2,
	p_LOCK_LIMIT_DATE_FORMULA OUT VARCHAR2,
	p_LOCK_STATE OUT VARCHAR2,
	p_LAST_PROCESSED_INTERVAL OUT DATE,
	p_TIME_ZONE OUT VARCHAR2,
	p_WEEK_BEGIN OUT VARCHAR2
	);

PROCEDURE DER
	(
	p_DER_ID IN NUMBER,
	p_DER_NAME OUT VARCHAR2,
	p_DER_ALIAS OUT VARCHAR2,
	p_DER_DESC OUT VARCHAR2,
	p_SERVICE_LOCATION_ID OUT NUMBER,
	p_SERVICE_LOCATION_DISP OUT VARCHAR2,
	p_DER_TYPE_ID OUT NUMBER,
	p_DER_TYPE_DISP OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_ID OUT NUMBER,
	p_EXTERNAL_SYSTEM_DISP OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_SERIAL_NUMBER OUT VARCHAR2
	);

PROCEDURE DER_TYPE
	(
	p_DER_TYPE_ID IN NUMBER,
	p_DER_TYPE_NAME OUT VARCHAR2,
	p_DER_TYPE_ALIAS OUT VARCHAR2,
	p_DER_TYPE_DESC OUT VARCHAR2,
	p_DER_TYPE_FUNCTION OUT VARCHAR2,
	p_DER_TYPE_CATEGORY OUT VARCHAR2,
	p_DEFAULT_FAILURE_PCT OUT NUMBER,
	p_USE_DEFAULT_FAIL_PCT OUT NUMBER,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	);

PROCEDURE DR_EVENT
	(
	p_EVENT_ID IN NUMBER,
	p_EVENT_NAME OUT VARCHAR2,
	p_EVENT_ALIAS OUT VARCHAR2,
	p_EVENT_DESC OUT VARCHAR2,
	p_VPP_ID OUT NUMBER,
	p_VPP_DISP OUT VARCHAR2,
	p_EVENT_STATUS OUT VARCHAR2,
	p_START_TIME OUT DATE,
	p_STOP_TIME OUT DATE,
	p_EVENT_TYPE OUT VARCHAR2
	);

PROCEDURE EDC
	(
	p_EDC_ID IN NUMBER,
	p_EDC_NAME OUT VARCHAR2,
	p_EDC_ALIAS OUT VARCHAR2,
	p_EDC_DESC OUT VARCHAR2,
	p_EDC_STATUS OUT VARCHAR2,
	p_EDC_DUNS_NUMBER OUT VARCHAR2,
	p_EDC_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_EDC_SETTLEMENT_AGENT_NAME OUT VARCHAR2,
	p_EDC_LOSS_FACTOR_OPTION OUT VARCHAR2,
	p_EDC_SYSTEM_LOAD_ID OUT NUMBER,
	p_EDC_SYSTEM_LOAD_DISP OUT VARCHAR2,
	p_EDC_MARKET_PRICE_ID OUT NUMBER,
	p_EDC_MARKET_PRICE_DISP OUT VARCHAR2,
	p_EDC_HOLIDAY_SET_ID OUT NUMBER,
	p_EDC_HOLIDAY_SET_DISP OUT VARCHAR2,
	p_EDC_SC_ID OUT NUMBER,
	p_EDC_SC_DISP OUT VARCHAR2,
	p_EDC_EXCLUDE_LOAD_SCHEDULE OUT NUMBER
	);

PROCEDURE ENTITY_DOMAIN
	(
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_ENTITY_DOMAIN_NAME OUT VARCHAR2,
	p_ENTITY_DOMAIN_ALIAS OUT VARCHAR2,
	p_ENTITY_DOMAIN_DESC OUT VARCHAR2,
	p_ENTITY_DOMAIN_TABLE OUT VARCHAR2,
	p_ENTITY_DOMAIN_TABLE_ALIAS OUT VARCHAR2,
	p_ENTITY_DOMAIN_CATEGORY OUT VARCHAR2,
	p_DISPLAY_NAME OUT VARCHAR2,
	p_INCLUDE_CONTACT_ADDRESS OUT NUMBER,
	p_INCLUDE_ENTITY_ATTRIBUTE OUT NUMBER,
	p_INCLUDE_EXTERNAL_IDENTIFIER OUT NUMBER,
	p_INCLUDE_GROUPS OUT NUMBER,
	p_INCLUDE_NOTES OUT NUMBER,
	p_IS_PSEUDO OUT NUMBER
	);

PROCEDURE ENTITY_GROUP
	(
	p_ENTITY_GROUP_ID IN NUMBER,
	p_ENTITY_GROUP_NAME OUT VARCHAR2,
	p_ENTITY_GROUP_ALIAS OUT VARCHAR2,
	p_ENTITY_GROUP_DESC OUT VARCHAR2,
	p_ENTITY_DOMAIN_ID OUT NUMBER,
	p_ENTITY_DOMAIN_DISP OUT VARCHAR2,
	p_PARENT_GROUP_ID OUT NUMBER,
	p_PARENT_GROUP_DISP OUT VARCHAR2,
	p_IS_MATRIX OUT NUMBER,
	p_GROUP_CATEGORY OUT VARCHAR2
	);

PROCEDURE ESP
	(
	p_ESP_ID IN NUMBER,
	p_ESP_NAME OUT VARCHAR2,
	p_ESP_ALIAS OUT VARCHAR2,
	p_ESP_DESC OUT VARCHAR2,
	p_ESP_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_ESP_DUNS_NUMBER OUT VARCHAR2,
	p_ESP_STATUS OUT VARCHAR2,
	p_ESP_TYPE OUT VARCHAR2,
	p_ESP_EXCLUDE_LOAD_SCHEDULE OUT NUMBER
	);

PROCEDURE ETAG
	(
	p_ETAG_ID IN NUMBER,
	p_ETAG_NAME OUT VARCHAR2,
	p_ETAG_ALIAS OUT VARCHAR2,
	p_ETAG_DESC OUT VARCHAR2,
	p_TAG_IDENT OUT VARCHAR2,
	p_GCA_CODE OUT VARCHAR2,
	p_PSE_CODE OUT VARCHAR2,
	p_TAG_CODE OUT VARCHAR2,
	p_LCA_CODE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_ETAG_STATUS OUT VARCHAR2,
	p_SECURITY_KEY OUT VARCHAR2,
	p_WSCC_PRESCHEDULE_FLAG OUT VARCHAR2,
	p_TEST_FLAG OUT VARCHAR2,
	p_TRANSACTION_TYPE OUT VARCHAR2,
	p_NOTES OUT VARCHAR2
	);

PROCEDURE EXTERNAL_SYSTEM
	(
	p_EXTERNAL_SYSTEM_ID IN NUMBER,
	p_EXTERNAL_SYSTEM_NAME OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_ALIAS OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_DESC OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_TYPE OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_DISPLAY_NAME OUT VARCHAR2,
	p_IS_ENABLED OUT NUMBER,
	p_EXTERNAL_ACCOUNT_DOMAIN_ID OUT NUMBER,
	p_EXTERNAL_ACCOUNT_DOMAIN_DISP OUT VARCHAR2,
	p_HAS_UNAME_PWD_CREDENTIALS OUT NUMBER,
	p_NUMBER_OF_CERTIFICATES OUT NUMBER
	);

PROCEDURE EXTERNAL_TRANSACTION
	(
	p_TRANSACTION_ID IN NUMBER,
	p_TRANSACTION_NAME OUT VARCHAR2,
	p_TRANSACTION_ALIAS OUT VARCHAR2,
	p_TRANSACTION_DESC OUT VARCHAR2,
	p_TRANSACTION_TYPE OUT VARCHAR2,
	p_TRANSACTION_CODE OUT VARCHAR2,
	p_TRANSACTION_IDENTIFIER OUT VARCHAR2,
	p_IS_FIRM OUT NUMBER,
	p_IS_IMPORT_SCHEDULE OUT NUMBER,
	p_IS_EXPORT_SCHEDULE OUT NUMBER,
	p_IS_BALANCE_TRANSACTION OUT NUMBER,
	p_IS_BID_OFFER OUT NUMBER,
	p_IS_EXCLUDE_FROM_POSITION OUT NUMBER,
	p_IS_IMPORT_EXPORT OUT NUMBER,
	p_IS_DISPATCHABLE OUT NUMBER,
	p_TRANSACTION_INTERVAL OUT VARCHAR2,
	p_EXTERNAL_INTERVAL OUT VARCHAR2,
	p_ETAG_CODE OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_PURCHASER_ID OUT NUMBER,
	p_PURCHASER_DISP OUT VARCHAR2,
	p_SELLER_ID OUT NUMBER,
	p_SELLER_DISP OUT VARCHAR2,
	p_CONTRACT_ID OUT NUMBER,
	p_CONTRACT_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_POR_ID OUT NUMBER,
	p_POR_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_COMMODITY_ID OUT NUMBER,
	p_COMMODITY_DISP OUT VARCHAR2,
	p_SERVICE_TYPE_ID OUT NUMBER,
	p_SERVICE_TYPE_DISP OUT VARCHAR2,
	p_TX_TRANSACTION_ID OUT NUMBER,
	p_TX_TRANSACTION_DISP OUT VARCHAR2,
	p_PATH_ID OUT NUMBER,
	p_PATH_DISP OUT VARCHAR2,
	p_LINK_TRANSACTION_ID OUT NUMBER,
	p_LINK_TRANSACTION_DISP OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_PSE_ID OUT NUMBER,
	p_PSE_DISP OUT VARCHAR2,
	p_ESP_ID OUT NUMBER,
	p_ESP_DISP OUT VARCHAR2,
	p_POOL_ID OUT NUMBER,
	p_POOL_DISP OUT VARCHAR2,
	p_SCHEDULE_GROUP_ID OUT NUMBER,
	p_SCHEDULE_GROUP_DISP OUT VARCHAR2,
	p_MARKET_PRICE_ID OUT NUMBER,
	p_MARKET_PRICE_DISP OUT VARCHAR2,
	p_ZOR_ID OUT NUMBER,
	p_ZOR_DISP OUT VARCHAR2,
	p_ZOD_ID OUT NUMBER,
	p_ZOD_DISP OUT VARCHAR2,
	p_SOURCE_ID OUT NUMBER,
	p_SOURCE_DISP OUT VARCHAR2,
	p_SINK_ID OUT NUMBER,
	p_SINK_DISP OUT VARCHAR2,
	p_RESOURCE_ID OUT NUMBER,
	p_RESOURCE_DISP OUT VARCHAR2,
	p_AGREEMENT_TYPE OUT VARCHAR2,
	p_APPROVAL_TYPE OUT VARCHAR2,
	p_LOSS_OPTION OUT VARCHAR2,
	p_TRAIT_CATEGORY OUT VARCHAR2,
	p_TP_ID OUT NUMBER,
	p_TP_DISP OUT VARCHAR2
	);

PROCEDURE GEOGRAPHY
	(
	p_GEOGRAPHY_ID IN NUMBER,
	p_GEOGRAPHY_NAME OUT VARCHAR2,
	p_GEOGRAPHY_ALIAS OUT VARCHAR2,
	p_GEOGRAPHY_DESC OUT VARCHAR2,
	p_GEOGRAPHY_TYPE OUT VARCHAR2,
	p_PARENT_GEOGRAPHY_ID OUT NUMBER,
	p_PARENT_GEOGRAPHY_DISP OUT VARCHAR2,
	p_DISPLAY_NAME OUT VARCHAR2,
	p_ABBREVIATION OUT VARCHAR2
	);

PROCEDURE GROWTH_PATTERN
	(
	p_PATTERN_ID IN NUMBER,
	p_PATTERN_NAME OUT VARCHAR2,
	p_PATTERN_ALIAS OUT VARCHAR2,
	p_PATTERN_DESC OUT VARCHAR2,
	p_JAN_PCT OUT NUMBER,
	p_FEB_PCT OUT NUMBER,
	p_MAR_PCT OUT NUMBER,
	p_APR_PCT OUT NUMBER,
	p_MAY_PCT OUT NUMBER,
	p_JUN_PCT OUT NUMBER,
	p_JUL_PCT OUT NUMBER,
	p_AUG_PCT OUT NUMBER,
	p_SEP_PCT OUT NUMBER,
	p_OCT_PCT OUT NUMBER,
	p_NOV_PCT OUT NUMBER,
	p_DEC_PCT OUT NUMBER
	);

PROCEDURE HEAT_RATE_CURVE
	(
	p_HEAT_RATE_CURVE_ID IN NUMBER,
	p_HEAT_RATE_CURVE_NAME OUT VARCHAR2,
	p_HEAT_RATE_CURVE_ALIAS OUT VARCHAR2,
	p_HEAT_RATE_CURVE_DESC OUT VARCHAR2,
	p_STATION_ID OUT NUMBER,
	p_STATION_DISP OUT VARCHAR2,
	p_PARAMETER_1_ID OUT NUMBER,
	p_PARAMETER_1_DISP OUT VARCHAR2,
	p_PARAMETER_1_ROUND_TO_NEAREST OUT NUMBER,
	p_PARAMETER_1_ROUNDING_STYLE OUT VARCHAR2,
	p_PARAMETER_2_ID OUT NUMBER,
	p_PARAMETER_2_DISP OUT VARCHAR2,
	p_PARAMETER_2_ROUND_TO_NEAREST OUT NUMBER,
	p_PARAMETER_2_ROUNDING_STYLE OUT VARCHAR2,
	p_PARAMETER_3_ID OUT NUMBER,
	p_PARAMETER_3_DISP OUT VARCHAR2,
	p_PARAMETER_3_ROUND_TO_NEAREST OUT NUMBER,
	p_PARAMETER_3_ROUNDING_STYLE OUT VARCHAR2
	);

PROCEDURE HOLIDAY
	(
	p_HOLIDAY_ID IN NUMBER,
	p_HOLIDAY_NAME OUT VARCHAR2,
	p_HOLIDAY_ALIAS OUT VARCHAR2,
	p_HOLIDAY_DESC OUT VARCHAR2
	);

PROCEDURE HOLIDAY_SET
	(
	p_HOLIDAY_SET_ID IN NUMBER,
	p_HOLIDAY_SET_NAME OUT VARCHAR2,
	p_HOLIDAY_SET_ALIAS OUT VARCHAR2,
	p_HOLIDAY_SET_DESC OUT VARCHAR2
	);

PROCEDURE INTERCHANGE_CONTRACT
	(
	p_CONTRACT_ID IN NUMBER,
	p_CONTRACT_NAME OUT VARCHAR2,
	p_CONTRACT_ALIAS OUT VARCHAR2,
	p_CONTRACT_DESC OUT VARCHAR2,
	p_CONTRACT_STATUS OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_IS_EVERGREEN OUT NUMBER,
	p_CONTRACT_TYPE OUT VARCHAR2,
	p_BILLING_ENTITY_ID OUT NUMBER,
	p_BILLING_ENTITY_DISP OUT VARCHAR2,
	p_PURCHASER_ID OUT NUMBER,
	p_PURCHASER_DISP OUT VARCHAR2,
	p_SELLER_ID OUT NUMBER,
	p_SELLER_DISP OUT VARCHAR2,
	p_SOURCE_ID OUT NUMBER,
	p_SOURCE_DISP OUT VARCHAR2,
	p_SINK_ID OUT NUMBER,
	p_SINK_DISP OUT VARCHAR2,
	p_POR_ID OUT NUMBER,
	p_POR_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_AGREEMENT_TYPE OUT VARCHAR2,
	p_APPROVAL_TYPE OUT VARCHAR2,
	p_MARKET_TYPE OUT VARCHAR2,
	p_LOSS_OPTION OUT VARCHAR2,
	p_CONTRACT_FILE_NAME OUT VARCHAR2,
	p_PIPELINE_ID OUT NUMBER,
	p_PIPELINE_DISP OUT VARCHAR2,
	p_PIPELINE_TARIFF_TYPE OUT VARCHAR2
	);

PROCEDURE INVOICE_GROUP
	(
	p_INVOICE_GROUP_ID IN NUMBER,
	p_INVOICE_GROUP_NAME OUT VARCHAR2,
	p_INVOICE_GROUP_ALIAS OUT VARCHAR2,
	p_INVOICE_GROUP_DESC OUT VARCHAR2,
	p_DISPLAY_ORDER OUT NUMBER,
	p_SHOW_TITLE_ON_INVOICE OUT NUMBER,
	p_SHOW_SUBTOTAL_ON_INVOICE OUT NUMBER
	);

PROCEDURE IT_COMMODITY
	(
	p_COMMODITY_ID IN NUMBER,
	p_COMMODITY_NAME OUT VARCHAR2,
	p_COMMODITY_ALIAS OUT VARCHAR2,
	p_COMMODITY_DESC OUT VARCHAR2,
	p_COMMODITY_TYPE OUT VARCHAR2,
	p_COMMODITY_UNIT OUT VARCHAR2,
	p_COMMODITY_UNIT_FORMAT OUT VARCHAR2,
	p_COMMODITY_PRICE_UNIT OUT VARCHAR2,
	p_COMMODITY_PRICE_FORMAT OUT VARCHAR2,
	p_IS_VIRTUAL OUT NUMBER,
	p_MARKET_TYPE OUT VARCHAR2
	);

PROCEDURE JOB_THREAD
	(
	p_JOB_THREAD_ID IN NUMBER,
	p_JOB_THREAD_NAME OUT VARCHAR2,
	p_JOB_THREAD_ALIAS OUT VARCHAR2,
	p_JOB_THREAD_DESC OUT VARCHAR2,
	p_JOB_CLASS OUT VARCHAR2,
	p_IS_SNOOZED OUT NUMBER
	);

PROCEDURE LOAD_PROFILE
	(
	p_PROFILE_LIBRARY_ID OUT NUMBER,
	p_PROFILE_LIBRARY_DISP OUT VARCHAR2,
	p_PROFILE_ID IN NUMBER,
	p_PROFILE_NAME OUT VARCHAR2,
	p_PROFILE_ALIAS OUT VARCHAR2,
	p_PROFILE_DESC OUT VARCHAR2,
	p_PROFILE_TYPE OUT VARCHAR2,
	p_PROFILE_OPERATION OUT VARCHAR2,
	p_PROFILE_ORIGIN OUT VARCHAR2,
	p_PROFILE_RATE_CLASS OUT VARCHAR2,
	p_PROFILE_DAY_TYPE OUT VARCHAR2,
	p_PROFILE_ACCOUNT_REF OUT VARCHAR2,
	p_PROFILE_METER_REF OUT VARCHAR2,
	p_PROFILE_SIC_CODE OUT VARCHAR2,
	p_PROFILE_SEASON OUT VARCHAR2,
	p_PROFILE_SYSTEM_LOAD OUT VARCHAR2,
	p_PROFILE_ADJUSTMENT_OPTION OUT VARCHAR2,
	p_PROFILE_STATION_ID OUT NUMBER,
	p_PROFILE_STATION_DISP OUT VARCHAR2,
	p_PROFILE_TEMPLATE_ID OUT NUMBER,
	p_PROFILE_TEMPLATE_DISP OUT VARCHAR2,
	p_PROFILE_SOURCE_BEGIN_DATE OUT DATE,
	p_PROFILE_SOURCE_END_DATE OUT DATE,
	p_PROFILE_SOURCE_ID OUT NUMBER,
	p_PROFILE_SOURCE_DISP OUT VARCHAR2,
	p_PROFILE_INTERVAL OUT NUMBER,
	p_PROFILE_SOURCE_VERSION OUT DATE,
	p_PROFILE_BREAKPOINT_INTERVAL OUT VARCHAR2,
	p_IS_EXTERNAL_PROFILE OUT NUMBER
	);

PROCEDURE LOAD_PROFILE_LIBRARY
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_PROFILE_LIBRARY_NAME OUT VARCHAR2,
	p_PROFILE_LIBRARY_ALIAS OUT VARCHAR2,
	p_PROFILE_LIBRARY_DESC OUT VARCHAR2
	);

PROCEDURE LOSS_FACTOR
	(
	p_LOSS_FACTOR_ID IN NUMBER,
	p_LOSS_FACTOR_NAME OUT VARCHAR2,
	p_LOSS_FACTOR_ALIAS OUT VARCHAR2,
	p_LOSS_FACTOR_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	);

PROCEDURE MARKET_PRICE
	(
	p_MARKET_PRICE_ID IN NUMBER,
	p_MARKET_PRICE_NAME OUT VARCHAR2,
	p_MARKET_PRICE_ALIAS OUT VARCHAR2,
	p_MARKET_PRICE_DESC OUT VARCHAR2,
	p_MARKET_PRICE_TYPE OUT VARCHAR2,
	p_MARKET_PRICE_INTERVAL OUT VARCHAR2,
	p_MARKET_TYPE OUT VARCHAR2,
	p_COMMODITY_ID OUT NUMBER,
	p_COMMODITY_DISP OUT VARCHAR2,
	p_SERVICE_POINT_TYPE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_ZOD_ID OUT NUMBER,
	p_ZOD_DISP OUT VARCHAR2
	);

PROCEDURE MEASUREMENT_SOURCE
	(
	p_MEASUREMENT_SOURCE_ID IN NUMBER,
	p_MEASUREMENT_SOURCE_NAME OUT VARCHAR2,
	p_MEASUREMENT_SOURCE_ALIAS OUT VARCHAR2,
	p_MEASUREMENT_SOURCE_DESC OUT VARCHAR2,
	p_MEASUREMENT_SOURCE_TYPE OUT VARCHAR2,
	p_MEASUREMENT_SOURCE_INTERVAL OUT VARCHAR2,
	p_METER_TYPE OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_EXTERNAL_SYSTEM_ID OUT NUMBER,
	p_EXTERNAL_SYSTEM_DISP OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_PRECISION OUT NUMBER,
	p_UOM OUT VARCHAR2,
	p_POLLING_TIME OUT NUMBER
	);

PROCEDURE METER
	(
	p_MRSP_ID OUT NUMBER,
	p_MRSP_DISP OUT VARCHAR2,
	p_METER_ID IN NUMBER,
	p_METER_NAME OUT VARCHAR2,
	p_METER_ALIAS OUT VARCHAR2,
	p_METER_DESC OUT VARCHAR2,
	p_METER_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_METER_STATUS OUT VARCHAR2,
	p_METER_INTERVAL OUT VARCHAR2,
	p_METER_TYPE OUT VARCHAR2,
	p_METER_UNIT OUT VARCHAR2,
	p_IS_EXTERNAL_INTERVAL_USAGE OUT NUMBER,
	p_IS_EXTERNAL_BILLED_USAGE OUT NUMBER,
	p_IS_EXTERNAL_FORECAST OUT NUMBER,
	p_USE_TOU_USAGE_FACTOR OUT NUMBER
	);

PROCEDURE MRSP
	(
	p_MRSP_ID IN NUMBER,
	p_MRSP_NAME OUT VARCHAR2,
	p_MRSP_ALIAS OUT VARCHAR2,
	p_MRSP_DESC OUT VARCHAR2,
	p_MRSP_DUNS_NUMBER OUT VARCHAR2,
	p_MRSP_STATUS OUT VARCHAR2
	);

PROCEDURE OASIS_NODE
	(
	p_OASIS_NODE_ID IN NUMBER,
	p_OASIS_NODE_NAME OUT VARCHAR2,
	p_OASIS_NODE_ALIAS OUT VARCHAR2,
	p_OASIS_NODE_DESC OUT VARCHAR2,
	p_URL OUT VARCHAR2
	);

PROCEDURE PATH
	(
	p_PATH_ID IN NUMBER,
	p_PATH_NAME OUT VARCHAR2,
	p_PATH_ALIAS OUT VARCHAR2,
	p_PATH_DESC OUT VARCHAR2
	);

PROCEDURE PERIOD
	(
	p_PERIOD_ID IN NUMBER,
	p_PERIOD_NAME OUT VARCHAR2,
	p_PERIOD_ALIAS OUT VARCHAR2,
	p_PERIOD_DESC OUT VARCHAR2,
	p_PERIOD_COLOR OUT NUMBER
	);

PROCEDURE PIPELINE
	(
	p_PIPELINE_ID IN NUMBER,
	p_PIPELINE_NAME OUT VARCHAR2,
	p_PIPELINE_ALIAS OUT VARCHAR2,
	p_PIPELINE_DESC OUT VARCHAR2,
	p_PIPELINE_STATUS OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	);

PROCEDURE POOL
	(
	p_POOL_ID IN NUMBER,
	p_POOL_NAME OUT VARCHAR2,
	p_POOL_ALIAS OUT VARCHAR2,
	p_POOL_DESC OUT VARCHAR2,
	p_POOL_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_POOL_STATUS OUT VARCHAR2,
	p_POOL_CATEGORY OUT VARCHAR2,
	p_POOL_EXCLUDE_LOAD_SCHEDULE OUT NUMBER
	);

PROCEDURE PORTFOLIO
	(
	p_PORTFOLIO_ID IN NUMBER,
	p_PORTFOLIO_NAME OUT VARCHAR2,
	p_PORTFOLIO_ALIAS OUT VARCHAR2,
	p_PORTFOLIO_DESC OUT VARCHAR2
	);

PROCEDURE PRODUCT
	(
	p_PRODUCT_ID IN NUMBER,
	p_PRODUCT_NAME OUT VARCHAR2,
	p_PRODUCT_ALIAS OUT VARCHAR2,
	p_PRODUCT_DESC OUT VARCHAR2,
	p_PRODUCT_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_PRODUCT_CATEGORY OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE
	);

PROCEDURE PROGRAM
	(
	p_PROGRAM_ID IN NUMBER,
	p_PROGRAM_NAME OUT VARCHAR2,
	p_PROGRAM_ALIAS OUT VARCHAR2,
	p_PROGRAM_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_PROGRAM_TYPE OUT VARCHAR2,
	p_PROGRAM_INTERVAL OUT VARCHAR2,
	p_CUSTOMER_TYPE OUT VARCHAR2,
	p_MAX_DURATION_HOUR OUT NUMBER,
	p_MAX_DURATION_MINUTE OUT NUMBER,
	p_MIN_OFF_TIME_HOUR OUT NUMBER,
	p_MIN_OFF_TIME_MINUTE OUT NUMBER,
	p_DEGREE_INCREASE OUT NUMBER,
	p_DEGREE_DECREASE OUT NUMBER,
	p_ALLOW_CUSTOMER_OVERRIDE OUT NUMBER,
	p_DEFAULT_OPT_OUT_PCT OUT NUMBER,
	p_DEFAULT_OVERRIDE_PCT OUT NUMBER,
	p_USE_DEFAULT_OPT_OUT_OVERRIDE OUT NUMBER,
	p_VALIDATION_METHOD OUT VARCHAR2,
	p_TRANSACTION_ID OUT NUMBER,
	p_TRANSACTION_DISP OUT VARCHAR2,
	p_COMPONENT_ID OUT NUMBER,
	p_COMPONENT_DISP OUT VARCHAR2,
	p_SIGNAL_TYPE OUT VARCHAR2
	);

PROCEDURE PROXY_DAY_METHOD
	(
	p_PROXY_DAY_METHOD_ID IN NUMBER,
	p_PROXY_DAY_METHOD_NAME OUT VARCHAR2,
	p_PROXY_DAY_METHOD_ALIAS OUT VARCHAR2,
	p_PROXY_DAY_METHOD_DESC OUT VARCHAR2,
	p_TEMPLATE_ID OUT NUMBER,
	p_TEMPLATE_DISP OUT VARCHAR2,
	p_COMPARATIVE_VALUE OUT VARCHAR2,
	p_STATION_ID OUT NUMBER,
	p_STATION_DISP OUT VARCHAR2,
	p_PARAMETER_ID OUT NUMBER,
	p_PARAMETER_DISP OUT VARCHAR2,
	p_SYSTEM_LOAD_ID OUT NUMBER,
	p_SYSTEM_LOAD_DISP OUT VARCHAR2,
	p_LOOKUP_TIME_HORIZON OUT NUMBER,
	p_TIME_HORIZON_SHIFT OUT NUMBER,
	p_LOOKUP_CANDIDATE_LIMIT OUT NUMBER,
	p_CANDIDATE_DELTA_THRESHOLD OUT NUMBER,
	p_HOLIDAY_SET_ID OUT NUMBER,
	p_HOLIDAY_SET_DISP OUT VARCHAR2
	);

PROCEDURE PSE
	(
	p_PSE_ID IN NUMBER,
	p_PSE_NAME OUT VARCHAR2,
	p_PSE_ALIAS OUT VARCHAR2,
	p_PSE_DESC OUT VARCHAR2,
	p_PSE_NERC_CODE OUT VARCHAR2,
	p_PSE_STATUS OUT VARCHAR2,
	p_PSE_DUNS_NUMBER OUT VARCHAR2,
	p_PSE_BANK OUT VARCHAR2,
	p_PSE_ACH_NUMBER OUT VARCHAR2,
	p_PSE_TYPE OUT VARCHAR2,
	p_PSE_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_PSE_IS_RETAIL_AGGREGATOR OUT NUMBER,
	p_PSE_IS_BACKUP_GENERATION OUT NUMBER,
	p_PSE_EXCLUDE_LOAD_SCHEDULE OUT NUMBER,
	p_IS_BILLING_ENTITY OUT NUMBER,
	p_TIME_ZONE OUT VARCHAR2,
	p_STATEMENT_INTERVAL OUT VARCHAR2,
	p_INVOICE_INTERVAL OUT VARCHAR2,
	p_WEEK_BEGIN OUT VARCHAR2,
	p_INVOICE_LINE_ITEM_OPTION OUT VARCHAR2,
	p_INVOICE_EMAIL_SUBJECT OUT VARCHAR2,
	p_INVOICE_EMAIL_PRIORITY OUT NUMBER,
	p_INVOICE_EMAIL_BODY OUT VARCHAR2,
	p_INVOICE_EMAIL_BODY_MIME_TYPE OUT VARCHAR2,
	p_SCHEDULE_NAME_PREFIX OUT VARCHAR2,
	p_SCHEDULE_FORMAT OUT VARCHAR2,
	p_SCHEDULE_INTERVAL OUT VARCHAR2,
	p_LOAD_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_LOSS_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_CREATE_TX_LOSS_SCHEDULE OUT NUMBER,
	p_CREATE_DX_LOSS_SCHEDULE OUT NUMBER,
	p_CREATE_UFE_SCHEDULE OUT NUMBER,
	p_MINIMUM_SCHEDULE_AMT OUT NUMBER
	);

PROCEDURE QUOTE_REQUEST
	(
	p_QUOTE_ID IN NUMBER,
	p_QUOTE_NAME OUT VARCHAR2,
	p_QUOTE_ALIAS OUT VARCHAR2,
	p_QUOTE_DESC OUT VARCHAR2,
	p_CAMPAIGN_NAME OUT VARCHAR2,
	p_CUSTOMER_NAME OUT VARCHAR2,
	p_CUSTOMER_TYPE OUT VARCHAR2,
	p_CUSTOMER_REP_NAME OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_CUSTOMER_CLASS OUT VARCHAR2,
	p_EDC_ACCOUNT_NUMBER OUT VARCHAR2,
	p_QUOTE_EFFECTIVE_DATE OUT DATE,
	p_QUOTE_EXPIRATION_DATE OUT DATE,
	p_SERVICE_BEGIN_DATE OUT DATE,
	p_SERVICE_END_DATE OUT DATE,
	p_QUOTE_TYPE OUT VARCHAR2,
	p_QUOTE_STATUS OUT VARCHAR2,
	p_STATION_ID OUT NUMBER,
	p_STATION_DISP OUT VARCHAR2,
	p_NUMBER_OF_CUSTOMERS OUT NUMBER,
	p_SIGNING_PROBABILITY OUT NUMBER,
	p_QUOTE_NOTES OUT VARCHAR2
	);

PROCEDURE REACTOR_PROCEDURE
	(
	p_REACTOR_PROCEDURE_ID IN NUMBER,
	p_REACTOR_PROCEDURE_NAME OUT VARCHAR2,
	p_REACTOR_PROCEDURE_ALIAS OUT VARCHAR2,
	p_REACTOR_PROCEDURE_DESC OUT VARCHAR2,
	p_TABLE_ID OUT NUMBER,
	p_TABLE_DISP OUT VARCHAR2,
	p_PROCEDURE_NAME OUT VARCHAR2,
	p_JOB_THREAD_ID OUT NUMBER,
	p_JOB_THREAD_DISP OUT VARCHAR2,
	p_JOB_COMMENTS OUT VARCHAR2,
	p_CALL_ORDER OUT NUMBER,
	p_SKIP_WHEN_FORMULA OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_IS_IMMEDIATE OUT NUMBER,
	p_IS_ENABLED OUT NUMBER
	);

PROCEDURE RESOURCE_GROUP
	(
	p_RESOURCE_GROUP_ID IN NUMBER,
	p_RESOURCE_GROUP_NAME OUT VARCHAR2,
	p_RESOURCE_GROUP_ALIAS OUT VARCHAR2,
	p_RESOURCE_GROUP_DESC OUT VARCHAR2,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2
	);

PROCEDURE SC
	(
	p_SC_ID IN NUMBER,
	p_SC_NAME OUT VARCHAR2,
	p_SC_ALIAS OUT VARCHAR2,
	p_SC_DESC OUT VARCHAR2,
	p_SC_NERC_CODE OUT VARCHAR2,
	p_SC_DUNS_NUMBER OUT VARCHAR2,
	p_SC_STATUS OUT VARCHAR2,
	p_SC_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_SC_SCHEDULE_NAME_PREFIX OUT VARCHAR2,
	p_SC_SCHEDULE_FORMAT OUT VARCHAR2,
	p_SC_SCHEDULE_INTERVAL OUT VARCHAR2,
	p_SC_LOAD_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_SC_LOSS_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_SC_CREATE_TX_LOSS_SCHEDULE OUT NUMBER,
	p_SC_CREATE_DX_LOSS_SCHEDULE OUT NUMBER,
	p_SC_CREATE_UFE_SCHEDULE OUT NUMBER,
	p_SC_MARKET_PRICE_ID OUT NUMBER,
	p_SC_MARKET_PRICE_DISP OUT VARCHAR2,
	p_SC_MINIMUM_SCHEDULE_AMT OUT NUMBER
	);

PROCEDURE SCENARIO
	(
	p_SCENARIO_ID IN NUMBER,
	p_SCENARIO_NAME OUT VARCHAR2,
	p_SCENARIO_ALIAS OUT VARCHAR2,
	p_SCENARIO_DESC OUT VARCHAR2,
	p_SCENARIO_CATEGORY OUT VARCHAR2
	);

PROCEDURE SCHEDULE_GROUP
	(
	p_SCHEDULE_GROUP_ID IN NUMBER,
	p_SCHEDULE_GROUP_NAME OUT VARCHAR2,
	p_SCHEDULE_GROUP_ALIAS OUT VARCHAR2,
	p_SCHEDULE_GROUP_DESC OUT VARCHAR2,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_METER_TYPE OUT VARCHAR2
	);

PROCEDURE SEASON
	(
	p_SEASON_ID IN NUMBER,
	p_SEASON_NAME OUT VARCHAR2,
	p_SEASON_ALIAS OUT VARCHAR2,
	p_SEASON_DESC OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE
	);

PROCEDURE SEGMENT
	(
	p_SEGMENT_ID IN NUMBER,
	p_SEGMENT_NAME OUT VARCHAR2,
	p_SEGMENT_ALIAS OUT VARCHAR2,
	p_SEGMENT_DESC OUT VARCHAR2,
	p_POR_ID OUT NUMBER,
	p_POR_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_MW_LIMIT_1 OUT VARCHAR2,
	p_MW_LIMIT_2 OUT VARCHAR2,
	p_MW_LIMIT_3 OUT VARCHAR2,
	p_LOSS_FACTOR OUT NUMBER
	);

PROCEDURE SERVICE_AREA
	(
	p_SERVICE_AREA_ID IN NUMBER,
	p_SERVICE_AREA_NAME OUT VARCHAR2,
	p_SERVICE_AREA_ALIAS OUT VARCHAR2,
	p_SERVICE_AREA_DESC OUT VARCHAR2
	);

PROCEDURE SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_SERVICE_LOCATION_NAME OUT VARCHAR2,
	p_SERVICE_LOCATION_ALIAS OUT VARCHAR2,
	p_SERVICE_LOCATION_DESC OUT VARCHAR2,
	p_LATITUDE OUT VARCHAR2,
	p_LONGITUDE OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_IS_EXTERNAL_BILLED_USAGE OUT NUMBER,
	p_IS_METER_ALLOCATION OUT NUMBER,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_WEATHER_STATION_ID OUT NUMBER,
	p_WEATHER_STATION_DISP OUT VARCHAR2,
	p_BUSINESS_ROLLUP_ID OUT NUMBER,
	p_GEOGRAPHIC_ROLLUP_ID OUT NUMBER,
	p_SQUARE_FOOTAGE OUT NUMBER,
	p_ANNUAL_CONSUMPTION OUT NUMBER,
	p_SUMMER_CONSUMPTION OUT NUMBER,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2,
	p_SUB_STATION_ID OUT NUMBER,
	p_SUB_STATION_DISP OUT VARCHAR2,
	p_FEEDER_ID OUT NUMBER,
	p_FEEDER_DISP OUT VARCHAR2,
	p_FEEDER_SEGMENT_ID OUT NUMBER,
	p_FEEDER_SEGMENT_DISP OUT VARCHAR2
	);

PROCEDURE SERVICE_POINT
	(
	p_SERVICE_POINT_ID IN NUMBER,
	p_SERVICE_POINT_NAME OUT VARCHAR2,
	p_SERVICE_POINT_ALIAS OUT VARCHAR2,
	p_SERVICE_POINT_DESC OUT VARCHAR2,
	p_SERVICE_POINT_TYPE OUT VARCHAR2,
	p_TP_ID OUT NUMBER,
	p_TP_DISP OUT VARCHAR2,
	p_CA_ID OUT NUMBER,
	p_CA_DISP OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_ROLLUP_ID OUT NUMBER,
	p_SERVICE_REGION_ID OUT NUMBER,
	p_SERVICE_REGION_DISP OUT VARCHAR2,
	p_SERVICE_AREA_ID OUT NUMBER,
	p_SERVICE_AREA_DISP OUT VARCHAR2,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_LATITUDE OUT VARCHAR2,
	p_LONGITUDE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_IS_INTERCONNECT OUT NUMBER,
	p_NODE_TYPE OUT VARCHAR2,
	p_SERVICE_POINT_NERC_CODE OUT VARCHAR2,
	p_PIPELINE_ID OUT NUMBER,
	p_PIPELINE_DISP OUT VARCHAR2,
	p_MILE_MARKER OUT NUMBER
	);

PROCEDURE SERVICE_REGION
	(
	p_SERVICE_REGION_ID IN NUMBER,
	p_SERVICE_REGION_NAME OUT VARCHAR2,
	p_SERVICE_REGION_ALIAS OUT VARCHAR2,
	p_SERVICE_REGION_DESC OUT VARCHAR2
	);

PROCEDURE SERVICE_TYPE
	(
	p_SERVICE_TYPE_ID IN NUMBER,
	p_SERVICE_TYPE_NAME OUT VARCHAR2,
	p_SERVICE_TYPE_ALIAS OUT VARCHAR2,
	p_SERVICE_TYPE_DESC OUT VARCHAR2,
	p_SERVICE_TYPE_CATEGORY OUT VARCHAR2,
	p_IS_FIRM OUT NUMBER
	);

PROCEDURE SERVICE_ZONE
	(
	p_SERVICE_ZONE_ID IN NUMBER,
	p_SERVICE_ZONE_NAME OUT VARCHAR2,
	p_SERVICE_ZONE_ALIAS OUT VARCHAR2,
	p_SERVICE_ZONE_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_MARKET_PRICE_ID OUT NUMBER,
	p_MARKET_PRICE_DISP OUT VARCHAR2,
	p_CONTROL_AREA_ID OUT NUMBER,
	p_CONTROL_AREA_DISP OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2
	);

PROCEDURE SETTLEMENT_TYPE
	(
	p_SETTLEMENT_TYPE_ID IN NUMBER,
	p_SETTLEMENT_TYPE_NAME OUT VARCHAR2,
	p_SETTLEMENT_TYPE_ALIAS OUT VARCHAR2,
	p_SETTLEMENT_TYPE_DESC OUT VARCHAR2,
	p_SETTLEMENT_TYPE_ORDER OUT VARCHAR2,
	p_SERVICE_CODE OUT VARCHAR2,
	p_SCENARIO_ID OUT NUMBER,
	p_SCENARIO_DISP OUT VARCHAR2,
	p_STATEMENT_TYPE_ID OUT NUMBER,
	p_STATEMENT_TYPE_DISP OUT VARCHAR2
	);

PROCEDURE STATEMENT_TYPE
	(
	p_STATEMENT_TYPE_ID IN NUMBER,
	p_STATEMENT_TYPE_NAME OUT VARCHAR2,
	p_STATEMENT_TYPE_ALIAS OUT VARCHAR2,
	p_STATEMENT_TYPE_DESC OUT VARCHAR2,
	p_STATEMENT_TYPE_ORDER OUT NUMBER
	);

PROCEDURE SUB_STATION
	(
	p_SUB_STATION_ID IN NUMBER,
	p_SUB_STATION_NAME OUT VARCHAR2,
	p_SUB_STATION_ALIAS OUT VARCHAR2,
	p_SUB_STATION_DESC OUT VARCHAR2,
	p_SUB_STATION_TYPE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2
	);

PROCEDURE SUB_STATION_METER
	(
	p_METER_ID IN NUMBER,
	p_METER_NAME OUT VARCHAR2,
	p_METER_ALIAS OUT VARCHAR2,
	p_METER_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_METER_TYPE OUT VARCHAR2,
	p_METER_SUB_TYPE OUT VARCHAR2,
	p_METER_CATEGORY OUT VARCHAR2,
	p_REF_METER_ID OUT NUMBER,
	p_REF_METER_DISP OUT VARCHAR2,
	p_SUB_STATION_ID OUT NUMBER,
	p_SUB_STATION_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_TRUNCATE_CARRY_FWD OUT NUMBER,
	p_QUALITY_RATING OUT VARCHAR2
	);

PROCEDURE SUB_STATION_METER_POINT
	(
	p_METER_POINT_ID IN NUMBER,
	p_METER_POINT_NAME OUT VARCHAR2,
	p_METER_POINT_ALIAS OUT VARCHAR2,
	p_METER_POINT_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_METER_POINT_CATEGORY OUT VARCHAR2,
	p_RETAIL_METER_ID OUT NUMBER,
	p_RETAIL_METER_DISP OUT VARCHAR2,
	p_SUB_STATION_METER_ID OUT NUMBER,
	p_SUB_STATION_METER_DISP OUT VARCHAR2,
	p_METER_POINT_INTERVAL OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_UOM OUT VARCHAR2,
	p_OPERATION_CODE OUT VARCHAR2,
	p_DIRECTION OUT VARCHAR2,
	p_TOLERANCE OUT NUMBER
	);

PROCEDURE SUPPLY_RESOURCE
	(
	p_RESOURCE_ID IN NUMBER,
	p_RESOURCE_NAME OUT VARCHAR2,
	p_RESOURCE_ALIAS OUT VARCHAR2,
	p_RESOURCE_DESC OUT VARCHAR2,
	p_RESOURCE_GROUP_ID OUT NUMBER,
	p_RESOURCE_GROUP_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_HEAT_RATE_CURVE_ID OUT NUMBER,
	p_HEAT_RATE_CURVE_DISP OUT VARCHAR2
	);

PROCEDURE SYSTEM_ACTION
	(
	p_ACTION_ID IN NUMBER,
	p_ACTION_NAME OUT VARCHAR2,
	p_ACTION_ALIAS OUT VARCHAR2,
	p_ACTION_DESC OUT VARCHAR2,
	p_ENTITY_DOMAIN_ID OUT NUMBER,
	p_ENTITY_DOMAIN_DISP OUT VARCHAR2,
	p_MODULE OUT VARCHAR2,
	p_ACTION_TYPE OUT VARCHAR2
	);

PROCEDURE SYSTEM_ALERT
	(
	p_ALERT_ID IN NUMBER,
	p_ALERT_NAME OUT VARCHAR2,
	p_ALERT_ALIAS OUT VARCHAR2,
	p_ALERT_DESC OUT VARCHAR2,
	p_ALERT_TYPE OUT VARCHAR2,
	p_ALERT_CATEGORY OUT VARCHAR2,
	p_ALERT_DURATION OUT NUMBER,
	p_IS_EMAIL_ALERT OUT NUMBER,
	p_IS_EMAIL_FIRST_ACK OUT NUMBER,
	p_ALERT_EMAIL_PRIORITY OUT NUMBER,
	p_ALERT_EMAIL_SUBJECT OUT VARCHAR2,
	p_ACK_EMAIL_PRIORITY OUT NUMBER,
	p_ACK_EMAIL_SUBJECT OUT VARCHAR2
	);

PROCEDURE SYSTEM_EVENT
	(
	p_EVENT_ID IN NUMBER,
	p_EVENT_NAME OUT VARCHAR2,
	p_EVENT_ALIAS OUT VARCHAR2,
	p_EVENT_DESC OUT VARCHAR2,
	p_EVENT_TYPE OUT VARCHAR2,
	p_EVENT_CATEGORY OUT VARCHAR2
	);

PROCEDURE SYSTEM_LOAD
	(
	p_SYSTEM_LOAD_ID IN NUMBER,
	p_SYSTEM_LOAD_NAME OUT VARCHAR2,
	p_SYSTEM_LOAD_ALIAS OUT VARCHAR2,
	p_SYSTEM_LOAD_DESC OUT VARCHAR2,
	p_SYSTEM_LOAD_INTERVAL OUT VARCHAR2
	);

PROCEDURE SYSTEM_REALM
	(
	p_REALM_ID IN NUMBER,
	p_REALM_NAME OUT VARCHAR2,
	p_REALM_ALIAS OUT VARCHAR2,
	p_REALM_DESC OUT VARCHAR2,
	p_ENTITY_DOMAIN_ID OUT NUMBER,
	p_ENTITY_DOMAIN_DISP OUT VARCHAR2,
	p_REALM_CALC_TYPE OUT NUMBER,
	p_CUSTOM_QUERY OUT VARCHAR2
	);

PROCEDURE SYSTEM_TABLE
	(
	p_TABLE_ID IN NUMBER,
	p_TABLE_NAME OUT VARCHAR2,
	p_TABLE_ALIAS OUT VARCHAR2,
	p_TABLE_DESC OUT VARCHAR2,
	p_DB_TABLE_NAME OUT VARCHAR2,
	p_MIRROR_TABLE_NAME OUT VARCHAR2,
	p_ENTITY_DOMAIN_ID OUT NUMBER,
	p_ENTITY_DOMAIN_DISP OUT VARCHAR2,
	p_KEY_CONSTRAINT_NAME OUT VARCHAR2,
	p_ENTITY_ID_COLUMN_NAME OUT VARCHAR2,
	p_DATE1_COLUMN_NAME OUT VARCHAR2,
	p_DATE2_COLUMN_NAME OUT VARCHAR2,
	p_IS_REACTIVE OUT NUMBER,
	p_LOCK_SUMMARY_TABLE_NAME OUT VARCHAR2
	);

PROCEDURE TEMPLATE
	(
	p_TEMPLATE_ID IN NUMBER,
	p_TEMPLATE_NAME OUT VARCHAR2,
	p_TEMPLATE_ALIAS OUT VARCHAR2,
	p_TEMPLATE_DESC OUT VARCHAR2,
	p_IS_DAY_TYPE OUT NUMBER,
	p_IS_DST_OBSERVANT OUT NUMBER,
	p_VALIDATION_MESSAGE OUT VARCHAR2
	);

PROCEDURE TP
	(
	p_TP_ID IN NUMBER,
	p_TP_NAME OUT VARCHAR2,
	p_TP_ALIAS OUT VARCHAR2,
	p_TP_DESC OUT VARCHAR2,
	p_TP_NERC_CODE OUT VARCHAR2,
	p_TP_STATUS OUT VARCHAR2,
	p_TP_DUNS_NUMBER OUT VARCHAR2,
	p_OASIS_NODE_ID OUT NUMBER,
	p_OASIS_NODE_DISP OUT VARCHAR2
	);

PROCEDURE TRANSACTION
	(
	p_TRANSACTION_ID IN NUMBER,
	p_TRANSACTION_NAME OUT VARCHAR2,
	p_TRANSACTION_ALIAS OUT VARCHAR2,
	p_TRANSACTION_DESC OUT VARCHAR2,
	p_TRANSACTION_TYPE OUT VARCHAR2,
	p_TRANSACTION_CODE OUT VARCHAR2,
	p_TRANSACTION_IDENTIFIER OUT VARCHAR2,
	p_IS_FIRM OUT NUMBER,
	p_IS_IMPORT_SCHEDULE OUT NUMBER,
	p_IS_EXPORT_SCHEDULE OUT NUMBER,
	p_IS_BALANCE_TRANSACTION OUT NUMBER,
	p_IS_BID_OFFER OUT NUMBER,
	p_IS_EXCLUDE_FROM_POSITION OUT NUMBER,
	p_IS_IMPORT_EXPORT OUT NUMBER,
	p_IS_DISPATCHABLE OUT NUMBER,
	p_TRANSACTION_INTERVAL OUT VARCHAR2,
	p_EXTERNAL_INTERVAL OUT VARCHAR2,
	p_ETAG_CODE OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_PURCHASER_ID OUT NUMBER,
	p_PURCHASER_DISP OUT VARCHAR2,
	p_SELLER_ID OUT NUMBER,
	p_SELLER_DISP OUT VARCHAR2,
	p_CONTRACT_ID OUT NUMBER,
	p_CONTRACT_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_POR_ID OUT NUMBER,
	p_POR_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_COMMODITY_ID OUT NUMBER,
	p_COMMODITY_DISP OUT VARCHAR2,
	p_SERVICE_TYPE_ID OUT NUMBER,
	p_SERVICE_TYPE_DISP OUT VARCHAR2,
	p_TX_TRANSACTION_ID OUT NUMBER,
	p_TX_TRANSACTION_DISP OUT VARCHAR2,
	p_PATH_ID OUT NUMBER,
	p_PATH_DISP OUT VARCHAR2,
	p_LINK_TRANSACTION_ID OUT NUMBER,
	p_LINK_TRANSACTION_DISP OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_PSE_ID OUT NUMBER,
	p_PSE_DISP OUT VARCHAR2,
	p_ESP_ID OUT NUMBER,
	p_ESP_DISP OUT VARCHAR2,
	p_POOL_ID OUT NUMBER,
	p_POOL_DISP OUT VARCHAR2,
	p_SCHEDULE_GROUP_ID OUT NUMBER,
	p_SCHEDULE_GROUP_DISP OUT VARCHAR2,
	p_MARKET_PRICE_ID OUT NUMBER,
	p_MARKET_PRICE_DISP OUT VARCHAR2,
	p_ZOR_ID OUT NUMBER,
	p_ZOR_DISP OUT VARCHAR2,
	p_ZOD_ID OUT NUMBER,
	p_ZOD_DISP OUT VARCHAR2,
	p_SOURCE_ID OUT NUMBER,
	p_SOURCE_DISP OUT VARCHAR2,
	p_SINK_ID OUT NUMBER,
	p_SINK_DISP OUT VARCHAR2,
	p_RESOURCE_ID OUT NUMBER,
	p_RESOURCE_DISP OUT VARCHAR2,
	p_AGREEMENT_TYPE OUT VARCHAR2,
	p_APPROVAL_TYPE OUT VARCHAR2,
	p_LOSS_OPTION OUT VARCHAR2,
	p_TRAIT_CATEGORY OUT VARCHAR2,
	p_TP_ID OUT NUMBER,
	p_TP_DISP OUT VARCHAR2
	);

PROCEDURE TRANSACTION_TRAIT_GROUP
	(
	p_TRAIT_GROUP_ID IN NUMBER,
	p_TRAIT_GROUP_NAME OUT VARCHAR2,
	p_TRAIT_GROUP_ALIAS OUT VARCHAR2,
	p_TRAIT_GROUP_DESC OUT VARCHAR2,
	p_TRAIT_GROUP_INTERVAL OUT VARCHAR2,
	p_TRAIT_GROUP_TYPE OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_TRAIT_CATEGORY OUT VARCHAR2,
	p_DISPLAY_NAME OUT VARCHAR2,
	p_DISPLAY_ORDER OUT NUMBER,
	p_IS_SERIES OUT NUMBER,
	p_IS_SPARSE OUT NUMBER,
	p_IS_STATEMENT_TYPE_SPECIFIC OUT NUMBER,
	p_DEFAULT_NUMBER_OF_SETS OUT NUMBER
	);

PROCEDURE TX_FEEDER
	(
	p_FEEDER_ID IN NUMBER,
	p_FEEDER_NAME OUT VARCHAR2,
	p_FEEDER_ALIAS OUT VARCHAR2,
	p_FEEDER_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_SUB_STATION_ID OUT NUMBER,
	p_SUB_STATION_DISP OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE
	);

PROCEDURE TX_FEEDER_SEGMENT
	(
	p_FEEDER_SEGMENT_ID IN NUMBER,
	p_FEEDER_SEGMENT_NAME OUT VARCHAR2,
	p_FEEDER_SEGMENT_ALIAS OUT VARCHAR2,
	p_FEEDER_SEGMENT_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_FEEDER_ID OUT NUMBER,
	p_FEEDER_DISP OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_PRIORITY OUT NUMBER
	);

PROCEDURE VPP
	(
	p_VPP_ID IN NUMBER,
	p_VPP_NAME OUT VARCHAR2,
	p_VPP_ALIAS OUT VARCHAR2,
	p_VPP_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_STATUS_NAME OUT VARCHAR2,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2,
	p_PROGRAM_ID OUT NUMBER,
	p_PROGRAM_DISP OUT VARCHAR2
	);

PROCEDURE WEATHER_PARAMETER
	(
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_NAME OUT VARCHAR2,
	p_PARAMETER_ALIAS OUT VARCHAR2,
	p_PARAMETER_DESC OUT VARCHAR2,
	p_PARAMETER_CATEGORY OUT VARCHAR2,
	p_PARAMETER_INTERVAL OUT VARCHAR2,
	p_PARAMETER_MEASUREMENT OUT VARCHAR2,
	p_PROJECTION_PERIOD OUT VARCHAR2,
	p_IS_COMPOSITE OUT NUMBER,
	p_IS_CALCULATE OUT NUMBER
	);

PROCEDURE WEATHER_STATION
	(
	p_STATION_ID IN NUMBER,
	p_STATION_NAME OUT VARCHAR2,
	p_STATION_ALIAS OUT VARCHAR2,
	p_STATION_DESC OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_IS_COMPOSITE OUT NUMBER
	);


END EM_GET;
/

CREATE OR REPLACE PACKAGE BODY EM_GET AS
---------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.11 $';
END WHAT_VERSION;
---------------------------------------------------------------------

PROCEDURE ACCOUNT
	(
	p_ACCOUNT_ID IN NUMBER,
	p_ACCOUNT_NAME OUT VARCHAR2,
	p_ACCOUNT_ALIAS OUT VARCHAR2,
	p_ACCOUNT_DESC OUT VARCHAR2,
	p_ACCOUNT_DUNS_NUMBER OUT VARCHAR2,
	p_ACCOUNT_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_ACCOUNT_MODEL_OPTION OUT VARCHAR2,
	p_ACCOUNT_SIC_CODE OUT VARCHAR2,
	p_ACCOUNT_METER_TYPE OUT VARCHAR2,
	p_ACCOUNT_METER_EXT_IDENTIFIER OUT VARCHAR2,
	p_ACCOUNT_DISPLAY_NAME OUT VARCHAR2,
	p_ACCOUNT_BILL_OPTION OUT VARCHAR2,
	p_ACCOUNT_ROLLUP_ID OUT NUMBER,
	p_IS_EXTERNAL_INTERVAL_USAGE OUT NUMBER,
	p_IS_EXTERNAL_BILLED_USAGE OUT NUMBER,
	p_IS_AGGREGATE_ACCOUNT OUT NUMBER,
	p_IS_UFE_PARTICIPANT OUT NUMBER,
	p_IS_CREATE_SETTLEMENT_PROFILE OUT NUMBER,
	p_IS_EXTERNAL_FORECAST OUT NUMBER,
	p_IS_SUB_AGGREGATE OUT NUMBER,
	p_TX_SERVICE_TYPE_ID OUT NUMBER,
	p_TX_SERVICE_TYPE_DISP OUT VARCHAR2,
	p_USE_TOU_USAGE_FACTOR OUT NUMBER,
	p_MODEL_ID OUT NUMBER
	) AS 

BEGIN

IO.GET_ACCOUNT
	(
    p_ACCOUNT_ID,
    p_ACCOUNT_NAME,
    p_ACCOUNT_ALIAS,
    p_ACCOUNT_DESC,
    p_ACCOUNT_DUNS_NUMBER,
    p_ACCOUNT_EXTERNAL_IDENTIFIER,
    p_ACCOUNT_MODEL_OPTION,
    p_ACCOUNT_SIC_CODE,
    p_ACCOUNT_METER_TYPE,
    p_ACCOUNT_METER_EXT_IDENTIFIER,
    p_ACCOUNT_DISPLAY_NAME,
    p_ACCOUNT_BILL_OPTION,
    p_ACCOUNT_ROLLUP_ID,
    p_IS_EXTERNAL_INTERVAL_USAGE,
    p_IS_EXTERNAL_BILLED_USAGE,
    p_IS_AGGREGATE_ACCOUNT,
    p_IS_UFE_PARTICIPANT,
    p_IS_CREATE_SETTLEMENT_PROFILE,
    p_IS_EXTERNAL_FORECAST,
    p_IS_SUB_AGGREGATE,
    p_TX_SERVICE_TYPE_ID,
    p_USE_TOU_USAGE_FACTOR,
    p_MODEL_ID
	);
    
    IF p_TX_SERVICE_TYPE_ID IS NOT NULL THEN
        p_TX_SERVICE_TYPE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_TYPE,
                p_TX_SERVICE_TYPE_ID );
    END IF;
    

END ACCOUNT;
---------------------------------------------------------------------

PROCEDURE ACCOUNT_GROUP
	(
	p_ACCOUNT_GROUP_ID IN NUMBER,
	p_ACCOUNT_GROUP_NAME OUT VARCHAR2,
	p_ACCOUNT_GROUP_ALIAS OUT VARCHAR2,
	p_ACCOUNT_GROUP_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	) AS 

BEGIN

IO.GET_ACCOUNT_GROUP
	(
    p_ACCOUNT_GROUP_ID,
    p_ACCOUNT_GROUP_NAME,
    p_ACCOUNT_GROUP_ALIAS,
    p_ACCOUNT_GROUP_DESC,
    p_EXTERNAL_IDENTIFIER
	);
    

END ACCOUNT_GROUP;
---------------------------------------------------------------------

PROCEDURE ANCILLARY_SERVICE
	(
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_ANCILLARY_SERVICE_NAME OUT VARCHAR2,
	p_ANCILLARY_SERVICE_ALIAS OUT VARCHAR2,
	p_ANCILLARY_SERVICE_DESC OUT VARCHAR2,
	p_ANCILLARY_SERVICE_TYPE OUT VARCHAR2,
	p_PROVIDER_CATEGORY OUT VARCHAR2,
	p_PROVIDER_ID OUT NUMBER,
	p_TRANSACTION_TYPE OUT VARCHAR2,
	p_IT_COMMODITY_ID OUT NUMBER,
	p_IT_COMMODITY_DISP OUT VARCHAR2,
	p_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_MINIMUM_SCHEDULE_AMT OUT NUMBER,
	p_ANCILLARY_SERVICE_UNIT OUT VARCHAR2
	) AS 

BEGIN

IO.GET_ANCILLARY_SERVICE
	(
    p_ANCILLARY_SERVICE_ID,
    p_ANCILLARY_SERVICE_NAME,
    p_ANCILLARY_SERVICE_ALIAS,
    p_ANCILLARY_SERVICE_DESC,
    p_ANCILLARY_SERVICE_TYPE,
    p_PROVIDER_CATEGORY,
    p_PROVIDER_ID,
    p_TRANSACTION_TYPE,
    p_IT_COMMODITY_ID,
    p_ROUNDING_PREFERENCE,
    p_MINIMUM_SCHEDULE_AMT,
    p_ANCILLARY_SERVICE_UNIT
	);
    
    IF p_IT_COMMODITY_ID IS NOT NULL THEN
        p_IT_COMMODITY_DISP := ENTITY_NAME_FROM_IDS(EC.ED_IT_COMMODITY,
                p_IT_COMMODITY_ID );
    END IF;
    

END ANCILLARY_SERVICE;
---------------------------------------------------------------------

PROCEDURE AREA
	(
	p_AREA_ID IN NUMBER,
	p_AREA_NAME OUT VARCHAR2,
	p_AREA_ALIAS OUT VARCHAR2,
	p_AREA_DESC OUT VARCHAR2,
	p_AREA_INTERVAL OUT VARCHAR2,
	p_PROJECTION_PERIOD OUT VARCHAR2
	) AS 

BEGIN

IO.GET_AREA
	(
    p_AREA_ID,
    p_AREA_NAME,
    p_AREA_ALIAS,
    p_AREA_DESC,
    p_AREA_INTERVAL,
    p_PROJECTION_PERIOD
	);
    

END AREA;
---------------------------------------------------------------------

PROCEDURE BILL_CYCLE
	(
	p_BILL_CYCLE_ID IN NUMBER,
	p_BILL_CYCLE_NAME OUT VARCHAR2,
	p_BILL_CYCLE_ALIAS OUT VARCHAR2,
	p_BILL_CYCLE_DESC OUT VARCHAR2
	) AS 

BEGIN

IO.GET_BILL_CYCLE
	(
    p_BILL_CYCLE_ID,
    p_BILL_CYCLE_NAME,
    p_BILL_CYCLE_ALIAS,
    p_BILL_CYCLE_DESC
	);
    

END BILL_CYCLE;
---------------------------------------------------------------------

PROCEDURE BILL_PARTY
	(
	p_BILL_PARTY_ID IN NUMBER,
	p_BILL_PARTY_NAME OUT VARCHAR2,
	p_BILL_PARTY_ALIAS OUT VARCHAR2,
	p_BILL_PARTY_DESC OUT VARCHAR2,
	p_BILL_PARTY_STATUS OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_IS_INVOICE_DETAIL OUT NUMBER
	) AS 

BEGIN

IO.GET_BILL_PARTY
	(
    p_BILL_PARTY_ID,
    p_BILL_PARTY_NAME,
    p_BILL_PARTY_ALIAS,
    p_BILL_PARTY_DESC,
    p_BILL_PARTY_STATUS,
    p_EXTERNAL_IDENTIFIER,
    p_IS_INVOICE_DETAIL
	);
    

END BILL_PARTY;
---------------------------------------------------------------------

PROCEDURE CA
	(
	p_CA_ID IN NUMBER,
	p_CA_NAME OUT VARCHAR2,
	p_CA_ALIAS OUT VARCHAR2,
	p_CA_DESC OUT VARCHAR2,
	p_CA_NERC_CODE OUT VARCHAR2,
	p_CA_STATUS OUT VARCHAR2,
	p_CA_DUNS_NUMBER OUT VARCHAR2
	) AS 

BEGIN

IO.GET_CA
	(
    p_CA_ID,
    p_CA_NAME,
    p_CA_ALIAS,
    p_CA_DESC,
    p_CA_NERC_CODE,
    p_CA_STATUS,
    p_CA_DUNS_NUMBER
	);
    

END CA;
---------------------------------------------------------------------

PROCEDURE CALC_PROCESS
	(
	p_CALC_PROCESS_ID IN NUMBER,
	p_CALC_PROCESS_NAME OUT VARCHAR2,
	p_CALC_PROCESS_ALIAS OUT VARCHAR2,
	p_CALC_PROCESS_DESC OUT VARCHAR2,
	p_CALC_PROCESS_CATEGORY OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_PROCESS_INTERVAL OUT VARCHAR2,
	p_WEEK_BEGIN OUT VARCHAR2,
	p_CONTEXT_DOMAIN_ID OUT NUMBER,
	p_CONTEXT_DOMAIN_DISP OUT VARCHAR2,
	p_CONTEXT_REALM_ID OUT NUMBER,
	p_CONTEXT_REALM_DISP OUT VARCHAR2,
	p_CONTEXT_GROUP_ID OUT NUMBER,
	p_CONTEXT_GROUP_DISP OUT VARCHAR2,
	p_CONTEXT_NAME OUT VARCHAR2,
	p_IS_STATEMENT_TYPE_SPECIFIC OUT NUMBER
	) AS 

BEGIN

IO.GET_CALC_PROCESS
	(
    p_CALC_PROCESS_ID,
    p_CALC_PROCESS_NAME,
    p_CALC_PROCESS_ALIAS,
    p_CALC_PROCESS_DESC,
    p_CALC_PROCESS_CATEGORY,
    p_TIME_ZONE,
    p_PROCESS_INTERVAL,
    p_WEEK_BEGIN,
    p_CONTEXT_DOMAIN_ID,
    p_CONTEXT_REALM_ID,
    p_CONTEXT_GROUP_ID,
    p_CONTEXT_NAME,
    p_IS_STATEMENT_TYPE_SPECIFIC
	);
    
    IF p_CONTEXT_DOMAIN_ID IS NOT NULL THEN
        p_CONTEXT_DOMAIN_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ENTITY_DOMAIN,
                p_CONTEXT_DOMAIN_ID );
    END IF;
    
    IF p_CONTEXT_REALM_ID IS NOT NULL THEN
        p_CONTEXT_REALM_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SYSTEM_REALM,
                p_CONTEXT_REALM_ID );
    END IF;
    
    IF p_CONTEXT_GROUP_ID IS NOT NULL THEN
        p_CONTEXT_GROUP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ENTITY_GROUP,
                p_CONTEXT_GROUP_ID );
    END IF;
    

END CALC_PROCESS;
---------------------------------------------------------------------

PROCEDURE CALENDAR
	(
	p_CALENDAR_ID IN NUMBER,
	p_CALENDAR_NAME OUT VARCHAR2,
	p_CALENDAR_ALIAS OUT VARCHAR2,
	p_CALENDAR_DESC OUT VARCHAR2,
	p_ASSIGNMENT_TYPE OUT VARCHAR2,
	p_HAS_ADJUSTMENTS OUT NUMBER
	) AS 

BEGIN

IO.GET_CALENDAR
	(
    p_CALENDAR_ID,
    p_CALENDAR_NAME,
    p_CALENDAR_ALIAS,
    p_CALENDAR_DESC,
    p_ASSIGNMENT_TYPE,
    p_HAS_ADJUSTMENTS
	);
    

END CALENDAR;
---------------------------------------------------------------------

PROCEDURE CASE_LABEL
	(
	p_CASE_ID IN NUMBER,
	p_CASE_NAME OUT VARCHAR2,
	p_CASE_ALIAS OUT VARCHAR2,
	p_CASE_DESC OUT VARCHAR2,
	p_CASE_CATEGORY OUT VARCHAR2
	) AS 

BEGIN

IO.GET_CASE_LABEL
	(
    p_CASE_ID,
    p_CASE_NAME,
    p_CASE_ALIAS,
    p_CASE_DESC,
    p_CASE_CATEGORY
	);
    

END CASE_LABEL;
---------------------------------------------------------------------

PROCEDURE CATEGORY
	(
	p_CATEGORY_ID IN NUMBER,
	p_CATEGORY_NAME OUT VARCHAR2,
	p_CATEGORY_ALIAS OUT VARCHAR2,
	p_CATEGORY_DESC OUT VARCHAR2
	) AS 

BEGIN

IO.GET_CATEGORY
	(
    p_CATEGORY_ID,
    p_CATEGORY_NAME,
    p_CATEGORY_ALIAS,
    p_CATEGORY_DESC
	);
    

END CATEGORY;
---------------------------------------------------------------------

PROCEDURE COMPONENT
	(
	p_COMPONENT_ID IN NUMBER,
	p_COMPONENT_NAME OUT VARCHAR2,
	p_COMPONENT_ALIAS OUT VARCHAR2,
	p_COMPONENT_DESC OUT VARCHAR2,
	p_COMPONENT_ENTITY OUT VARCHAR2,
	p_CHARGE_TYPE OUT VARCHAR2,
	p_RATE_STRUCTURE OUT VARCHAR2,
	p_RATE_INTERVAL OUT VARCHAR2,
	p_IS_REBILL OUT NUMBER,
	p_IS_TAXED OUT NUMBER,
	p_IS_CUSTOM_CHARGE OUT NUMBER,
	p_IS_CREDIT_CHARGE OUT NUMBER,
	p_IS_INCLUDE_TX_LOSS OUT NUMBER,
	p_IS_INCLUDE_DX_LOSS OUT NUMBER,
	p_TEMPLATE_ID OUT NUMBER,
	p_TEMPLATE_DISP OUT VARCHAR2,
	p_MARKET_PRICE_ID OUT NUMBER,
	p_MARKET_PRICE_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_MODEL_ID OUT NUMBER,
	p_EVENT_ID OUT NUMBER,
	p_EVENT_DISP OUT VARCHAR2,
	p_COMPONENT_REFERENCE OUT VARCHAR2,
	p_INVOICE_GROUP_ID OUT NUMBER,
	p_INVOICE_GROUP_DISP OUT VARCHAR2,
	p_INVOICE_GROUP_ORDER OUT NUMBER,
	p_COMPUTATION_ORDER OUT NUMBER,
	p_QUANTITY_UNIT OUT VARCHAR2,
	p_CURRENCY_UNIT OUT VARCHAR2,
	p_QUANTITY_TYPE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_COMPONENT_CATEGORY OUT VARCHAR2,
	p_GL_DEBIT_ACCOUNT OUT VARCHAR2,
	p_GL_CREDIT_ACCOUNT OUT VARCHAR2,
	p_FIRM_NON_FIRM OUT VARCHAR2,
	p_EXCLUDE_FROM_INVOICE OUT NUMBER,
	p_EXCLUDE_FROM_INVOICE_TOTAL OUT NUMBER,
	p_IMBALANCE_TYPE OUT VARCHAR2,
	p_ACCUMULATION_PERIOD OUT NUMBER,
	p_BASE_COMPONENT_ID OUT NUMBER,
	p_BASE_COMPONENT_DISP OUT VARCHAR2,
	p_BASE_LIMIT_ID OUT NUMBER,
	p_BASE_LIMIT_DISP OUT VARCHAR2,
	p_MARKET_TYPE OUT VARCHAR2,
	p_MARKET_PRICE_TYPE OUT VARCHAR2,
	p_WHICH_INTERVAL OUT VARCHAR2,
	p_LMP_PRICE_CALC OUT VARCHAR2,
	p_LMP_INCLUDE_EXT OUT NUMBER,
	p_LMP_INCLUDE_SALES OUT VARCHAR2,
	p_CHARGE_WHEN OUT VARCHAR2,
	p_BILATERALS_SIGN OUT NUMBER,
	p_LMP_COMMODITY_ID OUT NUMBER,
	p_LMP_COMMODITY_DISP OUT VARCHAR2,
	p_LMP_BASE_COMMODITY_ID OUT NUMBER,
	p_LMP_BASE_COMMODITY_DISP OUT VARCHAR2,
	p_USE_ZONAL_PRICE OUT NUMBER,
	p_ALTERNATE_PRICE OUT VARCHAR2,
	p_ALTERNATE_PRICE_FUNCTION OUT VARCHAR2,
	p_EXCLUDE_FROM_BILLING_EXPORT OUT NUMBER,
	p_IS_DEFAULT_TEMPLATE OUT NUMBER,
	p_KWH_MULTIPLIER OUT NUMBER,
	p_ANCILLARY_SERVICE_ID OUT NUMBER,
	p_ANCILLARY_SERVICE_DISP OUT VARCHAR2,
	p_APPLY_RATE_FOR OUT VARCHAR2,
	p_LOSS_ADJ_TYPE OUT NUMBER
	) AS 

BEGIN

IO.GET_COMPONENT
	(
    p_COMPONENT_ID,
    p_COMPONENT_NAME,
    p_COMPONENT_ALIAS,
    p_COMPONENT_DESC,
    p_COMPONENT_ENTITY,
    p_CHARGE_TYPE,
    p_RATE_STRUCTURE,
    p_RATE_INTERVAL,
    p_IS_REBILL,
    p_IS_TAXED,
    p_IS_CUSTOM_CHARGE,
    p_IS_CREDIT_CHARGE,
    p_IS_INCLUDE_TX_LOSS,
    p_IS_INCLUDE_DX_LOSS,
    p_TEMPLATE_ID,
    p_MARKET_PRICE_ID,
    p_SERVICE_POINT_ID,
    p_MODEL_ID,
    p_EVENT_ID,
    p_COMPONENT_REFERENCE,
    p_INVOICE_GROUP_ID,
    p_INVOICE_GROUP_ORDER,
    p_COMPUTATION_ORDER,
    p_QUANTITY_UNIT,
    p_CURRENCY_UNIT,
    p_QUANTITY_TYPE,
    p_EXTERNAL_IDENTIFIER,
    p_COMPONENT_CATEGORY,
    p_GL_DEBIT_ACCOUNT,
    p_GL_CREDIT_ACCOUNT,
    p_FIRM_NON_FIRM,
    p_EXCLUDE_FROM_INVOICE,
    p_EXCLUDE_FROM_INVOICE_TOTAL,
    p_IMBALANCE_TYPE,
    p_ACCUMULATION_PERIOD,
    p_BASE_COMPONENT_ID,
    p_BASE_LIMIT_ID,
    p_MARKET_TYPE,
    p_MARKET_PRICE_TYPE,
    p_WHICH_INTERVAL,
    p_LMP_PRICE_CALC,
    p_LMP_INCLUDE_EXT,
    p_LMP_INCLUDE_SALES,
    p_CHARGE_WHEN,
    p_BILATERALS_SIGN,
    p_LMP_COMMODITY_ID,
    p_LMP_BASE_COMMODITY_ID,
    p_USE_ZONAL_PRICE,
    p_ALTERNATE_PRICE,
    p_ALTERNATE_PRICE_FUNCTION,
    p_EXCLUDE_FROM_BILLING_EXPORT,
    p_IS_DEFAULT_TEMPLATE,
    p_KWH_MULTIPLIER,
    p_ANCILLARY_SERVICE_ID,
    p_APPLY_RATE_FOR,
    p_LOSS_ADJ_TYPE
	);
    
    IF p_TEMPLATE_ID IS NOT NULL THEN
        p_TEMPLATE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TEMPLATE,
                p_TEMPLATE_ID );
    END IF;
    
    IF p_MARKET_PRICE_ID IS NOT NULL THEN
        p_MARKET_PRICE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_MARKET_PRICE,
                p_MARKET_PRICE_ID );
    END IF;
    
    IF p_SERVICE_POINT_ID IS NOT NULL THEN
        p_SERVICE_POINT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SERVICE_POINT_ID );
    END IF;
    
    IF p_EVENT_ID IS NOT NULL THEN
        p_EVENT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SYSTEM_EVENT,
                p_EVENT_ID );
    END IF;
    
    IF p_INVOICE_GROUP_ID IS NOT NULL THEN
        p_INVOICE_GROUP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_INVOICE_GROUP,
                p_INVOICE_GROUP_ID );
    END IF;
    
    IF p_BASE_COMPONENT_ID IS NOT NULL THEN
        p_BASE_COMPONENT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_COMPONENT,
                p_BASE_COMPONENT_ID );
    END IF;
    
    IF p_BASE_LIMIT_ID IS NOT NULL THEN
        p_BASE_LIMIT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_CONTRACT_LIMIT,
                p_BASE_LIMIT_ID );
    END IF;
    
    IF p_LMP_COMMODITY_ID IS NOT NULL THEN
        p_LMP_COMMODITY_DISP := ENTITY_NAME_FROM_IDS(EC.ED_IT_COMMODITY,
                p_LMP_COMMODITY_ID );
    END IF;
    
    IF p_LMP_BASE_COMMODITY_ID IS NOT NULL THEN
        p_LMP_BASE_COMMODITY_DISP := ENTITY_NAME_FROM_IDS(EC.ED_IT_COMMODITY,
                p_LMP_BASE_COMMODITY_ID );
    END IF;
    
    IF p_ANCILLARY_SERVICE_ID IS NOT NULL THEN
        p_ANCILLARY_SERVICE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ANCILLARY_SERVICE,
                p_ANCILLARY_SERVICE_ID );
    END IF;
    

END COMPONENT;
---------------------------------------------------------------------

PROCEDURE CONDITIONAL_FORMAT
	(
	p_CONDITIONAL_FORMAT_ID IN NUMBER,
	p_CONDITIONAL_FORMAT_NAME OUT VARCHAR2,
	p_CONDITIONAL_FORMAT_ALIAS OUT VARCHAR2,
	p_CONDITIONAL_FORMAT_DESC OUT VARCHAR2,
	p_CONDITIONAL_FORMAT_MODULE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_CONDITIONAL_FORMAT
	(
    p_CONDITIONAL_FORMAT_ID,
    p_CONDITIONAL_FORMAT_NAME,
    p_CONDITIONAL_FORMAT_ALIAS,
    p_CONDITIONAL_FORMAT_DESC,
    p_CONDITIONAL_FORMAT_MODULE
	);
    

END CONDITIONAL_FORMAT;
---------------------------------------------------------------------

PROCEDURE CONTACT
	(
	p_CONTACT_ID IN NUMBER,
	p_CONTACT_NAME OUT VARCHAR2,
	p_CONTACT_ALIAS OUT VARCHAR2,
	p_CONTACT_DESC OUT VARCHAR2,
	p_CONTACT_STATUS OUT VARCHAR2,
	p_EMAIL_ADDRESS OUT VARCHAR2,
	p_FIRST_NAME OUT VARCHAR2,
	p_MIDDLE_NAME OUT VARCHAR2,
	p_LAST_NAME OUT VARCHAR2,
	p_SALUTATION OUT VARCHAR2,
	p_TITLE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	) AS 

BEGIN

IO.GET_CONTACT
	(
    p_CONTACT_ID,
    p_CONTACT_NAME,
    p_CONTACT_ALIAS,
    p_CONTACT_DESC,
    p_CONTACT_STATUS,
    p_EMAIL_ADDRESS,
    p_FIRST_NAME,
    p_MIDDLE_NAME,
    p_LAST_NAME,
    p_SALUTATION,
    p_TITLE,
    p_EXTERNAL_IDENTIFIER
	);
    

END CONTACT;
---------------------------------------------------------------------

PROCEDURE CONTRACT
	(
	p_CONTRACT_ID IN NUMBER,
	p_CONTRACT_NAME OUT VARCHAR2,
	p_CONTRACT_ALIAS OUT VARCHAR2,
	p_CONTRACT_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_IS_ESTIMATED_END_DATE OUT NUMBER,
	p_IS_EVERGREEN OUT NUMBER,
	p_IS_INTERRUPTIBLE OUT NUMBER,
	p_EXPECTED_RENEWAL_PCT OUT NUMBER,
	p_NEXT_ACTION_DATE OUT DATE,
	p_NOTIFICATION_REQUIREMENTS OUT VARCHAR2,
	p_CURTAILMENT_ABILITY OUT VARCHAR2,
	p_PENALTY_CLAUSES OUT VARCHAR2,
	p_PRICING_MODEL OUT VARCHAR2
	) AS 

BEGIN

IO.GET_CONTRACT
	(
    p_CONTRACT_ID,
    p_CONTRACT_NAME,
    p_CONTRACT_ALIAS,
    p_CONTRACT_DESC,
    p_EXTERNAL_IDENTIFIER,
    p_BEGIN_DATE,
    p_END_DATE,
    p_IS_ESTIMATED_END_DATE,
    p_IS_EVERGREEN,
    p_IS_INTERRUPTIBLE,
    p_EXPECTED_RENEWAL_PCT,
    p_NEXT_ACTION_DATE,
    p_NOTIFICATION_REQUIREMENTS,
    p_CURTAILMENT_ABILITY,
    p_PENALTY_CLAUSES,
    p_PRICING_MODEL
	);
    

END CONTRACT;
---------------------------------------------------------------------

PROCEDURE CONTRACT_LIMIT
	(
	p_LIMIT_ID IN NUMBER,
	p_LIMIT_NAME OUT VARCHAR2,
	p_LIMIT_ALIAS OUT VARCHAR2,
	p_LIMIT_DESC OUT VARCHAR2,
	p_LIMIT_TYPE OUT VARCHAR2,
	p_LIMIT_MEASURE OUT VARCHAR2,
	p_LIMIT_INTERVAL OUT VARCHAR2,
	p_LIMIT_IS_SEASONABLE OUT NUMBER,
	p_TEMPLATE_ID OUT NUMBER,
	p_TEMPLATE_DISP OUT VARCHAR2,
	p_PERIOD_ID OUT NUMBER,
	p_PERIOD_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_CONTRACT_LIMIT
	(
    p_LIMIT_ID,
    p_LIMIT_NAME,
    p_LIMIT_ALIAS,
    p_LIMIT_DESC,
    p_LIMIT_TYPE,
    p_LIMIT_MEASURE,
    p_LIMIT_INTERVAL,
    p_LIMIT_IS_SEASONABLE,
    p_TEMPLATE_ID,
    p_PERIOD_ID
	);
    
    IF p_TEMPLATE_ID IS NOT NULL THEN
        p_TEMPLATE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TEMPLATE,
                p_TEMPLATE_ID );
    END IF;
    
    IF p_PERIOD_ID IS NOT NULL THEN
        p_PERIOD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PERIOD,
                p_PERIOD_ID );
    END IF;
    

END CONTRACT_LIMIT;
---------------------------------------------------------------------

PROCEDURE CUSTOMER
	(
	p_CUSTOMER_ID IN NUMBER,
	p_CUSTOMER_NAME OUT VARCHAR2,
	p_CUSTOMER_ALIAS OUT VARCHAR2,
	p_CUSTOMER_DESC OUT VARCHAR2,
	p_CUSTOMER_IDENTIFIER OUT VARCHAR2,
	p_CUSTOMER_STATUS OUT VARCHAR2,
	p_CUSTOMER_IS_ACTIVE OUT NUMBER
	) AS 

BEGIN

IO.GET_CUSTOMER
	(
    p_CUSTOMER_ID,
    p_CUSTOMER_NAME,
    p_CUSTOMER_ALIAS,
    p_CUSTOMER_DESC,
    p_CUSTOMER_IDENTIFIER,
    p_CUSTOMER_STATUS,
    p_CUSTOMER_IS_ACTIVE
	);
    

END CUSTOMER;
---------------------------------------------------------------------

PROCEDURE DATA_LOCK_GROUP
	(
	p_DATA_LOCK_GROUP_ID IN NUMBER,
	p_DATA_LOCK_GROUP_NAME OUT VARCHAR2,
	p_DATA_LOCK_GROUP_ALIAS OUT VARCHAR2,
	p_DATA_LOCK_GROUP_DESC OUT VARCHAR2,
	p_DATA_LOCK_GROUP_INTERVAL OUT VARCHAR2,
	p_IS_AUTOMATIC OUT NUMBER,
	p_AUTOLOCK_DATE_FORMULA OUT VARCHAR2,
	p_LOCK_LIMIT_DATE_FORMULA OUT VARCHAR2,
	p_LOCK_STATE OUT VARCHAR2,
	p_LAST_PROCESSED_INTERVAL OUT DATE,
	p_TIME_ZONE OUT VARCHAR2,
	p_WEEK_BEGIN OUT VARCHAR2
	) AS 

BEGIN

IO.GET_DATA_LOCK_GROUP
	(
    p_DATA_LOCK_GROUP_ID,
    p_DATA_LOCK_GROUP_NAME,
    p_DATA_LOCK_GROUP_ALIAS,
    p_DATA_LOCK_GROUP_DESC,
    p_DATA_LOCK_GROUP_INTERVAL,
    p_IS_AUTOMATIC,
    p_AUTOLOCK_DATE_FORMULA,
    p_LOCK_LIMIT_DATE_FORMULA,
    p_LOCK_STATE,
    p_LAST_PROCESSED_INTERVAL,
    p_TIME_ZONE,
    p_WEEK_BEGIN
	);
    

END DATA_LOCK_GROUP;
---------------------------------------------------------------------

PROCEDURE DER
	(
	p_DER_ID IN NUMBER,
	p_DER_NAME OUT VARCHAR2,
	p_DER_ALIAS OUT VARCHAR2,
	p_DER_DESC OUT VARCHAR2,
	p_SERVICE_LOCATION_ID OUT NUMBER,
	p_SERVICE_LOCATION_DISP OUT VARCHAR2,
	p_DER_TYPE_ID OUT NUMBER,
	p_DER_TYPE_DISP OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_ID OUT NUMBER,
	p_EXTERNAL_SYSTEM_DISP OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_SERIAL_NUMBER OUT VARCHAR2
	) AS 

BEGIN

IO.GET_DER
	(
    p_DER_ID,
    p_DER_NAME,
    p_DER_ALIAS,
    p_DER_DESC,
    p_SERVICE_LOCATION_ID,
    p_DER_TYPE_ID,
    p_EXTERNAL_SYSTEM_ID,
    p_EXTERNAL_IDENTIFIER,
    p_BEGIN_DATE,
    p_END_DATE,
    p_SERIAL_NUMBER
	);
    
    IF p_SERVICE_LOCATION_ID IS NOT NULL THEN
        p_SERVICE_LOCATION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_LOCATION,
                p_SERVICE_LOCATION_ID );
    END IF;
    
    IF p_DER_TYPE_ID IS NOT NULL THEN
        p_DER_TYPE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_DER_TYPE,
                p_DER_TYPE_ID );
    END IF;
    
    IF p_EXTERNAL_SYSTEM_ID IS NOT NULL THEN
        p_EXTERNAL_SYSTEM_DISP := ENTITY_NAME_FROM_IDS(EC.ED_EXTERNAL_SYSTEM,
                p_EXTERNAL_SYSTEM_ID );
    END IF;
    

END DER;
---------------------------------------------------------------------

PROCEDURE DER_TYPE
	(
	p_DER_TYPE_ID IN NUMBER,
	p_DER_TYPE_NAME OUT VARCHAR2,
	p_DER_TYPE_ALIAS OUT VARCHAR2,
	p_DER_TYPE_DESC OUT VARCHAR2,
	p_DER_TYPE_FUNCTION OUT VARCHAR2,
	p_DER_TYPE_CATEGORY OUT VARCHAR2,
	p_DEFAULT_FAILURE_PCT OUT NUMBER,
	p_USE_DEFAULT_FAIL_PCT OUT NUMBER,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	) AS 

BEGIN

IO.GET_DER_TYPE
	(
    p_DER_TYPE_ID,
    p_DER_TYPE_NAME,
    p_DER_TYPE_ALIAS,
    p_DER_TYPE_DESC,
    p_DER_TYPE_FUNCTION,
    p_DER_TYPE_CATEGORY,
    p_DEFAULT_FAILURE_PCT,
    p_USE_DEFAULT_FAIL_PCT,
    p_EXTERNAL_IDENTIFIER
	);
    

END DER_TYPE;
---------------------------------------------------------------------

PROCEDURE DR_EVENT
	(
	p_EVENT_ID IN NUMBER,
	p_EVENT_NAME OUT VARCHAR2,
	p_EVENT_ALIAS OUT VARCHAR2,
	p_EVENT_DESC OUT VARCHAR2,
	p_VPP_ID OUT NUMBER,
	p_VPP_DISP OUT VARCHAR2,
	p_EVENT_STATUS OUT VARCHAR2,
	p_START_TIME OUT DATE,
	p_STOP_TIME OUT DATE,
	p_EVENT_TYPE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_DR_EVENT
	(
    p_EVENT_ID,
    p_EVENT_NAME,
    p_EVENT_ALIAS,
    p_EVENT_DESC,
    p_VPP_ID,
    p_EVENT_STATUS,
    p_START_TIME,
    p_STOP_TIME,
    p_EVENT_TYPE
	);
    
    IF p_VPP_ID IS NOT NULL THEN
        p_VPP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_VPP,
                p_VPP_ID );
    END IF;
    

END DR_EVENT;
---------------------------------------------------------------------

PROCEDURE EDC
	(
	p_EDC_ID IN NUMBER,
	p_EDC_NAME OUT VARCHAR2,
	p_EDC_ALIAS OUT VARCHAR2,
	p_EDC_DESC OUT VARCHAR2,
	p_EDC_STATUS OUT VARCHAR2,
	p_EDC_DUNS_NUMBER OUT VARCHAR2,
	p_EDC_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_EDC_SETTLEMENT_AGENT_NAME OUT VARCHAR2,
	p_EDC_LOSS_FACTOR_OPTION OUT VARCHAR2,
	p_EDC_SYSTEM_LOAD_ID OUT NUMBER,
	p_EDC_SYSTEM_LOAD_DISP OUT VARCHAR2,
	p_EDC_MARKET_PRICE_ID OUT NUMBER,
	p_EDC_MARKET_PRICE_DISP OUT VARCHAR2,
	p_EDC_HOLIDAY_SET_ID OUT NUMBER,
	p_EDC_HOLIDAY_SET_DISP OUT VARCHAR2,
	p_EDC_SC_ID OUT NUMBER,
	p_EDC_SC_DISP OUT VARCHAR2,
	p_EDC_EXCLUDE_LOAD_SCHEDULE OUT NUMBER
	) AS 

BEGIN

IO.GET_EDC
	(
    p_EDC_ID,
    p_EDC_NAME,
    p_EDC_ALIAS,
    p_EDC_DESC,
    p_EDC_STATUS,
    p_EDC_DUNS_NUMBER,
    p_EDC_EXTERNAL_IDENTIFIER,
    p_EDC_SETTLEMENT_AGENT_NAME,
    p_EDC_LOSS_FACTOR_OPTION,
    p_EDC_SYSTEM_LOAD_ID,
    p_EDC_MARKET_PRICE_ID,
    p_EDC_HOLIDAY_SET_ID,
    p_EDC_SC_ID,
    p_EDC_EXCLUDE_LOAD_SCHEDULE
	);
    
    IF p_EDC_SYSTEM_LOAD_ID IS NOT NULL THEN
        p_EDC_SYSTEM_LOAD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SYSTEM_LOAD,
                p_EDC_SYSTEM_LOAD_ID );
    END IF;
    
    IF p_EDC_MARKET_PRICE_ID IS NOT NULL THEN
        p_EDC_MARKET_PRICE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_MARKET_PRICE,
                p_EDC_MARKET_PRICE_ID );
    END IF;
    
    IF p_EDC_HOLIDAY_SET_ID IS NOT NULL THEN
        p_EDC_HOLIDAY_SET_DISP := ENTITY_NAME_FROM_IDS(EC.ED_HOLIDAY_SET,
                p_EDC_HOLIDAY_SET_ID );
    END IF;
    
    IF p_EDC_SC_ID IS NOT NULL THEN
        p_EDC_SC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SC,
                p_EDC_SC_ID );
    END IF;
    

END EDC;
---------------------------------------------------------------------

PROCEDURE ENTITY_DOMAIN
	(
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_ENTITY_DOMAIN_NAME OUT VARCHAR2,
	p_ENTITY_DOMAIN_ALIAS OUT VARCHAR2,
	p_ENTITY_DOMAIN_DESC OUT VARCHAR2,
	p_ENTITY_DOMAIN_TABLE OUT VARCHAR2,
	p_ENTITY_DOMAIN_TABLE_ALIAS OUT VARCHAR2,
	p_ENTITY_DOMAIN_CATEGORY OUT VARCHAR2,
	p_DISPLAY_NAME OUT VARCHAR2,
	p_INCLUDE_CONTACT_ADDRESS OUT NUMBER,
	p_INCLUDE_ENTITY_ATTRIBUTE OUT NUMBER,
	p_INCLUDE_EXTERNAL_IDENTIFIER OUT NUMBER,
	p_INCLUDE_GROUPS OUT NUMBER,
	p_INCLUDE_NOTES OUT NUMBER,
	p_IS_PSEUDO OUT NUMBER
	) AS 

BEGIN

IO.GET_ENTITY_DOMAIN
	(
    p_ENTITY_DOMAIN_ID,
    p_ENTITY_DOMAIN_NAME,
    p_ENTITY_DOMAIN_ALIAS,
    p_ENTITY_DOMAIN_DESC,
    p_ENTITY_DOMAIN_TABLE,
    p_ENTITY_DOMAIN_TABLE_ALIAS,
    p_ENTITY_DOMAIN_CATEGORY,
    p_DISPLAY_NAME,
    p_INCLUDE_CONTACT_ADDRESS,
    p_INCLUDE_ENTITY_ATTRIBUTE,
    p_INCLUDE_EXTERNAL_IDENTIFIER,
    p_INCLUDE_GROUPS,
    p_INCLUDE_NOTES,
    p_IS_PSEUDO
	);
    

END ENTITY_DOMAIN;
---------------------------------------------------------------------

PROCEDURE ENTITY_GROUP
	(
	p_ENTITY_GROUP_ID IN NUMBER,
	p_ENTITY_GROUP_NAME OUT VARCHAR2,
	p_ENTITY_GROUP_ALIAS OUT VARCHAR2,
	p_ENTITY_GROUP_DESC OUT VARCHAR2,
	p_ENTITY_DOMAIN_ID OUT NUMBER,
	p_ENTITY_DOMAIN_DISP OUT VARCHAR2,
	p_PARENT_GROUP_ID OUT NUMBER,
	p_PARENT_GROUP_DISP OUT VARCHAR2,
	p_IS_MATRIX OUT NUMBER,
	p_GROUP_CATEGORY OUT VARCHAR2
	) AS 

BEGIN

IO.GET_ENTITY_GROUP
	(
    p_ENTITY_GROUP_ID,
    p_ENTITY_GROUP_NAME,
    p_ENTITY_GROUP_ALIAS,
    p_ENTITY_GROUP_DESC,
    p_ENTITY_DOMAIN_ID,
    p_PARENT_GROUP_ID,
    p_IS_MATRIX,
    p_GROUP_CATEGORY
	);
    
    IF p_ENTITY_DOMAIN_ID IS NOT NULL THEN
        p_ENTITY_DOMAIN_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ENTITY_DOMAIN,
                p_ENTITY_DOMAIN_ID );
    END IF;
    
    IF p_PARENT_GROUP_ID IS NOT NULL THEN
        p_PARENT_GROUP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ENTITY_GROUP,
                p_PARENT_GROUP_ID );
    END IF;
    

END ENTITY_GROUP;
---------------------------------------------------------------------

PROCEDURE ESP
	(
	p_ESP_ID IN NUMBER,
	p_ESP_NAME OUT VARCHAR2,
	p_ESP_ALIAS OUT VARCHAR2,
	p_ESP_DESC OUT VARCHAR2,
	p_ESP_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_ESP_DUNS_NUMBER OUT VARCHAR2,
	p_ESP_STATUS OUT VARCHAR2,
	p_ESP_TYPE OUT VARCHAR2,
	p_ESP_EXCLUDE_LOAD_SCHEDULE OUT NUMBER
	) AS 

BEGIN

IO.GET_ESP
	(
    p_ESP_ID,
    p_ESP_NAME,
    p_ESP_ALIAS,
    p_ESP_DESC,
    p_ESP_EXTERNAL_IDENTIFIER,
    p_ESP_DUNS_NUMBER,
    p_ESP_STATUS,
    p_ESP_TYPE,
    p_ESP_EXCLUDE_LOAD_SCHEDULE
	);
    

END ESP;
---------------------------------------------------------------------

PROCEDURE ETAG
	(
	p_ETAG_ID IN NUMBER,
	p_ETAG_NAME OUT VARCHAR2,
	p_ETAG_ALIAS OUT VARCHAR2,
	p_ETAG_DESC OUT VARCHAR2,
	p_TAG_IDENT OUT VARCHAR2,
	p_GCA_CODE OUT VARCHAR2,
	p_PSE_CODE OUT VARCHAR2,
	p_TAG_CODE OUT VARCHAR2,
	p_LCA_CODE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_ETAG_STATUS OUT VARCHAR2,
	p_SECURITY_KEY OUT VARCHAR2,
	p_WSCC_PRESCHEDULE_FLAG OUT VARCHAR2,
	p_TEST_FLAG OUT VARCHAR2,
	p_TRANSACTION_TYPE OUT VARCHAR2,
	p_NOTES OUT VARCHAR2
	) AS 

BEGIN

IO.GET_ETAG
	(
    p_ETAG_ID,
    p_ETAG_NAME,
    p_ETAG_ALIAS,
    p_ETAG_DESC,
    p_TAG_IDENT,
    p_GCA_CODE,
    p_PSE_CODE,
    p_TAG_CODE,
    p_LCA_CODE,
    p_EXTERNAL_IDENTIFIER,
    p_ETAG_STATUS,
    p_SECURITY_KEY,
    p_WSCC_PRESCHEDULE_FLAG,
    p_TEST_FLAG,
    p_TRANSACTION_TYPE,
    p_NOTES
	);
    

END ETAG;
---------------------------------------------------------------------

PROCEDURE EXTERNAL_SYSTEM
	(
	p_EXTERNAL_SYSTEM_ID IN NUMBER,
	p_EXTERNAL_SYSTEM_NAME OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_ALIAS OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_DESC OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_TYPE OUT VARCHAR2,
	p_EXTERNAL_SYSTEM_DISPLAY_NAME OUT VARCHAR2,
	p_IS_ENABLED OUT NUMBER,
	p_EXTERNAL_ACCOUNT_DOMAIN_ID OUT NUMBER,
	p_EXTERNAL_ACCOUNT_DOMAIN_DISP OUT VARCHAR2,
	p_HAS_UNAME_PWD_CREDENTIALS OUT NUMBER,
	p_NUMBER_OF_CERTIFICATES OUT NUMBER
	) AS 

BEGIN

IO.GET_EXTERNAL_SYSTEM
	(
    p_EXTERNAL_SYSTEM_ID,
    p_EXTERNAL_SYSTEM_NAME,
    p_EXTERNAL_SYSTEM_ALIAS,
    p_EXTERNAL_SYSTEM_DESC,
    p_EXTERNAL_SYSTEM_TYPE,
    p_EXTERNAL_SYSTEM_DISPLAY_NAME,
    p_IS_ENABLED,
    p_EXTERNAL_ACCOUNT_DOMAIN_ID,
    p_HAS_UNAME_PWD_CREDENTIALS,
    p_NUMBER_OF_CERTIFICATES
	);
    
    IF p_EXTERNAL_ACCOUNT_DOMAIN_ID IS NOT NULL THEN
        p_EXTERNAL_ACCOUNT_DOMAIN_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ENTITY_DOMAIN,
                p_EXTERNAL_ACCOUNT_DOMAIN_ID );
    END IF;
    

END EXTERNAL_SYSTEM;
---------------------------------------------------------------------

PROCEDURE EXTERNAL_TRANSACTION
	(
	p_TRANSACTION_ID IN NUMBER,
	p_TRANSACTION_NAME OUT VARCHAR2,
	p_TRANSACTION_ALIAS OUT VARCHAR2,
	p_TRANSACTION_DESC OUT VARCHAR2,
	p_TRANSACTION_TYPE OUT VARCHAR2,
	p_TRANSACTION_CODE OUT VARCHAR2,
	p_TRANSACTION_IDENTIFIER OUT VARCHAR2,
	p_IS_FIRM OUT NUMBER,
	p_IS_IMPORT_SCHEDULE OUT NUMBER,
	p_IS_EXPORT_SCHEDULE OUT NUMBER,
	p_IS_BALANCE_TRANSACTION OUT NUMBER,
	p_IS_BID_OFFER OUT NUMBER,
	p_IS_EXCLUDE_FROM_POSITION OUT NUMBER,
	p_IS_IMPORT_EXPORT OUT NUMBER,
	p_IS_DISPATCHABLE OUT NUMBER,
	p_TRANSACTION_INTERVAL OUT VARCHAR2,
	p_EXTERNAL_INTERVAL OUT VARCHAR2,
	p_ETAG_CODE OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_PURCHASER_ID OUT NUMBER,
	p_PURCHASER_DISP OUT VARCHAR2,
	p_SELLER_ID OUT NUMBER,
	p_SELLER_DISP OUT VARCHAR2,
	p_CONTRACT_ID OUT NUMBER,
	p_CONTRACT_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_POR_ID OUT NUMBER,
	p_POR_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_COMMODITY_ID OUT NUMBER,
	p_COMMODITY_DISP OUT VARCHAR2,
	p_SERVICE_TYPE_ID OUT NUMBER,
	p_SERVICE_TYPE_DISP OUT VARCHAR2,
	p_TX_TRANSACTION_ID OUT NUMBER,
	p_TX_TRANSACTION_DISP OUT VARCHAR2,
	p_PATH_ID OUT NUMBER,
	p_PATH_DISP OUT VARCHAR2,
	p_LINK_TRANSACTION_ID OUT NUMBER,
	p_LINK_TRANSACTION_DISP OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_PSE_ID OUT NUMBER,
	p_PSE_DISP OUT VARCHAR2,
	p_ESP_ID OUT NUMBER,
	p_ESP_DISP OUT VARCHAR2,
	p_POOL_ID OUT NUMBER,
	p_POOL_DISP OUT VARCHAR2,
	p_SCHEDULE_GROUP_ID OUT NUMBER,
	p_SCHEDULE_GROUP_DISP OUT VARCHAR2,
	p_MARKET_PRICE_ID OUT NUMBER,
	p_MARKET_PRICE_DISP OUT VARCHAR2,
	p_ZOR_ID OUT NUMBER,
	p_ZOR_DISP OUT VARCHAR2,
	p_ZOD_ID OUT NUMBER,
	p_ZOD_DISP OUT VARCHAR2,
	p_SOURCE_ID OUT NUMBER,
	p_SOURCE_DISP OUT VARCHAR2,
	p_SINK_ID OUT NUMBER,
	p_SINK_DISP OUT VARCHAR2,
	p_RESOURCE_ID OUT NUMBER,
	p_RESOURCE_DISP OUT VARCHAR2,
	p_AGREEMENT_TYPE OUT VARCHAR2,
	p_APPROVAL_TYPE OUT VARCHAR2,
	p_LOSS_OPTION OUT VARCHAR2,
	p_TRAIT_CATEGORY OUT VARCHAR2,
	p_TP_ID OUT NUMBER,
	p_TP_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_EXTERNAL_TRANSACTION
	(
    p_TRANSACTION_ID,
    p_TRANSACTION_NAME,
    p_TRANSACTION_ALIAS,
    p_TRANSACTION_DESC,
    p_TRANSACTION_TYPE,
    p_TRANSACTION_CODE,
    p_TRANSACTION_IDENTIFIER,
    p_IS_FIRM,
    p_IS_IMPORT_SCHEDULE,
    p_IS_EXPORT_SCHEDULE,
    p_IS_BALANCE_TRANSACTION,
    p_IS_BID_OFFER,
    p_IS_EXCLUDE_FROM_POSITION,
    p_IS_IMPORT_EXPORT,
    p_IS_DISPATCHABLE,
    p_TRANSACTION_INTERVAL,
    p_EXTERNAL_INTERVAL,
    p_ETAG_CODE,
    p_BEGIN_DATE,
    p_END_DATE,
    p_PURCHASER_ID,
    p_SELLER_ID,
    p_CONTRACT_ID,
    p_SC_ID,
    p_POR_ID,
    p_POD_ID,
    p_COMMODITY_ID,
    p_SERVICE_TYPE_ID,
    p_TX_TRANSACTION_ID,
    p_PATH_ID,
    p_LINK_TRANSACTION_ID,
    p_EDC_ID,
    p_PSE_ID,
    p_ESP_ID,
    p_POOL_ID,
    p_SCHEDULE_GROUP_ID,
    p_MARKET_PRICE_ID,
    p_ZOR_ID,
    p_ZOD_ID,
    p_SOURCE_ID,
    p_SINK_ID,
    p_RESOURCE_ID,
    p_AGREEMENT_TYPE,
    p_APPROVAL_TYPE,
    p_LOSS_OPTION,
    p_TRAIT_CATEGORY,
    p_TP_ID
	);
    
    IF p_PURCHASER_ID IS NOT NULL THEN
        p_PURCHASER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PSE,
                p_PURCHASER_ID );
    END IF;
    
    IF p_SELLER_ID IS NOT NULL THEN
        p_SELLER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PSE,
                p_SELLER_ID );
    END IF;
    
    IF p_CONTRACT_ID IS NOT NULL THEN
        p_CONTRACT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_CONTRACT,
                p_CONTRACT_ID );
    END IF;
    
    IF p_SC_ID IS NOT NULL THEN
        p_SC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SC,
                p_SC_ID );
    END IF;
    
    IF p_POR_ID IS NOT NULL THEN
        p_POR_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_POR_ID );
    END IF;
    
    IF p_POD_ID IS NOT NULL THEN
        p_POD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_POD_ID );
    END IF;
    
    IF p_COMMODITY_ID IS NOT NULL THEN
        p_COMMODITY_DISP := ENTITY_NAME_FROM_IDS(EC.ED_IT_COMMODITY,
                p_COMMODITY_ID );
    END IF;
    
    IF p_SERVICE_TYPE_ID IS NOT NULL THEN
        p_SERVICE_TYPE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_TYPE,
                p_SERVICE_TYPE_ID );
    END IF;
    
    IF p_TX_TRANSACTION_ID IS NOT NULL THEN
        p_TX_TRANSACTION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_EXTERNAL_TRANSACTION,
                p_TX_TRANSACTION_ID );
    END IF;
    
    IF p_PATH_ID IS NOT NULL THEN
        p_PATH_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PATH,
                p_PATH_ID );
    END IF;
    
    IF p_LINK_TRANSACTION_ID IS NOT NULL THEN
        p_LINK_TRANSACTION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_EXTERNAL_TRANSACTION,
                p_LINK_TRANSACTION_ID );
    END IF;
    
    IF p_EDC_ID IS NOT NULL THEN
        p_EDC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_EDC,
                p_EDC_ID );
    END IF;
    
    IF p_PSE_ID IS NOT NULL THEN
        p_PSE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PSE,
                p_PSE_ID );
    END IF;
    
    IF p_ESP_ID IS NOT NULL THEN
        p_ESP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ESP,
                p_ESP_ID );
    END IF;
    
    IF p_POOL_ID IS NOT NULL THEN
        p_POOL_DISP := ENTITY_NAME_FROM_IDS(EC.ED_POOL,
                p_POOL_ID );
    END IF;
    
    IF p_SCHEDULE_GROUP_ID IS NOT NULL THEN
        p_SCHEDULE_GROUP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SCHEDULE_GROUP,
                p_SCHEDULE_GROUP_ID );
    END IF;
    
    IF p_MARKET_PRICE_ID IS NOT NULL THEN
        p_MARKET_PRICE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_MARKET_PRICE,
                p_MARKET_PRICE_ID );
    END IF;
    
    IF p_ZOR_ID IS NOT NULL THEN
        p_ZOR_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_ZOR_ID );
    END IF;
    
    IF p_ZOD_ID IS NOT NULL THEN
        p_ZOD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_ZOD_ID );
    END IF;
    
    IF p_SOURCE_ID IS NOT NULL THEN
        p_SOURCE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SOURCE_ID );
    END IF;
    
    IF p_SINK_ID IS NOT NULL THEN
        p_SINK_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SINK_ID );
    END IF;
    
    IF p_RESOURCE_ID IS NOT NULL THEN
        p_RESOURCE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SUPPLY_RESOURCE,
                p_RESOURCE_ID );
    END IF;
    
    IF p_TP_ID IS NOT NULL THEN
        p_TP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TP,
                p_TP_ID );
    END IF;
    

END EXTERNAL_TRANSACTION;
---------------------------------------------------------------------

PROCEDURE GEOGRAPHY
	(
	p_GEOGRAPHY_ID IN NUMBER,
	p_GEOGRAPHY_NAME OUT VARCHAR2,
	p_GEOGRAPHY_ALIAS OUT VARCHAR2,
	p_GEOGRAPHY_DESC OUT VARCHAR2,
	p_GEOGRAPHY_TYPE OUT VARCHAR2,
	p_PARENT_GEOGRAPHY_ID OUT NUMBER,
	p_PARENT_GEOGRAPHY_DISP OUT VARCHAR2,
	p_DISPLAY_NAME OUT VARCHAR2,
	p_ABBREVIATION OUT VARCHAR2
	) AS 

BEGIN

IO.GET_GEOGRAPHY
	(
    p_GEOGRAPHY_ID,
    p_GEOGRAPHY_NAME,
    p_GEOGRAPHY_ALIAS,
    p_GEOGRAPHY_DESC,
    p_GEOGRAPHY_TYPE,
    p_PARENT_GEOGRAPHY_ID,
    p_DISPLAY_NAME,
    p_ABBREVIATION
	);
    
    IF p_PARENT_GEOGRAPHY_ID IS NOT NULL THEN
        p_PARENT_GEOGRAPHY_DISP := ENTITY_NAME_FROM_IDS(EC.ED_GEOGRAPHY,
                p_PARENT_GEOGRAPHY_ID );
    END IF;
    

END GEOGRAPHY;
---------------------------------------------------------------------

PROCEDURE GROWTH_PATTERN
	(
	p_PATTERN_ID IN NUMBER,
	p_PATTERN_NAME OUT VARCHAR2,
	p_PATTERN_ALIAS OUT VARCHAR2,
	p_PATTERN_DESC OUT VARCHAR2,
	p_JAN_PCT OUT NUMBER,
	p_FEB_PCT OUT NUMBER,
	p_MAR_PCT OUT NUMBER,
	p_APR_PCT OUT NUMBER,
	p_MAY_PCT OUT NUMBER,
	p_JUN_PCT OUT NUMBER,
	p_JUL_PCT OUT NUMBER,
	p_AUG_PCT OUT NUMBER,
	p_SEP_PCT OUT NUMBER,
	p_OCT_PCT OUT NUMBER,
	p_NOV_PCT OUT NUMBER,
	p_DEC_PCT OUT NUMBER
	) AS 

BEGIN

IO.GET_GROWTH_PATTERN
	(
    p_PATTERN_ID,
    p_PATTERN_NAME,
    p_PATTERN_ALIAS,
    p_PATTERN_DESC,
    p_JAN_PCT,
    p_FEB_PCT,
    p_MAR_PCT,
    p_APR_PCT,
    p_MAY_PCT,
    p_JUN_PCT,
    p_JUL_PCT,
    p_AUG_PCT,
    p_SEP_PCT,
    p_OCT_PCT,
    p_NOV_PCT,
    p_DEC_PCT
	);
    

END GROWTH_PATTERN;
---------------------------------------------------------------------

PROCEDURE HEAT_RATE_CURVE
	(
	p_HEAT_RATE_CURVE_ID IN NUMBER,
	p_HEAT_RATE_CURVE_NAME OUT VARCHAR2,
	p_HEAT_RATE_CURVE_ALIAS OUT VARCHAR2,
	p_HEAT_RATE_CURVE_DESC OUT VARCHAR2,
	p_STATION_ID OUT NUMBER,
	p_STATION_DISP OUT VARCHAR2,
	p_PARAMETER_1_ID OUT NUMBER,
	p_PARAMETER_1_DISP OUT VARCHAR2,
	p_PARAMETER_1_ROUND_TO_NEAREST OUT NUMBER,
	p_PARAMETER_1_ROUNDING_STYLE OUT VARCHAR2,
	p_PARAMETER_2_ID OUT NUMBER,
	p_PARAMETER_2_DISP OUT VARCHAR2,
	p_PARAMETER_2_ROUND_TO_NEAREST OUT NUMBER,
	p_PARAMETER_2_ROUNDING_STYLE OUT VARCHAR2,
	p_PARAMETER_3_ID OUT NUMBER,
	p_PARAMETER_3_DISP OUT VARCHAR2,
	p_PARAMETER_3_ROUND_TO_NEAREST OUT NUMBER,
	p_PARAMETER_3_ROUNDING_STYLE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_HEAT_RATE_CURVE
	(
    p_HEAT_RATE_CURVE_ID,
    p_HEAT_RATE_CURVE_NAME,
    p_HEAT_RATE_CURVE_ALIAS,
    p_HEAT_RATE_CURVE_DESC,
    p_STATION_ID,
    p_PARAMETER_1_ID,
    p_PARAMETER_1_ROUND_TO_NEAREST,
    p_PARAMETER_1_ROUNDING_STYLE,
    p_PARAMETER_2_ID,
    p_PARAMETER_2_ROUND_TO_NEAREST,
    p_PARAMETER_2_ROUNDING_STYLE,
    p_PARAMETER_3_ID,
    p_PARAMETER_3_ROUND_TO_NEAREST,
    p_PARAMETER_3_ROUNDING_STYLE
	);
    
    IF p_STATION_ID IS NOT NULL THEN
        p_STATION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_WEATHER_STATION,
                p_STATION_ID );
    END IF;
    
    IF p_PARAMETER_1_ID IS NOT NULL THEN
        p_PARAMETER_1_DISP := ENTITY_NAME_FROM_IDS(EC.ED_WEATHER_PARAMETER,
                p_PARAMETER_1_ID );
    END IF;
    
    IF p_PARAMETER_2_ID IS NOT NULL THEN
        p_PARAMETER_2_DISP := ENTITY_NAME_FROM_IDS(EC.ED_WEATHER_PARAMETER,
                p_PARAMETER_2_ID );
    END IF;
    
    IF p_PARAMETER_3_ID IS NOT NULL THEN
        p_PARAMETER_3_DISP := ENTITY_NAME_FROM_IDS(EC.ED_WEATHER_PARAMETER,
                p_PARAMETER_3_ID );
    END IF;
    

END HEAT_RATE_CURVE;
---------------------------------------------------------------------

PROCEDURE HOLIDAY
	(
	p_HOLIDAY_ID IN NUMBER,
	p_HOLIDAY_NAME OUT VARCHAR2,
	p_HOLIDAY_ALIAS OUT VARCHAR2,
	p_HOLIDAY_DESC OUT VARCHAR2
	) AS 

BEGIN

IO.GET_HOLIDAY
	(
    p_HOLIDAY_ID,
    p_HOLIDAY_NAME,
    p_HOLIDAY_ALIAS,
    p_HOLIDAY_DESC
	);
    

END HOLIDAY;
---------------------------------------------------------------------

PROCEDURE HOLIDAY_SET
	(
	p_HOLIDAY_SET_ID IN NUMBER,
	p_HOLIDAY_SET_NAME OUT VARCHAR2,
	p_HOLIDAY_SET_ALIAS OUT VARCHAR2,
	p_HOLIDAY_SET_DESC OUT VARCHAR2
	) AS 

BEGIN

IO.GET_HOLIDAY_SET
	(
    p_HOLIDAY_SET_ID,
    p_HOLIDAY_SET_NAME,
    p_HOLIDAY_SET_ALIAS,
    p_HOLIDAY_SET_DESC
	);
    

END HOLIDAY_SET;
---------------------------------------------------------------------

PROCEDURE INTERCHANGE_CONTRACT
	(
	p_CONTRACT_ID IN NUMBER,
	p_CONTRACT_NAME OUT VARCHAR2,
	p_CONTRACT_ALIAS OUT VARCHAR2,
	p_CONTRACT_DESC OUT VARCHAR2,
	p_CONTRACT_STATUS OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_IS_EVERGREEN OUT NUMBER,
	p_CONTRACT_TYPE OUT VARCHAR2,
	p_BILLING_ENTITY_ID OUT NUMBER,
	p_BILLING_ENTITY_DISP OUT VARCHAR2,
	p_PURCHASER_ID OUT NUMBER,
	p_PURCHASER_DISP OUT VARCHAR2,
	p_SELLER_ID OUT NUMBER,
	p_SELLER_DISP OUT VARCHAR2,
	p_SOURCE_ID OUT NUMBER,
	p_SOURCE_DISP OUT VARCHAR2,
	p_SINK_ID OUT NUMBER,
	p_SINK_DISP OUT VARCHAR2,
	p_POR_ID OUT NUMBER,
	p_POR_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_AGREEMENT_TYPE OUT VARCHAR2,
	p_APPROVAL_TYPE OUT VARCHAR2,
	p_MARKET_TYPE OUT VARCHAR2,
	p_LOSS_OPTION OUT VARCHAR2,
	p_CONTRACT_FILE_NAME OUT VARCHAR2,
	p_PIPELINE_ID OUT NUMBER,
	p_PIPELINE_DISP OUT VARCHAR2,
	p_PIPELINE_TARIFF_TYPE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_INTERCHANGE_CONTRACT
	(
    p_CONTRACT_ID,
    p_CONTRACT_NAME,
    p_CONTRACT_ALIAS,
    p_CONTRACT_DESC,
    p_CONTRACT_STATUS,
    p_BEGIN_DATE,
    p_END_DATE,
    p_IS_EVERGREEN,
    p_CONTRACT_TYPE,
    p_BILLING_ENTITY_ID,
    p_PURCHASER_ID,
    p_SELLER_ID,
    p_SOURCE_ID,
    p_SINK_ID,
    p_POR_ID,
    p_POD_ID,
    p_SC_ID,
    p_AGREEMENT_TYPE,
    p_APPROVAL_TYPE,
    p_MARKET_TYPE,
    p_LOSS_OPTION,
    p_CONTRACT_FILE_NAME,
    p_PIPELINE_ID,
    p_PIPELINE_TARIFF_TYPE
	);
    
    IF p_BILLING_ENTITY_ID IS NOT NULL THEN
        p_BILLING_ENTITY_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PSE,
                p_BILLING_ENTITY_ID );
    END IF;
    
    IF p_PURCHASER_ID IS NOT NULL THEN
        p_PURCHASER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PSE,
                p_PURCHASER_ID );
    END IF;
    
    IF p_SELLER_ID IS NOT NULL THEN
        p_SELLER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PSE,
                p_SELLER_ID );
    END IF;
    
    IF p_SOURCE_ID IS NOT NULL THEN
        p_SOURCE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SOURCE_ID );
    END IF;
    
    IF p_SINK_ID IS NOT NULL THEN
        p_SINK_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SINK_ID );
    END IF;
    
    IF p_POR_ID IS NOT NULL THEN
        p_POR_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_POR_ID );
    END IF;
    
    IF p_POD_ID IS NOT NULL THEN
        p_POD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_POD_ID );
    END IF;
    
    IF p_SC_ID IS NOT NULL THEN
        p_SC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SC,
                p_SC_ID );
    END IF;
    
    IF p_PIPELINE_ID IS NOT NULL THEN
        p_PIPELINE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PIPELINE,
                p_PIPELINE_ID );
    END IF;
    

END INTERCHANGE_CONTRACT;
---------------------------------------------------------------------

PROCEDURE INVOICE_GROUP
	(
	p_INVOICE_GROUP_ID IN NUMBER,
	p_INVOICE_GROUP_NAME OUT VARCHAR2,
	p_INVOICE_GROUP_ALIAS OUT VARCHAR2,
	p_INVOICE_GROUP_DESC OUT VARCHAR2,
	p_DISPLAY_ORDER OUT NUMBER,
	p_SHOW_TITLE_ON_INVOICE OUT NUMBER,
	p_SHOW_SUBTOTAL_ON_INVOICE OUT NUMBER
	) AS 

BEGIN

IO.GET_INVOICE_GROUP
	(
    p_INVOICE_GROUP_ID,
    p_INVOICE_GROUP_NAME,
    p_INVOICE_GROUP_ALIAS,
    p_INVOICE_GROUP_DESC,
    p_DISPLAY_ORDER,
    p_SHOW_TITLE_ON_INVOICE,
    p_SHOW_SUBTOTAL_ON_INVOICE
	);
    

END INVOICE_GROUP;
---------------------------------------------------------------------

PROCEDURE IT_COMMODITY
	(
	p_COMMODITY_ID IN NUMBER,
	p_COMMODITY_NAME OUT VARCHAR2,
	p_COMMODITY_ALIAS OUT VARCHAR2,
	p_COMMODITY_DESC OUT VARCHAR2,
	p_COMMODITY_TYPE OUT VARCHAR2,
	p_COMMODITY_UNIT OUT VARCHAR2,
	p_COMMODITY_UNIT_FORMAT OUT VARCHAR2,
	p_COMMODITY_PRICE_UNIT OUT VARCHAR2,
	p_COMMODITY_PRICE_FORMAT OUT VARCHAR2,
	p_IS_VIRTUAL OUT NUMBER,
	p_MARKET_TYPE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_IT_COMMODITY
	(
    p_COMMODITY_ID,
    p_COMMODITY_NAME,
    p_COMMODITY_ALIAS,
    p_COMMODITY_DESC,
    p_COMMODITY_TYPE,
    p_COMMODITY_UNIT,
    p_COMMODITY_UNIT_FORMAT,
    p_COMMODITY_PRICE_UNIT,
    p_COMMODITY_PRICE_FORMAT,
    p_IS_VIRTUAL,
    p_MARKET_TYPE
	);
    

END IT_COMMODITY;
---------------------------------------------------------------------

PROCEDURE JOB_THREAD
	(
	p_JOB_THREAD_ID IN NUMBER,
	p_JOB_THREAD_NAME OUT VARCHAR2,
	p_JOB_THREAD_ALIAS OUT VARCHAR2,
	p_JOB_THREAD_DESC OUT VARCHAR2,
	p_JOB_CLASS OUT VARCHAR2,
	p_IS_SNOOZED OUT NUMBER
	) AS 

BEGIN

IO.GET_JOB_THREAD
	(
    p_JOB_THREAD_ID,
    p_JOB_THREAD_NAME,
    p_JOB_THREAD_ALIAS,
    p_JOB_THREAD_DESC,
    p_JOB_CLASS,
    p_IS_SNOOZED
	);
    

END JOB_THREAD;
---------------------------------------------------------------------

PROCEDURE LOAD_PROFILE
	(
	p_PROFILE_LIBRARY_ID OUT NUMBER,
	p_PROFILE_LIBRARY_DISP OUT VARCHAR2,
	p_PROFILE_ID IN NUMBER,
	p_PROFILE_NAME OUT VARCHAR2,
	p_PROFILE_ALIAS OUT VARCHAR2,
	p_PROFILE_DESC OUT VARCHAR2,
	p_PROFILE_TYPE OUT VARCHAR2,
	p_PROFILE_OPERATION OUT VARCHAR2,
	p_PROFILE_ORIGIN OUT VARCHAR2,
	p_PROFILE_RATE_CLASS OUT VARCHAR2,
	p_PROFILE_DAY_TYPE OUT VARCHAR2,
	p_PROFILE_ACCOUNT_REF OUT VARCHAR2,
	p_PROFILE_METER_REF OUT VARCHAR2,
	p_PROFILE_SIC_CODE OUT VARCHAR2,
	p_PROFILE_SEASON OUT VARCHAR2,
	p_PROFILE_SYSTEM_LOAD OUT VARCHAR2,
	p_PROFILE_ADJUSTMENT_OPTION OUT VARCHAR2,
	p_PROFILE_STATION_ID OUT NUMBER,
	p_PROFILE_STATION_DISP OUT VARCHAR2,
	p_PROFILE_TEMPLATE_ID OUT NUMBER,
	p_PROFILE_TEMPLATE_DISP OUT VARCHAR2,
	p_PROFILE_SOURCE_BEGIN_DATE OUT DATE,
	p_PROFILE_SOURCE_END_DATE OUT DATE,
	p_PROFILE_SOURCE_ID OUT NUMBER,
	p_PROFILE_SOURCE_DISP OUT VARCHAR2,
	p_PROFILE_INTERVAL OUT NUMBER,
	p_PROFILE_SOURCE_VERSION OUT DATE,
	p_PROFILE_BREAKPOINT_INTERVAL OUT VARCHAR2,
	p_IS_EXTERNAL_PROFILE OUT NUMBER
	) AS 

BEGIN

IO.GET_LOAD_PROFILE
	(
    p_PROFILE_LIBRARY_ID,
    p_PROFILE_ID,
    p_PROFILE_NAME,
    p_PROFILE_ALIAS,
    p_PROFILE_DESC,
    p_PROFILE_TYPE,
    p_PROFILE_OPERATION,
    p_PROFILE_ORIGIN,
    p_PROFILE_RATE_CLASS,
    p_PROFILE_DAY_TYPE,
    p_PROFILE_ACCOUNT_REF,
    p_PROFILE_METER_REF,
    p_PROFILE_SIC_CODE,
    p_PROFILE_SEASON,
    p_PROFILE_SYSTEM_LOAD,
    p_PROFILE_ADJUSTMENT_OPTION,
    p_PROFILE_STATION_ID,
    p_PROFILE_TEMPLATE_ID,
    p_PROFILE_SOURCE_BEGIN_DATE,
    p_PROFILE_SOURCE_END_DATE,
    p_PROFILE_SOURCE_ID,
    p_PROFILE_INTERVAL,
    p_PROFILE_SOURCE_VERSION,
    p_PROFILE_BREAKPOINT_INTERVAL,
    p_IS_EXTERNAL_PROFILE
	);
    
    IF p_PROFILE_LIBRARY_ID IS NOT NULL THEN
        p_PROFILE_LIBRARY_DISP := ENTITY_NAME_FROM_IDS(EC.ED_LOAD_PROFILE_LIBRARY,
                p_PROFILE_LIBRARY_ID );
    END IF;
    
    IF p_PROFILE_STATION_ID IS NOT NULL THEN
        p_PROFILE_STATION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_WEATHER_STATION,
                p_PROFILE_STATION_ID );
    END IF;
    
    IF p_PROFILE_TEMPLATE_ID IS NOT NULL THEN
        p_PROFILE_TEMPLATE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TEMPLATE,
                p_PROFILE_TEMPLATE_ID );
    END IF;
    
    IF p_PROFILE_SOURCE_ID IS NOT NULL THEN
        p_PROFILE_SOURCE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_PROFILE_SOURCE_ID );
    END IF;
    

END LOAD_PROFILE;
---------------------------------------------------------------------

PROCEDURE LOAD_PROFILE_LIBRARY
	(
	p_PROFILE_LIBRARY_ID IN NUMBER,
	p_PROFILE_LIBRARY_NAME OUT VARCHAR2,
	p_PROFILE_LIBRARY_ALIAS OUT VARCHAR2,
	p_PROFILE_LIBRARY_DESC OUT VARCHAR2
	) AS 

BEGIN

IO.GET_LOAD_PROFILE_LIBRARY
	(
    p_PROFILE_LIBRARY_ID,
    p_PROFILE_LIBRARY_NAME,
    p_PROFILE_LIBRARY_ALIAS,
    p_PROFILE_LIBRARY_DESC
	);
    

END LOAD_PROFILE_LIBRARY;
---------------------------------------------------------------------

PROCEDURE LOSS_FACTOR
	(
	p_LOSS_FACTOR_ID IN NUMBER,
	p_LOSS_FACTOR_NAME OUT VARCHAR2,
	p_LOSS_FACTOR_ALIAS OUT VARCHAR2,
	p_LOSS_FACTOR_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	) AS 

BEGIN

IO.GET_LOSS_FACTOR
	(
    p_LOSS_FACTOR_ID,
    p_LOSS_FACTOR_NAME,
    p_LOSS_FACTOR_ALIAS,
    p_LOSS_FACTOR_DESC,
    p_EXTERNAL_IDENTIFIER
	);
    

END LOSS_FACTOR;
---------------------------------------------------------------------

PROCEDURE MARKET_PRICE
	(
	p_MARKET_PRICE_ID IN NUMBER,
	p_MARKET_PRICE_NAME OUT VARCHAR2,
	p_MARKET_PRICE_ALIAS OUT VARCHAR2,
	p_MARKET_PRICE_DESC OUT VARCHAR2,
	p_MARKET_PRICE_TYPE OUT VARCHAR2,
	p_MARKET_PRICE_INTERVAL OUT VARCHAR2,
	p_MARKET_TYPE OUT VARCHAR2,
	p_COMMODITY_ID OUT NUMBER,
	p_COMMODITY_DISP OUT VARCHAR2,
	p_SERVICE_POINT_TYPE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_ZOD_ID OUT NUMBER,
	p_ZOD_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_MARKET_PRICE
	(
    p_MARKET_PRICE_ID,
    p_MARKET_PRICE_NAME,
    p_MARKET_PRICE_ALIAS,
    p_MARKET_PRICE_DESC,
    p_MARKET_PRICE_TYPE,
    p_MARKET_PRICE_INTERVAL,
    p_MARKET_TYPE,
    p_COMMODITY_ID,
    p_SERVICE_POINT_TYPE,
    p_EXTERNAL_IDENTIFIER,
    p_EDC_ID,
    p_SC_ID,
    p_POD_ID,
    p_ZOD_ID
	);
    
    IF p_COMMODITY_ID IS NOT NULL THEN
        p_COMMODITY_DISP := ENTITY_NAME_FROM_IDS(EC.ED_IT_COMMODITY,
                p_COMMODITY_ID );
    END IF;
    
    IF p_EDC_ID IS NOT NULL THEN
        p_EDC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_EDC,
                p_EDC_ID );
    END IF;
    
    IF p_SC_ID IS NOT NULL THEN
        p_SC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SC,
                p_SC_ID );
    END IF;
    
    IF p_POD_ID IS NOT NULL THEN
        p_POD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_POD_ID );
    END IF;
    
    IF p_ZOD_ID IS NOT NULL THEN
        p_ZOD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_ZOD_ID );
    END IF;
    

END MARKET_PRICE;
---------------------------------------------------------------------

PROCEDURE MEASUREMENT_SOURCE
	(
	p_MEASUREMENT_SOURCE_ID IN NUMBER,
	p_MEASUREMENT_SOURCE_NAME OUT VARCHAR2,
	p_MEASUREMENT_SOURCE_ALIAS OUT VARCHAR2,
	p_MEASUREMENT_SOURCE_DESC OUT VARCHAR2,
	p_MEASUREMENT_SOURCE_TYPE OUT VARCHAR2,
	p_MEASUREMENT_SOURCE_INTERVAL OUT VARCHAR2,
	p_METER_TYPE OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_EXTERNAL_SYSTEM_ID OUT NUMBER,
	p_EXTERNAL_SYSTEM_DISP OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_PRECISION OUT NUMBER,
	p_UOM OUT VARCHAR2,
	p_POLLING_TIME OUT NUMBER
	) AS 

BEGIN

IO.GET_MEASUREMENT_SOURCE
	(
    p_MEASUREMENT_SOURCE_ID,
    p_MEASUREMENT_SOURCE_NAME,
    p_MEASUREMENT_SOURCE_ALIAS,
    p_MEASUREMENT_SOURCE_DESC,
    p_MEASUREMENT_SOURCE_TYPE,
    p_MEASUREMENT_SOURCE_INTERVAL,
    p_METER_TYPE,
    p_BEGIN_DATE,
    p_END_DATE,
    p_EXTERNAL_SYSTEM_ID,
    p_EXTERNAL_IDENTIFIER,
    p_PRECISION,
    p_UOM,
    p_POLLING_TIME
	);
    
    IF p_EXTERNAL_SYSTEM_ID IS NOT NULL THEN
        p_EXTERNAL_SYSTEM_DISP := ENTITY_NAME_FROM_IDS(EC.ED_EXTERNAL_SYSTEM,
                p_EXTERNAL_SYSTEM_ID );
    END IF;
    

END MEASUREMENT_SOURCE;
---------------------------------------------------------------------

PROCEDURE METER
	(
	p_MRSP_ID OUT NUMBER,
	p_MRSP_DISP OUT VARCHAR2,
	p_METER_ID IN NUMBER,
	p_METER_NAME OUT VARCHAR2,
	p_METER_ALIAS OUT VARCHAR2,
	p_METER_DESC OUT VARCHAR2,
	p_METER_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_METER_STATUS OUT VARCHAR2,
	p_METER_INTERVAL OUT VARCHAR2,
	p_METER_TYPE OUT VARCHAR2,
	p_METER_UNIT OUT VARCHAR2,
	p_IS_EXTERNAL_INTERVAL_USAGE OUT NUMBER,
	p_IS_EXTERNAL_BILLED_USAGE OUT NUMBER,
	p_IS_EXTERNAL_FORECAST OUT NUMBER,
	p_USE_TOU_USAGE_FACTOR OUT NUMBER
	) AS 

BEGIN

IO.GET_METER
	(
    p_MRSP_ID,
    p_METER_ID,
    p_METER_NAME,
    p_METER_ALIAS,
    p_METER_DESC,
    p_METER_EXTERNAL_IDENTIFIER,
    p_METER_STATUS,
    p_METER_INTERVAL,
    p_METER_TYPE,
    p_METER_UNIT,
    p_IS_EXTERNAL_INTERVAL_USAGE,
    p_IS_EXTERNAL_BILLED_USAGE,
    p_IS_EXTERNAL_FORECAST,
    p_USE_TOU_USAGE_FACTOR
	);
    
    IF p_MRSP_ID IS NOT NULL THEN
        p_MRSP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_MRSP,
                p_MRSP_ID );
    END IF;
    

END METER;
---------------------------------------------------------------------

PROCEDURE MRSP
	(
	p_MRSP_ID IN NUMBER,
	p_MRSP_NAME OUT VARCHAR2,
	p_MRSP_ALIAS OUT VARCHAR2,
	p_MRSP_DESC OUT VARCHAR2,
	p_MRSP_DUNS_NUMBER OUT VARCHAR2,
	p_MRSP_STATUS OUT VARCHAR2
	) AS 

BEGIN

IO.GET_MRSP
	(
    p_MRSP_ID,
    p_MRSP_NAME,
    p_MRSP_ALIAS,
    p_MRSP_DESC,
    p_MRSP_DUNS_NUMBER,
    p_MRSP_STATUS
	);
    

END MRSP;
---------------------------------------------------------------------

PROCEDURE OASIS_NODE
	(
	p_OASIS_NODE_ID IN NUMBER,
	p_OASIS_NODE_NAME OUT VARCHAR2,
	p_OASIS_NODE_ALIAS OUT VARCHAR2,
	p_OASIS_NODE_DESC OUT VARCHAR2,
	p_URL OUT VARCHAR2
	) AS 

BEGIN

IO.GET_OASIS_NODE
	(
    p_OASIS_NODE_ID,
    p_OASIS_NODE_NAME,
    p_OASIS_NODE_ALIAS,
    p_OASIS_NODE_DESC,
    p_URL
	);
    

END OASIS_NODE;
---------------------------------------------------------------------

PROCEDURE PATH
	(
	p_PATH_ID IN NUMBER,
	p_PATH_NAME OUT VARCHAR2,
	p_PATH_ALIAS OUT VARCHAR2,
	p_PATH_DESC OUT VARCHAR2
	) AS 

BEGIN

IO.GET_PATH
	(
    p_PATH_ID,
    p_PATH_NAME,
    p_PATH_ALIAS,
    p_PATH_DESC
	);
    

END PATH;
---------------------------------------------------------------------

PROCEDURE PERIOD
	(
	p_PERIOD_ID IN NUMBER,
	p_PERIOD_NAME OUT VARCHAR2,
	p_PERIOD_ALIAS OUT VARCHAR2,
	p_PERIOD_DESC OUT VARCHAR2,
	p_PERIOD_COLOR OUT NUMBER
	) AS 

BEGIN

IO.GET_PERIOD
	(
    p_PERIOD_ID,
    p_PERIOD_NAME,
    p_PERIOD_ALIAS,
    p_PERIOD_DESC,
    p_PERIOD_COLOR
	);
    

END PERIOD;
---------------------------------------------------------------------

PROCEDURE PIPELINE
	(
	p_PIPELINE_ID IN NUMBER,
	p_PIPELINE_NAME OUT VARCHAR2,
	p_PIPELINE_ALIAS OUT VARCHAR2,
	p_PIPELINE_DESC OUT VARCHAR2,
	p_PIPELINE_STATUS OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2
	) AS 

BEGIN

IO.GET_PIPELINE
	(
    p_PIPELINE_ID,
    p_PIPELINE_NAME,
    p_PIPELINE_ALIAS,
    p_PIPELINE_DESC,
    p_PIPELINE_STATUS,
    p_EXTERNAL_IDENTIFIER
	);
    

END PIPELINE;
---------------------------------------------------------------------

PROCEDURE POOL
	(
	p_POOL_ID IN NUMBER,
	p_POOL_NAME OUT VARCHAR2,
	p_POOL_ALIAS OUT VARCHAR2,
	p_POOL_DESC OUT VARCHAR2,
	p_POOL_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_POOL_STATUS OUT VARCHAR2,
	p_POOL_CATEGORY OUT VARCHAR2,
	p_POOL_EXCLUDE_LOAD_SCHEDULE OUT NUMBER
	) AS 

BEGIN

IO.GET_POOL
	(
    p_POOL_ID,
    p_POOL_NAME,
    p_POOL_ALIAS,
    p_POOL_DESC,
    p_POOL_EXTERNAL_IDENTIFIER,
    p_POOL_STATUS,
    p_POOL_CATEGORY,
    p_POOL_EXCLUDE_LOAD_SCHEDULE
	);
    

END POOL;
---------------------------------------------------------------------

PROCEDURE PORTFOLIO
	(
	p_PORTFOLIO_ID IN NUMBER,
	p_PORTFOLIO_NAME OUT VARCHAR2,
	p_PORTFOLIO_ALIAS OUT VARCHAR2,
	p_PORTFOLIO_DESC OUT VARCHAR2
	) AS 

BEGIN

IO.GET_PORTFOLIO
	(
    p_PORTFOLIO_ID,
    p_PORTFOLIO_NAME,
    p_PORTFOLIO_ALIAS,
    p_PORTFOLIO_DESC
	);
    

END PORTFOLIO;
---------------------------------------------------------------------

PROCEDURE PRODUCT
	(
	p_PRODUCT_ID IN NUMBER,
	p_PRODUCT_NAME OUT VARCHAR2,
	p_PRODUCT_ALIAS OUT VARCHAR2,
	p_PRODUCT_DESC OUT VARCHAR2,
	p_PRODUCT_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_PRODUCT_CATEGORY OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE
	) AS 

BEGIN

IO.GET_PRODUCT
	(
    p_PRODUCT_ID,
    p_PRODUCT_NAME,
    p_PRODUCT_ALIAS,
    p_PRODUCT_DESC,
    p_PRODUCT_EXTERNAL_IDENTIFIER,
    p_PRODUCT_CATEGORY,
    p_BEGIN_DATE,
    p_END_DATE
	);
    

END PRODUCT;
---------------------------------------------------------------------

PROCEDURE PROGRAM
	(
	p_PROGRAM_ID IN NUMBER,
	p_PROGRAM_NAME OUT VARCHAR2,
	p_PROGRAM_ALIAS OUT VARCHAR2,
	p_PROGRAM_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_PROGRAM_TYPE OUT VARCHAR2,
	p_PROGRAM_INTERVAL OUT VARCHAR2,
	p_CUSTOMER_TYPE OUT VARCHAR2,
	p_MAX_DURATION_HOUR OUT NUMBER,
	p_MAX_DURATION_MINUTE OUT NUMBER,
	p_MIN_OFF_TIME_HOUR OUT NUMBER,
	p_MIN_OFF_TIME_MINUTE OUT NUMBER,
	p_DEGREE_INCREASE OUT NUMBER,
	p_DEGREE_DECREASE OUT NUMBER,
	p_ALLOW_CUSTOMER_OVERRIDE OUT NUMBER,
	p_DEFAULT_OPT_OUT_PCT OUT NUMBER,
	p_DEFAULT_OVERRIDE_PCT OUT NUMBER,
	p_USE_DEFAULT_OPT_OUT_OVERRIDE OUT NUMBER,
	p_VALIDATION_METHOD OUT VARCHAR2,
	p_TRANSACTION_ID OUT NUMBER,
	p_TRANSACTION_DISP OUT VARCHAR2,
	p_COMPONENT_ID OUT NUMBER,
	p_COMPONENT_DISP OUT VARCHAR2,
	p_SIGNAL_TYPE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_PROGRAM
	(
    p_PROGRAM_ID,
    p_PROGRAM_NAME,
    p_PROGRAM_ALIAS,
    p_PROGRAM_DESC,
    p_EXTERNAL_IDENTIFIER,
    p_PROGRAM_TYPE,
    p_PROGRAM_INTERVAL,
    p_CUSTOMER_TYPE,
    p_MAX_DURATION_HOUR,
    p_MAX_DURATION_MINUTE,
    p_MIN_OFF_TIME_HOUR,
    p_MIN_OFF_TIME_MINUTE,
    p_DEGREE_INCREASE,
    p_DEGREE_DECREASE,
    p_ALLOW_CUSTOMER_OVERRIDE,
    p_DEFAULT_OPT_OUT_PCT,
    p_DEFAULT_OVERRIDE_PCT,
    p_USE_DEFAULT_OPT_OUT_OVERRIDE,
    p_VALIDATION_METHOD,
    p_TRANSACTION_ID,
    p_COMPONENT_ID,
    p_SIGNAL_TYPE
	);
    
    IF p_TRANSACTION_ID IS NOT NULL THEN
        p_TRANSACTION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TRANSACTION,
                p_TRANSACTION_ID );
    END IF;
    
    IF p_COMPONENT_ID IS NOT NULL THEN
        p_COMPONENT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_COMPONENT,
                p_COMPONENT_ID );
    END IF;
    

END PROGRAM;
---------------------------------------------------------------------

PROCEDURE PROXY_DAY_METHOD
	(
	p_PROXY_DAY_METHOD_ID IN NUMBER,
	p_PROXY_DAY_METHOD_NAME OUT VARCHAR2,
	p_PROXY_DAY_METHOD_ALIAS OUT VARCHAR2,
	p_PROXY_DAY_METHOD_DESC OUT VARCHAR2,
	p_TEMPLATE_ID OUT NUMBER,
	p_TEMPLATE_DISP OUT VARCHAR2,
	p_COMPARATIVE_VALUE OUT VARCHAR2,
	p_STATION_ID OUT NUMBER,
	p_STATION_DISP OUT VARCHAR2,
	p_PARAMETER_ID OUT NUMBER,
	p_PARAMETER_DISP OUT VARCHAR2,
	p_SYSTEM_LOAD_ID OUT NUMBER,
	p_SYSTEM_LOAD_DISP OUT VARCHAR2,
	p_LOOKUP_TIME_HORIZON OUT NUMBER,
	p_TIME_HORIZON_SHIFT OUT NUMBER,
	p_LOOKUP_CANDIDATE_LIMIT OUT NUMBER,
	p_CANDIDATE_DELTA_THRESHOLD OUT NUMBER,
	p_HOLIDAY_SET_ID OUT NUMBER,
	p_HOLIDAY_SET_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_PROXY_DAY_METHOD
	(
    p_PROXY_DAY_METHOD_ID,
    p_PROXY_DAY_METHOD_NAME,
    p_PROXY_DAY_METHOD_ALIAS,
    p_PROXY_DAY_METHOD_DESC,
    p_TEMPLATE_ID,
    p_COMPARATIVE_VALUE,
    p_STATION_ID,
    p_PARAMETER_ID,
    p_SYSTEM_LOAD_ID,
    p_LOOKUP_TIME_HORIZON,
    p_TIME_HORIZON_SHIFT,
    p_LOOKUP_CANDIDATE_LIMIT,
    p_CANDIDATE_DELTA_THRESHOLD,
    p_HOLIDAY_SET_ID
	);
    
    IF p_TEMPLATE_ID IS NOT NULL THEN
        p_TEMPLATE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TEMPLATE,
                p_TEMPLATE_ID );
    END IF;
    
    IF p_STATION_ID IS NOT NULL THEN
        p_STATION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_WEATHER_STATION,
                p_STATION_ID );
    END IF;
    
    IF p_PARAMETER_ID IS NOT NULL THEN
        p_PARAMETER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_WEATHER_PARAMETER,
                p_PARAMETER_ID );
    END IF;
    
    IF p_SYSTEM_LOAD_ID IS NOT NULL THEN
        p_SYSTEM_LOAD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SYSTEM_LOAD,
                p_SYSTEM_LOAD_ID );
    END IF;
    
    IF p_HOLIDAY_SET_ID IS NOT NULL THEN
        p_HOLIDAY_SET_DISP := ENTITY_NAME_FROM_IDS(EC.ED_HOLIDAY_SET,
                p_HOLIDAY_SET_ID );
    END IF;
    

END PROXY_DAY_METHOD;
---------------------------------------------------------------------

PROCEDURE PSE
	(
	p_PSE_ID IN NUMBER,
	p_PSE_NAME OUT VARCHAR2,
	p_PSE_ALIAS OUT VARCHAR2,
	p_PSE_DESC OUT VARCHAR2,
	p_PSE_NERC_CODE OUT VARCHAR2,
	p_PSE_STATUS OUT VARCHAR2,
	p_PSE_DUNS_NUMBER OUT VARCHAR2,
	p_PSE_BANK OUT VARCHAR2,
	p_PSE_ACH_NUMBER OUT VARCHAR2,
	p_PSE_TYPE OUT VARCHAR2,
	p_PSE_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_PSE_IS_RETAIL_AGGREGATOR OUT NUMBER,
	p_PSE_IS_BACKUP_GENERATION OUT NUMBER,
	p_PSE_EXCLUDE_LOAD_SCHEDULE OUT NUMBER,
	p_IS_BILLING_ENTITY OUT NUMBER,
	p_TIME_ZONE OUT VARCHAR2,
	p_STATEMENT_INTERVAL OUT VARCHAR2,
	p_INVOICE_INTERVAL OUT VARCHAR2,
	p_WEEK_BEGIN OUT VARCHAR2,
	p_INVOICE_LINE_ITEM_OPTION OUT VARCHAR2,
	p_INVOICE_EMAIL_SUBJECT OUT VARCHAR2,
	p_INVOICE_EMAIL_PRIORITY OUT NUMBER,
	p_INVOICE_EMAIL_BODY OUT VARCHAR2,
	p_INVOICE_EMAIL_BODY_MIME_TYPE OUT VARCHAR2,
	p_SCHEDULE_NAME_PREFIX OUT VARCHAR2,
	p_SCHEDULE_FORMAT OUT VARCHAR2,
	p_SCHEDULE_INTERVAL OUT VARCHAR2,
	p_LOAD_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_LOSS_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_CREATE_TX_LOSS_SCHEDULE OUT NUMBER,
	p_CREATE_DX_LOSS_SCHEDULE OUT NUMBER,
	p_CREATE_UFE_SCHEDULE OUT NUMBER,
	p_MINIMUM_SCHEDULE_AMT OUT NUMBER
	) AS 

BEGIN

IO.GET_PSE
	(
    p_PSE_ID,
    p_PSE_NAME,
    p_PSE_ALIAS,
    p_PSE_DESC,
    p_PSE_NERC_CODE,
    p_PSE_STATUS,
    p_PSE_DUNS_NUMBER,
    p_PSE_BANK,
    p_PSE_ACH_NUMBER,
    p_PSE_TYPE,
    p_PSE_EXTERNAL_IDENTIFIER,
    p_PSE_IS_RETAIL_AGGREGATOR,
    p_PSE_IS_BACKUP_GENERATION,
    p_PSE_EXCLUDE_LOAD_SCHEDULE,
    p_IS_BILLING_ENTITY,
    p_TIME_ZONE,
    p_STATEMENT_INTERVAL,
    p_INVOICE_INTERVAL,
    p_WEEK_BEGIN,
    p_INVOICE_LINE_ITEM_OPTION,
    p_INVOICE_EMAIL_SUBJECT,
    p_INVOICE_EMAIL_PRIORITY,
    p_INVOICE_EMAIL_BODY,
    p_INVOICE_EMAIL_BODY_MIME_TYPE,
    p_SCHEDULE_NAME_PREFIX,
    p_SCHEDULE_FORMAT,
    p_SCHEDULE_INTERVAL,
    p_LOAD_ROUNDING_PREFERENCE,
    p_LOSS_ROUNDING_PREFERENCE,
    p_CREATE_TX_LOSS_SCHEDULE,
    p_CREATE_DX_LOSS_SCHEDULE,
    p_CREATE_UFE_SCHEDULE,
    p_MINIMUM_SCHEDULE_AMT
	);
    

END PSE;
---------------------------------------------------------------------

PROCEDURE QUOTE_REQUEST
	(
	p_QUOTE_ID IN NUMBER,
	p_QUOTE_NAME OUT VARCHAR2,
	p_QUOTE_ALIAS OUT VARCHAR2,
	p_QUOTE_DESC OUT VARCHAR2,
	p_CAMPAIGN_NAME OUT VARCHAR2,
	p_CUSTOMER_NAME OUT VARCHAR2,
	p_CUSTOMER_TYPE OUT VARCHAR2,
	p_CUSTOMER_REP_NAME OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_CUSTOMER_CLASS OUT VARCHAR2,
	p_EDC_ACCOUNT_NUMBER OUT VARCHAR2,
	p_QUOTE_EFFECTIVE_DATE OUT DATE,
	p_QUOTE_EXPIRATION_DATE OUT DATE,
	p_SERVICE_BEGIN_DATE OUT DATE,
	p_SERVICE_END_DATE OUT DATE,
	p_QUOTE_TYPE OUT VARCHAR2,
	p_QUOTE_STATUS OUT VARCHAR2,
	p_STATION_ID OUT NUMBER,
	p_STATION_DISP OUT VARCHAR2,
	p_NUMBER_OF_CUSTOMERS OUT NUMBER,
	p_SIGNING_PROBABILITY OUT NUMBER,
	p_QUOTE_NOTES OUT VARCHAR2
	) AS 

BEGIN

IO.GET_QUOTE_REQUEST
	(
    p_QUOTE_ID,
    p_QUOTE_NAME,
    p_QUOTE_ALIAS,
    p_QUOTE_DESC,
    p_CAMPAIGN_NAME,
    p_CUSTOMER_NAME,
    p_CUSTOMER_TYPE,
    p_CUSTOMER_REP_NAME,
    p_EDC_ID,
    p_SERVICE_POINT_ID,
    p_CUSTOMER_CLASS,
    p_EDC_ACCOUNT_NUMBER,
    p_QUOTE_EFFECTIVE_DATE,
    p_QUOTE_EXPIRATION_DATE,
    p_SERVICE_BEGIN_DATE,
    p_SERVICE_END_DATE,
    p_QUOTE_TYPE,
    p_QUOTE_STATUS,
    p_STATION_ID,
    p_NUMBER_OF_CUSTOMERS,
    p_SIGNING_PROBABILITY,
    p_QUOTE_NOTES
	);
    
    IF p_EDC_ID IS NOT NULL THEN
        p_EDC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_EDC,
                p_EDC_ID );
    END IF;
    
    IF p_SERVICE_POINT_ID IS NOT NULL THEN
        p_SERVICE_POINT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SERVICE_POINT_ID );
    END IF;
    
    IF p_STATION_ID IS NOT NULL THEN
        p_STATION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_WEATHER_STATION,
                p_STATION_ID );
    END IF;
    

END QUOTE_REQUEST;
---------------------------------------------------------------------

PROCEDURE REACTOR_PROCEDURE
	(
	p_REACTOR_PROCEDURE_ID IN NUMBER,
	p_REACTOR_PROCEDURE_NAME OUT VARCHAR2,
	p_REACTOR_PROCEDURE_ALIAS OUT VARCHAR2,
	p_REACTOR_PROCEDURE_DESC OUT VARCHAR2,
	p_TABLE_ID OUT NUMBER,
	p_TABLE_DISP OUT VARCHAR2,
	p_PROCEDURE_NAME OUT VARCHAR2,
	p_JOB_THREAD_ID OUT NUMBER,
	p_JOB_THREAD_DISP OUT VARCHAR2,
	p_JOB_COMMENTS OUT VARCHAR2,
	p_CALL_ORDER OUT NUMBER,
	p_SKIP_WHEN_FORMULA OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_IS_IMMEDIATE OUT NUMBER,
	p_IS_ENABLED OUT NUMBER
	) AS 

BEGIN

IO.GET_REACTOR_PROCEDURE
	(
    p_REACTOR_PROCEDURE_ID,
    p_REACTOR_PROCEDURE_NAME,
    p_REACTOR_PROCEDURE_ALIAS,
    p_REACTOR_PROCEDURE_DESC,
    p_TABLE_ID,
    p_PROCEDURE_NAME,
    p_JOB_THREAD_ID,
    p_JOB_COMMENTS,
    p_CALL_ORDER,
    p_SKIP_WHEN_FORMULA,
    p_TIME_ZONE,
    p_IS_IMMEDIATE,
    p_IS_ENABLED
	);
    
    IF p_TABLE_ID IS NOT NULL THEN
        p_TABLE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SYSTEM_TABLE,
                p_TABLE_ID );
    END IF;
    
    IF p_JOB_THREAD_ID IS NOT NULL THEN
        p_JOB_THREAD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_JOB_THREAD,
                p_JOB_THREAD_ID );
    END IF;
    

END REACTOR_PROCEDURE;
---------------------------------------------------------------------

PROCEDURE RESOURCE_GROUP
	(
	p_RESOURCE_GROUP_ID IN NUMBER,
	p_RESOURCE_GROUP_NAME OUT VARCHAR2,
	p_RESOURCE_GROUP_ALIAS OUT VARCHAR2,
	p_RESOURCE_GROUP_DESC OUT VARCHAR2,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_RESOURCE_GROUP
	(
    p_RESOURCE_GROUP_ID,
    p_RESOURCE_GROUP_NAME,
    p_RESOURCE_GROUP_ALIAS,
    p_RESOURCE_GROUP_DESC,
    p_SERVICE_ZONE_ID
	);
    
    IF p_SERVICE_ZONE_ID IS NOT NULL THEN
        p_SERVICE_ZONE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_SERVICE_ZONE_ID );
    END IF;
    

END RESOURCE_GROUP;
---------------------------------------------------------------------

PROCEDURE SC
	(
	p_SC_ID IN NUMBER,
	p_SC_NAME OUT VARCHAR2,
	p_SC_ALIAS OUT VARCHAR2,
	p_SC_DESC OUT VARCHAR2,
	p_SC_NERC_CODE OUT VARCHAR2,
	p_SC_DUNS_NUMBER OUT VARCHAR2,
	p_SC_STATUS OUT VARCHAR2,
	p_SC_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_SC_SCHEDULE_NAME_PREFIX OUT VARCHAR2,
	p_SC_SCHEDULE_FORMAT OUT VARCHAR2,
	p_SC_SCHEDULE_INTERVAL OUT VARCHAR2,
	p_SC_LOAD_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_SC_LOSS_ROUNDING_PREFERENCE OUT VARCHAR2,
	p_SC_CREATE_TX_LOSS_SCHEDULE OUT NUMBER,
	p_SC_CREATE_DX_LOSS_SCHEDULE OUT NUMBER,
	p_SC_CREATE_UFE_SCHEDULE OUT NUMBER,
	p_SC_MARKET_PRICE_ID OUT NUMBER,
	p_SC_MARKET_PRICE_DISP OUT VARCHAR2,
	p_SC_MINIMUM_SCHEDULE_AMT OUT NUMBER
	) AS 

BEGIN

IO.GET_SC
	(
    p_SC_ID,
    p_SC_NAME,
    p_SC_ALIAS,
    p_SC_DESC,
    p_SC_NERC_CODE,
    p_SC_DUNS_NUMBER,
    p_SC_STATUS,
    p_SC_EXTERNAL_IDENTIFIER,
    p_SC_SCHEDULE_NAME_PREFIX,
    p_SC_SCHEDULE_FORMAT,
    p_SC_SCHEDULE_INTERVAL,
    p_SC_LOAD_ROUNDING_PREFERENCE,
    p_SC_LOSS_ROUNDING_PREFERENCE,
    p_SC_CREATE_TX_LOSS_SCHEDULE,
    p_SC_CREATE_DX_LOSS_SCHEDULE,
    p_SC_CREATE_UFE_SCHEDULE,
    p_SC_MARKET_PRICE_ID,
    p_SC_MINIMUM_SCHEDULE_AMT
	);
    
    IF p_SC_MARKET_PRICE_ID IS NOT NULL THEN
        p_SC_MARKET_PRICE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_MARKET_PRICE,
                p_SC_MARKET_PRICE_ID );
    END IF;
    

END SC;
---------------------------------------------------------------------

PROCEDURE SCENARIO
	(
	p_SCENARIO_ID IN NUMBER,
	p_SCENARIO_NAME OUT VARCHAR2,
	p_SCENARIO_ALIAS OUT VARCHAR2,
	p_SCENARIO_DESC OUT VARCHAR2,
	p_SCENARIO_CATEGORY OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SCENARIO
	(
    p_SCENARIO_ID,
    p_SCENARIO_NAME,
    p_SCENARIO_ALIAS,
    p_SCENARIO_DESC,
    p_SCENARIO_CATEGORY
	);
    

END SCENARIO;
---------------------------------------------------------------------

PROCEDURE SCHEDULE_GROUP
	(
	p_SCHEDULE_GROUP_ID IN NUMBER,
	p_SCHEDULE_GROUP_NAME OUT VARCHAR2,
	p_SCHEDULE_GROUP_ALIAS OUT VARCHAR2,
	p_SCHEDULE_GROUP_DESC OUT VARCHAR2,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_METER_TYPE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SCHEDULE_GROUP
	(
    p_SCHEDULE_GROUP_ID,
    p_SCHEDULE_GROUP_NAME,
    p_SCHEDULE_GROUP_ALIAS,
    p_SCHEDULE_GROUP_DESC,
    p_SERVICE_ZONE_ID,
    p_SC_ID,
    p_SERVICE_POINT_ID,
    p_METER_TYPE
	);
    
    IF p_SERVICE_ZONE_ID IS NOT NULL THEN
        p_SERVICE_ZONE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_SERVICE_ZONE_ID );
    END IF;
    
    IF p_SC_ID IS NOT NULL THEN
        p_SC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SC,
                p_SC_ID );
    END IF;
    
    IF p_SERVICE_POINT_ID IS NOT NULL THEN
        p_SERVICE_POINT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SERVICE_POINT_ID );
    END IF;
    

END SCHEDULE_GROUP;
---------------------------------------------------------------------

PROCEDURE SEASON
	(
	p_SEASON_ID IN NUMBER,
	p_SEASON_NAME OUT VARCHAR2,
	p_SEASON_ALIAS OUT VARCHAR2,
	p_SEASON_DESC OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE
	) AS 

BEGIN

IO.GET_SEASON
	(
    p_SEASON_ID,
    p_SEASON_NAME,
    p_SEASON_ALIAS,
    p_SEASON_DESC,
    p_BEGIN_DATE,
    p_END_DATE
	);
    

END SEASON;
---------------------------------------------------------------------

PROCEDURE SEGMENT
	(
	p_SEGMENT_ID IN NUMBER,
	p_SEGMENT_NAME OUT VARCHAR2,
	p_SEGMENT_ALIAS OUT VARCHAR2,
	p_SEGMENT_DESC OUT VARCHAR2,
	p_POR_ID OUT NUMBER,
	p_POR_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_MW_LIMIT_1 OUT VARCHAR2,
	p_MW_LIMIT_2 OUT VARCHAR2,
	p_MW_LIMIT_3 OUT VARCHAR2,
	p_LOSS_FACTOR OUT NUMBER
	) AS 

BEGIN

IO.GET_SEGMENT
	(
    p_SEGMENT_ID,
    p_SEGMENT_NAME,
    p_SEGMENT_ALIAS,
    p_SEGMENT_DESC,
    p_POR_ID,
    p_POD_ID,
    p_MW_LIMIT_1,
    p_MW_LIMIT_2,
    p_MW_LIMIT_3,
    p_LOSS_FACTOR
	);
    
    IF p_POR_ID IS NOT NULL THEN
        p_POR_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_POR_ID );
    END IF;
    
    IF p_POD_ID IS NOT NULL THEN
        p_POD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_POD_ID );
    END IF;
    

END SEGMENT;
---------------------------------------------------------------------

PROCEDURE SERVICE_AREA
	(
	p_SERVICE_AREA_ID IN NUMBER,
	p_SERVICE_AREA_NAME OUT VARCHAR2,
	p_SERVICE_AREA_ALIAS OUT VARCHAR2,
	p_SERVICE_AREA_DESC OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SERVICE_AREA
	(
    p_SERVICE_AREA_ID,
    p_SERVICE_AREA_NAME,
    p_SERVICE_AREA_ALIAS,
    p_SERVICE_AREA_DESC
	);
    

END SERVICE_AREA;
---------------------------------------------------------------------

PROCEDURE SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_SERVICE_LOCATION_NAME OUT VARCHAR2,
	p_SERVICE_LOCATION_ALIAS OUT VARCHAR2,
	p_SERVICE_LOCATION_DESC OUT VARCHAR2,
	p_LATITUDE OUT VARCHAR2,
	p_LONGITUDE OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_IS_EXTERNAL_BILLED_USAGE OUT NUMBER,
	p_IS_METER_ALLOCATION OUT NUMBER,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_WEATHER_STATION_ID OUT NUMBER,
	p_WEATHER_STATION_DISP OUT VARCHAR2,
	p_BUSINESS_ROLLUP_ID OUT NUMBER,
	p_GEOGRAPHIC_ROLLUP_ID OUT NUMBER,
	p_SQUARE_FOOTAGE OUT NUMBER,
	p_ANNUAL_CONSUMPTION OUT NUMBER,
	p_SUMMER_CONSUMPTION OUT NUMBER,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2,
	p_SUB_STATION_ID OUT NUMBER,
	p_SUB_STATION_DISP OUT VARCHAR2,
	p_FEEDER_ID OUT NUMBER,
	p_FEEDER_DISP OUT VARCHAR2,
	p_FEEDER_SEGMENT_ID OUT NUMBER,
	p_FEEDER_SEGMENT_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SERVICE_LOCATION
	(
    p_SERVICE_LOCATION_ID,
    p_SERVICE_LOCATION_NAME,
    p_SERVICE_LOCATION_ALIAS,
    p_SERVICE_LOCATION_DESC,
    p_LATITUDE,
    p_LONGITUDE,
    p_TIME_ZONE,
    p_EXTERNAL_IDENTIFIER,
    p_IS_EXTERNAL_BILLED_USAGE,
    p_IS_METER_ALLOCATION,
    p_SERVICE_POINT_ID,
    p_WEATHER_STATION_ID,
    p_BUSINESS_ROLLUP_ID,
    p_GEOGRAPHIC_ROLLUP_ID,
    p_SQUARE_FOOTAGE,
    p_ANNUAL_CONSUMPTION,
    p_SUMMER_CONSUMPTION,
    p_SERVICE_ZONE_ID,
    p_SUB_STATION_ID,
    p_FEEDER_ID,
    p_FEEDER_SEGMENT_ID
	);
    
    IF p_SERVICE_POINT_ID IS NOT NULL THEN
        p_SERVICE_POINT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SERVICE_POINT_ID );
    END IF;
    
    IF p_WEATHER_STATION_ID IS NOT NULL THEN
        p_WEATHER_STATION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_WEATHER_STATION,
                p_WEATHER_STATION_ID );
    END IF;
    
    IF p_SERVICE_ZONE_ID IS NOT NULL THEN
        p_SERVICE_ZONE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_SERVICE_ZONE_ID );
    END IF;
    
    IF p_SUB_STATION_ID IS NOT NULL THEN
        p_SUB_STATION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SUB_STATION,
                p_SUB_STATION_ID );
    END IF;
    
    IF p_FEEDER_ID IS NOT NULL THEN
        p_FEEDER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TX_FEEDER,
                p_FEEDER_ID );
    END IF;
    
    IF p_FEEDER_SEGMENT_ID IS NOT NULL THEN
        p_FEEDER_SEGMENT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TX_FEEDER_SEGMENT,
                p_FEEDER_SEGMENT_ID );
    END IF;
    

END SERVICE_LOCATION;
---------------------------------------------------------------------

PROCEDURE SERVICE_POINT
	(
	p_SERVICE_POINT_ID IN NUMBER,
	p_SERVICE_POINT_NAME OUT VARCHAR2,
	p_SERVICE_POINT_ALIAS OUT VARCHAR2,
	p_SERVICE_POINT_DESC OUT VARCHAR2,
	p_SERVICE_POINT_TYPE OUT VARCHAR2,
	p_TP_ID OUT NUMBER,
	p_TP_DISP OUT VARCHAR2,
	p_CA_ID OUT NUMBER,
	p_CA_DISP OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_ROLLUP_ID OUT NUMBER,
	p_SERVICE_REGION_ID OUT NUMBER,
	p_SERVICE_REGION_DISP OUT VARCHAR2,
	p_SERVICE_AREA_ID OUT NUMBER,
	p_SERVICE_AREA_DISP OUT VARCHAR2,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_LATITUDE OUT VARCHAR2,
	p_LONGITUDE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_IS_INTERCONNECT OUT NUMBER,
	p_NODE_TYPE OUT VARCHAR2,
	p_SERVICE_POINT_NERC_CODE OUT VARCHAR2,
	p_PIPELINE_ID OUT NUMBER,
	p_PIPELINE_DISP OUT VARCHAR2,
	p_MILE_MARKER OUT NUMBER
	) AS 

BEGIN

IO.GET_SERVICE_POINT
	(
    p_SERVICE_POINT_ID,
    p_SERVICE_POINT_NAME,
    p_SERVICE_POINT_ALIAS,
    p_SERVICE_POINT_DESC,
    p_SERVICE_POINT_TYPE,
    p_TP_ID,
    p_CA_ID,
    p_EDC_ID,
    p_ROLLUP_ID,
    p_SERVICE_REGION_ID,
    p_SERVICE_AREA_ID,
    p_SERVICE_ZONE_ID,
    p_TIME_ZONE,
    p_LATITUDE,
    p_LONGITUDE,
    p_EXTERNAL_IDENTIFIER,
    p_IS_INTERCONNECT,
    p_NODE_TYPE,
    p_SERVICE_POINT_NERC_CODE,
    p_PIPELINE_ID,
    p_MILE_MARKER
	);
    
    IF p_TP_ID IS NOT NULL THEN
        p_TP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TP,
                p_TP_ID );
    END IF;
    
    IF p_CA_ID IS NOT NULL THEN
        p_CA_DISP := ENTITY_NAME_FROM_IDS(EC.ED_CA,
                p_CA_ID );
    END IF;
    
    IF p_EDC_ID IS NOT NULL THEN
        p_EDC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_EDC,
                p_EDC_ID );
    END IF;
    
    IF p_SERVICE_REGION_ID IS NOT NULL THEN
        p_SERVICE_REGION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_REGION,
                p_SERVICE_REGION_ID );
    END IF;
    
    IF p_SERVICE_AREA_ID IS NOT NULL THEN
        p_SERVICE_AREA_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_AREA,
                p_SERVICE_AREA_ID );
    END IF;
    
    IF p_SERVICE_ZONE_ID IS NOT NULL THEN
        p_SERVICE_ZONE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_SERVICE_ZONE_ID );
    END IF;
    
    IF p_PIPELINE_ID IS NOT NULL THEN
        p_PIPELINE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PIPELINE,
                p_PIPELINE_ID );
    END IF;
    

END SERVICE_POINT;
---------------------------------------------------------------------

PROCEDURE SERVICE_REGION
	(
	p_SERVICE_REGION_ID IN NUMBER,
	p_SERVICE_REGION_NAME OUT VARCHAR2,
	p_SERVICE_REGION_ALIAS OUT VARCHAR2,
	p_SERVICE_REGION_DESC OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SERVICE_REGION
	(
    p_SERVICE_REGION_ID,
    p_SERVICE_REGION_NAME,
    p_SERVICE_REGION_ALIAS,
    p_SERVICE_REGION_DESC
	);
    

END SERVICE_REGION;
---------------------------------------------------------------------

PROCEDURE SERVICE_TYPE
	(
	p_SERVICE_TYPE_ID IN NUMBER,
	p_SERVICE_TYPE_NAME OUT VARCHAR2,
	p_SERVICE_TYPE_ALIAS OUT VARCHAR2,
	p_SERVICE_TYPE_DESC OUT VARCHAR2,
	p_SERVICE_TYPE_CATEGORY OUT VARCHAR2,
	p_IS_FIRM OUT NUMBER
	) AS 

BEGIN

IO.GET_SERVICE_TYPE
	(
    p_SERVICE_TYPE_ID,
    p_SERVICE_TYPE_NAME,
    p_SERVICE_TYPE_ALIAS,
    p_SERVICE_TYPE_DESC,
    p_SERVICE_TYPE_CATEGORY,
    p_IS_FIRM
	);
    

END SERVICE_TYPE;
---------------------------------------------------------------------

PROCEDURE SERVICE_ZONE
	(
	p_SERVICE_ZONE_ID IN NUMBER,
	p_SERVICE_ZONE_NAME OUT VARCHAR2,
	p_SERVICE_ZONE_ALIAS OUT VARCHAR2,
	p_SERVICE_ZONE_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_MARKET_PRICE_ID OUT NUMBER,
	p_MARKET_PRICE_DISP OUT VARCHAR2,
	p_CONTROL_AREA_ID OUT NUMBER,
	p_CONTROL_AREA_DISP OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SERVICE_ZONE
	(
    p_SERVICE_ZONE_ID,
    p_SERVICE_ZONE_NAME,
    p_SERVICE_ZONE_ALIAS,
    p_SERVICE_ZONE_DESC,
    p_EXTERNAL_IDENTIFIER,
    p_MARKET_PRICE_ID,
    p_CONTROL_AREA_ID,
    p_TIME_ZONE
	);
    
    IF p_MARKET_PRICE_ID IS NOT NULL THEN
        p_MARKET_PRICE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_MARKET_PRICE,
                p_MARKET_PRICE_ID );
    END IF;
    
    IF p_CONTROL_AREA_ID IS NOT NULL THEN
        p_CONTROL_AREA_DISP := ENTITY_NAME_FROM_IDS(EC.ED_CA,
                p_CONTROL_AREA_ID );
    END IF;
    

END SERVICE_ZONE;
---------------------------------------------------------------------

PROCEDURE SETTLEMENT_TYPE
	(
	p_SETTLEMENT_TYPE_ID IN NUMBER,
	p_SETTLEMENT_TYPE_NAME OUT VARCHAR2,
	p_SETTLEMENT_TYPE_ALIAS OUT VARCHAR2,
	p_SETTLEMENT_TYPE_DESC OUT VARCHAR2,
	p_SETTLEMENT_TYPE_ORDER OUT VARCHAR2,
	p_SERVICE_CODE OUT VARCHAR2,
	p_SCENARIO_ID OUT NUMBER,
	p_SCENARIO_DISP OUT VARCHAR2,
	p_STATEMENT_TYPE_ID OUT NUMBER,
	p_STATEMENT_TYPE_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SETTLEMENT_TYPE
	(
    p_SETTLEMENT_TYPE_ID,
    p_SETTLEMENT_TYPE_NAME,
    p_SETTLEMENT_TYPE_ALIAS,
    p_SETTLEMENT_TYPE_DESC,
    p_SETTLEMENT_TYPE_ORDER,
    p_SERVICE_CODE,
    p_SCENARIO_ID,
    p_STATEMENT_TYPE_ID
	);
    
    IF p_SCENARIO_ID IS NOT NULL THEN
        p_SCENARIO_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SCENARIO,
                p_SCENARIO_ID );
    END IF;
    
    IF p_STATEMENT_TYPE_ID IS NOT NULL THEN
        p_STATEMENT_TYPE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_STATEMENT_TYPE,
                p_STATEMENT_TYPE_ID );
    END IF;
    

END SETTLEMENT_TYPE;
---------------------------------------------------------------------

PROCEDURE STATEMENT_TYPE
	(
	p_STATEMENT_TYPE_ID IN NUMBER,
	p_STATEMENT_TYPE_NAME OUT VARCHAR2,
	p_STATEMENT_TYPE_ALIAS OUT VARCHAR2,
	p_STATEMENT_TYPE_DESC OUT VARCHAR2,
	p_STATEMENT_TYPE_ORDER OUT NUMBER
	) AS 

BEGIN

IO.GET_STATEMENT_TYPE
	(
    p_STATEMENT_TYPE_ID,
    p_STATEMENT_TYPE_NAME,
    p_STATEMENT_TYPE_ALIAS,
    p_STATEMENT_TYPE_DESC,
    p_STATEMENT_TYPE_ORDER
	);
    

END STATEMENT_TYPE;
---------------------------------------------------------------------

PROCEDURE SUB_STATION
	(
	p_SUB_STATION_ID IN NUMBER,
	p_SUB_STATION_NAME OUT VARCHAR2,
	p_SUB_STATION_ALIAS OUT VARCHAR2,
	p_SUB_STATION_DESC OUT VARCHAR2,
	p_SUB_STATION_TYPE OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SUB_STATION
	(
    p_SUB_STATION_ID,
    p_SUB_STATION_NAME,
    p_SUB_STATION_ALIAS,
    p_SUB_STATION_DESC,
    p_SUB_STATION_TYPE,
    p_EXTERNAL_IDENTIFIER,
    p_BEGIN_DATE,
    p_END_DATE,
    p_SERVICE_ZONE_ID
	);
    
    IF p_SERVICE_ZONE_ID IS NOT NULL THEN
        p_SERVICE_ZONE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_SERVICE_ZONE_ID );
    END IF;
    

END SUB_STATION;
---------------------------------------------------------------------

PROCEDURE SUB_STATION_METER
	(
	p_METER_ID IN NUMBER,
	p_METER_NAME OUT VARCHAR2,
	p_METER_ALIAS OUT VARCHAR2,
	p_METER_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_METER_TYPE OUT VARCHAR2,
	p_METER_SUB_TYPE OUT VARCHAR2,
	p_METER_CATEGORY OUT VARCHAR2,
	p_REF_METER_ID OUT NUMBER,
	p_REF_METER_DISP OUT VARCHAR2,
	p_SUB_STATION_ID OUT NUMBER,
	p_SUB_STATION_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_TRUNCATE_CARRY_FWD OUT NUMBER,
	p_QUALITY_RATING OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SUB_STATION_METER
	(
    p_METER_ID,
    p_METER_NAME,
    p_METER_ALIAS,
    p_METER_DESC,
    p_EXTERNAL_IDENTIFIER,
    p_BEGIN_DATE,
    p_END_DATE,
    p_METER_TYPE,
    p_METER_SUB_TYPE,
    p_METER_CATEGORY,
    p_REF_METER_ID,
    p_SUB_STATION_ID,
    p_SERVICE_POINT_ID,
    p_TRUNCATE_CARRY_FWD,
    p_QUALITY_RATING
	);
    
    IF p_REF_METER_ID IS NOT NULL THEN
        p_REF_METER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SUB_STATION_METER,
                p_REF_METER_ID );
    END IF;
    
    IF p_SUB_STATION_ID IS NOT NULL THEN
        p_SUB_STATION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SUB_STATION,
                p_SUB_STATION_ID );
    END IF;
    
    IF p_SERVICE_POINT_ID IS NOT NULL THEN
        p_SERVICE_POINT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SERVICE_POINT_ID );
    END IF;
    

END SUB_STATION_METER;
---------------------------------------------------------------------

PROCEDURE SUB_STATION_METER_POINT
	(
	p_METER_POINT_ID IN NUMBER,
	p_METER_POINT_NAME OUT VARCHAR2,
	p_METER_POINT_ALIAS OUT VARCHAR2,
	p_METER_POINT_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_METER_POINT_CATEGORY OUT VARCHAR2,
	p_RETAIL_METER_ID OUT NUMBER,
	p_RETAIL_METER_DISP OUT VARCHAR2,
	p_SUB_STATION_METER_ID OUT NUMBER,
	p_SUB_STATION_METER_DISP OUT VARCHAR2,
	p_METER_POINT_INTERVAL OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_UOM OUT VARCHAR2,
	p_OPERATION_CODE OUT VARCHAR2,
	p_DIRECTION OUT VARCHAR2,
	p_TOLERANCE OUT NUMBER
	) AS 

BEGIN

IO.GET_SUB_STATION_METER_POINT
	(
    p_METER_POINT_ID,
    p_METER_POINT_NAME,
    p_METER_POINT_ALIAS,
    p_METER_POINT_DESC,
    p_EXTERNAL_IDENTIFIER,
    p_METER_POINT_CATEGORY,
    p_RETAIL_METER_ID,
    p_SUB_STATION_METER_ID,
    p_METER_POINT_INTERVAL,
    p_BEGIN_DATE,
    p_END_DATE,
    p_UOM,
    p_OPERATION_CODE,
    p_DIRECTION,
    p_TOLERANCE
	);
    
    IF p_RETAIL_METER_ID IS NOT NULL THEN
        p_RETAIL_METER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_METER,
                p_RETAIL_METER_ID );
    END IF;
    
    IF p_SUB_STATION_METER_ID IS NOT NULL THEN
        p_SUB_STATION_METER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SUB_STATION_METER,
                p_SUB_STATION_METER_ID );
    END IF;
    

END SUB_STATION_METER_POINT;
---------------------------------------------------------------------

PROCEDURE SUPPLY_RESOURCE
	(
	p_RESOURCE_ID IN NUMBER,
	p_RESOURCE_NAME OUT VARCHAR2,
	p_RESOURCE_ALIAS OUT VARCHAR2,
	p_RESOURCE_DESC OUT VARCHAR2,
	p_RESOURCE_GROUP_ID OUT NUMBER,
	p_RESOURCE_GROUP_DISP OUT VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER,
	p_SERVICE_POINT_DISP OUT VARCHAR2,
	p_HEAT_RATE_CURVE_ID OUT NUMBER,
	p_HEAT_RATE_CURVE_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SUPPLY_RESOURCE
	(
    p_RESOURCE_ID,
    p_RESOURCE_NAME,
    p_RESOURCE_ALIAS,
    p_RESOURCE_DESC,
    p_RESOURCE_GROUP_ID,
    p_SERVICE_POINT_ID,
    p_HEAT_RATE_CURVE_ID
	);
    
    IF p_RESOURCE_GROUP_ID IS NOT NULL THEN
        p_RESOURCE_GROUP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_RESOURCE_GROUP,
                p_RESOURCE_GROUP_ID );
    END IF;
    
    IF p_SERVICE_POINT_ID IS NOT NULL THEN
        p_SERVICE_POINT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SERVICE_POINT_ID );
    END IF;
    
    IF p_HEAT_RATE_CURVE_ID IS NOT NULL THEN
        p_HEAT_RATE_CURVE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_HEAT_RATE_CURVE,
                p_HEAT_RATE_CURVE_ID );
    END IF;
    

END SUPPLY_RESOURCE;
---------------------------------------------------------------------

PROCEDURE SYSTEM_ACTION
	(
	p_ACTION_ID IN NUMBER,
	p_ACTION_NAME OUT VARCHAR2,
	p_ACTION_ALIAS OUT VARCHAR2,
	p_ACTION_DESC OUT VARCHAR2,
	p_ENTITY_DOMAIN_ID OUT NUMBER,
	p_ENTITY_DOMAIN_DISP OUT VARCHAR2,
	p_MODULE OUT VARCHAR2,
	p_ACTION_TYPE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SYSTEM_ACTION
	(
    p_ACTION_ID,
    p_ACTION_NAME,
    p_ACTION_ALIAS,
    p_ACTION_DESC,
    p_ENTITY_DOMAIN_ID,
    p_MODULE,
    p_ACTION_TYPE
	);
    
    IF p_ENTITY_DOMAIN_ID IS NOT NULL THEN
        p_ENTITY_DOMAIN_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ENTITY_DOMAIN,
                p_ENTITY_DOMAIN_ID );
    END IF;
    

END SYSTEM_ACTION;
---------------------------------------------------------------------

PROCEDURE SYSTEM_ALERT
	(
	p_ALERT_ID IN NUMBER,
	p_ALERT_NAME OUT VARCHAR2,
	p_ALERT_ALIAS OUT VARCHAR2,
	p_ALERT_DESC OUT VARCHAR2,
	p_ALERT_TYPE OUT VARCHAR2,
	p_ALERT_CATEGORY OUT VARCHAR2,
	p_ALERT_DURATION OUT NUMBER,
	p_IS_EMAIL_ALERT OUT NUMBER,
	p_IS_EMAIL_FIRST_ACK OUT NUMBER,
	p_ALERT_EMAIL_PRIORITY OUT NUMBER,
	p_ALERT_EMAIL_SUBJECT OUT VARCHAR2,
	p_ACK_EMAIL_PRIORITY OUT NUMBER,
	p_ACK_EMAIL_SUBJECT OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SYSTEM_ALERT
	(
    p_ALERT_ID,
    p_ALERT_NAME,
    p_ALERT_ALIAS,
    p_ALERT_DESC,
    p_ALERT_TYPE,
    p_ALERT_CATEGORY,
    p_ALERT_DURATION,
    p_IS_EMAIL_ALERT,
    p_IS_EMAIL_FIRST_ACK,
    p_ALERT_EMAIL_PRIORITY,
    p_ALERT_EMAIL_SUBJECT,
    p_ACK_EMAIL_PRIORITY,
    p_ACK_EMAIL_SUBJECT
	);
    

END SYSTEM_ALERT;
---------------------------------------------------------------------

PROCEDURE SYSTEM_EVENT
	(
	p_EVENT_ID IN NUMBER,
	p_EVENT_NAME OUT VARCHAR2,
	p_EVENT_ALIAS OUT VARCHAR2,
	p_EVENT_DESC OUT VARCHAR2,
	p_EVENT_TYPE OUT VARCHAR2,
	p_EVENT_CATEGORY OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SYSTEM_EVENT
	(
    p_EVENT_ID,
    p_EVENT_NAME,
    p_EVENT_ALIAS,
    p_EVENT_DESC,
    p_EVENT_TYPE,
    p_EVENT_CATEGORY
	);
    

END SYSTEM_EVENT;
---------------------------------------------------------------------

PROCEDURE SYSTEM_LOAD
	(
	p_SYSTEM_LOAD_ID IN NUMBER,
	p_SYSTEM_LOAD_NAME OUT VARCHAR2,
	p_SYSTEM_LOAD_ALIAS OUT VARCHAR2,
	p_SYSTEM_LOAD_DESC OUT VARCHAR2,
	p_SYSTEM_LOAD_INTERVAL OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SYSTEM_LOAD
	(
    p_SYSTEM_LOAD_ID,
    p_SYSTEM_LOAD_NAME,
    p_SYSTEM_LOAD_ALIAS,
    p_SYSTEM_LOAD_DESC,
    p_SYSTEM_LOAD_INTERVAL
	);
    

END SYSTEM_LOAD;
---------------------------------------------------------------------

PROCEDURE SYSTEM_REALM
	(
	p_REALM_ID IN NUMBER,
	p_REALM_NAME OUT VARCHAR2,
	p_REALM_ALIAS OUT VARCHAR2,
	p_REALM_DESC OUT VARCHAR2,
	p_ENTITY_DOMAIN_ID OUT NUMBER,
	p_ENTITY_DOMAIN_DISP OUT VARCHAR2,
	p_REALM_CALC_TYPE OUT NUMBER,
	p_CUSTOM_QUERY OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SYSTEM_REALM
	(
    p_REALM_ID,
    p_REALM_NAME,
    p_REALM_ALIAS,
    p_REALM_DESC,
    p_ENTITY_DOMAIN_ID,
    p_REALM_CALC_TYPE,
    p_CUSTOM_QUERY
	);
    
    IF p_ENTITY_DOMAIN_ID IS NOT NULL THEN
        p_ENTITY_DOMAIN_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ENTITY_DOMAIN,
                p_ENTITY_DOMAIN_ID );
    END IF;
    

END SYSTEM_REALM;
---------------------------------------------------------------------

PROCEDURE SYSTEM_TABLE
	(
	p_TABLE_ID IN NUMBER,
	p_TABLE_NAME OUT VARCHAR2,
	p_TABLE_ALIAS OUT VARCHAR2,
	p_TABLE_DESC OUT VARCHAR2,
	p_DB_TABLE_NAME OUT VARCHAR2,
	p_MIRROR_TABLE_NAME OUT VARCHAR2,
	p_ENTITY_DOMAIN_ID OUT NUMBER,
	p_ENTITY_DOMAIN_DISP OUT VARCHAR2,
	p_KEY_CONSTRAINT_NAME OUT VARCHAR2,
	p_ENTITY_ID_COLUMN_NAME OUT VARCHAR2,
	p_DATE1_COLUMN_NAME OUT VARCHAR2,
	p_DATE2_COLUMN_NAME OUT VARCHAR2,
	p_IS_REACTIVE OUT NUMBER,
	p_LOCK_SUMMARY_TABLE_NAME OUT VARCHAR2
	) AS 

BEGIN

IO.GET_SYSTEM_TABLE
	(
    p_TABLE_ID,
    p_TABLE_NAME,
    p_TABLE_ALIAS,
    p_TABLE_DESC,
    p_DB_TABLE_NAME,
    p_MIRROR_TABLE_NAME,
    p_ENTITY_DOMAIN_ID,
    p_KEY_CONSTRAINT_NAME,
    p_ENTITY_ID_COLUMN_NAME,
    p_DATE1_COLUMN_NAME,
    p_DATE2_COLUMN_NAME,
    p_IS_REACTIVE,
    p_LOCK_SUMMARY_TABLE_NAME
	);
    
    IF p_ENTITY_DOMAIN_ID IS NOT NULL THEN
        p_ENTITY_DOMAIN_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ENTITY_DOMAIN,
                p_ENTITY_DOMAIN_ID );
    END IF;
    

END SYSTEM_TABLE;
---------------------------------------------------------------------

PROCEDURE TEMPLATE
	(
	p_TEMPLATE_ID IN NUMBER,
	p_TEMPLATE_NAME OUT VARCHAR2,
	p_TEMPLATE_ALIAS OUT VARCHAR2,
	p_TEMPLATE_DESC OUT VARCHAR2,
	p_IS_DAY_TYPE OUT NUMBER,
	p_IS_DST_OBSERVANT OUT NUMBER,
	p_VALIDATION_MESSAGE OUT VARCHAR2
	) AS 

BEGIN

IO.GET_TEMPLATE
	(
    p_TEMPLATE_ID,
    p_TEMPLATE_NAME,
    p_TEMPLATE_ALIAS,
    p_TEMPLATE_DESC,
    p_IS_DAY_TYPE,
    p_IS_DST_OBSERVANT,
    p_VALIDATION_MESSAGE
	);
    

END TEMPLATE;
---------------------------------------------------------------------

PROCEDURE TP
	(
	p_TP_ID IN NUMBER,
	p_TP_NAME OUT VARCHAR2,
	p_TP_ALIAS OUT VARCHAR2,
	p_TP_DESC OUT VARCHAR2,
	p_TP_NERC_CODE OUT VARCHAR2,
	p_TP_STATUS OUT VARCHAR2,
	p_TP_DUNS_NUMBER OUT VARCHAR2,
	p_OASIS_NODE_ID OUT NUMBER,
	p_OASIS_NODE_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_TP
	(
    p_TP_ID,
    p_TP_NAME,
    p_TP_ALIAS,
    p_TP_DESC,
    p_TP_NERC_CODE,
    p_TP_STATUS,
    p_TP_DUNS_NUMBER,
    p_OASIS_NODE_ID
	);
    
    IF p_OASIS_NODE_ID IS NOT NULL THEN
        p_OASIS_NODE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_OASIS_NODE,
                p_OASIS_NODE_ID );
    END IF;
    

END TP;
---------------------------------------------------------------------

PROCEDURE TRANSACTION
	(
	p_TRANSACTION_ID IN NUMBER,
	p_TRANSACTION_NAME OUT VARCHAR2,
	p_TRANSACTION_ALIAS OUT VARCHAR2,
	p_TRANSACTION_DESC OUT VARCHAR2,
	p_TRANSACTION_TYPE OUT VARCHAR2,
	p_TRANSACTION_CODE OUT VARCHAR2,
	p_TRANSACTION_IDENTIFIER OUT VARCHAR2,
	p_IS_FIRM OUT NUMBER,
	p_IS_IMPORT_SCHEDULE OUT NUMBER,
	p_IS_EXPORT_SCHEDULE OUT NUMBER,
	p_IS_BALANCE_TRANSACTION OUT NUMBER,
	p_IS_BID_OFFER OUT NUMBER,
	p_IS_EXCLUDE_FROM_POSITION OUT NUMBER,
	p_IS_IMPORT_EXPORT OUT NUMBER,
	p_IS_DISPATCHABLE OUT NUMBER,
	p_TRANSACTION_INTERVAL OUT VARCHAR2,
	p_EXTERNAL_INTERVAL OUT VARCHAR2,
	p_ETAG_CODE OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_PURCHASER_ID OUT NUMBER,
	p_PURCHASER_DISP OUT VARCHAR2,
	p_SELLER_ID OUT NUMBER,
	p_SELLER_DISP OUT VARCHAR2,
	p_CONTRACT_ID OUT NUMBER,
	p_CONTRACT_DISP OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_POR_ID OUT NUMBER,
	p_POR_DISP OUT VARCHAR2,
	p_POD_ID OUT NUMBER,
	p_POD_DISP OUT VARCHAR2,
	p_COMMODITY_ID OUT NUMBER,
	p_COMMODITY_DISP OUT VARCHAR2,
	p_SERVICE_TYPE_ID OUT NUMBER,
	p_SERVICE_TYPE_DISP OUT VARCHAR2,
	p_TX_TRANSACTION_ID OUT NUMBER,
	p_TX_TRANSACTION_DISP OUT VARCHAR2,
	p_PATH_ID OUT NUMBER,
	p_PATH_DISP OUT VARCHAR2,
	p_LINK_TRANSACTION_ID OUT NUMBER,
	p_LINK_TRANSACTION_DISP OUT VARCHAR2,
	p_EDC_ID OUT NUMBER,
	p_EDC_DISP OUT VARCHAR2,
	p_PSE_ID OUT NUMBER,
	p_PSE_DISP OUT VARCHAR2,
	p_ESP_ID OUT NUMBER,
	p_ESP_DISP OUT VARCHAR2,
	p_POOL_ID OUT NUMBER,
	p_POOL_DISP OUT VARCHAR2,
	p_SCHEDULE_GROUP_ID OUT NUMBER,
	p_SCHEDULE_GROUP_DISP OUT VARCHAR2,
	p_MARKET_PRICE_ID OUT NUMBER,
	p_MARKET_PRICE_DISP OUT VARCHAR2,
	p_ZOR_ID OUT NUMBER,
	p_ZOR_DISP OUT VARCHAR2,
	p_ZOD_ID OUT NUMBER,
	p_ZOD_DISP OUT VARCHAR2,
	p_SOURCE_ID OUT NUMBER,
	p_SOURCE_DISP OUT VARCHAR2,
	p_SINK_ID OUT NUMBER,
	p_SINK_DISP OUT VARCHAR2,
	p_RESOURCE_ID OUT NUMBER,
	p_RESOURCE_DISP OUT VARCHAR2,
	p_AGREEMENT_TYPE OUT VARCHAR2,
	p_APPROVAL_TYPE OUT VARCHAR2,
	p_LOSS_OPTION OUT VARCHAR2,
	p_TRAIT_CATEGORY OUT VARCHAR2,
	p_TP_ID OUT NUMBER,
	p_TP_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_TRANSACTION
	(
    p_TRANSACTION_ID,
    p_TRANSACTION_NAME,
    p_TRANSACTION_ALIAS,
    p_TRANSACTION_DESC,
    p_TRANSACTION_TYPE,
    p_TRANSACTION_CODE,
    p_TRANSACTION_IDENTIFIER,
    p_IS_FIRM,
    p_IS_IMPORT_SCHEDULE,
    p_IS_EXPORT_SCHEDULE,
    p_IS_BALANCE_TRANSACTION,
    p_IS_BID_OFFER,
    p_IS_EXCLUDE_FROM_POSITION,
    p_IS_IMPORT_EXPORT,
    p_IS_DISPATCHABLE,
    p_TRANSACTION_INTERVAL,
    p_EXTERNAL_INTERVAL,
    p_ETAG_CODE,
    p_BEGIN_DATE,
    p_END_DATE,
    p_PURCHASER_ID,
    p_SELLER_ID,
    p_CONTRACT_ID,
    p_SC_ID,
    p_POR_ID,
    p_POD_ID,
    p_COMMODITY_ID,
    p_SERVICE_TYPE_ID,
    p_TX_TRANSACTION_ID,
    p_PATH_ID,
    p_LINK_TRANSACTION_ID,
    p_EDC_ID,
    p_PSE_ID,
    p_ESP_ID,
    p_POOL_ID,
    p_SCHEDULE_GROUP_ID,
    p_MARKET_PRICE_ID,
    p_ZOR_ID,
    p_ZOD_ID,
    p_SOURCE_ID,
    p_SINK_ID,
    p_RESOURCE_ID,
    p_AGREEMENT_TYPE,
    p_APPROVAL_TYPE,
    p_LOSS_OPTION,
    p_TRAIT_CATEGORY,
    p_TP_ID
	);
    
    IF p_PURCHASER_ID IS NOT NULL THEN
        p_PURCHASER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PSE,
                p_PURCHASER_ID );
    END IF;
    
    IF p_SELLER_ID IS NOT NULL THEN
        p_SELLER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PSE,
                p_SELLER_ID );
    END IF;
    
    IF p_CONTRACT_ID IS NOT NULL THEN
        p_CONTRACT_DISP := ENTITY_NAME_FROM_IDS(EC.ED_INTERCHANGE_CONTRACT,
                p_CONTRACT_ID );
    END IF;
    
    IF p_SC_ID IS NOT NULL THEN
        p_SC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SC,
                p_SC_ID );
    END IF;
    
    IF p_POR_ID IS NOT NULL THEN
        p_POR_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_POR_ID );
    END IF;
    
    IF p_POD_ID IS NOT NULL THEN
        p_POD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_POD_ID );
    END IF;
    
    IF p_COMMODITY_ID IS NOT NULL THEN
        p_COMMODITY_DISP := ENTITY_NAME_FROM_IDS(EC.ED_IT_COMMODITY,
                p_COMMODITY_ID );
    END IF;
    
    IF p_SERVICE_TYPE_ID IS NOT NULL THEN
        p_SERVICE_TYPE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_TYPE,
                p_SERVICE_TYPE_ID );
    END IF;
    
    IF p_TX_TRANSACTION_ID IS NOT NULL THEN
        p_TX_TRANSACTION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TRANSACTION,
                p_TX_TRANSACTION_ID );
    END IF;
    
    IF p_PATH_ID IS NOT NULL THEN
        p_PATH_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PATH,
                p_PATH_ID );
    END IF;
    
    IF p_LINK_TRANSACTION_ID IS NOT NULL THEN
        p_LINK_TRANSACTION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TRANSACTION,
                p_LINK_TRANSACTION_ID );
    END IF;
    
    IF p_EDC_ID IS NOT NULL THEN
        p_EDC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_EDC,
                p_EDC_ID );
    END IF;
    
    IF p_PSE_ID IS NOT NULL THEN
        p_PSE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PSE,
                p_PSE_ID );
    END IF;
    
    IF p_ESP_ID IS NOT NULL THEN
        p_ESP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_ESP,
                p_ESP_ID );
    END IF;
    
    IF p_POOL_ID IS NOT NULL THEN
        p_POOL_DISP := ENTITY_NAME_FROM_IDS(EC.ED_POOL,
                p_POOL_ID );
    END IF;
    
    IF p_SCHEDULE_GROUP_ID IS NOT NULL THEN
        p_SCHEDULE_GROUP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SCHEDULE_GROUP,
                p_SCHEDULE_GROUP_ID );
    END IF;
    
    IF p_MARKET_PRICE_ID IS NOT NULL THEN
        p_MARKET_PRICE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_MARKET_PRICE,
                p_MARKET_PRICE_ID );
    END IF;
    
    IF p_ZOR_ID IS NOT NULL THEN
        p_ZOR_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_ZOR_ID );
    END IF;
    
    IF p_ZOD_ID IS NOT NULL THEN
        p_ZOD_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_ZOD_ID );
    END IF;
    
    IF p_SOURCE_ID IS NOT NULL THEN
        p_SOURCE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SOURCE_ID );
    END IF;
    
    IF p_SINK_ID IS NOT NULL THEN
        p_SINK_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_POINT,
                p_SINK_ID );
    END IF;
    
    IF p_RESOURCE_ID IS NOT NULL THEN
        p_RESOURCE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SUPPLY_RESOURCE,
                p_RESOURCE_ID );
    END IF;
    
    IF p_TP_ID IS NOT NULL THEN
        p_TP_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TP,
                p_TP_ID );
    END IF;
    

END TRANSACTION;
---------------------------------------------------------------------

PROCEDURE TRANSACTION_TRAIT_GROUP
	(
	p_TRAIT_GROUP_ID IN NUMBER,
	p_TRAIT_GROUP_NAME OUT VARCHAR2,
	p_TRAIT_GROUP_ALIAS OUT VARCHAR2,
	p_TRAIT_GROUP_DESC OUT VARCHAR2,
	p_TRAIT_GROUP_INTERVAL OUT VARCHAR2,
	p_TRAIT_GROUP_TYPE OUT VARCHAR2,
	p_SC_ID OUT NUMBER,
	p_SC_DISP OUT VARCHAR2,
	p_TRAIT_CATEGORY OUT VARCHAR2,
	p_DISPLAY_NAME OUT VARCHAR2,
	p_DISPLAY_ORDER OUT NUMBER,
	p_IS_SERIES OUT NUMBER,
	p_IS_SPARSE OUT NUMBER,
	p_IS_STATEMENT_TYPE_SPECIFIC OUT NUMBER,
	p_DEFAULT_NUMBER_OF_SETS OUT NUMBER
	) AS 

BEGIN

IO.GET_TRANSACTION_TRAIT_GROUP
	(
    p_TRAIT_GROUP_ID,
    p_TRAIT_GROUP_NAME,
    p_TRAIT_GROUP_ALIAS,
    p_TRAIT_GROUP_DESC,
    p_TRAIT_GROUP_INTERVAL,
    p_TRAIT_GROUP_TYPE,
    p_SC_ID,
    p_TRAIT_CATEGORY,
    p_DISPLAY_NAME,
    p_DISPLAY_ORDER,
    p_IS_SERIES,
    p_IS_SPARSE,
    p_IS_STATEMENT_TYPE_SPECIFIC,
    p_DEFAULT_NUMBER_OF_SETS
	);
    
    IF p_SC_ID IS NOT NULL THEN
        p_SC_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SC,
                p_SC_ID );
    END IF;
    

END TRANSACTION_TRAIT_GROUP;
---------------------------------------------------------------------

PROCEDURE TX_FEEDER
	(
	p_FEEDER_ID IN NUMBER,
	p_FEEDER_NAME OUT VARCHAR2,
	p_FEEDER_ALIAS OUT VARCHAR2,
	p_FEEDER_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_SUB_STATION_ID OUT NUMBER,
	p_SUB_STATION_DISP OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE
	) AS 

BEGIN

IO.GET_TX_FEEDER
	(
    p_FEEDER_ID,
    p_FEEDER_NAME,
    p_FEEDER_ALIAS,
    p_FEEDER_DESC,
    p_EXTERNAL_IDENTIFIER,
    p_SUB_STATION_ID,
    p_BEGIN_DATE,
    p_END_DATE
	);
    
    IF p_SUB_STATION_ID IS NOT NULL THEN
        p_SUB_STATION_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SUB_STATION,
                p_SUB_STATION_ID );
    END IF;
    

END TX_FEEDER;
---------------------------------------------------------------------

PROCEDURE TX_FEEDER_SEGMENT
	(
	p_FEEDER_SEGMENT_ID IN NUMBER,
	p_FEEDER_SEGMENT_NAME OUT VARCHAR2,
	p_FEEDER_SEGMENT_ALIAS OUT VARCHAR2,
	p_FEEDER_SEGMENT_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_FEEDER_ID OUT NUMBER,
	p_FEEDER_DISP OUT VARCHAR2,
	p_BEGIN_DATE OUT DATE,
	p_END_DATE OUT DATE,
	p_PRIORITY OUT NUMBER
	) AS 

BEGIN

IO.GET_TX_FEEDER_SEGMENT
	(
    p_FEEDER_SEGMENT_ID,
    p_FEEDER_SEGMENT_NAME,
    p_FEEDER_SEGMENT_ALIAS,
    p_FEEDER_SEGMENT_DESC,
    p_EXTERNAL_IDENTIFIER,
    p_FEEDER_ID,
    p_BEGIN_DATE,
    p_END_DATE,
    p_PRIORITY
	);
    
    IF p_FEEDER_ID IS NOT NULL THEN
        p_FEEDER_DISP := ENTITY_NAME_FROM_IDS(EC.ED_TX_FEEDER,
                p_FEEDER_ID );
    END IF;
    

END TX_FEEDER_SEGMENT;
---------------------------------------------------------------------

PROCEDURE VPP
	(
	p_VPP_ID IN NUMBER,
	p_VPP_NAME OUT VARCHAR2,
	p_VPP_ALIAS OUT VARCHAR2,
	p_VPP_DESC OUT VARCHAR2,
	p_EXTERNAL_IDENTIFIER OUT VARCHAR2,
	p_STATUS_NAME OUT VARCHAR2,
	p_SERVICE_ZONE_ID OUT NUMBER,
	p_SERVICE_ZONE_DISP OUT VARCHAR2,
	p_PROGRAM_ID OUT NUMBER,
	p_PROGRAM_DISP OUT VARCHAR2
	) AS 

BEGIN

IO.GET_VPP
	(
    p_VPP_ID,
    p_VPP_NAME,
    p_VPP_ALIAS,
    p_VPP_DESC,
    p_EXTERNAL_IDENTIFIER,
    p_STATUS_NAME,
    p_SERVICE_ZONE_ID,
    p_PROGRAM_ID
	);
    
    IF p_SERVICE_ZONE_ID IS NOT NULL THEN
        p_SERVICE_ZONE_DISP := ENTITY_NAME_FROM_IDS(EC.ED_SERVICE_ZONE,
                p_SERVICE_ZONE_ID );
    END IF;
    
    IF p_PROGRAM_ID IS NOT NULL THEN
        p_PROGRAM_DISP := ENTITY_NAME_FROM_IDS(EC.ED_PROGRAM,
                p_PROGRAM_ID );
    END IF;
    

END VPP;
---------------------------------------------------------------------

PROCEDURE WEATHER_PARAMETER
	(
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_NAME OUT VARCHAR2,
	p_PARAMETER_ALIAS OUT VARCHAR2,
	p_PARAMETER_DESC OUT VARCHAR2,
	p_PARAMETER_CATEGORY OUT VARCHAR2,
	p_PARAMETER_INTERVAL OUT VARCHAR2,
	p_PARAMETER_MEASUREMENT OUT VARCHAR2,
	p_PROJECTION_PERIOD OUT VARCHAR2,
	p_IS_COMPOSITE OUT NUMBER,
	p_IS_CALCULATE OUT NUMBER
	) AS 

BEGIN

IO.GET_WEATHER_PARAMETER
	(
    p_PARAMETER_ID,
    p_PARAMETER_NAME,
    p_PARAMETER_ALIAS,
    p_PARAMETER_DESC,
    p_PARAMETER_CATEGORY,
    p_PARAMETER_INTERVAL,
    p_PARAMETER_MEASUREMENT,
    p_PROJECTION_PERIOD,
    p_IS_COMPOSITE,
    p_IS_CALCULATE
	);
    

END WEATHER_PARAMETER;
---------------------------------------------------------------------

PROCEDURE WEATHER_STATION
	(
	p_STATION_ID IN NUMBER,
	p_STATION_NAME OUT VARCHAR2,
	p_STATION_ALIAS OUT VARCHAR2,
	p_STATION_DESC OUT VARCHAR2,
	p_TIME_ZONE OUT VARCHAR2,
	p_IS_COMPOSITE OUT NUMBER
	) AS 

BEGIN

IO.GET_WEATHER_STATION
	(
    p_STATION_ID,
    p_STATION_NAME,
    p_STATION_ALIAS,
    p_STATION_DESC,
    p_TIME_ZONE,
    p_IS_COMPOSITE
	);
    

END WEATHER_STATION;
---------------------------------------------------------------------
END EM_GET;
/
