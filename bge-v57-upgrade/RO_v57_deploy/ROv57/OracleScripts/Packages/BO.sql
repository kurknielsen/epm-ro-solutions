CREATE OR REPLACE PACKAGE BO AS
--Revision $Revision: 1.47 $

-- Bids and Offers package.
-- ****************************************************
-- *******DEPRECATED -- New code should use TG package.
-- ****************************************************

FUNCTION WHAT_VERSION RETURN VARCHAR;


PROCEDURE BID_OFFER_STATUS_REPORT
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
    p_TRANSACTION_IDS IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
    p_IS_LEAF IN NUMBER,
    p_INTERVAL OUT VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BID_OFFER_STATUS_DETAIL
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BID_OFFER_STATUS_SUMMARY
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_IDS IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL OUT VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PUT_BID_OFFER_SET
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_SET_NUMBER IN NUMBER,
	p_PRICE IN NUMBER,
	p_QUANTITY IN NUMBER,
	p_OFFER_STATUS IN CHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE FILL_BID_OFFER_SET
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_EXPIRATION_DATE IN DATE,
	p_DAY_NAME IN CHAR,
	p_BEGIN_HOUR IN NUMBER,
	p_END_HOUR IN NUMBER,
	p_PRICE_QUANTITY_PAIRS IN VARCHAR,
	p_TEMPLATE_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
  p_MESSAGE OUT VARCHAR2,
  p_CONTINUE_BUTTON_CAPTION OUT VARCHAR,
	p_CANCEL_BUTTON_CAPTION OUT VARCHAR,
	p_MUST_CANCEL_SUBMIT OUT NUMBER
	);

PROCEDURE GET_BID_OFFER_FILL_WARNING
    (
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_EXPIRATION_DATE IN DATE,
	p_DAY_NAME IN CHAR,
	p_BEGIN_HOUR IN NUMBER,
	p_END_HOUR IN NUMBER,
	p_PRICE_QUANTITY_PAIRS IN VARCHAR,
	p_TEMPLATE_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR2,
  p_CONTINUE_BUTTON_CAPTION OUT VARCHAR,
	p_CANCEL_BUTTON_CAPTION OUT VARCHAR,
	p_MUST_CANCEL_SUBMIT OUT NUMBER
  );

PROCEDURE PUT_BID_OFFER_RAMP
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_SET_NUMBER IN NUMBER,
	p_RAMP_QUANTITY IN NUMBER,
	p_RAMP_UP_RATE IN NUMBER,
	p_RAMP_DOWN_RATE IN NUMBER,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE FILL_BID_OFFER_RAMP
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_DAY_NAME IN CHAR,
	p_BEGIN_HOUR IN NUMBER,
	p_END_HOUR IN NUMBER,
	p_RAMP_RATE_TRIPLES IN VARCHAR,
	p_TEMPLATE_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_BID_OFFER_SETS_AND_RAMPS
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_REASON_FOR_CHANGE IN VARCHAR,
	p_OTHER_REASON IN VARCHAR,
	p_RESOURCE_TRAIT_VALS IN VARCHAR,
	p_PRICE_QUANTITY_PAIRS IN VARCHAR,
	p_RAMP_RATE_TRIPLES IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE COPY_BIDS_AND_OFFERS
	(
	p_SRC_TRANSACTION_ID IN NUMBER,
	p_SRC_BEGIN_DATE IN DATE,
	p_SRC_END_DATE IN DATE,
	p_SRC_STATE IN NUMBER,
	p_TRG_TRANSACTION_ID IN NUMBER,
	p_TRG_BEGIN_DATE IN DATE,
	p_TRG_END_DATE IN DATE,
	p_TRG_STATE IN NUMBER,
	p_TRG_AS_OF_DATE IN DATE,
	p_TRG_DELETE IN NUMBER,
	p_COPY_BID_OFFER_AMOUNT IN NUMBER,
	p_COPY_BID_OFFER_PRICE IN NUMBER,
	p_STATUS OUT NUMBER
	);


PROCEDURE BID_OFFER_TRAITS
    (
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_DATE_OFFSET IN NUMBER :=0,
	p_INTERVAL IN VARCHAR2,
	p_TIME_ZONE IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PUT_BID_OFFER_TRAIT
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_RESOURCE_TRAIT_ID IN NUMBER,
	p_TRAIT_VAL IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE BID_OFFER_STATUS_ACCEPT
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_IDS IN VARCHAR2,
	p_SCHEDULE_DATE IN DATE,
	p_USER_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_BID_OFFER_STATUS_REASON
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_REASON_FOR_CHANGE IN VARCHAR,
	p_OTHER_REASON IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE BID_OFFER_TRANSACTIONS_BY_COM
    (
	 p_TRANSACTION_ID IN NUMBER,
	 p_STATUS OUT NUMBER,
	 p_CURSOR IN OUT GA.REFCURSOR
	 );

FUNCTION GET_BID_OFFER_SCHEDULE_DATE
    (
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR
	) RETURN DATE;


g_MODULE_NAME VARCHAR(16) := 'SCHEDULING';
g_CUSTOM_NAME VARCHAR(16) := '<Custom>';
g_CUSTOM_ID NUMBER(2) := -1;
g_NO_ENTITY_ID NUMBER(2) := -9;
g_SECOND NUMBER(6,5) :=  .00001;

END BO;
/
CREATE OR REPLACE PACKAGE BODY BO AS
-- ****************************************************
-- *******DEPRECATED -- New code should use TG package.
-- ****************************************************
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.47 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
FUNCTION GET_BID_OFFER_INTERVAL
    (
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_ABBREV IN BOOLEAN := TRUE
	) RETURN VARCHAR IS
v_TRANSACTION INTERCHANGE_TRANSACTION%ROWTYPE;
v_INTERVAL VARCHAR2(16);
--RETURNS THE INTERVAL ABBREVIATION ASSOCIATED WITH A BID_OFFER.
BEGIN

	SELECT * INTO v_TRANSACTION
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_TRANSACTION_ID;

	v_INTERVAL := MM.GET_BID_OFFER_INTERVAL(v_TRANSACTION);
	IF NVL(v_INTERVAL,'?') = '?' THEN
		v_INTERVAL := v_TRANSACTION.TRANSACTION_INTERVAL;
	END IF;

	IF p_ABBREV THEN
		RETURN GET_INTERVAL_ABBREVIATION(v_INTERVAL);
	ELSE
	    RETURN v_INTERVAL;
	END IF;

END GET_BID_OFFER_INTERVAL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_RESOURCE_TRAIT_INTERVAL
    (
	p_RESOURCE_TRAIT_ID IN NUMBER
	) RETURN VARCHAR IS
v_INTERVAL VARCHAR2(16);
--RETURNS THE INTERVAL ABBREVIATION ASSOCIATED WITH A RESOURCE_TRAIT.
BEGIN

	SELECT GET_INTERVAL_ABBREVIATION(TRAIT_GROUP_INTERVAL)
	INTO v_INTERVAL
	FROM TRANSACTION_TRAIT_GROUP
	WHERE TRAIT_GROUP_ID = p_RESOURCE_TRAIT_ID;

    RETURN v_INTERVAL;

END GET_RESOURCE_TRAIT_INTERVAL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_TRANSACTION_INTERVAL
    (
	p_TRANSACTION_ID IN NUMBER
	) RETURN VARCHAR IS
v_INTERVAL VARCHAR2(16);
--RETURNS THE INTERVAL ABBREVIATION ASSOCIATED WITH A TRANSACTION.
BEGIN

	SELECT GET_INTERVAL_ABBREVIATION(TRANSACTION_INTERVAL)
	INTO v_INTERVAL
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_TRANSACTION_ID;

    RETURN v_INTERVAL;

END GET_TRANSACTION_INTERVAL;
---------------------------------------------------------------------------------------------------
FUNCTION GET_SCHEDULING_DATE
    (
	p_DATA_INTERVAL IN VARCHAR2,
	p_SCHEDULE_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR
	) RETURN DATE IS
--RETURNS THE SAME DATE, SHIFTED ACCORDING TO TIME ZONE AND INTERVAL.

v_SCHEDULE_DATE DATE;
BEGIN

	IF INTERVAL_IS_ATLEAST_DAILY(p_DATA_INTERVAL) THEN
		v_SCHEDULE_DATE := TRUNC(p_SCHEDULE_DATE) + g_SECOND;
	ELSE
		v_SCHEDULE_DATE := TO_CUT(p_SCHEDULE_DATE, p_TIME_ZONE);
	END IF;


    RETURN v_SCHEDULE_DATE;

END GET_SCHEDULING_DATE;
---------------------------------------------------------------------------------------------------
FUNCTION GET_BID_OFFER_SCHEDULE_DATE
    (
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR
	) RETURN DATE IS
--RETURNS THE SAME DATE, SHIFTED ACCORDING TO TIME ZONE AND INTERVAL.

v_DATA_INTERVAL VARCHAR2(16) := GET_BID_OFFER_INTERVAL(p_TRANSACTION_ID,p_BID_OFFER_ID);
BEGIN

    RETURN GET_SCHEDULING_DATE(v_DATA_INTERVAL, p_SCHEDULE_DATE, p_TIME_ZONE);

END GET_BID_OFFER_SCHEDULE_DATE;
---------------------------------------------------------------------------------------------------
PROCEDURE NULL_CURSOR
    (
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

BEGIN

	OPEN p_CURSOR FOR
		SELECT NULL FROM DUAL;

END NULL_CURSOR;
-------------------------------------------------------------------------------------------------
PROCEDURE GET_BID_OFFER_COMPOSITE
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_BID_OFFER_INTERVAL IN VARCHAR2,
	p_TIME_ZONE IN VARCHAR2,
	p_AS_OF_DATE IN DATE,
	p_BID_OFFER_COMPOSITE IN OUT NOCOPY BID_OFFER_COMPOSITE_TABLE
	) AS

v_AS_OF_DATE DATE;
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_BO_INTERVAL_NUM NUMBER(2) := GET_INTERVAL_NUMBER(p_BID_OFFER_INTERVAL);
v_TXN_INTERVAL VARCHAR2(16) := GET_TRANSACTION_INTERVAL(p_TRANSACTION_ID);
v_BO_INTERVAL_TYPE NUMBER(1) := GET_DATA_INTERVAL_TYPE(p_BID_OFFER_INTERVAL);

BEGIN

	UT.CUT_DATE_RANGE(v_BO_INTERVAL_TYPE, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, GET_INTERVAL_ABBREVIATION(p_BID_OFFER_INTERVAL), v_BEGIN_DATE, v_END_DATE);

-- 	IF GA.VERSION_SCHEDULE THEN
-- 		v_AS_OF_DATE := CORRECTED_AS_OF_DATE(p_AS_OF_DATE);
-- 		SELECT BID_OFFER_COMPOSITE_TYPE(B.NO_ROLLUP_DATE, A.AMOUNT, A.PRICE, NULL, C.REASON_FOR_CHANGE, C.OTHER_REASON, C.PROCESS_MESSAGE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
-- 		BULK COLLECT INTO p_BID_OFFER_COMPOSITE
-- 		FROM IT_SCHEDULE A, SYSTEM_DATE_TIME B, BID_OFFER_STATUS C
-- 		WHERE B.TIME_ZONE = p_TIME_ZONE
-- 			AND B.DATA_INTERVAL_TYPE = GA.DEFAULT_MODEL
-- 			AND B.DAY_TYPE = '1'
-- 			AND B.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
-- 			AND	A.TRANSACTION_ID(+) = p_TRANSACTION_ID
-- 			AND A.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
-- 			AND A.SCHEDULE_STATE(+) = p_SCHEDULE_STATE
-- 			AND A.SCHEDULE_DATE(+) = B.CUT_DATE
-- 			AND A.AS_OF_DATE =
-- 				(SELECT MAX(AS_OF_DATE)
-- 				FROM IT_SCHEDULE
-- 				WHERE TRANSACTION_ID = A.TRANSACTION_ID
-- 					AND SCHEDULE_TYPE = A.SCHEDULE_TYPE
-- 					AND SCHEDULE_STATE = A.SCHEDULE_STATE
-- 					AND SCHEDULE_DATE = A.SCHEDULE_DATE
-- 					AND AS_OF_DATE <= v_AS_OF_DATE)
-- 			AND C.BID_OFFER_ID(+) = p_BID_OFFER_ID
-- 			AND C.TRANSACTION_ID(+) = p_TRANSACTION_ID
-- 			AND C.SCHEDULE_DATE(+) = B.CUT_DATE;
-- 	ELSE

      v_AS_OF_DATE := LOW_DATE;
  		IF INTERVAL_IS_ATLEAST_DAILY(v_TXN_INTERVAL) = INTERVAL_IS_ATLEAST_DAILY(p_BID_OFFER_INTERVAL) AND NOT GA.VERSION_SCHEDULE THEN
  			SELECT BID_OFFER_COMPOSITE_TYPE(B.CUT_DATE, E.AMOUNT, E.PRICE, NULL, C.REASON_FOR_CHANGE, C.OTHER_REASON, C.PROCESS_MESSAGE,
            NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
            NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
            NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
            NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
            NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
            NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
            NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
            NULL, NULL, NULL, NULL, NULL)
            BULK COLLECT INTO p_BID_OFFER_COMPOSITE
  			FROM SYSTEM_DATE_TIME B, BID_OFFER_STATUS C, IT_SCHEDULE E
  			WHERE B.TIME_ZONE = p_TIME_ZONE
  				AND B.DATA_INTERVAL_TYPE = v_BO_INTERVAL_TYPE
  				AND B.DAY_TYPE = '1'
  				AND B.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
  				AND B.MINIMUM_INTERVAL_NUMBER >= v_BO_INTERVAL_NUM
  				AND C.TRANSACTION_ID(+) = p_TRANSACTION_ID
  				AND C.SCHEDULE_DATE(+) = B.CUT_DATE_SCHEDULING
  				AND E.TRANSACTION_ID(+) = p_TRANSACTION_ID
  				AND E.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
  				AND E.SCHEDULE_STATE(+) = p_SCHEDULE_STATE
  				AND E.SCHEDULE_DATE(+) = B.CUT_DATE_SCHEDULING
  				AND E.AS_OF_DATE(+) = v_AS_OF_DATE;
  		ELSIF v_BO_INTERVAL_TYPE = 2 AND NOT GA.VERSION_SCHEDULE THEN
  			SELECT BID_OFFER_COMPOSITE_TYPE(B.CUT_DATE, E.AMOUNT, E.PRICE, NULL, C.REASON_FOR_CHANGE, C.OTHER_REASON, C.PROCESS_MESSAGE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
  			BULK COLLECT INTO p_BID_OFFER_COMPOSITE
  			FROM SYSTEM_DATE_TIME B, BID_OFFER_STATUS C, IT_SCHEDULE E
  			WHERE B.TIME_ZONE = p_TIME_ZONE
  				AND B.DATA_INTERVAL_TYPE = 2
  				AND B.DAY_TYPE = '1'
  				AND B.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
  				AND B.MINIMUM_INTERVAL_NUMBER >= v_BO_INTERVAL_NUM
  				AND C.TRANSACTION_ID(+) = p_TRANSACTION_ID
  				AND C.SCHEDULE_DATE(+) = B.CUT_DATE_SCHEDULING
  				AND E.TRANSACTION_ID(+) = p_TRANSACTION_ID
  				AND E.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
  				AND E.SCHEDULE_STATE(+) = p_SCHEDULE_STATE
  				AND E.SCHEDULE_DATE(+) = B.CUT_DATE + (B.LOCAL_DATE - B.CUT_DATE) --GETTING FIRST HOUR OF THE DAY.
  				AND E.AS_OF_DATE(+) = v_AS_OF_DATE;
  		END IF;

END GET_BID_OFFER_COMPOSITE;
------------------------------------------------------------------------------------------------------------
PROCEDURE BID_OFFER_STATUS_REPORT
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
    p_TRANSACTION_IDS IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
    p_IS_LEAF IN NUMBER,
    p_INTERVAL OUT VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS

BEGIN
	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    IF p_TRANSACTION_ID IS NULL OR p_TRANSACTION_ID = g_NO_ENTITY_ID THEN
        NULL_CURSOR(p_CURSOR);
        RETURN;
    END IF;

	p_STATUS := GA.SUCCESS;

	IF p_IS_LEAF = 1 THEN
        BID_OFFER_STATUS_DETAIL(p_BID_OFFER_ID, p_TRANSACTION_ID, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, p_STATUS, p_CURSOR);
    ELSE
        BID_OFFER_STATUS_SUMMARY(p_BID_OFFER_ID, p_TRANSACTION_IDS, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, p_INTERVAL, p_STATUS, p_CURSOR);
    END IF;

END BID_OFFER_STATUS_REPORT;
------------------------------------------------------------------------------------------------------------
PROCEDURE BID_OFFER_STATUS_DETAIL
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_DATA_INTERVAL VARCHAR2(16) := GET_BID_OFFER_INTERVAL(p_TRANSACTION_ID,p_BID_OFFER_ID,TRUE);

BEGIN
	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

	UT.CUT_DATE_RANGE(GA.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_DATA_INTERVAL, v_BEGIN_DATE, v_END_DATE);

	OPEN p_CURSOR FOR
		SELECT A.TRANSACTION_NAME, FROM_CUT_AS_HED(B.SCHEDULE_DATE, p_TIME_ZONE, v_DATA_INTERVAL, GA.ELECTRIC_MODEL, GA.STANDARD, v_DATA_INTERVAL) "SCHEDULE_DATE", B.CREATE_DATE, B.REVIEW_STATUS, B.REVIEW_DATE, B.REVIEWED_BY, B.SUBMIT_STATUS, B.SUBMIT_DATE, B.SUBMITTED_BY, B.MARKET_STATUS, B.MARKET_STATUS_DATE, B.REASON_FOR_CHANGE, B.OTHER_REASON, B.ENTRY_DATE, B.PROCESS_MESSAGE,
			B.SCHEDULE_DATE "CUT_DATE_SCHEDULING"
		FROM INTERCHANGE_TRANSACTION A, BID_OFFER_STATUS B
		WHERE A.TRANSACTION_ID = p_TRANSACTION_ID
			AND BEGIN_DATE <= p_END_DATE AND END_DATE >= p_BEGIN_DATE
			AND IS_BID_OFFER = 1
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND B.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		ORDER BY 1, 2;

END BID_OFFER_STATUS_DETAIL;
------------------------------------------------------------------------------------------------------------
PROCEDURE BID_OFFER_STATUS_SUMMARY
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_IDS IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL OUT VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_WORK_ID NUMBER;
v_TABLE GA.STRING_TABLE;
v_INDEX BINARY_INTEGER;
v_SEQUENCE NUMBER(9) := 0;
v_TRANSACTION_ID NUMBER(9);
v_DATA_INTERVAL VARCHAR2(16);
BEGIN
	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

    -- If no transactions were selected then just clear the grid
    IF p_TRANSACTION_IDS IS NULL THEN
        NULL_CURSOR(p_CURSOR);
        RETURN;
    END IF;

	UT.CUT_DATE_RANGE(GA.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_DATA_INTERVAL, v_BEGIN_DATE, v_END_DATE);
	UT.GET_RTO_WORK_ID(v_WORK_ID);
	UT.TOKENS_FROM_STRING(p_TRANSACTION_IDS, ',', v_TABLE);

    --Stick TransactionIds in work table.
	FOR v_INDEX IN v_TABLE.FIRST..v_TABLE.LAST LOOP
		v_SEQUENCE := v_SEQUENCE + 1;
		v_TRANSACTION_ID := TO_NUMBER(v_TABLE(v_INDEX));
		IF v_SEQUENCE = 1 THEN
			-- use interval of first transaction
			p_INTERVAL := GET_BID_OFFER_INTERVAL(v_TRANSACTION_ID, p_BID_OFFER_ID, FALSE);
			v_DATA_INTERVAL := GET_INTERVAL_ABBREVIATION(p_INTERVAL);
		END IF;
		UT.POST_RTO_WORK(v_WORK_ID, v_SEQUENCE, v_TRANSACTION_ID);
		COMMIT;

	END LOOP;
	v_TABLE.DELETE;

	--Select result set from join on work table.
	OPEN p_CURSOR FOR
		SELECT A.TRANSACTION_NAME,
            SUBSTR(TRIM(FROM_CUT_AS_HED (B.SCHEDULE_DATE, p_TIME_ZONE, v_DATA_INTERVAL, GA.ELECTRIC_MODEL, GA.STANDARD, v_DATA_INTERVAL)), 0, 10) "SCHEDULE_DATE",
            SUBSTR(TRIM(FROM_CUT_AS_HED (B.SCHEDULE_DATE, p_TIME_ZONE, v_DATA_INTERVAL, GA.ELECTRIC_MODEL, GA.STANDARD, v_DATA_INTERVAL)), -5, 5) "SCHEDULE_TIME",
            B.REVIEW_STATUS,
            B.SUBMIT_STATUS,
            B.MARKET_STATUS,
			B.SCHEDULE_DATE "CUT_DATE_SCHEDULING"
		FROM INTERCHANGE_TRANSACTION A, BID_OFFER_STATUS B, RTO_WORK C
		WHERE C.WORK_ID = v_WORK_ID
			AND A.TRANSACTION_ID = C.WORK_XID
			AND BEGIN_DATE <= p_END_DATE AND END_DATE >= p_BEGIN_DATE
			AND IS_BID_OFFER = 1
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND B.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		ORDER BY 1, 2;

	UT.PURGE_RTO_WORK(v_WORK_ID);
EXCEPTION
	WHEN OTHERS THEN
		UT.PURGE_RTO_WORK(v_WORK_ID);
		ERRS.LOG_AND_RAISE();
END BID_OFFER_STATUS_SUMMARY;
------------------------------------------------------------------------------------------------------------
PROCEDURE PUT_BID_OFFER_SET
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_SET_NUMBER IN NUMBER,
	p_PRICE IN NUMBER,
	p_QUANTITY IN NUMBER,
	p_OFFER_STATUS IN CHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Delete, Update or Insert to the BID_OFFER_SET table.
v_SCHEDULE_STATE NUMBER(1) := CASE WHEN p_SCHEDULE_STATE = 2 THEN 2 ELSE 1 END;
BEGIN

	p_STATUS := GA.SUCCESS;
	TG.PUT_IT_TRAIT_SCHEDULE(p_TRANSACTION_ID, v_SCHEDULE_STATE, 0, p_SCHEDULE_DATE, TG.g_TG_OFFER_CURVE, TG.g_TI_OFFER_PRICE, p_SET_NUMBER, p_PRICE, p_TIME_ZONE);
	TG.PUT_IT_TRAIT_SCHEDULE(p_TRANSACTION_ID, v_SCHEDULE_STATE, 0, p_SCHEDULE_DATE, TG.g_TG_OFFER_CURVE, TG.g_TI_OFFER_QUANTITY, p_SET_NUMBER, p_QUANTITY, p_TIME_ZONE);

END PUT_BID_OFFER_SET;
---------------------------------------------------------------------------------------------------
PROCEDURE FILL_BID_OFFER_SET
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_EXPIRATION_DATE IN DATE,
	p_DAY_NAME IN CHAR,
	p_BEGIN_HOUR IN NUMBER,
	p_END_HOUR IN NUMBER,
	p_PRICE_QUANTITY_PAIRS IN VARCHAR,
	p_TEMPLATE_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
  p_MESSAGE OUT VARCHAR2,
  p_CONTINUE_BUTTON_CAPTION OUT VARCHAR,
	p_CANCEL_BUTTON_CAPTION OUT VARCHAR,
	p_MUST_CANCEL_SUBMIT OUT NUMBER
	) AS

-- Fill the BID_OFFER_SET table for the given date range.
v_CUR_DATE DATE;
v_SCHEDULE_DATE DATE;
v_PQ_PAIRS GA.STRING_TABLE;
v_PQ GA.STRING_TABLE;
v_HOUR NUMBER(2);
v_INDEX BINARY_INTEGER;
v_QUANTITY BID_OFFER_SET.QUANTITY%TYPE;
v_PRICE BID_OFFER_SET.PRICE%TYPE;
v_SET_NUMBER BID_OFFER_SET.SET_NUMBER%TYPE;
v_OFFER_STATUS CHAR(1) := 'P'; --PENDING.
v_LOOP_COUNTER NUMBER := 0;
v_DAY_NAME CHAR(3) := UPPER(p_DAY_NAME);
v_DATA_INTERVAL VARCHAR2(16) := GET_BID_OFFER_INTERVAL(p_TRANSACTION_ID, p_BID_OFFER_ID);
v_BEGIN_HOUR NUMBER(2);
v_END_HOUR NUMBER(2);
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_DATE_INCREMENT VARCHAR2(16);
v_EXPIRATION_DATE_TRAIT_ID NUMBER(9);
v_DAY_TYPE_TRAIT_ID NUMBER(9);

BEGIN


  p_MUST_CANCEL_SUBMIT := 0;
  p_CONTINUE_BUTTON_CAPTION := NULL;
  p_CANCEL_BUTTON_CAPTION := 'OK';

	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_BAO_UPDATE,p_TRANSACTION_ID,EC.ED_TRANSACTION);

  p_STATUS := GA.SUCCESS;
	UT.CUT_DAY_INTERVAL_RANGE(GA.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_DATA_INTERVAL, v_BEGIN_DATE, v_END_DATE);

  GET_BID_OFFER_FILL_WARNING(p_TRANSACTION_ID,	p_BID_OFFER_ID, p_SCHEDULE_STATE, p_BEGIN_DATE, p_END_DATE, p_EXPIRATION_DATE, p_DAY_NAME, p_BEGIN_HOUR,	p_END_HOUR,	p_PRICE_QUANTITY_PAIRS,	p_TEMPLATE_NAME, p_TIME_ZONE, p_STATUS, p_MESSAGE, p_CONTINUE_BUTTON_CAPTION,	p_CANCEL_BUTTON_CAPTION,	p_MUST_CANCEL_SUBMIT);

  IF p_MESSAGE is NOT NULL THEN
     RETURN;
  END IF;

    --DON'T LOOP OVER THE HOURS IF THIS IS DAILY DATA.
	--ADVANCE THE DATE BY EITHER DAY, OR A LARGER INTERVAL.
	IF INTERVAL_IS_ATLEAST_DAILY(v_DATA_INTERVAL) THEN
       v_BEGIN_HOUR := 0;
       v_END_HOUR := 0;
	   v_DATE_INCREMENT := v_DATA_INTERVAL;
	ELSE
	   v_BEGIN_HOUR := p_BEGIN_HOUR;
	   v_END_HOUR := p_END_HOUR;
	   v_DATE_INCREMENT := 'DD';
	END IF;

-- 	--Do some special handling for the IMO Expiration date and daytype
-- 	SELECT BID_OFFER_IS_DEFAULT INTO v_BID_OFFER_IS_DEFAULT FROM BID_OFFER WHERE BID_OFFER_ID = p_BID_OFFER_ID;
-- 	IF v_BID_OFFER_IS_DEFAULT = 1 THEN
-- 		v_EXPIRATION_DATE_TRAIT_ID := ID.ID_FOR_RESOURCE_TRAIT('IMO Expiration Date');
-- 		v_DAY_TYPE_TRAIT_ID := ID.ID_FOR_RESOURCE_TRAIT('IMO Day Type');
-- 	END IF;

	UT.TOKENS_FROM_STRING(p_PRICE_QUANTITY_PAIRS, ';', v_PQ_PAIRS);
	IF v_PQ_PAIRS.EXISTS(1) THEN
        FOR v_INDEX IN v_PQ_PAIRS.FIRST..v_PQ_PAIRS.LAST LOOP
    		UT.TOKENS_FROM_STRING(v_PQ_PAIRS(v_INDEX),',',v_PQ);
    		IF v_PQ.EXISTS(1) THEN
    			v_PRICE := TO_NUMBER(v_PQ(1));
    			IF v_PQ.EXISTS(2) THEN
    				v_QUANTITY := TO_NUMBER(v_PQ(2));
    			ELSE
    				v_QUANTITY := NULL;
    			END IF;
    			v_SET_NUMBER := v_INDEX;
    			v_CUR_DATE := v_BEGIN_DATE;
    			WHILE v_CUR_DATE <= v_END_DATE LOOP
    				IF v_DAY_NAME IS NULL OR v_DAY_NAME = 'ALL' OR v_DAY_NAME = TO_CHAR(v_CUR_DATE, 'DY') THEN

    					--PUT IN THE DAILY EXPIRATION DATE AND DAY TYPE.
    					IF v_EXPIRATION_DATE_TRAIT_ID > 0 AND v_DAY_TYPE_TRAIT_ID > 0 THEN
    						PUT_BID_OFFER_TRAIT(p_TRANSACTION_ID, p_BID_OFFER_ID, p_SCHEDULE_STATE, v_CUR_DATE, v_EXPIRATION_DATE_TRAIT_ID, p_EXPIRATION_DATE, p_TIME_ZONE, p_STATUS);
    						PUT_BID_OFFER_TRAIT(p_TRANSACTION_ID, p_BID_OFFER_ID, p_SCHEDULE_STATE, v_CUR_DATE, v_DAY_TYPE_TRAIT_ID, p_DAY_NAME, p_TIME_ZONE, p_STATUS);
    					END IF;

    				 	v_HOUR := v_BEGIN_HOUR;
    				 	WHILE v_HOUR <= v_END_HOUR LOOP
    						v_SCHEDULE_DATE := ADD_HOURS_TO_DATE(TRUNC(v_CUR_DATE), v_HOUR);
    						PUT_BID_OFFER_SET(p_TRANSACTION_ID, p_BID_OFFER_ID, p_SCHEDULE_STATE, v_SCHEDULE_DATE, v_SET_NUMBER, v_PRICE, v_QUANTITY, v_OFFER_STATUS, p_TIME_ZONE, p_STATUS);
    						v_HOUR := v_HOUR + 1;

    						--MAKE SURE WE AREN'T LOOPING FOREVER
    						v_LOOP_COUNTER := v_LOOP_COUNTER + 1;
    						IF v_LOOP_COUNTER > 1000000 THEN
    							ERRS.RAISE(MSGCODES.c_ERR_RUNAWAY_LOOP,'RUNAWAY LOOP IN IT.FILL_BID_OFFER_SET PROCEDURE');
    						END IF;

    					END LOOP;
    				END IF;
    				v_CUR_DATE := ADVANCE_DATE(v_CUR_DATE, v_DATE_INCREMENT);
    			END LOOP;
    		END IF;
    	END LOOP;
    END IF;

  XS.GET_BID_OFFER_FILL_WARNING(p_TRANSACTION_ID,	p_BID_OFFER_ID, p_SCHEDULE_STATE, p_BEGIN_DATE, p_END_DATE, p_EXPIRATION_DATE, p_DAY_NAME, p_BEGIN_HOUR,	p_END_HOUR,	p_PRICE_QUANTITY_PAIRS,	p_TEMPLATE_NAME, p_TIME_ZONE, p_STATUS, p_MESSAGE, p_CONTINUE_BUTTON_CAPTION,	p_CANCEL_BUTTON_CAPTION,	p_MUST_CANCEL_SUBMIT);

END FILL_BID_OFFER_SET;
---------------------------------------------------------------------------------------------------
PROCEDURE FILL_BID_OFFER_SET
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_EXPIRATION_DATE IN DATE,
	p_DAY_NAME IN CHAR,
	p_BEGIN_HOUR IN NUMBER,
	p_END_HOUR IN NUMBER,
	p_PRICE_QUANTITY_PAIRS IN VARCHAR,
	p_TEMPLATE_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

  v_MESSAGE VARCHAR2(4000);
  v_CONTINUE_BUTTON_CAPTION VARCHAR2(64);
	v_CANCEL_BUTTON_CAPTION VARCHAR2(64);
	v_MUST_CANCEL_SUBMIT NUMBER;

BEGIN

  FILL_BID_OFFER_SET(p_TRANSACTION_ID,p_BID_OFFER_ID,p_SCHEDULE_STATE,p_BEGIN_DATE,p_END_DATE,p_EXPIRATION_DATE,p_DAY_NAME,p_BEGIN_HOUR,p_END_HOUR,p_PRICE_QUANTITY_PAIRS,p_TEMPLATE_NAME,p_TIME_ZONE,p_STATUS,v_MESSAGE,v_CONTINUE_BUTTON_CAPTION,v_CANCEL_BUTTON_CAPTION,v_MUST_CANCEL_SUBMIT);

END FILL_BID_OFFER_SET;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_BID_OFFER_RAMP
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_SET_NUMBER IN NUMBER,
	p_RAMP_QUANTITY IN NUMBER,
	p_RAMP_UP_RATE IN NUMBER,
	p_RAMP_DOWN_RATE IN NUMBER,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Delete, Update or Insert to the BID_OFFER_RAMP table.
BEGIN

	p_STATUS := GA.SUCCESS;
	TG.PUT_IT_TRAIT_SCHEDULE(p_TRANSACTION_ID, CONSTANTS.INTERNAL_STATE, 0, p_SCHEDULE_DATE, TG.g_TG_RAMP_CURVE, TG.g_TI_RAMP_QUANTITY, p_SET_NUMBER, p_RAMP_QUANTITY, p_TIME_ZONE);
	TG.PUT_IT_TRAIT_SCHEDULE(p_TRANSACTION_ID, CONSTANTS.INTERNAL_STATE, 0, p_SCHEDULE_DATE, TG.g_TG_RAMP_CURVE, TG.g_TI_RAMP_UP, p_SET_NUMBER, p_RAMP_UP_RATE, p_TIME_ZONE);
	TG.PUT_IT_TRAIT_SCHEDULE(p_TRANSACTION_ID, CONSTANTS.INTERNAL_STATE, 0, p_SCHEDULE_DATE, TG.g_TG_RAMP_CURVE, TG.g_TI_RAMP_DOWN, p_SET_NUMBER, p_RAMP_DOWN_RATE, p_TIME_ZONE);

	EXCEPTION
	    WHEN OTHERS THEN
		    p_STATUS := SQLCODE;

END PUT_BID_OFFER_RAMP;
---------------------------------------------------------------------------------------------------
PROCEDURE FILL_BID_OFFER_RAMP
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_DAY_NAME IN CHAR,
	p_BEGIN_HOUR IN NUMBER,
	p_END_HOUR IN NUMBER,
	p_RAMP_RATE_TRIPLES IN VARCHAR,
	p_TEMPLATE_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Fill the BID_OFFER_RAMP table for the given date range.
v_CUR_DATE DATE;
v_SCHEDULE_DATE DATE;
v_HOUR NUMBER(2);
v_RAMP_QUANTITY BID_OFFER_RAMP.RAMP_QUANTITY%TYPE;
v_RAMP_UP_RATE BID_OFFER_RAMP.RAMP_UP_RATE%TYPE;
v_RAMP_DOWN_RATE BID_OFFER_RAMP.RAMP_DOWN_RATE%TYPE;
v_SET_NUMBER BID_OFFER_RAMP.SET_NUMBER%TYPE;
v_INDEX BINARY_INTEGER;
v_RAMP_TRIPLES GA.STRING_TABLE;
v_RAMP GA.STRING_TABLE;
v_LOOP_COUNTER NUMBER := 0;
v_DAY_NAME CHAR(3) := UPPER(p_DAY_NAME);
v_FIRST_RAMP NUMBER := 0;
v_LAST_RAMP NUMBER := 0;
v_HAS_RAMPS BOOLEAN;
v_DATA_INTERVAL VARCHAR2(16) := GET_BID_OFFER_INTERVAL(p_TRANSACTION_ID, p_BID_OFFER_ID);
v_BEGIN_HOUR NUMBER(2);
v_END_HOUR NUMBER(2);
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_DATE_INCREMENT VARCHAR2(16);
BEGIN

	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_BAO_UPDATE,p_TRANSACTION_ID,EC.ED_TRANSACTION);

   p_STATUS := GA.SUCCESS;

	UT.CUT_DAY_INTERVAL_RANGE(GA.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_DATA_INTERVAL, v_BEGIN_DATE, v_END_DATE);

    --DON'T LOOP OVER THE HOURS IF THIS IS DAILY DATA.
	--ADVANCE THE DATE BY EITHER DAY, OR A LARGER INTERVAL.
	IF INTERVAL_IS_ATLEAST_DAILY(v_DATA_INTERVAL) THEN
       v_BEGIN_HOUR := 0;
       v_END_HOUR := 0;
	   v_DATE_INCREMENT := v_DATA_INTERVAL;
	ELSE
	   v_BEGIN_HOUR := p_BEGIN_HOUR;
	   v_END_HOUR := p_END_HOUR;
	   v_DATE_INCREMENT := 'DD';
	END IF;

	IF p_RAMP_RATE_TRIPLES IS NULL THEN
		v_HAS_RAMPS := FALSE;
		v_FIRST_RAMP := 0;
		v_LAST_RAMP := 0;
	ELSE
		v_HAS_RAMPS := TRUE;
		UT.TOKENS_FROM_STRING(p_RAMP_RATE_TRIPLES, ';', v_RAMP_TRIPLES);
		v_FIRST_RAMP := v_RAMP_TRIPLES.FIRST;
		v_LAST_RAMP := v_RAMP_TRIPLES.LAST;
	END IF;
	FOR v_INDEX IN v_FIRST_RAMP..v_LAST_RAMP LOOP
		IF v_HAS_RAMPS THEN
			UT.TOKENS_FROM_STRING(v_RAMP_TRIPLES(v_INDEX),',',v_RAMP);
			v_RAMP_QUANTITY := TO_NUMBER(v_RAMP(1));
			v_RAMP_UP_RATE := TO_NUMBER(v_RAMP(2));
			IF v_RAMP.EXISTS(3) THEN
				v_RAMP_DOWN_RATE := TO_NUMBER(v_RAMP(3));
			ELSE
				v_RAMP_DOWN_RATE := NULL;
			END IF;
		END IF;
		v_SET_NUMBER := v_INDEX;
		v_CUR_DATE := v_BEGIN_DATE;
		WHILE v_CUR_DATE <= v_END_DATE LOOP
			IF v_DAY_NAME IS NULL OR v_DAY_NAME = 'ALL' OR v_DAY_NAME = TO_CHAR(v_CUR_DATE, 'DY') THEN
			 	v_HOUR := v_BEGIN_HOUR;
			 	WHILE v_HOUR <= v_END_HOUR LOOP
					v_SCHEDULE_DATE := ADD_HOURS_TO_DATE(TRUNC(v_CUR_DATE), v_HOUR);

					--PUT THE VALUES INTO THE BID_OFFER_RAMP TABLE FOR EACH SET
					IF v_HAS_RAMPS THEN
						PUT_BID_OFFER_RAMP(p_TRANSACTION_ID, p_BID_OFFER_ID, p_SCHEDULE_STATE, v_SCHEDULE_DATE, v_SET_NUMBER, v_RAMP_QUANTITY, v_RAMP_UP_RATE, v_RAMP_DOWN_RATE, p_TIME_ZONE, p_STATUS);
					END IF;

					v_HOUR := v_HOUR + 1;

					--MAKE SURE WE AREN'T LOOPING FOREVER
					v_LOOP_COUNTER := v_LOOP_COUNTER + 1;
					IF v_LOOP_COUNTER > 1000000 THEN
						ERRS.RAISE(MSGCODES.c_ERR_RUNAWAY_LOOP,'RUNAWAY LOOP IN IT.FILL_BID_OFFER_SET PROCEDURE');
					END IF;

				END LOOP;
			END IF;
			v_CUR_DATE := ADVANCE_DATE(v_CUR_DATE, v_DATE_INCREMENT);
		END LOOP;
	END LOOP;

	EXCEPTION
	    WHEN OTHERS THEN
		    p_STATUS := SQLCODE;

END FILL_BID_OFFER_RAMP;
---------------------------------------------------------------------------------------------------
PROCEDURE FILL_BID_OFFER_TRAIT
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_DAY_NAME IN CHAR,
	p_BEGIN_HOUR IN NUMBER,
	p_END_HOUR IN NUMBER,
	p_RESOURCE_TRAIT_VALS IN VARCHAR,
	p_TEMPLATE_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Fill the BID_OFFER_TRAIT table for the given date range.
v_CUR_DATE DATE;
v_SCHEDULE_DATE DATE;
v_HOUR NUMBER(2);
v_RESOURCE_TRAIT_ID NUMBER(9);
v_TRAIT_VAL BID_OFFER_TRAIT.TRAIT_VAL%TYPE;
v_INDEX BINARY_INTEGER;
v_TRAIT_VALS GA.STRING_TABLE;
v_TRAIT GA.STRING_TABLE;
v_LOOP_COUNTER NUMBER := 0;
v_DAY_NAME CHAR(3) := UPPER(p_DAY_NAME);
v_FIRST_TRAIT NUMBER := 0;
v_LAST_TRAIT NUMBER := 0;
v_DATA_INTERVAL TRANSACTION_TRAIT_GROUP.TRAIT_GROUP_INTERVAL%TYPE;
v_BEGIN_HOUR NUMBER(2);
v_END_HOUR NUMBER(2);
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_DATE_INCREMENT VARCHAR2(16);
BEGIN

-- 	IF NOT CAN_READ(g_MODULE_NAME) THEN
-- 		RAISE INSUFFICIENT_PRIVILEGES;
-- 	END IF;

   p_STATUS := GA.SUCCESS;

	IF p_RESOURCE_TRAIT_VALS IS NULL THEN
		v_FIRST_TRAIT := 0;
		v_LAST_TRAIT := 0;
	ELSE
		UT.TOKENS_FROM_STRING(p_RESOURCE_TRAIT_VALS, ';', v_TRAIT_VALS);
		v_FIRST_TRAIT := v_TRAIT_VALS.FIRST;
		v_LAST_TRAIT := v_TRAIT_VALS.LAST;
	END IF;

	FOR v_INDEX IN v_FIRST_TRAIT..v_LAST_TRAIT LOOP

		UT.TOKENS_FROM_STRING(v_TRAIT_VALS(v_INDEX),'~',v_TRAIT);
		v_RESOURCE_TRAIT_ID := TO_NUMBER(v_TRAIT(1));
		v_TRAIT_VAL := v_TRAIT(2);

		v_DATA_INTERVAL := GET_RESOURCE_TRAIT_INTERVAL(v_RESOURCE_TRAIT_ID);
		UT.CUT_DAY_INTERVAL_RANGE(GA.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_DATA_INTERVAL, v_BEGIN_DATE, v_END_DATE);

	    --DON'T LOOP OVER THE HOURS IF THIS IS DAILY DATA.
		--ADVANCE THE DATE BY EITHER DAY, OR A LARGER INTERVAL.
		IF INTERVAL_IS_ATLEAST_DAILY(v_DATA_INTERVAL) THEN
	       v_BEGIN_HOUR := 0;
	       v_END_HOUR := 0;
		   v_DATE_INCREMENT := v_DATA_INTERVAL;
		ELSE
		   v_BEGIN_HOUR := p_BEGIN_HOUR;
		   v_END_HOUR := p_END_HOUR;
		   v_DATE_INCREMENT := 'DD';
		END IF;

		v_CUR_DATE := v_BEGIN_DATE;
		WHILE v_CUR_DATE <= v_END_DATE LOOP
			IF v_DAY_NAME IS NULL OR v_DAY_NAME = 'ALL' OR v_DAY_NAME = TO_CHAR(v_CUR_DATE, 'DY') THEN
			 	v_HOUR := v_BEGIN_HOUR;
			 	WHILE v_HOUR <= v_END_HOUR LOOP
					v_SCHEDULE_DATE := ADD_HOURS_TO_DATE(TRUNC(v_CUR_DATE), v_HOUR);

					--PUT THE VALUES INTO THE BID_OFFER_TRAIT TABLE FOR EACH SET
					PUT_BID_OFFER_TRAIT(p_TRANSACTION_ID, p_BID_OFFER_ID, p_SCHEDULE_STATE, v_SCHEDULE_DATE, v_RESOURCE_TRAIT_ID, v_TRAIT_VAL, p_TIME_ZONE, p_STATUS);

					v_HOUR := v_HOUR + 1;

					--MAKE SURE WE AREN'T LOOPING FOREVER
					v_LOOP_COUNTER := v_LOOP_COUNTER + 1;
					IF v_LOOP_COUNTER > 1000000 THEN
						ERRS.RAISE(MSGCODES.c_ERR_RUNAWAY_LOOP,'RUNAWAY LOOP IN IT.FILL_BID_OFFER_SET PROCEDURE');
					END IF;

				END LOOP;
			END IF;
			v_CUR_DATE := ADVANCE_DATE(v_CUR_DATE, v_DATE_INCREMENT);
		END LOOP;
	END LOOP;

	EXCEPTION
	    WHEN OTHERS THEN
		    p_STATUS := SQLCODE;

END FILL_BID_OFFER_TRAIT;
-------------------------------------------------------------------------------------------------
PROCEDURE PUT_BID_OFFER_SETS_AND_RAMPS
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_REASON_FOR_CHANGE IN VARCHAR,
	p_OTHER_REASON IN VARCHAR,
	p_RESOURCE_TRAIT_VALS IN VARCHAR,
	p_PRICE_QUANTITY_PAIRS IN VARCHAR,
	p_RAMP_RATE_TRIPLES IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Put the values into the BID_OFFER_SET and BID_OFFER_RAMP tables.
v_SCHEDULE_DATE DATE := TRUNC(p_SCHEDULE_DATE);
v_SCHEDULE_HOUR NUMBER(2):= TO_NUMBER(TO_CHAR(p_SCHEDULE_DATE, 'HH24'));
BEGIN

	p_STATUS := GA.SUCCESS;

	IF p_SCHEDULE_STATE = CONSTANTS.INTERNAL_STATE THEN
		PUT_BID_OFFER_STATUS_REASON(p_BID_OFFER_ID, p_TRANSACTION_ID, p_SCHEDULE_DATE, p_REASON_FOR_CHANGE, p_OTHER_REASON, p_TIME_ZONE, p_STATUS);
		IF p_STATUS <> GA.SUCCESS THEN RETURN; END IF;
	END IF;

	FILL_BID_OFFER_SET(p_TRANSACTION_ID, p_BID_OFFER_ID, p_SCHEDULE_STATE, v_SCHEDULE_DATE, v_SCHEDULE_DATE, NULL, NULL,
		v_SCHEDULE_HOUR, v_SCHEDULE_HOUR, p_PRICE_QUANTITY_PAIRS, '', p_TIME_ZONE, p_STATUS);
	IF p_STATUS <> GA.SUCCESS THEN RETURN; END IF;

	FILL_BID_OFFER_RAMP(p_TRANSACTION_ID, p_BID_OFFER_ID, p_SCHEDULE_STATE, v_SCHEDULE_DATE, v_SCHEDULE_DATE, NULL,
		v_SCHEDULE_HOUR, v_SCHEDULE_HOUR, p_RAMP_RATE_TRIPLES, '', p_TIME_ZONE, p_STATUS);
	IF p_STATUS <> GA.SUCCESS THEN RETURN; END IF;

 	FILL_BID_OFFER_TRAIT(p_TRANSACTION_ID, p_BID_OFFER_ID, p_SCHEDULE_STATE, v_SCHEDULE_DATE, v_SCHEDULE_DATE, NULL,
 		v_SCHEDULE_HOUR, v_SCHEDULE_HOUR, p_RESOURCE_TRAIT_VALS, '', p_TIME_ZONE, p_STATUS);

END PUT_BID_OFFER_SETS_AND_RAMPS;
---------------------------------------------------------------------------------------------------
/*
  'Thu June 9, 2005 01:51:11. - sb - Function to check for errors in data submited by bids AND offers. Checking that time does not exceed 24 and start<=end (Bugzilla ID 8551)
*/

PROCEDURE GET_BID_OFFER_FILL_WARNING
    (
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_EXPIRATION_DATE IN DATE,
	p_DAY_NAME IN CHAR,
	p_BEGIN_HOUR IN NUMBER,
	p_END_HOUR IN NUMBER,
	p_PRICE_QUANTITY_PAIRS IN VARCHAR,
	p_TEMPLATE_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR2,
  p_CONTINUE_BUTTON_CAPTION OUT VARCHAR,
	p_CANCEL_BUTTON_CAPTION OUT VARCHAR,
	p_MUST_CANCEL_SUBMIT OUT NUMBER
 	 ) AS

-- Retun warnings if errors are found in data like time > 24 etc.
   v_MSG_SEPARATOR VARCHAR2(2) := CHR(13) || CHR(10);
   v_MESSAGE_LENGTH_EXCEEDED BOOLEAN := FALSE;

--============================================================================
	PROCEDURE APPEND_MESSAGE
		(
		p_NEW_MESSAGE IN VARCHAR2
		) AS
	BEGIN
		p_STATUS := -1;
		IF p_MESSAGE is NULL OR LENGTH(p_MESSAGE) < 3500 THEN
			p_MESSAGE :=  p_MESSAGE || v_MSG_SEPARATOR || 'Warning (' || p_BEGIN_DATE || ' : ' || p_BEGIN_HOUR || ' : ' || p_END_HOUR || '): ' || p_NEW_MESSAGE;
		ELSIF NOT v_MESSAGE_LENGTH_EXCEEDED THEN
			p_MESSAGE := 'Message length exceeded.  Some warnings were not included.' || v_MSG_SEPARATOR || p_MESSAGE;
      v_MESSAGE_LENGTH_EXCEEDED := TRUE;
		END IF;
	END;
--============================================================================


BEGIN


	IF p_BEGIN_HOUR>24 THEN
		APPEND_MESSAGE('Begin Hour cannot be greater than 24');
  ELSIF p_END_HOUR>24 THEN
    APPEND_MESSAGE('End Hour cannot be greater than 24');
  ELSIF p_BEGIN_HOUR> p_END_HOUR THEN
    APPEND_MESSAGE('Begin Hour must be less than or equal to End Hour');
	END IF;

  p_STATUS := GA.INVALID_DATE_RANGE;

  IF p_MESSAGE is NOT NULL THEN
    p_MUST_CANCEL_SUBMIT := 1;
    p_CONTINUE_BUTTON_CAPTION := NULL;
    p_CANCEL_BUTTON_CAPTION := 'OK';
  END IF;


EXCEPTION
	WHEN OTHERS THEN
		p_MESSAGE := SQLERRM;

END GET_BID_OFFER_FILL_WARNING;
---------------------------------------------------------------------------------------------------
PROCEDURE COPY_BIDS_AND_OFFERS
	(
	p_SRC_TRANSACTION_ID IN NUMBER,
	p_SRC_BEGIN_DATE IN DATE,
	p_SRC_END_DATE IN DATE,
	p_SRC_STATE IN NUMBER,
	p_TRG_TRANSACTION_ID IN NUMBER,
	p_TRG_BEGIN_DATE IN DATE,
	p_TRG_END_DATE IN DATE,
	p_TRG_STATE IN NUMBER,
	p_TRG_AS_OF_DATE IN DATE,
	p_TRG_DELETE IN NUMBER,
	p_COPY_BID_OFFER_AMOUNT IN NUMBER,
	p_COPY_BID_OFFER_PRICE IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
BEGIN

	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_BAO_UPDATE,p_TRG_TRANSACTION_ID,EC.ED_TRANSACTION);

	TG.COPY_IT_TRAIT_SCHEDULE(p_SRC_TRANSACTION_ID, p_SRC_BEGIN_DATE, p_SRC_END_DATE, p_SRC_STATE, p_TRG_TRANSACTION_ID, p_TRG_BEGIN_DATE, p_TRG_END_DATE, p_TRG_STATE, p_TRG_DELETE, p_STATUS);

END COPY_BIDS_AND_OFFERS;
---------------------------------------------------------------------------------------------------
/*
	11-jun-2004, jbc: added a conditional AND to the WHERE clause of the first
  SELECT statement that the TRAIT_CATEGORY fields must be equal. This means that we only
  get back those traits that match the transaction's schedule coordinator and trait category.
  Part of fix for Bug 6362.
*/
/*
  April 19, 2005, LD: added a new parameter p_DATE_OFFSET
*/
PROCEDURE BID_OFFER_TRAITS
    (
	 p_BID_OFFER_ID IN NUMBER, --NOT USED
	 p_TRANSACTION_ID IN NUMBER,
	 p_BEGIN_DATE IN DATE,
	 p_END_DATE IN DATE,
   p_DATE_OFFSET IN NUMBER :=0,
	 p_INTERVAL IN VARCHAR2,
	 p_TIME_ZONE IN VARCHAR2,
	 p_STATUS OUT NUMBER,
	 p_CURSOR IN OUT GA.REFCURSOR
	 ) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_OFFSET NUMBER := NVL(p_DATE_OFFSET,0);
v_DAY_INTERVAL_TYPE NUMBER(1);
v_INTERVAL_NUMBER NUMBER := GET_INTERVAL_NUMBER(p_INTERVAL);
BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    -- Return immediately if we don't have a TRANSACTION_ID
    IF p_TRANSACTION_ID IS NULL OR p_TRANSACTION_ID = g_NO_ENTITY_ID THEN
        NULL_CURSOR(p_CURSOR);
        RETURN;
    END IF;

    IF v_INTERVAL_NUMBER < GET_INTERVAL_NUMBER('DD') THEN
        v_DAY_INTERVAL_TYPE := 1;
        --UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
    ELSE
        v_DAY_INTERVAL_TYPE := 2;
        --UT.CUT_DATE_RANGE(v_DAY_INTERVAL_TYPE, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, get_interval_abbreviation(p_INTERVAL), v_BEGIN_DATE, v_END_DATE);
    END IF;

    --Make sure we have data in the SYSTEM_DATE_TIME table.  Return an error if not.
	SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);

    p_STATUS := GA.SUCCESS;

    UT.CUT_DATE_RANGE(CONSTANTS.ELECTRIC_MODEL, p_BEGIN_DATE- v_OFFSET, p_END_DATE- v_OFFSET, p_TIME_ZONE, v_BEGIN_DATE, v_END_DATE );

    OPEN p_CURSOR FOR

        --8/3/2005 - PBM - Modified query, removed UNION and added a OUTER JOIN on System_Date_Time
        -- also ordered by DisplayOrder first so that the java anchored grid handles it properly
        -- (needs to be ordered by break column)
		SELECT A.NO_ROLLUP_YYYY_MM_DD "SCHEDULE_DATE", A.GROUP_ORDER, A.TRAIT_ORDER, A.RESOURCE_TRAIT_ID, A.DISPLAY_NAME,
			A.DATA_TYPE, A.EDIT_MASK, A.COMBO_LIST, B.TRAIT_VAL
		FROM (SELECT Z.CUT_DATE, X.DISPLAY_ORDER "GROUP_ORDER", X.TRAIT_GROUP_ID "RESOURCE_TRAIT_ID", W.TRAIT_INDEX, W.DISPLAY_NAME, W.DISPLAY_ORDER "TRAIT_ORDER", W.DATA_TYPE, W.EDIT_MASK, W.COMBO_LIST, Z.NO_ROLLUP_YYYY_MM_DD
            FROM TRANSACTION_TRAIT_GROUP X, TRANSACTION_TRAIT_ATTRIBUTES W, INTERCHANGE_TRANSACTION Y, SYSTEM_DATE_TIME Z
            WHERE X.TRAIT_GROUP_INTERVAL = p_INTERVAL
            AND X.TRAIT_CATEGORY LIKE Y.TRAIT_CATEGORY
			AND W.TRAIT_GROUP_ID = X.TRAIT_GROUP_ID
            AND Z.TIME_ZONE = p_TIME_ZONE
            AND Z.DAY_TYPE = 1
            AND Z.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
            AND Z.DATA_INTERVAL_TYPE = v_DAY_INTERVAL_TYPE
		    AND Z.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
            ) A, BID_OFFER_TRAIT B
		WHERE B.TRANSACTION_ID(+) = p_TRANSACTION_ID
			AND B.SCHEDULE_STATE(+) = CONSTANTS.INTERNAL_STATE
			AND B.SCHEDULE_DATE(+) = A.CUT_DATE
			AND B.RESOURCE_TRAIT_ID(+) = A.RESOURCE_TRAIT_ID
		ORDER BY 2,3,1;

END BID_OFFER_TRAITS;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_BID_OFFER_TRAIT
	(
	p_TRANSACTION_ID IN NUMBER,
	p_BID_OFFER_ID IN NUMBER,
	p_SCHEDULE_STATE IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_RESOURCE_TRAIT_ID IN NUMBER,
	p_TRAIT_VAL IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Delete, Update or Insert to the BID_OFFER_TRAIT table.
BEGIN

	p_STATUS := GA.SUCCESS;
	TG.PUT_IT_TRAIT_SCHEDULE(p_TRANSACTION_ID, CONSTANTS.INTERNAL_STATE, 0, p_SCHEDULE_DATE, p_RESOURCE_TRAIT_ID, 1, 1, p_TRAIT_VAL, p_TIME_ZONE);

END PUT_BID_OFFER_TRAIT;
---------------------------------------------------------------------------------------------------
PROCEDURE BID_OFFER_STATUS_ACCEPT
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_IDS IN VARCHAR2,
	p_SCHEDULE_DATE IN DATE,
	p_USER_NAME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Answer the schedule's detailed data for the specified selection criteria.
v_TRANSACTION_IDs NUMBER_COLLECTION;
BEGIN

	p_STATUS := GA.SUCCESS;

	UT.NUMBER_COLL_FROM_STRING(p_TRANSACTION_IDS, ',', v_TRANSACTION_IDs);
	TG.IT_TRAIT_STATUS_ACCEPT_TXNS(v_TRANSACTION_IDs, p_SCHEDULE_DATE, p_TIME_ZONE);

END BID_OFFER_STATUS_ACCEPT;
---------------------------------------------------------------------------
PROCEDURE PUT_BID_OFFER_STATUS_REASON
	(
	p_BID_OFFER_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE,
	p_REASON_FOR_CHANGE IN VARCHAR,
	p_OTHER_REASON IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Update BID_OFFER_STATUS reasons.
v_SCHEDULE_DATE DATE;
v_BID_OFFER_ID NUMBER;
BEGIN

	SD.VERIFY_ENTITY_IS_ALLOWED(SD.g_ACTION_BAO_UPDATE,p_TRANSACTION_ID,EC.ED_TRANSACTION);

	v_BID_OFFER_ID := 0;

    v_SCHEDULE_DATE := GET_BID_OFFER_SCHEDULE_DATE(p_TRANSACTION_ID, v_BID_OFFER_ID, p_SCHEDULE_DATE, p_TIME_ZONE);

	TG.PUT_STATUS_REASON(p_TRANSACTION_ID, v_SCHEDULE_DATE, p_REASON_FOR_CHANGE, p_OTHER_REASON, p_STATUS);

END PUT_BID_OFFER_STATUS_REASON;
---------------------------------------------------------------------------------------------------

PROCEDURE BID_OFFER_TRANSACTIONS_BY_COM
    (
	 p_TRANSACTION_ID IN NUMBER,
	 p_STATUS OUT NUMBER,
	 p_CURSOR IN OUT GA.REFCURSOR
	 ) AS

-- Answer the names of all the Transactions of the same commodity as the
-- one selected.
v_COMMODITY_ID NUMBER(9);
v_ALLOWED_TXNS ID_TABLE := SD.GET_ALLOWED_ENTITY_ID_TABLE(SD.g_ACTION_TXN_SELECT);
BEGIN

	IF NOT CAN_READ(g_MODULE_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_MODULE_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;

	 SELECT COMMODITY_ID
	 INTO v_COMMODITY_ID
	 FROM INTERCHANGE_TRANSACTION A
	 WHERE TRANSACTION_ID = p_TRANSACTION_ID;

	OPEN p_CURSOR FOR
		  SELECT TRANSACTION_NAME, TRANSACTION_ID
		  FROM INTERCHANGE_TRANSACTION A, TABLE(CAST(v_ALLOWED_TXNS AS ID_TABLE)) X
		  WHERE A.IS_BID_OFFER = 1
		  		AND A.COMMODITY_ID = v_COMMODITY_ID
				AND (X.ID = SD.g_ALL_DATA_ENTITY_ID OR A.TRANSACTION_ID = X.ID)
		  ORDER BY 1;

END BID_OFFER_TRANSACTIONS_BY_COM;
---------------------------------------------------------------------------------------------------

END BO;
/
