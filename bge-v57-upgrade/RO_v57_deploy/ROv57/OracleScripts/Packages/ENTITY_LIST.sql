CREATE OR REPLACE PACKAGE ENTITY_LIST AS
-- Revision: $Revision: 1.6 $

-- NOTE: This package is AUTO-GENERATED

FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE ACCOUNT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ACCOUNT_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ANCILLARY_SERVICE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE AREA
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BILL_CYCLE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BILL_PARTY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE BREAKPOINT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CA
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CALC_PROCESS
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CALENDAR
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CASE_LABEL
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CATEGORY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE COMPONENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONDITIONAL_FORMAT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONTACT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONTRACT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CONTRACT_LIMIT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE CUSTOMER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DATA_LOCK_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DER_TYPE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE DR_EVENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE EDC
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ENTITY_DOMAIN
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ENTITY_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ESP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ETAG
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE EXTERNAL_SYSTEM
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE EXTERNAL_TRANSACTION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GEOGRAPHY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE GROWTH_PATTERN
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE HEAT_RATE_CURVE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE HOLIDAY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE HOLIDAY_SET
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE INTERCHANGE_CONTRACT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE INVOICE_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE IT_COMMODITY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE JOB_THREAD
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOAD_PROFILE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOAD_PROFILE_LIBRARY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOAD_PROFILE_SET
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE LOSS_FACTOR
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE MARKET_PRICE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE MEASUREMENT_SOURCE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE METER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE MRSP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE OASIS_NODE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PATH
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PERIOD
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PIPELINE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE POOL
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PORTFOLIO
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE POSITION_EVALUATION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PRODUCT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PROGRAM
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PROSPECT_SCREEN
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PROXY_DAY_METHOD
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE PSE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE QUOTE_REQUEST
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE REACTOR_PROCEDURE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE RESOURCE_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE ROLLUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SC
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SCENARIO
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SCHEDULE_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SEASON
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SEGMENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_AREA
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_LOCATION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_POINT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_REGION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_TYPE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SERVICE_ZONE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SETTLEMENT_TYPE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE STATEMENT_TYPE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUB_STATION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUB_STATION_METER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUB_STATION_METER_POINT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SUPPLY_RESOURCE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_ACTION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_ALERT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_EVENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_LOAD
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_REALM
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE SYSTEM_TABLE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TEMPLATE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TRANSACTION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TRANSACTION_TRAIT_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TX_FEEDER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE TX_FEEDER_SEGMENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE USAGE_WRF
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE VPP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE WEATHER_PARAMETER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE WEATHER_STATION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);


END ENTITY_LIST;
/

CREATE OR REPLACE PACKAGE BODY ENTITY_LIST AS
---------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.6 $';
END WHAT_VERSION;
---------------------------------------------------------------------
PROCEDURE ACCOUNT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ACCOUNT_NAME "ENTITY_NAME",
                                    ACCOUNT_ID "ENTITY_ID",
                                    ACCOUNT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ACCOUNT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ACCOUNT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ACCOUNT_ALIAS, ACCOUNT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ACCOUNT_NAME "ENTITY_NAME",
                                    ACCOUNT_ID "ENTITY_ID",
                                    ACCOUNT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ACCOUNT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ACCOUNT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ACCOUNT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ACCOUNT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ACCOUNT_ALIAS, ACCOUNT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ACCOUNT_NAME "ENTITY_NAME",
                            ACCOUNT_ID "ENTITY_ID",
                            ACCOUNT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM ACCOUNT
                WHERE ACCOUNT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ACCOUNT;
---------------------------------------------------------------------
PROCEDURE ACCOUNT_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ACCOUNT_GROUP_NAME "ENTITY_NAME",
                                    ACCOUNT_GROUP_ID "ENTITY_ID",
                                    ACCOUNT_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ACCOUNT_GROUP
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ACCOUNT_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ACCOUNT_GROUP_ALIAS, ACCOUNT_GROUP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ACCOUNT_GROUP_NAME "ENTITY_NAME",
                                    ACCOUNT_GROUP_ID "ENTITY_ID",
                                    ACCOUNT_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ACCOUNT_GROUP
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ACCOUNT_GROUP_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ACCOUNT_GROUP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ACCOUNT_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ACCOUNT_GROUP_ALIAS, ACCOUNT_GROUP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ACCOUNT_GROUP_NAME "ENTITY_NAME",
                            ACCOUNT_GROUP_ID "ENTITY_ID",
                            ACCOUNT_GROUP_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM ACCOUNT_GROUP
                WHERE ACCOUNT_GROUP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ACCOUNT_GROUP;
---------------------------------------------------------------------
PROCEDURE ANCILLARY_SERVICE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ANCILLARY_SERVICE_NAME "ENTITY_NAME",
                                    ANCILLARY_SERVICE_ID "ENTITY_ID",
                                    ANCILLARY_SERVICE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ANCILLARY_SERVICE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ANCILLARY_SERVICE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ANCILLARY_SERVICE_ALIAS, ANCILLARY_SERVICE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ANCILLARY_SERVICE_NAME "ENTITY_NAME",
                                    ANCILLARY_SERVICE_ID "ENTITY_ID",
                                    ANCILLARY_SERVICE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ANCILLARY_SERVICE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ANCILLARY_SERVICE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ANCILLARY_SERVICE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ANCILLARY_SERVICE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ANCILLARY_SERVICE_ALIAS, ANCILLARY_SERVICE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ANCILLARY_SERVICE_NAME "ENTITY_NAME",
                            ANCILLARY_SERVICE_ID "ENTITY_ID",
                            ANCILLARY_SERVICE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM ANCILLARY_SERVICE
                WHERE ANCILLARY_SERVICE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ANCILLARY_SERVICE;
---------------------------------------------------------------------
PROCEDURE AREA
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT AREA_NAME "ENTITY_NAME",
                                    AREA_ID "ENTITY_ID",
                                    AREA_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM AREA
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR AREA_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, AREA_ALIAS, AREA_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT AREA_NAME "ENTITY_NAME",
                                    AREA_ID "ENTITY_ID",
                                    AREA_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM AREA
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND AREA_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND AREA_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR AREA_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, AREA_ALIAS, AREA_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT AREA_NAME "ENTITY_NAME",
                            AREA_ID "ENTITY_ID",
                            AREA_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM AREA
                WHERE AREA_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END AREA;
---------------------------------------------------------------------
PROCEDURE BILL_CYCLE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT BILL_CYCLE_NAME "ENTITY_NAME",
                                    BILL_CYCLE_ID "ENTITY_ID",
                                    BILL_CYCLE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM BILL_CYCLE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR BILL_CYCLE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, BILL_CYCLE_ALIAS, BILL_CYCLE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT BILL_CYCLE_NAME "ENTITY_NAME",
                                    BILL_CYCLE_ID "ENTITY_ID",
                                    BILL_CYCLE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM BILL_CYCLE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND BILL_CYCLE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND BILL_CYCLE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR BILL_CYCLE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, BILL_CYCLE_ALIAS, BILL_CYCLE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT BILL_CYCLE_NAME "ENTITY_NAME",
                            BILL_CYCLE_ID "ENTITY_ID",
                            BILL_CYCLE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM BILL_CYCLE
                WHERE BILL_CYCLE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END BILL_CYCLE;
---------------------------------------------------------------------
PROCEDURE BILL_PARTY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT BILL_PARTY_NAME "ENTITY_NAME",
                                    BILL_PARTY_ID "ENTITY_ID",
                                    BILL_PARTY_ALIAS "ENTITY_ALIAS",
                                    BILL_PARTY_STATUS "ENTITY_STATUS"
                            FROM BILL_PARTY
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR BILL_PARTY_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(BILL_PARTY_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, BILL_PARTY_ALIAS, BILL_PARTY_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT BILL_PARTY_NAME "ENTITY_NAME",
                                    BILL_PARTY_ID "ENTITY_ID",
                                    BILL_PARTY_ALIAS "ENTITY_ALIAS",
                                    BILL_PARTY_STATUS "ENTITY_STATUS"
                            FROM BILL_PARTY
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(BILL_PARTY_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND BILL_PARTY_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR BILL_PARTY_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND BILL_PARTY_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR BILL_PARTY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, BILL_PARTY_ALIAS, BILL_PARTY_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT BILL_PARTY_NAME "ENTITY_NAME",
                            BILL_PARTY_ID "ENTITY_ID",
                            BILL_PARTY_ALIAS "ENTITY_ALIAS",
                                    BILL_PARTY_STATUS "ENTITY_STATUS"
                FROM BILL_PARTY
                WHERE BILL_PARTY_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END BILL_PARTY;
---------------------------------------------------------------------
PROCEDURE BREAKPOINT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT BREAKPOINT_NAME "ENTITY_NAME",
                                    BREAKPOINT_ID "ENTITY_ID",
                                    BREAKPOINT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM BREAKPOINT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR BREAKPOINT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, BREAKPOINT_ALIAS, BREAKPOINT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT BREAKPOINT_NAME "ENTITY_NAME",
                                    BREAKPOINT_ID "ENTITY_ID",
                                    BREAKPOINT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM BREAKPOINT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND BREAKPOINT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND BREAKPOINT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR BREAKPOINT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, BREAKPOINT_ALIAS, BREAKPOINT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT BREAKPOINT_NAME "ENTITY_NAME",
                            BREAKPOINT_ID "ENTITY_ID",
                            BREAKPOINT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM BREAKPOINT
                WHERE BREAKPOINT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END BREAKPOINT;
---------------------------------------------------------------------
PROCEDURE CA
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CA_NAME "ENTITY_NAME",
                                    CA_ID "ENTITY_ID",
                                    CA_ALIAS "ENTITY_ALIAS",
                                    CA_STATUS "ENTITY_STATUS"
                            FROM CONTROL_AREA
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CA_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(CA_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CA_ALIAS, CA_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CA_NAME "ENTITY_NAME",
                                    CA_ID "ENTITY_ID",
                                    CA_ALIAS "ENTITY_ALIAS",
                                    CA_STATUS "ENTITY_STATUS"
                            FROM CONTROL_AREA
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CA_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CA_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CA_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CA_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CA_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CA_ALIAS, CA_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CA_NAME "ENTITY_NAME",
                            CA_ID "ENTITY_ID",
                            CA_ALIAS "ENTITY_ALIAS",
                                    CA_STATUS "ENTITY_STATUS"
                FROM CONTROL_AREA
                WHERE CA_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CA;
---------------------------------------------------------------------
PROCEDURE CALC_PROCESS
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CALC_PROCESS_NAME "ENTITY_NAME",
                                    CALC_PROCESS_ID "ENTITY_ID",
                                    CALC_PROCESS_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CALCULATION_PROCESS
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CALC_PROCESS_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CALC_PROCESS_ALIAS, CALC_PROCESS_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CALC_PROCESS_NAME "ENTITY_NAME",
                                    CALC_PROCESS_ID "ENTITY_ID",
                                    CALC_PROCESS_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CALCULATION_PROCESS
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CALC_PROCESS_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CALC_PROCESS_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CALC_PROCESS_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CALC_PROCESS_ALIAS, CALC_PROCESS_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CALC_PROCESS_NAME "ENTITY_NAME",
                            CALC_PROCESS_ID "ENTITY_ID",
                            CALC_PROCESS_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM CALCULATION_PROCESS
                WHERE CALC_PROCESS_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CALC_PROCESS;
---------------------------------------------------------------------
PROCEDURE CALENDAR
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CALENDAR_NAME "ENTITY_NAME",
                                    CALENDAR_ID "ENTITY_ID",
                                    CALENDAR_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CALENDAR
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CALENDAR_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CALENDAR_ALIAS, CALENDAR_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CALENDAR_NAME "ENTITY_NAME",
                                    CALENDAR_ID "ENTITY_ID",
                                    CALENDAR_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CALENDAR
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CALENDAR_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CALENDAR_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CALENDAR_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CALENDAR_ALIAS, CALENDAR_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CALENDAR_NAME "ENTITY_NAME",
                            CALENDAR_ID "ENTITY_ID",
                            CALENDAR_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM CALENDAR
                WHERE CALENDAR_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CALENDAR;
---------------------------------------------------------------------
PROCEDURE CASE_LABEL
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CASE_NAME "ENTITY_NAME",
                                    CASE_ID "ENTITY_ID",
                                    CASE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CASE_LABEL
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CASE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CASE_ALIAS, CASE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CASE_NAME "ENTITY_NAME",
                                    CASE_ID "ENTITY_ID",
                                    CASE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CASE_LABEL
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CASE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CASE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CASE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CASE_ALIAS, CASE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CASE_NAME "ENTITY_NAME",
                            CASE_ID "ENTITY_ID",
                            CASE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM CASE_LABEL
                WHERE CASE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CASE_LABEL;
---------------------------------------------------------------------
PROCEDURE CATEGORY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CATEGORY_NAME "ENTITY_NAME",
                                    CATEGORY_ID "ENTITY_ID",
                                    CATEGORY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CATEGORY
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CATEGORY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CATEGORY_ALIAS, CATEGORY_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CATEGORY_NAME "ENTITY_NAME",
                                    CATEGORY_ID "ENTITY_ID",
                                    CATEGORY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CATEGORY
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CATEGORY_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CATEGORY_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CATEGORY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CATEGORY_ALIAS, CATEGORY_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CATEGORY_NAME "ENTITY_NAME",
                            CATEGORY_ID "ENTITY_ID",
                            CATEGORY_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM CATEGORY
                WHERE CATEGORY_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CATEGORY;
---------------------------------------------------------------------
PROCEDURE COMPONENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT COMPONENT_NAME "ENTITY_NAME",
                                    COMPONENT_ID "ENTITY_ID",
                                    COMPONENT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM COMPONENT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR COMPONENT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, COMPONENT_ALIAS, COMPONENT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT COMPONENT_NAME "ENTITY_NAME",
                                    COMPONENT_ID "ENTITY_ID",
                                    COMPONENT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM COMPONENT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND COMPONENT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND COMPONENT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR COMPONENT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, COMPONENT_ALIAS, COMPONENT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT COMPONENT_NAME "ENTITY_NAME",
                            COMPONENT_ID "ENTITY_ID",
                            COMPONENT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM COMPONENT
                WHERE COMPONENT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END COMPONENT;
---------------------------------------------------------------------
PROCEDURE CONDITIONAL_FORMAT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CONDITIONAL_FORMAT_NAME "ENTITY_NAME",
                                    CONDITIONAL_FORMAT_ID "ENTITY_ID",
                                    CONDITIONAL_FORMAT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CONDITIONAL_FORMAT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONDITIONAL_FORMAT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CONDITIONAL_FORMAT_ALIAS, CONDITIONAL_FORMAT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CONDITIONAL_FORMAT_NAME "ENTITY_NAME",
                                    CONDITIONAL_FORMAT_ID "ENTITY_ID",
                                    CONDITIONAL_FORMAT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CONDITIONAL_FORMAT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CONDITIONAL_FORMAT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CONDITIONAL_FORMAT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONDITIONAL_FORMAT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CONDITIONAL_FORMAT_ALIAS, CONDITIONAL_FORMAT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CONDITIONAL_FORMAT_NAME "ENTITY_NAME",
                            CONDITIONAL_FORMAT_ID "ENTITY_ID",
                            CONDITIONAL_FORMAT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM CONDITIONAL_FORMAT
                WHERE CONDITIONAL_FORMAT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONDITIONAL_FORMAT;
---------------------------------------------------------------------
PROCEDURE CONTACT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CONTACT_NAME "ENTITY_NAME",
                                    CONTACT_ID "ENTITY_ID",
                                    CONTACT_ALIAS "ENTITY_ALIAS",
                                    CONTACT_STATUS "ENTITY_STATUS"
                            FROM CONTACT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONTACT_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(CONTACT_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CONTACT_ALIAS, CONTACT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CONTACT_NAME "ENTITY_NAME",
                                    CONTACT_ID "ENTITY_ID",
                                    CONTACT_ALIAS "ENTITY_ALIAS",
                                    CONTACT_STATUS "ENTITY_STATUS"
                            FROM CONTACT
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CONTACT_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CONTACT_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONTACT_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CONTACT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONTACT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CONTACT_ALIAS, CONTACT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CONTACT_NAME "ENTITY_NAME",
                            CONTACT_ID "ENTITY_ID",
                            CONTACT_ALIAS "ENTITY_ALIAS",
                                    CONTACT_STATUS "ENTITY_STATUS"
                FROM CONTACT
                WHERE CONTACT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONTACT;
---------------------------------------------------------------------
PROCEDURE CONTRACT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CONTRACT_NAME "ENTITY_NAME",
                                    CONTRACT_ID "ENTITY_ID",
                                    CONTRACT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_CONTRACT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONTRACT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CONTRACT_ALIAS, CONTRACT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CONTRACT_NAME "ENTITY_NAME",
                                    CONTRACT_ID "ENTITY_ID",
                                    CONTRACT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_CONTRACT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CONTRACT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CONTRACT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONTRACT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CONTRACT_ALIAS, CONTRACT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CONTRACT_NAME "ENTITY_NAME",
                            CONTRACT_ID "ENTITY_ID",
                            CONTRACT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SERVICE_CONTRACT
                WHERE CONTRACT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONTRACT;
---------------------------------------------------------------------
PROCEDURE CONTRACT_LIMIT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT LIMIT_NAME "ENTITY_NAME",
                                    LIMIT_ID "ENTITY_ID",
                                    LIMIT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CONTRACT_LIMIT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR LIMIT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, LIMIT_ALIAS, LIMIT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT LIMIT_NAME "ENTITY_NAME",
                                    LIMIT_ID "ENTITY_ID",
                                    LIMIT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM CONTRACT_LIMIT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND LIMIT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND LIMIT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR LIMIT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, LIMIT_ALIAS, LIMIT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT LIMIT_NAME "ENTITY_NAME",
                            LIMIT_ID "ENTITY_ID",
                            LIMIT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM CONTRACT_LIMIT
                WHERE LIMIT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CONTRACT_LIMIT;
---------------------------------------------------------------------
PROCEDURE CUSTOMER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CUSTOMER_NAME "ENTITY_NAME",
                                    CUSTOMER_ID "ENTITY_ID",
                                    CUSTOMER_ALIAS "ENTITY_ALIAS",
                                    CUSTOMER_STATUS "ENTITY_STATUS"
                            FROM CUSTOMER
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CUSTOMER_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(CUSTOMER_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CUSTOMER_ALIAS, CUSTOMER_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CUSTOMER_NAME "ENTITY_NAME",
                                    CUSTOMER_ID "ENTITY_ID",
                                    CUSTOMER_ALIAS "ENTITY_ALIAS",
                                    CUSTOMER_STATUS "ENTITY_STATUS"
                            FROM CUSTOMER
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CUSTOMER_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CUSTOMER_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CUSTOMER_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CUSTOMER_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CUSTOMER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CUSTOMER_ALIAS, CUSTOMER_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CUSTOMER_NAME "ENTITY_NAME",
                            CUSTOMER_ID "ENTITY_ID",
                            CUSTOMER_ALIAS "ENTITY_ALIAS",
                                    CUSTOMER_STATUS "ENTITY_STATUS"
                FROM CUSTOMER
                WHERE CUSTOMER_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END CUSTOMER;
---------------------------------------------------------------------
PROCEDURE DATA_LOCK_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT DATA_LOCK_GROUP_NAME "ENTITY_NAME",
                                    DATA_LOCK_GROUP_ID "ENTITY_ID",
                                    DATA_LOCK_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM DATA_LOCK_GROUP
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR DATA_LOCK_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, DATA_LOCK_GROUP_ALIAS, DATA_LOCK_GROUP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT DATA_LOCK_GROUP_NAME "ENTITY_NAME",
                                    DATA_LOCK_GROUP_ID "ENTITY_ID",
                                    DATA_LOCK_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM DATA_LOCK_GROUP
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND DATA_LOCK_GROUP_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND DATA_LOCK_GROUP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR DATA_LOCK_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, DATA_LOCK_GROUP_ALIAS, DATA_LOCK_GROUP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT DATA_LOCK_GROUP_NAME "ENTITY_NAME",
                            DATA_LOCK_GROUP_ID "ENTITY_ID",
                            DATA_LOCK_GROUP_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM DATA_LOCK_GROUP
                WHERE DATA_LOCK_GROUP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DATA_LOCK_GROUP;
---------------------------------------------------------------------
PROCEDURE DER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT DER_NAME "ENTITY_NAME",
                                    DER_ID "ENTITY_ID",
                                    DER_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM DISTRIBUTED_ENERGY_RESOURCE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR DER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, DER_ALIAS, DER_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT DER_NAME "ENTITY_NAME",
                                    DER_ID "ENTITY_ID",
                                    DER_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM DISTRIBUTED_ENERGY_RESOURCE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND DER_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND DER_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR DER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, DER_ALIAS, DER_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT DER_NAME "ENTITY_NAME",
                            DER_ID "ENTITY_ID",
                            DER_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM DISTRIBUTED_ENERGY_RESOURCE
                WHERE DER_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DER;
---------------------------------------------------------------------
PROCEDURE DER_TYPE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT DER_TYPE_NAME "ENTITY_NAME",
                                    DER_TYPE_ID "ENTITY_ID",
                                    DER_TYPE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM DER_TYPE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR DER_TYPE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, DER_TYPE_ALIAS, DER_TYPE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT DER_TYPE_NAME "ENTITY_NAME",
                                    DER_TYPE_ID "ENTITY_ID",
                                    DER_TYPE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM DER_TYPE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND DER_TYPE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND DER_TYPE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR DER_TYPE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, DER_TYPE_ALIAS, DER_TYPE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT DER_TYPE_NAME "ENTITY_NAME",
                            DER_TYPE_ID "ENTITY_ID",
                            DER_TYPE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM DER_TYPE
                WHERE DER_TYPE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DER_TYPE;
---------------------------------------------------------------------
PROCEDURE DR_EVENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT EVENT_NAME "ENTITY_NAME",
                                    EVENT_ID "ENTITY_ID",
                                    EVENT_ALIAS "ENTITY_ALIAS",
                                    EVENT_STATUS "ENTITY_STATUS"
                            FROM DR_EVENT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EVENT_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(EVENT_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EVENT_ALIAS, EVENT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT EVENT_NAME "ENTITY_NAME",
                                    EVENT_ID "ENTITY_ID",
                                    EVENT_ALIAS "ENTITY_ALIAS",
                                    EVENT_STATUS "ENTITY_STATUS"
                            FROM DR_EVENT
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(EVENT_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND EVENT_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EVENT_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND EVENT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EVENT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EVENT_ALIAS, EVENT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT EVENT_NAME "ENTITY_NAME",
                            EVENT_ID "ENTITY_ID",
                            EVENT_ALIAS "ENTITY_ALIAS",
                                    EVENT_STATUS "ENTITY_STATUS"
                FROM DR_EVENT
                WHERE EVENT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END DR_EVENT;
---------------------------------------------------------------------
PROCEDURE EDC
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT EDC_NAME "ENTITY_NAME",
                                    EDC_ID "ENTITY_ID",
                                    EDC_ALIAS "ENTITY_ALIAS",
                                    EDC_STATUS "ENTITY_STATUS"
                            FROM ENERGY_DISTRIBUTION_COMPANY
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EDC_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(EDC_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EDC_ALIAS, EDC_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT EDC_NAME "ENTITY_NAME",
                                    EDC_ID "ENTITY_ID",
                                    EDC_ALIAS "ENTITY_ALIAS",
                                    EDC_STATUS "ENTITY_STATUS"
                            FROM ENERGY_DISTRIBUTION_COMPANY
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(EDC_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND EDC_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EDC_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND EDC_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EDC_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EDC_ALIAS, EDC_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT EDC_NAME "ENTITY_NAME",
                            EDC_ID "ENTITY_ID",
                            EDC_ALIAS "ENTITY_ALIAS",
                                    EDC_STATUS "ENTITY_STATUS"
                FROM ENERGY_DISTRIBUTION_COMPANY
                WHERE EDC_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END EDC;
---------------------------------------------------------------------
PROCEDURE ENTITY_DOMAIN
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ENTITY_DOMAIN_NAME "ENTITY_NAME",
                                    ENTITY_DOMAIN_ID "ENTITY_ID",
                                    ENTITY_DOMAIN_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ENTITY_DOMAIN
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ENTITY_DOMAIN_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ENTITY_DOMAIN_ALIAS, ENTITY_DOMAIN_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ENTITY_DOMAIN_NAME "ENTITY_NAME",
                                    ENTITY_DOMAIN_ID "ENTITY_ID",
                                    ENTITY_DOMAIN_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ENTITY_DOMAIN
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ENTITY_DOMAIN_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ENTITY_DOMAIN_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ENTITY_DOMAIN_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ENTITY_DOMAIN_ALIAS, ENTITY_DOMAIN_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ENTITY_DOMAIN_NAME "ENTITY_NAME",
                            ENTITY_DOMAIN_ID "ENTITY_ID",
                            ENTITY_DOMAIN_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM ENTITY_DOMAIN
                WHERE ENTITY_DOMAIN_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ENTITY_DOMAIN;
---------------------------------------------------------------------
PROCEDURE ENTITY_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ENTITY_GROUP_NAME "ENTITY_NAME",
                                    ENTITY_GROUP_ID "ENTITY_ID",
                                    ENTITY_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ENTITY_GROUP
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ENTITY_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ENTITY_GROUP_ALIAS, ENTITY_GROUP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ENTITY_GROUP_NAME "ENTITY_NAME",
                                    ENTITY_GROUP_ID "ENTITY_ID",
                                    ENTITY_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM ENTITY_GROUP
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ENTITY_GROUP_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ENTITY_GROUP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ENTITY_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ENTITY_GROUP_ALIAS, ENTITY_GROUP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ENTITY_GROUP_NAME "ENTITY_NAME",
                            ENTITY_GROUP_ID "ENTITY_ID",
                            ENTITY_GROUP_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM ENTITY_GROUP
                WHERE ENTITY_GROUP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ENTITY_GROUP;
---------------------------------------------------------------------
PROCEDURE ESP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ESP_NAME "ENTITY_NAME",
                                    ESP_ID "ENTITY_ID",
                                    ESP_ALIAS "ENTITY_ALIAS",
                                    ESP_STATUS "ENTITY_STATUS"
                            FROM ENERGY_SERVICE_PROVIDER
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ESP_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(ESP_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ESP_ALIAS, ESP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ESP_NAME "ENTITY_NAME",
                                    ESP_ID "ENTITY_ID",
                                    ESP_ALIAS "ENTITY_ALIAS",
                                    ESP_STATUS "ENTITY_STATUS"
                            FROM ENERGY_SERVICE_PROVIDER
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(ESP_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ESP_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ESP_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ESP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ESP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ESP_ALIAS, ESP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ESP_NAME "ENTITY_NAME",
                            ESP_ID "ENTITY_ID",
                            ESP_ALIAS "ENTITY_ALIAS",
                                    ESP_STATUS "ENTITY_STATUS"
                FROM ENERGY_SERVICE_PROVIDER
                WHERE ESP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ESP;
---------------------------------------------------------------------
PROCEDURE ETAG
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ETAG_NAME "ENTITY_NAME",
                                    ETAG_ID "ENTITY_ID",
                                    ETAG_ALIAS "ENTITY_ALIAS",
                                    ETAG_STATUS "ENTITY_STATUS"
                            FROM ETAG
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ETAG_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(ETAG_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ETAG_ALIAS, ETAG_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ETAG_NAME "ENTITY_NAME",
                                    ETAG_ID "ENTITY_ID",
                                    ETAG_ALIAS "ENTITY_ALIAS",
                                    ETAG_STATUS "ENTITY_STATUS"
                            FROM ETAG
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(ETAG_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ETAG_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ETAG_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ETAG_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ETAG_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ETAG_ALIAS, ETAG_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ETAG_NAME "ENTITY_NAME",
                            ETAG_ID "ENTITY_ID",
                            ETAG_ALIAS "ENTITY_ALIAS",
                                    ETAG_STATUS "ENTITY_STATUS"
                FROM ETAG
                WHERE ETAG_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ETAG;
---------------------------------------------------------------------
PROCEDURE EXTERNAL_SYSTEM
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT EXTERNAL_SYSTEM_NAME "ENTITY_NAME",
                                    EXTERNAL_SYSTEM_ID "ENTITY_ID",
                                    EXTERNAL_SYSTEM_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM EXTERNAL_SYSTEM
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EXTERNAL_SYSTEM_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EXTERNAL_SYSTEM_ALIAS, EXTERNAL_SYSTEM_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT EXTERNAL_SYSTEM_NAME "ENTITY_NAME",
                                    EXTERNAL_SYSTEM_ID "ENTITY_ID",
                                    EXTERNAL_SYSTEM_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM EXTERNAL_SYSTEM
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND EXTERNAL_SYSTEM_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND EXTERNAL_SYSTEM_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EXTERNAL_SYSTEM_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EXTERNAL_SYSTEM_ALIAS, EXTERNAL_SYSTEM_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT EXTERNAL_SYSTEM_NAME "ENTITY_NAME",
                            EXTERNAL_SYSTEM_ID "ENTITY_ID",
                            EXTERNAL_SYSTEM_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM EXTERNAL_SYSTEM
                WHERE EXTERNAL_SYSTEM_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END EXTERNAL_SYSTEM;
---------------------------------------------------------------------
PROCEDURE EXTERNAL_TRANSACTION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT TRANSACTION_NAME "ENTITY_NAME",
                                    TRANSACTION_ID "ENTITY_ID",
                                    TRANSACTION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM INTERCHANGE_TRANSACTION_EXT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TRANSACTION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TRANSACTION_ALIAS, TRANSACTION_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT TRANSACTION_NAME "ENTITY_NAME",
                                    TRANSACTION_ID "ENTITY_ID",
                                    TRANSACTION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM INTERCHANGE_TRANSACTION_EXT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND TRANSACTION_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND TRANSACTION_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TRANSACTION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TRANSACTION_ALIAS, TRANSACTION_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT TRANSACTION_NAME "ENTITY_NAME",
                            TRANSACTION_ID "ENTITY_ID",
                            TRANSACTION_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM INTERCHANGE_TRANSACTION_EXT
                WHERE TRANSACTION_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END EXTERNAL_TRANSACTION;
---------------------------------------------------------------------
PROCEDURE GEOGRAPHY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT GEOGRAPHY_NAME "ENTITY_NAME",
                                    GEOGRAPHY_ID "ENTITY_ID",
                                    GEOGRAPHY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM GEOGRAPHY
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR GEOGRAPHY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, GEOGRAPHY_ALIAS, GEOGRAPHY_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT GEOGRAPHY_NAME "ENTITY_NAME",
                                    GEOGRAPHY_ID "ENTITY_ID",
                                    GEOGRAPHY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM GEOGRAPHY
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND GEOGRAPHY_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND GEOGRAPHY_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR GEOGRAPHY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, GEOGRAPHY_ALIAS, GEOGRAPHY_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT GEOGRAPHY_NAME "ENTITY_NAME",
                            GEOGRAPHY_ID "ENTITY_ID",
                            GEOGRAPHY_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM GEOGRAPHY
                WHERE GEOGRAPHY_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END GEOGRAPHY;
---------------------------------------------------------------------
PROCEDURE GROWTH_PATTERN
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PATTERN_NAME "ENTITY_NAME",
                                    PATTERN_ID "ENTITY_ID",
                                    PATTERN_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM GROWTH_PATTERN
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PATTERN_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PATTERN_ALIAS, PATTERN_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PATTERN_NAME "ENTITY_NAME",
                                    PATTERN_ID "ENTITY_ID",
                                    PATTERN_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM GROWTH_PATTERN
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PATTERN_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PATTERN_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PATTERN_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PATTERN_ALIAS, PATTERN_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PATTERN_NAME "ENTITY_NAME",
                            PATTERN_ID "ENTITY_ID",
                            PATTERN_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM GROWTH_PATTERN
                WHERE PATTERN_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END GROWTH_PATTERN;
---------------------------------------------------------------------
PROCEDURE HEAT_RATE_CURVE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT HEAT_RATE_CURVE_NAME "ENTITY_NAME",
                                    HEAT_RATE_CURVE_ID "ENTITY_ID",
                                    HEAT_RATE_CURVE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM HEAT_RATE_CURVE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR HEAT_RATE_CURVE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, HEAT_RATE_CURVE_ALIAS, HEAT_RATE_CURVE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT HEAT_RATE_CURVE_NAME "ENTITY_NAME",
                                    HEAT_RATE_CURVE_ID "ENTITY_ID",
                                    HEAT_RATE_CURVE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM HEAT_RATE_CURVE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND HEAT_RATE_CURVE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND HEAT_RATE_CURVE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR HEAT_RATE_CURVE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, HEAT_RATE_CURVE_ALIAS, HEAT_RATE_CURVE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT HEAT_RATE_CURVE_NAME "ENTITY_NAME",
                            HEAT_RATE_CURVE_ID "ENTITY_ID",
                            HEAT_RATE_CURVE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM HEAT_RATE_CURVE
                WHERE HEAT_RATE_CURVE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END HEAT_RATE_CURVE;
---------------------------------------------------------------------
PROCEDURE HOLIDAY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT HOLIDAY_NAME "ENTITY_NAME",
                                    HOLIDAY_ID "ENTITY_ID",
                                    HOLIDAY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM HOLIDAY
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR HOLIDAY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, HOLIDAY_ALIAS, HOLIDAY_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT HOLIDAY_NAME "ENTITY_NAME",
                                    HOLIDAY_ID "ENTITY_ID",
                                    HOLIDAY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM HOLIDAY
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND HOLIDAY_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND HOLIDAY_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR HOLIDAY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, HOLIDAY_ALIAS, HOLIDAY_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT HOLIDAY_NAME "ENTITY_NAME",
                            HOLIDAY_ID "ENTITY_ID",
                            HOLIDAY_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM HOLIDAY
                WHERE HOLIDAY_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END HOLIDAY;
---------------------------------------------------------------------
PROCEDURE HOLIDAY_SET
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT HOLIDAY_SET_NAME "ENTITY_NAME",
                                    HOLIDAY_SET_ID "ENTITY_ID",
                                    HOLIDAY_SET_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM HOLIDAY_SET
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR HOLIDAY_SET_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, HOLIDAY_SET_ALIAS, HOLIDAY_SET_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT HOLIDAY_SET_NAME "ENTITY_NAME",
                                    HOLIDAY_SET_ID "ENTITY_ID",
                                    HOLIDAY_SET_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM HOLIDAY_SET
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND HOLIDAY_SET_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND HOLIDAY_SET_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR HOLIDAY_SET_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, HOLIDAY_SET_ALIAS, HOLIDAY_SET_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT HOLIDAY_SET_NAME "ENTITY_NAME",
                            HOLIDAY_SET_ID "ENTITY_ID",
                            HOLIDAY_SET_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM HOLIDAY_SET
                WHERE HOLIDAY_SET_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END HOLIDAY_SET;
---------------------------------------------------------------------
PROCEDURE INTERCHANGE_CONTRACT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT CONTRACT_NAME "ENTITY_NAME",
                                    CONTRACT_ID "ENTITY_ID",
                                    CONTRACT_ALIAS "ENTITY_ALIAS",
                                    CONTRACT_STATUS "ENTITY_STATUS"
                            FROM INTERCHANGE_CONTRACT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONTRACT_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(CONTRACT_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CONTRACT_ALIAS, CONTRACT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT CONTRACT_NAME "ENTITY_NAME",
                                    CONTRACT_ID "ENTITY_ID",
                                    CONTRACT_ALIAS "ENTITY_ALIAS",
                                    CONTRACT_STATUS "ENTITY_STATUS"
                            FROM INTERCHANGE_CONTRACT
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(CONTRACT_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND CONTRACT_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONTRACT_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND CONTRACT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR CONTRACT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, CONTRACT_ALIAS, CONTRACT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT CONTRACT_NAME "ENTITY_NAME",
                            CONTRACT_ID "ENTITY_ID",
                            CONTRACT_ALIAS "ENTITY_ALIAS",
                                    CONTRACT_STATUS "ENTITY_STATUS"
                FROM INTERCHANGE_CONTRACT
                WHERE CONTRACT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END INTERCHANGE_CONTRACT;
---------------------------------------------------------------------
PROCEDURE INVOICE_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT INVOICE_GROUP_NAME "ENTITY_NAME",
                                    INVOICE_GROUP_ID "ENTITY_ID",
                                    INVOICE_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM INVOICE_GROUP
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR INVOICE_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, INVOICE_GROUP_ALIAS, INVOICE_GROUP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT INVOICE_GROUP_NAME "ENTITY_NAME",
                                    INVOICE_GROUP_ID "ENTITY_ID",
                                    INVOICE_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM INVOICE_GROUP
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND INVOICE_GROUP_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND INVOICE_GROUP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR INVOICE_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, INVOICE_GROUP_ALIAS, INVOICE_GROUP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT INVOICE_GROUP_NAME "ENTITY_NAME",
                            INVOICE_GROUP_ID "ENTITY_ID",
                            INVOICE_GROUP_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM INVOICE_GROUP
                WHERE INVOICE_GROUP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END INVOICE_GROUP;
---------------------------------------------------------------------
PROCEDURE IT_COMMODITY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT COMMODITY_NAME "ENTITY_NAME",
                                    COMMODITY_ID "ENTITY_ID",
                                    COMMODITY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM IT_COMMODITY
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR COMMODITY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, COMMODITY_ALIAS, COMMODITY_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT COMMODITY_NAME "ENTITY_NAME",
                                    COMMODITY_ID "ENTITY_ID",
                                    COMMODITY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM IT_COMMODITY
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND COMMODITY_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND COMMODITY_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR COMMODITY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, COMMODITY_ALIAS, COMMODITY_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT COMMODITY_NAME "ENTITY_NAME",
                            COMMODITY_ID "ENTITY_ID",
                            COMMODITY_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM IT_COMMODITY
                WHERE COMMODITY_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END IT_COMMODITY;
---------------------------------------------------------------------
PROCEDURE JOB_THREAD
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT JOB_THREAD_NAME "ENTITY_NAME",
                                    JOB_THREAD_ID "ENTITY_ID",
                                    JOB_THREAD_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM JOB_THREAD
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR JOB_THREAD_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, JOB_THREAD_ALIAS, JOB_THREAD_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT JOB_THREAD_NAME "ENTITY_NAME",
                                    JOB_THREAD_ID "ENTITY_ID",
                                    JOB_THREAD_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM JOB_THREAD
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND JOB_THREAD_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND JOB_THREAD_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR JOB_THREAD_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, JOB_THREAD_ALIAS, JOB_THREAD_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT JOB_THREAD_NAME "ENTITY_NAME",
                            JOB_THREAD_ID "ENTITY_ID",
                            JOB_THREAD_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM JOB_THREAD
                WHERE JOB_THREAD_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END JOB_THREAD;
---------------------------------------------------------------------
PROCEDURE LOAD_PROFILE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PROFILE_NAME "ENTITY_NAME",
                                    PROFILE_ID "ENTITY_ID",
                                    PROFILE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM LOAD_PROFILE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROFILE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROFILE_ALIAS, PROFILE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PROFILE_NAME "ENTITY_NAME",
                                    PROFILE_ID "ENTITY_ID",
                                    PROFILE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM LOAD_PROFILE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PROFILE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PROFILE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROFILE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROFILE_ALIAS, PROFILE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PROFILE_NAME "ENTITY_NAME",
                            PROFILE_ID "ENTITY_ID",
                            PROFILE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM LOAD_PROFILE
                WHERE PROFILE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOAD_PROFILE;
---------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_LIBRARY
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PROFILE_LIBRARY_NAME "ENTITY_NAME",
                                    PROFILE_LIBRARY_ID "ENTITY_ID",
                                    PROFILE_LIBRARY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM LOAD_PROFILE_LIBRARY
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROFILE_LIBRARY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROFILE_LIBRARY_ALIAS, PROFILE_LIBRARY_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PROFILE_LIBRARY_NAME "ENTITY_NAME",
                                    PROFILE_LIBRARY_ID "ENTITY_ID",
                                    PROFILE_LIBRARY_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM LOAD_PROFILE_LIBRARY
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PROFILE_LIBRARY_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PROFILE_LIBRARY_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROFILE_LIBRARY_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROFILE_LIBRARY_ALIAS, PROFILE_LIBRARY_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PROFILE_LIBRARY_NAME "ENTITY_NAME",
                            PROFILE_LIBRARY_ID "ENTITY_ID",
                            PROFILE_LIBRARY_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM LOAD_PROFILE_LIBRARY
                WHERE PROFILE_LIBRARY_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOAD_PROFILE_LIBRARY;
---------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_SET
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PROFILE_SET_NAME "ENTITY_NAME",
                                    PROFILE_SET_ID "ENTITY_ID",
                                    PROFILE_SET_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM LOAD_PROFILE_SET
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROFILE_SET_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROFILE_SET_ALIAS, PROFILE_SET_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PROFILE_SET_NAME "ENTITY_NAME",
                                    PROFILE_SET_ID "ENTITY_ID",
                                    PROFILE_SET_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM LOAD_PROFILE_SET
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PROFILE_SET_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PROFILE_SET_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROFILE_SET_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROFILE_SET_ALIAS, PROFILE_SET_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PROFILE_SET_NAME "ENTITY_NAME",
                            PROFILE_SET_ID "ENTITY_ID",
                            PROFILE_SET_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM LOAD_PROFILE_SET
                WHERE PROFILE_SET_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOAD_PROFILE_SET;
---------------------------------------------------------------------
PROCEDURE LOSS_FACTOR
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT LOSS_FACTOR_NAME "ENTITY_NAME",
                                    LOSS_FACTOR_ID "ENTITY_ID",
                                    LOSS_FACTOR_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM LOSS_FACTOR
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR LOSS_FACTOR_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, LOSS_FACTOR_ALIAS, LOSS_FACTOR_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT LOSS_FACTOR_NAME "ENTITY_NAME",
                                    LOSS_FACTOR_ID "ENTITY_ID",
                                    LOSS_FACTOR_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM LOSS_FACTOR
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND LOSS_FACTOR_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND LOSS_FACTOR_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR LOSS_FACTOR_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, LOSS_FACTOR_ALIAS, LOSS_FACTOR_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT LOSS_FACTOR_NAME "ENTITY_NAME",
                            LOSS_FACTOR_ID "ENTITY_ID",
                            LOSS_FACTOR_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM LOSS_FACTOR
                WHERE LOSS_FACTOR_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END LOSS_FACTOR;
---------------------------------------------------------------------
PROCEDURE MARKET_PRICE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT MARKET_PRICE_NAME "ENTITY_NAME",
                                    MARKET_PRICE_ID "ENTITY_ID",
                                    MARKET_PRICE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM MARKET_PRICE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR MARKET_PRICE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, MARKET_PRICE_ALIAS, MARKET_PRICE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT MARKET_PRICE_NAME "ENTITY_NAME",
                                    MARKET_PRICE_ID "ENTITY_ID",
                                    MARKET_PRICE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM MARKET_PRICE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND MARKET_PRICE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND MARKET_PRICE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR MARKET_PRICE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, MARKET_PRICE_ALIAS, MARKET_PRICE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT MARKET_PRICE_NAME "ENTITY_NAME",
                            MARKET_PRICE_ID "ENTITY_ID",
                            MARKET_PRICE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM MARKET_PRICE
                WHERE MARKET_PRICE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END MARKET_PRICE;
---------------------------------------------------------------------
PROCEDURE MEASUREMENT_SOURCE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT MEASUREMENT_SOURCE_NAME "ENTITY_NAME",
                                    MEASUREMENT_SOURCE_ID "ENTITY_ID",
                                    MEASUREMENT_SOURCE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM MEASUREMENT_SOURCE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR MEASUREMENT_SOURCE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, MEASUREMENT_SOURCE_ALIAS, MEASUREMENT_SOURCE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT MEASUREMENT_SOURCE_NAME "ENTITY_NAME",
                                    MEASUREMENT_SOURCE_ID "ENTITY_ID",
                                    MEASUREMENT_SOURCE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM MEASUREMENT_SOURCE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND MEASUREMENT_SOURCE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND MEASUREMENT_SOURCE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR MEASUREMENT_SOURCE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, MEASUREMENT_SOURCE_ALIAS, MEASUREMENT_SOURCE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT MEASUREMENT_SOURCE_NAME "ENTITY_NAME",
                            MEASUREMENT_SOURCE_ID "ENTITY_ID",
                            MEASUREMENT_SOURCE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM MEASUREMENT_SOURCE
                WHERE MEASUREMENT_SOURCE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END MEASUREMENT_SOURCE;
---------------------------------------------------------------------
PROCEDURE METER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT METER_NAME "ENTITY_NAME",
                                    METER_ID "ENTITY_ID",
                                    METER_ALIAS "ENTITY_ALIAS",
                                    METER_STATUS "ENTITY_STATUS"
                            FROM METER
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR METER_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(METER_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, METER_ALIAS, METER_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT METER_NAME "ENTITY_NAME",
                                    METER_ID "ENTITY_ID",
                                    METER_ALIAS "ENTITY_ALIAS",
                                    METER_STATUS "ENTITY_STATUS"
                            FROM METER
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(METER_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND METER_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR METER_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND METER_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR METER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, METER_ALIAS, METER_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT METER_NAME "ENTITY_NAME",
                            METER_ID "ENTITY_ID",
                            METER_ALIAS "ENTITY_ALIAS",
                                    METER_STATUS "ENTITY_STATUS"
                FROM METER
                WHERE METER_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END METER;
---------------------------------------------------------------------
PROCEDURE MRSP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT MRSP_NAME "ENTITY_NAME",
                                    MRSP_ID "ENTITY_ID",
                                    MRSP_ALIAS "ENTITY_ALIAS",
                                    MRSP_STATUS "ENTITY_STATUS"
                            FROM METER_READING_SERVICE_PROVIDER
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR MRSP_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(MRSP_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, MRSP_ALIAS, MRSP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT MRSP_NAME "ENTITY_NAME",
                                    MRSP_ID "ENTITY_ID",
                                    MRSP_ALIAS "ENTITY_ALIAS",
                                    MRSP_STATUS "ENTITY_STATUS"
                            FROM METER_READING_SERVICE_PROVIDER
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(MRSP_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND MRSP_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR MRSP_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND MRSP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR MRSP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, MRSP_ALIAS, MRSP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT MRSP_NAME "ENTITY_NAME",
                            MRSP_ID "ENTITY_ID",
                            MRSP_ALIAS "ENTITY_ALIAS",
                                    MRSP_STATUS "ENTITY_STATUS"
                FROM METER_READING_SERVICE_PROVIDER
                WHERE MRSP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END MRSP;
---------------------------------------------------------------------
PROCEDURE OASIS_NODE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT OASIS_NODE_NAME "ENTITY_NAME",
                                    OASIS_NODE_ID "ENTITY_ID",
                                    OASIS_NODE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM OASIS_NODE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR OASIS_NODE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, OASIS_NODE_ALIAS, OASIS_NODE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT OASIS_NODE_NAME "ENTITY_NAME",
                                    OASIS_NODE_ID "ENTITY_ID",
                                    OASIS_NODE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM OASIS_NODE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND OASIS_NODE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND OASIS_NODE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR OASIS_NODE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, OASIS_NODE_ALIAS, OASIS_NODE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT OASIS_NODE_NAME "ENTITY_NAME",
                            OASIS_NODE_ID "ENTITY_ID",
                            OASIS_NODE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM OASIS_NODE
                WHERE OASIS_NODE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END OASIS_NODE;
---------------------------------------------------------------------
PROCEDURE PATH
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PATH_NAME "ENTITY_NAME",
                                    PATH_ID "ENTITY_ID",
                                    PATH_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_PATH
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PATH_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PATH_ALIAS, PATH_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PATH_NAME "ENTITY_NAME",
                                    PATH_ID "ENTITY_ID",
                                    PATH_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_PATH
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PATH_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PATH_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PATH_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PATH_ALIAS, PATH_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PATH_NAME "ENTITY_NAME",
                            PATH_ID "ENTITY_ID",
                            PATH_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TX_PATH
                WHERE PATH_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PATH;
---------------------------------------------------------------------
PROCEDURE PERIOD
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PERIOD_NAME "ENTITY_NAME",
                                    PERIOD_ID "ENTITY_ID",
                                    PERIOD_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PERIOD
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PERIOD_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PERIOD_ALIAS, PERIOD_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PERIOD_NAME "ENTITY_NAME",
                                    PERIOD_ID "ENTITY_ID",
                                    PERIOD_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PERIOD
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PERIOD_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PERIOD_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PERIOD_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PERIOD_ALIAS, PERIOD_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PERIOD_NAME "ENTITY_NAME",
                            PERIOD_ID "ENTITY_ID",
                            PERIOD_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM PERIOD
                WHERE PERIOD_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PERIOD;
---------------------------------------------------------------------
PROCEDURE PIPELINE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PIPELINE_NAME "ENTITY_NAME",
                                    PIPELINE_ID "ENTITY_ID",
                                    PIPELINE_ALIAS "ENTITY_ALIAS",
                                    PIPELINE_STATUS "ENTITY_STATUS"
                            FROM PIPELINE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PIPELINE_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(PIPELINE_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PIPELINE_ALIAS, PIPELINE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PIPELINE_NAME "ENTITY_NAME",
                                    PIPELINE_ID "ENTITY_ID",
                                    PIPELINE_ALIAS "ENTITY_ALIAS",
                                    PIPELINE_STATUS "ENTITY_STATUS"
                            FROM PIPELINE
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(PIPELINE_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PIPELINE_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PIPELINE_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PIPELINE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PIPELINE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PIPELINE_ALIAS, PIPELINE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PIPELINE_NAME "ENTITY_NAME",
                            PIPELINE_ID "ENTITY_ID",
                            PIPELINE_ALIAS "ENTITY_ALIAS",
                                    PIPELINE_STATUS "ENTITY_STATUS"
                FROM PIPELINE
                WHERE PIPELINE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PIPELINE;
---------------------------------------------------------------------
PROCEDURE POOL
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT POOL_NAME "ENTITY_NAME",
                                    POOL_ID "ENTITY_ID",
                                    POOL_ALIAS "ENTITY_ALIAS",
                                    POOL_STATUS "ENTITY_STATUS"
                            FROM POOL
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR POOL_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(POOL_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, POOL_ALIAS, POOL_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT POOL_NAME "ENTITY_NAME",
                                    POOL_ID "ENTITY_ID",
                                    POOL_ALIAS "ENTITY_ALIAS",
                                    POOL_STATUS "ENTITY_STATUS"
                            FROM POOL
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(POOL_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND POOL_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR POOL_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND POOL_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR POOL_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, POOL_ALIAS, POOL_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT POOL_NAME "ENTITY_NAME",
                            POOL_ID "ENTITY_ID",
                            POOL_ALIAS "ENTITY_ALIAS",
                                    POOL_STATUS "ENTITY_STATUS"
                FROM POOL
                WHERE POOL_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END POOL;
---------------------------------------------------------------------
PROCEDURE PORTFOLIO
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PORTFOLIO_NAME "ENTITY_NAME",
                                    PORTFOLIO_ID "ENTITY_ID",
                                    PORTFOLIO_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PORTFOLIO
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PORTFOLIO_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PORTFOLIO_ALIAS, PORTFOLIO_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PORTFOLIO_NAME "ENTITY_NAME",
                                    PORTFOLIO_ID "ENTITY_ID",
                                    PORTFOLIO_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PORTFOLIO
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PORTFOLIO_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PORTFOLIO_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PORTFOLIO_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PORTFOLIO_ALIAS, PORTFOLIO_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PORTFOLIO_NAME "ENTITY_NAME",
                            PORTFOLIO_ID "ENTITY_ID",
                            PORTFOLIO_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM PORTFOLIO
                WHERE PORTFOLIO_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PORTFOLIO;
---------------------------------------------------------------------
PROCEDURE POSITION_EVALUATION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT EVALUATION_NAME "ENTITY_NAME",
                                    EVALUATION_ID "ENTITY_ID",
                                    EVALUATION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM POSITION_ANALYSIS_EVALUATION
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EVALUATION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EVALUATION_ALIAS, EVALUATION_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT EVALUATION_NAME "ENTITY_NAME",
                                    EVALUATION_ID "ENTITY_ID",
                                    EVALUATION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM POSITION_ANALYSIS_EVALUATION
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND EVALUATION_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND EVALUATION_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EVALUATION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EVALUATION_ALIAS, EVALUATION_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT EVALUATION_NAME "ENTITY_NAME",
                            EVALUATION_ID "ENTITY_ID",
                            EVALUATION_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM POSITION_ANALYSIS_EVALUATION
                WHERE EVALUATION_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END POSITION_EVALUATION;
---------------------------------------------------------------------
PROCEDURE PRODUCT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PRODUCT_NAME "ENTITY_NAME",
                                    PRODUCT_ID "ENTITY_ID",
                                    PRODUCT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PRODUCT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PRODUCT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PRODUCT_ALIAS, PRODUCT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PRODUCT_NAME "ENTITY_NAME",
                                    PRODUCT_ID "ENTITY_ID",
                                    PRODUCT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PRODUCT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PRODUCT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PRODUCT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PRODUCT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PRODUCT_ALIAS, PRODUCT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PRODUCT_NAME "ENTITY_NAME",
                            PRODUCT_ID "ENTITY_ID",
                            PRODUCT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM PRODUCT
                WHERE PRODUCT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PRODUCT;
---------------------------------------------------------------------
PROCEDURE PROGRAM
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PROGRAM_NAME "ENTITY_NAME",
                                    PROGRAM_ID "ENTITY_ID",
                                    PROGRAM_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PROGRAM
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROGRAM_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROGRAM_ALIAS, PROGRAM_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PROGRAM_NAME "ENTITY_NAME",
                                    PROGRAM_ID "ENTITY_ID",
                                    PROGRAM_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PROGRAM
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PROGRAM_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PROGRAM_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROGRAM_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROGRAM_ALIAS, PROGRAM_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PROGRAM_NAME "ENTITY_NAME",
                            PROGRAM_ID "ENTITY_ID",
                            PROGRAM_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM PROGRAM
                WHERE PROGRAM_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PROGRAM;
---------------------------------------------------------------------
PROCEDURE PROSPECT_SCREEN
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SCREEN_NAME "ENTITY_NAME",
                                    SCREEN_ID "ENTITY_ID",
                                    SCREEN_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PROSPECT_SCREEN
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SCREEN_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SCREEN_ALIAS, SCREEN_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SCREEN_NAME "ENTITY_NAME",
                                    SCREEN_ID "ENTITY_ID",
                                    SCREEN_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PROSPECT_SCREEN
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SCREEN_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SCREEN_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SCREEN_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SCREEN_ALIAS, SCREEN_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SCREEN_NAME "ENTITY_NAME",
                            SCREEN_ID "ENTITY_ID",
                            SCREEN_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM PROSPECT_SCREEN
                WHERE SCREEN_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PROSPECT_SCREEN;
---------------------------------------------------------------------
PROCEDURE PROXY_DAY_METHOD
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PROXY_DAY_METHOD_NAME "ENTITY_NAME",
                                    PROXY_DAY_METHOD_ID "ENTITY_ID",
                                    PROXY_DAY_METHOD_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PROXY_DAY_METHOD
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROXY_DAY_METHOD_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROXY_DAY_METHOD_ALIAS, PROXY_DAY_METHOD_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PROXY_DAY_METHOD_NAME "ENTITY_NAME",
                                    PROXY_DAY_METHOD_ID "ENTITY_ID",
                                    PROXY_DAY_METHOD_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM PROXY_DAY_METHOD
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PROXY_DAY_METHOD_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PROXY_DAY_METHOD_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PROXY_DAY_METHOD_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PROXY_DAY_METHOD_ALIAS, PROXY_DAY_METHOD_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PROXY_DAY_METHOD_NAME "ENTITY_NAME",
                            PROXY_DAY_METHOD_ID "ENTITY_ID",
                            PROXY_DAY_METHOD_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM PROXY_DAY_METHOD
                WHERE PROXY_DAY_METHOD_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PROXY_DAY_METHOD;
---------------------------------------------------------------------
PROCEDURE PSE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PSE_NAME "ENTITY_NAME",
                                    PSE_ID "ENTITY_ID",
                                    PSE_ALIAS "ENTITY_ALIAS",
                                    PSE_STATUS "ENTITY_STATUS"
                            FROM PURCHASING_SELLING_ENTITY
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PSE_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(PSE_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PSE_ALIAS, PSE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PSE_NAME "ENTITY_NAME",
                                    PSE_ID "ENTITY_ID",
                                    PSE_ALIAS "ENTITY_ALIAS",
                                    PSE_STATUS "ENTITY_STATUS"
                            FROM PURCHASING_SELLING_ENTITY
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(PSE_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PSE_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PSE_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PSE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PSE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PSE_ALIAS, PSE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PSE_NAME "ENTITY_NAME",
                            PSE_ID "ENTITY_ID",
                            PSE_ALIAS "ENTITY_ALIAS",
                                    PSE_STATUS "ENTITY_STATUS"
                FROM PURCHASING_SELLING_ENTITY
                WHERE PSE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END PSE;
---------------------------------------------------------------------
PROCEDURE QUOTE_REQUEST
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT QUOTE_NAME "ENTITY_NAME",
                                    QUOTE_ID "ENTITY_ID",
                                    QUOTE_ALIAS "ENTITY_ALIAS",
                                    QUOTE_STATUS "ENTITY_STATUS"
                            FROM QUOTE_REQUEST
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR QUOTE_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(QUOTE_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, QUOTE_ALIAS, QUOTE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT QUOTE_NAME "ENTITY_NAME",
                                    QUOTE_ID "ENTITY_ID",
                                    QUOTE_ALIAS "ENTITY_ALIAS",
                                    QUOTE_STATUS "ENTITY_STATUS"
                            FROM QUOTE_REQUEST
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(QUOTE_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND QUOTE_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR QUOTE_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND QUOTE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR QUOTE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, QUOTE_ALIAS, QUOTE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT QUOTE_NAME "ENTITY_NAME",
                            QUOTE_ID "ENTITY_ID",
                            QUOTE_ALIAS "ENTITY_ALIAS",
                                    QUOTE_STATUS "ENTITY_STATUS"
                FROM QUOTE_REQUEST
                WHERE QUOTE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END QUOTE_REQUEST;
---------------------------------------------------------------------
PROCEDURE REACTOR_PROCEDURE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT REACTOR_PROCEDURE_NAME "ENTITY_NAME",
                                    REACTOR_PROCEDURE_ID "ENTITY_ID",
                                    REACTOR_PROCEDURE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM REACTOR_PROCEDURE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR REACTOR_PROCEDURE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, REACTOR_PROCEDURE_ALIAS, REACTOR_PROCEDURE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT REACTOR_PROCEDURE_NAME "ENTITY_NAME",
                                    REACTOR_PROCEDURE_ID "ENTITY_ID",
                                    REACTOR_PROCEDURE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM REACTOR_PROCEDURE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND REACTOR_PROCEDURE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND REACTOR_PROCEDURE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR REACTOR_PROCEDURE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, REACTOR_PROCEDURE_ALIAS, REACTOR_PROCEDURE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT REACTOR_PROCEDURE_NAME "ENTITY_NAME",
                            REACTOR_PROCEDURE_ID "ENTITY_ID",
                            REACTOR_PROCEDURE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM REACTOR_PROCEDURE
                WHERE REACTOR_PROCEDURE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END REACTOR_PROCEDURE;
---------------------------------------------------------------------
PROCEDURE RESOURCE_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT RESOURCE_GROUP_NAME "ENTITY_NAME",
                                    RESOURCE_GROUP_ID "ENTITY_ID",
                                    RESOURCE_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SUPPLY_RESOURCE_GROUP
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR RESOURCE_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, RESOURCE_GROUP_ALIAS, RESOURCE_GROUP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT RESOURCE_GROUP_NAME "ENTITY_NAME",
                                    RESOURCE_GROUP_ID "ENTITY_ID",
                                    RESOURCE_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SUPPLY_RESOURCE_GROUP
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND RESOURCE_GROUP_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND RESOURCE_GROUP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR RESOURCE_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, RESOURCE_GROUP_ALIAS, RESOURCE_GROUP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT RESOURCE_GROUP_NAME "ENTITY_NAME",
                            RESOURCE_GROUP_ID "ENTITY_ID",
                            RESOURCE_GROUP_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SUPPLY_RESOURCE_GROUP
                WHERE RESOURCE_GROUP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END RESOURCE_GROUP;
---------------------------------------------------------------------
PROCEDURE ROLLUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ROLLUP_NAME "ENTITY_NAME",
                                    ROLLUP_ID "ENTITY_ID",
                                    ROLLUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM RTO_ROLLUP
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ROLLUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ROLLUP_ALIAS, ROLLUP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ROLLUP_NAME "ENTITY_NAME",
                                    ROLLUP_ID "ENTITY_ID",
                                    ROLLUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM RTO_ROLLUP
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ROLLUP_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ROLLUP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ROLLUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ROLLUP_ALIAS, ROLLUP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ROLLUP_NAME "ENTITY_NAME",
                            ROLLUP_ID "ENTITY_ID",
                            ROLLUP_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM RTO_ROLLUP
                WHERE ROLLUP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ROLLUP;
---------------------------------------------------------------------
PROCEDURE SC
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SC_NAME "ENTITY_NAME",
                                    SC_ID "ENTITY_ID",
                                    SC_ALIAS "ENTITY_ALIAS",
                                    SC_STATUS "ENTITY_STATUS"
                            FROM SCHEDULE_COORDINATOR
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SC_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(SC_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SC_ALIAS, SC_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SC_NAME "ENTITY_NAME",
                                    SC_ID "ENTITY_ID",
                                    SC_ALIAS "ENTITY_ALIAS",
                                    SC_STATUS "ENTITY_STATUS"
                            FROM SCHEDULE_COORDINATOR
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(SC_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SC_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SC_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SC_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SC_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SC_ALIAS, SC_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SC_NAME "ENTITY_NAME",
                            SC_ID "ENTITY_ID",
                            SC_ALIAS "ENTITY_ALIAS",
                                    SC_STATUS "ENTITY_STATUS"
                FROM SCHEDULE_COORDINATOR
                WHERE SC_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SC;
---------------------------------------------------------------------
PROCEDURE SCENARIO
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SCENARIO_NAME "ENTITY_NAME",
                                    SCENARIO_ID "ENTITY_ID",
                                    SCENARIO_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SCENARIO
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SCENARIO_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SCENARIO_ALIAS, SCENARIO_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SCENARIO_NAME "ENTITY_NAME",
                                    SCENARIO_ID "ENTITY_ID",
                                    SCENARIO_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SCENARIO
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SCENARIO_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SCENARIO_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SCENARIO_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SCENARIO_ALIAS, SCENARIO_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SCENARIO_NAME "ENTITY_NAME",
                            SCENARIO_ID "ENTITY_ID",
                            SCENARIO_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SCENARIO
                WHERE SCENARIO_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SCENARIO;
---------------------------------------------------------------------
PROCEDURE SCHEDULE_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SCHEDULE_GROUP_NAME "ENTITY_NAME",
                                    SCHEDULE_GROUP_ID "ENTITY_ID",
                                    SCHEDULE_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SCHEDULE_GROUP
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SCHEDULE_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SCHEDULE_GROUP_ALIAS, SCHEDULE_GROUP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SCHEDULE_GROUP_NAME "ENTITY_NAME",
                                    SCHEDULE_GROUP_ID "ENTITY_ID",
                                    SCHEDULE_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SCHEDULE_GROUP
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SCHEDULE_GROUP_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SCHEDULE_GROUP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SCHEDULE_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SCHEDULE_GROUP_ALIAS, SCHEDULE_GROUP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SCHEDULE_GROUP_NAME "ENTITY_NAME",
                            SCHEDULE_GROUP_ID "ENTITY_ID",
                            SCHEDULE_GROUP_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SCHEDULE_GROUP
                WHERE SCHEDULE_GROUP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SCHEDULE_GROUP;
---------------------------------------------------------------------
PROCEDURE SEASON
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SEASON_NAME "ENTITY_NAME",
                                    SEASON_ID "ENTITY_ID",
                                    SEASON_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SEASON
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SEASON_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SEASON_ALIAS, SEASON_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SEASON_NAME "ENTITY_NAME",
                                    SEASON_ID "ENTITY_ID",
                                    SEASON_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SEASON
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SEASON_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SEASON_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SEASON_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SEASON_ALIAS, SEASON_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SEASON_NAME "ENTITY_NAME",
                            SEASON_ID "ENTITY_ID",
                            SEASON_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SEASON
                WHERE SEASON_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SEASON;
---------------------------------------------------------------------
PROCEDURE SEGMENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SEGMENT_NAME "ENTITY_NAME",
                                    SEGMENT_ID "ENTITY_ID",
                                    SEGMENT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SEGMENT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SEGMENT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SEGMENT_ALIAS, SEGMENT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SEGMENT_NAME "ENTITY_NAME",
                                    SEGMENT_ID "ENTITY_ID",
                                    SEGMENT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SEGMENT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SEGMENT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SEGMENT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SEGMENT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SEGMENT_ALIAS, SEGMENT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SEGMENT_NAME "ENTITY_NAME",
                            SEGMENT_ID "ENTITY_ID",
                            SEGMENT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TX_SEGMENT
                WHERE SEGMENT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SEGMENT;
---------------------------------------------------------------------
PROCEDURE SERVICE_AREA
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_AREA_NAME "ENTITY_NAME",
                                    SERVICE_AREA_ID "ENTITY_ID",
                                    SERVICE_AREA_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_AREA
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_AREA_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_AREA_ALIAS, SERVICE_AREA_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_AREA_NAME "ENTITY_NAME",
                                    SERVICE_AREA_ID "ENTITY_ID",
                                    SERVICE_AREA_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_AREA
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SERVICE_AREA_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SERVICE_AREA_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_AREA_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_AREA_ALIAS, SERVICE_AREA_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SERVICE_AREA_NAME "ENTITY_NAME",
                            SERVICE_AREA_ID "ENTITY_ID",
                            SERVICE_AREA_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SERVICE_AREA
                WHERE SERVICE_AREA_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_AREA;
---------------------------------------------------------------------
PROCEDURE SERVICE_LOCATION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_LOCATION_NAME "ENTITY_NAME",
                                    SERVICE_LOCATION_ID "ENTITY_ID",
                                    SERVICE_LOCATION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_LOCATION
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_LOCATION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_LOCATION_ALIAS, SERVICE_LOCATION_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_LOCATION_NAME "ENTITY_NAME",
                                    SERVICE_LOCATION_ID "ENTITY_ID",
                                    SERVICE_LOCATION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_LOCATION
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SERVICE_LOCATION_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SERVICE_LOCATION_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_LOCATION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_LOCATION_ALIAS, SERVICE_LOCATION_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SERVICE_LOCATION_NAME "ENTITY_NAME",
                            SERVICE_LOCATION_ID "ENTITY_ID",
                            SERVICE_LOCATION_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SERVICE_LOCATION
                WHERE SERVICE_LOCATION_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_LOCATION;
---------------------------------------------------------------------
PROCEDURE SERVICE_POINT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_POINT_NAME "ENTITY_NAME",
                                    SERVICE_POINT_ID "ENTITY_ID",
                                    SERVICE_POINT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_POINT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_POINT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_POINT_ALIAS, SERVICE_POINT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_POINT_NAME "ENTITY_NAME",
                                    SERVICE_POINT_ID "ENTITY_ID",
                                    SERVICE_POINT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_POINT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SERVICE_POINT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SERVICE_POINT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_POINT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_POINT_ALIAS, SERVICE_POINT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SERVICE_POINT_NAME "ENTITY_NAME",
                            SERVICE_POINT_ID "ENTITY_ID",
                            SERVICE_POINT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SERVICE_POINT
                WHERE SERVICE_POINT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_POINT;
---------------------------------------------------------------------
PROCEDURE SERVICE_REGION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_REGION_NAME "ENTITY_NAME",
                                    SERVICE_REGION_ID "ENTITY_ID",
                                    SERVICE_REGION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_REGION
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_REGION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_REGION_ALIAS, SERVICE_REGION_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_REGION_NAME "ENTITY_NAME",
                                    SERVICE_REGION_ID "ENTITY_ID",
                                    SERVICE_REGION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_REGION
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SERVICE_REGION_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SERVICE_REGION_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_REGION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_REGION_ALIAS, SERVICE_REGION_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SERVICE_REGION_NAME "ENTITY_NAME",
                            SERVICE_REGION_ID "ENTITY_ID",
                            SERVICE_REGION_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SERVICE_REGION
                WHERE SERVICE_REGION_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_REGION;
---------------------------------------------------------------------
PROCEDURE SERVICE_TYPE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_TYPE_NAME "ENTITY_NAME",
                                    SERVICE_TYPE_ID "ENTITY_ID",
                                    SERVICE_TYPE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SERVICE_TYPE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_TYPE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_TYPE_ALIAS, SERVICE_TYPE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_TYPE_NAME "ENTITY_NAME",
                                    SERVICE_TYPE_ID "ENTITY_ID",
                                    SERVICE_TYPE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SERVICE_TYPE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SERVICE_TYPE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SERVICE_TYPE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_TYPE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_TYPE_ALIAS, SERVICE_TYPE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SERVICE_TYPE_NAME "ENTITY_NAME",
                            SERVICE_TYPE_ID "ENTITY_ID",
                            SERVICE_TYPE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TX_SERVICE_TYPE
                WHERE SERVICE_TYPE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_TYPE;
---------------------------------------------------------------------
PROCEDURE SERVICE_ZONE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_ZONE_NAME "ENTITY_NAME",
                                    SERVICE_ZONE_ID "ENTITY_ID",
                                    SERVICE_ZONE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_ZONE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_ZONE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_ZONE_ALIAS, SERVICE_ZONE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SERVICE_ZONE_NAME "ENTITY_NAME",
                                    SERVICE_ZONE_ID "ENTITY_ID",
                                    SERVICE_ZONE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SERVICE_ZONE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SERVICE_ZONE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SERVICE_ZONE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SERVICE_ZONE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SERVICE_ZONE_ALIAS, SERVICE_ZONE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SERVICE_ZONE_NAME "ENTITY_NAME",
                            SERVICE_ZONE_ID "ENTITY_ID",
                            SERVICE_ZONE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SERVICE_ZONE
                WHERE SERVICE_ZONE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SERVICE_ZONE;
---------------------------------------------------------------------
PROCEDURE SETTLEMENT_TYPE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SETTLEMENT_TYPE_NAME "ENTITY_NAME",
                                    SETTLEMENT_TYPE_ID "ENTITY_ID",
                                    SETTLEMENT_TYPE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SETTLEMENT_TYPE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SETTLEMENT_TYPE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SETTLEMENT_TYPE_ALIAS, SETTLEMENT_TYPE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SETTLEMENT_TYPE_NAME "ENTITY_NAME",
                                    SETTLEMENT_TYPE_ID "ENTITY_ID",
                                    SETTLEMENT_TYPE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SETTLEMENT_TYPE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SETTLEMENT_TYPE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SETTLEMENT_TYPE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SETTLEMENT_TYPE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SETTLEMENT_TYPE_ALIAS, SETTLEMENT_TYPE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SETTLEMENT_TYPE_NAME "ENTITY_NAME",
                            SETTLEMENT_TYPE_ID "ENTITY_ID",
                            SETTLEMENT_TYPE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SETTLEMENT_TYPE
                WHERE SETTLEMENT_TYPE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SETTLEMENT_TYPE;
---------------------------------------------------------------------
PROCEDURE STATEMENT_TYPE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT STATEMENT_TYPE_NAME "ENTITY_NAME",
                                    STATEMENT_TYPE_ID "ENTITY_ID",
                                    STATEMENT_TYPE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM STATEMENT_TYPE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR STATEMENT_TYPE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, STATEMENT_TYPE_ALIAS, STATEMENT_TYPE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT STATEMENT_TYPE_NAME "ENTITY_NAME",
                                    STATEMENT_TYPE_ID "ENTITY_ID",
                                    STATEMENT_TYPE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM STATEMENT_TYPE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND STATEMENT_TYPE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND STATEMENT_TYPE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR STATEMENT_TYPE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, STATEMENT_TYPE_ALIAS, STATEMENT_TYPE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT STATEMENT_TYPE_NAME "ENTITY_NAME",
                            STATEMENT_TYPE_ID "ENTITY_ID",
                            STATEMENT_TYPE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM STATEMENT_TYPE
                WHERE STATEMENT_TYPE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END STATEMENT_TYPE;
---------------------------------------------------------------------
PROCEDURE SUB_STATION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SUB_STATION_NAME "ENTITY_NAME",
                                    SUB_STATION_ID "ENTITY_ID",
                                    SUB_STATION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SUB_STATION
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SUB_STATION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SUB_STATION_ALIAS, SUB_STATION_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SUB_STATION_NAME "ENTITY_NAME",
                                    SUB_STATION_ID "ENTITY_ID",
                                    SUB_STATION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SUB_STATION
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SUB_STATION_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SUB_STATION_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SUB_STATION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SUB_STATION_ALIAS, SUB_STATION_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SUB_STATION_NAME "ENTITY_NAME",
                            SUB_STATION_ID "ENTITY_ID",
                            SUB_STATION_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TX_SUB_STATION
                WHERE SUB_STATION_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUB_STATION;
---------------------------------------------------------------------
PROCEDURE SUB_STATION_METER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT METER_NAME "ENTITY_NAME",
                                    METER_ID "ENTITY_ID",
                                    METER_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SUB_STATION_METER
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR METER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, METER_ALIAS, METER_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT METER_NAME "ENTITY_NAME",
                                    METER_ID "ENTITY_ID",
                                    METER_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SUB_STATION_METER
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND METER_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND METER_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR METER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, METER_ALIAS, METER_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT METER_NAME "ENTITY_NAME",
                            METER_ID "ENTITY_ID",
                            METER_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TX_SUB_STATION_METER
                WHERE METER_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUB_STATION_METER;
---------------------------------------------------------------------
PROCEDURE SUB_STATION_METER_POINT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT METER_POINT_NAME "ENTITY_NAME",
                                    METER_POINT_ID "ENTITY_ID",
                                    METER_POINT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SUB_STATION_METER_POINT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR METER_POINT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, METER_POINT_ALIAS, METER_POINT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT METER_POINT_NAME "ENTITY_NAME",
                                    METER_POINT_ID "ENTITY_ID",
                                    METER_POINT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_SUB_STATION_METER_POINT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND METER_POINT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND METER_POINT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR METER_POINT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, METER_POINT_ALIAS, METER_POINT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT METER_POINT_NAME "ENTITY_NAME",
                            METER_POINT_ID "ENTITY_ID",
                            METER_POINT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TX_SUB_STATION_METER_POINT
                WHERE METER_POINT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUB_STATION_METER_POINT;
---------------------------------------------------------------------
PROCEDURE SUPPLY_RESOURCE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT RESOURCE_NAME "ENTITY_NAME",
                                    RESOURCE_ID "ENTITY_ID",
                                    RESOURCE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SUPPLY_RESOURCE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR RESOURCE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, RESOURCE_ALIAS, RESOURCE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT RESOURCE_NAME "ENTITY_NAME",
                                    RESOURCE_ID "ENTITY_ID",
                                    RESOURCE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SUPPLY_RESOURCE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND RESOURCE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND RESOURCE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR RESOURCE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, RESOURCE_ALIAS, RESOURCE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT RESOURCE_NAME "ENTITY_NAME",
                            RESOURCE_ID "ENTITY_ID",
                            RESOURCE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SUPPLY_RESOURCE
                WHERE RESOURCE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SUPPLY_RESOURCE;
---------------------------------------------------------------------
PROCEDURE SYSTEM_ACTION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ACTION_NAME "ENTITY_NAME",
                                    ACTION_ID "ENTITY_ID",
                                    ACTION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_ACTION
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ACTION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ACTION_ALIAS, ACTION_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ACTION_NAME "ENTITY_NAME",
                                    ACTION_ID "ENTITY_ID",
                                    ACTION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_ACTION
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ACTION_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ACTION_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ACTION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ACTION_ALIAS, ACTION_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ACTION_NAME "ENTITY_NAME",
                            ACTION_ID "ENTITY_ID",
                            ACTION_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SYSTEM_ACTION
                WHERE ACTION_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_ACTION;
---------------------------------------------------------------------
PROCEDURE SYSTEM_ALERT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT ALERT_NAME "ENTITY_NAME",
                                    ALERT_ID "ENTITY_ID",
                                    ALERT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_ALERT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ALERT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ALERT_ALIAS, ALERT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT ALERT_NAME "ENTITY_NAME",
                                    ALERT_ID "ENTITY_ID",
                                    ALERT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_ALERT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND ALERT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND ALERT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR ALERT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, ALERT_ALIAS, ALERT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT ALERT_NAME "ENTITY_NAME",
                            ALERT_ID "ENTITY_ID",
                            ALERT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SYSTEM_ALERT
                WHERE ALERT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_ALERT;
---------------------------------------------------------------------
PROCEDURE SYSTEM_EVENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT EVENT_NAME "ENTITY_NAME",
                                    EVENT_ID "ENTITY_ID",
                                    EVENT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_EVENT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EVENT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EVENT_ALIAS, EVENT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT EVENT_NAME "ENTITY_NAME",
                                    EVENT_ID "ENTITY_ID",
                                    EVENT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_EVENT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND EVENT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND EVENT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR EVENT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, EVENT_ALIAS, EVENT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT EVENT_NAME "ENTITY_NAME",
                            EVENT_ID "ENTITY_ID",
                            EVENT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SYSTEM_EVENT
                WHERE EVENT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_EVENT;
---------------------------------------------------------------------
PROCEDURE SYSTEM_LOAD
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT SYSTEM_LOAD_NAME "ENTITY_NAME",
                                    SYSTEM_LOAD_ID "ENTITY_ID",
                                    SYSTEM_LOAD_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_LOAD
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SYSTEM_LOAD_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SYSTEM_LOAD_ALIAS, SYSTEM_LOAD_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT SYSTEM_LOAD_NAME "ENTITY_NAME",
                                    SYSTEM_LOAD_ID "ENTITY_ID",
                                    SYSTEM_LOAD_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_LOAD
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND SYSTEM_LOAD_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND SYSTEM_LOAD_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR SYSTEM_LOAD_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, SYSTEM_LOAD_ALIAS, SYSTEM_LOAD_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT SYSTEM_LOAD_NAME "ENTITY_NAME",
                            SYSTEM_LOAD_ID "ENTITY_ID",
                            SYSTEM_LOAD_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SYSTEM_LOAD
                WHERE SYSTEM_LOAD_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_LOAD;
---------------------------------------------------------------------
PROCEDURE SYSTEM_REALM
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT REALM_NAME "ENTITY_NAME",
                                    REALM_ID "ENTITY_ID",
                                    REALM_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_REALM
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR REALM_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, REALM_ALIAS, REALM_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT REALM_NAME "ENTITY_NAME",
                                    REALM_ID "ENTITY_ID",
                                    REALM_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_REALM
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND REALM_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND REALM_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR REALM_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, REALM_ALIAS, REALM_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT REALM_NAME "ENTITY_NAME",
                            REALM_ID "ENTITY_ID",
                            REALM_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SYSTEM_REALM
                WHERE REALM_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_REALM;
---------------------------------------------------------------------
PROCEDURE SYSTEM_TABLE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT TABLE_NAME "ENTITY_NAME",
                                    TABLE_ID "ENTITY_ID",
                                    TABLE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_TABLE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TABLE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TABLE_ALIAS, TABLE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT TABLE_NAME "ENTITY_NAME",
                                    TABLE_ID "ENTITY_ID",
                                    TABLE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM SYSTEM_TABLE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND TABLE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND TABLE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TABLE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TABLE_ALIAS, TABLE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT TABLE_NAME "ENTITY_NAME",
                            TABLE_ID "ENTITY_ID",
                            TABLE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM SYSTEM_TABLE
                WHERE TABLE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END SYSTEM_TABLE;
---------------------------------------------------------------------
PROCEDURE TEMPLATE
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT TEMPLATE_NAME "ENTITY_NAME",
                                    TEMPLATE_ID "ENTITY_ID",
                                    TEMPLATE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TEMPLATE
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TEMPLATE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TEMPLATE_ALIAS, TEMPLATE_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT TEMPLATE_NAME "ENTITY_NAME",
                                    TEMPLATE_ID "ENTITY_ID",
                                    TEMPLATE_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TEMPLATE
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND TEMPLATE_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND TEMPLATE_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TEMPLATE_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TEMPLATE_ALIAS, TEMPLATE_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT TEMPLATE_NAME "ENTITY_NAME",
                            TEMPLATE_ID "ENTITY_ID",
                            TEMPLATE_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TEMPLATE
                WHERE TEMPLATE_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TEMPLATE;
---------------------------------------------------------------------
PROCEDURE TP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT TP_NAME "ENTITY_NAME",
                                    TP_ID "ENTITY_ID",
                                    TP_ALIAS "ENTITY_ALIAS",
                                    TP_STATUS "ENTITY_STATUS"
                            FROM TRANSMISSION_PROVIDER
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TP_ID <> CONSTANTS.NOT_ASSIGNED)
                                    AND (NVL(p_INCLUDE_INACTIVE,1) = 1 OR UPPER(TRIM(TP_STATUS)) = 'ACTIVE')  
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TP_ALIAS, TP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT TP_NAME "ENTITY_NAME",
                                    TP_ID "ENTITY_ID",
                                    TP_ALIAS "ENTITY_ALIAS",
                                    TP_STATUS "ENTITY_STATUS"
                            FROM TRANSMISSION_PROVIDER
                            WHERE (p_INCLUDE_INACTIVE = 1 OR UPPER(TRIM(TP_STATUS)) = 'ACTIVE')
                                    AND ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND TP_NAME LIKE p_SEARCH_STRING)
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TP_ID <> CONSTANTS.NOT_ASSIGNED)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND TP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TP_ALIAS, TP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT TP_NAME "ENTITY_NAME",
                            TP_ID "ENTITY_ID",
                            TP_ALIAS "ENTITY_ALIAS",
                                    TP_STATUS "ENTITY_STATUS"
                FROM TRANSMISSION_PROVIDER
                WHERE TP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TP;
---------------------------------------------------------------------
PROCEDURE TRANSACTION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT TRANSACTION_NAME "ENTITY_NAME",
                                    TRANSACTION_ID "ENTITY_ID",
                                    TRANSACTION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM INTERCHANGE_TRANSACTION
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TRANSACTION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TRANSACTION_ALIAS, TRANSACTION_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT TRANSACTION_NAME "ENTITY_NAME",
                                    TRANSACTION_ID "ENTITY_ID",
                                    TRANSACTION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM INTERCHANGE_TRANSACTION
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND TRANSACTION_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND TRANSACTION_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TRANSACTION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TRANSACTION_ALIAS, TRANSACTION_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT TRANSACTION_NAME "ENTITY_NAME",
                            TRANSACTION_ID "ENTITY_ID",
                            TRANSACTION_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM INTERCHANGE_TRANSACTION
                WHERE TRANSACTION_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TRANSACTION;
---------------------------------------------------------------------
PROCEDURE TRANSACTION_TRAIT_GROUP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT TRAIT_GROUP_NAME "ENTITY_NAME",
                                    TRAIT_GROUP_ID "ENTITY_ID",
                                    TRAIT_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TRANSACTION_TRAIT_GROUP
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TRAIT_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TRAIT_GROUP_ALIAS, TRAIT_GROUP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT TRAIT_GROUP_NAME "ENTITY_NAME",
                                    TRAIT_GROUP_ID "ENTITY_ID",
                                    TRAIT_GROUP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TRANSACTION_TRAIT_GROUP
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND TRAIT_GROUP_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND TRAIT_GROUP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR TRAIT_GROUP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, TRAIT_GROUP_ALIAS, TRAIT_GROUP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT TRAIT_GROUP_NAME "ENTITY_NAME",
                            TRAIT_GROUP_ID "ENTITY_ID",
                            TRAIT_GROUP_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TRANSACTION_TRAIT_GROUP
                WHERE TRAIT_GROUP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TRANSACTION_TRAIT_GROUP;
---------------------------------------------------------------------
PROCEDURE TX_FEEDER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT FEEDER_NAME "ENTITY_NAME",
                                    FEEDER_ID "ENTITY_ID",
                                    FEEDER_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_FEEDER
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR FEEDER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, FEEDER_ALIAS, FEEDER_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT FEEDER_NAME "ENTITY_NAME",
                                    FEEDER_ID "ENTITY_ID",
                                    FEEDER_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_FEEDER
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND FEEDER_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND FEEDER_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR FEEDER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, FEEDER_ALIAS, FEEDER_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT FEEDER_NAME "ENTITY_NAME",
                            FEEDER_ID "ENTITY_ID",
                            FEEDER_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TX_FEEDER
                WHERE FEEDER_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TX_FEEDER;
---------------------------------------------------------------------
PROCEDURE TX_FEEDER_SEGMENT
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT FEEDER_SEGMENT_NAME "ENTITY_NAME",
                                    FEEDER_SEGMENT_ID "ENTITY_ID",
                                    FEEDER_SEGMENT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_FEEDER_SEGMENT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR FEEDER_SEGMENT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, FEEDER_SEGMENT_ALIAS, FEEDER_SEGMENT_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT FEEDER_SEGMENT_NAME "ENTITY_NAME",
                                    FEEDER_SEGMENT_ID "ENTITY_ID",
                                    FEEDER_SEGMENT_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM TX_FEEDER_SEGMENT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND FEEDER_SEGMENT_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND FEEDER_SEGMENT_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR FEEDER_SEGMENT_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, FEEDER_SEGMENT_ALIAS, FEEDER_SEGMENT_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT FEEDER_SEGMENT_NAME "ENTITY_NAME",
                            FEEDER_SEGMENT_ID "ENTITY_ID",
                            FEEDER_SEGMENT_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM TX_FEEDER_SEGMENT
                WHERE FEEDER_SEGMENT_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END TX_FEEDER_SEGMENT;
---------------------------------------------------------------------
PROCEDURE USAGE_WRF
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT WRF_NAME "ENTITY_NAME",
                                    WRF_ID "ENTITY_ID",
                                    WRF_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM USAGE_WRF
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR WRF_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, WRF_ALIAS, WRF_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT WRF_NAME "ENTITY_NAME",
                                    WRF_ID "ENTITY_ID",
                                    WRF_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM USAGE_WRF
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND WRF_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND WRF_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR WRF_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, WRF_ALIAS, WRF_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT WRF_NAME "ENTITY_NAME",
                            WRF_ID "ENTITY_ID",
                            WRF_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM USAGE_WRF
                WHERE WRF_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END USAGE_WRF;
---------------------------------------------------------------------
PROCEDURE VPP
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT VPP_NAME "ENTITY_NAME",
                                    VPP_ID "ENTITY_ID",
                                    VPP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM VIRTUAL_POWER_PLANT
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR VPP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, VPP_ALIAS, VPP_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT VPP_NAME "ENTITY_NAME",
                                    VPP_ID "ENTITY_ID",
                                    VPP_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM VIRTUAL_POWER_PLANT
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND VPP_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND VPP_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR VPP_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, VPP_ALIAS, VPP_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT VPP_NAME "ENTITY_NAME",
                            VPP_ID "ENTITY_ID",
                            VPP_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM VIRTUAL_POWER_PLANT
                WHERE VPP_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END VPP;
---------------------------------------------------------------------
PROCEDURE WEATHER_PARAMETER
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT PARAMETER_NAME "ENTITY_NAME",
                                    PARAMETER_ID "ENTITY_ID",
                                    PARAMETER_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM WEATHER_PARAMETER
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PARAMETER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PARAMETER_ALIAS, PARAMETER_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT PARAMETER_NAME "ENTITY_NAME",
                                    PARAMETER_ID "ENTITY_ID",
                                    PARAMETER_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM WEATHER_PARAMETER
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND PARAMETER_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND PARAMETER_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR PARAMETER_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, PARAMETER_ALIAS, PARAMETER_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT PARAMETER_NAME "ENTITY_NAME",
                            PARAMETER_ID "ENTITY_ID",
                            PARAMETER_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM WEATHER_PARAMETER
                WHERE PARAMETER_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END WEATHER_PARAMETER;
---------------------------------------------------------------------
PROCEDURE WEATHER_STATION
	(
	p_SEARCH_STRING IN VARCHAR,
	p_SEARCH_OPTION IN VARCHAR,
	p_SEARCH_TYPE	IN NUMBER,
	p_FIND_VALUE 	IN VARCHAR2,	
	p_INCLUDE_INACTIVE IN NUMBER,
    p_HIDE_NOT_ASSIGNED IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS
-- Answer the given entities
BEGIN
	p_STATUS := GA.SUCCESS;

        -- Normal Search
        IF NVL(p_SEARCH_TYPE,  CONSTANTS.SEARCH_TYPE_NORMAL) = CONSTANTS.SEARCH_TYPE_NORMAL THEN
            IF p_SEARCH_STRING = '%' OR p_SEARCH_STRING IS NULL THEN
                    OPEN p_CURSOR FOR
                            SELECT STATION_NAME "ENTITY_NAME",
                                    STATION_ID "ENTITY_ID",
                                    STATION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM WEATHER_STATION
                            WHERE (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR STATION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, STATION_ALIAS, STATION_NAME);
            ELSE
                    OPEN p_CURSOR FOR
                            SELECT STATION_NAME "ENTITY_NAME",
                                    STATION_ID "ENTITY_ID",
                                    STATION_ALIAS "ENTITY_ALIAS",
                                    'Active' "ENTITY_STATUS"
                            FROM WEATHER_STATION
                            WHERE ((p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_NAME AND STATION_NAME LIKE p_SEARCH_STRING)
                                    OR (p_SEARCH_OPTION = CONSTANTS.SEARCH_OPTION_BY_ALIAS AND STATION_ALIAS LIKE p_SEARCH_STRING))
                                    AND (NVL(p_HIDE_NOT_ASSIGNED,0) = 0 OR STATION_ID <> CONSTANTS.NOT_ASSIGNED)
                            ORDER BY DECODE(p_SEARCH_OPTION, CONSTANTS.SEARCH_OPTION_BY_ALIAS, STATION_ALIAS, STATION_NAME);
    
            END IF;
            
        -- Specific Value
	ELSIF p_SEARCH_TYPE = CONSTANTS.SEARCH_TYPE_BY_VAL THEN
            OPEN p_CURSOR FOR
                SELECT STATION_NAME "ENTITY_NAME",
                            STATION_ID "ENTITY_ID",
                            STATION_ALIAS "ENTITY_ALIAS",
                            'Active' "ENTITY_STATUS"
                FROM WEATHER_STATION
                WHERE STATION_ID = TO_NUMBER(p_FIND_VALUE);            
        END IF;
        
EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END WEATHER_STATION;
---------------------------------------------------------------------
END ENTITY_LIST;
/
