CREATE OR REPLACE PACKAGE IA IS
--Revision $Revision: 1.6 $

  -- Author  : JHUMPHRIES
  -- Created : 12/20/2005 11:55:27 PM
  -- Purpose : IT Assignments

FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE PURGE_WORK
	(
	p_TO_WORK_ID IN NUMBER,
	p_FROM_WORK_ID IN NUMBER
	);

PROCEDURE BUILD_WORK_DATA_TO
	(
	p_TO_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_INCLUDE_PRICE IN BOOLEAN,
	p_WORK_ID OUT NUMBER
	);

PROCEDURE BUILD_WORK_ASSIGNMENTS_FROM
	(
	p_TO_TRANSACTION_ID IN NUMBER,
	p_FROM_TRANSACTION_IDs IN ID_TABLE,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_ASSIGNMENT_TYPE IN VARCHAR2,
	p_USE_PERIODS IN BOOLEAN,
	p_WORK_ID OUT NUMBER
	);

PROCEDURE BUILD_WORK_DATA_FROM
	(
	p_FROM_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_ASSIGNMENT_TYPE IN VARCHAR2,
	p_WORK_ID OUT NUMBER
	);

PROCEDURE BUILD_WORK_ASSIGNMENTS_TO
	(
	p_FROM_TRANSACTION_ID IN NUMBER,
	p_TO_TRANSACTION_IDs IN ID_TABLE,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_ASSIGNMENT_TYPE IN VARCHAR2,
	p_INCLUDE_PRICE IN BOOLEAN,
	p_USE_PERIODS IN BOOLEAN,
	p_WORK_ID OUT NUMBER
	);

PROCEDURE PUT_ASSIGNMENT
	(
	p_FROM_TRANSACTION_ID IN NUMBER,
	p_TO_TRANSACTION_ID IN NUMBER,
	p_ASSIGNMENT_TYPE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
    p_SCHEDULE_DATE IN VARCHAR,
    p_SCHEDULE_TIME IN VARCHAR,
	p_IS_FIXED IN NUMBER,
    p_FROM_AMOUNT IN NUMBER,
    p_FROM_PRICE IN NUMBER,
    p_ASSIGNED_AMOUNT IN NUMBER,
	p_UPDATE_TO IN NUMBER,
	p_TO_AMOUNT IN NUMBER,
	p_TO_PRICE IN NUMBER,
	p_STATUS OUT NUMBER
	);

END IA;
/
CREATE OR REPLACE PACKAGE BODY IA IS
---------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.6 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE PURGE_WORK
	(
	p_TO_WORK_ID IN NUMBER,
	p_FROM_WORK_ID IN NUMBER
	) AS
BEGIN
	DELETE IT_ASSIGNMENT_WORK WHERE WORK_ID = p_TO_WORK_ID;
	DELETE IT_ASSIGNMENT_WORK WHERE WORK_ID = p_FROM_WORK_ID;
END PURGE_WORK;
---------------------------------------------------------------------------------------------------
PROCEDURE BUILD_WORK_DATA_TO
	(
	p_TO_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SCHEDULE_TYPE IN NUMBER,
	p_INCLUDE_PRICE IN BOOLEAN,
	p_WORK_ID OUT NUMBER
	) AS
v_INTERVAL_NUMBER NUMBER;
BEGIN
	SELECT GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL)
	INTO v_INTERVAL_NUMBER
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_TO_TRANSACTION_ID;

	UT.GET_RTO_WORK_ID(p_WORK_ID);

	IF p_INCLUDE_PRICE THEN
    	INSERT INTO IT_ASSIGNMENT_WORK
    		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE, AMOUNT, PRICE, OTHER_PRICE)
    	SELECT p_WORK_ID,
    			p_TO_TRANSACTION_ID,
    			A.TRANSACTION_NAME,
    			B.SCHEDULE_DATE,
    			B.AMOUNT,
				B.PRICE,
    			(SELECT AVG(PRICE) -- get best available market price value
    				FROM MARKET_PRICE_VALUE P
    				WHERE MARKET_PRICE_ID = A.MARKET_PRICE_ID
    					AND PRICE_DATE = B.SCHEDULE_DATE
    					AND PRICE_CODE = (SELECT CASE MAX(CASE PRICE_CODE WHEN 'A' THEN 3 WHEN 'P' THEN 2 ELSE 1 END)
    											 WHEN 3 THEN 'A'
    											 WHEN 2 THEN 'P'
    											 ELSE 'F'
    											 END
    										FROM MARKET_PRICE_VALUE
    										WHERE MARKET_PRICE_ID = P.MARKET_PRICE_ID
    											AND PRICE_DATE = P.PRICE_DATE))
    	FROM INTERCHANGE_TRANSACTION A,
    		IT_SCHEDULE B
    	WHERE A.TRANSACTION_ID = p_TO_TRANSACTION_ID
    		AND B.TRANSACTION_ID = p_TO_TRANSACTION_ID
    		AND B.SCHEDULE_TYPE = p_SCHEDULE_TYPE
    		AND B.SCHEDULE_STATE = GA.INTERNAL_STATE
    		AND B.SCHEDULE_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE;
	ELSE
    	INSERT INTO IT_ASSIGNMENT_WORK
    		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE, AMOUNT, PRICE)
    	SELECT p_WORK_ID,
    			p_TO_TRANSACTION_ID,
    			A.TRANSACTION_NAME,
    			B.SCHEDULE_DATE,
    			B.AMOUNT,
				B.PRICE
    	FROM INTERCHANGE_TRANSACTION A,
    		IT_SCHEDULE B
    	WHERE A.TRANSACTION_ID = p_TO_TRANSACTION_ID
    		AND B.TRANSACTION_ID = p_TO_TRANSACTION_ID
    		AND B.SCHEDULE_TYPE = p_SCHEDULE_TYPE
    		AND B.SCHEDULE_STATE = GA.INTERNAL_STATE
    		AND B.SCHEDULE_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE;
	END IF;
END BUILD_WORK_DATA_TO;
---------------------------------------------------------------------------------------------------
PROCEDURE BUILD_WORK_ASSIGNMENTS_FROM
	(
	p_TO_TRANSACTION_ID IN NUMBER,
	p_FROM_TRANSACTION_IDs IN ID_TABLE,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_ASSIGNMENT_TYPE IN VARCHAR2,
	p_USE_PERIODS IN BOOLEAN,
	p_WORK_ID OUT NUMBER
	) AS
v_INTERVAL_NUMBER NUMBER;
BEGIN
	SELECT GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL)
	INTO v_INTERVAL_NUMBER
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_TO_TRANSACTION_ID;

	UT.GET_RTO_WORK_ID(p_WORK_ID);

	INSERT INTO RTO_WORK (WORK_ID, WORK_XID)
	SELECT p_WORK_ID, X.ID
	FROM TABLE(CAST(p_FROM_TRANSACTION_IDs AS ID_TABLE)) X;

	-- first get fixed-schedule supplies
	IF p_USE_PERIODS THEN
    	INSERT INTO IT_ASSIGNMENT_WORK
    		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
    		 PRICE, ASSIGNED, AMOUNT, IS_FIXED, TOTAL_ASSIGNED)
    	SELECT p_WORK_ID,
    		A.TRANSACTION_ID,
    		A.TRANSACTION_NAME,
    		A.CUT_DATE,
    		B.PRICE,
    		NVL(C.AMOUNT,0),
    		NVL(B.AMOUNT,0),
    		1,
			(SELECT NVL(SUM(AMOUNT),0)
				FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
				WHERE IA.FROM_TRANSACTION_ID = A.TRANSACTION_ID
					AND IA.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
					AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
					AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
					AND IAS.SCHEDULE_DATE = A.CUT_DATE
					AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
					AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE)
    	FROM (SELECT T.TRANSACTION_ID,
    				T.TRANSACTION_NAME,
    				SDT.CUT_DATE,
					A.ASSIGNMENT_ID
    			FROM SYSTEM_DATE_TIME SDT,
    				IT_ASSIGNMENT A,
					IT_ASSIGNMENT_PERIOD P,
    				INTERCHANGE_TRANSACTION T,
					RTO_WORK W
    			WHERE SDT.TIME_ZONE = p_TIME_ZONE
    				AND SDT.DATA_INTERVAL_TYPE = 1
    				AND SDT.DAY_TYPE = '1'
    				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
    				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
					AND W.WORK_ID = p_WORK_ID
    				AND A.TO_TRANSACTION_ID = p_TO_TRANSACTION_ID
					AND A.FROM_TRANSACTION_ID = W.WORK_XID
					AND A.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
					AND P.ASSIGNMENT_ID = A.ASSIGNMENT_ID
    				AND P.BEGIN_DATE <= SDT.LOCAL_DAY_TRUNC_DATE
    				AND NVL(P.END_DATE,HIGH_DATE) >= SDT.LOCAL_DAY_TRUNC_DATE
    				AND T.TRANSACTION_ID = A.FROM_TRANSACTION_ID
    				AND T.IS_DISPATCHABLE = 1) A,
    		IT_SCHEDULE B,
			IT_ASSIGNMENT_SCHEDULE C
    	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
    		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
    		AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
    		AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
    		AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND C.SCHEDULE_DATE(+) = A.CUT_DATE;
	ELSE
    	INSERT INTO IT_ASSIGNMENT_WORK
    		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
    		 PRICE, ASSIGNED, AMOUNT, IS_FIXED, TOTAL_ASSIGNED)
    	SELECT p_WORK_ID,
    		A.TRANSACTION_ID,
    		A.TRANSACTION_NAME,
    		A.CUT_DATE,
    		B.PRICE,
    		NVL(C.AMOUNT,0),
    		NVL(B.AMOUNT,0),
    		1,
			(SELECT NVL(SUM(AMOUNT),0)
				FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
				WHERE IA.FROM_TRANSACTION_ID = A.TRANSACTION_ID
					AND IA.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
					AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
					AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
					AND IAS.SCHEDULE_DATE = A.CUT_DATE
					AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
					AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE)
    	FROM (SELECT T.TRANSACTION_ID,
    				T.TRANSACTION_NAME,
    				SDT.CUT_DATE,
					A.ASSIGNMENT_ID
    			FROM SYSTEM_DATE_TIME SDT,
    				IT_ASSIGNMENT A,
    				INTERCHANGE_TRANSACTION T,
					RTO_WORK W
    			WHERE SDT.TIME_ZONE = p_TIME_ZONE
    				AND SDT.DATA_INTERVAL_TYPE = 1
    				AND SDT.DAY_TYPE = '1'
    				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
    				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
					AND W.WORK_ID = p_WORK_ID
    				AND T.TRANSACTION_ID = W.WORK_XID
    				AND T.IS_DISPATCHABLE = 1
    				AND A.TO_TRANSACTION_ID(+) = p_TO_TRANSACTION_ID
					AND A.FROM_TRANSACTION_ID(+) = T.TRANSACTION_ID
					AND A.ASSIGNMENT_TYPE(+) = p_ASSIGNMENT_TYPE) A,
    		IT_SCHEDULE B,
			IT_ASSIGNMENT_SCHEDULE C
    	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
    		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
    		AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
    		AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
    		AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND C.SCHEDULE_DATE(+) = A.CUT_DATE;
	END IF;

	-- then get dispatchable supplies
	IF p_USE_PERIODS THEN
    	INSERT INTO IT_ASSIGNMENT_WORK
    		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
    		 PRICE, ASSIGNED, AMOUNT, IS_FIXED, TERM_MAX, TERM_MIN)
    	SELECT p_WORK_ID,
    		A.TRANSACTION_ID,
    		A.TRANSACTION_NAME,
    		A.CUT_DATE,
    		CASE WHEN NVL(B.PRICE,0) = 0 THEN NVL(D.PRICE, E.PRICE)
										ELSE B.PRICE END,
    		NVL(C.AMOUNT,0),
    		NVL(B.AMOUNT,0),
    		0,
    		D.AMOUNT,
    		E.AMOUNT
    	FROM (SELECT T.TRANSACTION_ID,
    				T.TRANSACTION_NAME,
    				SDT.CUT_DATE,
    				L.MIN_TRANSACTION_ID,
    				L.LIMIT_TRANSACTION_ID,
					A.ASSIGNMENT_ID
    			FROM SYSTEM_DATE_TIME SDT,
					IT_ASSIGNMENT A,
					IT_ASSIGNMENT_PERIOD P,
    				INTERCHANGE_TRANSACTION T,
    				INTERCHANGE_TRANSACTION_LIMIT L,
					RTO_WORK W
    			WHERE SDT.TIME_ZONE = p_TIME_ZONE
    				AND SDT.DATA_INTERVAL_TYPE = 1
    				AND SDT.DAY_TYPE = '1'
    				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
    				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
					AND W.WORK_ID = p_WORK_ID
    				AND A.TO_TRANSACTION_ID = p_TO_TRANSACTION_ID
					AND A.FROM_TRANSACTION_ID = W.WORK_XID
					AND A.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
					AND P.ASSIGNMENT_ID = A.ASSIGNMENT_ID
    				AND P.BEGIN_DATE <= SDT.LOCAL_DAY_TRUNC_DATE
    				AND NVL(P.END_DATE,HIGH_DATE) >= SDT.LOCAL_DAY_TRUNC_DATE
    				AND T.TRANSACTION_ID = A.FROM_TRANSACTION_ID
    				AND NVL(T.IS_DISPATCHABLE,0) <> 1
    				AND L.TRANSACTION_ID = T.TRANSACTION_ID
    				AND L.LIMIT_INTERVAL = T.TRANSACTION_INTERVAL
    				AND L.BEGIN_DATE <= SDT.LOCAL_DAY_TRUNC_DATE
    				AND NVL(L.END_DATE,HIGH_DATE) >= SDT.LOCAL_DAY_TRUNC_DATE) A,
    		IT_SCHEDULE B,
    		IT_ASSIGNMENT_SCHEDULE C,
    		IT_SCHEDULE D,
    		IT_SCHEDULE E
    	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
    		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
    		AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
    		AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
    		AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND C.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND D.TRANSACTION_ID(+) = A.LIMIT_TRANSACTION_ID
    		AND D.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND D.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND D.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND E.TRANSACTION_ID(+) = A.MIN_TRANSACTION_ID
    		AND E.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND E.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND E.SCHEDULE_DATE(+) = A.CUT_DATE;
	ELSE
    	INSERT INTO IT_ASSIGNMENT_WORK
    		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
    		 PRICE, ASSIGNED, AMOUNT, IS_FIXED, TERM_MAX, TERM_MIN)
    	SELECT p_WORK_ID,
    		A.TRANSACTION_ID,
    		A.TRANSACTION_NAME,
    		A.CUT_DATE,
    		CASE WHEN NVL(B.PRICE,0) = 0 THEN NVL(D.PRICE, E.PRICE)
										ELSE B.PRICE END,
    		NVL(C.AMOUNT,0),
    		NVL(B.AMOUNT,0),
    		0,
    		D.AMOUNT,
    		E.AMOUNT
    	FROM (SELECT T.TRANSACTION_ID,
    				T.TRANSACTION_NAME,
    				SDT.CUT_DATE,
    				L.MIN_TRANSACTION_ID,
    				L.LIMIT_TRANSACTION_ID,
					A.ASSIGNMENT_ID
    			FROM SYSTEM_DATE_TIME SDT,
					IT_ASSIGNMENT A,
    				INTERCHANGE_TRANSACTION T,
    				INTERCHANGE_TRANSACTION_LIMIT L,
					RTO_WORK W
    			WHERE SDT.TIME_ZONE = p_TIME_ZONE
    				AND SDT.DATA_INTERVAL_TYPE = 1
    				AND SDT.DAY_TYPE = '1'
    				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
    				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
					AND W.WORK_ID = p_WORK_ID
    				AND T.TRANSACTION_ID = W.WORK_XID
    				AND NVL(T.IS_DISPATCHABLE,0) <> 1
    				AND A.TO_TRANSACTION_ID(+) = p_TO_TRANSACTION_ID
					AND A.FROM_TRANSACTION_ID(+) = T.TRANSACTION_ID
					AND A.ASSIGNMENT_TYPE(+) = p_ASSIGNMENT_TYPE
    				AND L.TRANSACTION_ID = T.TRANSACTION_ID
    				AND L.LIMIT_INTERVAL = T.TRANSACTION_INTERVAL
    				AND L.BEGIN_DATE <= SDT.LOCAL_DAY_TRUNC_DATE
    				AND NVL(L.END_DATE,HIGH_DATE) >= SDT.LOCAL_DAY_TRUNC_DATE) A,
    		IT_SCHEDULE B,
    		IT_ASSIGNMENT_SCHEDULE C,
    		IT_SCHEDULE D,
    		IT_SCHEDULE E
    	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
    		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
    		AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
    		AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
    		AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND C.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND D.TRANSACTION_ID(+) = A.LIMIT_TRANSACTION_ID
    		AND D.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND D.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND D.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND E.TRANSACTION_ID(+) = A.MIN_TRANSACTION_ID
    		AND E.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND E.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND E.SCHEDULE_DATE(+) = A.CUT_DATE;
	END IF;

	UT.PURGE_RTO_WORK(p_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(p_WORK_ID);
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		ERRS.LOG_AND_RAISE();

END BUILD_WORK_ASSIGNMENTS_FROM;
---------------------------------------------------------------------------------------------------
PROCEDURE BUILD_WORK_ASSIGNMENTS_TO
	(
	p_FROM_TRANSACTION_ID IN NUMBER,
	p_TO_TRANSACTION_IDs IN ID_TABLE,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_ASSIGNMENT_TYPE IN VARCHAR2,
	p_INCLUDE_PRICE IN BOOLEAN,
	p_USE_PERIODS IN BOOLEAN,
	p_WORK_ID OUT NUMBER
	) AS
v_INTERVAL_NUMBER NUMBER;
BEGIN
	SELECT GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL)
	INTO v_INTERVAL_NUMBER
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_FROM_TRANSACTION_ID;

	UT.GET_RTO_WORK_ID(p_WORK_ID);

	INSERT INTO RTO_WORK (WORK_ID, WORK_XID)
	SELECT p_WORK_ID, X.ID
	FROM TABLE(CAST(p_TO_TRANSACTION_IDs AS ID_TABLE)) X;

	IF p_USE_PERIODS THEN
		IF p_INCLUDE_PRICE THEN
        	INSERT INTO IT_ASSIGNMENT_WORK
        		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
        		 ASSIGNED, AMOUNT, PRICE, TOTAL_ASSIGNED, OTHER_PRICE)
        	SELECT p_WORK_ID,
        		A.TRANSACTION_ID,
        		A.TRANSACTION_NAME,
        		A.CUT_DATE,
        		NVL(C.AMOUNT,0),
        		NVL(B.AMOUNT,0),
				B.PRICE,
    			(SELECT NVL(SUM(AMOUNT),0)
    				FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
    				WHERE IA.TO_TRANSACTION_ID = A.TRANSACTION_ID
    					AND IA.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
    					AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
    					AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
    					AND IAS.SCHEDULE_DATE = A.CUT_DATE
    					AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
    					AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE),
    			(SELECT AVG(PRICE) -- get best available market price value
    				FROM MARKET_PRICE_VALUE P
    				WHERE MARKET_PRICE_ID = A.MARKET_PRICE_ID
    					AND PRICE_DATE = B.SCHEDULE_DATE
    					AND PRICE_CODE = (SELECT CASE MAX(CASE PRICE_CODE WHEN 'A' THEN 3 WHEN 'P' THEN 2 ELSE 1 END)
    											 WHEN 3 THEN 'A'
    											 WHEN 2 THEN 'P'
    											 ELSE 'F'
    											 END
    										FROM MARKET_PRICE_VALUE
    										WHERE MARKET_PRICE_ID = P.MARKET_PRICE_ID
    											AND PRICE_DATE = P.PRICE_DATE))
        	FROM (SELECT T.TRANSACTION_ID,
        				T.TRANSACTION_NAME,
						T.MARKET_PRICE_ID,
        				SDT.CUT_DATE_SCHEDULING "CUT_DATE",
						A.ASSIGNMENT_ID
        			FROM SYSTEM_DATE_TIME SDT,
						IT_ASSIGNMENT A,
						IT_ASSIGNMENT_PERIOD P,
        				INTERCHANGE_TRANSACTION T,
						RTO_WORK W
        			WHERE SDT.TIME_ZONE = p_TIME_ZONE
        				AND SDT.DATA_INTERVAL_TYPE = 1
        				AND SDT.DAY_TYPE = '1'
        				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
        				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
    					AND W.WORK_ID = p_WORK_ID
        				AND A.FROM_TRANSACTION_ID = p_FROM_TRANSACTION_ID
    					AND A.TO_TRANSACTION_ID = W.WORK_XID
						AND A.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
						AND P.ASSIGNMENT_ID = A.ASSIGNMENT_ID
        				AND P.BEGIN_DATE <= SDT.LOCAL_DAY_TRUNC_DATE
        				AND NVL(P.END_DATE,HIGH_DATE) >= SDT.LOCAL_DAY_TRUNC_DATE
        				AND T.TRANSACTION_ID = A.TO_TRANSACTION_ID) A,
        		IT_SCHEDULE B,
        		IT_ASSIGNMENT_SCHEDULE C
        	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
        		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
        		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
        		AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
        		AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
        		AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
        		AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        		AND C.SCHEDULE_DATE(+) = A.CUT_DATE;
		ELSE
        	INSERT INTO IT_ASSIGNMENT_WORK
        		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
        		 ASSIGNED, AMOUNT, PRICE, TOTAL_ASSIGNED)
        	SELECT p_WORK_ID,
        		A.TRANSACTION_ID,
        		A.TRANSACTION_NAME,
        		A.CUT_DATE,
        		NVL(C.AMOUNT,0),
        		NVL(B.AMOUNT,0),
				B.PRICE,
    			(SELECT NVL(SUM(AMOUNT),0)
    				FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
    				WHERE IA.TO_TRANSACTION_ID = A.TRANSACTION_ID
    					AND IA.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
    					AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
    					AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
    					AND IAS.SCHEDULE_DATE = A.CUT_DATE
    					AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
    					AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE)
        	FROM (SELECT T.TRANSACTION_ID,
        				T.TRANSACTION_NAME,
        				SDT.CUT_DATE,
						A.ASSIGNMENT_ID
        			FROM SYSTEM_DATE_TIME SDT,
						IT_ASSIGNMENT A,
						IT_ASSIGNMENT_PERIOD P,
        				INTERCHANGE_TRANSACTION T,
						RTO_WORK W
        			WHERE SDT.TIME_ZONE = p_TIME_ZONE
        				AND SDT.DATA_INTERVAL_TYPE = 1
        				AND SDT.DAY_TYPE = '1'
        				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
        				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
    					AND W.WORK_ID = p_WORK_ID
        				AND A.FROM_TRANSACTION_ID = p_FROM_TRANSACTION_ID
    					AND A.TO_TRANSACTION_ID = W.WORK_XID
						AND A.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
						AND P.ASSIGNMENT_ID = A.ASSIGNMENT_ID
        				AND P.BEGIN_DATE <= SDT.LOCAL_DAY_TRUNC_DATE
        				AND NVL(P.END_DATE,HIGH_DATE) >= SDT.LOCAL_DAY_TRUNC_DATE
        				AND T.TRANSACTION_ID = A.TO_TRANSACTION_ID) A,
        		IT_SCHEDULE B,
        		IT_ASSIGNMENT_SCHEDULE C
        	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
        		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
        		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
        		AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
        		AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
        		AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
        		AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        		AND C.SCHEDULE_DATE(+) = A.CUT_DATE;
		END IF;
	ELSE
		IF p_INCLUDE_PRICE THEN
        	INSERT INTO IT_ASSIGNMENT_WORK
        		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
        		 ASSIGNED, AMOUNT, PRICE, TOTAL_ASSIGNED, OTHER_PRICE)
        	SELECT p_WORK_ID,
        		A.TRANSACTION_ID,
        		A.TRANSACTION_NAME,
        		A.CUT_DATE,
        		NVL(C.AMOUNT,0),
        		NVL(B.AMOUNT,0),
				B.PRICE,
    			(SELECT NVL(SUM(AMOUNT),0)
    				FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
    				WHERE IA.TO_TRANSACTION_ID = A.TRANSACTION_ID
    					AND IA.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
    					AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
    					AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
    					AND IAS.SCHEDULE_DATE = A.CUT_DATE
    					AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
    					AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE),
    			(SELECT AVG(PRICE) -- get best available market price value
    				FROM MARKET_PRICE_VALUE P
    				WHERE MARKET_PRICE_ID = A.MARKET_PRICE_ID
    					AND PRICE_DATE = B.SCHEDULE_DATE
    					AND PRICE_CODE = (SELECT CASE MAX(CASE PRICE_CODE WHEN 'A' THEN 3 WHEN 'P' THEN 2 ELSE 1 END)
    											 WHEN 3 THEN 'A'
    											 WHEN 2 THEN 'P'
    											 ELSE 'F'
    											 END
    										FROM MARKET_PRICE_VALUE
    										WHERE MARKET_PRICE_ID = P.MARKET_PRICE_ID
    											AND PRICE_DATE = P.PRICE_DATE))
        	FROM (SELECT T.TRANSACTION_ID,
        				T.TRANSACTION_NAME,
						T.MARKET_PRICE_ID,
        				SDT.CUT_DATE,
						A.ASSIGNMENT_ID
        			FROM SYSTEM_DATE_TIME SDT,
						IT_ASSIGNMENT A,
        				INTERCHANGE_TRANSACTION T,
						RTO_WORK W
        			WHERE SDT.TIME_ZONE = p_TIME_ZONE
        				AND SDT.DATA_INTERVAL_TYPE = 1
        				AND SDT.DAY_TYPE = '1'
        				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
        				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
						AND W.WORK_ID = p_WORK_ID
        				AND T.TRANSACTION_ID = W.WORK_XID
        				AND A.FROM_TRANSACTION_ID(+) = p_FROM_TRANSACTION_ID
						AND A.TO_TRANSACTION_ID(+) = T.TRANSACTION_ID
						AND A.ASSIGNMENT_TYPE(+) = p_ASSIGNMENT_TYPE) A,
        		IT_SCHEDULE B,
        		IT_ASSIGNMENT_SCHEDULE C
        	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
        		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
        		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
        		AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
        		AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
        		AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
        		AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        		AND C.SCHEDULE_DATE(+) = A.CUT_DATE;
		ELSE
        	INSERT INTO IT_ASSIGNMENT_WORK
        		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
        		 ASSIGNED, AMOUNT, PRICE, TOTAL_ASSIGNED)
        	SELECT p_WORK_ID,
        		A.TRANSACTION_ID,
        		A.TRANSACTION_NAME,
        		A.CUT_DATE,
        		NVL(C.AMOUNT,0),
        		NVL(B.AMOUNT,0),
				B.PRICE,
    			(SELECT NVL(SUM(AMOUNT),0)
    				FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
    				WHERE IA.TO_TRANSACTION_ID = A.TRANSACTION_ID
    					AND IA.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
    					AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
    					AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
    					AND IAS.SCHEDULE_DATE = A.CUT_DATE
    					AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
    					AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE)
        	FROM (SELECT T.TRANSACTION_ID,
        				T.TRANSACTION_NAME,
        				SDT.CUT_DATE,
						A.ASSIGNMENT_ID
        			FROM SYSTEM_DATE_TIME SDT,
						IT_ASSIGNMENT A,
        				INTERCHANGE_TRANSACTION T,
						RTO_WORK W
        			WHERE SDT.TIME_ZONE = p_TIME_ZONE
        				AND SDT.DATA_INTERVAL_TYPE = 1
        				AND SDT.DAY_TYPE = '1'
        				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
        				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
						AND W.WORK_ID = p_WORK_ID
        				AND T.TRANSACTION_ID = W.WORK_XID
        				AND A.FROM_TRANSACTION_ID(+) = p_FROM_TRANSACTION_ID
						AND A.TO_TRANSACTION_ID(+) = T.TRANSACTION_ID
						AND A.ASSIGNMENT_TYPE(+) = p_ASSIGNMENT_TYPE) A,
        		IT_SCHEDULE B,
        		IT_ASSIGNMENT_SCHEDULE C
        	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
        		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
        		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
        		AND C.ASSIGNMENT_ID(+) = A.ASSIGNMENT_ID
        		AND C.OPTION_ID(+) = GA.COMMITTED_OPTION_ID
        		AND C.STATEMENT_TYPE_ID(+) = p_SCHEDULE_TYPE
        		AND C.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
        		AND C.SCHEDULE_DATE(+) = A.CUT_DATE;
		END IF;
	END IF;

	UT.PURGE_RTO_WORK(p_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		BEGIN
			UT.PURGE_RTO_WORK(p_WORK_ID);
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE();
		END;
		ERRS.LOG_AND_RAISE();
END BUILD_WORK_ASSIGNMENTS_TO;
---------------------------------------------------------------------------------------------------
PROCEDURE BUILD_WORK_DATA_FROM
	(
	p_FROM_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_ASSIGNMENT_TYPE IN VARCHAR2,
	p_WORK_ID OUT NUMBER
	) AS
v_IS_FIXED NUMBER(1);
v_INTERVAL_NUMBER NUMBER;
BEGIN
	SELECT GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL)
	INTO v_INTERVAL_NUMBER
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_FROM_TRANSACTION_ID;
	UT.GET_RTO_WORK_ID(p_WORK_ID);

	SELECT IS_DISPATCHABLE
	INTO v_IS_FIXED
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_FROM_TRANSACTION_ID;

	IF v_IS_FIXED = 1 THEN
    	INSERT INTO IT_ASSIGNMENT_WORK
    		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
    		 PRICE, AMOUNT, IS_FIXED, TOTAL_ASSIGNED)
    	SELECT p_WORK_ID,
    		A.TRANSACTION_ID,
    		A.TRANSACTION_NAME,
    		B.SCHEDULE_DATE,
    		B.PRICE,
    		NVL(B.AMOUNT,0),
    		1,
			(SELECT NVL(SUM(AMOUNT),0)
				FROM IT_ASSIGNMENT IA, IT_ASSIGNMENT_SCHEDULE IAS
				WHERE IA.FROM_TRANSACTION_ID = A.TRANSACTION_ID
					AND IA.ASSIGNMENT_TYPE = p_ASSIGNMENT_TYPE
					AND IAS.ASSIGNMENT_ID = IA.ASSIGNMENT_ID
					AND IAS.OPTION_ID = GA.COMMITTED_OPTION_ID
					AND IAS.SCHEDULE_DATE = B.SCHEDULE_DATE
					AND IAS.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
					AND IAS.SCHEDULE_STATE = GA.INTERNAL_STATE)
    	FROM INTERCHANGE_TRANSACTION A,
    		IT_SCHEDULE B
    	WHERE A.TRANSACTION_ID = p_FROM_TRANSACTION_ID
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
    		AND B.SCHEDULE_TYPE = p_SCHEDULE_TYPE
    		AND B.SCHEDULE_STATE = GA.INTERNAL_STATE
    		AND B.SCHEDULE_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE;
	ELSE
    	INSERT INTO IT_ASSIGNMENT_WORK
    		(WORK_ID, TRANSACTION_ID, TRANSACTION_NAME, SCHEDULE_DATE,
    		 PRICE, AMOUNT, IS_FIXED, TERM_MAX, TERM_MIN)
    	SELECT p_WORK_ID,
    		A.TRANSACTION_ID,
    		A.TRANSACTION_NAME,
    		A.CUT_DATE,
    		CASE WHEN NVL(B.PRICE,0) = 0 THEN NVL(D.PRICE, E.PRICE)
										ELSE B.PRICE END,
    		NVL(B.AMOUNT,0),
    		0,
    		D.AMOUNT,
    		E.AMOUNT
    	FROM (SELECT T.TRANSACTION_ID,
    				T.TRANSACTION_NAME,
    				SDT.CUT_DATE,
    				L.MIN_TRANSACTION_ID,
    				L.LIMIT_TRANSACTION_ID
    			FROM SYSTEM_DATE_TIME SDT,
    				INTERCHANGE_TRANSACTION T,
    				INTERCHANGE_TRANSACTION_LIMIT L
    			WHERE SDT.TIME_ZONE = p_TIME_ZONE
    				AND SDT.DATA_INTERVAL_TYPE = 1
    				AND SDT.DAY_TYPE = '1'
    				AND SDT.CUT_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
    				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
    				AND T.TRANSACTION_ID = p_FROM_TRANSACTION_ID
    				AND L.TRANSACTION_ID = T.TRANSACTION_ID
    				AND L.LIMIT_INTERVAL = T.TRANSACTION_INTERVAL
    				AND L.BEGIN_DATE <= SDT.LOCAL_DAY_TRUNC_DATE
    				AND NVL(L.END_DATE,HIGH_DATE) >= SDT.LOCAL_DAY_TRUNC_DATE) A,
    		IT_SCHEDULE B,
    		IT_SCHEDULE D,
    		IT_SCHEDULE E
    	WHERE B.TRANSACTION_ID(+) = A.TRANSACTION_ID
    		AND B.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND B.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND B.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND D.TRANSACTION_ID(+) = A.LIMIT_TRANSACTION_ID
    		AND D.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND D.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND D.SCHEDULE_DATE(+) = A.CUT_DATE
    		AND E.TRANSACTION_ID(+) = A.MIN_TRANSACTION_ID
    		AND E.SCHEDULE_TYPE(+) = p_SCHEDULE_TYPE
    		AND E.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
    		AND E.SCHEDULE_DATE(+) = A.CUT_DATE;
	END IF;
END BUILD_WORK_DATA_FROM;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_ASSIGNMENT
	(
	p_FROM_TRANSACTION_ID IN NUMBER,
	p_TO_TRANSACTION_ID IN NUMBER,
	p_ASSIGNMENT_TYPE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
    p_SCHEDULE_DATE IN VARCHAR,
    p_SCHEDULE_TIME IN VARCHAR,
	p_IS_FIXED IN NUMBER,
    p_FROM_AMOUNT IN NUMBER,
    p_FROM_PRICE IN NUMBER,
    p_ASSIGNED_AMOUNT IN NUMBER,
	p_UPDATE_TO IN NUMBER,
	p_TO_AMOUNT IN NUMBER,
	p_TO_PRICE IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
v_AMOUNT NUMBER;
BEGIN

	IF NOT CAN_WRITE(ITJ.g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(ITJ.g_MODULE_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

    -- no contract terms used? then don't update IT_SCHEDULE.AMOUNT for supply schedules
    IF p_IS_FIXED = 1 THEN
		v_AMOUNT := NULL;
	ELSE
		v_AMOUNT := p_FROM_AMOUNT;
	END IF;
    ITJ.SCHEDULE_UPDATE(p_FROM_TRANSACTION_ID, p_SCHEDULE_TYPE, GA.INTERNAL_STATE, p_SCHEDULE_DATE, p_SCHEDULE_TIME,
				    p_AS_OF_DATE, p_TIME_ZONE, v_AMOUNT, p_FROM_PRICE, p_STATUS, TRUE, p_ASSIGNED_AMOUNT, p_TO_TRANSACTION_ID, p_ASSIGNMENT_TYPE);
    IF p_UPDATE_TO = 1 THEN
	    -- if update demand, then the values table should have an additional entry for
    	-- the demand value
	    ITJ.SCHEDULE_UPDATE(p_TO_TRANSACTION_ID, p_SCHEDULE_TYPE, GA.INTERNAL_STATE, p_SCHEDULE_DATE, p_SCHEDULE_TIME,
						    p_AS_OF_DATE, p_TIME_ZONE, p_TO_AMOUNT, p_TO_PRICE, p_STATUS);
    END IF;

END PUT_ASSIGNMENT;
---------------------------------------------------------------------------------------------------
END IA;
/
