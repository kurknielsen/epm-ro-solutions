CREATE OR REPLACE PACKAGE ALERTS_REPORTS IS
--Revision $Revision: 1.4 $

FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE PUT_ALERT_OCCURRENCE
	(
	p_OCCURRENCE_ID   IN NUMBER,
	p_ALERT_ID        IN NUMBER,
	p_ALERT_DATE      IN DATE,
	p_ALERT_TIME      IN VARCHAR2,
	p_EXPIRATION_DATE IN DATE,
	p_EXPIRATION_TIME IN VARCHAR2,
	p_ALERT_MESSAGE   IN VARCHAR2,
	p_PRIORITY        IN NUMBER := ML.c_PRIORITY_HIGHEST,
	p_STATUS          OUT NUMBER
	);

PROCEDURE PUT_ALERTS_ACKNOWLEDGED(p_OCCURRENCE_ID IN NUMBER_COLLECTION);

PROCEDURE ALERT_USER_REPORT
	(
	p_TYPE                 IN VARCHAR2,
	p_CATEGORY             IN VARCHAR2,
	p_SHOW_ACKED_BY_SELF   IN NUMBER,
	p_SHOW_ACKED_BY_OTHERS IN NUMBER,
	p_SHOW_EXPIRED         IN NUMBER,
	p_STATUS               OUT NUMBER,
	p_CURSOR               IN OUT GA.REFCURSOR
	);

FUNCTION ACKED_BY_OTHERS
	(
	p_OCCURRENCE_ID IN NUMBER,
	p_SELF          IN NUMBER
	) RETURN NUMBER;

FUNCTION ACKED_BY_SELF
	(
	p_OCCURRENCE_ID IN NUMBER,
	p_SELF          IN NUMBER
	) RETURN NUMBER;

PROCEDURE ALERT_ADMIN_REPORT
	(
	p_TYPE         IN VARCHAR2,
	p_CATEGORY     IN VARCHAR2,
	p_BEGIN_DATE   IN DATE,
	p_END_DATE     IN DATE,
	p_SHOW_ACKED   IN NUMBER,
	p_SHOW_EXPIRED IN NUMBER,
	p_STATUS       OUT NUMBER,
	p_CURSOR       IN OUT GA.REFCURSOR
	);

PROCEDURE TYPE_LIST
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE CAT_LIST
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

FUNCTION EXPIRED_TEST(p_EXPIRATION_DATE IN DATE) RETURN NUMBER;

PROCEDURE OCCURRENCE_DRILL_DOWN
	(
	p_OCCURRENCE_ID IN NUMBER,
	p_TIME_ZONE     IN VARCHAR2,
	p_STATUS        OUT NUMBER,
	p_CURSOR        IN OUT GA.REFCURSOR
	);

FUNCTION CAT_LOOKUP(p_ALERT_ID IN NUMBER) RETURN VARCHAR2;

FUNCTION TYPE_LOOKUP(p_ALERT_ID IN NUMBER) RETURN VARCHAR2;

PROCEDURE PRIORITY_LIST
	(
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	);

END ALERTS_REPORTS;
/
CREATE OR REPLACE PACKAGE BODY ALERTS_REPORTS IS
-------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
	RETURN '$Revision: 1.4 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_ALERT_OCCURRENCE
	(
	p_OCCURRENCE_ID   IN NUMBER,
	p_ALERT_ID        IN NUMBER,
	p_ALERT_DATE      IN DATE,
	p_ALERT_TIME      IN VARCHAR2,
	p_EXPIRATION_DATE IN DATE,
	p_EXPIRATION_TIME IN VARCHAR2,
	p_ALERT_MESSAGE   IN VARCHAR2,
	p_PRIORITY        IN NUMBER := ML.c_PRIORITY_HIGHEST,
	p_STATUS          OUT NUMBER
	) AS

	v_ALERT_DATE  DATE;
	v_EXPIRE_DATE DATE;
	v_TIME_ZONE   VARCHAR2(8);
	v_ACTION_NAME VARCHAR2(64);
BEGIN

	IF p_OCCURRENCE_ID IS NOT NULL AND p_OCCURRENCE_ID > 0 THEN
		-- UPDATE
		v_ACTION_NAME := SD.g_ACTION_UPDATE_ALERT_OCCUR;
	ELSE
		v_ACTION_NAME := SD.g_ACTION_CREATE_ALERT_OCCUR;
	END IF;

	SD.VERIFY_ENTITY_IS_ALLOWED(v_ACTION_NAME, p_ALERT_ID, EC.ED_SYSTEM_ALERT);

	SP.GET_TIME_ZONE(v_TIME_ZONE);

	IF p_ALERT_DATE IS NULL AND p_ALERT_TIME IS NULL THEN
		v_ALERT_DATE := SYSDATE_AS_CUT();
	ELSE
		v_ALERT_DATE := DATE_TIME_AS_CUT(TO_CHAR(p_ALERT_DATE, 'YYYY-MM-DD'), p_ALERT_TIME, v_TIME_ZONE);
	END IF;

	v_EXPIRE_DATE := DATE_TIME_AS_CUT(TO_CHAR(p_EXPIRATION_DATE, 'YYYY-MM-DD'), p_EXPIRATION_TIME, v_TIME_ZONE);

	ALERTS.PUT_ALERT_OCCURRENCE(p_STATUS,
								p_OCCURRENCE_ID,
								p_ALERT_ID,
								p_ALERT_MESSAGE,
								NULL,
								NULL,
								NULL,
								v_ALERT_DATE,
								v_EXPIRE_DATE,
								p_PRIORITY);

	IF p_STATUS > 0 THEN
		p_STATUS := GA.SUCCESS;
	END IF;

END PUT_ALERT_OCCURRENCE;
-------------------------------------------------------------------------------------
PROCEDURE OCCURRENCE_DRILL_DOWN
	(
	p_OCCURRENCE_ID IN NUMBER,
	p_TIME_ZONE     IN VARCHAR2,
	p_STATUS        OUT NUMBER,
	p_CURSOR        IN OUT GA.REFCURSOR
	) AS
	
	v_COUNT 		NUMBER;
	v_ALERT_ID		NUMBER;

BEGIN

	v_COUNT := 0;
	
	SELECT ALERT_ID INTO v_ALERT_ID
	FROM SYSTEM_ALERT_OCCURRENCE
	WHERE OCCURRENCE_ID = p_OCCURRENCE_ID;
		
	IF NOT SD.GET_ENTITY_IS_ALLOWED(SD.g_ACTION_SELECT_ALERT_OCCUR, v_ALERT_ID, EC.ED_SYSTEM_ALERT) THEN
	
		SELECT COUNT(1) INTO v_COUNT
		FROM SYSTEM_ALERT_ROLE A,
			TABLE(CAST(SECURITY_CONTROLS.CURRENT_ROLES AS ID_TABLE)) C
		WHERE A.ALERT_ID = v_ALERT_ID
			AND A.ROLE_ID = C.ID;
					
		IF v_COUNT = 0 THEN
			ERRS.RAISE(MSGCODES.c_ERR_PRIVILEGES, 'Only a recipient of the Alert or one who has the "' || SD.g_ACTION_SELECT_ALERT_OCCUR || '" Privilege for the Alert may access the Alert Acknowledgements for "' || TEXT_UTIL.TO_CHAR_ENTITY(v_ALERT_ID, EC.ED_SYSTEM_ALERT, TRUE) || '".' );
		END IF;
		
	END IF;

	OPEN p_CURSOR FOR
		SELECT NVL(A.USER_DISPLAY_NAME, A.USER_NAME) AS USER_NAME, TO_CHAR(FROM_CUT(K.ACKNOWLEDGE_DATE, p_TIME_ZONE), 'MM/DD/YYYY HH24:MI') AS DATE_ACKED
		FROM SYSTEM_ALERT_ACKNOWLEDGEMENT K, APPLICATION_USER A
		WHERE K.OCCURRENCE_ID = p_OCCURRENCE_ID
			  AND K.USER_ID = A.USER_ID;

	p_STATUS := GA.SUCCESS;

END OCCURRENCE_DRILL_DOWN;
-------------------------------------------------------------------------------------
FUNCTION TYPE_LOOKUP(p_ALERT_ID IN NUMBER) RETURN VARCHAR2 IS

	v_RETURN VARCHAR2(32);

BEGIN
	SELECT ALERT_TYPE INTO v_RETURN FROM SYSTEM_ALERT WHERE ALERT_ID = p_ALERT_ID;

	RETURN v_RETURN;

END TYPE_LOOKUP;
-------------------------------------------------------------------------------------
FUNCTION CAT_LOOKUP(p_ALERT_ID IN NUMBER) RETURN VARCHAR2 IS

	v_RETURN VARCHAR2(32);

BEGIN

	SELECT ALERT_CATEGORY INTO v_RETURN FROM SYSTEM_ALERT WHERE ALERT_ID = p_ALERT_ID;

	RETURN v_RETURN;

END CAT_LOOKUP;
-------------------------------------------------------------------------------------
FUNCTION EXPIRED_TEST(p_EXPIRATION_DATE IN DATE) RETURN NUMBER IS

BEGIN

	IF p_EXPIRATION_DATE < SYSDATE_AS_CUT() THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END IF;

END EXPIRED_TEST;
-------------------------------------------------------------------------------------
PROCEDURE ALERT_ADMIN_REPORT
	(
	p_TYPE         IN VARCHAR2,
	p_CATEGORY     IN VARCHAR2,
	p_BEGIN_DATE   IN DATE,
	p_END_DATE     IN DATE,
	p_SHOW_ACKED   IN NUMBER,
	p_SHOW_EXPIRED IN NUMBER,
	p_STATUS       OUT NUMBER,
	p_CURSOR       IN OUT GA.REFCURSOR
	) AS

	v_USER_ID   NUMBER;
	v_TYPE      VARCHAR2(256);
	v_CATEGORY  VARCHAR2(256);
	v_IDS       ID_TABLE;
	v_NUM_ENTS  BINARY_INTEGER;
	v_TIME_ZONE VARCHAR2(10);
	v_HIGH_DATE DATE := HIGH_DATE;
	v_SYSDATE   DATE := SYSDATE_AS_CUT();

	v_SHOW_ACKED   NUMBER := NVL(p_SHOW_ACKED, 1);
	v_SHOW_EXPIRED NUMBER := NVL(p_SHOW_EXPIRED, 1);

BEGIN

	 v_USER_ID := SECURITY_CONTROLS.CURRENT_USER_ID;

	SP.GET_TIME_ZONE(v_TIME_ZONE);

	v_IDS := SD.GET_ALLOWED_ENTITY_ID_TABLE(SD.g_ACTION_SELECT_ALERT_OCCUR, EC.ED_SYSTEM_ALERT);
	v_NUM_ENTS := v_IDS.COUNT;

	IF NVL(p_TYPE, CONSTANTS.ALL_STRING) = CONSTANTS.ALL_STRING THEN
		v_TYPE := '%';
	ELSE
		v_TYPE := p_TYPE;
	END IF;

	IF NVL(p_CATEGORY, CONSTANTS.ALL_STRING) = CONSTANTS.ALL_STRING THEN
		v_CATEGORY := '%';
	ELSE
		v_CATEGORY := p_CATEGORY;
	END IF;

	OPEN p_CURSOR FOR
		SELECT DISTINCT O.OCCURRENCE_ID,
						A.ALERT_ID AS ALERT_ID,
						A.ALERT_ID AS ALERT_NAME_OLD,
						A.ALERT_NAME AS NAME,
						TO_NUMBER(O.PRIORITY) AS PRIORITY,
						O.ALERT_MESSAGE,
						O.ALERT_MESSAGE AS ALERT_MESSAGE_OLD,
						FROM_CUT(O.ALERT_DATE, v_TIME_ZONE) AS ALERT_DATE,
						TO_CHAR(FROM_CUT(O.ALERT_DATE, v_TIME_ZONE), 'HH24:MI') AS ALERT_TIME,
						FROM_CUT(O.ALERT_DATE, v_TIME_ZONE) AS ALERT_DATE_OLD,
						TO_CHAR(FROM_CUT(O.ALERT_DATE, v_TIME_ZONE), 'HH24:MI') AS ALERT_TIME_OLD,
						FROM_CUT(O.ALERT_EXPIRY, v_TIME_ZONE) AS EXPIRATION_DATE,
						TO_CHAR(FROM_CUT(O.ALERT_EXPIRY, v_TIME_ZONE), 'HH24:MI') AS EXPIRATION_TIME,
						ACKED_BY_OTHERS(O.OCCURRENCE_ID, -1) AS ACKED,
						O.TRIGGER_TYPE,
			   			LOG_REPORTS.GET_LOG_LEVEL_STRING(O.TRIGGER_LEVEL) AS TRIGGER_LEVEL,
			   			O.TRIGGER_VALUE
		FROM SYSTEM_ALERT A,
			 SYSTEM_ALERT_OCCURRENCE O,
			 TABLE(CAST(v_IDS AS ID_TABLE)) V,
			 SYSTEM_ALERT_ROLE R,
			 APPLICATION_USER_ROLE UR
		WHERE A.ALERT_ID = O.ALERT_ID
			  AND A.ALERT_TYPE LIKE v_TYPE
			  AND A.ALERT_CATEGORY LIKE v_CATEGORY
			  AND R.ALERT_ID = A.ALERT_ID
			  AND UR.ROLE_ID = R.ROLE_ID
			 --      and k.user_id = v_user_id AND o.alert_date between to_cut(p_BEGIN_DATE,v_TIME_ZONE) AND to_cut(p_END_DATE,v_TIME_ZONE)
			  AND (A.ALERT_ID = V.ID OR V.ID = SD.g_ALL_DATA_ENTITY_ID OR UR.USER_ID = v_USER_ID)
			  AND (v_SHOW_ACKED = 1 OR NOT ACKED_BY_OTHERS(O.OCCURRENCE_ID, -1) = 1)
			  AND (v_SHOW_EXPIRED = 1 OR v_SYSDATE < NVL(O.ALERT_EXPIRY, v_HIGH_DATE))
			  AND O.ALERT_DATE BETWEEN p_BEGIN_DATE AND (p_END_DATE + 1)
		UNION ALL
		SELECT DISTINCT O.OCCURRENCE_ID,
						A.ALERT_ID AS ALERT_ID,
						A.ALERT_ID AS ALERT_NAME_OLD,
						A.ALERT_NAME AS NAME,
						TO_NUMBER(O.PRIORITY) AS PRIORITY,
						O.ALERT_MESSAGE,
						O.ALERT_MESSAGE AS ALERT_MESSAGE_OLD,
						FROM_CUT(O.ALERT_DATE, v_TIME_ZONE) AS ALERT_DATE,
						TO_CHAR(FROM_CUT(O.ALERT_DATE, v_TIME_ZONE), 'HH24:MI') AS ALERT_TIME,
						FROM_CUT(O.ALERT_DATE, v_TIME_ZONE) AS ALERT_DATE_OLD,
						TO_CHAR(FROM_CUT(O.ALERT_DATE, v_TIME_ZONE), 'HH24:MI') AS ALERT_TIME_OLD,
						FROM_CUT(O.ALERT_EXPIRY, v_TIME_ZONE) AS EXPIRATION_DATE,
						TO_CHAR(FROM_CUT(O.ALERT_EXPIRY, v_TIME_ZONE), 'HH24:MI') AS EXPIRATION_TIME,
						ACKED_BY_OTHERS(O.OCCURRENCE_ID, -1) AS ACKED,
						O.TRIGGER_TYPE,
			   			LOG_REPORTS.GET_STATUS_LEVEL_STRING(O.TRIGGER_LEVEL) AS TRIGGER_LEVEL,
			   			O.TRIGGER_VALUE
		FROM SYSTEM_ALERT A, SYSTEM_ALERT_OCCURRENCE O, SYSTEM_ALERT_ROLE R, APPLICATION_USER_ROLE UR
		WHERE A.ALERT_ID = O.ALERT_ID
			  AND A.ALERT_TYPE LIKE v_TYPE
			  AND A.ALERT_CATEGORY LIKE v_CATEGORY
			  AND R.ALERT_ID = A.ALERT_ID
			  AND UR.ROLE_ID = R.ROLE_ID
			 --      and k.user_id = v_user_id AND o.alert_date between to_cut(p_BEGIN_DATE,v_TIME_ZONE) AND to_cut(p_END_DATE,v_TIME_ZONE)
			  AND (v_NUM_ENTS = 0 AND UR.USER_ID = v_USER_ID)
			  AND (v_SHOW_ACKED = 1 OR NOT ACKED_BY_OTHERS(O.OCCURRENCE_ID, -1) = 1)
			  AND (v_SHOW_EXPIRED = 1 OR v_SYSDATE < NVL(O.ALERT_EXPIRY, v_HIGH_DATE))
			  AND O.ALERT_DATE BETWEEN p_BEGIN_DATE AND (p_END_DATE + 1)
		ORDER BY ALERT_DATE, EXPIRATION_DATE;

	p_STATUS := GA.SUCCESS;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ALERT_ADMIN_REPORT;
-------------------------------------------------------------------------------------
PROCEDURE TYPE_LIST
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT CONSTANTS.ALL_STRING
		FROM DUAL
		UNION ALL
		SELECT UNIQUE(A.ALERT_TYPE) FROM SYSTEM_ALERT A;

	p_STATUS := GA.SUCCESS;
END TYPE_LIST;
-------------------------------------------------------------------------------------
PROCEDURE CAT_LIST
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT CONSTANTS.ALL_STRING
		FROM DUAL
		UNION ALL
		SELECT UNIQUE(A.ALERT_CATEGORY) FROM SYSTEM_ALERT A;

	p_STATUS := GA.SUCCESS;
END CAT_LIST;
-------------------------------------------------------------------------------------
FUNCTION ACKED_BY_OTHERS
	(
	p_OCCURRENCE_ID IN NUMBER,
	p_SELF          IN NUMBER
	) RETURN NUMBER IS
	v_RETURN    NUMBER;
	v_NUM_ACKED NUMBER;
BEGIN
	v_RETURN := 0;
	SELECT COUNT(A.USER_ID)
	INTO v_NUM_ACKED
	FROM SYSTEM_ALERT_ACKNOWLEDGEMENT A
	WHERE A.OCCURRENCE_ID = p_OCCURRENCE_ID
		  AND NOT A.USER_ID = p_SELF
		  AND A.ACKNOWLEDGE_DATE IS NOT NULL;

	IF v_NUM_ACKED > 0 THEN
		v_RETURN := 1;
	END IF;

	RETURN v_RETURN;

END ACKED_BY_OTHERS;
-------------------------------------------------------------------------------------
FUNCTION ACKED_BY_SELF
	(
	p_OCCURRENCE_ID IN NUMBER,
	p_SELF          IN NUMBER
	) RETURN NUMBER IS
	v_RETURN NUMBER;
	v_DATE   DATE;
BEGIN
	v_RETURN := 1;

	SELECT MAX(A.ACKNOWLEDGE_DATE)
	INTO v_DATE
	FROM SYSTEM_ALERT_ACKNOWLEDGEMENT A
	WHERE A.OCCURRENCE_ID = p_OCCURRENCE_ID
		  AND A.USER_ID = p_SELF;

	IF v_DATE IS NULL THEN
		v_RETURN := 0;
	END IF;

	RETURN v_RETURN;

END ACKED_BY_SELF;
-------------------------------------------------------------------------------------
PROCEDURE ALERT_USER_REPORT
	(
	p_TYPE                 IN VARCHAR2,
	p_CATEGORY             IN VARCHAR2,
	p_SHOW_ACKED_BY_SELF   IN NUMBER,
	p_SHOW_ACKED_BY_OTHERS IN NUMBER,
	p_SHOW_EXPIRED         IN NUMBER,
	p_STATUS               OUT NUMBER,
	p_CURSOR               IN OUT GA.REFCURSOR
	) AS

	v_USER_ID   NUMBER;
	v_TYPE      VARCHAR2(256);
	v_CATEGORY  VARCHAR2(256);
	v_TIME_ZONE VARCHAR2(10);
	v_HIGH_DATE DATE := HIGH_DATE;
	v_SYSDATE   DATE := SYSDATE_AS_CUT();

	v_SHOW_ACKED_BY_SELF   NUMBER := NVL(p_SHOW_ACKED_BY_SELF, 1);
	v_SHOW_ACKED_BY_OTHERS NUMBER := NVL(p_SHOW_ACKED_BY_OTHERS, 1);
	v_SHOW_EXPIRED         NUMBER := NVL(p_SHOW_EXPIRED, 1);

BEGIN
	
	v_USER_ID := SECURITY_CONTROLS.CURRENT_USER_ID;

	SP.GET_TIME_ZONE(v_TIME_ZONE);

	IF NVL(p_TYPE, CONSTANTS.ALL_STRING) = CONSTANTS.ALL_STRING THEN
		v_TYPE := '%';
	ELSE
		v_TYPE := p_TYPE;
	END IF;

	IF NVL(p_CATEGORY, CONSTANTS.ALL_STRING) = CONSTANTS.ALL_STRING THEN
		v_CATEGORY := '%';
	ELSE
		v_CATEGORY := p_CATEGORY;
	END IF;

	OPEN p_CURSOR FOR
		SELECT O.OCCURRENCE_ID,
			   A.ALERT_NAME,
			   A.ALERT_TYPE,
			   A.ALERT_CATEGORY,
			   TO_NUMBER(O.PRIORITY) AS PRIORITY,
			   O.ALERT_MESSAGE,
			   TO_CHAR(FROM_CUT(O.ALERT_DATE, v_TIME_ZONE), 'MM/DD/YYYY HH24:MI') AS ALERT_DATE,
			   TO_CHAR(FROM_CUT(O.ALERT_EXPIRY, v_TIME_ZONE), 'MM/DD/YYYY HH24:MI') AS EXPIRATION_DATE,
			   ACKED_BY_SELF(O.OCCURRENCE_ID, v_USER_ID) AS ACKED_BY_SELF,
			   ACKED_BY_OTHERS(O.OCCURRENCE_ID, v_USER_ID) AS ACKED_BY_OTHERS,
			   EXPIRED_TEST(O.ALERT_EXPIRY) AS EXPIRED,
			   O.TRIGGER_TYPE,
			   LOG_REPORTS.GET_STATUS_LEVEL_STRING(O.TRIGGER_LEVEL) AS TRIGGER_LEVEL,
			   O.TRIGGER_VALUE
		FROM SYSTEM_ALERT A, SYSTEM_ALERT_OCCURRENCE O, SYSTEM_ALERT_ACKNOWLEDGEMENT K
		WHERE A.ALERT_ID = O.ALERT_ID
			  AND K.OCCURRENCE_ID(+) = O.OCCURRENCE_ID
			  AND A.ALERT_TYPE LIKE v_TYPE
			  AND A.ALERT_CATEGORY LIKE v_CATEGORY
			  AND K.USER_ID(+) = v_USER_ID
			  AND O.ALERT_DATE < v_SYSDATE
			  AND (v_SHOW_ACKED_BY_SELF = 1 OR NOT ACKED_BY_SELF(O.OCCURRENCE_ID, v_USER_ID) = 1)
			  AND (v_SHOW_ACKED_BY_OTHERS = 1 OR NOT ACKED_BY_OTHERS(O.OCCURRENCE_ID, v_USER_ID) = 1)
			  AND (v_SHOW_EXPIRED = 1 OR v_SYSDATE < NVL(O.ALERT_EXPIRY, v_HIGH_DATE))
		ORDER BY EXPIRED, ALERT_DATE, EXPIRATION_DATE;

	p_STATUS := GA.SUCCESS;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;

END ALERT_USER_REPORT;
-------------------------------------------------------------------------------------
PROCEDURE PUT_ALERTS_ACKNOWLEDGED(p_OCCURRENCE_ID IN NUMBER_COLLECTION) AS
	v_COUNTER NUMBER;
BEGIN
	v_COUNTER := 1;

	WHILE v_COUNTER <= p_OCCURRENCE_ID.COUNT LOOP
		ALERTS.PUT_ALERT_ACKNOWLEDGED(p_OCCURRENCE_ID(v_COUNTER));
		v_COUNTER := v_COUNTER + 1;
	END LOOP;
END PUT_ALERTS_ACKNOWLEDGED;
-------------------------------------------------------------------------------------
PROCEDURE PRIORITY_LIST
	(
	p_STATUS OUT NUMBER,
	p_CURSOR OUT GA.REFCURSOR
	) AS

BEGIN
	OPEN p_CURSOR FOR
		SELECT 'Highest' AS PRIORITY_NAME, ML.c_PRIORITY_HIGHEST AS ID
		FROM DUAL
		UNION ALL
		SELECT 'High', ML.c_PRIORITY_HIGH
		FROM DUAL
		UNION ALL
		SELECT 'Normal', ML.c_PRIORITY_NORMAL
		FROM DUAL
		UNION ALL
		SELECT 'Low', ML.c_PRIORITY_LOW
		FROM DUAL
		UNION ALL
		SELECT 'Lowest', ML.c_PRIORITY_LOWEST FROM DUAL;

	p_STATUS := GA.SUCCESS;
END PRIORITY_LIST;
-------------------------------------------------------------------------------------
END ALERTS_REPORTS;
/
