CREATE OR REPLACE PACKAGE RS AS
--Revision $Revision: 1.127 $

-- Load Obligation to Schedule Package.-

-- Types to define the record set contents for Ancillary Service Schedule.
TYPE t_ANC_SVC_SCHEDULE IS RECORD (
	SCHEDULE_DATE	 	DATE,
	TRANSACTION_ALIAS    INTERCHANGE_TRANSACTION.TRANSACTION_ALIAS%TYPE,
	CURRENT_AMOUNT 		NUMBER,
	NEW_AMOUNT 	 		NUMBER
);
TYPE t_cur_ANC_SVC_SCHEDULE IS REF CURSOR RETURN t_ANC_SVC_SCHEDULE;

FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE ACCEPT_OBLIGATION_AS_SCHEDULE
	(
	p_OBLIGATION_ID IN NUMBER,
	p_TRANSACTION_ID IN NUMBER,
	p_OBLIGATION_TYPE IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE ACCEPT_LOAD_OBLIGATION
	(
	p_MODEL_ID IN NUMBER,
	p_OBLIGATION_NAME IN VARCHAR,
	p_OBLIGATION_ID IN NUMBER,
	p_OBLIGATION_TYPE IN CHAR,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE
	);

PROCEDURE ACCEPT_LOAD_OBLIGATION_DT
	(
	p_MODEL_ID IN NUMBER,
	p_OBLIGATION_NAME IN VARCHAR,
	p_OBLIGATION_ID IN NUMBER,
	p_OBLIGATION_TYPE IN CHAR,
	p_SCHEDULE_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_BEGIN_DATETIME IN DATE,
	p_END_DATETIME IN DATE,
	p_AS_OF_DATE IN DATE
	);

PROCEDURE REMOVE_LOAD_OBLIGATION
	(
	p_OBLIGATION_ID IN NUMBER
	);

PROCEDURE CREATE_LOAD_OBLIGATION
	(
	p_REQUEST_TYPE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_INCUMBENT_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCLUDE_UFE_ALLOCATION IN NUMBER,
	p_EXCLUDE_ZERO_SCHEDULES IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE ACCEPT_INCUMBENT_OBLIGATION
	(
	p_REQUEST_TYPE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_CAST_AS_OF_DATE IN DATE,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE ACCEPT_INCUMBENT_OBLIGATION_EX
	(
	p_REQUEST_TYPE IN VARCHAR,
    p_STATEMENT_TYPE IN NUMBER,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_CAST_AS_OF_DATE IN DATE,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE ACCEPT_INCUMBENT_OBLIGATION_DT
	(
	p_REQUEST_TYPE IN VARCHAR,
    p_STATEMENT_TYPE IN NUMBER,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_BEGIN_DATETIME IN DATE,
	p_END_DATETIME IN DATE,
	p_AS_OF_DATE IN DATE,
	p_CAST_AS_OF_DATE IN DATE,
	p_TRACE_ON IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE SELECT_INCUMBENT_OBLIGATION
	(
	p_REQUEST_TYPE IN VARCHAR,
	p_MODEL_ID IN NUMBER,
	p_SCENARIO_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_MIN_INTERVAL OUT VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE SELECT_LOAD_OBLIGATION
	(
	p_OBLIGATION_ID IN NUMBER,
	p_OBLIGATION_TYPE IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE SAVE_LOAD_OBLIGATION
	(
	p_OBLIGATION_ID IN NUMBER,
	p_OBLIGATION_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR,
	p_DATA_TRIPLES IN VARCHAR,
	p_STATUS OUT NUMBER
	);

FUNCTION GET_ANC_SVC_TXN_ALIAS
	(
	p_NAME_PREFIX IN VARCHAR2,
	p_PSE_ALIAS IN VARCHAR2,
	p_POOL_ALIAS IN VARCHAR2,
	p_SERVICE_POINT_ALIAS IN VARCHAR2,
	p_SCHEDULE_GROUP_ALIAS IN VARCHAR2,
	p_SERVICE_ZONE_ALIAS IN VARCHAR2,
	p_SCHEDULE_FORMAT IN VARCHAR2,
	p_ANCILLARY_SERVICE_ALIAS IN VARCHAR2
	) RETURN VARCHAR2;

-- Queries for schedule data for specified Ancillary Service. This simply
-- represents the aggregated current and new ancillary service data.
-- The new data can then be accepted into a schedule.
PROCEDURE ANC_SVC_SCHEDULES
	(
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_CURSOR OUT t_cur_ANC_SVC_SCHEDULE
	);

-- Accepts Ancillary Service data into schedules. This will clear out
-- previously accepted schedule data, create transactions if necessary, and
-- then copy the aggregated data into IT_SCHEDULE.
PROCEDURE ACCEPT_ANC_SVC_INTO_SCHEDULES
	(
	p_ANCILLARY_SERVICE_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER
	);

FUNCTION APPLY_ROUNDING_AND_MINIMUM
	(
	p_AMOUNT IN NUMBER,
	p_ROUNDING_PREFERENCE IN CHAR,
	p_MINIMUM_SCHEDULE_AMT IN NUMBER,
	p_ENFORCE_MINIMUM_RULE IN BOOLEAN DEFAULT TRUE
	) RETURN NUMBER;

$if $$UNIT_TEST_MODE = 1 $then

PROCEDURE SAVE_SCHEDULE
  (
  p_MODEL_ID IN NUMBER,
  p_OBLIGATION_ID IN NUMBER,
  p_OBLIGATION_TYPE IN VARCHAR2,
  p_OBLIGATION_INTERVAL IN VARCHAR2,
  p_TRANSACTION_ID IN NUMBER,
  p_SCHEDULE_TYPE IN NUMBER,
  p_BEGIN_DATE IN DATE,
  p_END_DATE DATE,
  p_TIME_ZONE IN VARCHAR2,
  p_AS_OF_DATE IN DATE
  );
  
$end

g_MODULE_NAME VARCHAR(16) := 'Scheduling';
g_WHOLESALE NUMBER(4) := -999;
g_MODEL_ID NUMBER(1) := 1; -- Electric Model.
g_NO_SUFFIX VARCHAR(1) := '';
g_TX_SUFFIX CHAR(8) := ' TX Loss';
g_DX_SUFFIX CHAR(8) := ' DX Loss';
g_UE_SUFFIX CHAR(4) := ' UFE';
g_AJ_SUFFIX CHAR(4) := ' Adj';
g_SECOND NUMBER(6,5) :=  .00001;
END RS;
/