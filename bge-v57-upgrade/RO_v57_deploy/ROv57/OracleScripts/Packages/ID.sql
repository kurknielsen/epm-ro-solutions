CREATE OR REPLACE PACKAGE ID AS
--Revision $Revision: 1.100 $

-- IDENT PACKAGE --

FUNCTION WHAT_VERSION RETURN VARCHAR;


PROCEDURE ID_FOR_ACCOUNT_EXTERNAL_IDENT
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ACCOUNT_ID OUT NUMBER
	);

PROCEDURE ID_FOR_ACCOUNT_EXTERNAL_IDENT
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ACCOUNT_ID OUT NUMBER
	);

FUNCTION ID_FOR_ACCOUNT_EXTERNAL_IDENT
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_ACCOUNT
	(
	p_ACCOUNT_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ACCOUNT_ID OUT NUMBER
	);

PROCEDURE ID_FOR_ACCOUNT
	(
	p_ACCOUNT_NAME IN VARCHAR,
	p_ACCOUNT_ID OUT NUMBER
	);

FUNCTION ID_FOR_ACCOUNT
	(
	p_ACCOUNT_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_CATEGORY
	(
	p_CATEGORY_NAME IN VARCHAR,
	p_CATEGORY_ID OUT NUMBER
	);

PROCEDURE ID_FOR_ENTITY_DOMAIN
	(
	p_ENTITY_DOMAIN_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ID OUT NUMBER
	);

PROCEDURE ID_FOR_CONTACT
	(
	p_CONTACT_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CONTACT_ID OUT NUMBER
	);

PROCEDURE ID_FOR_CONTACT
	(
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_OWNER_ENTITY_ID IN NUMBER,
	p_CATEGORY_ID IN NUMBER,
	p_CONTACT_NAME IN VARCHAR,
	p_CONTACT_ID OUT NUMBER
	);

PROCEDURE ID_FOR_CONTACT
	(
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_OWNER_ENTITY_ID IN NUMBER,
	p_CATEGORY_ID IN NUMBER,
	p_CONTACT_ID OUT NUMBER
	);

PROCEDURE ID_FOR_EDC
	(
	p_EDC_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_EDC_ID OUT NUMBER
	);

PROCEDURE ID_FOR_EDC
	(
	p_EDC_NAME IN VARCHAR,
	p_EDC_ID OUT NUMBER
	);

FUNCTION ID_FOR_EDC
	(
	p_EDC_NAME IN VARCHAR
	) RETURN NUMBER;

FUNCTION ID_FOR_EDC_EXTERNAL_IDENTIFIER
	(
	p_EDC_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER;

PROCEDURE ID_FOR_ESP
	(
	p_ESP_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ESP_ID OUT NUMBER
	);

PROCEDURE ID_FOR_ESP
	(
	p_ESP_NAME IN VARCHAR,
	p_ESP_ID OUT NUMBER
	);

FUNCTION ID_FOR_ESP
	(
	p_ESP_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_PSE
	(
	p_PSE_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PSE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_PSE
	(
	p_PSE_NAME IN VARCHAR,
	p_PSE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_PRODUCT
	(
	p_PRODUCT_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PRODUCT_ID OUT NUMBER
	);

FUNCTION ID_FOR_PSE
	(
	p_PSE_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_PSE_EXTERNAL_IDENTIFIER
	(
	p_PSE_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_PSE_ID OUT NUMBER,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	);

FUNCTION ID_FOR_PSE_EXTERNAL_IDENTIFIER
	(
	p_PSE_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER;

PROCEDURE ID_FOR_MRSP
	(
	p_MRSP_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_MRSP_ID OUT NUMBER
	);

PROCEDURE ID_FOR_MRSP
	(
	p_MRSP_NAME IN VARCHAR,
	p_MRSP_ID OUT NUMBER
	);

PROCEDURE ID_FOR_SC
	(
	p_SC_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SC_ID OUT NUMBER
	);

PROCEDURE ID_FOR_SC
	(
	p_SC_NAME IN VARCHAR,
	p_SC_ID OUT NUMBER
	);

FUNCTION ID_FOR_SC
	(
	p_SC_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SERVICE_LOCATION_ID OUT NUMBER
	);

PROCEDURE ID_FOR_SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_SERVICE_LOCATION_ID OUT NUMBER
	);

FUNCTION ID_FOR_SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_SERVICE_LOCATION_XID
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_SERVICE_LOCATION_ALIAS IN VARCHAR,
	p_SERVICE_LOCATION_ID OUT NUMBER
	);

PROCEDURE ID_FOR_METER_EXTERNAL_IDENT
	(
	p_MRSP_ID IN NUMBER,
	p_METER_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_METER_ID OUT NUMBER
	);

PROCEDURE ID_FOR_METER_EXTERNAL_IDENT
	(
	p_MRSP_ID IN NUMBER,
	p_METER_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_METER_ID OUT NUMBER
	);

PROCEDURE ID_FOR_METER
	(
	p_MRSP_ID IN NUMBER,
	p_METER_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_METER_ID OUT NUMBER
	);

PROCEDURE ID_FOR_METER
	(
	p_MRSP_ID IN NUMBER,
	p_METER_NAME IN VARCHAR,
	p_METER_ID OUT NUMBER
	);

PROCEDURE ID_FOR_WEATHER_STATION
	(
	p_STATION_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_STATION_ID OUT NUMBER
	);

PROCEDURE ID_FOR_WEATHER_STATION
	(
	p_STATION_NAME IN VARCHAR,
	p_STATION_ID OUT NUMBER
	);

PROCEDURE ID_FOR_WEATHER_PARAMETER
	(
	p_PARAMETER_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PARAMETER_ID OUT NUMBER
	);

PROCEDURE ID_FOR_WEATHER_PARAMETER
	(
	p_PARAMETER_NAME IN VARCHAR,
	p_PARAMETER_ID OUT NUMBER
	);

PROCEDURE ID_FOR_SERVICE_POINT
	(
	p_SERVICE_POINT_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SERVICE_POINT_ID OUT NUMBER
	);

PROCEDURE ID_FOR_SERVICE_POINT
	(
	p_SERVICE_POINT_NAME IN VARCHAR,
	p_SERVICE_POINT_ID OUT NUMBER
	);

FUNCTION ID_FOR_SERVICE_POINT
	(
	p_SERVICE_POINT_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_SERVICE_POINT_XID
	(
	p_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SERVICE_POINT_ID OUT NUMBER
	);

PROCEDURE ID_FOR_SERVICE_POINT_XID
	(
	p_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_SERVICE_POINT_ID OUT NUMBER
	);

PROCEDURE ID_FOR_LOAD_PROFILE
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PROFILE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_LOAD_PROFILE
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_PROFILE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_LOAD_PROFILE_LIBRARY
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PROFILE_LIBRARY_ID OUT NUMBER
	);

PROCEDURE ID_FOR_LOAD_PROFILE_LIBRARY
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_LIBRARY_ID OUT NUMBER
	);

PROCEDURE ID_FOR_CALENDAR
	(
	p_CALENDAR_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CALENDAR_ID OUT NUMBER
	);

PROCEDURE ID_FOR_CALENDAR
	(
	p_CALENDAR_NAME IN VARCHAR,
	p_CALENDAR_ID OUT NUMBER
	);

FUNCTION ID_FOR_CALENDAR
	(
	p_CALENDAR_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_LOSS_FACTOR
	(
	p_LOSS_FACTOR_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_LOSS_FACTOR_ID OUT NUMBER
	);

PROCEDURE ID_FOR_LOSS_FACTOR
	(
	p_LOSS_FACTOR_NAME IN VARCHAR,
	p_LOSS_FACTOR_ID OUT NUMBER
	);

PROCEDURE ID_FOR_TRANSACTION
	(
	p_TRANSACTION_NAME IN VARCHAR,
	p_TRANSACTION_TYPE IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_TRANSACTION_ID OUT NUMBER,
	p_MODEL_ID IN NUMBER DEFAULT GA.DEFAULT_MODEL
	);

PROCEDURE ID_FOR_TRANSACTION
	(
	p_TRANSACTION_NAME IN VARCHAR,
	p_TRANSACTION_TYPE IN VARCHAR,
	p_TRANSACTION_ID OUT NUMBER
	);

PROCEDURE ID_FOR_ENTITY_DOMAIN_ALIAS
	(
	p_ENTITY_DOMAIN_ALIAS IN VARCHAR,
	p_ENTITY_DOMAIN_ID OUT NUMBER
	);

PROCEDURE ID_FOR_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ALIAS IN VARCHAR,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ATTRIBUTE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ALIAS IN VARCHAR,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_ATTRIBUTE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ATTRIBUTE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_ATTRIBUTE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_HOLIDAY
	(
	p_HOLIDAY_NAME IN VARCHAR,
	p_HOLIDAY_ID OUT NUMBER
	);

PROCEDURE ID_FOR_AREA
	(
	p_AREA_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_AREA_ID OUT NUMBER
	);

PROCEDURE ID_FOR_SYSTEM_LOAD
	(
	p_SYSTEM_LOAD_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SYSTEM_LOAD_ID OUT NUMBER
	);

PROCEDURE ID_FOR_MARKET_PRICE
	(
	p_MARKET_PRICE_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_MARKET_PRICE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_MARKET_PRICE_EXT_IDENT
	(
	p_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_MARKET_PRICE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_COMMODITY
	(
	p_COMMODITY_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_COMMODITY_ID OUT NUMBER
	);

FUNCTION ID_FOR_PSE_NERC_CODE
	(
	p_PSE_NERC_CODE IN VARCHAR
	) RETURN NUMBER;

FUNCTION ID_FOR_TP_NERC_CODE
	(
	p_TP_NERC_CODE IN VARCHAR
	) RETURN NUMBER;

FUNCTION ID_FOR_CA_NERC_CODE
	(
	p_CA_NERC_CODE IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_CA
	(
	p_CA_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CA_ID OUT NUMBER
	) ;

PROCEDURE ID_FOR_TP
	(
	p_TP_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_TP_ID OUT NUMBER
	);

FUNCTION ID_FOR_ESP_DUNS_NUMBER
	(
	p_ESP_DUNS_NUMBER IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_CUSTOMER
	(
	p_CUSTOMER_IDENTIFIER IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CUSTOMER_STATUS IN VARCHAR,
	p_CUSTOMER_IS_ACTIVE IN NUMBER,
	p_CUSTOMER_ID OUT NUMBER
	);

FUNCTION ID_FOR_POOL
	(
	p_POOL_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_POOL
	(
	p_POOL_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_POOL_ID OUT NUMBER
	);

PROCEDURE ID_FOR_POOL_EXTERNAL_IDENT
   (
   p_POOL_EXTERNAL_IDENTIFIER IN VARCHAR,
   p_POOL_ID OUT NUMBER
   );

FUNCTION ID_FOR_POOL_EXTERNAL_IDENT
	(
	p_POOL_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER;

FUNCTION ID_FOR_ESP_EXTERNAL_IDENTIFIER
	(
	p_ESP_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER;

FUNCTION ID_FOR_PIPELINE_EXTERNAL_IDENT
	(
	p_PIPELINE_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER;

FUNCTION ID_FOR_CONTRACT
	(
	p_CONTRACT_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_BILL_CYCLE
	(
	p_BILL_CYCLE_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_BILL_CYCLE_ID OUT NUMBER
	);

FUNCTION ID_FOR_TX_SERVICE_TYPE
	(
	p_SERVICE_TYPE_NAME IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_GEOGRAPHY
	(
    p_CITY IN VARCHAR2,
    p_STATE_CODE IN VARCHAR2,
    p_POSTAL_CODE IN VARCHAR2,
    p_COUNTRY_CODE IN VARCHAR2,
    p_CREATE_IF_NOT_FOUND IN BOOLEAN,
    p_GEOGRAPHY_ID OUT NUMBER
    );

PROCEDURE ID_FOR_CASE
	(
	p_CASE_NAME IN VARCHAR,
	p_CASE_CATEGORY IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CASE_ID OUT NUMBER
	);

PROCEDURE ID_FOR_CASE
	(
	p_CASE_NAME IN VARCHAR,
	p_CASE_CATEGORY IN VARCHAR,
	p_CASE_ID OUT NUMBER
	);

FUNCTION ID_FOR_CASE
	(
	p_CASE_NAME IN VARCHAR,
	p_CASE_CATEGORY IN VARCHAR
	) RETURN NUMBER;

PROCEDURE ID_FOR_INTERCHANGE_CONTRACT
	(
	p_CONTRACT_NAME IN VARCHAR,
	p_CONTRACT_ID OUT NUMBER
	);

FUNCTION ID_FOR_SCENARIO
	(
	p_SCENARIO_NAME IN VARCHAR
	) RETURN NUMBER;

FUNCTION ID_FOR_SETTLEMENT_TYPE
	(
	p_SETTLEMENT_TYPE_NAME IN VARCHAR
	) RETURN NUMBER;

FUNCTION ID_FOR_SYSTEM_ACTION
	(
	p_ACTION_NAME IN VARCHAR
	) RETURN NUMBER;

END;
/
CREATE OR REPLACE PACKAGE BODY ID AS
---------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.100 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ACCOUNT_EXTERNAL_IDENT
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ACCOUNT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ACCOUNT EXTERNAL IDENTIFIER

v_ACCOUNT_EXTERNAL_IDENTIFIER ACCOUNT.ACCOUNT_EXTERNAL_IDENTIFIER%TYPE;

BEGIN

	v_ACCOUNT_EXTERNAL_IDENTIFIER := LTRIM(RTRIM(p_ACCOUNT_EXTERNAL_IDENTIFIER));

	IF v_ACCOUNT_EXTERNAL_IDENTIFIER IS NULL THEN
		p_ACCOUNT_ID := 0;
	ELSE
		BEGIN
			SELECT ACCOUNT_ID INTO p_ACCOUNT_ID
			FROM ACCOUNT
			WHERE ACCOUNT_EXTERNAL_IDENTIFIER = v_ACCOUNT_EXTERNAL_IDENTIFIER;
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				    IO.PUT_ACCOUNT
					    (
						p_ACCOUNT_ID,
						v_ACCOUNT_EXTERNAL_IDENTIFIER, -- NAME
						GA.UNDEFINED_ATTRIBUTE, -- ALIAS
						GA.UNDEFINED_ATTRIBUTE, -- DESC
						0, -- ID
						GA.UNDEFINED_ATTRIBUTE,  -- DUNS NUMBER
						v_ACCOUNT_EXTERNAL_IDENTIFIER, -- ACCOUNT EXTERNAL IDENTIFIER
						'Meter', -- ACCOUNT MODEL OPTION
						GA.UNDEFINED_ATTRIBUTE,  -- SIC CODE,
						GA.UNDEFINED_ATTRIBUTE,  -- ACCOUNT METER TYPE
						GA.UNDEFINED_ATTRIBUTE,  -- ACCOUNT METER EXT IDENTIFIER
						v_ACCOUNT_EXTERNAL_IDENTIFIER, -- ACCOUNT_DISPLAY_NAME
						GA.UNDEFINED_ATTRIBUTE,  -- ACCOUNT_BILL_OPTION
						0,  -- ACCOUNT_ROLLUP_ID
						0, -- IS EXTERNAL INTERVAL USAGE
						0, -- IS EXTERNAL BILLED USAGE
						0, -- IS AGGREGATE ACCOUNT
						0, -- IS UFE PARTICIPANT
						0, -- IS CREATE SETTLEMENT PROFILE
						0, -- IS EXTERNAL FORECAST
                        0, -- IS SUB AGGREGATE
						0, -- TX SERVICE TYPE ID
						0, -- USE_TOU_USAGE_FACTORS
                        GA.DEFAULT_MODEL -- MODEL ID
						);
				ELSE
			    	 p_ACCOUNT_ID := GA.NO_DATA_FOUND;
				END IF;
		END;
	END IF;

END ID_FOR_ACCOUNT_EXTERNAL_IDENT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ACCOUNT_EXTERNAL_IDENT
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ACCOUNT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ACCOUNT EXTERNAL IDENTIFIER

BEGIN

    ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_ACCOUNT_EXTERNAL_IDENTIFIER, TRUE, p_ACCOUNT_ID);

END ID_FOR_ACCOUNT_EXTERNAL_IDENT;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_ACCOUNT_EXTERNAL_IDENT
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR
	) RETURN NUMBER IS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ACCOUNT EXTERNAL IDENTIFIER

v_ACCOUNT_ID NUMBER;

BEGIN

    ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_ACCOUNT_EXTERNAL_IDENTIFIER, TRUE, v_ACCOUNT_ID);

	IF v_ACCOUNT_ID > 0 THEN
		RETURN v_ACCOUNT_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_ACCOUNT_EXTERNAL_IDENT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ACCOUNT
	(
	p_ACCOUNT_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ACCOUNT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ACCOUNT NAME

v_ACCOUNT_NAME ACCOUNT.ACCOUNT_NAME%TYPE;

BEGIN

	v_ACCOUNT_NAME := LTRIM(RTRIM(p_ACCOUNT_NAME));

	IF v_ACCOUNT_NAME IS NULL THEN
		p_ACCOUNT_ID := 0;
	ELSE
		BEGIN
			SELECT ACCOUNT_ID INTO p_ACCOUNT_ID
			FROM ACCOUNT
			WHERE ACCOUNT_NAME = v_ACCOUNT_NAME;
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				    IO.PUT_ACCOUNT
					    (
						p_ACCOUNT_ID,
						v_ACCOUNT_NAME,	 -- NAME
						GA.UNDEFINED_ATTRIBUTE, -- ALIAS
						GA.UNDEFINED_ATTRIBUTE, -- DESC
						0, -- ID
						GA.UNDEFINED_ATTRIBUTE, -- DUNS NUMBER
						GA.UNDEFINED_ATTRIBUTE, -- ACCOUNT NUMBER
						'Meter', -- ACCOUNT MODEL OPTION
						GA.UNDEFINED_ATTRIBUTE, -- SIC CODE
						GA.UNDEFINED_ATTRIBUTE, -- ACCOUNT METER TYPE
						GA.UNDEFINED_ATTRIBUTE, -- ACCOUNT METER EXT IDENTIFIER
						v_ACCOUNT_NAME, -- ACCOUNT_DISPLAY_NAME
						GA.UNDEFINED_ATTRIBUTE,  -- ACCOUNT_BILL_OPTION
						0,-- ACCOUNT_ROLLUP_ID
						0,-- IS EXTERNAL INTERVAL USAGE
						0,-- IS EXTERNAL BILLED USAGE
						0, -- IS AGGREGATE ACCOUNT
						0, -- IS UFE PARTICIPANT
						0, -- IS CREATE SETTLEMENT PROFILE
						0, -- IS EXTERNAL FORECAST
                        0, -- IS SUB AGGREGATE
						0, -- TX SERVICE TYPE ID
						0, -- USE_TOU_USAGE_FACTORS
						GA.DEFAULT_MODEL -- MODEL ID
						);
				ELSE
			    	 p_ACCOUNT_ID := GA.NO_DATA_FOUND;
				END IF;
		END;
	END IF;

END ID_FOR_ACCOUNT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ACCOUNT
	(
	p_ACCOUNT_NAME IN VARCHAR,
	p_ACCOUNT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ACCOUNT NAME


BEGIN

	ID_FOR_ACCOUNT(p_ACCOUNT_NAME, TRUE, p_ACCOUNT_ID);

END ID_FOR_ACCOUNT;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_ACCOUNT
	(
	p_ACCOUNT_NAME IN VARCHAR
	) RETURN NUMBER IS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ACCOUNT NAME

v_ACCOUNT_ID NUMBER;

BEGIN

	ID_FOR_ACCOUNT(p_ACCOUNT_NAME, TRUE, v_ACCOUNT_ID);

	IF v_ACCOUNT_ID > 0 THEN
		RETURN v_ACCOUNT_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_ACCOUNT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CATEGORY
	(
	p_CATEGORY_NAME IN VARCHAR,
	p_CATEGORY_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED CATEGORY NAME

v_CATEGORY_NAME CATEGORY.CATEGORY_NAME%TYPE;

BEGIN

	v_CATEGORY_NAME := LTRIM(RTRIM(p_CATEGORY_NAME));

	SELECT CATEGORY_ID
	INTO p_CATEGORY_ID
	FROM CATEGORY
	WHERE CATEGORY_NAME = v_CATEGORY_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IO.PUT_CATEGORY
				(
				p_CATEGORY_ID,
				v_CATEGORY_NAME,
				GA.UNDEFINED_ATTRIBUTE,
				GA.UNDEFINED_ATTRIBUTE,
				0
				);
END ID_FOR_CATEGORY;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ENTITY_DOMAIN
	(
	p_ENTITY_DOMAIN_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ENTITY DOMAIN NAME

BEGIN
	SELECT ENTITY_DOMAIN_ID
	INTO p_ENTITY_DOMAIN_ID
	FROM ENTITY_DOMAIN
	WHERE ENTITY_DOMAIN_NAME = LTRIM(RTRIM(p_ENTITY_DOMAIN_NAME));

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY , 'Entity Domain with Name = "' || p_ENTITY_DOMAIN_NAME || '"');
END ID_FOR_ENTITY_DOMAIN;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CONTACT
	(
	p_CONTACT_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CONTACT_ID OUT NUMBER
	) AS

-- Answer the internal id associated with the specified CONTACT NAME

v_CONTACT_NAME CONTACT.CONTACT_NAME%TYPE;

BEGIN

	v_CONTACT_NAME := LTRIM(RTRIM(p_CONTACT_NAME));

	IF v_CONTACT_NAME IS NULL THEN
		p_CONTACT_ID := 0;
	ELSE
		BEGIN
			SELECT CONTACT_ID INTO p_CONTACT_ID
			FROM CONTACT
			WHERE CONTACT_NAME = v_CONTACT_NAME;


		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				    IO.PUT_CONTACT
					    (
						p_CONTACT_ID,
						v_CONTACT_NAME,	 -- NAME
						GA.UNDEFINED_ATTRIBUTE, -- ALIAS
						GA.UNDEFINED_ATTRIBUTE, -- DESC
						0, -- ID
						'Active', -- STATUS
						GA.UNDEFINED_ATTRIBUTE, -- EMAIL_ADDRESS
						GA.UNDEFINED_ATTRIBUTE, -- FIRST_NAME
						GA.UNDEFINED_ATTRIBUTE, -- MIDDLE_NAME
						GA.UNDEFINED_ATTRIBUTE, -- LAST_NAME
						GA.UNDEFINED_ATTRIBUTE, -- SALUTATION
						GA.UNDEFINED_ATTRIBUTE, -- TITLE
						GA.UNDEFINED_ATTRIBUTE  -- EXTERNAL_IDENTIFIER
						);
				ELSE
			    	 p_CONTACT_ID := GA.NO_DATA_FOUND;
				END IF;
		END;
	END IF;

END ID_FOR_CONTACT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CONTACT
	(
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_OWNER_ENTITY_ID IN NUMBER,
	p_CATEGORY_ID IN NUMBER,
	p_CONTACT_NAME IN VARCHAR,
	p_CONTACT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED CONTACT NAME

v_CONTACT_NAME CONTACT.CONTACT_NAME%TYPE;

BEGIN

	v_CONTACT_NAME := LTRIM(RTRIM(p_CONTACT_NAME));

	SELECT B.CONTACT_ID
	INTO p_CONTACT_ID
	FROM ENTITY_DOMAIN_CONTACT A, CONTACT B
	WHERE A.ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
		AND A.OWNER_ENTITY_ID = p_OWNER_ENTITY_ID
		AND A.CATEGORY_ID = p_CATEGORY_ID
		AND B.CONTACT_ID = A.CONTACT_ID
		AND B.CONTACT_NAME = v_CONTACT_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			p_CONTACT_ID := 0;
END ID_FOR_CONTACT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CONTACT
	(
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_OWNER_ENTITY_ID IN NUMBER,
	p_CATEGORY_ID IN NUMBER,
	p_CONTACT_ID OUT NUMBER
	) AS

BEGIN

	SELECT CONTACT_ID
	INTO p_CONTACT_ID
	FROM (SELECT CONTACT_ID
		FROM ENTITY_DOMAIN_CONTACT
		WHERE ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
			AND OWNER_ENTITY_ID = p_OWNER_ENTITY_ID
			AND CATEGORY_ID = p_CATEGORY_ID
		ORDER BY ENTRY_DATE DESC)
	WHERE ROWNUM = 1;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		p_CONTACT_ID := CONSTANTS.NOT_ASSIGNED;

END ID_FOR_CONTACT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_EDC
	(
	p_EDC_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_EDC_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED EDC NAME

v_EDC_NAME ENERGY_DISTRIBUTION_COMPANY.EDC_NAME%TYPE;

BEGIN

	v_EDC_NAME := LTRIM(RTRIM(p_EDC_NAME));

	IF v_EDC_NAME IS NULL THEN
		p_EDC_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT EDC_ID INTO p_EDC_ID
		FROM ENERGY_DISTRIBUTION_COMPANY
		WHERE EDC_NAME = v_EDC_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_EDC
				    (
					p_EDC_ID,
					v_EDC_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0,
					'Active',		-- STATUS
					GA.UNDEFINED_ATTRIBUTE, -- DUNS
					v_EDC_NAME, -- EXTERNAL IDENTIFIER
					GA.UNDEFINED_ATTRIBUTE, -- SETTLEMENT AGENT
					'Combine',	-- LOSS_FACTOR_OPTION
					0,					-- SYSTEM LOAD ID
					0,					-- MARKET PRICE ID
					0,					-- HOLIDAY SET ID
					0,					-- SCHEDULE COORDINATOR ID
					0					-- EXCLUDE FROM SCHEDULE
					);
			ELSE
			    p_EDC_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_EDC;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_EDC
	(
	p_EDC_NAME IN VARCHAR,
	p_EDC_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED EDC NAME

BEGIN

	ID_FOR_EDC(p_EDC_NAME, TRUE, p_EDC_ID);

END ID_FOR_EDC;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_EDC
	(
	p_EDC_NAME IN VARCHAR
	) RETURN NUMBER IS

v_EDC_ID NUMBER;

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED EDC NAME

BEGIN

	ID_FOR_EDC(p_EDC_NAME, TRUE, v_EDC_ID);

	IF v_EDC_ID > 0 THEN
		RETURN v_EDC_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_EDC;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_EDC_EXTERNAL_IDENTIFIER
	(
	p_EDC_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified EDC_EXTERNAL_IDENTIFIER.

v_EDC_ID ENERGY_DISTRIBUTION_COMPANY.EDC_ID%TYPE;

BEGIN

	SELECT EDC_ID
	INTO v_EDC_ID
	FROM ENERGY_DISTRIBUTION_COMPANY
	WHERE EDC_EXTERNAL_IDENTIFIER = LTRIM(RTRIM(p_EDC_EXTERNAL_IDENTIFIER));

	RETURN v_EDC_ID;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		IF p_NO_DATA_AS_NOT_ASSIGNED THEN
			RETURN CONSTANTS.NOT_ASSIGNED;
		ELSE
			RETURN GA.NO_DATA_FOUND;
		END IF;

END ID_FOR_EDC_EXTERNAL_IDENTIFIER;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ESP
	(
	p_ESP_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ESP_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ESP NAME

v_ESP_NAME ENERGY_SERVICE_PROVIDER.ESP_NAME%TYPE;

BEGIN

	v_ESP_NAME := LTRIM(RTRIM(p_ESP_NAME));

	IF v_ESP_NAME IS NULL THEN
		p_ESP_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT ESP_ID INTO p_ESP_ID
		FROM ENERGY_SERVICE_PROVIDER
		WHERE ESP_NAME = v_ESP_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_ESP
				    (
					p_ESP_ID,
					v_ESP_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0,
					v_ESP_NAME, -- ESP_EXTERNAL_IDENTIFIER
					GA.UNDEFINED_ATTRIBUTE, -- DUNS
					'Active', 	 -- STATUS
					'Certified', -- TYPE
					1  -- ESP_CREATE_LOAD_SCHEDULE
					);
			ELSE
			    p_ESP_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_ESP;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ESP
	(
	p_ESP_NAME IN VARCHAR,
	p_ESP_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ESP NAME

BEGIN

	ID_FOR_ESP(p_ESP_NAME, TRUE, p_ESP_ID);

END ID_FOR_ESP;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_ESP
	(
	p_ESP_NAME IN VARCHAR
	) RETURN NUMBER IS

v_ESP_ID NUMBER;

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ESP NAME

BEGIN

	ID_FOR_ESP(p_ESP_NAME, TRUE, v_ESP_ID);

	IF v_ESP_ID > 0 THEN
		RETURN v_ESP_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_ESP;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_PSE
	(
	p_PSE_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PSE_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED PSE NAME

v_PSE_NAME PURCHASING_SELLING_ENTITY.PSE_NAME%TYPE;

BEGIN

	v_PSE_NAME := LTRIM(RTRIM(p_PSE_NAME));

	IF v_PSE_NAME IS NULL THEN
		p_PSE_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT PSE_ID INTO p_PSE_ID
		FROM PURCHASING_SELLING_ENTITY
		WHERE PSE_NAME = v_PSE_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_PSE
				    (
					p_PSE_ID,
					v_PSE_NAME,
					v_PSE_NAME, -- ALIAS,
					v_PSE_NAME, -- DESC,
					0,
					GA.UNDEFINED_ATTRIBUTE, -- NERC CODE,
					'Active',
					GA.UNDEFINED_ATTRIBUTE, -- DUNS,
					GA.UNDEFINED_ATTRIBUTE, -- BANK,
					GA.UNDEFINED_ATTRIBUTE, -- ACH NUMBER,
					'Marketer',			-- PSE TYPE,
					GA.UNDEFINED_ATTRIBUTE, -- EXTERNAL IDENTIFIER,
					0,				-- IS RETAIL AGGREGATOR,
					0,			   	-- IS BACKUP GENERATION,
					0,				-- CREATE LOAD SCHEDULE
                    0,				-- IS BILLING ENTITY
                    		LOCAL_TIME_ZONE,		-- TIME_ZONE
					'Month',			-- STATEMENT_INTERVAL
                    		'Month',			-- INVOICE_INTERVAL
                    		'First of Month',		-- WEEK_BEGIN
					'By Product-Component',		-- INVOICE_LINE_ITEM_OPTION
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL,
					NULL
					);
			ELSE
			    p_PSE_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_PSE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_PSE
	(
	p_PSE_NAME IN VARCHAR,
	p_PSE_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED PSE NAME

BEGIN

	ID_FOR_PSE(p_PSE_NAME, TRUE, p_PSE_ID);

END ID_FOR_PSE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_PRODUCT
	(
	p_PRODUCT_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PRODUCT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED PSE NAME

v_PRODUCT_NAME PRODUCT.PRODUCT_NAME%TYPE;

BEGIN

	v_PRODUCT_NAME := LTRIM(RTRIM(p_PRODUCT_NAME));

	IF v_PRODUCT_NAME IS NULL THEN
		p_PRODUCT_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT PRODUCT_ID INTO p_PRODUCT_ID
		FROM PRODUCT
		WHERE PRODUCT_NAME = v_PRODUCT_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_PRODUCT
				    (
					p_PRODUCT_ID,
					v_PRODUCT_NAME,
					v_PRODUCT_NAME, -- ALIAS,
					v_PRODUCT_NAME, -- DESC,
					0,
					GA.UNDEFINED_ATTRIBUTE, -- EXTERNAL IDENTIFIER,
					GA.UNDEFINED_ATTRIBUTE, -- CATEGORY,
					SYSDATE,						--BEGIN DATE
					SYSDATE						--END DATE
					);
			ELSE
			    p_PRODUCT_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_PRODUCT;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_PSE
	(
	p_PSE_NAME IN VARCHAR
	) RETURN NUMBER IS

v_PSE_ID NUMBER;

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED PSE NAME

BEGIN

	ID_FOR_PSE(p_PSE_NAME, TRUE, v_PSE_ID);

	IF v_PSE_ID > 0 THEN
		RETURN v_PSE_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_PSE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_PSE_EXTERNAL_IDENTIFIER
	(
	p_PSE_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_PSE_ID OUT NUMBER,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED PSE EXTERNAL ID

v_PSE_EXTERNAL_IDENTIFIER PURCHASING_SELLING_ENTITY.PSE_EXTERNAL_IDENTIFIER%TYPE;

BEGIN

	v_PSE_EXTERNAL_IDENTIFIER := LTRIM(RTRIM(p_PSE_EXTERNAL_IDENTIFIER));

	IF v_PSE_EXTERNAL_IDENTIFIER IS NULL THEN
		p_PSE_ID := CONSTANTS.NOT_ASSIGNED;
		RETURN;
	END IF;

	SELECT PSE_ID INTO p_PSE_ID
	FROM PURCHASING_SELLING_ENTITY
	WHERE PSE_EXTERNAL_IDENTIFIER = v_PSE_EXTERNAL_IDENTIFIER;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		IF p_NO_DATA_AS_NOT_ASSIGNED THEN
			p_PSE_ID := CONSTANTS.NOT_ASSIGNED;
		ELSE
			p_PSE_ID := GA.NO_DATA_FOUND;
		END IF;

END ID_FOR_PSE_EXTERNAL_IDENTIFIER;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_PSE_EXTERNAL_IDENTIFIER
	(
	p_PSE_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER IS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED PSE EXTERNAL ID

v_PSE_ID PURCHASING_SELLING_ENTITY.PSE_ID%TYPE := CONSTANTS.NOT_ASSIGNED;

BEGIN

	ID_FOR_PSE_EXTERNAL_IDENTIFIER(p_PSE_EXTERNAL_IDENTIFIER, v_PSE_ID, p_NO_DATA_AS_NOT_ASSIGNED);

	RETURN v_PSE_ID;

END ID_FOR_PSE_EXTERNAL_IDENTIFIER;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_MRSP
	(
	p_MRSP_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_MRSP_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED MRSP NAME

v_MRSP_NAME METER_READING_SERVICE_PROVIDER.MRSP_NAME%TYPE;

BEGIN

	v_MRSP_NAME := LTRIM(RTRIM(p_MRSP_NAME));

	IF v_MRSP_NAME IS NULL THEN
		p_MRSP_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT MRSP_ID INTO p_MRSP_ID
		FROM METER_READING_SERVICE_PROVIDER
		WHERE MRSP_NAME = v_MRSP_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_MRSP
				    (
					p_MRSP_ID,
					v_MRSP_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0,
					GA.UNDEFINED_ATTRIBUTE, -- DUNS
					'Active'
					);
			ELSE
			    p_MRSP_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_MRSP;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_MRSP
	(
	p_MRSP_NAME IN VARCHAR,
	p_MRSP_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED MRSP NAME

BEGIN

	ID_FOR_MRSP(p_MRSP_NAME, TRUE, p_MRSP_ID);

END ID_FOR_MRSP;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SC
	(
	p_SC_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SC_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SCNAME

v_SC_NAME SCHEDULE_COORDINATOR.SC_NAME%TYPE;

BEGIN

	v_SC_NAME := LTRIM(RTRIM(p_SC_NAME));

	IF v_SC_NAME IS NULL THEN
		p_SC_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT SC_ID INTO p_SC_ID
		FROM SCHEDULE_COORDINATOR
		WHERE SC_NAME = v_SC_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_SC
				    (p_SC_ID,
					v_SC_NAME,
					v_SC_NAME, -- ALIAS
					v_SC_NAME, -- DESC
					0,
					GA.UNDEFINED_ATTRIBUTE, -- NERC CODE
					GA.UNDEFINED_ATTRIBUTE, -- DUNS
					'Active', 	 -- STATUS
					v_SC_NAME, -- SC_EXTERNAL_IDENTIFIER
					'', -- SCHEDULE_NAME_PREFIX
					'Schedule Group', -- SCHEDULE_FORMAT
					'Day', -- SCHEDULE_INTERVAL
					'None', -- SC_LOAD_ROUNDING_PREFERENCE
					'None', -- SC_LOSS_ROUNDING_PREFERENCE
					0, -- SC_CREATE_TX_LOSS_SCHEDULE
					0, -- SC_CREATE_DX_LOSS_SCHEDULE
					0, -- SC_CREATE_UFE_SCHEDULE
					0, -- SC_MARKET_PRICE_ID
					0); -- p_SC_MINIMUM_SCHEDULE_AMT
			ELSE
			    p_SC_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_SC;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SC
	(
	p_SC_NAME IN VARCHAR,
	p_SC_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SC NAME

BEGIN

	ID_FOR_SC(p_SC_NAME, TRUE, p_SC_ID);

END ID_FOR_SC;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_SC
	(
	p_SC_NAME IN VARCHAR
	) RETURN NUMBER IS

v_SC_ID NUMBER;

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SC NAME

BEGIN

	ID_FOR_SC(p_SC_NAME, TRUE, v_SC_ID);

	IF v_SC_ID > 0 THEN
		RETURN v_SC_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_SC;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SERVICE_LOCATION_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SERVICE LOCATION NAME

v_SERVICE_LOCATION_NAME SERVICE_LOCATION.SERVICE_LOCATION_NAME%TYPE;

BEGIN

	v_SERVICE_LOCATION_NAME := LTRIM(RTRIM(p_SERVICE_LOCATION_NAME));

	IF v_SERVICE_LOCATION_NAME IS NULL THEN
		p_SERVICE_LOCATION_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT SERVICE_LOCATION_ID INTO p_SERVICE_LOCATION_ID
		FROM SERVICE_LOCATION
		WHERE SERVICE_LOCATION_NAME = v_SERVICE_LOCATION_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				IO.PUT_SERVICE_LOCATION (
					p_SERVICE_LOCATION_ID,
					v_SERVICE_LOCATION_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0,
					GA.UNDEFINED_ATTRIBUTE, -- LATITUDE
					GA.UNDEFINED_ATTRIBUTE, -- LONGITUDE
					GA.UNDEFINED_ATTRIBUTE, -- TIME ZONE
					GA.UNDEFINED_ATTRIBUTE, -- EXTERNAL IDENTIFIER
					0, -- IS EXTERNAL BILLED USAGE
					0, -- IS METER_ALLOCATION
					0, -- SERVICE POINT ID
					0, -- WEATHER STATION ID
					0, -- BUSINESS ROLLUP
					0, -- GEOGRAPHIC ROLLUP
					0, -- SQUARE FOOTAGE
					0, -- ANNUAL CONSUMPTION
					0, -- SUMMER CONSUMPTION
					0, -- SERVICE ZONE ID
					0, -- SUB STATION ID
					0, -- FEEDER ID
					0);-- FEEDER SEGMENT ID
			ELSE
			    p_SERVICE_LOCATION_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_SERVICE_LOCATION;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_SERVICE_LOCATION_ID OUT NUMBER
	) AS

BEGIN

    ID_FOR_SERVICE_LOCATION(p_SERVICE_LOCATION_NAME, TRUE, p_SERVICE_LOCATION_ID);

END;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR
	) RETURN NUMBER IS

v_SERVICE_LOCATION_ID NUMBER;

BEGIN

    ID_FOR_SERVICE_LOCATION(p_SERVICE_LOCATION_NAME, TRUE, v_SERVICE_LOCATION_ID);

	IF v_SERVICE_LOCATION_ID > 0 THEN
		RETURN v_SERVICE_LOCATION_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SERVICE_LOCATION_XID
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_SERVICE_LOCATION_ALIAS IN VARCHAR,
	p_SERVICE_LOCATION_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SERVICE LOCATION NAME AND ALIAS.

v_SERVICE_LOCATION_NAME SERVICE_LOCATION.SERVICE_LOCATION_NAME%TYPE;
v_SERVICE_LOCATION_ALIAS SERVICE_LOCATION.SERVICE_LOCATION_ALIAS%TYPE;

BEGIN

	v_SERVICE_LOCATION_NAME := LTRIM(RTRIM(p_SERVICE_LOCATION_NAME));
	v_SERVICE_LOCATION_ALIAS := LTRIM(RTRIM(p_SERVICE_LOCATION_ALIAS));

	IF v_SERVICE_LOCATION_NAME IS NULL THEN
		p_SERVICE_LOCATION_ID := 0;
	ELSE
		BEGIN
		    SELECT SERVICE_LOCATION_ID INTO p_SERVICE_LOCATION_ID
			FROM SERVICE_LOCATION
			WHERE p_SERVICE_LOCATION_NAME = v_SERVICE_LOCATION_NAME
			    AND SERVICE_LOCATION_ALIAS = v_SERVICE_LOCATION_ALIAS;
		EXCEPTION
			WHEN TOO_MANY_ROWS THEN
				ERRS.RAISE(MSGCODES.c_ERR_TOO_MANY_ENTRIES , 'Service Location with Name = "' || v_SERVICE_LOCATION_NAME || '" and Alias = "' || v_SERVICE_LOCATION_ALIAS || '"');
			WHEN NO_DATA_FOUND THEN
				ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			    IO.PUT_SERVICE_LOCATION
				    (
					p_SERVICE_LOCATION_ID,
					v_SERVICE_LOCATION_NAME,
					v_SERVICE_LOCATION_ALIAS,
					GA.UNDEFINED_ATTRIBUTE, -- DESC.
					0,
					GA.UNDEFINED_ATTRIBUTE, -- LATITUDE.
					GA.UNDEFINED_ATTRIBUTE, -- LONGITUDE.
					GA.UNDEFINED_ATTRIBUTE, -- TIME ZONE.
					GA.UNDEFINED_ATTRIBUTE, -- EXTERNAL IDENTIFIER
					0, -- IS EXTERNAL BILLED USAGE
					0, -- IS METER_ALLOCATION
					0, -- SERVICE POINT ID.
					0, -- WEATHER STATION ID.
					0, -- BUSINESS ROLLUP.
					0,  -- GEOGRAPHIC ROLLUP.
					0, -- SQUARE FOOTAGE
					0, -- ANNUAL CONSUMPTION
					0, -- SUMMER CONSUMPTION
					0, -- SERVICE ZONE ID
					0, -- SUB STATION ID
					0, -- FEEDER ID
					0);-- FEEDER SEGMENT ID
		END;
	END IF;

END ID_FOR_SERVICE_LOCATION_XID;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_METER_EXTERNAL_IDENT
	(
	p_MRSP_ID IN NUMBER,
	p_METER_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_METER_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED METER EXTERNAL IDENTIFIER

v_METER_EXTERNAL_IDENTIFIER METER.METER_EXTERNAL_IDENTIFIER%TYPE;
v_MRSP_ID NUMBER;

BEGIN

	v_METER_EXTERNAL_IDENTIFIER := LTRIM(RTRIM(p_METER_EXTERNAL_IDENTIFIER));

	IF v_METER_EXTERNAL_IDENTIFIER IS NULL THEN
		p_METER_ID := 0;
	ELSE
		BEGIN
			IF p_MRSP_ID IS NULL THEN
			    v_MRSP_ID := 0;
			    SELECT METER_ID INTO p_METER_ID
				FROM METER
				WHERE METER_EXTERNAL_IDENTIFIER = v_METER_EXTERNAL_IDENTIFIER;
			ELSE
			    v_MRSP_ID := p_MRSP_ID;
			    SELECT METER_ID INTO p_METER_ID
				FROM METER
				WHERE MRSP_ID = p_MRSP_ID
					 AND METER_EXTERNAL_IDENTIFIER = v_METER_EXTERNAL_IDENTIFIER;
			END IF;
		EXCEPTION
			WHEN TOO_MANY_ROWS THEN
				ERRS.RAISE(MSGCODES.c_ERR_TOO_MANY_ENTRIES , 'Meter with External Identifier = "' || v_METER_EXTERNAL_IDENTIFIER || '"');
			WHEN NO_DATA_FOUND THEN
				ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			    ID.ID_FOR_METER(v_MRSP_ID, v_METER_EXTERNAL_IDENTIFIER, p_CREATE_IF_NOT_FOUND, p_METER_ID);
		END;
	END IF;

END ID_FOR_METER_EXTERNAL_IDENT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_METER_EXTERNAL_IDENT
	(
	p_MRSP_ID IN NUMBER,
	p_METER_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_METER_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED METER EXTERNAL IDENTIFIER

BEGIN

    ID_FOR_METER_EXTERNAL_IDENT(p_MRSP_ID, p_METER_EXTERNAL_IDENTIFIER, TRUE, p_METER_ID);

END ID_FOR_METER_EXTERNAL_IDENT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_METER
	(
	p_MRSP_ID IN NUMBER,
	p_METER_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_METER_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED METER NAME

v_METER_NAME METER.METER_NAME%TYPE;

BEGIN

	v_METER_NAME := LTRIM(RTRIM(p_METER_NAME));

	IF v_METER_NAME IS NULL THEN
		p_METER_ID := 0;
		RETURN;
	END IF;

	IF p_MRSP_ID IS NULL THEN
	   SELECT METER_ID INTO p_METER_ID FROM METER WHERE METER_NAME = v_METER_NAME;
	ELSE
		SELECT METER_ID INTO p_METER_ID FROM METER WHERE MRSP_ID = p_MRSP_ID AND METER_NAME = v_METER_NAME;
	END IF;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				IO.PUT_METER
				    (
					p_METER_ID,	   	        -- METER ID
					p_MRSP_ID, 	   	   	    -- MRSP ID
					v_METER_NAME,	   -- NAME
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0,						-- METER ID
					v_METER_NAME,	-- METER EXTERNAL IDENTIFIER
					'Active',			 -- METER STATUS
					'Hour',				  -- METER INTERVAL
					'Interval',			  -- METER TYPE
					'KWH',				 -- METER UNIT
					0,						-- IS EXTERNAL INTERVAL USAGE
					0,						-- IS EXTERNAL BILLED USAGE
					0,   					-- IS EXTERNAL FORECAST
					0						-- USE TOU USAGE FACTORS
                    );
			ELSE
			   	 p_METER_ID := GA.NO_DATA_FOUND;
			END IF;

END ID_FOR_METER;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_METER
	(
	p_MRSP_ID IN NUMBER,
	p_METER_NAME IN VARCHAR,
	p_METER_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED METER NAME

BEGIN

    ID_FOR_METER(p_MRSP_ID, p_METER_NAME, TRUE, p_METER_ID);

END ID_FOR_METER;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_WEATHER_STATION
	(
	p_STATION_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_STATION_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED WEATHER STATION NAME

v_STATION_NAME WEATHER_STATION.STATION_NAME%TYPE;

BEGIN

	v_STATION_NAME := LTRIM(RTRIM(p_STATION_NAME));

	IF v_STATION_NAME IS NULL THEN
		p_STATION_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT STATION_ID INTO p_STATION_ID
		FROM WEATHER_STATION
		WHERE STATION_NAME = v_STATION_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_WEATHER_STATION
				    (
					p_STATION_ID,
					v_STATION_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0,
					GA.UNDEFINED_ATTRIBUTE, -- TIME ZONE
					0
					);
			ELSE
			    p_STATION_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_WEATHER_STATION;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_WEATHER_STATION
	(
	p_STATION_NAME IN VARCHAR,
	p_STATION_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED WEATHER STATION NAME


BEGIN

    ID_FOR_WEATHER_STATION(p_STATION_NAME, TRUE, p_STATION_ID);

END ID_FOR_WEATHER_STATION;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_WEATHER_PARAMETER
	(
	p_PARAMETER_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PARAMETER_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED WEATHER PARAMETER NAME

v_PARAMETER_NAME WEATHER_PARAMETER.PARAMETER_NAME%TYPE;
v_PARAMETER_ALIAS WEATHER_PARAMETER.PARAMETER_ALIAS%TYPE;

BEGIN

	v_PARAMETER_NAME := LTRIM(RTRIM(p_PARAMETER_NAME));

	IF v_PARAMETER_NAME IS NULL THEN
		p_PARAMETER_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT PARAMETER_ID INTO p_PARAMETER_ID
		FROM WEATHER_PARAMETER
		WHERE PARAMETER_NAME = v_PARAMETER_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    SELECT DECODE(UPPER(v_PARAMETER_NAME),'TEMPERATURE','T',
				    'RELATIVE HUMIDITY','RH','WIND SPEED','V',GA.UNDEFINED_ATTRIBUTE)
			    INTO v_PARAMETER_ALIAS
				FROM DUAL;
				IO.PUT_WEATHER_PARAMETER
				    (
					p_PARAMETER_ID,
					v_PARAMETER_NAME,
					v_PARAMETER_ALIAS,
					GA.UNDEFINED_ATTRIBUTE, -- DESC,
					0,
					INITCAP(UPPER(v_PARAMETER_NAME)),--CATEGORY
					GA.UNDEFINED_ATTRIBUTE, --INTERVAL
					GA.UNDEFINED_ATTRIBUTE, --MEASUREMENT
					GA.UNDEFINED_ATTRIBUTE, --PROJECTION PERIOD
					0, -- IS_COMPOSITE
					0);-- IS_CALCULATE
			ELSE
			    p_PARAMETER_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_WEATHER_PARAMETER;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_WEATHER_PARAMETER
	(
	p_PARAMETER_NAME IN VARCHAR,
	p_PARAMETER_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED WEATHER PARAMETER NAME

BEGIN

    ID_FOR_WEATHER_PARAMETER(p_PARAMETER_NAME, TRUE, p_PARAMETER_ID);

END ID_FOR_WEATHER_PARAMETER;
----------------------------------------------------------------------------------------------------
PROCEDURE CREATE_SERVICE_POINT
	(
	p_SERVICE_POINT_NAME IN VARCHAR2,
	p_EXTERNAL_IDENTIFIER IN VARCHAR2,
	p_SERVICE_POINT_ID OUT NUMBER
	) AS
BEGIN
    IO.PUT_SERVICE_POINT
	    (
		p_SERVICE_POINT_ID,
		p_SERVICE_POINT_NAME, -- NAME
		p_SERVICE_POINT_NAME, -- ALIAS
		p_SERVICE_POINT_NAME, -- DESC
		0, -- SERVICE POINT ID
		'Retail', -- SERVICE POINT TYPE
		0, -- TP ID
		0, -- CA ID
		0, -- EDC ID
		0, -- ROLLUP ID
		0, -- SERVICE_REGION ID
		0, -- SERVICE AREA ID
		0, -- SERVICE ZONE ID
		GA.UNDEFINED_ATTRIBUTE, -- TIME ZONE
		GA.UNDEFINED_ATTRIBUTE, -- LATITUDE
		GA.UNDEFINED_ATTRIBUTE,  -- LONGITUDE
		p_EXTERNAL_IDENTIFIER,  -- EXTERNAL_IDENTIFIER
		0, -- IS INTERCONNECT
        NULL, -- NODE TYPE
        NULL, -- SERVICE_POINT_NERC_CODE
		0, -- PIPELINE_ID
		0 -- MILE_MARKER
		);
END CREATE_SERVICE_POINT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SERVICE_POINT
	(
	p_SERVICE_POINT_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SERVICE_POINT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SERVICE POINT NAME

v_SERVICE_POINT_NAME SERVICE_POINT.SERVICE_POINT_NAME%TYPE;

BEGIN

	v_SERVICE_POINT_NAME := LTRIM(RTRIM(p_SERVICE_POINT_NAME));

	IF v_SERVICE_POINT_NAME IS NULL THEN
		p_SERVICE_POINT_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT SERVICE_POINT_ID INTO p_SERVICE_POINT_ID
		FROM SERVICE_POINT
		WHERE SERVICE_POINT_NAME = v_SERVICE_POINT_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				CREATE_SERVICE_POINT(v_SERVICE_POINT_NAME, GA.UNDEFINED_ATTRIBUTE, p_SERVICE_POINT_ID);
			ELSE
			    p_SERVICE_POINT_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_SERVICE_POINT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SERVICE_POINT
	(
	p_SERVICE_POINT_NAME IN VARCHAR,
	p_SERVICE_POINT_ID OUT NUMBER
	) AS

BEGIN

	ID_FOR_SERVICE_POINT(p_SERVICE_POINT_NAME, TRUE, p_SERVICE_POINT_ID);

END ID_FOR_SERVICE_POINT;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_SERVICE_POINT
	(
	p_SERVICE_POINT_NAME IN VARCHAR
	) RETURN NUMBER IS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SERVICE_POINT NAME

v_SERVICE_POINT_ID NUMBER(9);

BEGIN

    ID_FOR_SERVICE_POINT(p_SERVICE_POINT_NAME, TRUE, v_SERVICE_POINT_ID);

	IF v_SERVICE_POINT_ID > 0 THEN
		RETURN v_SERVICE_POINT_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_SERVICE_POINT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SERVICE_POINT_XID
	(
	p_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SERVICE_POINT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SERVICE POINT EXTERNAL ID

v_EXTERNAL_IDENTIFIER SERVICE_POINT.EXTERNAL_IDENTIFIER%TYPE;
BEGIN

	v_EXTERNAL_IDENTIFIER := LTRIM(RTRIM(p_EXTERNAL_IDENTIFIER));

	IF v_EXTERNAL_IDENTIFIER IS NULL THEN
		p_SERVICE_POINT_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT SERVICE_POINT_ID INTO p_SERVICE_POINT_ID
		FROM SERVICE_POINT
		WHERE EXTERNAL_IDENTIFIER = v_EXTERNAL_IDENTIFIER;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			BEGIN
				SELECT SERVICE_POINT_ID INTO p_SERVICE_POINT_ID
				FROM SERVICE_POINT
				WHERE SERVICE_POINT_NAME = v_EXTERNAL_IDENTIFIER;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
						CREATE_SERVICE_POINT(v_EXTERNAL_IDENTIFIER, v_EXTERNAL_IDENTIFIER, p_SERVICE_POINT_ID);
					ELSE
						p_SERVICE_POINT_ID := GA.NO_DATA_FOUND;
					END IF;
			END;
	END;

END ID_FOR_SERVICE_POINT_XID;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SERVICE_POINT_XID
	(
	p_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_SERVICE_POINT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SERVICE POINT EXTERNAL ID
BEGIN

	ID_FOR_SERVICE_POINT_XID(p_EXTERNAL_IDENTIFIER, FALSE, p_SERVICE_POINT_ID);

END ID_FOR_SERVICE_POINT_XID;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_LOAD_PROFILE
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PROFILE_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED LOAD PROFILE NAME.
-- CREATE A NEW LOAD PROFILE IF ONE IS NOT FOUND.

v_PROFILE_NAME LOAD_PROFILE.PROFILE_NAME%TYPE;
v_PROFILE_LIBRARY_ID NUMBER;

BEGIN

	v_PROFILE_NAME := LTRIM(RTRIM(p_PROFILE_NAME));

	IF v_PROFILE_NAME IS NULL THEN
		p_PROFILE_ID := 0;
		RETURN;
	END IF;

	ID.ID_FOR_LOAD_PROFILE_LIBRARY(p_PROFILE_LIBRARY_NAME, p_CREATE_IF_NOT_FOUND, v_PROFILE_LIBRARY_ID);

	BEGIN
		SELECT PROFILE_ID INTO p_PROFILE_ID
		FROM LOAD_PROFILE
		WHERE PROFILE_LIBRARY_ID = v_PROFILE_LIBRARY_ID
			AND UPPER(PROFILE_NAME) = UPPER(v_PROFILE_NAME);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_LOAD_PROFILE
				    (
					p_PROFILE_ID,
					v_PROFILE_LIBRARY_ID,
					v_PROFILE_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0,
					GA.UNDEFINED_ATTRIBUTE, -- TYPE
					GA.UNDEFINED_ATTRIBUTE, -- OPERATION
					GA.UNDEFINED_ATTRIBUTE, -- ORIGIN
					GA.UNDEFINED_ATTRIBUTE, -- RATE CLASS
					GA.UNDEFINED_ATTRIBUTE, -- DAY TYPE
					GA.UNDEFINED_ATTRIBUTE, -- ACCOUNT REF
					GA.UNDEFINED_ATTRIBUTE, -- METER REF
					GA.UNDEFINED_ATTRIBUTE, -- SIC CODE
					'None', 				-- SEASON
					GA.UNDEFINED_ATTRIBUTE, -- SYSTEM LOAD
					GA.UNDEFINED_ATTRIBUTE,	-- PROFILE ADJUSTMENT OPTION
					0,					-- STATION ID
					0,					-- TEMPLATE ID
					NULL,			-- SOURCE BEGIN DATE
					NULL,			-- SOURCE END DATE
					0,					-- SOURCE ID
					0,					-- INTERVAL
					LOW_DATE, -- SOURCE_VERSION
					'Day',			-- BREAKPOINT INTERVAL
                    0			-- IS_EXTERNAL_PROFILE
                    );
			ELSE
			    p_PROFILE_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_LOAD_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_LOAD_PROFILE
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_PROFILE_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED LOAD PROFILE NAME

BEGIN

    ID_FOR_LOAD_PROFILE(p_PROFILE_LIBRARY_NAME, p_PROFILE_NAME, TRUE, p_PROFILE_ID);

END ID_FOR_LOAD_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_LOAD_PROFILE_LIBRARY
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_PROFILE_LIBRARY_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED LOAD PROFILE LIBRARY NAME
-- CREATE A NEW LOAD PROFILE LIBRARY IF ONE IS NOT FOUND.

v_PROFILE_LIBRARY_NAME LOAD_PROFILE_LIBRARY.PROFILE_LIBRARY_NAME%TYPE;

BEGIN

	v_PROFILE_LIBRARY_NAME := LTRIM(RTRIM(p_PROFILE_LIBRARY_NAME));

	IF v_PROFILE_LIBRARY_NAME IS NULL THEN
		p_PROFILE_LIBRARY_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT PROFILE_LIBRARY_ID
		INTO p_PROFILE_LIBRARY_ID
		FROM LOAD_PROFILE_LIBRARY
		WHERE UPPER(PROFILE_LIBRARY_NAME) = UPPER(v_PROFILE_LIBRARY_NAME);

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_LOAD_PROFILE_LIBRARY
				    (
					p_PROFILE_LIBRARY_ID,
					v_PROFILE_LIBRARY_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0
					);
			ELSE
			    p_PROFILE_LIBRARY_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_LOAD_PROFILE_LIBRARY;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_LOAD_PROFILE_LIBRARY
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_LIBRARY_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED LOAD PROFILE LIBRARY NAME

BEGIN

    ID_FOR_LOAD_PROFILE_LIBRARY(p_PROFILE_LIBRARY_NAME, TRUE, p_PROFILE_LIBRARY_ID);

END ID_FOR_LOAD_PROFILE_LIBRARY;
---------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CALENDAR
	(
	p_CALENDAR_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CALENDAR_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED CALENDAR NAME

v_CALENDAR_NAME CALENDAR.CALENDAR_NAME%TYPE;

BEGIN

	v_CALENDAR_NAME := LTRIM(RTRIM(p_CALENDAR_NAME));

	IF v_CALENDAR_NAME IS NULL THEN
		p_CALENDAR_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT CALENDAR_ID
		INTO p_CALENDAR_ID
		FROM CALENDAR
		WHERE CALENDAR_NAME = v_CALENDAR_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    SELECT OID.NEXTVAL INTO p_CALENDAR_ID FROM DUAL;
				INSERT INTO CALENDAR
				    (
					CALENDAR_NAME,
					CALENDAR_ALIAS,
					CALENDAR_DESC,
					CALENDAR_ID,
					ENTRY_DATE
					)
				VALUES
					(
					v_CALENDAR_NAME,
					v_CALENDAR_NAME, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					p_CALENDAR_ID,
					SYSDATE
					);
			ELSE
			    p_CALENDAR_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_CALENDAR;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CALENDAR
	(
	p_CALENDAR_NAME IN VARCHAR,
	p_CALENDAR_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED CALENDAR NAME


BEGIN

    ID_FOR_CALENDAR(p_CALENDAR_NAME, TRUE, p_CALENDAR_ID);

END ID_FOR_CALENDAR;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_CALENDAR
	(
	p_CALENDAR_NAME IN VARCHAR
	) RETURN NUMBER IS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED CALENDAR NAME

v_CALENDAR_ID NUMBER(9);

BEGIN

    ID_FOR_CALENDAR(p_CALENDAR_NAME, TRUE, v_CALENDAR_ID);

	IF v_CALENDAR_ID > 0 THEN
		RETURN v_CALENDAR_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_CALENDAR;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_LOSS_FACTOR
	(
	p_LOSS_FACTOR_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_LOSS_FACTOR_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED LOSS FACTOR NAME

v_LOSS_FACTOR_NAME LOSS_FACTOR.LOSS_FACTOR_NAME%TYPE;

BEGIN

	v_LOSS_FACTOR_NAME := LTRIM(RTRIM(p_LOSS_FACTOR_NAME));

	IF v_LOSS_FACTOR_NAME IS NULL THEN
		p_LOSS_FACTOR_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT LOSS_FACTOR_ID
		INTO p_LOSS_FACTOR_ID
		FROM LOSS_FACTOR
		WHERE LTRIM(RTRIM(LOSS_FACTOR_NAME)) = v_LOSS_FACTOR_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				SELECT OID.NEXTVAL INTO p_LOSS_FACTOR_ID FROM DUAL;
				INSERT INTO LOSS_FACTOR
					(
					LOSS_FACTOR_NAME,
					LOSS_FACTOR_ALIAS,
					LOSS_FACTOR_DESC,
					LOSS_FACTOR_ID,
					ENTRY_DATE
					)
				VALUES
					(
					v_LOSS_FACTOR_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					p_LOSS_FACTOR_ID,
					SYSDATE
					);
			ELSE
			    p_LOSS_FACTOR_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_LOSS_FACTOR
	(
	p_LOSS_FACTOR_NAME IN VARCHAR,
	p_LOSS_FACTOR_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED LOSS FACTOR NAME

BEGIN

	ID_FOR_LOSS_FACTOR(p_LOSS_FACTOR_NAME, TRUE, p_LOSS_FACTOR_ID);

END ID_FOR_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_TRANSACTION
	(
	p_TRANSACTION_NAME IN VARCHAR,
	p_TRANSACTION_TYPE IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_TRANSACTION_ID OUT NUMBER,
	p_MODEL_ID IN NUMBER DEFAULT GA.DEFAULT_MODEL
	) AS

v_TRANSACTION_NAME INTERCHANGE_TRANSACTION.TRANSACTION_NAME%TYPE;

BEGIN

	v_TRANSACTION_NAME := SUBSTR(p_TRANSACTION_NAME,1,64);

	IF v_TRANSACTION_NAME IS NULL THEN
		p_TRANSACTION_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT TRANSACTION_ID INTO p_TRANSACTION_ID
		FROM INTERCHANGE_TRANSACTION
		WHERE TRANSACTION_NAME = v_TRANSACTION_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_TRANSACTION
				    (
					p_TRANSACTION_ID,
					v_TRANSACTION_NAME,
					SUBSTR(v_TRANSACTION_NAME,1,64),
					'RetailOffice generated schedule. Check settings.',
					0,
					INITCAP(LTRIM(RTRIM(p_TRANSACTION_TYPE))),
					NULL,	-- TRANSACTION CODE
					NULL,	--TRANSACTION_IDENTIFIER
					1,			  --IS_FIRM
					0,			  --IS_IMPORT_SCHEDULE
					0,			  --IS_EXPORT_SCHEDULE
					0,			  --IS_BALANCE_TRANSACTION
					0,			  --IS_BID_OFFER
					0,			  --IS_EXCLUDE_FROM_POSITION
                    0,			  --IS_IMPORT_EXPORT
					0,			  --IS_DISPATCHABLE
					CASE WHEN p_MODEL_ID=2 THEN 'Day' ELSE 'Hour' END,	  --TRANSACTION_INTERVAL
					CASE WHEN p_MODEL_ID=2 THEN 'Day' ELSE 'Hour' END,	  --EXTERNAL_INTERVAL
					GA.UNDEFINED_ATTRIBUTE, -- eTag code
					TRUNC(SYSDATE,'MONTH'),	--BEGIN_DATE
					ADD_MONTHS(TRUNC(SYSDATE,'MONTH') - 1,12), --END_DATE
					0,				--PURCHASER_ID
					0,				--SELLER_ID
					0,				--CONTRACT_ID
					0,				--SC_ID
					0,				--POR_ID
					0,				--POD_ID
					0,				--COMMODITY_ID
					0,				--SERVICE_TYPE_ID
					0,				--TX_TRANSACTION_ID
					0,				--PATH_ID
					0,				--LOAD_TRANSACTION_ID
					0,				--EDC_ID
					0,				--PSE_ID
					0,				--ESP_ID
					0,				--POOL_ID
					0,				--SCHEDULE_GROUP_ID
					0,				--MARKET_PRICE_ID
					0,				--ZOR_ID
					0,				--ZOD_ID
					0,				--SOURCE_ID
					0,				--SINK_ID
					0,				--RESOURCE_ID
                    NULL,			--AGREEMENT_TYPE
                    NULL,			--APPROVAL_TYPE
                    NULL,			--LOSS_OPTION
					NULL,			--TRAIT_CATEGORY
					0				--TP_ID
					);
			ELSE
			    p_TRANSACTION_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_TRANSACTION;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_TRANSACTION
	(
	p_TRANSACTION_NAME IN VARCHAR,
	p_TRANSACTION_TYPE IN VARCHAR,
	p_TRANSACTION_ID OUT NUMBER
	) AS

BEGIN

    ID_FOR_TRANSACTION(p_TRANSACTION_NAME, p_TRANSACTION_TYPE, FALSE, p_TRANSACTION_ID);

END ID_FOR_TRANSACTION;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ENTITY_DOMAIN_ALIAS
	(
	p_ENTITY_DOMAIN_ALIAS IN VARCHAR,
	p_ENTITY_DOMAIN_ID OUT NUMBER
	) AS

BEGIN

	SELECT ENTITY_DOMAIN_ID
	INTO p_ENTITY_DOMAIN_ID
	FROM ENTITY_DOMAIN
	WHERE UPPER(LTRIM(RTRIM(ENTITY_DOMAIN_TABLE_ALIAS))) = UPPER(LTRIM(RTRIM(p_ENTITY_DOMAIN_ALIAS)))
		AND NVL(IS_PSEUDO, 0) = 0;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY , 'Entity Domain with Alias = "' || p_ENTITY_DOMAIN_ALIAS || '"');

END ID_FOR_ENTITY_DOMAIN_ALIAS;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ATTRIBUTE_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED ENTITY ATTRIBUTE NAME

v_ATTRIBUTE_NAME ENTITY_ATTRIBUTE.ATTRIBUTE_NAME%TYPE;

BEGIN

	v_ATTRIBUTE_NAME := LTRIM(RTRIM(p_ATTRIBUTE_NAME));

	IF v_ATTRIBUTE_NAME IS NULL THEN
		p_ATTRIBUTE_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT ATTRIBUTE_ID
		INTO p_ATTRIBUTE_ID
		FROM ENTITY_ATTRIBUTE
		WHERE ENTITY_DOMAIN_ID = p_ENTITY_DOMAIN_ID
			AND ATTRIBUTE_NAME = v_ATTRIBUTE_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    SELECT OID.NEXTVAL INTO p_ATTRIBUTE_ID FROM DUAL;
				INSERT INTO ENTITY_ATTRIBUTE(
					ENTITY_DOMAIN_ID,
					ATTRIBUTE_NAME,
					ATTRIBUTE_ID,
					ATTRIBUTE_TYPE,
					ENTRY_DATE)
				VALUES(
					p_ENTITY_DOMAIN_ID,
					v_ATTRIBUTE_NAME,
					p_ATTRIBUTE_ID,
					INITCAP(LOWER(LTRIM(RTRIM(p_ATTRIBUTE_TYPE)))),
					SYSDATE);
			ELSE
			    p_ATTRIBUTE_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_ENTITY_ATTRIBUTE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ALIAS IN VARCHAR,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_ATTRIBUTE_ID OUT NUMBER
	) AS

-- Answer the internal id associated with the specified entity attribute name.

v_ENTITY_DOMAIN_ID NUMBER;
BEGIN

	ID_FOR_ENTITY_DOMAIN_ALIAS(p_ENTITY_DOMAIN_ALIAS, v_ENTITY_DOMAIN_ID);

    ID_FOR_ENTITY_ATTRIBUTE(p_ATTRIBUTE_NAME, v_ENTITY_DOMAIN_ID, p_ATTRIBUTE_TYPE, p_CREATE_IF_NOT_FOUND, p_ATTRIBUTE_ID);

END ID_FOR_ENTITY_ATTRIBUTE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ALIAS IN VARCHAR,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_ATTRIBUTE_ID OUT NUMBER
	) AS

-- Answer the internal id associated with the specified entity attribute name.

BEGIN

    ID_FOR_ENTITY_ATTRIBUTE(p_ATTRIBUTE_NAME, p_ENTITY_DOMAIN_ALIAS, p_ATTRIBUTE_TYPE, TRUE, p_ATTRIBUTE_ID);

END ID_FOR_ENTITY_ATTRIBUTE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_ENTITY_ATTRIBUTE
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_ATTRIBUTE_ID OUT NUMBER
	) AS

-- Answer the internal id associated with the specified entity attribute name.

BEGIN

    ID_FOR_ENTITY_ATTRIBUTE(p_ATTRIBUTE_NAME, p_ENTITY_DOMAIN_ID, p_ATTRIBUTE_TYPE, TRUE, p_ATTRIBUTE_ID);

END ID_FOR_ENTITY_ATTRIBUTE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_HOLIDAY
	(
	p_HOLIDAY_NAME IN VARCHAR,
	p_HOLIDAY_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED HOLIDAY NAME

v_HOLIDAY_NAME HOLIDAY.HOLIDAY_NAME%TYPE;

BEGIN

	v_HOLIDAY_NAME := LTRIM(RTRIM(p_HOLIDAY_NAME));

	IF v_HOLIDAY_NAME IS NULL THEN
		p_HOLIDAY_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT HOLIDAY_ID
		INTO p_HOLIDAY_ID
		FROM HOLIDAY
		WHERE HOLIDAY_NAME = v_HOLIDAY_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			SELECT OID.NEXTVAL INTO p_HOLIDAY_ID FROM DUAL;
			INSERT INTO HOLIDAY
				(
				HOLIDAY_NAME,
				HOLIDAY_ALIAS,
				HOLIDAY_DESC,
				HOLIDAY_ID,
				ENTRY_DATE
				)
			VALUES
				(
				v_HOLIDAY_NAME,
				GA.UNDEFINED_ATTRIBUTE, -- ALIAS
				GA.UNDEFINED_ATTRIBUTE, -- DESC
				p_HOLIDAY_ID,
				SYSDATE
				);
	END;

END ID_FOR_HOLIDAY;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_AREA
	(
	p_AREA_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_AREA_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED AREA NAME
-- CREATE A NEW AREA IF ONE IS NOT FOUND.

v_AREA_NAME AREA.AREA_NAME%TYPE;

BEGIN

	v_AREA_NAME := LTRIM(RTRIM(p_AREA_NAME));

	IF v_AREA_NAME IS NULL THEN
		p_AREA_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT AREA_ID
		INTO p_AREA_ID
		FROM AREA
		WHERE AREA_NAME = v_AREA_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_AREA
				    (
					p_AREA_ID,
					v_AREA_NAME,
					v_AREA_NAME, -- ALIAS
					v_AREA_NAME, -- DESC
					0,
					GA.UNDEFINED_ATTRIBUTE, --INTERVAL
					GA.UNDEFINED_ATTRIBUTE --PROJECTION PERIOD
					);
			ELSE
			    p_AREA_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_AREA;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_SYSTEM_LOAD
	(
	p_SYSTEM_LOAD_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_SYSTEM_LOAD_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SYSTEM LOAD NAME
-- CREATE A NEW AREA IF ONE IS NOT FOUND.

v_SYSTEM_LOAD_NAME SYSTEM_LOAD.SYSTEM_LOAD_NAME%TYPE;

BEGIN

	v_SYSTEM_LOAD_NAME := LTRIM(RTRIM(p_SYSTEM_LOAD_NAME));

	IF v_SYSTEM_LOAD_NAME IS NULL THEN
		p_SYSTEM_LOAD_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT SYSTEM_LOAD_ID
		INTO p_SYSTEM_LOAD_ID
		FROM SYSTEM_LOAD
		WHERE SYSTEM_LOAD_NAME = v_SYSTEM_LOAD_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_SYSTEM_LOAD
				    (
					p_SYSTEM_LOAD_ID,
					v_SYSTEM_LOAD_NAME,
					v_SYSTEM_LOAD_NAME, -- ALIAS
					v_SYSTEM_LOAD_NAME, -- DESC
					0,
					GA.UNDEFINED_ATTRIBUTE --INTERVAL
					);
			ELSE
			    p_SYSTEM_LOAD_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_SYSTEM_LOAD;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_MARKET_PRICE
	(
	p_MARKET_PRICE_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_MARKET_PRICE_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED MARKET PRICE NAME

v_MARKET_PRICE_NAME MARKET_PRICE.MARKET_PRICE_NAME%TYPE;

BEGIN

	v_MARKET_PRICE_NAME := LTRIM(RTRIM(p_MARKET_PRICE_NAME));

	IF v_MARKET_PRICE_NAME IS NULL THEN
		p_MARKET_PRICE_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT MARKET_PRICE_ID
		INTO p_MARKET_PRICE_ID
		FROM MARKET_PRICE
		WHERE MARKET_PRICE_NAME = v_MARKET_PRICE_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_MARKET_PRICE(
					p_MARKET_PRICE_ID,
					v_MARKET_PRICE_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0,
					'User Defined', -- MARKET_PRICE_TYPE
					'Hour', --MARKET_PRICE_INTERVAL
                    NULL,	--MARKET_TYPE
					0,		--COMMODITY_ID
					GA.UNDEFINED_ATTRIBUTE, -- SERVICE_POINT_TYPE
					GA.UNDEFINED_ATTRIBUTE, -- EXTERNAL_IDENTIFIER
					0, -- EDC_ID
                    0, -- SC_ID
					0, -- POD_ID
					0  -- ZOD_ID
					);
			ELSE
			    p_MARKET_PRICE_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_MARKET_PRICE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_MARKET_PRICE_EXT_IDENT
	(
	p_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_MARKET_PRICE_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED MARKET PRICE EXTERNAL IDENTIFIER

v_EXTERNAL_IDENTIFIER MARKET_PRICE.EXTERNAL_IDENTIFIER%TYPE;

BEGIN

	v_EXTERNAL_IDENTIFIER := LTRIM(RTRIM(p_EXTERNAL_IDENTIFIER));

	SELECT MARKET_PRICE_ID
	INTO p_MARKET_PRICE_ID
	FROM MARKET_PRICE
	WHERE EXTERNAL_IDENTIFIER = v_EXTERNAL_IDENTIFIER;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		    p_MARKET_PRICE_ID := GA.NO_DATA_FOUND;


END ID_FOR_MARKET_PRICE_EXT_IDENT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_COMMODITY
	(
	p_COMMODITY_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_COMMODITY_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED IT COMMODITY NAME

v_COMMODITY_NAME IT_COMMODITY.COMMODITY_NAME%TYPE;

BEGIN

	v_COMMODITY_NAME := LTRIM(RTRIM(p_COMMODITY_NAME));

	IF v_COMMODITY_NAME IS NULL THEN
		p_COMMODITY_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT COMMODITY_ID
		INTO p_COMMODITY_ID
		FROM IT_COMMODITY
		WHERE COMMODITY_NAME = v_COMMODITY_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_IT_COMMODITY
				    (
					p_COMMODITY_ID,
					v_COMMODITY_NAME,
					v_COMMODITY_NAME, -- ALIAS
					v_COMMODITY_NAME, -- DESC
					0,
					'Energy',  -- COMMODITY_TYPE
					'MWH', -- COMMODITY_UNIT
					GA.UNDEFINED_ATTRIBUTE, -- COMMODITY_UNIT_FORMAT
					GA.UNDEFINED_ATTRIBUTE, -- COMMODITY_PRICE_UNIT
					GA.UNDEFINED_ATTRIBUTE, -- COMMODITY_PRICE_FORMAT
                    0, 		-- IS_VIRTUAL
                    NULL	-- MARKET_TYPE
					);
			ELSE
			    p_COMMODITY_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_COMMODITY;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_PSE_NERC_CODE
	(
	p_PSE_NERC_CODE IN VARCHAR
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified PSE NERC code.

v_PSE_ID PURCHASING_SELLING_ENTITY.PSE_ID%TYPE;

BEGIN

	SELECT PSE_ID
	INTO v_PSE_ID
	FROM PURCHASING_SELLING_ENTITY
	WHERE PSE_NERC_CODE = LTRIM(RTRIM(p_PSE_NERC_CODE));

	RETURN v_PSE_ID;

	EXCEPTION
		WHEN OTHERS THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN 0;

END ID_FOR_PSE_NERC_CODE;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_TP_NERC_CODE
	(
	p_TP_NERC_CODE IN VARCHAR
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified TP NERC code.

v_TP_ID TRANSMISSION_PROVIDER.TP_ID%TYPE;

BEGIN

	SELECT TP_ID
	INTO v_TP_ID
	FROM TRANSMISSION_PROVIDER
	WHERE TP_NERC_CODE = LTRIM(RTRIM(p_TP_NERC_CODE));

	RETURN v_TP_ID;

	EXCEPTION
		WHEN OTHERS THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN 0;

END ID_FOR_TP_NERC_CODE;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_CA_NERC_CODE
	(
	p_CA_NERC_CODE IN VARCHAR
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified CA NERC code.

v_CA_ID CONTROL_AREA.CA_ID%TYPE;

BEGIN

	SELECT CA_ID
	INTO v_CA_ID
	FROM CONTROL_AREA
	WHERE CA_NERC_CODE = LTRIM(RTRIM(p_CA_NERC_CODE));

	RETURN v_CA_ID;

	EXCEPTION
		WHEN OTHERS THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN 0;

END ID_FOR_CA_NERC_CODE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CA
	(
	p_CA_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CA_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED CA NAME

v_CA_NAME CONTROL_AREA.CA_NAME%TYPE;

BEGIN

	v_CA_NAME := LTRIM(RTRIM(p_CA_NAME));

	IF v_CA_NAME IS NULL THEN
		p_CA_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT CA_ID INTO p_CA_ID
		FROM CONTROL_AREA
		WHERE CA_NAME = v_CA_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_CA
				    (
					p_CA_ID,
					v_CA_NAME, -- NAME,
					v_CA_NAME, -- ALIAS,
					v_CA_NAME, -- DESC,
					0,
					GA.UNDEFINED_ATTRIBUTE, -- NERC CODE,
					'Active',
					GA.UNDEFINED_ATTRIBUTE -- DUNS,
					);
			ELSE
			    p_CA_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_CA;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_TP
	(
	p_TP_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_TP_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED TP NAME

v_TP_NAME TRANSMISSION_PROVIDER.TP_NAME%TYPE;

BEGIN

	v_TP_NAME := LTRIM(RTRIM(p_TP_NAME));

	IF v_TP_NAME IS NULL THEN
		p_TP_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT TP_ID INTO p_TP_ID
		FROM TRANSMISSION_PROVIDER
		WHERE TP_NAME = v_TP_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
			    IO.PUT_TP(

					p_TP_ID,
					v_TP_NAME, -- NAME
					v_TP_NAME, -- ALIAS
					v_TP_NAME, -- DESC
					0,
					GA.UNDEFINED_ATTRIBUTE, -- NERC CODE
					'Active',
					GA.UNDEFINED_ATTRIBUTE, -- DUNS
					0 -- OASIS_NODE_ID
					);
			ELSE
			    p_TP_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_TP;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_ESP_DUNS_NUMBER
	(
	p_ESP_DUNS_NUMBER IN VARCHAR
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified ESP duns number.

v_ESP_ID ENERGY_SERVICE_PROVIDER.ESP_ID%TYPE;

BEGIN

	SELECT ESP_ID
	INTO v_ESP_ID
	FROM ENERGY_SERVICE_PROVIDER
	WHERE ESP_DUNS_NUMBER = LTRIM(RTRIM(p_ESP_DUNS_NUMBER));

	RETURN v_ESP_ID;

	EXCEPTION
		WHEN OTHERS THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN 0;

END ID_FOR_ESP_DUNS_NUMBER;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CUSTOMER
	(
	p_CUSTOMER_IDENTIFIER IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CUSTOMER_STATUS IN VARCHAR,
	p_CUSTOMER_IS_ACTIVE IN NUMBER,
	p_CUSTOMER_ID OUT NUMBER
	) AS

v_CUSTOMER CUSTOMER%ROWTYPE;

BEGIN

	SELECT *
	INTO v_CUSTOMER
	FROM CUSTOMER
	WHERE CUSTOMER_IDENTIFIER = LTRIM(RTRIM(p_CUSTOMER_IDENTIFIER));

	IF NOT p_CUSTOMER_STATUS = v_CUSTOMER.CUSTOMER_STATUS OR NOT p_CUSTOMER_IS_ACTIVE = v_CUSTOMER.CUSTOMER_IS_ACTIVE THEN
		UPDATE CUSTOMER SET
			CUSTOMER_STATUS = p_CUSTOMER_STATUS,
			CUSTOMER_IS_ACTIVE = p_CUSTOMER_IS_ACTIVE
		WHERE CUSTOMER_ID = v_CUSTOMER.CUSTOMER_ID;
	END IF;

	p_CUSTOMER_ID := v_CUSTOMER.CUSTOMER_ID;

EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				SELECT EID.NEXTVAL INTO p_CUSTOMER_ID FROM DUAL;
				INSERT INTO CUSTOMER (
					CUSTOMER_ID,
					CUSTOMER_IDENTIFIER,
					CUSTOMER_STATUS,
					CUSTOMER_IS_ACTIVE,
					ENTRY_DATE)
				VALUES (
					p_CUSTOMER_ID,
					LTRIM(RTRIM(p_CUSTOMER_IDENTIFIER)),
					p_CUSTOMER_STATUS,
					p_CUSTOMER_IS_ACTIVE,
					SYSDATE);
			ELSE
				p_CUSTOMER_ID := GA.NO_DATA_FOUND;
			END IF;
END ID_FOR_CUSTOMER;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_POOL
	(
	p_POOL_NAME IN VARCHAR
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified Pool Name.

v_POOL_ID POOL.POOL_ID%TYPE;

BEGIN

	ID_FOR_POOL(p_POOL_NAME, TRUE, v_POOL_ID);

	IF v_POOL_ID > 0 THEN
		RETURN v_POOL_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_POOL;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_POOL
	(
	p_POOL_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_POOL_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED POOL NAME

v_POOL_NAME POOL.POOL_NAME%TYPE;

BEGIN

	v_POOL_NAME := LTRIM(RTRIM(p_POOL_NAME));

	IF v_POOL_NAME IS NULL THEN
		p_POOL_ID := 0;
	ELSE
		BEGIN
			SELECT POOL_ID INTO p_POOL_ID
			FROM POOL
			WHERE POOL_NAME = v_POOL_NAME;
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				    IO.PUT_POOL
					    (
						p_POOL_ID,
						v_POOL_NAME,	 -- NAME
						GA.UNDEFINED_ATTRIBUTE, -- ALIAS
						GA.UNDEFINED_ATTRIBUTE, -- DESC
						0, -- ID
						GA.UNDEFINED_ATTRIBUTE, -- EXTERNAL ID
						'Active', -- STATUS
						GA.UNDEFINED_ATTRIBUTE, -- CATEGORY
						0								-- EXCLUDE LOAD SCHEDULE
						);
				ELSE
			    	 p_POOL_ID := GA.NO_DATA_FOUND;
				END IF;
		END;
	END IF;

END ID_FOR_POOL;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_POOL_EXTERNAL_IDENT
   (
   p_POOL_EXTERNAL_IDENTIFIER IN VARCHAR,
   p_POOL_ID OUT NUMBER
   ) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED PSE EXTERNAL ID

v_POOL_EXTERNAL_IDENTIFIER POOL.POOL_EXTERNAL_IDENTIFIER%TYPE;

BEGIN

    v_POOL_EXTERNAL_IDENTIFIER := LTRIM(RTRIM(p_POOL_EXTERNAL_IDENTIFIER));

    IF v_POOL_EXTERNAL_IDENTIFIER IS NULL THEN
            p_POOL_ID := CONSTANTS.NOT_ASSIGNED;
            RETURN;
    END IF;

    BEGIN
            SELECT POOL_ID INTO p_POOL_ID
            FROM POOL
            WHERE POOL_EXTERNAL_IDENTIFIER = v_POOL_EXTERNAL_IDENTIFIER;
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
                ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
				p_POOL_ID := GA.NO_DATA_FOUND;
    END;

END ID_FOR_POOL_EXTERNAL_IDENT;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_POOL_EXTERNAL_IDENT
	(
	p_POOL_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified Pipeline.

v_POOL_ID POOL.POOL_ID%TYPE := GA.NO_DATA_FOUND;

BEGIN

	SELECT POOL_ID
	INTO v_POOL_ID
	FROM POOL
	WHERE POOL_EXTERNAL_IDENTIFIER = LTRIM(RTRIM(p_POOL_EXTERNAL_IDENTIFIER));

	RETURN v_POOL_ID;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		IF p_NO_DATA_AS_NOT_ASSIGNED THEN
			RETURN CONSTANTS.NOT_ASSIGNED;
		ELSE
			RETURN GA.NO_DATA_FOUND;
		END IF;

END ID_FOR_POOL_EXTERNAL_IDENT;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_ESP_EXTERNAL_IDENTIFIER
	(
	p_ESP_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified ESP_EXTERNAL_IDENTIFIER.

v_ESP_ID ENERGY_SERVICE_PROVIDER.ESP_ID%TYPE := GA.NO_DATA_FOUND;

BEGIN

	SELECT ESP_ID
	INTO v_ESP_ID
	FROM ENERGY_SERVICE_PROVIDER
	WHERE ESP_EXTERNAL_IDENTIFIER = LTRIM(RTRIM(p_ESP_EXTERNAL_IDENTIFIER));

	RETURN v_ESP_ID;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		IF p_NO_DATA_AS_NOT_ASSIGNED THEN
			RETURN CONSTANTS.NOT_ASSIGNED;
		ELSE
			RETURN GA.NO_DATA_FOUND;
		END IF;

END ID_FOR_ESP_EXTERNAL_IDENTIFIER;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_PIPELINE_EXTERNAL_IDENT
	(
	p_PIPELINE_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_NO_DATA_AS_NOT_ASSIGNED IN BOOLEAN DEFAULT FALSE
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified Pipeline.

v_PIPELINE_ID PIPELINE.PIPELINE_ID%TYPE;

BEGIN

	SELECT PIPELINE_ID
	INTO v_PIPELINE_ID
	FROM PIPELINE
	WHERE EXTERNAL_IDENTIFIER = LTRIM(RTRIM(p_PIPELINE_EXTERNAL_IDENTIFIER));

	RETURN v_PIPELINE_ID;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		IF p_NO_DATA_AS_NOT_ASSIGNED THEN
			RETURN CONSTANTS.NOT_ASSIGNED;
		ELSE
			RETURN GA.NO_DATA_FOUND;
		END IF;

END ID_FOR_PIPELINE_EXTERNAL_IDENT;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_CONTRACT
	(
	p_CONTRACT_NAME IN VARCHAR
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified Pool Name.

v_CONTRACT_ID SERVICE_CONTRACT.CONTRACT_ID%TYPE;

BEGIN

	SELECT CONTRACT_ID
	INTO v_CONTRACT_ID
	FROM SERVICE_CONTRACT
	WHERE CONTRACT_NAME = LTRIM(RTRIM(p_CONTRACT_NAME));

	RETURN v_CONTRACT_ID;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		RETURN GA.NO_DATA_FOUND;

END ID_FOR_CONTRACT;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_BILL_CYCLE
	(
	p_BILL_CYCLE_NAME IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_BILL_CYCLE_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED BILL_CYCLE_NAME

v_BILL_CYCLE_NAME BILL_CYCLE.BILL_CYCLE_NAME%TYPE;

BEGIN

	v_BILL_CYCLE_NAME := LTRIM(RTRIM(p_BILL_CYCLE_NAME));

	IF v_BILL_CYCLE_NAME IS NULL THEN
		p_BILL_CYCLE_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT BILL_CYCLE_ID INTO p_BILL_CYCLE_ID
		FROM BILL_CYCLE
		WHERE BILL_CYCLE_NAME = v_BILL_CYCLE_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				IO.PUT_BILL_CYCLE (
					p_BILL_CYCLE_ID,
					p_BILL_CYCLE_NAME,
					p_BILL_CYCLE_NAME,
					p_BILL_CYCLE_NAME,
					0);
			ELSE
				p_BILL_CYCLE_ID := GA.NO_DATA_FOUND;
			END IF;
	END;

END ID_FOR_BILL_CYCLE;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_TX_SERVICE_TYPE
	(
	p_SERVICE_TYPE_NAME IN VARCHAR
	) RETURN NUMBER IS

-- Answer the internal id associated with the specified Pool Name.

v_SERVICE_TYPE_ID TX_SERVICE_TYPE.SERVICE_TYPE_ID%TYPE;

BEGIN

	SELECT SERVICE_TYPE_ID
	INTO v_SERVICE_TYPE_ID
	FROM TX_SERVICE_TYPE
	WHERE SERVICE_TYPE_NAME = LTRIM(RTRIM(p_SERVICE_TYPE_NAME));

	RETURN v_SERVICE_TYPE_ID;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		RETURN GA.NO_DATA_FOUND;

END ID_FOR_TX_SERVICE_TYPE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_GEOGRAPHY
	(
    p_GEOGRAPHY_NAME IN VARCHAR2,
    p_GEOGRAPHY_TYPE IN VARCHAR2,
    p_PARENT_GEOGRAPHY_ID IN NUMBER,
    p_MATCH_ABBREVIATION IN BOOLEAN,
    p_ALL_DESCENDANTS IN BOOLEAN,
    p_CREATE_IF_NOT_FOUND IN BOOLEAN,
    p_GEOGRAPHY_ID OUT NUMBER
    ) AS
v_GEOGRAPHY_NAME GEOGRAPHY.DISPLAY_NAME%TYPE;
v_FULL_NAME GEOGRAPHY.GEOGRAPHY_NAME%TYPE;
v_MATCH_ABBREV NUMBER(1);
v_ABBREVIATION VARCHAR2(8);
BEGIN

	v_GEOGRAPHY_NAME := LTRIM(RTRIM(p_GEOGRAPHY_NAME));

    IF p_MATCH_ABBREVIATION THEN
    	v_MATCH_ABBREV := 1;
	ELSE
    	v_MATCH_ABBREV := 0;
	END IF;

	IF v_GEOGRAPHY_NAME IS NULL THEN
		p_GEOGRAPHY_ID := 0;
	ELSE
		-- All Descendants means search all descendants of Parent object for matches,
	    -- not just immediate children
        BEGIN
			IF p_ALL_DESCENDANTS THEN
            	SELECT GEOGRAPHY_ID INTO p_GEOGRAPHY_ID
                FROM (SELECT GEOGRAPHY_ID, LEVEL
	                FROM GEOGRAPHY
	                WHERE ((UPPER(ABBREVIATION) = UPPER(v_GEOGRAPHY_NAME) AND v_MATCH_ABBREV=1)
	                		OR UPPER(NVL(DISPLAY_NAME,GEOGRAPHY_NAME)) = UPPER(v_GEOGRAPHY_NAME))
	                	AND GEOGRAPHY_TYPE = p_GEOGRAPHY_TYPE
					START WITH PARENT_GEOGRAPHY_ID = p_PARENT_GEOGRAPHY_ID
	                CONNECT BY PRIOR GEOGRAPHY_ID = PARENT_GEOGRAPHY_ID
                    ORDER BY LEVEL)
				WHERE ROWNUM=1;
		    ELSE
            	SELECT GEOGRAPHY_ID INTO p_GEOGRAPHY_ID
                FROM GEOGRAPHY
                WHERE ((UPPER(ABBREVIATION) = UPPER(v_GEOGRAPHY_NAME) AND v_MATCH_ABBREV=1)
                		OR UPPER(NVL(DISPLAY_NAME,GEOGRAPHY_NAME)) = UPPER(v_GEOGRAPHY_NAME))
                	AND GEOGRAPHY_TYPE = p_GEOGRAPHY_TYPE
                    AND PARENT_GEOGRAPHY_ID = p_PARENT_GEOGRAPHY_ID
                    AND ROWNUM=1;
		    END IF;
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
                	-- get object's full name (path)
                    BEGIN
                	    SELECT SUBSTR( SUBSTR(SYS_CONNECT_BY_PATH(NVL(ABBREVIATION,DISPLAY_NAME),', '),3)||', '||v_GEOGRAPHY_NAME , 1, 128)
                	    INTO v_FULL_NAME
                	    FROM GEOGRAPHY
                	    WHERE GEOGRAPHY_ID = p_PARENT_GEOGRAPHY_ID
                	    START WITH PARENT_GEOGRAPHY_ID = 0
                	    CONNECT BY PRIOR GEOGRAPHY_ID = PARENT_GEOGRAPHY_ID;
                	EXCEPTION
                    	WHEN NO_DATA_FOUND THEN
                        	v_FULL_NAME := v_GEOGRAPHY_NAME;
                	END;
                	-- get abbreviation
                	IF NVL(LENGTH(v_GEOGRAPHY_NAME),0) <= 8 AND p_MATCH_ABBREVIATION THEN
                    	v_ABBREVIATION := v_GEOGRAPHY_NAME;
    				ELSE
                    	v_ABBREVIATION := NULL;
    				END IF;
                    -- store it
				    IO.PUT_GEOGRAPHY
					    (
						p_GEOGRAPHY_ID,
						v_FULL_NAME,	 -- NAME
						GA.UNDEFINED_ATTRIBUTE, -- ALIAS
						GA.UNDEFINED_ATTRIBUTE, -- DESC
						0, -- ID
                        p_GEOGRAPHY_TYPE,
                        p_PARENT_GEOGRAPHY_ID,
                        v_GEOGRAPHY_NAME, -- DISPLAY_NAME
                        v_ABBREVIATION -- ABBREVIATION
						);
				ELSE
			    	 p_GEOGRAPHY_ID := GA.NO_DATA_FOUND;
				END IF;
		END;
	END IF;
END ID_FOR_GEOGRAPHY;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_GEOGRAPHY
	(
    p_CITY IN VARCHAR2,
    p_STATE_CODE IN VARCHAR2,
    p_POSTAL_CODE IN VARCHAR2,
    p_COUNTRY_CODE IN VARCHAR2,
    p_CREATE_IF_NOT_FOUND IN BOOLEAN,
    p_GEOGRAPHY_ID OUT NUMBER
    ) AS
BEGIN
	p_GEOGRAPHY_ID := 0; -- pessimistic default
	-- iterate through hierarchy until we come to correct geography object
    	-- first country
	IF NOT (TRIM(p_COUNTRY_CODE) IS NULL) THEN
		ID_FOR_GEOGRAPHY(p_COUNTRY_CODE,'Country',p_GEOGRAPHY_ID,TRUE,TRUE,p_CREATE_IF_NOT_FOUND,p_GEOGRAPHY_ID);
	    IF p_GEOGRAPHY_ID <= 0 THEN
	    	RETURN;
		END IF;
	END IF;

    	-- then state
	IF NOT (TRIM(p_STATE_CODE) IS NULL) THEN
		ID_FOR_GEOGRAPHY(p_STATE_CODE,'State/Province',p_GEOGRAPHY_ID,TRUE,TRUE,p_CREATE_IF_NOT_FOUND,p_GEOGRAPHY_ID);
        IF p_GEOGRAPHY_ID <= 0 THEN
        	RETURN;
    	END IF;
	END IF;

        -- then city
	IF NOT (TRIM(p_CITY) IS NULL) THEN
		ID_FOR_GEOGRAPHY(p_CITY,'City',p_GEOGRAPHY_ID,TRUE,TRUE,p_CREATE_IF_NOT_FOUND,p_GEOGRAPHY_ID);
	    IF p_GEOGRAPHY_ID <= 0 THEN
	    	RETURN;
		END IF;
	END IF;
        -- finally, postal code
	IF NOT (TRIM(p_POSTAL_CODE) IS NULL) THEN
		ID_FOR_GEOGRAPHY(p_POSTAL_CODE,'Postal Code',p_GEOGRAPHY_ID,TRUE,TRUE,p_CREATE_IF_NOT_FOUND,p_GEOGRAPHY_ID);
	END IF;

    -- done!
END ID_FOR_GEOGRAPHY;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CASE
	(
	p_CASE_NAME IN VARCHAR,
	p_CASE_CATEGORY IN VARCHAR,
	p_CREATE_IF_NOT_FOUND IN BOOLEAN,
	p_CASE_ID OUT NUMBER
	) AS

-- Answer The Internal Id Associated With The Specified Case Name And Category

v_CASE_NAME CASE_LABEL.CASE_NAME%TYPE;

BEGIN

	v_CASE_NAME := LTRIM(RTRIM(p_CASE_NAME));

	IF v_CASE_NAME IS NULL THEN
		p_CASE_ID := 0;
		RETURN;
	END IF;

	IF UPPER(p_CASE_CATEGORY) NOT IN ('ALL','CALENDAR','ENROLLMENT','GROWTH FACTOR','LOSS FACTOR','PRODUCT','SYSTEM LOAD','USAGE FACTOR','WEATHER') THEN
		ERRS.RAISE_BAD_ARGUMENT('Case Category', p_CASE_CATEGORY,
			'Case Category must be one of the following values: All, Calendar, Enrollment, Growth Factor, Loss Factor, Product, System Load, Usage Factor, or Weather.');
	END IF;

	BEGIN
		SELECT CASE_ID INTO p_CASE_ID
		FROM CASE_LABEL
		WHERE CASE_NAME = v_CASE_NAME
			AND UPPER(CASE_CATEGORY) = UPPER(p_CASE_CATEGORY);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			IF p_CREATE_IF_NOT_FOUND THEN
				IO.PUT_CASE_LABEL(p_CASE_ID, v_CASE_NAME, v_CASE_NAME, v_CASE_NAME, 0, INITCAP(p_CASE_CATEGORY));
			END IF;
		END;

END ID_FOR_CASE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_CASE
	(
	p_CASE_NAME IN VARCHAR,
	p_CASE_CATEGORY IN VARCHAR,
	p_CASE_ID OUT NUMBER
	) AS

-- Answer The Internal Id Associated With The Specified Case Name And Category

BEGIN

	ID_FOR_CASE(p_CASE_NAME, p_CASE_CATEGORY, TRUE, p_CASE_ID);

END ID_FOR_CASE;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_CASE
	(
	p_CASE_NAME IN VARCHAR,
	p_CASE_CATEGORY IN VARCHAR
	) RETURN NUMBER IS

v_CASE_ID NUMBER;

-- Answer The Internal Id Associated With The Specified Case Name And Category

BEGIN

	ID_FOR_CASE(p_CASE_NAME, p_CASE_CATEGORY, TRUE, v_CASE_ID);

	IF v_CASE_ID > 0 THEN
		RETURN v_CASE_ID;
	ELSE
		RETURN CONSTANTS.NOT_ASSIGNED;
	END IF;

END ID_FOR_CASE;
----------------------------------------------------------------------------------------------------
PROCEDURE ID_FOR_INTERCHANGE_CONTRACT
	(
	p_CONTRACT_NAME IN VARCHAR,
	p_CONTRACT_ID OUT NUMBER
	) AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SOURCE_SINK NAME

v_CONTRACT_NAME INTERCHANGE_CONTRACT.CONTRACT_NAME%TYPE;

BEGIN

	v_CONTRACT_NAME := LTRIM(RTRIM(p_CONTRACT_NAME));

	IF v_CONTRACT_NAME IS NULL THEN
		p_CONTRACT_ID := 0;
		RETURN;
	END IF;

	BEGIN
		SELECT CONTRACT_ID
		INTO p_CONTRACT_ID
		FROM INTERCHANGE_CONTRACT
		WHERE CONTRACT_NAME = v_CONTRACT_NAME;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			p_CONTRACT_ID := GA.NO_DATA_FOUND;
	END;

END ID_FOR_INTERCHANGE_CONTRACT;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_SCENARIO
	(
	p_SCENARIO_NAME IN VARCHAR
	) RETURN NUMBER IS
v_SCENARIO_ID NUMBER;
v_SCENARIO_NAME SCENARIO.SCENARIO_NAME%TYPE;
BEGIN

	v_SCENARIO_NAME := LTRIM(RTRIM(p_SCENARIO_NAME));

	IF v_SCENARIO_NAME IS NULL THEN
		RETURN 0;
	END IF;

	BEGIN
		SELECT SCENARIO_ID
		INTO v_SCENARIO_ID
		FROM SCENARIO
		WHERE SCENARIO_NAME = v_SCENARIO_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			v_SCENARIO_ID := GA.NO_DATA_FOUND;
	END;

	RETURN v_SCENARIO_ID;
END ID_FOR_SCENARIO;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_SETTLEMENT_TYPE
	(
	p_SETTLEMENT_TYPE_NAME IN VARCHAR
	) RETURN NUMBER IS
v_SETTLEMENT_TYPE_ID NUMBER;
v_SETTLEMENT_TYPE_NAME SETTLEMENT_TYPE.SETTLEMENT_TYPE_NAME%TYPE;
BEGIN

	v_SETTLEMENT_TYPE_NAME := LTRIM(RTRIM(p_SETTLEMENT_TYPE_NAME));

	IF v_SETTLEMENT_TYPE_NAME IS NULL THEN
		RETURN 0;
	END IF;

	BEGIN
		SELECT SETTLEMENT_TYPE_ID
		INTO v_SETTLEMENT_TYPE_ID
		FROM SETTLEMENT_TYPE
		WHERE SETTLEMENT_TYPE_NAME = v_SETTLEMENT_TYPE_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			v_SETTLEMENT_TYPE_ID := GA.NO_DATA_FOUND;
	END;

	RETURN v_SETTLEMENT_TYPE_ID;
END ID_FOR_SETTLEMENT_TYPE;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_SYSTEM_ACTION
	(
	p_ACTION_NAME IN VARCHAR
	) RETURN NUMBER IS
v_ACTION_ID NUMBER;
v_ACTION_NAME SYSTEM_ACTION.ACTION_NAME%TYPE;
BEGIN

	v_ACTION_NAME := LTRIM(RTRIM(p_ACTION_NAME));

	IF v_ACTION_NAME IS NULL THEN
		RETURN 0;
	END IF;

	BEGIN
		SELECT ACTION_ID
		INTO v_ACTION_ID
		FROM SYSTEM_ACTION
		WHERE ACTION_NAME = v_ACTION_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			v_ACTION_ID := GA.NO_DATA_FOUND;
	END;

	RETURN v_ACTION_ID;
END ID_FOR_SYSTEM_ACTION;
----------------------------------------------------------------------------------------------------

END ID;
/
