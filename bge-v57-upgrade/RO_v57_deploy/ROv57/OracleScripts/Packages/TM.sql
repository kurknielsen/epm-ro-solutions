CREATE OR REPLACE PACKAGE TM AS
--Revision $Revision: 1.39 $

-- RETAIL TRANSACTION MANAGER INTERFACE PACKAGE

FUNCTION WHAT_VERSION RETURN VARCHAR;


PROCEDURE SCHEDULE_REQUEST
	(
	p_TRANSACTION_NAME IN VARCHAR,
	p_DATE IN VARCHAR,
	p_TIME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_AMOUNT IN VARCHAR,
	p_PRICE IN VARCHAR
	);

PROCEDURE ACCOUNT_CONTACT
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CATEGORY_NAME IN VARCHAR,
	p_CONTACT_NAME IN VARCHAR,
	p_WORK_PHONE IN VARCHAR,
	p_HOME_PHONE IN VARCHAR,
	p_FAX_PHONE IN VARCHAR,
	p_CELL_PHONE IN VARCHAR,
	p_EMAIL_ADDRESS IN VARCHAR
	);

PROCEDURE SERVICE_LOCATION_CONTACT
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_CATEGORY_NAME IN VARCHAR,
	p_CONTACT_NAME IN VARCHAR,
	p_WORK_PHONE IN VARCHAR,
	p_HOME_PHONE IN VARCHAR,
	p_FAX_PHONE IN VARCHAR,
	p_CELL_PHONE IN VARCHAR,
	p_EMAIL_ADDRESS IN VARCHAR
	);

PROCEDURE ACCOUNT_ADDRESS
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CATEGORY_NAME IN VARCHAR,
	p_STREET IN VARCHAR,
	p_STREET2 IN VARCHAR,
	p_CITY IN VARCHAR,
	p_STATE_CODE IN VARCHAR,
	p_POSTAL_CODE IN VARCHAR,
	p_COUNTRY_CODE IN VARCHAR
	);

PROCEDURE SERVICE_LOCATION_ADDRESS
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_CATEGORY_NAME IN VARCHAR,
	p_STREET IN VARCHAR,
	p_STREET2 IN VARCHAR,
	p_CITY IN VARCHAR,
	p_STATE_CODE IN VARCHAR,
	p_POSTAL_CODE IN VARCHAR,
	p_COUNTRY_CODE IN VARCHAR
	);

PROCEDURE RETAIL_ACCOUNT_REQUEST
	(
	p_ACCOUNT_NAME IN VARCHAR,
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ACCOUNT_STATUS IN VARCHAR DEFAULT 'Active',
	p_ACCOUNT_MODEL_OPTION IN VARCHAR DEFAULT 'Meter',
	p_ACCOUNT_SIC_CODE IN VARCHAR,
	p_ACCOUNT_NOTES IN VARCHAR,
	p_ACCOUNT_TIME_ZONE IN VARCHAR,
	p_ACCOUNT_METER_TYPE IN VARCHAR,
	p_EDC_NAME IN VARCHAR,
	p_EDC_ACCOUNT_NUMBER IN VARCHAR,
	P_EDC_RATE_CLASS IN VARCHAR,
	p_ESP_NAME IN VARCHAR,
	p_ESP_ACCOUNT_NUMBER IN VARCHAR,
	p_MRSP_NAME IN VARCHAR,
	p_MRSP_ACCOUNT_NUMBER IN VARCHAR,
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_METER_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_METER_STATUS IN VARCHAR DEFAULT 'Active',
	p_METER_TYPE IN VARCHAR,
	p_EDC_METER_NUMBER IN VARCHAR,
	p_ESP_METER_NUMBER IN VARCHAR,
	p_SERVICE_POINT_NAME IN VARCHAR,
	p_WEATHER_STATION_NAME IN VARCHAR,
	p_BILL_CYCLE_NAME IN VARCHAR,
	p_METER_READ_CYCLE IN VARCHAR,
	p_SERVICE_BEGIN_DATE IN VARCHAR,
	p_SERVICE_END_DATE IN VARCHAR,
	p_NEXT_ACTION_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_ACCOUNT_IS_ACTIVE IN NUMBER DEFAULT 1,
	p_METER_IS_ACTIVE IN NUMBER DEFAULT 1,
	p_IS_ESTIMATED_END_DATE IN NUMBER DEFAULT 0,
	p_IS_AGGREGATE_ACCOUNT IN NUMBER DEFAULT 0,
	p_IS_IN_CAPACITY_CALC IN NUMBER DEFAULT 0,
	p_IS_SCHEDULE_CONTROL_DISPATCH IN NUMBER DEFAULT 0,
	p_IS_REACTIVE_VOLTAGE_CONTROL IN NUMBER DEFAULT 0,
	p_IS_REG_FREQ_RESPONSE IN NUMBER DEFAULT 0,
	p_IS_ENERGY_IMBALANCE IN NUMBER DEFAULT 0,
	p_IS_OP_SPINNING_RESERVE IN NUMBER DEFAULT 0,
	p_IS_OP_SUPPLEMENTAL_RESERVE IN NUMBER DEFAULT 0
	);

PROCEDURE ACCOUNT_METER_FORECAST_REQUEST
	(
	p_MRSP_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_INTERVAL IN VARCHAR,
	p_FORECAST_VALUES IN VARCHAR
	);

PROCEDURE LOAD_PROFILE_POINT_REQUEST
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_POINT_INDEX IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_POINT_VALUES IN VARCHAR
	);

PROCEDURE LOAD_PROFILE_REQUEST
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_PROFILE_TYPE IN VARCHAR,
	p_PROFILE_OPERATION IN VARCHAR,
	p_PROFILE_ORIGIN IN VARCHAR,
	p_PROFILE_RATE_CLASS IN VARCHAR,
	p_PROFILE_DAY_TYPE IN VARCHAR,
	p_PROFILE_ACCOUNT_REF IN VARCHAR,
	p_PROFILE_METER_REF IN VARCHAR,
	p_PROFILE_SIC_CODE IN VARCHAR,
	p_PROFILE_SEASON IN VARCHAR,
	p_PROFILE_SYSTEM_LOAD IN VARCHAR,
	p_PROFILE_ADJUSTMENT_OPTION IN VARCHAR
	);

PROCEDURE LOAD_PROFILE_STATS_REQUEST
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_FROM_DATE IN VARCHAR,
	p_TO_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	);

PROCEDURE WEATHER_PARAMETER_REQUEST
	(
	p_STATION_NAME IN VARCHAR,
	p_PARAMETER_NAME IN VARCHAR,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_INTERVAL IN VARCHAR,
	p_PARAMETER_VALS IN VARCHAR
	);

PROCEDURE CALENDAR_PROFILE_REQUEST
	(
	p_CALENDAR_NAME IN VARCHAR,
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_END_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	);

PROCEDURE ACCOUNT_CALENDAR_REQUEST
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CALENDAR_NAME IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	);

PROCEDURE METER_CALENDAR_REQUEST
	(
	p_MRSP_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_CALENDAR_NAME IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	);

PROCEDURE ACCOUNT_LOSS_FACTOR_REQUEST
	(
	p_LOSS_FACTOR_NAME IN VARCHAR,
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	);

PROCEDURE METER_LOSS_FACTOR_REQUEST
	(
	p_LOSS_FACTOR_NAME IN VARCHAR,
	p_MRSP_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	);

PROCEDURE ACCOUNT_USAGE_FACTOR_REQUEST
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_FACTOR_VAL IN VARCHAR
	);

PROCEDURE METER_USAGE_FACTOR_REQUEST
	(
	p_MRSP_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_FACTOR_VAL IN VARCHAR
	);

PROCEDURE ENTITY_ATTRIBUTE_REQUEST
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ALIAS IN VARCHAR,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_OWNER_ENTITY_NAME IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_END_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_ATTRIBUTE_VAL IN VARCHAR
	);

END;
/
CREATE OR REPLACE PACKAGE BODY TM AS
---------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.39 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE REGISTER_STATUS
	(
	p_STATUS_TYPE IN VARCHAR,
	p_STATUS_NAME IN VARCHAR,
	p_STATUS_IS_ACTIVE IN NUMBER
	) AS

BEGIN

	UPDATE ACCOUNT_STATUS_NAME
	SET IS_ACTIVE = DECODE(NVL(p_STATUS_IS_ACTIVE,0),1,1,0)
	WHERE STATUS_NAME = LTRIM(RTRIM(p_STATUS_NAME));

	IF SQL%NOTFOUND THEN
		INSERT INTO ACCOUNT_STATUS_NAME
			(
			STATUS_NAME,
			IS_ACTIVE
			)
		VALUES
			(
			LTRIM(RTRIM(p_STATUS_NAME)),
			DECODE(NVL(p_STATUS_IS_ACTIVE,0),1,1,0)
			);
	END IF;

END REGISTER_STATUS;
----------------------------------------------------------------------------------------------------
PROCEDURE SCHEDULE_REQUEST
	(
	p_TRANSACTION_NAME IN VARCHAR,
	p_DATE IN VARCHAR,
	p_TIME IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_AMOUNT IN VARCHAR,
	p_PRICE IN VARCHAR
	)
	AS

v_TRANSACTION_ID NUMBER;
v_SCHEDULE_DATE DATE;
v_STATUS NUMBER;
BEGIN

	ID.ID_FOR_TRANSACTION(p_TRANSACTION_NAME, 'Retail Schedule', v_TRANSACTION_ID);

	IF v_TRANSACTION_ID <= 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'RETAIL TRANSACTION SCHEDULE NOT DEFINED FOR ' || p_TRANSACTION_NAME);
		RETURN;
	END IF;

	v_SCHEDULE_DATE := TO_DATE(p_DATE || p_TIME, 'MM/DD/YYYY HH24:MI');
	ITJ.PUT_IT_SCHEDULE(v_TRANSACTION_ID, 1, v_SCHEDULE_DATE, SYSDATE, p_AMOUNT, p_PRICE, v_STATUS);

END SCHEDULE_REQUEST;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_CONTACT
	(
	p_ENTITY_ID IN NUMBER,
	p_ENTITY_DOMAIN_ID IN NUMBER,
	p_CATEGORY_NAME IN VARCHAR,
	p_CONTACT_NAME IN VARCHAR,
	p_WORK_PHONE IN VARCHAR,
	p_HOME_PHONE IN VARCHAR,
	p_FAX_PHONE IN VARCHAR,
	p_CELL_PHONE IN VARCHAR,
	p_EMAIL_ADDRESS IN VARCHAR
	) AS

v_CATEGORY_ID NUMBER;
v_CONTACT_ID NUMBER;
v_OID NUMBER;
v_PHONE_NUMBER VARCHAR(32);

BEGIN

	ID.ID_FOR_CATEGORY(p_CATEGORY_NAME, v_CATEGORY_ID);

	IO.PUT_CONTACT
		(
		v_CONTACT_ID,
		p_CONTACT_NAME,
		p_CONTACT_NAME,
		p_CONTACT_NAME,
		v_CONTACT_ID,
		'Active',
		LTRIM(RTRIM(p_EMAIL_ADDRESS)),
		GA.UNDEFINED_ATTRIBUTE,
		GA.UNDEFINED_ATTRIBUTE,
		GA.UNDEFINED_ATTRIBUTE,
		GA.UNDEFINED_ATTRIBUTE,
		GA.UNDEFINED_ATTRIBUTE,
		GA.UNDEFINED_ATTRIBUTE
		);

	EM.PUT_ENTITY_DOMAIN_CONTACT(p_ENTITY_DOMAIN_ID, p_ENTITY_ID, v_CATEGORY_ID, v_CONTACT_ID, v_CATEGORY_ID, v_CONTACT_ID);

	v_PHONE_NUMBER := LTRIM(RTRIM(p_WORK_PHONE));
	IF LENGTH(v_PHONE_NUMBER) > 0 THEN
		SP.PUT_PHONE_NUMBER(v_OID, v_CONTACT_ID, 'Work', v_PHONE_NUMBER, 'Work');
	END IF;

	v_PHONE_NUMBER := LTRIM(RTRIM(p_HOME_PHONE));
	IF LENGTH(v_PHONE_NUMBER) > 0 THEN
		SP.PUT_PHONE_NUMBER(v_OID, v_CONTACT_ID, 'Home', v_PHONE_NUMBER, 'Home');
	END IF;

	v_PHONE_NUMBER := LTRIM(RTRIM(p_FAX_PHONE));
	IF LENGTH(v_PHONE_NUMBER) > 0 THEN
		SP.PUT_PHONE_NUMBER(v_OID, v_CONTACT_ID, 'Fax', v_PHONE_NUMBER, 'Fax');
	END IF;

	v_PHONE_NUMBER := LTRIM(RTRIM(p_CELL_PHONE));
	IF LENGTH(v_PHONE_NUMBER) > 0 THEN
		SP.PUT_PHONE_NUMBER(v_OID, v_CONTACT_ID, 'Cell', v_PHONE_NUMBER, 'Cell');
	END IF;

END PUT_CONTACT;
----------------------------------------------------------------------------------------------------
PROCEDURE ACCOUNT_CONTACT
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CATEGORY_NAME IN VARCHAR,
	p_CONTACT_NAME IN VARCHAR,
	p_WORK_PHONE IN VARCHAR,
	p_HOME_PHONE IN VARCHAR,
	p_FAX_PHONE IN VARCHAR,
	p_CELL_PHONE IN VARCHAR,
	p_EMAIL_ADDRESS IN VARCHAR
	) AS

v_ACCOUNT_ID NUMBER;
v_ENTITY_DOMAIN_ID NUMBER;

BEGIN
	ID.ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_ACCOUNT_EXTERNAL_IDENTIFIER, v_ACCOUNT_ID);

	IF v_ACCOUNT_ID = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'ACCOUNT NOT DEFINED FOR ' || p_ACCOUNT_EXTERNAL_IDENTIFIER);
		RETURN;
	END IF;

	ID.ID_FOR_ENTITY_DOMAIN('Retail Account', v_ENTITY_DOMAIN_ID);

	PUT_CONTACT
	    (
		v_ACCOUNT_ID,
		v_ENTITY_DOMAIN_ID,
		p_CATEGORY_NAME,
		p_CONTACT_NAME,
		p_WORK_PHONE,
		p_HOME_PHONE,
		p_FAX_PHONE,
		p_CELL_PHONE,
		p_EMAIL_ADDRESS
		);

END ACCOUNT_CONTACT;
----------------------------------------------------------------------------------------------------
PROCEDURE SERVICE_LOCATION_CONTACT
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_CATEGORY_NAME IN VARCHAR,
	p_CONTACT_NAME IN VARCHAR,
	p_WORK_PHONE IN VARCHAR,
	p_HOME_PHONE IN VARCHAR,
	p_FAX_PHONE IN VARCHAR,
	p_CELL_PHONE IN VARCHAR,
	p_EMAIL_ADDRESS IN VARCHAR
	) AS

v_SERVICE_LOCATION_ID NUMBER;
v_ENTITY_DOMAIN_ID NUMBER;

BEGIN
	ID.ID_FOR_SERVICE_LOCATION(p_SERVICE_LOCATION_NAME, v_SERVICE_LOCATION_ID);

	IF v_SERVICE_LOCATION_ID = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'SERVICE LOCATION NOT DEFINED FOR ' || p_SERVICE_LOCATION_NAME);
		RETURN;
	END IF;

	ID.ID_FOR_ENTITY_DOMAIN('Service Location', v_ENTITY_DOMAIN_ID);

	PUT_CONTACT
	    (
		v_SERVICE_LOCATION_ID,
		v_ENTITY_DOMAIN_ID,
		p_CATEGORY_NAME,
		p_CONTACT_NAME,
		p_WORK_PHONE,
		p_HOME_PHONE,
		p_FAX_PHONE,
		p_CELL_PHONE,
		p_EMAIL_ADDRESS
		);

END SERVICE_LOCATION_CONTACT;
----------------------------------------------------------------------------------------------------
PROCEDURE ACCOUNT_ADDRESS
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CATEGORY_NAME IN VARCHAR,
	p_STREET IN VARCHAR,
	p_STREET2 IN VARCHAR,
	p_CITY IN VARCHAR,
	p_STATE_CODE IN VARCHAR,
	p_POSTAL_CODE IN VARCHAR,
	p_COUNTRY_CODE IN VARCHAR
	) AS

v_ACCOUNT_ID NUMBER;
v_CATEGORY_ID NUMBER;
v_ENTITY_DOMAIN_ID NUMBER;

BEGIN

	ID.ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_ACCOUNT_EXTERNAL_IDENTIFIER, v_ACCOUNT_ID);

	IF v_ACCOUNT_ID = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'ACCOUNT NOT DEFINED FOR ' || p_ACCOUNT_EXTERNAL_IDENTIFIER);
		RETURN;
	END IF;

	ID.ID_FOR_CATEGORY(p_CATEGORY_NAME, v_CATEGORY_ID);
	ID.ID_FOR_ENTITY_DOMAIN('Retail Account', v_ENTITY_DOMAIN_ID);

	EM.PUT_ENTITY_DOMAIN_ADDRESS(v_ENTITY_DOMAIN_ID, v_ACCOUNT_ID, v_CATEGORY_ID, p_STREET, p_STREET2, p_CITY, p_STATE_CODE, p_POSTAL_CODE, p_COUNTRY_CODE, v_CATEGORY_ID);

END ACCOUNT_ADDRESS;
----------------------------------------------------------------------------------------------------
PROCEDURE SERVICE_LOCATION_ADDRESS
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_CATEGORY_NAME IN VARCHAR,
	p_STREET IN VARCHAR,
	p_STREET2 IN VARCHAR,
	p_CITY IN VARCHAR,
	p_STATE_CODE IN VARCHAR,
	p_POSTAL_CODE IN VARCHAR,
	p_COUNTRY_CODE IN VARCHAR
	) AS

v_SERVICE_LOCATION_ID NUMBER;
v_CATEGORY_ID NUMBER;
v_ENTITY_DOMAIN_ID NUMBER;

BEGIN

	ID.ID_FOR_SERVICE_LOCATION(p_SERVICE_LOCATION_NAME, v_SERVICE_LOCATION_ID);

	IF v_SERVICE_LOCATION_ID = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'SERVICE LOCATION NOT DEFINED FOR ' || p_SERVICE_LOCATION_NAME);
		RETURN;
	END IF;

	ID.ID_FOR_CATEGORY(p_CATEGORY_NAME, v_CATEGORY_ID);
	ID.ID_FOR_ENTITY_DOMAIN('Service Location', v_ENTITY_DOMAIN_ID);

	EM.PUT_ENTITY_DOMAIN_ADDRESS(v_ENTITY_DOMAIN_ID, v_SERVICE_LOCATION_ID, v_CATEGORY_ID, p_STREET, p_STREET2, p_CITY, p_STATE_CODE, p_POSTAL_CODE, p_COUNTRY_CODE, v_CATEGORY_ID);

END SERVICE_LOCATION_ADDRESS;
----------------------------------------------------------------------------------------------------
PROCEDURE RETAIL_ACCOUNT_REQUEST
	(
	p_ACCOUNT_NAME IN VARCHAR,
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ACCOUNT_STATUS IN VARCHAR DEFAULT 'Active',
	p_ACCOUNT_MODEL_OPTION IN VARCHAR DEFAULT 'Meter',
	p_ACCOUNT_SIC_CODE IN VARCHAR,
	p_ACCOUNT_NOTES IN VARCHAR,
	p_ACCOUNT_TIME_ZONE IN VARCHAR,
	p_ACCOUNT_METER_TYPE IN VARCHAR,
	p_EDC_NAME IN VARCHAR,
	p_EDC_ACCOUNT_NUMBER IN VARCHAR,
	P_EDC_RATE_CLASS IN VARCHAR,
	p_ESP_NAME IN VARCHAR,
	p_ESP_ACCOUNT_NUMBER IN VARCHAR,
	p_MRSP_NAME IN VARCHAR,
	p_MRSP_ACCOUNT_NUMBER IN VARCHAR,
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_METER_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_METER_STATUS IN VARCHAR DEFAULT 'Active',
	p_METER_TYPE IN VARCHAR,
	p_EDC_METER_NUMBER IN VARCHAR,
	p_ESP_METER_NUMBER IN VARCHAR,
	p_SERVICE_POINT_NAME IN VARCHAR,
	p_WEATHER_STATION_NAME IN VARCHAR,
	p_BILL_CYCLE_NAME IN VARCHAR,
	p_METER_READ_CYCLE IN VARCHAR,
	p_SERVICE_BEGIN_DATE IN VARCHAR,
	p_SERVICE_END_DATE IN VARCHAR,
	p_NEXT_ACTION_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_ACCOUNT_IS_ACTIVE IN NUMBER DEFAULT 1,
	p_METER_IS_ACTIVE IN NUMBER DEFAULT 1,
	p_IS_ESTIMATED_END_DATE IN NUMBER DEFAULT 0,
	p_IS_AGGREGATE_ACCOUNT IN NUMBER DEFAULT 0,
	p_IS_IN_CAPACITY_CALC IN NUMBER DEFAULT 0,
	p_IS_SCHEDULE_CONTROL_DISPATCH IN NUMBER DEFAULT 0,
	p_IS_REACTIVE_VOLTAGE_CONTROL IN NUMBER DEFAULT 0,
	p_IS_REG_FREQ_RESPONSE IN NUMBER DEFAULT 0,
	p_IS_ENERGY_IMBALANCE IN NUMBER DEFAULT 0,
	p_IS_OP_SPINNING_RESERVE IN NUMBER DEFAULT 0,
	p_IS_OP_SUPPLEMENTAL_RESERVE IN NUMBER DEFAULT 0
	)
	AS

v_ACCOUNT_NAME VARCHAR(32);
v_ACCOUNT_ID NUMBER;
v_OID NUMBER;
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_OLD_BEGIN_DATE DATE;
v_EDC_NAME VARCHAR(32);
v_ESP_NAME VARCHAR(32);
v_EDC_ID NUMBER;
v_ESP_ID NUMBER;
v_MRSP_ID NUMBER;
v_SERVICE_LOCATION_ID NUMBER;
v_METER_ID NUMBER;
v_SERVICE_POINT_ID NUMBER;
v_WEATHER_STATION_ID NUMBER;
v_STATUS NUMBER;
v_MRSP_NAME VARCHAR(32);
v_METER_NAME METER.METER_NAME%TYPE;
v_DATE_FORMAT VARCHAR(16);
v_ACCOUNT_MODEL_OPTION VARCHAR(8);
v_METER_INTERVAL VARCHAR(8);
v_METER_TYPE VARCHAR(8);

BEGIN

	v_DATE_FORMAT := LTRIM(RTRIM(p_DATE_FORMAT));
	v_BEGIN_DATE := TO_DATE(LTRIM(RTRIM(p_SERVICE_BEGIN_DATE)), v_DATE_FORMAT);
	v_END_DATE := TO_DATE(LTRIM(RTRIM(p_SERVICE_END_DATE)), v_DATE_FORMAT);
	v_OLD_BEGIN_DATE := v_BEGIN_DATE;
	v_ACCOUNT_NAME := LTRIM(RTRIM(p_ACCOUNT_NAME));
	ID.ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_ACCOUNT_EXTERNAL_IDENTIFIER, v_ACCOUNT_ID);
	SELECT DECODE(UPPER(SUBSTR(p_ACCOUNT_MODEL_OPTION,1,1)),'M','Meter','Account') INTO v_ACCOUNT_MODEL_OPTION FROM DUAL;

	IO.PUT_ACCOUNT
		(
		v_OID,
		SUBSTR(v_ACCOUNT_NAME,1,LEAST(LENGTH(v_ACCOUNT_NAME),32)),
		SUBSTR(v_ACCOUNT_NAME,1,LEAST(LENGTH(v_ACCOUNT_NAME),32)),
		v_ACCOUNT_NAME,
		v_ACCOUNT_ID,
		GA.UNDEFINED_ATTRIBUTE, -- DUNS NUMBER,
		LTRIM(RTRIM(p_ACCOUNT_EXTERNAL_IDENTIFIER)),
		v_ACCOUNT_MODEL_OPTION,
		p_ACCOUNT_SIC_CODE,
		NVL(p_ACCOUNT_METER_TYPE,GA.UNDEFINED_ATTRIBUTE),
		GA.UNDEFINED_ATTRIBUTE, -- ACCOUNT_METER_EXT_IDENTIFIER,
		v_ACCOUNT_NAME, -- DISPLAY NAME
		0, -- ACCOUNT_BILL_OPTION
		0, -- ROLLUP ID
		0, -- IS EXTERNAL INTERVAL USAGE
		0, -- IS EXTERNAL BILLED USAGE
		NVL(p_IS_AGGREGATE_ACCOUNT,0),
		0, -- IS_UFE_PARTICIPANT,
		0, -- IS_CREATE_SETTLEMENT_PROFILE,
		0, -- IS EXTERNAL FORECAST
        0, -- IS SUB AGGREGATE
		0, -- TX_SERVICE_TYPE_ID,
		0, -- USE_TOU_USAGE_FACTORS
		1 -- MODEL_ID
		);

	REGISTER_STATUS('Account', p_ACCOUNT_STATUS, p_ACCOUNT_IS_ACTIVE);

	v_EDC_NAME := LTRIM(RTRIM(p_EDC_NAME));
	ID.ID_FOR_EDC(v_EDC_NAME, v_EDC_ID);
	RA.PUT_ACCOUNT_EDC
		(
		v_ACCOUNT_ID,
		v_EDC_ID,
		v_BEGIN_DATE,
		NULL,
		LTRIM(RTRIM(p_EDC_ACCOUNT_NUMBER)),
		LTRIM(RTRIM(p_EDC_RATE_CLASS)),
		v_EDC_ID,
		v_OLD_BEGIN_DATE,
		v_STATUS
		);

	v_ESP_NAME := LTRIM(RTRIM(p_ESP_NAME));
	ID.ID_FOR_ESP(v_ESP_NAME, v_ESP_ID);
	RA.PUT_ACCOUNT_ESP
		(
		v_ACCOUNT_ID,
		v_ESP_ID,
		0,
		v_BEGIN_DATE,
		NULL,
		LTRIM(RTRIM(p_ESP_ACCOUNT_NUMBER)),
		v_ESP_ID,
		0,
		v_OLD_BEGIN_DATE,
		v_STATUS
		);

	ID.ID_FOR_SERVICE_LOCATION(p_SERVICE_LOCATION_NAME, v_SERVICE_LOCATION_ID);
	RA.PUT_ACCOUNT_SERVICE_LOCATION
		(
		v_ACCOUNT_ID,
		v_SERVICE_LOCATION_ID,
		v_BEGIN_DATE,
		NULL,
		LTRIM(RTRIM(p_EDC_ACCOUNT_NUMBER)),
		LTRIM(RTRIM(p_ESP_ACCOUNT_NUMBER)),
		v_SERVICE_LOCATION_ID,
		v_OLD_BEGIN_DATE,
		v_STATUS
		);

	ID.ID_FOR_SERVICE_POINT(p_SERVICE_POINT_NAME, v_SERVICE_POINT_ID);
	ID.ID_FOR_WEATHER_STATION(p_WEATHER_STATION_NAME, v_WEATHER_STATION_ID);
	UPDATE SERVICE_LOCATION SET
		SERVICE_POINT_ID = v_SERVICE_POINT_ID,
		WEATHER_STATION_ID = v_WEATHER_STATION_ID,
		TIME_ZONE = INITCAP(LOWER(LTRIM(RTRIM(p_ACCOUNT_TIME_ZONE))))
	WHERE SERVICE_LOCATION_ID = v_SERVICE_LOCATION_ID;

	v_MRSP_NAME := LTRIM(RTRIM(p_MRSP_NAME));
	v_METER_NAME := LTRIM(RTRIM(p_METER_NAME));

-- IF A METER HAS NOT BEEN SPECIFIED THEN DO NOT CREATE METER ASSOCIATIONS

	IF v_METER_NAME IS NOT NULL THEN

		IF v_MRSP_NAME IS NULL THEN
		    v_MRSP_NAME := p_EDC_NAME;
		END IF;

		ID.ID_FOR_MRSP(v_MRSP_NAME, v_MRSP_ID);
		PM.PUT_SERVICE_LOCATION_MRSP
		    (
			v_SERVICE_LOCATION_ID,
			v_MRSP_ID,
			v_BEGIN_DATE,
			NULL,
			LTRIM(RTRIM(p_MRSP_ACCOUNT_NUMBER)),
			LTRIM(RTRIM(p_METER_READ_CYCLE)),
			v_MRSP_ID,
			v_OLD_BEGIN_DATE,
			v_STATUS
			);

	    ID.ID_FOR_METER(v_MRSP_ID, v_METER_NAME, v_METER_ID);

		IF v_METER_ID < 0 THEN
		    ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'INVALID METER ASSIGNMENT FOR ' || p_METER_NAME ||
			    ' (MRSP_ID=' || TO_CHAR(v_MRSP_ID) || ')');
		END IF;

		SELECT DECODE(UPPER(SUBSTR(p_METER_TYPE,1,1)),'I','Hour','H','Hour','Month') INTO v_METER_INTERVAL FROM DUAL;
		SELECT DECODE(UPPER(SUBSTR(p_METER_TYPE,1,1)),'I','Interval','H','Interval','Period') INTO v_METER_TYPE FROM DUAL;

		IO.PUT_METER
			(
			v_METER_ID,
			v_MRSP_ID,
			v_METER_NAME,
			GA.UNDEFINED_ATTRIBUTE, -- METER ALIAS,
			GA.UNDEFINED_ATTRIBUTE, -- METER DESC,
			v_METER_ID,
			p_METER_EXTERNAL_IDENTIFIER,
			p_METER_STATUS,
			v_METER_INTERVAL,
			v_METER_TYPE,
			'KWH', -- METER_UNIT,
			0, -- IS EXTERNAL INTERVAL USAGE,
			0, -- IS EXTERNAL BILLED USAGE,
			0,  -- IS EXTERNAL FORECAST
			0 -- USE_TOU_USAGE_FACTORS
			);

		REGISTER_STATUS('Meter', p_METER_STATUS, p_METER_IS_ACTIVE);


	    PM.PUT_SERVICE_LOCATION_METER
		    (
			v_SERVICE_LOCATION_ID,
			v_METER_ID,
			v_BEGIN_DATE,
			v_END_DATE,
			NVL(p_IS_ESTIMATED_END_DATE,0),
			LTRIM(RTRIM(p_EDC_METER_NUMBER)),
			LTRIM(RTRIM(p_ESP_METER_NUMBER)),
			TO_DATE(p_NEXT_ACTION_DATE, p_DATE_FORMAT),
			p_EDC_RATE_CLASS,
			v_OLD_BEGIN_DATE,
			v_STATUS
			);

	REGISTER_STATUS('Meter', p_METER_STATUS, p_METER_IS_ACTIVE);

	END IF;

END RETAIL_ACCOUNT_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE ACCOUNT_METER_FORECAST_REQUEST
	(
	p_MRSP_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_INTERVAL IN VARCHAR,
	p_FORECAST_VALUES IN VARCHAR
	) AS

v_MRSP_ID NUMBER;
v_METER_ID NUMBER;
v_SCENARIO_ID NUMBER;
v_STRING_TABLE GA.STRING_TABLE;
v_INDEX BINARY_INTEGER;
v_FORECAST_DATE DATE;
v_VALUE NUMBER;
v_INTERVAL NUMBER;
v_STATUS NUMBER;

BEGIN

	v_FORECAST_DATE := TO_CUT(TO_DATE(p_BEGIN_DATE, p_DATE_FORMAT), p_TIME_ZONE);
	v_INTERVAL := TO_NUMBER(LTRIM(RTRIM(p_INTERVAL)));

	ID.ID_FOR_MRSP(p_MRSP_NAME, v_MRSP_ID);
	ID.ID_FOR_METER(v_MRSP_ID, p_METER_NAME, v_METER_ID);

	IF v_METER_ID < 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'INVALID METER ASSIGNMENT FOR ' || p_METER_NAME ||
			' (MRSP_ID=' || TO_CHAR(v_MRSP_ID) || ')');
	END IF;


	Ut.TOKENS_FROM_STRING(p_FORECAST_VALUES,',', v_STRING_TABLE);
	v_INDEX := v_STRING_TABLE.FIRST;

	LOOP
 		v_VALUE := TO_NUMBER(v_STRING_TABLE(v_INDEX));
		IF v_STATUS < GA.SUCCESS THEN
			ROLLBACK;
			RETURN;
		END IF;
		EXIT WHEN v_INDEX = v_STRING_TABLE.LAST;
		v_INDEX := v_STRING_TABLE.NEXT(v_INDEX);
		v_FORECAST_DATE := Add_Seconds_To_Date(v_FORECAST_DATE, v_INTERVAL);
	END LOOP;

	COMMIT;

END ACCOUNT_METER_FORECAST_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_POINT_REQUEST
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_POINT_INDEX IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_POINT_VALUES IN VARCHAR
	) AS

v_PROFILE_ID NUMBER;
v_BEGIN_DATE DATE;
v_STATUS NUMBER;

BEGIN


	v_BEGIN_DATE := TO_DATE(p_BEGIN_DATE, p_DATE_FORMAT);
	ID.ID_FOR_LOAD_PROFILE(p_PROFILE_LIBRARY_NAME, p_PROFILE_NAME, v_PROFILE_ID);

	IF v_PROFILE_ID <= 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'INVALID PROFILE ID FOR ' || p_PROFILE_NAME);
	END IF;

	Pf.PUT_LOAD_PROFILE_POINTS
		(
		v_PROFILE_ID,
		TO_NUMBER(p_POINT_INDEX),
		v_BEGIN_DATE,
		p_AS_OF_DATE,
		p_TIME_ZONE,
		p_POINT_VALUES,
		60,
		v_STATUS
		);

END LOAD_PROFILE_POINT_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_REQUEST
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_PROFILE_TYPE IN VARCHAR,
	p_PROFILE_OPERATION IN VARCHAR,
	p_PROFILE_ORIGIN IN VARCHAR,
	p_PROFILE_RATE_CLASS IN VARCHAR,
	p_PROFILE_DAY_TYPE IN VARCHAR,
	p_PROFILE_ACCOUNT_REF IN VARCHAR,
	p_PROFILE_METER_REF IN VARCHAR,
	p_PROFILE_SIC_CODE IN VARCHAR,
	p_PROFILE_SEASON IN VARCHAR,
	p_PROFILE_SYSTEM_LOAD IN VARCHAR,
	p_PROFILE_ADJUSTMENT_OPTION IN VARCHAR
	) AS

v_PROFILE_ID NUMBER;
v_PROFILE_NAME VARCHAR(64);
v_PROFILE_LIBRARY_ID NUMBER;

BEGIN

	v_PROFILE_NAME := LTRIM(RTRIM(p_PROFILE_NAME));
	ID.ID_FOR_LOAD_PROFILE_LIBRARY(p_PROFILE_LIBRARY_NAME, v_PROFILE_LIBRARY_ID);
	ID.ID_FOR_LOAD_PROFILE(p_PROFILE_LIBRARY_NAME, v_PROFILE_NAME, v_PROFILE_ID);

	IO.PUT_LOAD_PROFILE
		(
		v_PROFILE_ID,
		v_PROFILE_LIBRARY_ID,
		v_PROFILE_NAME,
		GA.UNDEFINED_ATTRIBUTE, -- ALIAS,
		GA.UNDEFINED_ATTRIBUTE, -- DESC,
		v_PROFILE_ID,
		LTRIM(RTRIM(p_PROFILE_TYPE)),
		LTRIM(RTRIM(p_PROFILE_OPERATION)),
		LTRIM(RTRIM(p_PROFILE_ORIGIN)),
		LTRIM(RTRIM(p_PROFILE_RATE_CLASS)),
		LTRIM(RTRIM(p_PROFILE_DAY_TYPE)),
		LTRIM(RTRIM(p_PROFILE_ACCOUNT_REF)),
		LTRIM(RTRIM(p_PROFILE_METER_REF)),
		LTRIM(RTRIM(p_PROFILE_SIC_CODE)),
		LTRIM(RTRIM(p_PROFILE_SEASON)),
		LTRIM(RTRIM(p_PROFILE_SYSTEM_LOAD)),
		LTRIM(RTRIM(p_PROFILE_ADJUSTMENT_OPTION)),
		0,		  -- STATION ID.
		0,		  -- TEMPLATE ID,
		NULL,	  -- SOURCE BEGIN DATE,
		NULL,	  -- SOURCE END DATE,
		0,		  	 -- SOURCE ID,
		60,			-- PROFILE INTERVAL
		LOW_DATE, -- SOURCE VERSION
		'Day', 		-- BREAKPOINT INTERVAL
        0			-- IS_EXTERNAL_PROFILE
        );

END LOAD_PROFILE_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE LOAD_PROFILE_STATS_REQUEST
	(
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_FROM_DATE IN VARCHAR,
	p_TO_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	) AS

v_PROFILE_ID NUMBER;
v_STATUS NUMBER;

BEGIN

	ID.ID_FOR_LOAD_PROFILE(p_PROFILE_LIBRARY_NAME, p_PROFILE_NAME, v_PROFILE_ID);

	PF.PUT_LOAD_PROFILE_STATISTICS(v_PROFILE_ID,0,LOW_DATE,TRUNC(TO_DATE(p_FROM_DATE,p_DATE_FORMAT)),
	    TRUNC(TO_DATE(p_TO_DATE,p_DATE_FORMAT)),0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'Pending',v_STATUS);

END LOAD_PROFILE_STATS_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE WEATHER_PARAMETER_REQUEST
	(
	p_STATION_NAME IN VARCHAR,
	p_PARAMETER_NAME IN VARCHAR,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_INTERVAL IN VARCHAR,
	p_PARAMETER_VALS IN VARCHAR
	) AS

v_STATUS NUMBER;

BEGIN

	WR.STATION_PARAMETER_READINGS
		(
		p_STATION_NAME,
		p_PARAMETER_NAME,
		p_PARAMETER_CODE,
		p_PARAMETER_DATE,
		p_DATE_FORMAT,
		p_TIME_ZONE,
		p_INTERVAL,
		p_PARAMETER_VALS,
		v_STATUS
		);

END WEATHER_PARAMETER_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE CALENDAR_PROFILE_REQUEST
	(
	p_CALENDAR_NAME IN VARCHAR,
	p_PROFILE_LIBRARY_NAME IN VARCHAR,
	p_PROFILE_NAME IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_END_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	) AS

v_CALENDAR_ID NUMBER;
v_PROFILE_LIBRARY_ID NUMBER;
v_PROFILE_ID NUMBER;
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_STATUS NUMBER;

BEGIN

	ID.ID_FOR_CALENDAR(p_CALENDAR_NAME, v_CALENDAR_ID);
	ID.ID_FOR_LOAD_PROFILE_LIBRARY(p_PROFILE_LIBRARY_NAME, v_PROFILE_LIBRARY_ID);
	ID.ID_FOR_LOAD_PROFILE(p_PROFILE_LIBRARY_NAME, p_PROFILE_NAME, v_PROFILE_ID);

	v_BEGIN_DATE := TRUNC(TO_DATE(p_BEGIN_DATE, p_DATE_FORMAT));
	IF LTRIM(RTRIM(p_END_DATE)) IS NULL THEN
		v_END_DATE := NULL;
	ELSE
		v_END_DATE := TRUNC(TO_DATE(p_END_DATE, p_DATE_FORMAT));
	END IF;

	CA.PUT_CALENDAR_PROFILE
		(
		v_CALENDAR_ID,
		v_PROFILE_ID,
		v_BEGIN_DATE,
		v_END_DATE,
		v_PROFILE_ID,
		v_BEGIN_DATE,
		v_STATUS
		);

END CALENDAR_PROFILE_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE ACCOUNT_CALENDAR_REQUEST
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_CALENDAR_NAME IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	) AS

v_ACCOUNT_ID NUMBER;
v_CALENDAR_ID NUMBER;
v_ASSIGNMENT_DATE DATE;
v_STATUS NUMBER;

BEGIN

	ID.ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_ACCOUNT_EXTERNAL_IDENTIFIER, v_ACCOUNT_ID);

	IF v_ACCOUNT_ID = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'ACCOUNT NOT DEFINED FOR ' || p_ACCOUNT_EXTERNAL_IDENTIFIER);
		RETURN;
	END IF;

	ID.ID_FOR_CALENDAR(p_CALENDAR_NAME, v_CALENDAR_ID);

	IF v_CALENDAR_ID = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'CALENDAR NOT DEFINED FOR ' || p_CALENDAR_NAME);
		RETURN;
	END IF;

	v_ASSIGNMENT_DATE := TRUNC(TO_DATE(p_ASSIGNMENT_DATE, p_DATE_FORMAT));

	RA.PUT_ACCOUNT_CALENDAR
		(
		GA.BASE_CASE_ID,
		v_ACCOUNT_ID,
		v_CALENDAR_ID,
		'Forecast',
		v_ASSIGNMENT_DATE,
		NULL,
		GA.BASE_CASE_ID,
		v_CALENDAR_ID,
		'Forecast',
		v_ASSIGNMENT_DATE,
		v_STATUS
		);

END ACCOUNT_CALENDAR_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE METER_CALENDAR_REQUEST
	(
	p_MRSP_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_CALENDAR_NAME IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	) AS

v_MRSP_ID NUMBER;
v_METER_ID NUMBER;
v_CALENDAR_ID NUMBER;
v_ASSIGNMENT_DATE DATE;
v_STATUS NUMBER;

BEGIN

	ID.ID_FOR_MRSP(p_MRSP_NAME, v_MRSP_ID);
	ID.ID_FOR_METER(v_MRSP_ID, p_METER_NAME, v_METER_ID);
	ID.ID_FOR_CALENDAR(p_CALENDAR_NAME, v_CALENDAR_ID);

	v_ASSIGNMENT_DATE := TRUNC(TO_DATE(p_ASSIGNMENT_DATE, p_DATE_FORMAT));

	PM.PUT_METER_CALENDAR
		(
		GA.BASE_CASE_ID,
		v_METER_ID,
		v_CALENDAR_ID,
		'Forecast',
		v_ASSIGNMENT_DATE,
		NULL,
		GA.BASE_CASE_ID,
		v_CALENDAR_ID,
		'Forecast',
		v_ASSIGNMENT_DATE,
		v_STATUS
		);

END METER_CALENDAR_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE ACCOUNT_LOSS_FACTOR_REQUEST
	(
	p_LOSS_FACTOR_NAME IN VARCHAR,
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	) AS

v_LOSS_FACTOR_ID NUMBER;
v_ACCOUNT_ID NUMBER;
v_ASSIGNMENT_DATE DATE;
v_STATUS NUMBER;

BEGIN

	ID.ID_FOR_LOSS_FACTOR(p_LOSS_FACTOR_NAME, v_LOSS_FACTOR_ID);
	IF v_LOSS_FACTOR_ID = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY,'LOSS FACTOR NOT DEFINED FOR ' || p_LOSS_FACTOR_NAME);
		RETURN;
	END IF;

	ID.ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_ACCOUNT_EXTERNAL_IDENTIFIER, v_ACCOUNT_ID);
	IF v_ACCOUNT_ID = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'ACCOUNT NOT DEFINED FOR ' || p_ACCOUNT_EXTERNAL_IDENTIFIER);
		RETURN;
	END IF;

	v_ASSIGNMENT_DATE := TRUNC(TO_DATE(p_ASSIGNMENT_DATE, p_DATE_FORMAT));

 	RA.PUT_ACCOUNT_LOSS_FACTOR
 		(
		GA.BASE_CASE_ID,
 		v_ACCOUNT_ID,
 		v_LOSS_FACTOR_ID,
 		v_ASSIGNMENT_DATE,
 		NULL,
		GA.BASE_CASE_ID,
 		v_LOSS_FACTOR_ID,
 		v_ASSIGNMENT_DATE,
 		v_STATUS
 		);

END ACCOUNT_LOSS_FACTOR_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE METER_LOSS_FACTOR_REQUEST
	(
	p_LOSS_FACTOR_NAME IN VARCHAR,
	p_MRSP_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR
	) AS

v_LOSS_FACTOR_ID NUMBER;
v_MRSP_ID NUMBER;
v_METER_ID NUMBER;
v_ASSIGNMENT_DATE DATE;
v_STATUS NUMBER;

BEGIN

	ID.ID_FOR_LOSS_FACTOR(p_LOSS_FACTOR_NAME, v_LOSS_FACTOR_ID);
	ID.ID_FOR_MRSP(p_MRSP_NAME, v_MRSP_ID);
	ID.ID_FOR_METER(v_MRSP_ID, p_METER_NAME, v_METER_ID);
	v_ASSIGNMENT_DATE := TRUNC(TO_DATE(p_ASSIGNMENT_DATE, p_DATE_FORMAT));

 	PM.PUT_METER_LOSS_FACTOR
 		(
		GA.BASE_CASE_ID,
 		v_METER_ID,
 		v_LOSS_FACTOR_ID,
 		v_ASSIGNMENT_DATE,
 		NULL,
		GA.BASE_CASE_ID,
 		v_LOSS_FACTOR_ID,
 		v_ASSIGNMENT_DATE,
 		v_STATUS
 		);

END METER_LOSS_FACTOR_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE ACCOUNT_USAGE_FACTOR_REQUEST
	(
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_FACTOR_VAL IN VARCHAR
	) AS

v_ACCOUNT_ID NUMBER;
v_ASSIGNMENT_DATE DATE;
v_STATUS NUMBER;

BEGIN

	ID.ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_ACCOUNT_EXTERNAL_IDENTIFIER, v_ACCOUNT_ID);
	IF v_ACCOUNT_ID = 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'ACCOUNT NOT DEFINED FOR ' || p_ACCOUNT_EXTERNAL_IDENTIFIER);
		RETURN;
	END IF;

	v_ASSIGNMENT_DATE := TRUNC(TO_DATE(p_ASSIGNMENT_DATE, p_DATE_FORMAT));

	RA.PUT_ACCOUNT_USAGE_FACTOR
		(
		GA.BASE_CASE_ID,
		v_ACCOUNT_ID,
		v_ASSIGNMENT_DATE,
		NULL,
		TO_NUMBER(p_FACTOR_VAL),
		GA.BASE_CASE_ID,
		v_ASSIGNMENT_DATE,
		v_STATUS
		);

END ACCOUNT_USAGE_FACTOR_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE METER_USAGE_FACTOR_REQUEST
	(
	p_MRSP_NAME IN VARCHAR,
	p_METER_NAME IN VARCHAR,
	p_ASSIGNMENT_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_FACTOR_VAL IN VARCHAR
	) AS

v_MRSP_ID NUMBER;
v_METER_ID NUMBER;
v_ASSIGNMENT_DATE DATE;
v_STATUS NUMBER;

BEGIN

	ID.ID_FOR_MRSP(p_MRSP_NAME, v_MRSP_ID);
	ID.ID_FOR_METER(v_MRSP_ID, p_METER_NAME, v_METER_ID);
	v_ASSIGNMENT_DATE := TRUNC(TO_DATE(p_ASSIGNMENT_DATE, p_DATE_FORMAT));

	PM.PUT_METER_USAGE_FACTOR
		(
		GA.BASE_CASE_ID,
		v_METER_ID,
		v_ASSIGNMENT_DATE,
		NULL,
		TO_NUMBER(p_FACTOR_VAL),
		GA.BASE_CASE_ID,
		v_ASSIGNMENT_DATE,
		v_STATUS
		);

END METER_USAGE_FACTOR_REQUEST;
----------------------------------------------------------------------------------------------------
PROCEDURE ENTITY_ATTRIBUTE_REQUEST
	(
	p_ATTRIBUTE_NAME IN VARCHAR,
	p_ENTITY_DOMAIN_ALIAS IN VARCHAR,
	p_ATTRIBUTE_TYPE IN VARCHAR,
	p_OWNER_ENTITY_NAME IN VARCHAR,
	p_BEGIN_DATE IN VARCHAR,
	p_END_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_ATTRIBUTE_VAL IN VARCHAR
	) AS

v_ENTITY_DOMAIN_ID NUMBER;
v_ATTRIBUTE_ID NUMBER;
v_OWNER_ENTITY_ID NUMBER;
v_ATTRIBUTE_NAME VARCHAR(64);
v_ATTRIBUTE_TYPE VARCHAR(16);
v_ENTITY_DOMAIN_ALIAS VARCHAR(16);
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_STATUS NUMBER;

BEGIN

	v_ENTITY_DOMAIN_ALIAS := UPPER(LTRIM(RTRIM(p_ENTITY_DOMAIN_ALIAS)));
	v_ATTRIBUTE_NAME := UPPER(LTRIM(RTRIM(p_ATTRIBUTE_NAME)));
	v_ATTRIBUTE_TYPE := INITCAP(LOWER(LTRIM(RTRIM(p_ATTRIBUTE_TYPE))));
	ID.ID_FOR_ENTITY_DOMAIN_ALIAS(v_ENTITY_DOMAIN_ALIAS, v_ENTITY_DOMAIN_ID);
	ID.ID_FOR_ENTITY_ATTRIBUTE(v_ATTRIBUTE_NAME, v_ENTITY_DOMAIN_ALIAS, v_ATTRIBUTE_TYPE, v_ATTRIBUTE_ID);

	IF v_ATTRIBUTE_ID <= 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'INVALID ENTITY ATTRIBUTE ID FOR ' || v_ATTRIBUTE_NAME);
	END IF;

	v_OWNER_ENTITY_ID := 0;

	IF 	v_ENTITY_DOMAIN_ALIAS = 'ACCOUNT' THEN
		ID.ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_OWNER_ENTITY_NAME, v_OWNER_ENTITY_ID);
	END IF;

	IF v_ENTITY_DOMAIN_ALIAS = 'SERVICE_LOCATION' THEN
		ID.ID_FOR_SERVICE_LOCATION(p_OWNER_ENTITY_NAME, v_OWNER_ENTITY_ID);
	END IF;

	IF v_OWNER_ENTITY_ID <= 0 THEN
		ERRS.RAISE(MSGCODES.c_ERR_NO_SUCH_ENTRY, 'INVALID OWNER ENTITY ID FOR ' || p_OWNER_ENTITY_NAME || ' IN ' || v_ENTITY_DOMAIN_ALIAS);
	END IF;

	v_BEGIN_DATE := TRUNC(TO_DATE(p_BEGIN_DATE, p_DATE_FORMAT));
	IF UPPER(p_END_DATE) = 'NULL' THEN
		v_END_DATE := NULL;
	ELSE
		v_END_DATE := TRUNC(TO_DATE(p_END_DATE, p_DATE_FORMAT));
	END IF;

	SP.PUT_TEMPORAL_ENTITY_ATTRIBUTE
		(
		v_OWNER_ENTITY_ID,
		v_ATTRIBUTE_ID,
		v_BEGIN_DATE,
		v_END_DATE,
		v_OWNER_ENTITY_ID,
		p_ATTRIBUTE_VAL,
		v_ATTRIBUTE_ID,
		v_BEGIN_DATE,
		v_STATUS
		);

	ERRS.VALIDATE_STATUS('PUT_TEMPORAL_ENTITY_ATTRIBUTE', v_STATUS);

END ENTITY_ATTRIBUTE_REQUEST;
----------------------------------------------------------------------------------------------------
END TM;
/
