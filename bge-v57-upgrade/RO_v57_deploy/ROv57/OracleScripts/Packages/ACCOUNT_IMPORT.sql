CREATE OR REPLACE PACKAGE ACCOUNT_IMPORT IS

-- $Revision: 1.16 $
FUNCTION WHAT_VERSION RETURN VARCHAR;

PROCEDURE IMPORT_ACCOUNT_LINE
	(
	p_HEADERS IN VARCHAR,
	p_RECORDS IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_TIME_FORMAT IN VARCHAR,
	p_DELIMITER IN CHAR,
	p_SUCCESS IN OUT BOOLEAN
	);


-- PRIVATE METHODS EXPOSED FOR UNIT TESTING
$if $$UNIT_TEST_MODE = 1 $THEN
    PROCEDURE IMPORT_METER
	(
	p_METER IN METER%ROWTYPE,
	p_SERVICE_LOCATION_METER IN SERVICE_LOCATION_METER%ROWTYPE,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID OUT NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	);
$end

END ACCOUNT_IMPORT;
/
CREATE OR REPLACE PACKAGE BODY ACCOUNT_IMPORT IS
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.16 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_ACCOUNT_NO_OVERWRITE
	(
	o_OID OUT NUMBER,
	p_ACCOUNT_NAME IN VARCHAR2,
	p_ACCOUNT_ALIAS IN VARCHAR2,
	p_ACCOUNT_DESC IN VARCHAR2,
	p_ACCOUNT_ID IN NUMBER,
	p_ACCOUNT_DUNS_NUMBER IN VARCHAR2,
	p_ACCOUNT_EXTERNAL_IDENTIFIER IN VARCHAR2,
	p_ACCOUNT_MODEL_OPTION IN VARCHAR2,
	p_ACCOUNT_SIC_CODE IN VARCHAR2,
	p_ACCOUNT_METER_TYPE IN VARCHAR2,
	p_ACCOUNT_METER_EXT_IDENTIFIER IN VARCHAR2,
	p_ACCOUNT_DISPLAY_NAME IN VARCHAR2,
	p_ACCOUNT_BILL_OPTION IN VARCHAR2,
	p_ACCOUNT_ROLLUP_ID IN NUMBER,
	p_IS_EXTERNAL_INTERVAL_USAGE IN NUMBER,
	p_IS_EXTERNAL_BILLED_USAGE IN NUMBER,
	p_IS_AGGREGATE_ACCOUNT IN NUMBER,
	p_IS_UFE_PARTICIPANT IN NUMBER,
	p_IS_CREATE_SETTLEMENT_PROFILE IN NUMBER,
	p_IS_EXTERNAL_FORECAST IN NUMBER,
    p_IS_SUB_AGGREGATE IN NUMBER,
	p_TX_SERVICE_TYPE_ID IN NUMBER,
	p_MODEL_ID IN NUMBER
	)
	AS

-- If you pass in an ACCOUNT_ID, this routine will not perform the check
-- to make sure you don't have a name collision.
-- Also, this routine will not overwrite existing attributes with nulls.

BEGIN

--MAKE SURE USER HAS APPROPRIATE ACCESS

	IF NOT CAN_WRITE('Data Setup') THEN
		ERRS.RAISE_NO_WRITE_MODULE('Data Setup');
	END IF;

-- UPDATE AN EXISTING RECORD THAT HAS AN ASSIGNED OID

	IF p_ACCOUNT_ID > 0 THEN
		UPDATE ACCOUNT SET
			ACCOUNT_NAME = LTRIM(RTRIM(NVL(p_ACCOUNT_NAME,ACCOUNT_NAME))),
			ACCOUNT_ALIAS = LTRIM(RTRIM(NVL(p_ACCOUNT_ALIAS,NVL(ACCOUNT_ALIAS,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_DESC = LTRIM(RTRIM(NVL(p_ACCOUNT_DESC,NVL(ACCOUNT_DESC,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_DUNS_NUMBER = LTRIM(RTRIM(NVL(p_ACCOUNT_DUNS_NUMBER,NVL(ACCOUNT_DUNS_NUMBER,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_EXTERNAL_IDENTIFIER = LTRIM(RTRIM(NVL(p_ACCOUNT_EXTERNAL_IDENTIFIER,NVL(ACCOUNT_EXTERNAL_IDENTIFIER,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_MODEL_OPTION = LTRIM(RTRIM(NVL(p_ACCOUNT_MODEL_OPTION,NVL(ACCOUNT_MODEL_OPTION,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_SIC_CODE = LTRIM(RTRIM(NVL(p_ACCOUNT_SIC_CODE,NVL(ACCOUNT_SIC_CODE,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_METER_TYPE = LTRIM(RTRIM(NVL(p_ACCOUNT_METER_TYPE,NVL(ACCOUNT_METER_TYPE,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_METER_EXT_IDENTIFIER = LTRIM(RTRIM(NVL(p_ACCOUNT_METER_EXT_IDENTIFIER,NVL(ACCOUNT_METER_EXT_IDENTIFIER,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_DISPLAY_NAME = LTRIM(RTRIM(NVL(p_ACCOUNT_DISPLAY_NAME,NVL(ACCOUNT_DISPLAY_NAME,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_BILL_OPTION = LTRIM(RTRIM(NVL(p_ACCOUNT_BILL_OPTION,NVL(ACCOUNT_BILL_OPTION,GA.UNDEFINED_ATTRIBUTE)))),
			ACCOUNT_ROLLUP_ID = NVL(p_ACCOUNT_ROLLUP_ID,NVL(ACCOUNT_ROLLUP_ID,0)),
			IS_EXTERNAL_INTERVAL_USAGE = NVL(p_IS_EXTERNAL_INTERVAL_USAGE,NVL(IS_EXTERNAL_INTERVAL_USAGE,0)),
			IS_EXTERNAL_BILLED_USAGE = NVL(p_IS_EXTERNAL_BILLED_USAGE,NVL(IS_EXTERNAL_BILLED_USAGE,0)),
			IS_AGGREGATE_ACCOUNT = NVL(p_IS_AGGREGATE_ACCOUNT,NVL(IS_AGGREGATE_ACCOUNT,0)),
			IS_UFE_PARTICIPANT = NVL(p_IS_UFE_PARTICIPANT,NVL(IS_UFE_PARTICIPANT,0)),
			IS_CREATE_SETTLEMENT_PROFILE = NVL(p_IS_CREATE_SETTLEMENT_PROFILE,NVL(IS_CREATE_SETTLEMENT_PROFILE,0)),
			IS_EXTERNAL_FORECAST = NVL(p_IS_EXTERNAL_FORECAST,NVL(IS_EXTERNAL_FORECAST,0)),
			TX_SERVICE_TYPE_ID = NVL(p_TX_SERVICE_TYPE_ID,NVL(TX_SERVICE_TYPE_ID,0)),
			MODEL_ID = NVL(p_MODEL_ID,NVL(MODEL_ID,1)),
			ENTRY_DATE = SYSDATE
		WHERE ACCOUNT_ID = p_ACCOUNT_ID;
		o_OID := p_ACCOUNT_ID;
	END IF;

-- INSERT A NEW RECORD AND ASSIGN IT A UNIQUE OID.

	IF p_ACCOUNT_ID = 0 THEN
		IO.PUT_ACCOUNT(o_OID,
			p_ACCOUNT_NAME,
			p_ACCOUNT_ALIAS,
			p_ACCOUNT_DESC,
			p_ACCOUNT_ID,
			p_ACCOUNT_DUNS_NUMBER,
			p_ACCOUNT_EXTERNAL_IDENTIFIER,
			p_ACCOUNT_MODEL_OPTION,
			p_ACCOUNT_SIC_CODE,
			p_ACCOUNT_METER_TYPE,
			p_ACCOUNT_METER_EXT_IDENTIFIER,
			p_ACCOUNT_DISPLAY_NAME,
			p_ACCOUNT_BILL_OPTION,
			p_ACCOUNT_ROLLUP_ID,
			p_IS_EXTERNAL_INTERVAL_USAGE,
			p_IS_EXTERNAL_BILLED_USAGE,
			p_IS_AGGREGATE_ACCOUNT,
			p_IS_UFE_PARTICIPANT,
			p_IS_CREATE_SETTLEMENT_PROFILE,
			p_IS_EXTERNAL_FORECAST,
            p_IS_SUB_AGGREGATE,
			p_TX_SERVICE_TYPE_ID,
			0, -- USE TOU USAGE FACTOR, SINCE WE DON'T SUPPORT IMPORTING TOU USAGE FACTORS (FOR NOW)
				-- JUST FLAG THIS FALSE BY DEFAULT
			p_MODEL_ID);
	END IF;

END PUT_ACCOUNT_NO_OVERWRITE;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT
	(
	p_ACCOUNT IN OUT ACCOUNT%ROWTYPE,
	p_ACCOUNT_STATUS IN ACCOUNT_STATUS%ROWTYPE,
	p_ACCOUNT_STATUS_NAME IN ACCOUNT_STATUS_NAME%ROWTYPE,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_IS_AGGREGATE NUMBER(1);
v_USE_EXTERNAL_IDENT VARCHAR(8);

v_STATUS NUMBER(9);

v_TEST NUMBER(9);

BEGIN
	--Find an account by external identifier if the flag says to.
	v_USE_EXTERNAL_IDENT := MODEL_VALUE_AT_KEY(GA.DEFAULT_MODEL, 'Account Import', 'Account', 'Use External Identifier', 0);
	IF UPPER(SUBSTR(v_USE_EXTERNAL_IDENT,1,1)) IN ('1','T','Y') AND NOT p_ACCOUNT.ACCOUNT_EXTERNAL_IDENTIFIER IS NULL THEN
		ID.ID_FOR_ACCOUNT_EXTERNAL_IDENT(p_ACCOUNT.ACCOUNT_EXTERNAL_IDENTIFIER, FALSE, p_ACCOUNT.ACCOUNT_ID);
	--Otherwise, find by account name.
	ELSE
		ID.ID_FOR_ACCOUNT(p_ACCOUNT.ACCOUNT_NAME, FALSE, p_ACCOUNT.ACCOUNT_ID);
	END IF;

	--Make sure we don't wind up with a null name for a new account.
	IF p_ACCOUNT.ACCOUNT_ID < 0 THEN
		p_ACCOUNT.ACCOUNT_ID := 0;
		IF p_ACCOUNT.ACCOUNT_NAME IS NULL AND p_ACCOUNT.ACCOUNT_EXTERNAL_IDENTIFIER IS NULL THEN
			DATA_IMPORT.LOG_IMPORT_ERROR(' An account name is required to import an account; none was given.',
							p_SUCCESS);
		ELSIF p_ACCOUNT.ACCOUNT_NAME IS NULL THEN
			p_ACCOUNT.ACCOUNT_NAME := p_ACCOUNT.ACCOUNT_EXTERNAL_IDENTIFIER;
		END IF;
	END IF;

	IF p_ACCOUNT_STATUS_NAME.STATUS_NAME IS NULL THEN
		DATA_IMPORT.LOG_IMPORT_ERROR( 'No Account Status is given for the Account.',
			p_SUCCESS);
	END IF;

	IF p_SUCCESS THEN
		IF p_ACCOUNT_STATUS_NAME.IS_ACTIVE IS NULL THEN

			SELECT COUNT(1) INTO v_TEST
			FROM ACCOUNT_STATUS_NAME ASN
			WHERE ASN.STATUS_NAME = p_ACCOUNT_STATUS_NAME.STATUS_NAME;

			IF v_TEST <= 0 THEN
				DATA_IMPORT.LOG_IMPORT_ERROR( 'Account Status Name '
					|| p_ACCOUNT_STATUS_NAME.STATUS_NAME || ' is not recognized and '
					|| 'it is not specified whether the Account Status is active.',
					p_SUCCESS);
			END IF;

	 	ELSE

			SELECT COUNT(1) INTO v_TEST
			FROM ACCOUNT_STATUS_NAME ASN
			WHERE ASN.STATUS_NAME = p_ACCOUNT_STATUS_NAME.STATUS_NAME;

			-- DOES THE STATUS NAME ALREADY EXIST
			IF v_TEST > 0 THEN

				SELECT ASN.IS_ACTIVE INTO v_TEST
				FROM ACCOUNT_STATUS_NAME ASN
				WHERE ASN.STATUS_NAME = p_ACCOUNT_STATUS_NAME.STATUS_NAME;

				-- DOES IS_ACTIVE DIFFER FROM THAT SPECIFIED FOR THE GIVEN STATUS_NAME
				IF v_TEST <> p_ACCOUNT_STATUS_NAME.IS_ACTIVE THEN
					DATA_IMPORT.LOG_IMPORT_WARN( 'The Account Status Name: '
						|| p_ACCOUNT_STATUS_NAME.STATUS_NAME || ' has a specified value for Is Active('
						|| p_ACCOUNT_STATUS_NAME.IS_ACTIVE || '), which differs from the existing value.');

				END IF;

			ELSE

				-- CREATE A NEW STATUS NAME
				INSERT INTO ACCOUNT_STATUS_NAME (STATUS_NAME, IS_ACTIVE)
				VALUES (p_ACCOUNT_STATUS_NAME.STATUS_NAME,
						p_ACCOUNT_STATUS_NAME.IS_ACTIVE);

			END IF;

	  	END IF;
	END IF;

	--If Model Option is not specified, get it from the table if we can.
	IF p_ACCOUNT.ACCOUNT_MODEL_OPTION IS NULL AND p_ACCOUNT.ACCOUNT_ID > 0 THEN
		SELECT ACCOUNT_MODEL_OPTION
		INTO p_ACCOUNT.ACCOUNT_MODEL_OPTION
		FROM ACCOUNT
		WHERE ACCOUNT_ID = p_ACCOUNT.ACCOUNT_ID;
	END IF;

	--A valid Model Option is required.
	IF (NOT UPPER(p_ACCOUNT.ACCOUNT_MODEL_OPTION) IN ('ACCOUNT','METER','AGGREGATE')) OR
	    (UPPER(p_ACCOUNT.ACCOUNT_MODEL_OPTION) IS NULL) THEN
		DATA_IMPORT.LOG_IMPORT_ERROR(' A valid Account Model Option is required for ' || p_ACCOUNT.ACCOUNT_NAME,
			p_SUCCESS);
	END IF;

    IF (UPPER(p_ACCOUNT.ACCOUNT_MODEL_OPTION) = 'AGGREGATE' AND NVL(p_ACCOUNT.IS_SUB_AGGREGATE, 0) = 1) THEN
        DATA_IMPORT.LOG_IMPORT_ERROR(' An Account cannot have an Aggregate Model Option and be specified '
            || 'as Sub Aggregate. (Account: ' || p_ACCOUNT.ACCOUNT_NAME || ')',
            p_SUCCESS);
    END IF;


	SELECT DECODE(UPPER(p_ACCOUNT.ACCOUNT_MODEL_OPTION), 'AGGREGATE',1,0)
	INTO v_IS_AGGREGATE FROM DUAL;

	IF p_SUCCESS THEN
	  PUT_ACCOUNT_NO_OVERWRITE( p_ACCOUNT.ACCOUNT_ID,
		  p_ACCOUNT.ACCOUNT_NAME,
		  p_ACCOUNT.ACCOUNT_ALIAS,
		  p_ACCOUNT.ACCOUNT_DESC,
		  p_ACCOUNT.ACCOUNT_ID,
		  p_ACCOUNT.ACCOUNT_DUNS_NUMBER,
		  p_ACCOUNT.ACCOUNT_EXTERNAL_IDENTIFIER,
		  p_ACCOUNT.ACCOUNT_MODEL_OPTION,
		  p_ACCOUNT.ACCOUNT_SIC_CODE,
		  p_ACCOUNT.ACCOUNT_METER_TYPE,
		  p_ACCOUNT.ACCOUNT_METER_EXT_IDENTIFIER,
		  p_ACCOUNT.ACCOUNT_DISPLAY_NAME,
		  p_ACCOUNT.ACCOUNT_BILL_OPTION,
		  NVL(p_ACCOUNT.ACCOUNT_ROLLUP_ID, 0),
		  NVL(p_ACCOUNT.IS_EXTERNAL_INTERVAL_USAGE, 0),
		  NVL(p_ACCOUNT.IS_EXTERNAL_BILLED_USAGE, 0),
		  NVL(v_IS_AGGREGATE, 0),
		  NVL(p_ACCOUNT.IS_UFE_PARTICIPANT, 0),
		  NVL(p_ACCOUNT.IS_CREATE_SETTLEMENT_PROFILE, 0),
		  NVL(p_ACCOUNT.IS_EXTERNAL_FORECAST, 0),
          NVL(p_ACCOUNT.IS_SUB_AGGREGATE, 0),
		  NVL(p_ACCOUNT.TX_SERVICE_TYPE_ID, 0),
		  -- 9/23/09 - BZ 21537 - DDZ - model_id now set to proper default
		  NVL(p_ACCOUNT.MODEL_ID, GA.DEFAULT_MODEL)
		  );

		IF p_ACCOUNT.ACCOUNT_ID = GA.DUPLICATE_ENTITY THEN
			DATA_IMPORT.LOG_IMPORT_ERROR(' Account Name ' || p_ACCOUNT.ACCOUNT_NAME || ' already in use.',
				p_SUCCESS);
		END IF;

	END IF;

	IF p_SUCCESS THEN
	    IF GA.CSB_IS_SUBDAILY THEN
		    ACCOUNTS_METERS.PUT_ACCOUNT_STATUS_SUBDAILY(p_ACCOUNT.ACCOUNT_ID,
                                                        NVL(p_ACCOUNT_STATUS.BEGIN_DATE, LOW_DATE),
                                                        p_ACCOUNT_STATUS.END_DATE,
                                                        p_ACCOUNT_STATUS.STATUS_NAME,
                                                        NVL(p_ACCOUNT_STATUS.BEGIN_DATE, LOW_DATE),
                                                        GA.LOCAL_TIME_ZONE);
		ELSE
			ACCOUNTS_METERS.PUT_ACCOUNT_STATUS(p_ACCOUNT.ACCOUNT_ID,
				                               NVL(p_ACCOUNT_STATUS.BEGIN_DATE, LOW_DATE),
				                               p_ACCOUNT_STATUS.END_DATE,
				                               p_ACCOUNT_STATUS.STATUS_NAME,
				                               NVL(p_ACCOUNT_STATUS.BEGIN_DATE, LOW_DATE));
		END IF;

		ERRS.VALIDATE_STATUS('PUT_ACCOUNT_STATUS', v_STATUS);
	END IF;

END IMPORT_ACCOUNT;
----------------------------------------------------------------------------------------------------
FUNCTION IMPORT_ID_FOR_SERVICE_LOCATION
	(
	p_SERVICE_LOCATION_NAME IN VARCHAR,
	p_ACCOUNT_ID IN NUMBER
	) RETURN NUMBER AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SERVICE LOCATION NAME

v_SERVICE_LOCATION_NAME SERVICE_LOCATION.SERVICE_LOCATION_NAME%TYPE;
v_SERVICE_LOCATION_ID NUMBER(9);
BEGIN

	v_SERVICE_LOCATION_NAME := LTRIM(RTRIM(p_SERVICE_LOCATION_NAME));

	IF LENGTH(v_SERVICE_LOCATION_NAME) = 0 THEN
		RETURN 0;
	END IF;

	BEGIN
		SELECT SERVICE_LOCATION_ID
		INTO v_SERVICE_LOCATION_ID
		FROM SERVICE_LOCATION
		WHERE SERVICE_LOCATION_NAME = v_SERVICE_LOCATION_NAME
			AND NOT SERVICE_LOCATION_ID IN (
				 	  SELECT SERVICE_LOCATION_ID
					  FROM ACCOUNT_SERVICE_LOCATION
					  WHERE ACCOUNT_ID <> p_ACCOUNT_ID )
			AND ROWNUM = 1;

		RETURN v_SERVICE_LOCATION_ID;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		    RETURN GA.NO_DATA_FOUND;
		WHEN OTHERS THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN 0;
	END;

END IMPORT_ID_FOR_SERVICE_LOCATION;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_SERVICE_LOCATION
	(
	p_SERVICE_LOCATION IN SERVICE_LOCATION%ROWTYPE,
	p_ACCOUNT_SERVICE_LOCATION IN ACCOUNT_SERVICE_LOCATION%ROWTYPE,
	p_SERVICE_LOCATION_MRSP IN SERVICE_LOCATION_MRSP%ROWTYPE,
	p_MRSP_NAME IN VARCHAR,
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_LOCATION_ID OUT NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_MRSP_ID NUMBER(9);
v_REPLACE_DATES NUMBER(1);
v_COUNT NUMBER;
v_STATUS NUMBER(9);
BEGIN


	IF NOT p_SERVICE_LOCATION.SERVICE_LOCATION_NAME IS NULL THEN
		p_SERVICE_LOCATION_ID := IMPORT_ID_FOR_SERVICE_LOCATION(p_SERVICE_LOCATION.SERVICE_LOCATION_NAME, p_ACCOUNT_ID);

		IF NOT UPPER(p_SERVICE_LOCATION.TIME_ZONE) IN ('ATLANTIC', 'EASTERN', 'CENTRAL', 'INDIANA', 'MOUNTAIN', 'ARIZONA', 'PACIFIC') THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('Invalid Time Zone for Service Location '
						|| p_SERVICE_LOCATION.SERVICE_LOCATION_NAME,
						p_SUCCESS);
		END IF;

		IF p_SERVICE_LOCATION_ID < 0 THEN p_SERVICE_LOCATION_ID := 0; END IF;

		--DO A CHECK TO SEE IF WE NEED TO CREATE A NEW SERVICE LOCATION.
		IF p_SERVICE_LOCATION_ID > 0 AND NOT GA.ENFORCE_UNIQUE_NAMES THEN

			SELECT COUNT(*)
			INTO v_COUNT
			FROM ACCOUNT_SERVICE_LOCATION
			WHERE SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID
				AND ACCOUNT_ID <> p_ACCOUNT_ID;

			IF v_COUNT > 0 THEN
				p_SERVICE_LOCATION_ID := 0;
			END IF;
		END IF;

		IF p_SERVICE_LOCATION.SQUARE_FOOTAGE < 0 THEN
			DATA_IMPORT.LOG_IMPORT_ERROR(p_SERVICE_LOCATION.SQUARE_FOOTAGE || ' was given as '
				|| 'square footage for Serivce Location ' || p_SERVICE_LOCATION.SERVICE_LOCATION_NAME ||
				'.  Square footage must be a non-negative number.', p_SUCCESS);
		END IF;

		IF p_SERVICE_LOCATION.ANNUAL_CONSUMPTION < 0 THEN
			DATA_IMPORT.LOG_IMPORT_ERROR(p_SERVICE_LOCATION.ANNUAL_CONSUMPTION || ' was given as '
				|| 'annual consumption for Serivce Location ' || p_SERVICE_LOCATION.SERVICE_LOCATION_NAME ||
				'.  Annual consumption must be a non-negative number.', p_SUCCESS);
		END IF;

		IF p_SERVICE_LOCATION.SUMMER_CONSUMPTION < 0 THEN
			DATA_IMPORT.LOG_IMPORT_ERROR(p_SERVICE_LOCATION.ANNUAL_CONSUMPTION || ' was given as '
				|| 'summer consumption for Serivce Location ' || p_SERVICE_LOCATION.SERVICE_LOCATION_NAME ||
				'.  Summer consumption must be a non-negative number.', p_SUCCESS);
		END IF;

		IF p_SUCCESS THEN

		  IO.PUT_SERVICE_LOCATION( p_SERVICE_LOCATION_ID,
			  NVL(p_SERVICE_LOCATION.SERVICE_LOCATION_NAME, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_LOCATION.SERVICE_LOCATION_ALIAS, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_LOCATION.SERVICE_LOCATION_DESC, GA.UNDEFINED_ATTRIBUTE),
			  p_SERVICE_LOCATION_ID,
			  NVL(p_SERVICE_LOCATION.LATITUDE, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_LOCATION.LONGITUDE, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_LOCATION.TIME_ZONE, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_LOCATION.EXTERNAL_IDENTIFIER, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_LOCATION.IS_EXTERNAL_BILLED_USAGE, 0),
			  NVL(p_SERVICE_LOCATION.IS_METER_ALLOCATION, 0),
			  NVL(p_SERVICE_LOCATION.SERVICE_POINT_ID, 0),
			  NVL(p_SERVICE_LOCATION.WEATHER_STATION_ID, 0),
			  NVL(p_SERVICE_LOCATION.BUSINESS_ROLLUP_ID, 0),
			  NVL(p_SERVICE_LOCATION.GEOGRAPHIC_ROLLUP_ID, 0),
			  NVL(p_SERVICE_LOCATION.SQUARE_FOOTAGE, 0),
			  NVL(p_SERVICE_LOCATION.ANNUAL_CONSUMPTION, 0),
			  NVL(p_SERVICE_LOCATION.SUMMER_CONSUMPTION, 0),
			  NVL(p_SERVICE_LOCATION.SERVICE_ZONE_ID, 0),
			  NVL(p_SERVICE_LOCATION.SUB_STATION_ID, 0),
			  NVL(p_SERVICE_LOCATION.FEEDER_ID, 0),
			  NVL(p_SERVICE_LOCATION.FEEDER_SEGMENT_ID, 0));

		END IF;

		SELECT DECODE(VALUE_AT_KEY_3('Account Import', 'Replace Dates', 'Service Location and Meter'),1,1,0)
		INTO v_REPLACE_DATES FROM DUAL;

		IF v_REPLACE_DATES = 1 AND p_SUCCESS THEN
			DELETE FROM ACCOUNT_SERVICE_LOCATION
			WHERE ACCOUNT_ID = p_ACCOUNT_ID
			AND SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID;
		END IF;

		IF p_SERVICE_LOCATION_ID > 0 THEN
			IF p_SUCCESS THEN
			  	RA.PUT_ACCOUNT_SERVICE_LOCATION( p_ACCOUNT_ID,
				  p_SERVICE_LOCATION_ID,
				  NVL(p_ACCOUNT_SERVICE_LOCATION.BEGIN_DATE, LOW_DATE),
				  p_ACCOUNT_SERVICE_LOCATION.END_DATE,
				  NVL(p_ACCOUNT_SERVICE_LOCATION.EDC_IDENTIFIER, GA.UNDEFINED_ATTRIBUTE),
				  NVL(p_ACCOUNT_SERVICE_LOCATION.ESP_IDENTIFIER, GA.UNDEFINED_ATTRIBUTE),
				  p_SERVICE_LOCATION_ID,
				  NVL(p_ACCOUNT_SERVICE_LOCATION.BEGIN_DATE, LOW_DATE),
				  v_STATUS
				  );

			 	ERRS.VALIDATE_STATUS('RA.PUT_ACCOUNT_SERVICE_LOCATION',
										v_STATUS);
			END IF;
		ELSE
			DATA_IMPORT.LOG_IMPORT_WARN('Duplicate Service Location Found: '
				|| p_SERVICE_LOCATION.SERVICE_LOCATION_NAME);
		END IF;

		IF NOT p_MRSP_NAME IS NULL THEN
			ID.ID_FOR_MRSP(p_MRSP_NAME, TRUE, v_MRSP_ID);

			IF v_MRSP_ID < 0 THEN
				DATA_IMPORT.LOG_IMPORT_WARN(' MRSP not found: ' || p_MRSP_NAME);
			ELSE
				IF p_SUCCESS THEN
				  	PM.PUT_SERVICE_LOCATION_MRSP( p_SERVICE_LOCATION_ID,
					  v_MRSP_ID,
					  TRUNC(NVL(p_SERVICE_LOCATION_MRSP.BEGIN_DATE, SYSDATE)),
					  TRUNC(p_SERVICE_LOCATION_MRSP.END_DATE),
					  NVL(p_SERVICE_LOCATION_MRSP.MRSP_ACCOUNT_NUMBER, GA.UNDEFINED_ATTRIBUTE),
					  NVL(p_SERVICE_LOCATION_MRSP.METER_READ_CYCLE, GA.UNDEFINED_ATTRIBUTE),
					  v_MRSP_ID,
					  TRUNC(NVL(p_SERVICE_LOCATION_MRSP.BEGIN_DATE, SYSDATE)),
					  v_STATUS);

					ERRS.VALIDATE_STATUS('PM.PUT_SERVICE_LOCATION_MRSP',
										v_STATUS);
				END IF;
			END IF;
		END IF;
	END IF;


END IMPORT_SERVICE_LOCATION;
----------------------------------------------------------------------------------------------------
FUNCTION IMPORT_ID_FOR_METER
	(
	p_METER_NAME IN VARCHAR,
	p_SERVICE_LOCATION_ID IN NUMBER
	) RETURN NUMBER AS

-- ANSWER THE INTERNAL ID ASSOCIATED WITH THE SPECIFIED SERVICE LOCATION NAME

v_METER_NAME METER.METER_NAME%TYPE;
v_METER_ID NUMBER(9);
BEGIN

	v_METER_NAME := LTRIM(RTRIM(p_METER_NAME));

	IF LENGTH(v_METER_NAME) = 0 THEN
		RETURN 0;
	END IF;

	BEGIN
		SELECT METER_ID
		INTO v_METER_ID
		FROM METER
		WHERE METER_NAME = v_METER_NAME
			AND NOT METER_ID IN (
				 	  SELECT METER_ID
					  FROM SERVICE_LOCATION_METER
					  WHERE SERVICE_LOCATION_ID <> p_SERVICE_LOCATION_ID )
			AND ROWNUM = 1;

		RETURN v_METER_ID;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN GA.NO_DATA_FOUND;
		WHEN OTHERS THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN 0;
	END;

END IMPORT_ID_FOR_METER;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_METER
	(
	p_METER IN METER%ROWTYPE,
	p_SERVICE_LOCATION_METER IN SERVICE_LOCATION_METER%ROWTYPE,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_METER_ID OUT NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_REPLACE_DATES NUMBER(1);
v_COUNT NUMBER;
v_STATUS NUMBER;
v_USE_TOU_USAGE_FACTOR	METER.USE_TOU_USAGE_FACTOR%TYPE;

BEGIN

	IF NOT p_METER.METER_NAME IS NULL THEN
		p_METER_ID := IMPORT_ID_FOR_METER(p_METER.METER_NAME, p_SERVICE_LOCATION_ID);

		-- 9/23/09 - BZ 21526 - DDZ - hard-coded list of meter units replaced with system label
		IF NOT SP.SYSTEM_LABEL_CONTAINS(0, 'Entity Manager', 'Meter Units', NULL, NULL,
                UPPER(p_METER.METER_UNIT)) THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('Invalid Meter Unit for Meter ' || p_METER.METER_NAME,
				p_SUCCESS);
		END IF;

		IF NOT UPPER(p_METER.METER_TYPE) IN ('INTERVAL', 'PERIOD') THEN
			DATA_IMPORT.LOG_IMPORT_ERROR(' Invalid Meter Type for Meter ' || p_METER.METER_NAME,
				p_SUCCESS);
		END IF;

		IF p_METER_ID < 0 THEN p_METER_ID := 0; END IF;

		--DO A CHECK TO SEE IF WE NEED TO CREATE A NEW SERVICE LOCATION.
		IF p_METER_ID > 0 AND NOT GA.ENFORCE_UNIQUE_NAMES THEN
			SELECT COUNT(*)
			INTO v_COUNT
			FROM SERVICE_LOCATION_METER
			WHERE METER_ID = p_METER_ID
				AND SERVICE_LOCATION_ID <> p_SERVICE_LOCATION_ID;
			IF v_COUNT > 0 THEN
				p_METER_ID := 0;
			END IF;
		END IF;

		IF p_SUCCESS THEN
		  -- since file format does not support this field, just leave it be.
		  -- if meter exists, preserve existing value
		  SELECT MAX(USE_TOU_USAGE_FACTOR)
		  INTO v_USE_TOU_USAGE_FACTOR
		  FROM METER
		  WHERE METER_ID = p_METER_ID;

		  IO.PUT_METER( p_METER_ID,
			  NVL(p_METER.MRSP_ID, 0),
			  NVL(p_METER.METER_NAME, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_METER.METER_ALIAS, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_METER.METER_DESC, GA.UNDEFINED_ATTRIBUTE),
			  p_METER_ID,
			  NVL(p_METER.METER_EXTERNAL_IDENTIFIER, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_METER.METER_STATUS, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_METER.METER_INTERVAL, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_METER.METER_TYPE, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_METER.METER_UNIT, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_METER.IS_EXTERNAL_INTERVAL_USAGE, 0),
			  NVL(p_METER.IS_EXTERNAL_BILLED_USAGE, 0),
			  NVL(p_METER.IS_EXTERNAL_FORECAST, 0),
			  NVL(v_USE_TOU_USAGE_FACTOR, 0));
		END IF;

		SELECT DECODE(VALUE_AT_KEY_3('Account Import', 'Replace Dates', 'Service Location and Meter'),1,1,0)
		INTO v_REPLACE_DATES FROM DUAL;

		IF v_REPLACE_DATES = 1 AND p_SUCCESS THEN
			DELETE FROM SERVICE_LOCATION_METER
			WHERE METER_ID = p_METER_ID
			AND SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID;
		END IF;

		IF p_SUCCESS THEN
		  PM.PUT_SERVICE_LOCATION_METER( p_SERVICE_LOCATION_ID,
			  p_METER_ID,
			  NVL(p_SERVICE_LOCATION_METER.BEGIN_DATE, LOW_DATE),
			  p_SERVICE_LOCATION_METER.END_DATE,
			  NVL(p_SERVICE_LOCATION_METER.IS_ESTIMATED_END_DATE, 0),
			  NVL(p_SERVICE_LOCATION_METER.EDC_IDENTIFIER, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_LOCATION_METER.ESP_IDENTIFIER, GA.UNDEFINED_ATTRIBUTE),
			  p_SERVICE_LOCATION_METER.NEXT_ACTION_DATE,
			  NVL(p_SERVICE_LOCATION_METER.EDC_RATE_CLASS, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_LOCATION_METER.BEGIN_DATE, LOW_DATE),
			  v_STATUS
			  );

		  ERRS.VALIDATE_STATUS('PM.PUT_SERVICE_LOCATION_METER',
		  						v_STATUS);
		END IF;
	END IF;
END IMPORT_METER;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_CONTRACT
	(
	p_SERVICE_CONTRACT IN SERVICE_CONTRACT%ROWTYPE,
	p_CONTRACT_ACCOUNT IN CONTRACT_ASSIGNMENT%ROWTYPE,
	p_ACCOUNT_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_CONTRACT_ID NUMBER(9);
v_CONTRACT_END_DATE DATE;

v_STATUS NUMBER(9) := 0;
BEGIN

	IF NOT p_SERVICE_CONTRACT.CONTRACT_NAME IS NULL THEN
		v_CONTRACT_ID := ID.ID_FOR_CONTRACT(p_SERVICE_CONTRACT.CONTRACT_NAME);

		IF p_SERVICE_CONTRACT.END_DATE IS NULL THEN
			LOGS.LOG_WARN('Contract End Date cannot be null for Contract ' || p_SERVICE_CONTRACT.CONTRACT_NAME);
			v_CONTRACT_END_DATE := GREATEST(TRUNC(SYSDATE), p_SERVICE_CONTRACT.BEGIN_DATE);
		ELSE
			v_CONTRACT_END_DATE := p_SERVICE_CONTRACT.END_DATE;
		END IF;

		IF v_CONTRACT_ID < 0 THEN v_CONTRACT_ID := 0; END IF;

		IF p_SUCCESS THEN

		  IO.PUT_CONTRACT( v_CONTRACT_ID,
			  NVL(p_SERVICE_CONTRACT.CONTRACT_NAME, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_CONTRACT.CONTRACT_ALIAS, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_CONTRACT.CONTRACT_DESC, GA.UNDEFINED_ATTRIBUTE),
			  v_CONTRACT_ID,
			  NVL(p_SERVICE_CONTRACT.EXTERNAL_IDENTIFIER, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_CONTRACT.BEGIN_DATE, TRUNC(SYSDATE)),
			  v_CONTRACT_END_DATE,
			  NVL(p_SERVICE_CONTRACT.IS_ESTIMATED_END_DATE, 0),
			  NVL(p_SERVICE_CONTRACT.IS_EVERGREEN, 0),
			  NVL(p_SERVICE_CONTRACT.IS_INTERRUPTIBLE, 0),
			  NVL(p_SERVICE_CONTRACT.EXPECTED_RENEWAL_PCT, 0),
			  NVL(p_SERVICE_CONTRACT.NEXT_ACTION_DATE, TRUNC(SYSDATE)),
			  NVL(p_SERVICE_CONTRACT.NOTIFICATION_REQUIREMENTS, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_CONTRACT.CURTAILMENT_ABILITY, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_CONTRACT.PENALTY_CLAUSES, GA.UNDEFINED_ATTRIBUTE),
			  NVL(p_SERVICE_CONTRACT.PRICING_MODEL, GA.UNDEFINED_ATTRIBUTE)
			  );

		  EM.PUT_CONTRACT_ASSIGNMENT( v_CONTRACT_ID,
			  EC.ED_ACCOUNT,
			  p_ACCOUNT_ID,
			  NVL(p_CONTRACT_ACCOUNT.BEGIN_DATE, LOW_DATE),
			  p_CONTRACT_ACCOUNT.END_DATE,
			  EC.ED_ACCOUNT,
			  p_ACCOUNT_ID,
			  NVL(p_CONTRACT_ACCOUNT.BEGIN_DATE, LOW_DATE));

		  ERRS.VALIDATE_STATUS('RA.PUT_CONTRACT_ASSIGNMENT',
		  						v_STATUS);
		END IF;
	END IF;
END IMPORT_CONTRACT;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_ESP
	(
	p_ACCOUNT_MODEL_OPTION IN VARCHAR,
	p_ACCOUNT_ESP IN ACCOUNT_ESP%ROWTYPE,
	p_ESP_NAME IN VARCHAR,
	p_ACCOUNT_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_ESP_ID NUMBER(9);

BEGIN

	IF NOT p_ESP_NAME IS NULL THEN
		ID.ID_FOR_ESP(p_ESP_NAME, FALSE, v_ESP_ID);

		IF v_ESP_ID < 0 THEN
			DATA_IMPORT.LOG_IMPORT_ERROR( 'ESP not found: ' || p_ESP_NAME,
						p_SUCCESS);
		ELSIF p_SUCCESS THEN

			--AGGREGATE
			IF UPPER(SUBSTR(p_ACCOUNT_MODEL_OPTION,1,2)) = 'AG' THEN
        ACCOUNTS_METERS.PUT_AGGREGATE_ACCOUNT_ESP( p_ACCOUNT_ID,
                                     v_ESP_ID,
                                     NVL(p_ACCOUNT_ESP.POOL_ID,0),
                                     TRUNC(NVL(p_ACCOUNT_ESP.BEGIN_DATE, SYSDATE)),
                                     TRUNC(p_ACCOUNT_ESP.END_DATE),
                                     v_ESP_ID,
                                     NVL(p_ACCOUNT_ESP.POOL_ID,0),
                                     TRUNC(NVL(p_ACCOUNT_ESP.BEGIN_DATE, SYSDATE)));
			--ACCOUNT
			ELSE
       IF GA.CSB_IS_SUBDAILY THEN
          ACCOUNTS_METERS.PUT_ACCOUNT_ESP_SUBDAILY(p_ACCOUNT_ID,
                             v_ESP_ID,
                             NVL(p_ACCOUNT_ESP.POOL_ID,0),
                             NVL(p_ACCOUNT_ESP.BEGIN_DATE, SYSDATE),
                             p_ACCOUNT_ESP.END_DATE,
                             NVL(p_ACCOUNT_ESP.ESP_ACCOUNT_NUMBER, GA.UNDEFINED_ATTRIBUTE),
                             v_ESP_ID,
                             NVL(p_ACCOUNT_ESP.POOL_ID,0),
                             NVL(p_ACCOUNT_ESP.BEGIN_DATE, SYSDATE),
                             GA.LOCAL_TIME_ZONE);
       ELSE
				      ACCOUNTS_METERS.PUT_ACCOUNT_ESP(p_ACCOUNT_ID,
                             v_ESP_ID,
                             NVL(p_ACCOUNT_ESP.POOL_ID,0),
                             TRUNC(NVL(p_ACCOUNT_ESP.BEGIN_DATE, SYSDATE)),
                             TRUNC(p_ACCOUNT_ESP.END_DATE),
                             NVL(p_ACCOUNT_ESP.ESP_ACCOUNT_NUMBER, GA.UNDEFINED_ATTRIBUTE),
                             v_ESP_ID,
                             NVL(p_ACCOUNT_ESP.POOL_ID,0),
                             TRUNC(NVL(p_ACCOUNT_ESP.BEGIN_DATE, SYSDATE)));
       END IF;
			END IF;
		END IF;
	END IF;
END IMPORT_ACCOUNT_ESP;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_EDC
	(
	p_ACCOUNT_EDC IN ACCOUNT_EDC%ROWTYPE,
	p_EDC_NAME IN VARCHAR,
	p_ACCOUNT_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_EDC_ID NUMBER(9);
v_COUNT NUMBER(2);

v_STATUS NUMBER(9) := 0;

BEGIN

	IF NOT p_EDC_NAME IS NULL THEN
		ID.ID_FOR_EDC(p_EDC_NAME, FALSE, v_EDC_ID);

		IF v_EDC_ID < 0 THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('EDC not found: ' || p_EDC_NAME,
					p_SUCCESS);
		ELSE
			IF NOT p_ACCOUNT_EDC.EDC_RATE_CLASS IS NULL THEN
				SELECT COUNT(*)
				INTO v_COUNT
				FROM EDC_RATE_CLASS
				WHERE EDC_ID = v_EDC_ID
				AND UPPER(RATE_CLASS) = UPPER(p_ACCOUNT_EDC.EDC_RATE_CLASS);

				IF v_COUNT < 1 THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('EDC Rate Class not valid for ' || p_EDC_NAME,
							p_SUCCESS);
				END IF;
			END IF;

			IF p_SUCCESS THEN
			  	RA.PUT_ACCOUNT_EDC( p_ACCOUNT_ID,
				  v_EDC_ID,
				  TRUNC(NVL(p_ACCOUNT_EDC.BEGIN_DATE, SYSDATE)),
				  TRUNC(p_ACCOUNT_EDC.END_DATE),
				  NVL(p_ACCOUNT_EDC.EDC_ACCOUNT_NUMBER, GA.UNDEFINED_ATTRIBUTE),
				  NVL(p_ACCOUNT_EDC.EDC_RATE_CLASS, GA.UNDEFINED_ATTRIBUTE),
				  v_EDC_ID,
				  TRUNC(NVL(p_ACCOUNT_EDC.BEGIN_DATE, SYSDATE)),
				  v_STATUS);

				ERRS.VALIDATE_STATUS('RA.PUT_ACCOUNT_ESP',
						v_STATUS);
			END IF;
		END IF;
	END IF;
END IMPORT_ACCOUNT_EDC;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_CALENDAR
	(
	p_ACCOUNT_CALENDAR IN ACCOUNT_CALENDAR%ROWTYPE,
	p_CALENDAR_NAME IN VARCHAR,
	p_MODEL_OPTION IN CHAR,
	p_ENTITY_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_CALENDAR_ID NUMBER(9);

v_STATUS NUMBER(9);

BEGIN

	IF NOT p_CALENDAR_NAME IS NULL THEN
		ID.ID_FOR_CALENDAR(p_CALENDAR_NAME, FALSE, v_CALENDAR_ID);

		IF NOT UPPER(p_ACCOUNT_CALENDAR.CALENDAR_TYPE) IN ('FORECAST', 'BACKCAST', 'SETTLEMENT', 'MONITOR') THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('Invalid Calendar Type ("' || p_ACCOUNT_CALENDAR.CALENDAR_TYPE || '") for Calendar ' || p_CALENDAR_NAME,
						p_SUCCESS);
		END IF;

		IF v_CALENDAR_ID < 0 THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('Calendar not found: ' || p_CALENDAR_NAME,
						p_SUCCESS);
		ELSIF p_MODEL_OPTION = 'M' AND p_SUCCESS THEN
			PM.PUT_METER_CALENDAR(NVL(p_ACCOUNT_CALENDAR.CASE_ID, GA.BASE_CASE_ID), --CASE ID
				p_ENTITY_ID,
				v_CALENDAR_ID,
				NVL(p_ACCOUNT_CALENDAR.CALENDAR_TYPE, 'Forecast'),
				TRUNC(NVL(p_ACCOUNT_CALENDAR.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_CALENDAR.END_DATE),
				NVL(p_ACCOUNT_CALENDAR.CASE_ID, GA.BASE_CASE_ID), -- OLD CASE ID
				v_CALENDAR_ID,
				NVL(p_ACCOUNT_CALENDAR.CALENDAR_TYPE, 'Forecast'),
				TRUNC(NVL(p_ACCOUNT_CALENDAR.BEGIN_DATE, SYSDATE)),
				v_STATUS);

			ERRS.VALIDATE_STATUS('PM.PUT_METER_CALENDAR',
						v_STATUS);
		ELSIF p_SUCCESS THEN
		   RA.PUT_ACCOUNT_CALENDAR(NVL(p_ACCOUNT_CALENDAR.CASE_ID, GA.BASE_CASE_ID), --CASE_ID
				p_ENTITY_ID,
				v_CALENDAR_ID,
				NVL(p_ACCOUNT_CALENDAR.CALENDAR_TYPE, 'Forecast'),
				TRUNC(NVL(p_ACCOUNT_CALENDAR.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_CALENDAR.END_DATE),
				NVL(p_ACCOUNT_CALENDAR.CASE_ID, GA.BASE_CASE_ID), -- OLD CASE ID
				v_CALENDAR_ID,
				NVL(p_ACCOUNT_CALENDAR.CALENDAR_TYPE, 'Forecast'),
				TRUNC(NVL(p_ACCOUNT_CALENDAR.BEGIN_DATE, SYSDATE)),
				v_STATUS);

			ERRS.VALIDATE_STATUS('RA.PUT_ACCOUNT_CALENDAR',
						v_STATUS);
		END IF;
	END IF;
END IMPORT_ACCOUNT_CALENDAR;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_LOSS_FACTOR
	(
	p_ACCOUNT_LOSS_FACTOR IN ACCOUNT_LOSS_FACTOR%ROWTYPE,
	p_LOSS_FACTOR_NAME IN VARCHAR,
	p_MODEL_OPTION IN CHAR,
	p_ENTITY_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_LOSS_FACTOR_ID NUMBER(9);

v_STATUS NUMBER(9);

BEGIN

	IF NOT p_LOSS_FACTOR_NAME IS NULL THEN
		ID.ID_FOR_LOSS_FACTOR(p_LOSS_FACTOR_NAME, FALSE, v_LOSS_FACTOR_ID);

		IF v_LOSS_FACTOR_ID < 0 THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('Loss Factor not found: ' || p_LOSS_FACTOR_NAME,
				p_SUCCESS);
		ELSIF p_MODEL_OPTION = 'M' AND p_SUCCESS THEN
		   PM.PUT_METER_LOSS_FACTOR(NVL(p_ACCOUNT_LOSS_FACTOR.CASE_ID, GA.BASE_CASE_ID), --CASE ID
				p_ENTITY_ID,
				v_LOSS_FACTOR_ID,
				TRUNC(NVL(p_ACCOUNT_LOSS_FACTOR.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_LOSS_FACTOR.END_DATE),
				NVL(p_ACCOUNT_LOSS_FACTOR.CASE_ID, GA.BASE_CASE_ID), -- OLD_CASE_ID
				v_LOSS_FACTOR_ID,
				TRUNC(NVL(p_ACCOUNT_LOSS_FACTOR.BEGIN_DATE, SYSDATE)),
				v_STATUS);

			ERRS.VALIDATE_STATUS('PM.PUT_METER_LOSS_FACTOR',
						v_STATUS);
		ELSIF p_SUCCESS THEN
		   RA.PUT_ACCOUNT_LOSS_FACTOR(NVL(p_ACCOUNT_LOSS_FACTOR.CASE_ID, GA.BASE_CASE_ID), --CASE ID
				p_ENTITY_ID,
				v_LOSS_FACTOR_ID,
				TRUNC(NVL(p_ACCOUNT_LOSS_FACTOR.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_LOSS_FACTOR.END_DATE),
				NVL(p_ACCOUNT_LOSS_FACTOR.CASE_ID, GA.BASE_CASE_ID), -- OLD_CASE_ID
				v_LOSS_FACTOR_ID,
				TRUNC(NVL(p_ACCOUNT_LOSS_FACTOR.BEGIN_DATE, SYSDATE)),
				V_STATUS);

			ERRS.VALIDATE_STATUS('RA.PUT_ACCOUNT_LOSS_FACTOR',
						v_STATUS);
		END IF;
	END IF;
END IMPORT_ACCOUNT_LOSS_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_USAGE_FACTOR
	(
	p_ACCOUNT_USAGE_FACTOR IN ACCOUNT_USAGE_FACTOR%ROWTYPE,
	p_MODEL_OPTION IN CHAR,
	p_ENTITY_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_STATUS NUMBER(9) := 0;

BEGIN

	IF NOT p_ACCOUNT_USAGE_FACTOR.FACTOR_VAL IS NULL AND p_SUCCESS THEN
		IF p_MODEL_OPTION = 'M' THEN
		   PM.PUT_METER_USAGE_FACTOR(NVL(p_ACCOUNT_USAGE_FACTOR.CASE_ID, GA.BASE_CASE_ID), -- CASE_ID
				p_ENTITY_ID,
				TRUNC(NVL(p_ACCOUNT_USAGE_FACTOR.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_USAGE_FACTOR.END_DATE),
				p_ACCOUNT_USAGE_FACTOR.FACTOR_VAL,
				NVL(p_ACCOUNT_USAGE_FACTOR.CASE_ID, GA.BASE_CASE_ID), -- OLD CASE ID
				TRUNC(NVL(p_ACCOUNT_USAGE_FACTOR.BEGIN_DATE, SYSDATE)),
				v_STATUS);

			ERRS.VALIDATE_STATUS('PM.PUT_METER_USAGE_FACTOR',
						v_STATUS);
		ELSE
		   RA.PUT_ACCOUNT_USAGE_FACTOR(NVL(p_ACCOUNT_USAGE_FACTOR.CASE_ID, GA.BASE_CASE_ID), -- CASE_ID
				p_ENTITY_ID,
				TRUNC(NVL(p_ACCOUNT_USAGE_FACTOR.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_USAGE_FACTOR.END_DATE),
				p_ACCOUNT_USAGE_FACTOR.FACTOR_VAL,
				NVL(p_ACCOUNT_USAGE_FACTOR.CASE_ID, GA.BASE_CASE_ID), -- OLD CASE ID
				TRUNC(NVL(p_ACCOUNT_USAGE_FACTOR.BEGIN_DATE, SYSDATE)),
				v_STATUS);

			ERRS.VALIDATE_STATUS('RA.PUT_ACCOUNT_USAGE_FACTOR',
						v_STATUS);
		END IF;
	END IF;

END IMPORT_ACCOUNT_USAGE_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_METER
	(
	p_ACCOUNT_METER IN ACCOUNT_METER%ROWTYPE,
	p_ACCOUNT_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_STATUS NUMBER(9);

BEGIN

	IF NOT p_ACCOUNT_METER.METER_NAME IS NULL AND p_SUCCESS THEN
		RA.PUT_ACCOUNT_METER(p_ACCOUNT_ID,
				LTRIM(RTRIM(p_ACCOUNT_METER.METER_NAME)),
				TRUNC(NVL(p_ACCOUNT_METER.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_METER.END_DATE),
				NVL(p_ACCOUNT_METER.USAGE_FACTOR, 0),
				LTRIM(RTRIM(p_ACCOUNT_METER.METER_NAME)),
				v_STATUS);

		ERRS.VALIDATE_STATUS('RA.PUT_ACCOUNT_METER',
						v_STATUS);
	END IF;

END IMPORT_ACCOUNT_METER;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_CONTACT_INFO
	(
	p_CONTACT IN CONTACT%ROWTYPE,
	p_PHONE_NUMBER IN PHONE_NUMBER%ROWTYPE,
	p_ADDRESS IN ADDRESS_RECORD,
	p_CONTACT_CATEGORY IN VARCHAR,
	p_ADDRESS_CATEGORY IN VARCHAR,
	p_ENTITY_DOMAIN_ALIAS IN VARCHAR,
	p_ENTITY_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_CONTACT_CATEGORY_ID NUMBER(9);
v_ADDRESS_CATEGORY_ID NUMBER(9);
v_ENTITY_DOMAIN_ID NUMBER(9);
v_CONTACT_ID NUMBER(9);

BEGIN

	IF NOT p_CONTACT_CATEGORY IS NULL AND p_SUCCESS THEN
   		ID.ID_FOR_CATEGORY(p_CONTACT_CATEGORY, v_CONTACT_CATEGORY_ID);
	ELSE
		v_CONTACT_CATEGORY_ID := 0;
	END IF;

	IF NOT p_ADDRESS_CATEGORY IS NULL AND p_SUCCESS THEN
		ID.ID_FOR_CATEGORY(p_ADDRESS_CATEGORY, v_ADDRESS_CATEGORY_ID);
	ELSE
		v_ADDRESS_CATEGORY_ID := 0;
	END IF;

	ID.ID_FOR_ENTITY_DOMAIN_ALIAS(p_ENTITY_DOMAIN_ALIAS, v_ENTITY_DOMAIN_ID);

--PUT THE CONTACT INFORMATION.
	IF NOT p_CONTACT.CONTACT_NAME IS NULL AND p_SUCCESS THEN
		ID.ID_FOR_CONTACT(p_CONTACT.CONTACT_NAME, FALSE, v_CONTACT_ID);

		IF v_CONTACT_ID < 0 THEN
			v_CONTACT_ID := 0;
		END IF;

    IO.PUT_CONTACT( v_CONTACT_ID,
          p_CONTACT.CONTACT_NAME,
          p_CONTACT.CONTACT_ALIAS,
          p_CONTACT.CONTACT_DESC,
          v_CONTACT_ID,
          p_CONTACT.CONTACT_STATUS,
          p_CONTACT.EMAIL_ADDRESS,
          p_CONTACT.FIRST_NAME,
          p_CONTACT.MIDDLE_NAME,
          p_CONTACT.LAST_NAME,
          p_CONTACT.SALUTATION,
          p_CONTACT.TITLE,
          p_CONTACT.EXTERNAL_IDENTIFIER);

		-- [BZ 28959] check contact has a category specified before trying to insert row; if it doesn't, log an error
    IF NOT p_CONTACT_CATEGORY IS NULL THEN
       EM.PUT_ENTITY_DOMAIN_CONTACT(v_ENTITY_DOMAIN_ID, p_ENTITY_ID, v_CONTACT_CATEGORY_ID, v_CONTACT_ID, v_CONTACT_CATEGORY_ID, v_CONTACT_ID);
       EM.PUT_CONTACT_CATEGORY(v_CONTACT_ID, v_CONTACT_CATEGORY_ID, p_IS_SELECTED => 1);
    ELSE
      DATA_IMPORT.LOG_IMPORT_ERROR('Contact Category not defined for contact:  ' || p_CONTACT.CONTACT_NAME, p_SUCCESS);
    END IF;

		IF NOT p_PHONE_NUMBER.PHONE_TYPE IS NULL THEN
			EM.PUT_CONTACT_PHONE_NUMBER(v_CONTACT_ID,
				  						p_PHONE_NUMBER.PHONE_TYPE,
										p_PHONE_NUMBER.PHONE_NUMBER);
		END IF;
	END IF;

    --PUT THE ADDRESS INFORMATION.
    IF p_SUCCESS THEN
		EM.PUT_ENTITY_DOMAIN_ADDRESS(v_ENTITY_DOMAIN_ID, p_ENTITY_ID, v_ADDRESS_CATEGORY_ID, p_ADDRESS.STREET, p_ADDRESS.STREET2, p_ADDRESS.CITY, p_ADDRESS.STATE_CODE, p_ADDRESS.POSTAL_CODE, p_ADDRESS.COUNTRY_CODE, v_ADDRESS_CATEGORY_ID);
	END IF;

END IMPORT_CONTACT_INFO;
----------------------------------------------------------------------------------------------------

PROCEDURE IMPORT_ACCOUNT_PRODUCT
	(
	p_ACCOUNT_PRODUCT IN ACCOUNT_PRODUCT%ROWTYPE,
	p_PRODUCT_NAME IN VARCHAR,
	p_MODEL_OPTION IN CHAR,
	p_ENTITY_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

v_PRODUCT_ID NUMBER(9);

v_STATUS NUMBER(9) := 0;

BEGIN

	IF NOT p_PRODUCT_NAME IS NULL THEN
		ID.ID_FOR_PRODUCT(p_PRODUCT_NAME, FALSE, v_PRODUCT_ID);

		IF v_PRODUCT_ID < 0 THEN

			DATA_IMPORT.LOG_IMPORT_ERROR('Product not found: ' || p_PRODUCT_NAME,
				p_SUCCESS);

		ELSIF p_ACCOUNT_PRODUCT.PRODUCT_TYPE IS NULL THEN

			DATA_IMPORT.LOG_IMPORT_ERROR('Product type not specified for product: ' || p_PRODUCT_NAME,
				p_SUCCESS);

		ELSIF p_MODEL_OPTION = 'M' AND p_SUCCESS THEN

		   PM.PUT_METER_PRODUCT(1, --CASE ID
				p_ENTITY_ID,
				v_PRODUCT_ID,
				p_ACCOUNT_PRODUCT.PRODUCT_TYPE,
				TRUNC(NVL(p_ACCOUNT_PRODUCT.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_PRODUCT.END_DATE),
				1, -- OLD_CASE_ID
				v_PRODUCT_ID,
				p_ACCOUNT_PRODUCT.PRODUCT_TYPE,
				TRUNC(NVL(p_ACCOUNT_PRODUCT.BEGIN_DATE, SYSDATE)),
				v_STATUS);

		  	ERRS.VALIDATE_STATUS('PM.PUT_METER_PRODUCT',
				v_STATUS);

		ELSIF p_SUCCESS THEN

		   RA.PUT_ACCOUNT_PRODUCT(1, --CASE ID
				p_ENTITY_ID,
				v_PRODUCT_ID,
				p_ACCOUNT_PRODUCT.PRODUCT_TYPE,
				TRUNC(NVL(p_ACCOUNT_PRODUCT.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_PRODUCT.END_DATE),
				1, -- OLD_CASE_ID
				v_PRODUCT_ID,
				p_ACCOUNT_PRODUCT.PRODUCT_TYPE,
				TRUNC(NVL(p_ACCOUNT_PRODUCT.BEGIN_DATE, SYSDATE)),
				v_STATUS);

		  	ERRS.VALIDATE_STATUS('RA.PUT_ACCOUNT_PRODUCT',
				v_STATUS);

		END IF;
	END IF;
END IMPORT_ACCOUNT_PRODUCT;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_DER
	(
	p_DER IN DISTRIBUTED_ENERGY_RESOURCE%ROWTYPE,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_DER_ID OUT NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_TEST NUMBER;
	v_ES_TYPE EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_TYPE%TYPE;
	v_ES_NAME EXTERNAL_SYSTEM.EXTERNAL_SYSTEM_NAME%TYPE;

BEGIN

	-- IF ANY OF THESE THREE ARE THE CASE, THEN DON'T TRY TO SAVE THE DER
	-- APPROPRIATE ERRORS HAVE ALREADY BEEN LOGGED
	IF p_DER.DER_NAME IS NOT NULL AND p_DER.DER_TYPE_ID IS NOT NULL THEN

		SELECT COUNT(1)
		INTO v_TEST
		FROM DISTRIBUTED_ENERGY_RESOURCE DER
		WHERE DER.DER_NAME = p_DER.DER_NAME
			AND DER.SERVICE_LOCATION_ID <> p_SERVICE_LOCATION_ID;

		IF v_TEST > 0 THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('A DER named ' || p_DER.DER_NAME ||
				' already exists and belongs to a different service location.',
				p_SUCCESS);
		END IF;

		p_DER_ID := EI.GET_ID_FROM_NAME(p_DER.DER_NAME, EC.ED_DER, 1);

		IF p_DER.BEGIN_DATE IS NULL THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('A begin date is mandatory for a DER, but none '
				|| 'was given for DER: ' || p_DER.DER_NAME,
				p_SUCCESS);
		END IF;

		IF p_DER.EXTERNAL_SYSTEM_ID IS NOT NULL THEN
			SELECT ES.EXTERNAL_SYSTEM_TYPE, ES.EXTERNAL_SYSTEM_NAME
			INTO v_ES_TYPE, v_ES_NAME
			FROM EXTERNAL_SYSTEM ES
			WHERE ES.EXTERNAL_SYSTEM_ID = p_DER.EXTERNAL_SYSTEM_ID;

			IF v_ES_TYPE <> 'DERMS' THEN
				DATA_IMPORT.LOG_IMPORT_WARN('The External System: ' || v_ES_NAME || ' specified for '
					|| 'DER: ' || p_DER.DER_NAME || ' is not of type DERMS.');
			END IF;
		END IF;

		IF p_SUCCESS THEN
			IF p_DER_ID IS NULL THEN
				IO.PUT_DER(p_DER_ID,
							p_DER.DER_NAME,
							NULL,
							NULL,
							0,
							p_SERVICE_LOCATION_ID,
							p_DER.DER_TYPE_ID,
							p_DER.EXTERNAL_SYSTEM_ID,
							p_DER.EXTERNAL_IDENTIFIER,
							p_DER.BEGIN_DATE,
							p_DER.END_DATE,
							p_DER.SERIAL_NUMBER);
			ELSE

				UPDATE DISTRIBUTED_ENERGY_RESOURCE DER
				SET DER.DER_TYPE_ID = p_DER.DER_TYPE_ID,
					DER.EXTERNAL_SYSTEM_ID = p_DER.EXTERNAL_SYSTEM_ID,
					DER.BEGIN_DATE = p_DER.BEGIN_DATE,
					DER.END_DATE = p_DER.END_DATE,
					DER.SERIAL_NUMBER = p_DER.SERIAL_NUMBER,
                    DER.EXTERNAL_IDENTIFIER = p_DER.EXTERNAL_IDENTIFIER
				WHERE DER.DER_ID = p_DER_ID;

			END IF;
		END IF;

	END IF;

END IMPORT_DER;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_DER_PROGRAM
	(
	p_DER_PROGRAM IN DER_PROGRAM%ROWTYPE,
	p_DER_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

BEGIN

	IF p_DER_PROGRAM.PROGRAM_ID IS NOT NULL AND
		p_SUCCESS THEN

		ACCOUNTS_METERS.PUT_DER_PROGRAM(p_DER_ID,
										p_DER_PROGRAM.PROGRAM_ID,
										p_DER_PROGRAM.BEGIN_DATE,
										p_DER_PROGRAM.END_DATE,
										p_DER_PROGRAM.COUNT,
										p_DER_PROGRAM.BEGIN_DATE);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		DATA_IMPORT.LOG_IMPORT_ERROR('Exception encountered when attempting to enroll ' ||
			TEXT_UTIL.TO_CHAR_ENTITY(p_DER_ID, EC.ED_DER, TRUE) || ' in ' ||
			TEXT_UTIL.TO_CHAR_ENTITY(p_DER_PROGRAM.PROGRAM_ID, EC.ED_PROGRAM, TRUE),
			p_SUCCESS,
			p_PROC_NAME => 'ACCOUNT_IMPORT.IMPORT_DER_PROGRAM',
			p_SQLERRM => SQLERRM);
END IMPORT_DER_PROGRAM;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_DER_SCALE_FACTOR
	(
	p_DER_SCALE_FACTOR IN DER_SCALE_FACTOR%ROWTYPE,
	p_DER_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

BEGIN

	IF p_DER_SCALE_FACTOR.SCALE_FACTOR IS NOT NULL AND
		p_SUCCESS THEN

		EM.PUT_DER_SCALE_FACTOR(p_DER_ID,
								NVL(p_DER_SCALE_FACTOR.CASE_ID,GA.BASE_CASE_ID),
								p_DER_SCALE_FACTOR.BEGIN_DATE,
								p_DER_SCALE_FACTOR.END_DATE,
								p_DER_SCALE_FACTOR.SCALE_FACTOR,
								NVL(p_DER_SCALE_FACTOR.CASE_ID,GA.BASE_CASE_ID),
								p_DER_SCALE_FACTOR.BEGIN_DATE);

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		DATA_IMPORT.LOG_IMPORT_ERROR('Exception encountered when attempting to assign a scale factor to ' ||
			TEXT_UTIL.TO_CHAR_ENTITY(p_DER_ID, EC.ED_DER, TRUE),
			p_SUCCESS,
			p_PROC_NAME => 'ACCOUNT_IMPORT.IMPORT_DER_SCALE_FACTOR',
			p_SQLERRM => SQLERRM);
END IMPORT_DER_SCALE_FACTOR;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_DER_CALENDAR
	(
	p_DER_CALENDAR IN DER_CALENDAR%ROWTYPE,
	p_DER_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

BEGIN

	IF p_DER_CALENDAR.CALENDAR_ID IS NOT NULL AND p_SUCCESS THEN
		EM.PUT_DER_CALENDAR(p_DER_ID,
							NVL(p_DER_CALENDAR.CASE_ID,GA.BASE_CASE_ID),
							p_DER_CALENDAR.BEGIN_DATE,
							p_DER_CALENDAR.END_DATE,
							p_DER_CALENDAR.CALENDAR_ID,
							NVL(p_DER_CALENDAR.CASE_ID,GA.BASE_CASE_ID),
							p_DER_CALENDAR.BEGIN_DATE);
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		DATA_IMPORT.LOG_IMPORT_ERROR('Exception encountered when attempting to assign a calendar to ' ||
			TEXT_UTIL.TO_CHAR_ENTITY(p_DER_ID, EC.ED_DER, TRUE),
			p_SUCCESS,
			p_PROC_NAME => 'ACCOUNT_IMPORT.IMPORT_DER_CALENDAR',
			p_SQLERRM => SQLERRM);
END IMPORT_DER_CALENDAR;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_SERVICE_LOCATION_PROG
	(
	p_SLP IN SERVICE_LOCATION_PROGRAM%ROWTYPE,
	p_SERVICE_LOCATION_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

BEGIN

	IF p_SLP.PROGRAM_ID IS NOT NULL THEN

		IF p_SUCCESS THEN
			ACCOUNTS_METERS.PUT_ACCOUNT_PROGRAM(p_SERVICE_LOCATION_ID,
											p_SLP.PROGRAM_ID,
											p_SLP.BEGIN_DATE,
											p_SLP.END_DATE,
											0,
											p_SERVICE_LOCATION_ID,
											p_SLP.PROGRAM_ID,
											p_SLP.BEGIN_DATE);
		END IF;
	END IF;

EXCEPTION
	WHEN OTHERS THEN

		DATA_IMPORT.LOG_IMPORT_ERROR('Exception encountered when attempting to enroll the ' ||
				'service location in ' || TEXT_UTIL.TO_CHAR_ENTITY(p_SLP.PROGRAM_ID, EC.ED_PROGRAM, TRUE),
				p_SUCCESS,
				p_PROC_NAME => 'ACCOUNT_IMPORT.IMPORT_SERVICE_LOCATION_PROG',
				p_SQLERRM => SQLERRM);

END IMPORT_SERVICE_LOCATION_PROG;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_METER_CHANNEL
	(
	p_METER_PT IN TX_SUB_STATION_METER_POINT%ROWTYPE,
	p_METER_ID IN NUMBER,
	p_SUCCESS IN OUT BOOLEAN
	) AS

	v_CHAN_ID NUMBER(9);

BEGIN

	IF p_METER_PT.METER_POINT_NAME IS NOT NULL THEN

		IF NOT SP.SYSTEM_LABEL_CONTAINS(0, 'Entity Manager', 'Meter Channel',
						'Unit', NULL, p_METER_PT.UOM, TRUE) THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('An invalid Meter Channel Unit of Measurement (' || p_METER_PT.UOM
					 || ') was specified',
				p_SUCCESS);
		END IF;

		IF NOT p_METER_PT.OPERATION_CODE IN ('A', 'S', 'N') THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('An invalid Meter Channel Op Code (' || p_METER_PT.OPERATION_CODE
					 || ') was specified',
				p_SUCCESS);
		END IF;

		IF NOT SP.SYSTEM_LABEL_CONTAINS(0, 'Entity Manager', 'Meter Channel',
						'Interval', NULL, p_METER_PT.METER_POINT_INTERVAL, TRUE) THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('An invalid Meter Channel Interval (' || p_METER_PT.METER_POINT_INTERVAL
					 || ') was specified',
				p_SUCCESS);
		END IF;

		SELECT MAX(PT.METER_POINT_ID)
		INTO v_CHAN_ID
		FROM TX_SUB_STATION_METER_POINT PT
		WHERE PT.METER_POINT_NAME = p_METER_PT.METER_POINT_NAME
			AND PT.RETAIL_METER_ID = p_METER_ID;

		IF p_SUCCESS THEN
			IF v_CHAN_ID IS NULL THEN
				ACCOUNTS_METERS.PUT_METER_CHANNEL(v_CHAN_ID, p_METER_ID, 0, p_METER_PT.METER_POINT_NAME,
					p_METER_PT.METER_POINT_DESC, p_METER_PT.UOM, p_METER_PT.OPERATION_CODE, p_METER_PT.METER_POINT_INTERVAL);
			ELSE
				UPDATE TX_SUB_STATION_METER_POINT PT
				SET PT.UOM = p_METER_PT.UOM,
					PT.METER_POINT_INTERVAL = p_METER_PT.METER_POINT_INTERVAL,
					PT.OPERATION_CODE = p_METER_PT.OPERATION_CODE,
					PT.METER_POINT_DESC = p_METER_PT.METER_POINT_DESC
				WHERE PT.METER_POINT_ID = v_CHAN_ID;
			END IF;
		END IF;

	END IF;

END IMPORT_METER_CHANNEL;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ENTITY_GROUP
(
	p_ACCOUNT_ID IN NUMBER,
	p_ENTITY_GROUP_NAME IN VARCHAR2,
	p_ENTITY_GROUP_CATEGORY IN VARCHAR2,
	p_ENTITY_GROUP_ASSIGN IN ENTITY_GROUP_ASSIGNMENT%ROWTYPE,
	p_SUCCESS IN OUT BOOLEAN
) AS

	v_GROUP_ID NUMBER(9);

	v_GROUP_DOM_ID ENTITY_GROUP.ENTITY_DOMAIN_ID%TYPE;
	v_GROUP_CATEGORY ENTITY_GROUP.GROUP_CATEGORY%TYPE;
	v_IS_MATRIX NUMBER(1);

BEGIN
	IF p_ENTITY_GROUP_NAME IS NOT NULL THEN

		v_GROUP_ID := EI.GET_ID_FROM_NAME(p_ENTITY_GROUP_NAME, EC.ED_ENTITY_GROUP, 1);

		IF v_GROUP_ID IS NULL THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('Account Entity Group Not Found: ' || p_ENTITY_GROUP_NAME,
										p_SUCCESS);
		ELSE
			-- CHECK THE DOMAIN AND CATEGORY
			SELECT EG.ENTITY_DOMAIN_ID, EG.GROUP_CATEGORY, EG.IS_MATRIX
			INTO v_GROUP_DOM_ID, v_GROUP_CATEGORY, v_IS_MATRIX
			FROM ENTITY_GROUP EG
			WHERE EG.ENTITY_GROUP_ID = v_GROUP_ID;

			IF v_GROUP_DOM_ID <> EC.ED_ACCOUNT THEN
				DATA_IMPORT.LOG_IMPORT_ERROR('The specified Entity Group for the Account has an ' ||
										'Entity Domain of ' || TEXT_UTIL.TO_CHAR_ENTITY(v_GROUP_DOM_ID, EC.ED_ENTITY_DOMAIN)
										|| '.', p_SUCCESS);
			END IF;

			IF p_ENTITY_GROUP_CATEGORY IS NOT NULL AND
					v_GROUP_CATEGORY <> p_ENTITY_GROUP_CATEGORY THEN

				DATA_IMPORT.LOG_IMPORT_ERROR('The specified Entity Group for the Account has a category of ' ||
										v_GROUP_CATEGORY || ' while the import specified one of ' ||
										p_ENTITY_GROUP_CATEGORY || '.', p_SUCCESS);
			END IF;

			IF v_IS_MATRIX = 1 THEN
				DATA_IMPORT.LOG_IMPORT_ERROR('The specified Entity Group is a Matrix Entity Group, this ' ||
										'is not a valid entity group assignment for the Account Import.',
										p_SUCCESS);
			END IF;
		END IF;

		IF p_SUCCESS THEN
			EM.PUT_GROUP_ASSIGNMENT(v_GROUP_ID,
				p_ACCOUNT_ID,
				TRUNC(NVL(p_ENTITY_GROUP_ASSIGN.BEGIN_DATE, SYSDATE_AS_CUT)),
				p_ENTITY_GROUP_ASSIGN.END_DATE,
				v_GROUP_ID,
				NVL(p_ENTITY_GROUP_ASSIGN.BEGIN_DATE, SYSDATE_AS_CUT));
		END IF;
	END IF;
END IMPORT_ENTITY_GROUP;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_ANCILLARY
(
	p_ACCOUNT_ID IN NUMBER,
	p_ACCOUNT_ANCILLARY IN ACCOUNT_ANCILLARY_SERVICE%ROWTYPE,
	p_SUCCESS IN OUT BOOLEAN
) AS

BEGIN

	IF p_SUCCESS AND p_ACCOUNT_ANCILLARY.ANCILLARY_SERVICE_ID IS NOT NULL THEN
		ACCOUNTS_METERS.PUT_ACCOUNT_ANCILLARY_SERVICE(p_ACCOUNT_ID,
													p_ACCOUNT_ANCILLARY.ANCILLARY_SERVICE_ID,
													TRUNC(NVL(p_ACCOUNT_ANCILLARY.BEGIN_DATE, SYSDATE_AS_CUT)),
													p_ACCOUNT_ANCILLARY.END_DATE,
													p_ACCOUNT_ANCILLARY.SERVICE_VAL,
													p_ACCOUNT_ANCILLARY.ANCILLARY_SERVICE_ID,
													TRUNC(NVL(p_ACCOUNT_ANCILLARY.BEGIN_DATE, SYSDATE_AS_CUT)));
	END IF;

END IMPORT_ACCOUNT_ANCILLARY;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_METER_ANCILLARY
(
	p_METER_ID IN NUMBER,
	p_METER_ANCILLARY IN METER_ANCILLARY_SERVICE%ROWTYPE,
	p_SUCCESS IN OUT BOOLEAN
) AS

BEGIN

	IF p_SUCCESS AND p_METER_ANCILLARY.ANCILLARY_SERVICE_ID IS NOT NULL THEN
		ACCOUNTS_METERS.PUT_METER_ANCILLARY_SERVICE(p_METER_ID,
													p_METER_ANCILLARY.ANCILLARY_SERVICE_ID,
													TRUNC(NVL(p_METER_ANCILLARY.BEGIN_DATE, SYSDATE_AS_CUT)),
													p_METER_ANCILLARY.END_DATE,
													p_METER_ANCILLARY.SERVICE_VAL,
													p_METER_ANCILLARY.ANCILLARY_SERVICE_ID,
													TRUNC(NVL(p_METER_ANCILLARY.BEGIN_DATE, SYSDATE_AS_CUT)));
	END IF;

END IMPORT_METER_ANCILLARY;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_SCHEDULE_GROUP
(
	p_ACCOUNT_ID IN NUMBER,
	p_SCHEDULE_GROUP IN ACCOUNT_SCHEDULE_GROUP%ROWTYPE,
	p_SUCCESS IN OUT BOOLEAN
) AS

	v_METER_TYPE SCHEDULE_GROUP.METER_TYPE%TYPE;
	v_ACCT_METER_TYPE ACCOUNT.ACCOUNT_METER_TYPE%TYPE;

BEGIN

	IF p_SUCCESS AND p_SCHEDULE_GROUP.SCHEDULE_GROUP_ID IS NOT NULL THEN
		SELECT SG.METER_TYPE
		INTO v_METER_TYPE
		FROM SCHEDULE_GROUP SG
		WHERE SG.SCHEDULE_GROUP_ID = p_SCHEDULE_GROUP.SCHEDULE_GROUP_ID;

		SELECT A.ACCOUNT_METER_TYPE
		INTO v_ACCT_METER_TYPE
		FROM ACCOUNT A
		WHERE A.ACCOUNT_ID = p_ACCOUNT_ID;

		IF UPPER(NVL(v_METER_TYPE, 'EITHER')) NOT IN (UPPER(v_ACCT_METER_TYPE), 'EITHER', '?') THEN
			DATA_IMPORT.LOG_IMPORT_ERROR(TEXT_UTIL.TO_CHAR_ENTITY(p_ACCOUNT_ID, EC.ED_ACCOUNT, TRUE) ||
				' cannot be assigned to ' || TEXT_UTIL.TO_CHAR_ENTITY(p_SCHEDULE_GROUP.SCHEDULE_GROUP_ID
																				, EC.ED_SCHEDULE_GROUP, TRUE) ||
				' because it has a meter type of ' || v_METER_TYPE || '.', p_SUCCESS);
		END IF;

		ACCOUNTS_METERS.PUT_ACCOUNT_SCHEDULE_GROUP(p_ACCOUNT_ID,
												p_SCHEDULE_GROUP.SCHEDULE_GROUP_ID,
												TRUNC(NVL(p_SCHEDULE_GROUP.BEGIN_DATE, SYSDATE_AS_CUT)),
												p_SCHEDULE_GROUP.END_DATE,
												TRUNC(NVL(p_SCHEDULE_GROUP.BEGIN_DATE, SYSDATE_AS_CUT)));
	END IF;

END IMPORT_ACCOUNT_SCHEDULE_GROUP;
----------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_METER_SCHEDULE_GROUP
(
	p_METER_ID IN NUMBER,
	p_SCHEDULE_GROUP IN ACCOUNT_SCHEDULE_GROUP%ROWTYPE,
	p_SUCCESS IN OUT BOOLEAN
) AS

	v_SG_METER_TYPE SCHEDULE_GROUP.METER_TYPE%TYPE;
	v_M_METER_TYPE METER.METER_TYPE%TYPE;

BEGIN

	IF p_SUCCESS AND p_SCHEDULE_GROUP.SCHEDULE_GROUP_ID IS NOT NULL THEN
		SELECT M.METER_TYPE
		INTO v_M_METER_TYPE
		FROM METER M
		WHERE M.METER_ID = p_METER_ID;

		SELECT SG.METER_TYPE
		INTO v_SG_METER_TYPE
		FROM SCHEDULE_GROUP SG
		WHERE SG.SCHEDULE_GROUP_ID = p_SCHEDULE_GROUP.SCHEDULE_GROUP_ID;

		IF UPPER(NVL(v_SG_METER_TYPE, 'EITHER')) NOT IN (UPPER(v_M_METER_TYPE), '?', 'EITHER') THEN
			DATA_IMPORT.LOG_IMPORT_ERROR(TEXT_UTIL.TO_CHAR_ENTITY(p_METER_ID, EC.ED_METER, TRUE) ||
				' cannot be assigned to ' || TEXT_UTIL.TO_CHAR_ENTITY(p_SCHEDULE_GROUP.SCHEDULE_GROUP_ID,
																				EC.ED_SCHEDULE_GROUP, TRUE) ||
				' because the schedule group has a meter type of ' || v_SG_METER_TYPE || ' while the meter''s is ' ||
				v_M_METER_TYPE || '.', p_SUCCESS);
		END IF;

		ACCOUNTS_METERS.PUT_METER_SCHEDULE_GROUP(p_METER_ID,
												TRUNC(NVL(p_SCHEDULE_GROUP.BEGIN_DATE, SYSDATE_AS_CUT)),
												p_SCHEDULE_GROUP.END_DATE,
												p_SCHEDULE_GROUP.SCHEDULE_GROUP_ID,
												TRUNC(NVL(p_SCHEDULE_GROUP.BEGIN_DATE, SYSDATE_AS_CUT)));
	END IF;

END IMPORT_METER_SCHEDULE_GROUP;
----------------------------------------------------------------------------------------------------
/*PROCEDURE IMPORT_ACCOUNT_SALES_REP
	(
--	p_ACCOUNT_SALES_REP IN ACCOUNT_SALES_REP%ROWTYPE,
	p_SALES_REP_NAME IN VARCHAR,
	p_ACCOUNT_ID IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

v_SALES_REP_ID NUMBER(9);

BEGIN

	NULL;
	-- TODO -- UPDATE THIS TO LOAD A CONTACT

	/*IF NOT p_SALES_REP_NAME IS NULL THEN
		ID.ID_FOR_SALES_REP(p_SALES_REP_NAME, TRUE, v_SALES_REP_ID);

		IF v_SALES_REP_ID < 0 THEN
			v_EVENT_TEXT := 'Sales Rep not found: ' || p_SALES_REP_NAME;
			LOGS.LOG_WARN(v_EVENT_TEXT);
		ELSE
		   RA.PUT_ACCOUNT_SALES_REP(p_ACCOUNT_ID,
				v_SALES_REP_ID,
				TRUNC(NVL(p_ACCOUNT_SALES_REP.BEGIN_DATE, SYSDATE)),
				TRUNC(p_ACCOUNT_SALES_REP.END_DATE),
				p_ACCOUNT_SALES_REP.COMMISSION,
				v_SALES_REP_ID,
				TRUNC(NVL(p_ACCOUNT_SALES_REP.BEGIN_DATE, SYSDATE)),
				p_STATUS);
		END IF;
	END IF;
END IMPORT_ACCOUNT_SALES_REP;*/
----------------------------------------------------------------------------------------------------

FUNCTION GET_BOOLEAN_NUMBER
	(
	p_BOOLEAN IN VARCHAR
	)  RETURN NUMBER IS

BEGIN

	IF UPPER(SUBSTR(p_BOOLEAN,1,1)) IN ('0', 'F', 'N') THEN
	  	 RETURN 0;
	ELSE
		 RETURN 1;
	END IF;

END GET_BOOLEAN_NUMBER;
---------------------------------------------------------------------------------------------------

FUNCTION GET_ACCOUNT_STATUS_IS_ACTIVE
	(
	p_STATUS IN VARCHAR
	)  RETURN NUMBER IS

v_IS_ACTIVE NUMBER(1);
v_EVENT_TEXT VARCHAR(128);

BEGIN

	SELECT IS_ACTIVE
	INTO v_IS_ACTIVE
	FROM ACCOUNT_STATUS_NAME
	WHERE UPPER(STATUS_NAME) = UPPER(LTRIM(RTRIM(p_STATUS)));

	RETURN v_IS_ACTIVE;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		v_EVENT_TEXT := 'Account Status not found: ' || p_STATUS;
		ERRS.LOG_AND_CONTINUE(p_EXTRA_MESSAGE => v_EVENT_TEXT, p_LOG_LEVEL => LOGS.c_LEVEL_WARN);
		RETURN 0;
	WHEN TOO_MANY_ROWS THEN
		v_EVENT_TEXT := 'Duplicate Status rows found: ' || p_STATUS;
		ERRS.LOG_AND_CONTINUE(p_EXTRA_MESSAGE => v_EVENT_TEXT, p_LOG_LEVEL => LOGS.c_LEVEL_WARN);
		RETURN 0;


END GET_ACCOUNT_STATUS_IS_ACTIVE;
---------------------------------------------------------------------------------------------------

FUNCTION GET_METER_STATUS_IS_ACTIVE
	(
	p_STATUS IN VARCHAR
	)  RETURN NUMBER IS

v_IS_ACTIVE NUMBER(1);
v_EVENT_TEXT VARCHAR(128);

BEGIN

	SELECT IS_ACTIVE
	INTO v_IS_ACTIVE
	FROM ACCOUNT_STATUS_NAME
	WHERE UPPER(STATUS_NAME) = UPPER(LTRIM(RTRIM(p_STATUS)));

	RETURN v_IS_ACTIVE;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		v_EVENT_TEXT := 'METER Status not found: ' || p_STATUS;
		ERRS.LOG_AND_CONTINUE(p_EXTRA_MESSAGE => v_EVENT_TEXT, p_LOG_LEVEL => LOGS.c_LEVEL_WARN);
		RETURN 0;
	WHEN TOO_MANY_ROWS THEN
		v_EVENT_TEXT := 'Duplicate Status rows found: ' || p_STATUS;
		ERRS.LOG_AND_CONTINUE(p_EXTRA_MESSAGE => v_EVENT_TEXT, p_LOG_LEVEL => LOGS.c_LEVEL_WARN);
		RETURN 0;


END GET_METER_STATUS_IS_ACTIVE;
---------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_ACCOUNT_LINE
	(
	p_HEADERS IN VARCHAR,
	p_RECORDS IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_TIME_FORMAT IN VARCHAR,
	p_DELIMITER IN CHAR,
	p_SUCCESS IN OUT BOOLEAN
	)
	AS

v_HEADERS PARSE_UTIL.STRING_TABLE;
v_RECORDS PARSE_UTIL.STRING_TABLE;
v_CURRENT_HEADER VARCHAR(64);
v_CURRENT_RECORD VARCHAR(256);
v_INDEX BINARY_INTEGER;

v_ACCOUNT ACCOUNT%ROWTYPE;
v_ACCOUNT_STATUS ACCOUNT_STATUS%ROWTYPE;
v_ACCOUNT_STATUS_NAME ACCOUNT_STATUS_NAME%ROWTYPE;
v_SERVICE_LOCATION SERVICE_LOCATION%ROWTYPE;
v_ACCOUNT_SERVICE_LOCATION ACCOUNT_SERVICE_LOCATION%ROWTYPE;
v_METER METER%ROWTYPE;
v_SERVICE_LOCATION_METER SERVICE_LOCATION_METER%ROWTYPE;
v_ACCOUNT_ESP ACCOUNT_ESP%ROWTYPE;
v_ACCOUNT_EDC ACCOUNT_EDC%ROWTYPE;
v_ACCOUNT_CALENDAR ACCOUNT_CALENDAR%ROWTYPE;
v_SERVICE_LOCATION_MRSP SERVICE_LOCATION_MRSP%ROWTYPE;
v_SERVICE_CONTRACT SERVICE_CONTRACT%ROWTYPE;
v_CONTRACT_ACCOUNT CONTRACT_ASSIGNMENT%ROWTYPE;
v_ACCOUNT_USAGE_FACTOR ACCOUNT_USAGE_FACTOR%ROWTYPE;
v_ACCOUNT_LOSS_FACTOR ACCOUNT_LOSS_FACTOR%ROWTYPE;
v_ACCOUNT_METER ACCOUNT_METER%ROWTYPE;
v_ACCOUNT_PRODUCT ACCOUNT_PRODUCT%ROWTYPE;

--v_SALES_REP_NAME CONTACT.CONTACT_NAME%TYPE;
--v_SALES_REP_CONTACT ENTITY_DOMAIN_CONTACT%ROWTYPE;

v_ACCOUNT_CONTACT CONTACT%ROWTYPE;
v_ACCOUNT_PHONE_NUMBER PHONE_NUMBER%ROWTYPE;
v_ACCOUNT_ADDRESS ADDRESS_RECORD := ADDRESS_RECORD(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
v_SL_CONTACT CONTACT%ROWTYPE;
v_SL_PHONE_NUMBER PHONE_NUMBER%ROWTYPE;
v_SL_ADDRESS ADDRESS_RECORD := ADDRESS_RECORD(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

v_TMP_ID NUMBER(9);
v_SERVICE_LOCATION_ID NUMBER(9);
v_METER_ID NUMBER(9);
v_METER_IS_ACTIVE NUMBER(1);

v_ESP_NAME ENERGY_SERVICE_PROVIDER.ESP_NAME%TYPE;
v_EDC_NAME ENERGY_DISTRIBUTION_COMPANY.EDC_NAME%TYPE;
v_CALENDAR_NAME CALENDAR.CALENDAR_NAME%TYPE;
v_LOSS_FACTOR_NAME LOSS_FACTOR.LOSS_FACTOR_NAME%TYPE;
v_MRSP_NAME METER_READING_SERVICE_PROVIDER.MRSP_NAME%TYPE;
v_ACCOUNT_CONTACT_CATEGORY CATEGORY.CATEGORY_NAME%TYPE;
v_ACCOUNT_ADDRESS_CATEGORY CATEGORY.CATEGORY_NAME%TYPE;
v_SL_CONTACT_CATEGORY CATEGORY.CATEGORY_NAME%TYPE;
v_SL_ADDRESS_CATEGORY CATEGORY.CATEGORY_NAME%TYPE;
v_PRODUCT_NAME PRODUCT.PRODUCT_NAME%TYPE;

v_METER_CHANNEL TX_SUB_STATION_METER_POINT%ROWTYPE;
v_SLP SERVICE_LOCATION_PROGRAM%ROWTYPE;
v_DER DISTRIBUTED_ENERGY_RESOURCE%ROWTYPE;
V_DER_ID NUMBER(9);

v_DER_CALENDAR DER_CALENDAR%ROWTYPE;
v_DER_PROGRAM DER_PROGRAM%ROWTYPE;
v_DER_SCALE_FACTOR DER_SCALE_FACTOR%ROWTYPE;

v_ACCOUNT_ANCILLARY ACCOUNT_ANCILLARY_SERVICE%ROWTYPE;
v_METER_ANCILLARY METER_ANCILLARY_SERVICE%ROWTYPE;
v_SCHED_GROUP ACCOUNT_SCHEDULE_GROUP%ROWTYPE;

v_ENTITY_GROUP_NAME ENTITY_GROUP.ENTITY_GROUP_NAME%TYPE;
v_ENTITY_GROUP_CATEGORY ENTITY_GROUP.GROUP_CATEGORY%TYPE;
v_ENTITY_GROUP_ASSIGNMENT ENTITY_GROUP_ASSIGNMENT%ROWTYPE;

BEGIN

	PARSE_UTIL.PARSE_DELIMITED_STRING(p_HEADERS, p_DELIMITER , v_HEADERS);
	PARSE_UTIL.PARSE_DELIMITED_STRING(p_RECORDS, p_DELIMITER , v_RECORDS);

	FOR v_INDEX IN v_RECORDS.FIRST..v_RECORDS.LAST LOOP
	   v_CURRENT_HEADER := UPPER(LTRIM(RTRIM(v_HEADERS(v_INDEX))));
	   v_CURRENT_RECORD := LTRIM(RTRIM(v_RECORDS(v_INDEX)));

	   IF (NOT v_CURRENT_RECORD IS NULL) AND (NOT v_CURRENT_HEADER IS NULL) THEN

			IF v_CURRENT_HEADER = 'ACCOUNT NAME' THEN
			   v_ACCOUNT.ACCOUNT_NAME := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ALIAS' THEN
				v_ACCOUNT.ACCOUNT_ALIAS := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT DESCRIPTION' THEN
				v_ACCOUNT.ACCOUNT_DESC := SUBSTR(v_CURRENT_RECORD, 1, 256);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT STATUS BEGIN DATE' THEN
        v_ACCOUNT_STATUS.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE_TIME(v_CURRENT_RECORD,
                 p_DATE_FORMAT,
                 p_TIME_FORMAT,
                 'Account Status begin date: ',
                 p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT STATUS END DATE' THEN
				v_ACCOUNT_STATUS.END_DATE := DATA_IMPORT.IMPORT_DATE_TIME(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													p_TIME_FORMAT,
													'Account Status end date: ',
													p_SUCCESS);
 			ELSIF v_CURRENT_HEADER = 'ACCOUNT STATUS NAME' THEN
				v_ACCOUNT_STATUS.STATUS_NAME := NVL(SUBSTR(v_CURRENT_RECORD, 1, 16), 'ACTIVE');
				v_ACCOUNT_STATUS_NAME.STATUS_NAME := v_ACCOUNT_STATUS.STATUS_NAME;
			ELSIF v_CURRENT_HEADER = 'ACCOUNT IS ACTIVE' THEN
				v_ACCOUNT_STATUS_NAME.IS_ACTIVE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT DUNS NUMBER' THEN
				v_ACCOUNT.ACCOUNT_DUNS_NUMBER := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT EXTERNAL IDENTIFIER' THEN
				v_ACCOUNT.ACCOUNT_EXTERNAL_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT MODEL OPTION' THEN
				v_ACCOUNT.ACCOUNT_MODEL_OPTION := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT SIC CODE' THEN
				v_ACCOUNT.ACCOUNT_SIC_CODE := SUBSTR(v_CURRENT_RECORD, 1, 8);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT METER TYPE' THEN
				v_ACCOUNT.ACCOUNT_METER_TYPE := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT METER EXTERNAL ID' THEN
				v_ACCOUNT.ACCOUNT_METER_EXT_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT BILL OPTION' THEN
				v_ACCOUNT.ACCOUNT_BILL_OPTION := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT IS EXTERNAL INTERVAL USAGE' THEN
				v_ACCOUNT.IS_EXTERNAL_INTERVAL_USAGE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT IS EXTERNAL BILLED USAGE' THEN
				v_ACCOUNT.IS_EXTERNAL_BILLED_USAGE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT IS UFE PARTICIPANT' THEN
				v_ACCOUNT.IS_UFE_PARTICIPANT := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT IS CREATE SETTLEMENT PROFILE' THEN
				v_ACCOUNT.IS_CREATE_SETTLEMENT_PROFILE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT IS EXTERNAL FORECAST' THEN
				v_ACCOUNT.IS_EXTERNAL_FORECAST := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
            ELSIF v_CURRENT_HEADER = 'ACCOUNT IS SUB AGGREGATE' THEN
                v_ACCOUNT.IS_SUB_AGGREGATE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
		   ELSIF v_CURRENT_HEADER = 'ACCOUNT SERVICE TYPE' THEN
				v_ACCOUNT.TX_SERVICE_TYPE_ID := ID.ID_FOR_TX_SERVICE_TYPE(v_CURRENT_RECORD);
				IF v_ACCOUNT.TX_SERVICE_TYPE_ID < 1 THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Invalid Service Type for Account ' || v_ACCOUNT.ACCOUNT_NAME,
												p_SUCCESS);
					v_ACCOUNT.TX_SERVICE_TYPE_ID := 0;
				END IF;
			ELSIF v_CURRENT_HEADER = 'ACCOUNT SERVICE' THEN
				SELECT DECODE(UPPER(SUBSTR(v_CURRENT_RECORD,1,1)), 'E', 1, 'G', 2, 0)
				INTO v_ACCOUNT.MODEL_ID FROM DUAL;
			ELSIF v_CURRENT_HEADER = 'ESP NAME' THEN
				v_ESP_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ESP POOL NAME' THEN
				IF p_SUCCESS THEN
					ID.ID_FOR_POOL(v_CURRENT_RECORD, TRUE, v_ACCOUNT_ESP.POOL_ID);
				END IF;

 				IF v_ACCOUNT_ESP.POOL_ID < 1 THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Invalid ESP Pool for Account ' || v_ACCOUNT.ACCOUNT_NAME,
												p_SUCCESS);
 					v_ACCOUNT_ESP.POOL_ID := 0;
 				END IF;
			ELSIF v_CURRENT_HEADER = 'ESP ACCOUNT NUMBER' THEN
				v_ACCOUNT_ESP.ESP_ACCOUNT_NUMBER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ESP BEGIN DATE' THEN
				v_ACCOUNT_ESP.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE_TIME(v_CURRENT_RECORD,
													p_DATE_FORMAT,
                                                    p_TIME_FORMAT,
													'Account ESP begin date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'ESP END DATE' THEN
				v_ACCOUNT_ESP.END_DATE := DATA_IMPORT.IMPORT_DATE_TIME(v_CURRENT_RECORD,
													p_DATE_FORMAT,
                                                    p_TIME_FORMAT,
													'Account ESP end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'EDC NAME' THEN
				v_EDC_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'EDC ACCOUNT NUMBER' THEN
				v_ACCOUNT_EDC.EDC_ACCOUNT_NUMBER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'EDC RATE CLASS' THEN
				v_ACCOUNT_EDC.EDC_RATE_CLASS := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'EDC BEGIN DATE' THEN
				v_ACCOUNT_EDC.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Account Status EDC begin date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'EDC END DATE' THEN
				v_ACCOUNT_EDC.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Account Status EDC end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'PRODUCT NAME' THEN
				v_PRODUCT_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'PRODUCT TYPE' THEN
				v_ACCOUNT_PRODUCT.PRODUCT_TYPE := SUBSTR(v_CURRENT_RECORD,1, 1);
			ELSIF v_CURRENT_HEADER = 'PRODUCT BEGIN DATE' THEN
   				v_ACCOUNT_PRODUCT.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Account Product begin date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'PRODUCT END DATE' THEN
				v_ACCOUNT_PRODUCT.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Account Product end date: ',
													p_SUCCESS);
-- ***************************************************************
-- TODO - pbm - 10/29/2008
-- Need to update this logic to import the SALES_REP as a CONTACT
-- ***************************************************************
		/*	ELSIF v_CURRENT_HEADER = 'SALES REP NAME' THEN
				v_SALES_REP_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SALES REP BEGIN DATE' THEN
				v_SALES_REP_CONTACT.BEGIN_DATE := IMPORT_DATE(v_CURRENT_RECORD, p_DATE_FORMAT, v_CURRENT_HEADER);
			ELSIF v_CURRENT_HEADER = 'SALES REP END DATE' THEN
				v_ACCOUNT_SALES_REP.END_DATE := IMPORT_DATE(v_CURRENT_RECORD, p_DATE_FORMAT, v_CURRENT_HEADER);*/

			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION NAME' THEN
				v_SERVICE_LOCATION.SERVICE_LOCATION_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ALIAS' THEN
				v_SERVICE_LOCATION.SERVICE_LOCATION_ALIAS := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION DESCRIPTION' THEN
				v_SERVICE_LOCATION.SERVICE_LOCATION_DESC := SUBSTR(v_CURRENT_RECORD, 1, 256);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION LATITUDE' THEN
				v_SERVICE_LOCATION.LATITUDE := SUBSTR(v_CURRENT_RECORD, 1, 8);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION LONGITUDE' THEN
				v_SERVICE_LOCATION.LONGITUDE := SUBSTR(v_CURRENT_RECORD, 1, 8);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION TIME ZONE' THEN
				v_SERVICE_LOCATION.TIME_ZONE := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION EXTERNAL IDENTIFIER' THEN
				v_SERVICE_LOCATION.EXTERNAL_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION IS EXTERNAL BILLED USAGE' THEN
				v_SERVICE_LOCATION.IS_EXTERNAL_BILLED_USAGE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION IS METER ALLOCATION' THEN
				v_SERVICE_LOCATION.IS_METER_ALLOCATION := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION SERVICE POINT' THEN
			   ID.ID_FOR_SERVICE_POINT(v_CURRENT_RECORD, FALSE, v_TMP_ID);
				IF v_TMP_ID < 1 THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Invalid Service Point for Account ' || v_ACCOUNT.ACCOUNT_NAME,
												p_SUCCESS);
					v_TMP_ID := 0;
				END IF;
				v_SERVICE_LOCATION.SERVICE_POINT_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION WEATHER STATION' THEN
				ID.ID_FOR_WEATHER_STATION(v_CURRENT_RECORD, FALSE, v_TMP_ID);
				IF v_TMP_ID < 1 THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Invalid Weather Station for Account ' || v_ACCOUNT.ACCOUNT_NAME,
												p_SUCCESS);
					v_TMP_ID := 0;
				END IF;
				v_SERVICE_LOCATION.WEATHER_STATION_ID := v_TMP_ID;

			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION SQUARE FOOTAGE' THEN
				v_SERVICE_LOCATION.SQUARE_FOOTAGE := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
																				'Service Location Square Footage: ',
																				p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ANNUAL CONSUMPTION' THEN
				v_SERVICE_LOCATION.ANNUAL_CONSUMPTION := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
																				'Service Location Annual Consumption: ',
																				p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION SUMMER CONSUMPTION' THEN
				v_SERVICE_LOCATION.SUMMER_CONSUMPTION := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
																				'Service Location Summer Consumption: ',
																				p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION SERVICE ZONE' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD, EC.ED_SERVICE_ZONE, 1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Service Zone (' || v_CURRENT_RECORD || ') for Service Location ' || v_SERVICE_LOCATION.SERVICE_LOCATION_NAME,
												p_SUCCESS);

					v_TMP_ID := CONSTANTS.NOT_ASSIGNED;
				END IF;

				v_SERVICE_LOCATION.SERVICE_ZONE_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION SUB-STATION' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD, EC.ED_SUB_STATION, 1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Sub Station (' || v_CURRENT_RECORD || ') for Service Location ' || v_SERVICE_LOCATION.SERVICE_LOCATION_NAME,
												p_SUCCESS);

					v_TMP_ID := CONSTANTS.NOT_ASSIGNED;
				END IF;

				v_SERVICE_LOCATION.SUB_STATION_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION FEEDER' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD, EC.ED_TX_FEEDER, 1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Feeder (' || v_CURRENT_RECORD || ') for Service Location ' || v_SERVICE_LOCATION.SERVICE_LOCATION_NAME,
												p_SUCCESS);

					v_TMP_ID := CONSTANTS.NOT_ASSIGNED;
				END IF;

				v_SERVICE_LOCATION.FEEDER_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION FEEDER SEGMENT' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD, EC.ED_TX_FEEDER_SEGMENT, 1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Feeder Segment (' || v_CURRENT_RECORD || ') for Service Location ' || v_SERVICE_LOCATION.SERVICE_LOCATION_NAME,
												p_SUCCESS);

					v_TMP_ID := CONSTANTS.NOT_ASSIGNED;
				END IF;

				v_SERVICE_LOCATION.FEEDER_SEGMENT_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION BEGIN DATE' THEN

				v_ACCOUNT_SERVICE_LOCATION.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Account Service Location begin date: ',
													p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION END DATE' THEN
				v_ACCOUNT_SERVICE_LOCATION.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Account Service Location end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION EDC IDENTIFIER' THEN
				v_ACCOUNT_SERVICE_LOCATION.EDC_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ESP IDENTIFIER' THEN
				v_ACCOUNT_SERVICE_LOCATION.ESP_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION MRSP NAME' THEN
				v_MRSP_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION PROGRAM NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD, EC.ED_PROGRAM, 1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Invalid Program for Service Location ' || v_SERVICE_LOCATION.SERVICE_LOCATION_NAME,
													p_SUCCESS);
				END IF;

				v_SLP.PROGRAM_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION PROGRAM BEGIN DATE' THEN
				v_SLP.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Service Location Program begin date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION PROGRAM END DATE' THEN
				v_SLP.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Service Location Program end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'MRSP BEGIN DATE' THEN
				v_SERVICE_LOCATION_MRSP.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Account Service Location MSRP begin date: ',
													p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'MRSP END DATE' THEN
				v_SERVICE_LOCATION_MRSP.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_fORMAT,
													'Account Service Location MSRP end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'MRSP ACCOUNT NUMBER' THEN
				v_SERVICE_LOCATION_MRSP.MRSP_ACCOUNT_NUMBER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'MRSP METER READ CYCLE' THEN
				v_SERVICE_LOCATION_MRSP.METER_READ_CYCLE := SUBSTR(v_CURRENT_RECORD, 1, 32);


			ELSIF v_CURRENT_HEADER = 'METER NAME' THEN
				v_METER.METER_NAME := SUBSTR(v_CURRENT_RECORD, 1, 128);
			ELSIF v_CURRENT_HEADER = 'METER ALIAS' THEN
				v_METER.METER_ALIAS := SUBSTR(v_CURRENT_RECORD, 1, 128);
			ELSIF v_CURRENT_HEADER = 'METER DESCRIPTION' THEN
				v_METER.METER_DESC := SUBSTR(v_CURRENT_RECORD, 1, 256);
			ELSIF v_CURRENT_HEADER = 'METER MRSP' THEN
				ID.ID_FOR_MRSP(v_CURRENT_RECORD, v_TMP_ID);
				v_METER.MRSP_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'METER EXTERNAL IDENTIFIER' THEN
				v_METER.METER_EXTERNAL_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 128);
			ELSIF v_CURRENT_HEADER = 'METER STATUS' THEN
				v_METER.METER_STATUS := SUBSTR(v_CURRENT_RECORD, 1, 16);
				--We don't use the return value here, but this ensures that the status exists.
				v_METER_IS_ACTIVE := GET_METER_STATUS_IS_ACTIVE(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'METER INTERVAL' THEN
				v_METER.METER_INTERVAL := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'METER TYPE' THEN
				v_METER.METER_TYPE := SUBSTR(v_CURRENT_RECORD, 1, 8);
			ELSIF v_CURRENT_HEADER = 'METER UNIT' THEN
				v_METER.METER_UNIT := SUBSTR(v_CURRENT_RECORD, 1, 8);
			ELSIF v_CURRENT_HEADER = 'METER IS EXTERNAL INTERVAL USAGE' THEN
				v_METER.IS_EXTERNAL_INTERVAL_USAGE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'METER IS EXTERNAL BILLED USAGE' THEN
				v_METER.IS_EXTERNAL_BILLED_USAGE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'METER IS EXTERNAL FORECAST' THEN
				v_METER.IS_EXTERNAL_FORECAST := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'METER CHANNEL NUMBER' THEN
				v_METER_CHANNEL.METER_POINT_NAME := v_CURRENT_RECORD;
			ELSIF v_CURRENT_HEADER = 'METER CHANNEL DESCRIPTION' THEN
				v_METER_CHANNEL.METER_POINT_DESC := v_CURRENT_RECORD;
			ELSIF v_CURRENT_HEADER = 'METER CHANNEL UOM' THEN
				v_METER_CHANNEL.UOM := v_CURRENT_RECORD;
			ELSIF v_CURRENT_HEADER = 'METER CHANNEL INTERVAL' THEN
				v_METER_CHANNEL.METER_POINT_INTERVAL := v_CURRENT_RECORD;
			ELSIF v_CURRENT_HEADER = 'METER CHANNEL OP CODE' THEN
				v_METER_CHANNEL.OPERATION_CODE := SUBSTR(v_CURRENT_RECORD, 1, 1);
			ELSIF v_CURRENT_HEADER = 'METER BEGIN DATE' THEN
				v_SERVICE_LOCATION_METER.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Service Location Meter begin date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'METER END DATE' THEN
				v_SERVICE_LOCATION_METER.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Service Location Meter end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'METER IS ESTIMATED END DATE' THEN
				v_SERVICE_LOCATION_METER.IS_ESTIMATED_END_DATE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'METER EDC IDENTIFIER' THEN
				v_SERVICE_LOCATION_METER.EDC_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'METER ESP IDENTIFIER' THEN
				v_SERVICE_LOCATION_METER.ESP_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'METER NEXT ACTION DATE' THEN
				v_SERVICE_LOCATION_METER.NEXT_ACTION_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Service Location Meter next action end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'METER EDC RATE CLASS' THEN
				v_SERVICE_LOCATION_METER.EDC_RATE_CLASS := SUBSTR(v_CURRENT_RECORD, 1, 16);


			ELSIF v_CURRENT_HEADER = 'CONTRACT NAME' THEN
				v_SERVICE_CONTRACT.CONTRACT_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'CONTRACT ALIAS' THEN
				v_SERVICE_CONTRACT.CONTRACT_ALIAS := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'CONTRACT DESCRIPTION' THEN
				v_SERVICE_CONTRACT.CONTRACT_DESC := SUBSTR(v_CURRENT_RECORD, 1, 256);
			ELSIF v_CURRENT_HEADER = 'CONTRACT EXTERNAL IDENTIFIER' THEN
				v_SERVICE_CONTRACT.EXTERNAL_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'CONTRACT BEGIN DATE' THEN
				v_SERVICE_CONTRACT.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Service Contract begin date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'CONTRACT END DATE' THEN
				v_SERVICE_CONTRACT.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Service Contract end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'CONTRACT IS ESTIMATED END DATE' THEN
				v_SERVICE_CONTRACT.IS_ESTIMATED_END_DATE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'CONTRACT IS EVERGREEN' THEN
				v_SERVICE_CONTRACT.IS_EVERGREEN := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'CONTRACT IS INTERRUPTIBLE' THEN
				v_SERVICE_CONTRACT.IS_INTERRUPTIBLE := GET_BOOLEAN_NUMBER(v_CURRENT_RECORD);
			ELSIF v_CURRENT_HEADER = 'CONTRACT EXPECTED RENEWAL PCT' THEN
				v_SERVICE_CONTRACT.EXPECTED_RENEWAL_PCT := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
															'Account Service Contract Renewal Percentage: ',
															p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'CONTRACT NEXT ACTION DATE' THEN
				v_SERVICE_CONTRACT.NEXT_ACTION_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Service Contract next action end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'CONTRACT ACCOUNT BEGIN DATE' THEN
				v_CONTRACT_ACCOUNT.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Contract Account begin date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'CONTRACT ACCOUNT END DATE' THEN
				v_SERVICE_CONTRACT.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Service Contract end date: ',
													p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'CALENDAR NAME' THEN
				v_CALENDAR_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'CALENDAR TYPE' THEN
				v_ACCOUNT_CALENDAR.CALENDAR_TYPE := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'CALENDAR BEGIN DATE' THEN
				v_ACCOUNT_CALENDAR.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Calendar begin date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'CALENDAR END DATE' THEN
				v_ACCOUNT_CALENDAR.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Calendar end date: ',
													p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'CALENDAR CASE NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
												EC.ED_CASE_LABEL,
												1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Case for Account Calendar: ' ||
						v_CURRENT_RECORD, p_SUCCESS);
				END IF;

				v_ACCOUNT_CALENDAR.CASE_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'LOSS FACTOR NAME' THEN
				v_LOSS_FACTOR_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'LOSS FACTOR BEGIN DATE' THEN
				v_ACCOUNT_LOSS_FACTOR.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Loss Factor begin date: ',
													p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'LOSS FACTOR END DATE' THEN
				v_ACCOUNT_LOSS_FACTOR.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Loss Factor end date: ',
													p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'LOSS FACTOR CASE NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
												EC.ED_CASE_LABEL,
												1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Case for Account Loss Factor: '
						|| v_CURRENT_RECORD, p_SUCCESS);
				END IF;

				v_ACCOUNT_LOSS_FACTOR.CASE_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'USAGE FACTOR BEGIN DATE' THEN
				v_ACCOUNT_USAGE_FACTOR.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Usage Factor begin date: ',
													p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'USAGE FACTOR END DATE' THEN
				v_ACCOUNT_USAGE_FACTOR.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Usage Factor end date: ',
													p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'USAGE FACTOR VALUE' THEN
				v_ACCOUNT_USAGE_FACTOR.FACTOR_VAL := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
															'Factor Value: ',
															p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'USAGE FACTOR CASE NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
												EC.ED_CASE_LABEL,
												1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Case for Account Usage Factor: '
						|| v_CURRENT_RECORD, p_SUCCESS);
				END IF;

				v_ACCOUNT_USAGE_FACTOR.CASE_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'ACCOUNT METER NAME' THEN
				v_ACCOUNT_METER.METER_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT METER BEGIN DATE' THEN
				v_ACCOUNT_METER.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Meter begin date: ',
													p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'ACCOUNT METER END DATE' THEN
				v_ACCOUNT_METER.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
													p_DATE_FORMAT,
													'Account Meter end date: ',
													p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'ACCOUNT METER USAGE FACTOR' THEN
				v_ACCOUNT_METER.USAGE_FACTOR := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
															'Account Meter Usage Factor: ',
															p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT NAME' THEN
				v_ACCOUNT_CONTACT.CONTACT_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT ALIAS' THEN
				v_ACCOUNT_CONTACT.CONTACT_ALIAS := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT DESCRIPTION' THEN
				v_ACCOUNT_CONTACT.CONTACT_DESC := SUBSTR(v_CURRENT_RECORD, 1, 256);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT EMAIL ADDRESS' THEN
				v_ACCOUNT_CONTACT.EMAIL_ADDRESS := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT FIRST NAME' THEN
				v_ACCOUNT_CONTACT.FIRST_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT MIDDLE NAME' THEN
				v_ACCOUNT_CONTACT.MIDDLE_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT LAST NAME' THEN
				v_ACCOUNT_CONTACT.LAST_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT SALUTATION' THEN
				v_ACCOUNT_CONTACT.SALUTATION := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT EXTERNAL IDENTIFIER' THEN
				v_ACCOUNT_CONTACT.EXTERNAL_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT PHONE TYPE' THEN
				v_ACCOUNT_PHONE_NUMBER.PHONE_TYPE := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT PHONE NUMBER' THEN
				v_ACCOUNT_PHONE_NUMBER.PHONE_NUMBER := SUBSTR(v_CURRENT_RECORD, 1, 24);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT CONTACT CATEGORY' THEN
				v_ACCOUNT_CONTACT_CATEGORY := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS NAME' THEN
				v_ACCOUNT_ADDRESS.ADDRESS_NAME := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS ALIAS' THEN
				v_ACCOUNT_ADDRESS.ADDRESS_ALIAS := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS DESCRIPTION' THEN
				v_ACCOUNT_ADDRESS.ADDRESS_DESC := SUBSTR(v_CURRENT_RECORD, 1, 256);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS STREET' THEN
				v_ACCOUNT_ADDRESS.STREET := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS STREET 2' THEN
				v_ACCOUNT_ADDRESS.STREET2 := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS CITY' THEN
				v_ACCOUNT_ADDRESS.CITY := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS STATE CODE' THEN
				v_ACCOUNT_ADDRESS.STATE_CODE := SUBSTR(v_CURRENT_RECORD, 1, 2);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS POSTAL CODE' THEN
				v_ACCOUNT_ADDRESS.POSTAL_CODE := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS COUNTRY CODE' THEN
				v_ACCOUNT_ADDRESS.COUNTRY_CODE := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS EXTERNAL IDENTIFIER' THEN
				v_ACCOUNT_ADDRESS.EXTERNAL_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ADDRESS CATEGORY' THEN
				v_ACCOUNT_ADDRESS_CATEGORY := SUBSTR(v_CURRENT_RECORD, 1, 32);


			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT NAME' THEN
				v_SL_CONTACT.CONTACT_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT ALIAS' THEN
				v_SL_CONTACT.CONTACT_ALIAS := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT DESCRIPTION' THEN
				v_SL_CONTACT.CONTACT_DESC := SUBSTR(v_CURRENT_RECORD, 1, 256);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT EMAIL ADDRESS' THEN
				v_SL_CONTACT.EMAIL_ADDRESS := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT FIRST NAME' THEN
				v_SL_CONTACT.FIRST_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT MIDDLE NAME' THEN
				v_SL_CONTACT.MIDDLE_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT LAST NAME' THEN
				v_SL_CONTACT.LAST_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT SALUTATION' THEN
				v_SL_CONTACT.SALUTATION := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT EXTERNAL IDENTIFIER' THEN
				v_SL_CONTACT.EXTERNAL_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT PHONE TYPE' THEN
				v_SL_PHONE_NUMBER.PHONE_TYPE := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT PHONE NUMBER' THEN
				v_SL_PHONE_NUMBER.PHONE_NUMBER := SUBSTR(v_CURRENT_RECORD, 1, 24);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION CONTACT CATEGORY' THEN
				v_SL_CONTACT_CATEGORY := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS NAME' THEN
				v_SL_ADDRESS.ADDRESS_NAME := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS ALIAS' THEN
				v_SL_ADDRESS.ADDRESS_ALIAS := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS DESCRIPTION' THEN
				v_SL_ADDRESS.ADDRESS_DESC := SUBSTR(v_CURRENT_RECORD, 1, 256);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS STREET' THEN
				v_SL_ADDRESS.STREET := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS STREET 2' THEN
				v_SL_ADDRESS.STREET2 := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS CITY' THEN
				v_SL_ADDRESS.CITY := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS STATE CODE' THEN
				v_SL_ADDRESS.STATE_CODE := SUBSTR(v_CURRENT_RECORD, 1, 2);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS POSTAL CODE' THEN
				v_SL_ADDRESS.POSTAL_CODE := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS COUNTRY CODE' THEN
				v_SL_ADDRESS.COUNTRY_CODE := SUBSTR(v_CURRENT_RECORD, 1, 16);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS EXTERNAL IDENTIFIER' THEN
				v_SL_ADDRESS.EXTERNAL_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 64);
			ELSIF v_CURRENT_HEADER = 'SERVICE LOCATION ADDRESS CATEGORY' THEN
				v_SL_ADDRESS_CATEGORY := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'DER NAME' THEN
				v_DER.DER_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'DER BEGIN DATE' THEN
				v_DER.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
														p_DATE_FORMAT,
														'DER Begin Date: ',
														p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'DER END DATE' THEN
				v_DER.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
														p_DATE_FORMAT,
														'DER End Date: ',
														p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'DER SERIAL NUMBER' THEN
				v_DER.SERIAL_NUMBER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'DER TYPE' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
																EC.ED_DER_TYPE, 1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown DER TYPE (' || v_CURRENT_RECORD || ') for DER ' || v_DER.DER_NAME,
													p_SUCCESS);
				END IF;

				v_DER.DER_TYPE_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'DER EXTERNAL SYSTEM' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
																EC.ED_EXTERNAL_SYSTEM, 1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown External System (' || v_CURRENT_RECORD || ') for DER ' || v_DER.DER_NAME,
													p_SUCCESS);
				END IF;

				v_DER.EXTERNAL_SYSTEM_ID := v_TMP_ID;
            ELSIF v_CURRENT_HEADER = 'DER EXTERNAL IDENTIFIER' THEN
                v_DER.EXTERNAL_IDENTIFIER := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'DER CALENDAR NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
																EC.ED_CALENDAR, 1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Calendar (' || v_CURRENT_RECORD || ') for DER ' || v_DER.DER_NAME,
													p_SUCCESS);
				END IF;

				v_DER_CALENDAR.CALENDAR_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'DER CALENDAR BEGIN DATE' THEN
				v_DER_CALENDAR.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'DER Calendar Begin Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'DER CALENDAR END DATE' THEN
				v_DER_CALENDAR.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'DER Calendar End Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'DER CALENDAR CASE NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD, EC.ED_CASE_LABEL);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Case ' || v_CURRENT_RECORD || ' for the '
						|| 'DER Calendar assignment cannot be found.', p_SUCCESS);
				END IF;

				v_DER_CALENDAR.CASE_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'DER SCALE FACTOR' THEN
				v_DER_SCALE_FACTOR.SCALE_FACTOR := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
																			'DER Scale Factor: ',
																			p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'DER SCALE FACTOR BEGIN DATE' THEN
				v_DER_SCALE_FACTOR.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'DER Scale Factor Begin Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'DER SCALE FACTOR END DATE' THEN
				v_DER_SCALE_FACTOR.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'DER Scale Factor End Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'DER SCALE FACTOR CASE NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD, EC.ED_CASE_LABEL);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Case ' || v_CURRENT_RECORD || ' for the '
						|| 'DER Scale Factor assignment cannot be found.', p_SUCCESS);
				END IF;

				v_DER_SCALE_FACTOR.CASE_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'DER PROGRAM NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
																EC.ED_PROGRAM, 1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Program (' || v_CURRENT_RECORD || ') for DER ' || v_DER.DER_NAME,
													p_SUCCESS);
				END IF;

				v_DER_PROGRAM.PROGRAM_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'DER PROGRAM BEGIN DATE' THEN
				v_DER_PROGRAM.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'DER Program Begin Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'DER PROGRAM END DATE' THEN
				v_DER_PROGRAM.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'DER Program End Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'DER PROGRAM COUNT' THEN
				v_DER_PROGRAM.COUNT := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
																	'DER Program Count: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'ENTITY GROUP NAME' THEN
				v_ENTITY_GROUP_NAME := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ENTITY GROUP CATEGORY' THEN
				v_ENTITY_GROUP_CATEGORY := SUBSTR(v_CURRENT_RECORD, 1, 32);
			ELSIF v_CURRENT_HEADER = 'ENTITY GROUP BEGIN DATE' THEN
				v_ENTITY_GROUP_ASSIGNMENT.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'Entity Group Begin Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'ENTITY GROUP END DATE' THEN
				v_ENTITY_GROUP_ASSIGNMENT.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'Entity Group End Date: ',
																	p_SUCCESS);

			ELSIF v_CURRENT_HEADER = 'ACCOUNT ANCILLARY SERVICE NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
												EC.ED_ANCILLARY_SERVICE,
												1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Ancillary Service (' || v_CURRENT_RECORD || ') for Account ' || v_ACCOUNT.ACCOUNT_NAME,
													p_SUCCESS);
				END IF;

				v_ACCOUNT_ANCILLARY.ANCILLARY_SERVICE_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ANCILLARY SERVICE VALUE' THEN
				v_ACCOUNT_ANCILLARY.SERVICE_VAL := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
																			'Account Ancillary Service Value: ',
																			p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ANCILLARY SERVICE BEGIN DATE' THEN
				v_ACCOUNT_ANCILLARY.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'Account Ancillary Service Begin Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'ACCOUNT ANCILLARY SERVICE END DATE' THEN
				v_ACCOUNT_ANCILLARY.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'Account Ancillary Service End Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'METER ANCILLARY SERVICE NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
												EC.ED_ANCILLARY_SERVICE,
												1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Ancillary Service (' || v_CURRENT_RECORD || ') for Meter ' || v_METER.METER_NAME,
													p_SUCCESS);
				END IF;

				v_METER_ANCILLARY.ANCILLARY_SERVICE_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'METER ANCILLARY SERVICE VALUE' THEN
				v_METER_ANCILLARY.SERVICE_VAL := DATA_IMPORT.IMPORT_NUMBER(v_CURRENT_RECORD,
																			'Meter Ancillary Service Value: ',
																			p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'METER ANCILLARY SERVICE BEGIN DATE' THEN
				v_METER_ANCILLARY.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'Meter Ancillary Service Begin Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'METER ANCILLARY SERVICE END DATE' THEN
				v_METER_ANCILLARY.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'Meter Ancillary Service End Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'SCHEDULE GROUP NAME' THEN
				v_TMP_ID := EI.GET_ID_FROM_NAME(v_CURRENT_RECORD,
												EC.ED_SCHEDULE_GROUP,
												1);

				IF v_TMP_ID IS NULL THEN
					DATA_IMPORT.LOG_IMPORT_ERROR('Unknown Schedule Group (' || v_CURRENT_RECORD || ')',
													p_SUCCESS);
				END IF;

				v_SCHED_GROUP.SCHEDULE_GROUP_ID := v_TMP_ID;
			ELSIF v_CURRENT_HEADER = 'SCHEDULE GROUP BEGIN DATE' THEN
				v_SCHED_GROUP.BEGIN_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'Schedule Group Begin Date: ',
																	p_SUCCESS);
			ELSIF v_CURRENT_HEADER = 'SCHEDULE GROUP END DATE' THEN
				v_SCHED_GROUP.END_DATE := DATA_IMPORT.IMPORT_DATE(v_CURRENT_RECORD,
																	p_DATE_FORMAT,
																	'Schedule Group End Date: ',
																	p_SUCCESS);
			ELSE
				LOGS.LOG_WARN('Import column not recognized: ' || v_HEADERS(v_INDEX));
			END IF;
		ELSE
			 NULL;

		END IF; --NOT v_CURRENT_RECORD = ''.
	END LOOP;

	IMPORT_ACCOUNT(v_ACCOUNT, v_ACCOUNT_STATUS, v_ACCOUNT_STATUS_NAME, p_SUCCESS);


	IF UPPER(SUBSTR(v_ACCOUNT.ACCOUNT_MODEL_OPTION,1,1)) = 'M' THEN
		IF v_ACCOUNT.ACCOUNT_ID IS NOT NULL AND v_ACCOUNT.ACCOUNT_ID > 0 THEN
			IMPORT_SERVICE_LOCATION(v_SERVICE_LOCATION, v_ACCOUNT_SERVICE_LOCATION, v_SERVICE_LOCATION_MRSP, v_MRSP_NAME, v_ACCOUNT.ACCOUNT_ID, v_SERVICE_LOCATION_ID, p_SUCCESS);
		END IF;
		IMPORT_METER(v_METER, v_SERVICE_LOCATION_METER, v_SERVICE_LOCATION_ID, v_METER_ID, p_SUCCESS);

		IF v_METER_ID IS NOT NULL THEN
			IMPORT_METER_CHANNEL(v_METER_CHANNEL, v_METER_ID, p_SUCCESS);
			IMPORT_METER_ANCILLARY(v_METER_ID, v_METER_ANCILLARY, p_SUCCESS);
			IMPORT_METER_SCHEDULE_GROUP(v_METER_ID, v_SCHED_GROUP, p_SUCCESS);
		END IF;

		IMPORT_ACCOUNT_CALENDAR(v_ACCOUNT_CALENDAR, v_CALENDAR_NAME, 'M', v_METER_ID, p_SUCCESS);
		IMPORT_ACCOUNT_USAGE_FACTOR(v_ACCOUNT_USAGE_FACTOR, 'M', v_METER_ID, p_SUCCESS);
		IMPORT_ACCOUNT_LOSS_FACTOR(v_ACCOUNT_LOSS_FACTOR, v_LOSS_FACTOR_NAME, 'M', v_METER_ID, p_SUCCESS);
		IMPORT_CONTACT_INFO(v_SL_CONTACT, v_SL_PHONE_NUMBER, v_SL_ADDRESS, v_SL_CONTACT_CATEGORY, v_SL_ADDRESS_CATEGORY, 'SERVICE_LOCATION', v_SERVICE_LOCATION_ID, p_SUCCESS);
		IMPORT_ACCOUNT_PRODUCT(v_ACCOUNT_PRODUCT, v_PRODUCT_NAME, 'M', v_METER_ID, p_SUCCESS);
	ELSIF v_ACCOUNT.ACCOUNT_ID IS NOT NULL AND v_ACCOUNT.ACCOUNT_ID > 0  THEN
		IF v_METER_CHANNEL.METER_POINT_NAME IS NOT NULL THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('A meter channel was specified for Account: ' || v_ACCOUNT.ACCOUNT_NAME
				|| ' but it is not meter-modeled.', p_SUCCESS);
		END IF;

		IF v_METER_ANCILLARY.ANCILLARY_SERVICE_ID IS NOT NULL THEN
			DATA_IMPORT.LOG_IMPORT_ERROR('A meter ancillary service was specified for Account: ' || v_ACCOUNT.ACCOUNT_NAME
				|| ' but it is not meter-modeled.', p_SUCCESS);
		END IF;

		IMPORT_SERVICE_LOCATION(v_SERVICE_LOCATION, v_ACCOUNT_SERVICE_LOCATION, v_SERVICE_LOCATION_MRSP, v_MRSP_NAME, v_ACCOUNT.ACCOUNT_ID, v_SERVICE_LOCATION_ID, p_SUCCESS);
		IMPORT_ACCOUNT_CALENDAR(v_ACCOUNT_CALENDAR, v_CALENDAR_NAME, 'A', v_ACCOUNT.ACCOUNT_ID, p_SUCCESS);
		IMPORT_ACCOUNT_USAGE_FACTOR(v_ACCOUNT_USAGE_FACTOR, 'A', v_ACCOUNT.ACCOUNT_ID, p_SUCCESS);
		IMPORT_ACCOUNT_LOSS_FACTOR(v_ACCOUNT_LOSS_FACTOR, v_LOSS_FACTOR_NAME, 'A', v_ACCOUNT.ACCOUNT_ID, p_SUCCESS);
		-- [BZ 28959] import contact info for service locations for non-meter accounts
    IMPORT_CONTACT_INFO(v_SL_CONTACT, v_SL_PHONE_NUMBER, v_SL_ADDRESS, v_SL_CONTACT_CATEGORY, v_SL_ADDRESS_CATEGORY, 'SERVICE_LOCATION', v_SERVICE_LOCATION_ID, p_SUCCESS);
		IMPORT_ACCOUNT_METER(v_ACCOUNT_METER, v_ACCOUNT.ACCOUNT_ID, p_SUCCESS);
		IMPORT_ACCOUNT_PRODUCT(v_ACCOUNT_PRODUCT, v_PRODUCT_NAME, 'A', v_ACCOUNT.ACCOUNT_ID, p_SUCCESS);
		IMPORT_ACCOUNT_SCHEDULE_GROUP(v_ACCOUNT.ACCOUNT_ID, v_SCHED_GROUP, p_SUCCESS);
	END IF;

	IF v_DER.DER_NAME IS NOT NULL AND v_SERVICE_LOCATION.SERVICE_LOCATION_NAME IS NULL THEN
		DATA_IMPORT.LOG_IMPORT_ERROR('A DER cannot be imported without its parent Service Location.',
			p_SUCCESS);
	END IF;

	IF v_ACCOUNT.ACCOUNT_ID IS NOT NULL AND v_ACCOUNT.ACCOUNT_ID > 0 THEN
		IF v_SERVICE_LOCATION_ID IS NOT NULL THEN
			IMPORT_SERVICE_LOCATION_PROG(v_SLP, v_SERVICE_LOCATION_ID, p_SUCCESS);
			IMPORT_DER(v_DER, v_SERVICE_LOCATION_ID, v_DER_ID, p_SUCCESS);
			IF v_DER_ID IS NOT NULL THEN
				IMPORT_DER_CALENDAR(v_DER_CALENDAR, v_DER_ID, p_SUCCESS);
				IMPORT_DER_SCALE_FACTOR(v_DER_SCALE_FACTOR, v_DER_ID, p_SUCCESS);
				IMPORT_DER_PROGRAM(v_DER_PROGRAM, v_DER_ID, p_SUCCESS);
			END IF;
		END IF;

		IMPORT_CONTRACT(v_SERVICE_CONTRACT, v_CONTRACT_ACCOUNT, v_ACCOUNT.ACCOUNT_ID, p_SUCCESS);
		IMPORT_ACCOUNT_EDC(v_ACCOUNT_EDC, v_EDC_NAME, v_ACCOUNT.ACCOUNT_ID, p_SUCCESS);
		IMPORT_ACCOUNT_ESP(v_ACCOUNT.ACCOUNT_MODEL_OPTION, v_ACCOUNT_ESP, v_ESP_NAME, v_ACCOUNT.ACCOUNT_ID, p_SUCCESS);
		IMPORT_CONTACT_INFO(v_ACCOUNT_CONTACT, v_ACCOUNT_PHONE_NUMBER, v_ACCOUNT_ADDRESS, v_ACCOUNT_CONTACT_CATEGORY, v_ACCOUNT_ADDRESS_CATEGORY, 'ACCOUNT', v_ACCOUNT.ACCOUNT_ID, p_SUCCESS);
		IMPORT_ENTITY_GROUP(v_ACCOUNT.ACCOUNT_ID, v_ENTITY_GROUP_NAME, v_ENTITY_GROUP_CATEGORY, v_ENTITY_GROUP_ASSIGNMENT, p_SUCCESS);
		IMPORT_ACCOUNT_ANCILLARY(V_ACCOUNT.ACCOUNT_ID, v_ACCOUNT_ANCILLARY, p_SUCCESS);
	END IF;

END IMPORT_ACCOUNT_LINE;
----------------------------------------------------------------------------------------------------
END ACCOUNT_IMPORT;
/
