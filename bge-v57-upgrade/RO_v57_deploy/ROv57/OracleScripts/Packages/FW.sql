CREATE OR REPLACE PACKAGE FW AS
--Revision $Revision: 1.27 $

-- Forecasting Weather and WRF Package

FUNCTION WHAT_VERSION RETURN VARCHAR;

FUNCTION INTERVAL_DIVISOR
	(
	p_INTERVAL IN NUMBER
	)  RETURN NUMBER;

PROCEDURE FILL_PROFILE
	(
	p_INTERVALS IN PLS_INTEGER,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	);

PROCEDURE FILL_PROFILE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	);

FUNCTION GET_PROFILE_NAME
	(
	p_PROFILE_ID IN NUMBER
	) RETURN VARCHAR;

PROCEDURE RELEASE_WEATHER;

FUNCTION GET_STATION_FOR_ACCOUNT
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_DATE IN DATE
	) RETURN NUMBER;

FUNCTION PROFILE_IS_EXTERNAL
	(
	p_PROFILE_ID IN NUMBER
	) RETURN BOOLEAN;

PROCEDURE WEATHER_FOR_INDEXED_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_STATION_ID IN NUMBER,
	p_ADJUSTMENT_OPTION IN VARCHAR,
	p_EDC_ID IN NUMBER,
	p_POST_TO_APP_EVENT_LOG IN BOOLEAN,
	p_EFFECTIVE_TEMPERATURE IN OUT NOCOPY GA.NUMBER_TABLE
	);

PROCEDURE WEATHER_INDEXED_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROFILE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PROFILE_INTERVAL IN NUMBER,
	p_PROFILE_AS_OF_DATE IN DATE,
	p_EFFECTIVE_TEMPERATURE IN OUT NOCOPY GA.NUMBER_TABLE,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	);

PROCEDURE WEATHER_FOR_WRF_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_STATION_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_POST_TO_APP_EVENT_LOG IN BOOLEAN,
	p_WRF_OBSERVATIONS IN OUT NOCOPY WRF_OBSERVATION_TABLE
	);

PROCEDURE WRF_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROFILE_ID IN NUMBER,
	p_PROFILE_INTERVAL IN NUMBER,
	p_PROFILE_AS_OF_DATE IN DATE,
	p_WRF_OBSERVATIONS IN OUT NOCOPY WRF_OBSERVATION_TABLE,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	);

PROCEDURE CACHE_CUSTOMER_USAGE_WRF_DAY
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE
	);

PROCEDURE INIT_CUSTOMER_WRF_CACHE
	(
	p_CAST_CONTEXT IN OUT NOCOPY CAST_CONTEXT_TYPE
	);

PROCEDURE CUSTOMER_USAGE_WRF_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_AGGREGATE_ID IN NUMBER,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	);

PROCEDURE USAGE_WRF_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROFILE_ID IN NUMBER,
	p_PROFILE_INTERVAL IN NUMBER,
	p_PROFILE_AS_OF_DATE IN DATE,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	);

PROCEDURE WRF_PROFILE_PROJECTION
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROFILE_ID IN NUMBER,
	p_PROJECTION_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TRACE_ON IN NUMBER,
	p_WRF_VAR_1 IN OUT NOCOPY GA.NUMBER_TABLE,
	p_WRF_VAR_2 IN OUT NOCOPY GA.NUMBER_TABLE,
	p_WRF_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);

--CONSTANTS
g_OFF CONSTANT NUMBER(1) := 0;
g_ON CONSTANT NUMBER(1) := 1;
g_LOW_DATE CONSTANT DATE := LOW_DATE;
g_HIGH_DATE CONSTANT DATE := HIGH_DATE;
g_ANY_DAY CONSTANT NUMBER(1) := 1;

--VARIABLES
g_STATIONS_PARAMETERS_CACHED BOOLEAN := FALSE;
g_WEATHER_INDEX_SAVE GA.BOOLEAN_TABLE;
g_OBJECT_NAME VARCHAR(32);
g_EVENT_TEXT VARCHAR(512);

TYPE WEATHER_STATION_RECORD IS RECORD(STATION_INDEX NUMBER(6), STATION_NAME VARCHAR(32), IS_COMPOSITE BOOLEAN);
TYPE WEATHER_STATION_TABLE IS TABLE OF WEATHER_STATION_RECORD INDEX BY BINARY_INTEGER;
g_WEATHER_STATION WEATHER_STATION_TABLE;

TYPE WEATHER_PARAMETER_RECORD IS RECORD(PARAMETER_INDEX NUMBER(6), PARAMETER_NAME VARCHAR(32), PARAMETER_CATEGORY VARCHAR(32), PARAMETER_INTERVAL VARCHAR(16));
TYPE WEATHER_PARAMETER_TABLE IS TABLE OF WEATHER_PARAMETER_RECORD INDEX BY BINARY_INTEGER;
g_WEATHER_PARAMETER WEATHER_PARAMETER_TABLE;

g_WEATHER_PARAMETER_CACHE GA.NUMBER_TABLE;
g_WEATHER_STATION_IS_CACHED GA.BOOLEAN_TABLE;

TYPE WRF_RECORD IS RECORD
		(
	WRF_LINE_NBR LOAD_PROFILE_WRF.WRF_LINE_NBR%TYPE,
	SEGMENT_MIN LOAD_PROFILE_WRF.SEGMENT_MIN%TYPE,
	SEGMENT_MAX LOAD_PROFILE_WRF.SEGMENT_MAX%TYPE,
	WRF_HOUR LOAD_PROFILE_WRF_LINE.WRF_HOUR%TYPE,
	COEFF_0 LOAD_PROFILE_WRF_LINE.COEFF_0%TYPE,
	COEFF_1 LOAD_PROFILE_WRF_LINE.COEFF_1%TYPE,
	COEFF_2 LOAD_PROFILE_WRF_LINE.COEFF_2%TYPE,
	COEFF_3 LOAD_PROFILE_WRF_LINE.COEFF_2%TYPE,
	COEFF_4 LOAD_PROFILE_WRF_LINE.COEFF_2%TYPE,
	COEFF_5 LOAD_PROFILE_WRF_LINE.COEFF_2%TYPE
	);
TYPE WRF_TABLE IS TABLE OF WRF_RECORD INDEX BY BINARY_INTEGER;

TYPE t_INTEGER_TABLE IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
g_CUST_USAGE_WRF_IDX_START  t_INTEGER_TABLE;
g_CUST_USAGE_WRF_IDX_STOP   t_INTEGER_TABLE;

TYPE t_WRF_CACHE_REC IS RECORD
(
   AGGREGATE_ID NUMBER(9),
   CUSTOMER_ID NUMBER(9),
   WRF_VAL NUMBER(18,4)
);
TYPE t_WRF_CACHE_TABLE IS TABLE OF t_WRF_CACHE_REC INDEX BY PLS_INTEGER;

g_CUSTOMER_USAGE_WRF t_WRF_CACHE_TABLE;
END FW;
/
CREATE OR REPLACE PACKAGE BODY FW AS
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.27 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
FUNCTION INTERVAL_DIVISOR
	(
	p_INTERVAL IN NUMBER
	)  RETURN NUMBER IS
BEGIN

   IF p_INTERVAL IN (1,24,48,96) THEN
      RETURN 1/p_INTERVAL;
   ELSE
      RETURN 1/24;
   END IF;

END INTERVAL_DIVISOR;
---------------------------------------------------------------------------------------------------
PROCEDURE FILL_PROFILE
	(
	p_INTERVALS IN PLS_INTEGER,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

v_INDEX BINARY_INTEGER;

BEGIN

	FOR v_INDEX IN 1..p_INTERVALS LOOP
		p_PROFILE(v_INDEX) := 0;
	END LOOP;

END FILL_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE FILL_PROFILE
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

v_INTERVALS NUMBER;

BEGIN

	v_INTERVALS := (TRUNC((p_END_DATE - p_BEGIN_DATE) / GA.HOUR_DIVISOR)) + 1;
	FILL_PROFILE(v_INTERVALS, p_PROFILE);

END FILL_PROFILE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PROFILE_NAME
	(
	p_PROFILE_ID IN NUMBER
	) RETURN VARCHAR IS

-- Answer the profile name of the associated profile id.

v_PROFILE_NAME LOAD_PROFILE.PROFILE_NAME%TYPE;

BEGIN

	SELECT SUBSTR(PROFILE_NAME,1,32)
	INTO v_PROFILE_NAME
	FROM LOAD_PROFILE
	WHERE PROFILE_ID = p_PROFILE_ID
		AND ROWNUM = 1;

	RETURN v_PROFILE_NAME;

 	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN '?';

END GET_PROFILE_NAME;
----------------------------------------------------------------------------------------------------
FUNCTION LOOKUP_INDEX
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_INTERVAL IN NUMBER
	) RETURN NUMBER IS

v_STATION_ID NUMBER(9);
v_PARAMETER_ID NUMBER(9);

BEGIN

	IF g_WEATHER_STATION.EXISTS(p_STATION_ID) THEN
		v_STATION_ID := g_WEATHER_STATION(p_STATION_ID).STATION_INDEX;
	ELSE
		v_STATION_ID := CONSTANTS.NOT_ASSIGNED;
	END IF;

	IF g_WEATHER_PARAMETER.EXISTS(p_PARAMETER_ID) THEN
		v_PARAMETER_ID := g_WEATHER_PARAMETER(p_PARAMETER_ID).PARAMETER_INDEX;
	ELSE
		v_PARAMETER_ID := CONSTANTS.NOT_ASSIGNED;
	END IF;

	RETURN (v_STATION_ID * 10000 + v_PARAMETER_ID * 100 + p_INTERVAL);

END LOOKUP_INDEX;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PARAMETER_ID_FOR_CATEGORY
	(
	p_CATEGORY IN VARCHAR
	) RETURN NUMBER IS

v_PARAMETER_ID NUMBER(9) := CONSTANTS.NOT_ASSIGNED;
v_INDEX BINARY_INTEGER;

BEGIN

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('GET_PARAMETER_ID_FOR_CATEGORY');
		LOGS.LOG_DEBUG('CATEGORY=' || p_CATEGORY);
	END IF;

	v_INDEX := g_WEATHER_PARAMETER.FIRST;
	WHILE v_INDEX <= g_WEATHER_PARAMETER.LAST LOOP
		IF UPPER(g_WEATHER_PARAMETER(v_INDEX).PARAMETER_CATEGORY) = UPPER(p_CATEGORY) THEN
			RETURN v_INDEX;
		END IF;
		v_INDEX := g_WEATHER_PARAMETER.NEXT(v_INDEX);
	END LOOP;

	RETURN v_PARAMETER_ID;

END GET_PARAMETER_ID_FOR_CATEGORY;
----------------------------------------------------------------------------------------------------
PROCEDURE RELEASE_WEATHER AS

BEGIN
	g_WEATHER_STATION_IS_CACHED.DELETE;
	g_WEATHER_PARAMETER_CACHE.DELETE;
	g_CUSTOMER_USAGE_WRF.DELETE;
END RELEASE_WEATHER;
---------------------------------------------------------------------------------------------------
PROCEDURE GET_PARAMETER_VALUES
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_VALUES IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

v_SERVICE_DATE DATE;
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_INTERVAL BINARY_INTEGER;
v_INDEX BINARY_INTEGER := 1;
v_PARAMETER_INTERVAL_MINUTES NUMBER(4) := 60;
v_INTERVAL_DIVISOR NUMBER;

BEGIN

	UT.CUT_DAY_INTERVAL_RANGE(p_CAST_CONTEXT.MODEL_ID, p_CAST_CONTEXT.SERVICE_DATE, LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
	v_SERVICE_DATE := v_BEGIN_DATE;

	IF g_WEATHER_PARAMETER.EXISTS(p_PARAMETER_ID) THEN
		SELECT DECODE(UPPER(SUBSTR(g_WEATHER_PARAMETER(p_PARAMETER_ID).PARAMETER_INTERVAL,1,2)), '15', 15, '30', 30, 'HO', 60, 'DA', 1440, 60) INTO v_PARAMETER_INTERVAL_MINUTES FROM DUAL;
	ELSE
		IF p_CAST_CONTEXT.MODEL_ID = GA.GAS_MODEL THEN
			v_PARAMETER_INTERVAL_MINUTES := 1440;
		END IF;
	END IF;

	v_INTERVAL_DIVISOR := INTERVAL_DIVISOR(1440 / v_PARAMETER_INTERVAL_MINUTES);

	WHILE v_SERVICE_DATE <= v_END_DATE LOOP
		v_INTERVAL := ROUND((v_SERVICE_DATE - v_BEGIN_DATE) / v_INTERVAL_DIVISOR) + 1;
		v_INDEX := LOOKUP_INDEX(p_STATION_ID, p_PARAMETER_ID, v_INTERVAL);
		IF g_WEATHER_PARAMETER_CACHE.EXISTS(v_INDEX) THEN
			p_VALUES(v_INTERVAL) := g_WEATHER_PARAMETER_CACHE(v_INDEX);
		ELSE
			IF p_PARAMETER_ID = CONSTANTS.NOT_ASSIGNED THEN
				p_VALUES(v_INTERVAL) := 0;
			ELSE
				p_VALUES(v_INTERVAL) := 999;
			END IF;
		END IF;
		v_SERVICE_DATE := ADD_MINUTES_TO_DATE(v_SERVICE_DATE, v_PARAMETER_INTERVAL_MINUTES);
	END LOOP;

END GET_PARAMETER_VALUES;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_PARAMETER_VALUES
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_STATION_ID IN NUMBER,
	p_CATEGORY IN VARCHAR,
	p_VALUES IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

v_PARAMETER_ID NUMBER(9);

BEGIN

	v_PARAMETER_ID := GET_PARAMETER_ID_FOR_CATEGORY(p_CATEGORY);

	GET_PARAMETER_VALUES(p_CAST_CONTEXT, p_STATION_ID, v_PARAMETER_ID, p_VALUES);

END GET_PARAMETER_VALUES;
----------------------------------------------------------------------------------------------------
PROCEDURE COERCE_PARAMETER_VALUES
	(
	p_INTERVALS IN NUMBER,
	p_VALUES IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

v_AVG NUMBER;
v_SKIP BINARY_INTEGER;

BEGIN

-- Coerce the Weather Parameter Data to match the expected Profile Pattern.

--Copy intervals 4..25 to 3..24 (option A) and delete interval 25 for the DST Fall Back Day to make a 24 interval period to match the expected Profile Pattern.
	IF p_VALUES.COUNT = 25 AND p_INTERVALS = 24 THEN
		IF GA.DST_FALL_BACK_OPTION = 'A' THEN
			FOR v_INDEX IN 3..24 LOOP
				 p_VALUES(v_INDEX) := p_VALUES(v_INDEX + 1);
			END LOOP;
		END IF;
		p_VALUES.DELETE(25);

--Add a place-holder interval (at 2,3, or 24 based on option) for the DST Spring Ahead Day to make a 24 interval period to match the expected Profile Pattern.
	ELSIF p_VALUES.COUNT = 23 AND p_INTERVALS = 24 THEN
		IF GA.DST_SPRING_AHEAD_OPTION = 'A' THEN
			v_SKIP := 2;
		ELSIF GA.DST_SPRING_AHEAD_OPTION = 'B' THEN
			v_SKIP := 3;
		ELSE
			v_SKIP := 24;
		END IF;
		FOR v_INDEX IN REVERSE v_SKIP + 1..24 LOOP
			 p_VALUES(v_INDEX) := p_VALUES(v_INDEX - 1);
		END LOOP;
		p_VALUES(v_SKIP) := 999;
	END IF;

-- Expand the Weather Parameter Data to match larger Profile Interval Patterns.
	IF p_VALUES.COUNT > 0 AND NOT p_INTERVALS = p_VALUES.COUNT THEN
		IF p_VALUES.COUNT = 24 THEN
			IF p_INTERVALS = 1 THEN
				p_VALUES.DELETE(2,24);
			ELSIF p_INTERVALS = 48 THEN
				FOR v_INDEX IN REVERSE 2..24 LOOP
					p_VALUES(v_INDEX * 2) := p_VALUES(v_INDEX);
					p_VALUES(v_INDEX * 2 - 1) := ROUND((p_VALUES(v_INDEX) + p_VALUES(v_INDEX - 1)) / 2);
				END LOOP;
			ELSIF p_INTERVALS = 96 THEN
				FOR v_INDEX IN REVERSE 2..24 LOOP
					v_AVG := ROUND((p_VALUES(v_INDEX) + p_VALUES(v_INDEX - 1)) / 2);
					p_VALUES(v_INDEX * 4) := p_VALUES(v_INDEX);
					p_VALUES(v_INDEX * 4 - 1) := v_AVG;
					p_VALUES(v_INDEX * 4 - 2) := v_AVG;
					p_VALUES(v_INDEX * 4 - 3) := v_AVG;
				END LOOP;
			END IF;
		END IF;
	END IF;

END COERCE_PARAMETER_VALUES;
----------------------------------------------------------------------------------------------------
FUNCTION HEAT_INDEX_A
	(
	p_T NUMBER,
	p_RH NUMBER
	) RETURN NUMBER IS

v_ET NUMBER;

BEGIN
	v_ET := 16.923 +
		(1.85212 * POWER(10, -1) * p_T) +
		(5.37941 * p_RH) -
		(1.00254 * POWER(10, -1) * p_T * p_RH) +
		(9.41695 * POWER(10, -3) * POWER(p_T, 2)) +
		(7.28898 * POWER(10, -3) * POWER(p_RH, 2)) +
		(3.45372 * POWER(10, -4) * (POWER(p_T, 2) * p_RH)) -
		(8.14971 * POWER(10, -4) * p_T * POWER(p_RH, 2)) +
		(1.02102 * POWER(10, -5) * POWER(p_T, 2) * POWER(p_RH, 2)) -
		(3.86460 * POWER(10, -5) * POWER(p_T, 3)) +
		(2.91583 * POWER(10, -5) * POWER(p_RH, 3)) +
		(1.42721 * POWER(10, -6) * POWER(p_T, 3) * p_RH) +
		(1.97483 * POWER(10, -7) * p_T * POWER(p_RH, 3)) -
		(2.18429 * POWER(10, -8) * POWER(p_T, 3) * POWER(p_RH, 2)) +
		(8.43296 * POWER(10, -10) * POWER(p_T, 2) * POWER(p_RH, 3)) -
		(4.81975 * POWER(10, -11) * POWER(p_T, 3) * POWER(p_RH, 3));

	IF GA.ENABLE_RTM_PROCESS_MODE THEN
		RETURN v_ET;
	ELSE
		RETURN GREATEST(v_ET, p_T);
	END IF;

END HEAT_INDEX_A;
----------------------------------------------------------------------------------------------------
FUNCTION HEAT_INDEX_B
	(
	p_T NUMBER,
	p_RH NUMBER
	) RETURN NUMBER IS
BEGIN
	RETURN GREATEST(-42.379 +
		(2.049015230 * p_T) +
		(10.14333127 * p_RH) -
		(0.224755410 * p_T * p_RH) -
		(6.837830000 * POWER(10, -3) * POWER(p_T, 2)) -
		(5.481717000 * POWER(10, -2) * POWER(p_RH, 2)) +
		(1.228740000 * POWER(10, -3) * (POWER(p_T, 2) * p_RH)) +
		(8.528200000 * POWER(10, -4) * p_T * POWER(p_RH, 2)) -
		(1.990000000 * POWER(10, -6) * POWER(p_T, 2) * POWER(p_RH, 2)),p_T);
END HEAT_INDEX_B;
----------------------------------------------------------------------------------------------------
FUNCTION WIND_CHILL_INDEX
	(
	p_T NUMBER,
	p_WS NUMBER
	) RETURN NUMBER IS
BEGIN
	RETURN 91.4 - (0.474677 - 0.020425 * p_WS + 0.303107 * SQRT(p_WS)) * (91.4 - p_T);
END WIND_CHILL_INDEX;
----------------------------------------------------------------------------------------------------
FUNCTION EFFECTIVE_TEMPERATURE
	(
	p_OPTION IN VARCHAR,
	p_SERVICE_DATE IN DATE,
	p_T NUMBER,
	p_RH NUMBER,
	p_WS NUMBER
	) RETURN NUMBER IS

-- Answer a temperature modified by either the 	heat index or wind chill adjustment for the specified date.
-- For June through September, if the temperature is > 75 F, apply the heat index.
-- For October through May, if the temperature is < 45 F and the wind speed is > 5 MPH, apply the wind chill index.
-- Otherwise, make no adjustment and answer the input temperature.
-- Note: the Weather Index Table created by the Profiling Module bounds the Effective Temperature range of -21 to +112 inclusive.

v_MONTH NUMBER(2) := TO_NUMBER(TO_CHAR(p_SERVICE_DATE,'MM'));
v_T NUMBER := p_T;

BEGIN

	IF p_OPTION IN ('ET(RH)','ET(RH,WS)') AND (v_MONTH BETWEEN 6 AND 9) AND  v_T > 75 AND p_RH BETWEEN 0 AND 100 THEN
		v_T := LEAST(HEAT_INDEX_A(v_T, p_RH),112);
	ELSIF p_OPTION IN ('ET(WS)','ET(RH,WS)') AND (v_MONTH NOT BETWEEN 6 AND 9) AND v_T < 45 AND p_WS BETWEEN 6 AND 200 THEN
		v_T := GREATEST(WIND_CHILL_INDEX(v_T, p_WS),-21);
	END IF;

	RETURN ROUND(LEAST(GREATEST(v_T,-21),112));

EXCEPTION
	WHEN OTHERS THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		RETURN v_T;

END EFFECTIVE_TEMPERATURE;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_WRF_VAR_PARAMETERS
	(
	p_PROFILE_ID IN NUMBER,
	p_WRF_PARAMETER_IDS IN OUT NOCOPY GA.ID_TABLE
	) AS

-- Answer the weather parameter ids associated with the wrf profile for the first and second variable.

CURSOR c_WRF_VAR IS
	SELECT VARIABLE_NBR + 1 "VARIABLE_NBR", PARAMETER_ID
	FROM LOAD_PROFILE_WRF_WEATHER
	WHERE PROFILE_ID = p_PROFILE_ID;

BEGIN

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('GET_WRF_VAR_PARAMETERS');
	END IF;

	FOR v_WRF_VAR IN c_WRF_VAR LOOP
		p_WRF_PARAMETER_IDS(v_WRF_VAR.VARIABLE_NBR) := v_WRF_VAR.PARAMETER_ID;
	END LOOP;

	IF p_WRF_PARAMETER_IDS.EXISTS(1) THEN
		IF p_WRF_PARAMETER_IDS(1) = CONSTANTS.NOT_ASSIGNED THEN
			p_WRF_PARAMETER_IDS(1) := GET_PARAMETER_ID_FOR_CATEGORY('TEMPERATURE');
		END IF;
	END IF;

END GET_WRF_VAR_PARAMETERS;
----------------------------------------------------------------------------------------------------
FUNCTION GET_STATION_NAME
	(
	p_STATION_ID IN NUMBER
	) RETURN VARCHAR IS

-- Answer the station name of the associated station id.

v_STATION_NAME WEATHER_STATION.STATION_NAME%TYPE;

BEGIN

	SELECT STATION_NAME
	INTO v_STATION_NAME
	FROM WEATHER_STATION
	WHERE STATION_ID = p_STATION_ID
		AND ROWNUM = 1;

	RETURN v_STATION_NAME;

 	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN '';

END GET_STATION_NAME;
----------------------------------------------------------------------------------------------------
FUNCTION GET_STATION_FOR_PREMISE
	(
	p_SERVICE_LOCATION_ID IN NUMBER
	) RETURN NUMBER IS

v_STATION_ID SERVICE_LOCATION.WEATHER_STATION_ID%TYPE;

BEGIN

	SELECT  NVL(WEATHER_STATION_ID, CONSTANTS.NOT_ASSIGNED)
	INTO v_STATION_ID
	FROM SERVICE_LOCATION
	WHERE SERVICE_LOCATION_ID = p_SERVICE_LOCATION_ID;

	RETURN v_STATION_ID;

EXCEPTION
	WHEN OTHERS THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		RETURN CONSTANTS.NOT_ASSIGNED;

END GET_STATION_FOR_PREMISE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_STATION_FOR_ACCOUNT
	(
	p_ACCOUNT_ID IN NUMBER,
	p_SERVICE_DATE IN DATE
	) RETURN NUMBER IS

-- Answer the station name of the associated station id.

BEGIN

	RETURN GET_STATION_FOR_PREMISE(CS.GET_SERVICE_LOCATION_ID(p_ACCOUNT_ID, p_SERVICE_DATE));

END GET_STATION_FOR_ACCOUNT;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_STATION_PARAMETER_VALUE
	(
	p_STATION_PARAMETER_VALUE IN STATION_PARAMETER_VALUE%ROWTYPE
	) AS

BEGIN

	UPDATE STATION_PARAMETER_VALUE
	SET PARAMETER_VAL = p_STATION_PARAMETER_VALUE.PARAMETER_VAL
	WHERE CASE_ID = p_STATION_PARAMETER_VALUE.CASE_ID
		AND STATION_ID = p_STATION_PARAMETER_VALUE.STATION_ID
		AND PARAMETER_ID = p_STATION_PARAMETER_VALUE.PARAMETER_ID
		AND PARAMETER_CODE = p_STATION_PARAMETER_VALUE.PARAMETER_CODE
		AND PARAMETER_DATE = p_STATION_PARAMETER_VALUE.PARAMETER_DATE;

	IF SQL%NOTFOUND THEN
		INSERT INTO STATION_PARAMETER_VALUE (
			CASE_ID,
			STATION_ID,
			PARAMETER_ID,
			PARAMETER_CODE,
			PARAMETER_DATE,
			PARAMETER_VAL)
		VALUES (
			p_STATION_PARAMETER_VALUE.CASE_ID,
			p_STATION_PARAMETER_VALUE.STATION_ID,
			p_STATION_PARAMETER_VALUE.PARAMETER_ID,
			p_STATION_PARAMETER_VALUE.PARAMETER_CODE,
			p_STATION_PARAMETER_VALUE.PARAMETER_DATE,
			p_STATION_PARAMETER_VALUE.PARAMETER_VAL);
	END IF;

END PUT_STATION_PARAMETER_VALUE;
----------------------------------------------------------------------------------------------------
PROCEDURE SAVE_STATION_PARAMETER
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN CHAR,
	p_PARAMETER_DATE IN DATE,
	p_MINUTES IN NUMBER,
	p_EFFECTIVE_TEMPERATURE IN GA.NUMBER_TABLE
	) AS

-- Save the Weather Index used in the Weather-Indexed Profile lookup.

v_INDEX BINARY_INTEGER;
v_STATION_PARAMETER_VALUE STATION_PARAMETER_VALUE%ROWTYPE;

BEGIN

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('SAVE_STATION_PARAMETER');
	END IF;

	v_STATION_PARAMETER_VALUE.CASE_ID := GA.BASE_CASE_ID;
	v_STATION_PARAMETER_VALUE.STATION_ID := p_STATION_ID;
	v_STATION_PARAMETER_VALUE.PARAMETER_ID := p_PARAMETER_ID;
	v_STATION_PARAMETER_VALUE.PARAMETER_CODE := p_PARAMETER_CODE;
	v_STATION_PARAMETER_VALUE.PARAMETER_DATE := BEGIN_HOUR_ENDING_CUT_DAY(p_PARAMETER_DATE, LOCAL_TIME_ZONE, p_MINUTES);

	v_INDEX := p_EFFECTIVE_TEMPERATURE.FIRST;
	WHILE v_INDEX <= p_EFFECTIVE_TEMPERATURE.LAST LOOP
		v_STATION_PARAMETER_VALUE.PARAMETER_VAL := p_EFFECTIVE_TEMPERATURE(v_INDEX);
		PUT_STATION_PARAMETER_VALUE(v_STATION_PARAMETER_VALUE);
		IF p_PARAMETER_CODE = 'F' THEN
			v_STATION_PARAMETER_VALUE.PARAMETER_CODE := 'U';
			PUT_STATION_PARAMETER_VALUE(v_STATION_PARAMETER_VALUE);
			v_STATION_PARAMETER_VALUE.PARAMETER_CODE := p_PARAMETER_CODE;
		END IF;
		v_STATION_PARAMETER_VALUE.PARAMETER_DATE := ADD_MINUTES_TO_DATE(v_STATION_PARAMETER_VALUE.PARAMETER_DATE, p_MINUTES);
		v_INDEX := p_EFFECTIVE_TEMPERATURE.NEXT(v_INDEX);
 	END LOOP;

END SAVE_STATION_PARAMETER;
----------------------------------------------------------------------------------------------------
PROCEDURE COMPUTE_WEATHER_INDEX
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_STATION_ID IN NUMBER,
	p_ADJUSTMENT_OPTION IN VARCHAR,
	p_EFFECTIVE_TEMPERATURE IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

-- Compute the heat and humidity (HI) and the wind chill (WC) indexes.

v_INDEX BINARY_INTEGER;
v_OPTION VARCHAR(16);
v_T GA.NUMBER_TABLE;
v_RH GA.NUMBER_TABLE;
v_WS GA.NUMBER_TABLE;

BEGIN

	IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
		LOGS.LOG_DEBUG_DETAIL('COMPUTE_WEATHER_INDEX');
		LOGS.LOG_DEBUG_DETAIL('<t>,<rh>,<ws>,<et>@<index>');
	END IF;

	GET_PARAMETER_VALUES(p_CAST_CONTEXT, p_STATION_ID, 'TEMPERATURE', v_T);
	GET_PARAMETER_VALUES(p_CAST_CONTEXT, p_STATION_ID, 'RELATIVE HUMIDITY', v_RH);
	GET_PARAMETER_VALUES(p_CAST_CONTEXT, p_STATION_ID, 'WIND SPEED', v_WS);

	v_OPTION := UPPER(LTRIM(RTRIM(p_ADJUSTMENT_OPTION)));

-- If the Wind Chill Temperature Check is enabled and any Temperature during the day exceeds the specified threshold,
-- then disable the Effective Temperature Calculation.	The Wind Chill Temperature Check is only valid Oct-May inclusive.
	IF GA.ENABLE_WIND_CHILL_TEMP_CHECK AND TO_NUMBER(TO_CHAR(p_CAST_CONTEXT.SERVICE_DATE,'MM')) NOT BETWEEN 6 AND 9 THEN
		FOR v_INDEX IN v_T.FIRST..v_T.LAST LOOP
			IF v_T(v_INDEX) > GA.WIND_CHILL_TEMP_THRESHOLD THEN
				v_OPTION := 'X';
				EXIT;
			END IF;
		END LOOP;
	END IF;

	FOR v_INDEX IN v_T.FIRST..v_T.LAST LOOP
		p_EFFECTIVE_TEMPERATURE(v_INDEX) := EFFECTIVE_TEMPERATURE(v_OPTION, p_CAST_CONTEXT.SERVICE_DATE, v_T(v_INDEX), v_RH(v_INDEX), v_WS(v_INDEX));
		IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
			LOGS.LOG_DEBUG_DETAIL(TO_CHAR(v_T(v_INDEX)) || ',' || TO_CHAR(v_RH(v_INDEX)) || ',' || TO_CHAR(v_WS(v_INDEX)) || ',' || TO_CHAR(p_EFFECTIVE_TEMPERATURE(v_INDEX)) || ',' || TO_CHAR(v_INDEX));
		END IF;
	END LOOP;

END COMPUTE_WEATHER_INDEX;
----------------------------------------------------------------------------------------------------
PROCEDURE MARK_WEATHER_FORECAST_AS_USED
	(
	p_STATION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

-- Mark all weather parameter forecast values as used for the specified time period
-- Note that p_BEGIN_DATE and p_END_DATE are CUT Dates.

BEGIN

	IF g_WEATHER_STATION(p_STATION_ID).IS_COMPOSITE THEN
-- Delete existing entries so inserts can be done.
		DELETE STATION_PARAMETER_VALUE
			WHERE CASE_ID = GA.BASE_CASE_ID
				AND STATION_ID IN(SELECT DISTINCT STATION_ID FROM WEATHER_STATION_COMPOSITE WHERE COMPOSITE_STATION_ID = p_STATION_ID)
				AND PARAMETER_ID IN (SELECT DISTINCT PARAMETER_ID FROM WEATHER_STATION_PARAMETER WHERE STATION_ID = (SELECT DISTINCT STATION_ID FROM WEATHER_STATION_COMPOSITE WHERE COMPOSITE_STATION_ID = p_STATION_ID))
				AND PARAMETER_CODE = 'U'
				AND PARAMETER_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE;

-- Copy the forecast category values to the used category.
		INSERT INTO STATION_PARAMETER_VALUE(CASE_ID, STATION_ID, PARAMETER_ID, PARAMETER_CODE, PARAMETER_DATE, PARAMETER_VAL)
			SELECT CASE_ID, STATION_ID, PARAMETER_ID, 'U', PARAMETER_DATE, PARAMETER_VAL
			FROM STATION_PARAMETER_VALUE
			WHERE CASE_ID = GA.BASE_CASE_ID
				AND STATION_ID IN(SELECT DISTINCT STATION_ID FROM WEATHER_STATION_COMPOSITE WHERE COMPOSITE_STATION_ID = p_STATION_ID)
				AND PARAMETER_ID IN (SELECT DISTINCT PARAMETER_ID FROM WEATHER_STATION_PARAMETER WHERE STATION_ID = (SELECT DISTINCT STATION_ID FROM WEATHER_STATION_COMPOSITE WHERE COMPOSITE_STATION_ID = p_STATION_ID))
				AND PARAMETER_CODE = 'F'
				AND PARAMETER_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE;
	ELSE
-- Delete existing entries so inserts can be done.
		DELETE STATION_PARAMETER_VALUE
			WHERE CASE_ID = GA.BASE_CASE_ID
				AND STATION_ID = p_STATION_ID
				AND PARAMETER_ID IN (SELECT DISTINCT PARAMETER_ID FROM WEATHER_STATION_PARAMETER WHERE STATION_ID = p_STATION_ID)
				AND PARAMETER_CODE = 'U'
				AND PARAMETER_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE;

-- Copy the forecast category values to the used category.
		INSERT INTO STATION_PARAMETER_VALUE(CASE_ID, STATION_ID, PARAMETER_ID, PARAMETER_CODE, PARAMETER_DATE, PARAMETER_VAL)
			SELECT CASE_ID, STATION_ID, PARAMETER_ID, 'U', PARAMETER_DATE, PARAMETER_VAL
			FROM STATION_PARAMETER_VALUE
			WHERE CASE_ID = GA.BASE_CASE_ID
				AND STATION_ID = p_STATION_ID
				AND PARAMETER_ID IN (SELECT DISTINCT PARAMETER_ID FROM WEATHER_STATION_PARAMETER WHERE STATION_ID = p_STATION_ID)
				AND PARAMETER_CODE = 'F'
				AND PARAMETER_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE;
	END IF;

END MARK_WEATHER_FORECAST_AS_USED;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_STATIONS_AND_PARAMETERS AS

CURSOR c_WEATHER_STATIONS IS SELECT * FROM WEATHER_STATION;

CURSOR c_WEATHER_PARAMETERS IS SELECT * FROM WEATHER_PARAMETER;

v_INDEX BINARY_INTEGER;

BEGIN

	IF NOT g_STATIONS_PARAMETERS_CACHED THEN

		g_WEATHER_STATION.DELETE;
		FOR v_WEATHER_STATIONS IN c_WEATHER_STATIONS LOOP
			v_INDEX := v_WEATHER_STATIONS.STATION_ID;
			g_WEATHER_STATION(v_INDEX).STATION_INDEX := g_WEATHER_STATION.COUNT + 1;
			g_WEATHER_STATION(v_INDEX).STATION_NAME := v_WEATHER_STATIONS.STATION_NAME;
			g_WEATHER_STATION(v_INDEX).IS_COMPOSITE := v_WEATHER_STATIONS.IS_COMPOSITE = g_ON;
		END LOOP;

		g_WEATHER_PARAMETER.DELETE;
		FOR v_WEATHER_PARAMETERS IN c_WEATHER_PARAMETERS LOOP
			v_INDEX := v_WEATHER_PARAMETERS.PARAMETER_ID;
			g_WEATHER_PARAMETER(v_INDEX).PARAMETER_INDEX := g_WEATHER_PARAMETER.COUNT + 1;
			g_WEATHER_PARAMETER(v_INDEX).PARAMETER_NAME := v_WEATHER_PARAMETERS.PARAMETER_NAME;
			g_WEATHER_PARAMETER(v_INDEX).PARAMETER_CATEGORY := v_WEATHER_PARAMETERS.PARAMETER_CATEGORY;
			g_WEATHER_PARAMETER(v_INDEX).PARAMETER_INTERVAL := v_WEATHER_PARAMETERS.PARAMETER_INTERVAL;
		END LOOP;

		g_STATIONS_PARAMETERS_CACHED := TRUE;

	END IF;

END CACHE_STATIONS_AND_PARAMETERS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_PROJECTED_PARAMETERS
	(
	p_CASE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_DAY_TYPE IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_STATION_PARAMETER IN OUT NOCOPY STATION_PARAMETER_TABLE
	) AS

v_DATE CHAR(11) := TO_CHAR(p_BEGIN_DATE, 'DD/MM/YYYY ');
v_DATE_FORMAT CHAR(18) := 'DD/MM/YYYY HH24:MI';

BEGIN

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('GET_PROJECTED_PARAMETERS');
		LOGS.LOG_DEBUG('STATION_ID=' || TO_CHAR(p_STATION_ID));
		LOGS.LOG_DEBUG('BEGIN_DATE=' || UT.TRACE_DATE(p_BEGIN_DATE));
		LOGS.LOG_DEBUG('END_DATE=' || UT.TRACE_DATE(p_END_DATE));
		LOGS.LOG_DEBUG('DAY_TYPE=' || TO_CHAR(p_DAY_TYPE));
	END IF;

	IF g_WEATHER_STATION(p_STATION_ID).IS_COMPOSITE THEN
		SELECT STATION_PARAMETER_TYPE(p_STATION_ID, C.PARAMETER_ID,
			TO_DATE(v_DATE || TO_CHAR(C.PARAMETER_DATE, 'HH24:MI'), v_DATE_FORMAT),
			SUM(C.PARAMETER_VAL * B.HISTORICAL_FACTOR * (A.COMPOSITE_PERCENT / 100.0)
								/ (TRUNC(B.HISTORICAL_END_DATE) - TRUNC(B.HISTORICAL_BEGIN_DATE))))
		BULK COLLECT INTO p_STATION_PARAMETER
		FROM WEATHER_STATION_COMPOSITE A, STATION_PARAMETER_PROJECTION B, STATION_PARAMETER_VALUE C
		WHERE A.STATION_ID = p_STATION_ID
			AND B.CASE_ID = p_CASE_ID
			AND B.STATION_ID = A.COMPOSITE_STATION_ID
			AND B.PARAMETER_ID = B.PARAMETER_ID
			AND B.PARAMETER_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
			AND C.CASE_ID = GA.BASE_CASE_ID
			AND C.STATION_ID = B.STATION_ID
			AND C.PARAMETER_ID = B.PARAMETER_ID
			AND C.PARAMETER_CODE = 'A'
			AND C.PARAMETER_DATE BETWEEN B.HISTORICAL_BEGIN_DATE AND B.HISTORICAL_END_DATE
		GROUP BY p_STATION_ID, C.PARAMETER_ID, TO_DATE(v_DATE || TO_CHAR(C.PARAMETER_DATE, 'HH24:MI'), v_DATE_FORMAT);
	ELSE
		SELECT STATION_PARAMETER_TYPE(p_STATION_ID, A.PARAMETER_ID, A.PARAMETER_DATE, A.PARAMETER_VAL)
		BULK COLLECT INTO p_STATION_PARAMETER
		FROM
			(SELECT C.PARAMETER_ID, TO_DATE(v_DATE || TO_CHAR(C.PARAMETER_DATE, 'HH24:MI'), v_DATE_FORMAT) "PARAMETER_DATE", AVG(C.PARAMETER_VAL * B.HISTORICAL_FACTOR) "PARAMETER_VAL"
			FROM WEATHER_STATION_PARAMETER A, STATION_PARAMETER_PROJECTION B, STATION_PARAMETER_VALUE C
			WHERE A.STATION_ID = p_STATION_ID
				AND B.CASE_ID = p_CASE_ID
				AND B.STATION_ID = A.STATION_ID
				AND B.PARAMETER_ID = A.PARAMETER_ID
				AND B.PARAMETER_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
				AND C.CASE_ID = GA.BASE_CASE_ID
				AND C.STATION_ID = B.STATION_ID
				AND C.PARAMETER_ID = B.PARAMETER_ID
				AND C.PARAMETER_CODE = 'A'
				AND C.PARAMETER_DATE BETWEEN B.HISTORICAL_BEGIN_DATE AND B.HISTORICAL_END_DATE
			GROUP BY C.PARAMETER_ID, TO_DATE(v_DATE || TO_CHAR(C.PARAMETER_DATE, 'HH24:MI'), v_DATE_FORMAT)
			UNION SELECT C.PARAMETER_ID, TO_DATE(v_DATE || TO_CHAR(C.PARAMETER_DATE, 'HH24:MI'), v_DATE_FORMAT), AVG(C.PARAMETER_VAL * A.HISTORICAL_FACTOR * B.COMPOSITE_COEFFICIENT) "PARAMETER_VAL"
			FROM STATION_PARAMETER_PROJECTION A, WEATHER_PARAMETER_COMPOSITE B, STATION_PARAMETER_VALUE C
			WHERE A.CASE_ID = p_CASE_ID
				AND A.STATION_ID = p_STATION_ID
				AND A.PARAMETER_ID = B.COMPOSITE_PARAMETER_ID
				AND A.PARAMETER_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
				AND C.CASE_ID = GA.BASE_CASE_ID
				AND C.STATION_ID = A.STATION_ID
				AND C.PARAMETER_ID = A.PARAMETER_ID
				AND C.PARAMETER_CODE = 'A'
				AND C.PARAMETER_DATE BETWEEN A.HISTORICAL_BEGIN_DATE AND A.HISTORICAL_END_DATE
		GROUP BY p_STATION_ID, C.PARAMETER_ID, TO_DATE(v_DATE || TO_CHAR(C.PARAMETER_DATE, 'HH24:MI'), v_DATE_FORMAT)) A;
	END IF;

END GET_PROJECTED_PARAMETERS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_FORECAST_PARAMETERS
	(
	p_CASE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_CODE IN CHAR,
	p_CUT_BEGIN_DATE IN DATE,
	p_CUT_END_DATE IN DATE,
	p_TRACE_ON IN NUMBER,
	p_STATION_PARAMETER IN OUT NOCOPY STATION_PARAMETER_TABLE
	) AS

v_CASE_ID NUMBER;

BEGIN

    IF p_CASE_ID IS NULL THEN
	   v_CASE_ID  := GA.BASE_CASE_ID;
    ELSE
	   v_CASE_ID  := p_CASE_ID;
    END IF;


    IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('GET_FORECAST_PARAMETERS');
		LOGS.LOG_DEBUG('STATION_ID=' || TO_CHAR(p_STATION_ID));
		LOGS.LOG_DEBUG('PARAMETER_CODE=' || p_PARAMETER_CODE);
		LOGS.LOG_DEBUG('CASE_ID=' || TO_CHAR(v_CASE_ID));
		LOGS.LOG_DEBUG('CUT_BEGIN_DATE=' || UT.TRACE_DATE(p_CUT_BEGIN_DATE));
		LOGS.LOG_DEBUG('CUT_END_DATE=' || UT.TRACE_DATE(p_CUT_END_DATE));
	END IF;

	IF g_WEATHER_STATION(p_STATION_ID).IS_COMPOSITE THEN
		SELECT STATION_PARAMETER_TYPE(p_STATION_ID, B.PARAMETER_ID, B.PARAMETER_DATE, SUM(B.PARAMETER_VAL * (A.COMPOSITE_PERCENT / 100.0)))
		BULK COLLECT INTO p_STATION_PARAMETER
		FROM WEATHER_STATION_COMPOSITE A, STATION_PARAMETER_VALUE B
		WHERE A.STATION_ID = p_STATION_ID
			AND B.CASE_ID = v_CASE_ID
			AND B.STATION_ID = A.COMPOSITE_STATION_ID
			AND B.PARAMETER_ID = B.PARAMETER_ID
			AND B.PARAMETER_CODE = p_PARAMETER_CODE
			AND B.PARAMETER_DATE BETWEEN p_CUT_BEGIN_DATE AND p_CUT_END_DATE
		GROUP BY B.PARAMETER_ID, B.PARAMETER_DATE;
	ELSE
		SELECT STATION_PARAMETER_TYPE(p_STATION_ID, A.PARAMETER_ID, A.PARAMETER_DATE, A.PARAMETER_VAL)
		BULK COLLECT INTO p_STATION_PARAMETER
		FROM
			(SELECT B.PARAMETER_ID, B.PARAMETER_DATE, AVG(B.PARAMETER_VAL) "PARAMETER_VAL"
			FROM WEATHER_STATION_PARAMETER A, STATION_PARAMETER_VALUE B
			WHERE A.STATION_ID = p_STATION_ID
				AND B.CASE_ID = v_CASE_ID
				AND B.STATION_ID = A.STATION_ID
				AND B.PARAMETER_ID = A.PARAMETER_ID
				AND B.PARAMETER_CODE = p_PARAMETER_CODE
				AND B.PARAMETER_DATE BETWEEN p_CUT_BEGIN_DATE AND p_CUT_END_DATE
			GROUP BY B.PARAMETER_ID, B.PARAMETER_DATE
			UNION
			SELECT B.PARAMETER_ID, A.PARAMETER_DATE, SUM(A.PARAMETER_VAL * B.COMPOSITE_COEFFICIENT) "PARAMETER_VAL"
			FROM STATION_PARAMETER_VALUE A, WEATHER_PARAMETER_COMPOSITE B
			WHERE A.CASE_ID = v_CASE_ID
				AND A.STATION_ID = p_STATION_ID
				AND A.PARAMETER_ID = B.COMPOSITE_PARAMETER_ID
				AND A.PARAMETER_CODE = p_PARAMETER_CODE
				AND A.PARAMETER_DATE BETWEEN p_CUT_BEGIN_DATE AND p_CUT_END_DATE
			GROUP BY B.PARAMETER_ID, A.PARAMETER_DATE) A;
	END IF;

END GET_FORECAST_PARAMETERS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_STATION_PARAMETERS
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_STATION_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_POST_TO_APP_EVENT_LOG IN BOOLEAN
	) AS

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_PROJECTION_BEGIN_DATE DATE;
v_PROJECTION_END_DATE DATE;
v_INDEX BINARY_INTEGER;
v_LOOKUP_INDEX BINARY_INTEGER;
v_COUNT PLS_INTEGER := 0;
v_TEMPERATURE_PARAMETER_ID NUMBER(9);
v_STATION_PARAMETER STATION_PARAMETER_TABLE := STATION_PARAMETER_TABLE();

BEGIN

	IF g_WEATHER_STATION_IS_CACHED.EXISTS(p_STATION_ID) AND g_WEATHER_STATION_IS_CACHED(p_STATION_ID) THEN
		IF LOGS.IS_DEBUG_ENABLED() THEN
			LOGS.LOG_DEBUG('WEATHER DATA IS CACHED');
		END IF;
		RETURN;  -- Weather Data is Cached...
	END IF;

	IF LOGS.IS_DEBUG_ENABLED() THEN
		LOGS.LOG_DEBUG('GET_STATION_PARAMETERS');
		LOGS.LOG_DEBUG('STATION_ID=' || TO_CHAR(p_STATION_ID));
		LOGS.LOG_DEBUG('EDC_ID=' || TO_CHAR(p_EDC_ID));
		LOGS.LOG_DEBUG('POST_TO_APP_EVENT_LOG=' || UT.TRACE_BOOLEAN(p_POST_TO_APP_EVENT_LOG));
	END IF;

	CACHE_STATIONS_AND_PARAMETERS;

	g_WEATHER_STATION_IS_CACHED(p_STATION_ID) := FALSE;
	v_TEMPERATURE_PARAMETER_ID := GET_PARAMETER_ID_FOR_CATEGORY('TEMPERATURE');

	UT.CUT_DAY_INTERVAL_RANGE(p_CAST_CONTEXT.MODEL_ID, p_CAST_CONTEXT.SERVICE_DATE, LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

	IF p_CAST_CONTEXT.RUN_MODE = GA.HOUR_MODE THEN
		GET_FORECAST_PARAMETERS(p_CAST_CONTEXT.WEATHER_CASE_ID, p_STATION_ID, p_CAST_CONTEXT.WEATHER_PARAMETER_CODE, v_BEGIN_DATE, v_END_DATE, p_CAST_CONTEXT.TRACE_ON, v_STATION_PARAMETER);
	ELSIF p_CAST_CONTEXT.WEATHER_CASE_ID = GA.BASE_CASE_ID AND p_CAST_CONTEXT.RUN_MODE = GA.DAY_MODE THEN
		GET_FORECAST_PARAMETERS(p_CAST_CONTEXT.WEATHER_CASE_ID, p_STATION_ID, p_CAST_CONTEXT.WEATHER_PARAMETER_CODE, p_CAST_CONTEXT.SERVICE_DATE, p_CAST_CONTEXT.SERVICE_DATE, p_CAST_CONTEXT.TRACE_ON, v_STATION_PARAMETER);
	ELSIF p_CAST_CONTEXT.RUN_MODE IN (GA.DAY_MODE, GA.WEEK_MODE, GA.MONTH_MODE) THEN
		v_PROJECTION_BEGIN_DATE := p_CAST_CONTEXT.SERVICE_DATE;
		SELECT DECODE(p_CAST_CONTEXT.RUN_MODE, GA.DAY_MODE, p_CAST_CONTEXT.SERVICE_DATE, GA.WEEK_MODE, p_CAST_CONTEXT.SERVICE_DATE + 6, LAST_DAY(p_CAST_CONTEXT.SERVICE_DATE)) INTO v_PROJECTION_END_DATE FROM DUAL;
		GET_PROJECTED_PARAMETERS(p_CAST_CONTEXT.WEATHER_CASE_ID, p_STATION_ID, v_PROJECTION_BEGIN_DATE, v_PROJECTION_END_DATE, p_CAST_CONTEXT.DAY_TYPE, p_CAST_CONTEXT.TRACE_ON, v_STATION_PARAMETER);
-- If there is not a Projection then look for a Forecast stream of weather.
		IF v_STATION_PARAMETER.COUNT = 0 THEN
			GET_FORECAST_PARAMETERS(p_CAST_CONTEXT.WEATHER_CASE_ID, p_STATION_ID, 'F', v_PROJECTION_BEGIN_DATE, v_PROJECTION_END_DATE, p_CAST_CONTEXT.TRACE_ON, v_STATION_PARAMETER);
		END IF;
	END IF;

	v_INDEX := v_STATION_PARAMETER.FIRST;
	WHILE v_INDEX <= v_STATION_PARAMETER.LAST LOOP
		v_LOOKUP_INDEX := LOOKUP_INDEX(p_STATION_ID, v_STATION_PARAMETER(v_INDEX).PARAMETER_ID, ROUND((v_STATION_PARAMETER(v_INDEX).PARAMETER_DATE - v_BEGIN_DATE) / GA.HOUR_DIVISOR) + 1);
		g_WEATHER_PARAMETER_CACHE(v_LOOKUP_INDEX) := v_STATION_PARAMETER(v_INDEX).PARAMETER_VAL;
		g_WEATHER_STATION_IS_CACHED(p_STATION_ID) := TRUE;
		IF v_STATION_PARAMETER(v_INDEX).PARAMETER_ID = v_TEMPERATURE_PARAMETER_ID THEN
			v_COUNT := v_COUNT + 1;
		END IF;
		v_INDEX := v_STATION_PARAMETER.NEXT(v_INDEX);
	END LOOP;

	IF p_POST_TO_APP_EVENT_LOG AND v_COUNT = 0 THEN
		g_OBJECT_NAME := GET_STATION_NAME(p_STATION_ID);
		g_EVENT_TEXT := 'No Temperature Parameter for ' || g_OBJECT_NAME || ' on '  || TO_CHAR(v_BEGIN_DATE,'MM/DD/YYYY');
		LOGS.LOG_WARN(g_EVENT_TEXT);
	END IF;

	IF p_CAST_CONTEXT.RUN_MODE = GA.HOUR_MODE AND p_CAST_CONTEXT.REQUEST_TYPE = GA.FORECAST_SERVICE AND p_CAST_CONTEXT.WEATHER_PARAMETER_CODE = 'F' AND p_CAST_CONTEXT.SCENARIO_ID = GA.BASE_SCENARIO_ID THEN
		MARK_WEATHER_FORECAST_AS_USED(p_STATION_ID, v_BEGIN_DATE, v_END_DATE);
	END IF;

END GET_STATION_PARAMETERS;
----------------------------------------------------------------------------------------------------
FUNCTION PROFILE_IS_EXTERNAL
	(
	p_PROFILE_ID IN NUMBER
	) RETURN BOOLEAN IS

-- Answer TRUE if Profile is External

v_IS_EXTERNAL_PROFILE NUMBER := 0;

BEGIN
	SELECT  NVL(IS_EXTERNAL_PROFILE,0)
	INTO v_IS_EXTERNAL_PROFILE
    FROM LOAD_PROFILE
	WHERE PROFILE_ID = p_PROFILE_ID;

    RETURN (v_IS_EXTERNAL_PROFILE = 1);

EXCEPTION
	WHEN OTHERS THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		RETURN FALSE;
END;
----------------------------------------------------------------------------------------------------
FUNCTION PROFILE_POINT_FOR_INDEX
	(
	p_PROFILE_ID IN NUMBER,
	p_POINT_INDEX IN NUMBER,
	p_POINT_DATE IN DATE,
	p_AS_OF_DATE IN DATE
	) RETURN NUMBER IS

v_POINT_VAL NUMBER;

BEGIN

	IF NOT FW.PROFILE_IS_EXTERNAL(p_PROFILE_ID) THEN
    	--Internal Profile
        SELECT POINT_VAL
    	INTO v_POINT_VAL
    	FROM LOAD_PROFILE_POINT
    	WHERE PROFILE_ID = p_PROFILE_ID
    		AND POINT_INDEX = p_POINT_INDEX
    		AND POINT_DATE = p_POINT_DATE
    		AND AS_OF_DATE = p_AS_OF_DATE;

    ELSE    --External Profile
    	v_POINT_VAL := XS.PROFILE_POINT_FOR_INDEX
                	(
                	p_PROFILE_ID,
                	p_POINT_INDEX,
                	p_POINT_DATE,
                	p_AS_OF_DATE
                	);
    END IF;

	RETURN v_POINT_VAL;

EXCEPTION
	WHEN OTHERS THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		RETURN CONSTANTS.NOT_ASSIGNED;

END PROFILE_POINT_FOR_INDEX;
----------------------------------------------------------------------------------------------------
PROCEDURE WEATHER_FOR_INDEXED_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_STATION_ID IN NUMBER,
	p_ADJUSTMENT_OPTION IN VARCHAR,
	p_EDC_ID IN NUMBER,
	p_POST_TO_APP_EVENT_LOG IN BOOLEAN,
	p_EFFECTIVE_TEMPERATURE IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

BEGIN

	IF LOGS.IS_DEBUG_ENABLED() THEN
		LOGS.LOG_DEBUG('WEATHER_FOR_INDEXED_PROFILE');
		LOGS.LOG_DEBUG('STATION_ID=' || TO_CHAR(p_STATION_ID));
		LOGS.LOG_DEBUG('ADJUSTMENT_OPTION='  || p_ADJUSTMENT_OPTION);
	END IF;

	GET_STATION_PARAMETERS(p_CAST_CONTEXT, p_STATION_ID, p_EDC_ID, p_POST_TO_APP_EVENT_LOG);

	COMPUTE_WEATHER_INDEX(p_CAST_CONTEXT, p_STATION_ID, p_ADJUSTMENT_OPTION, p_EFFECTIVE_TEMPERATURE);

END WEATHER_FOR_INDEXED_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE WEATHER_INDEXED_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROFILE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PROFILE_INTERVAL IN NUMBER,
	p_PROFILE_AS_OF_DATE IN DATE,
	p_EFFECTIVE_TEMPERATURE IN OUT NOCOPY GA.NUMBER_TABLE,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

-- Answer the weather indexed day profile in effect for the specified forecast date.

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_POINT_DATE DATE;
v_INDEX BINARY_INTEGER;
v_MINUTES NUMBER(4);
v_PARAMETER_ID NUMBER(9);

BEGIN

	UT.CUT_DAY_INTERVAL_RANGE(p_CAST_CONTEXT.MODEL_ID, LOW_DATE, STD_TIME_ZONE(LOCAL_TIME_ZONE), v_BEGIN_DATE, v_END_DATE);

	FILL_PROFILE(p_PROFILE_INTERVAL, p_PROFILE);
	v_POINT_DATE := v_BEGIN_DATE;
	v_MINUTES := 1440 / p_PROFILE.COUNT;

-- Lookup the profile value based on the index for the time interval

	IF LOGS.IS_DEBUG_ENABLED() THEN
		LOGS.LOG_DEBUG('WEATHER_INDEXED_PROFILE');
		LOGS.LOG_DEBUG('PROFILE_ID='  || TO_CHAR(p_PROFILE_ID));
		LOGS.LOG_DEBUG('PROFILE_AS_OF_DATE=' || UT.TRACE_DATE(p_PROFILE_AS_OF_DATE));
		LOGS.LOG_DEBUG('BEGIN_DATE='  || UT.TRACE_DATE(v_BEGIN_DATE));
		LOGS.LOG_DEBUG('END_DATE='  || UT.TRACE_DATE(v_END_DATE));
		LOGS.LOG_DEBUG('PROFILE COUNT='  || TO_CHAR(p_PROFILE.COUNT));
		LOGS.LOG_DEBUG('MINUTES='  || TO_CHAR(v_MINUTES));
	END IF;

-- Save the Effective Temperature calculation result associated with the Weather Station.
	IF GA.ENABLE_WEATHER_INDEX_SAVE AND NOT g_WEATHER_INDEX_SAVE.EXISTS(p_STATION_ID) AND p_CAST_CONTEXT.SCENARIO_ID = GA.BASE_SCENARIO_ID THEN
		g_WEATHER_INDEX_SAVE(p_STATION_ID) := TRUE;
		v_PARAMETER_ID := GET_PARAMETER_ID_FOR_CATEGORY('EFFECTIVE TEMPERATURE');
		IF NOT v_PARAMETER_ID = CONSTANTS.NOT_ASSIGNED THEN
			SAVE_STATION_PARAMETER(p_STATION_ID, v_PARAMETER_ID, p_CAST_CONTEXT.WEATHER_PARAMETER_CODE, p_CAST_CONTEXT.PROFILE_DATE, v_MINUTES, p_EFFECTIVE_TEMPERATURE);
		END IF;
	END IF;

-- Coerce the Weather array conform to the Profile array.
	COERCE_PARAMETER_VALUES(p_PROFILE_INTERVAL, p_EFFECTIVE_TEMPERATURE);

-- Lookup the Profile Point for each interval corresponding to the Weather value.
	FOR v_INDEX IN p_PROFILE.FIRST..p_PROFILE.LAST LOOP
		IF p_EFFECTIVE_TEMPERATURE.EXISTS(v_INDEX) THEN
			p_PROFILE(v_INDEX) := PROFILE_POINT_FOR_INDEX(p_PROFILE_ID, p_EFFECTIVE_TEMPERATURE(v_INDEX), v_POINT_DATE, p_PROFILE_AS_OF_DATE);
		END IF;
		v_POINT_DATE := ADD_MINUTES_TO_DATE(v_POINT_DATE, v_MINUTES);
	END LOOP;

END WEATHER_INDEXED_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_PROFILE_MIN_AND_MAX
	(
	p_PROFILE_ID IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_PROFILE_MIN OUT NUMBER,
	p_PROFILE_MAX OUT NUMBER
	) AS

-- Answer the load profile minimum and maximum values for the specified profile id.

BEGIN

	SELECT A.PROFILE_NZ_MIN, A.PROFILE_MAX
	INTO p_PROFILE_MIN, p_PROFILE_MAX
	FROM LOAD_PROFILE_STATISTICS A
	WHERE A.PROFILE_ID = p_PROFILE_ID
		AND A.AS_OF_DATE = p_AS_OF_DATE;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			p_PROFILE_MIN := NULL;
			p_PROFILE_MAX := NULL;

END GET_PROFILE_MIN_AND_MAX;
----------------------------------------------------------------------------------------------------
PROCEDURE WEATHER_FOR_WRF_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_STATION_ID IN NUMBER,
	p_PROFILE_ID IN NUMBER,
	p_EDC_ID IN NUMBER,
	p_POST_TO_APP_EVENT_LOG IN BOOLEAN,
	p_WRF_OBSERVATIONS IN OUT NOCOPY WRF_OBSERVATION_TABLE
	) AS

v_INDEX BINARY_INTEGER;
v_PARAMETER_INDEX BINARY_INTEGER;
v_WRF_PARAMETER_IDS GA.ID_TABLE;
v_WRF_PARAMETER GA.NUMBER_TABLE;

BEGIN

	GET_STATION_PARAMETERS(p_CAST_CONTEXT, p_STATION_ID, p_EDC_ID, p_POST_TO_APP_EVENT_LOG);

	GET_WRF_VAR_PARAMETERS(p_PROFILE_ID, v_WRF_PARAMETER_IDS);

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('WEATHER_FOR_WRF_PROFILE');
		LOGS.LOG_DEBUG('STATION_ID=' || TO_CHAR(p_STATION_ID));
		LOGS.LOG_DEBUG('PROFILE_ID=' || TO_CHAR(p_PROFILE_ID));
	END IF;

	v_PARAMETER_INDEX := v_WRF_PARAMETER_IDS.FIRST;
	WHILE v_PARAMETER_INDEX <= v_WRF_PARAMETER_IDS.LAST LOOP
		IF LOGS.IS_DEBUG_ENABLED THEN
			LOGS.LOG_DEBUG('WRF_PARAMETER_ID(' || TO_CHAR(v_INDEX) || ')=' || TO_CHAR(v_WRF_PARAMETER_IDS(v_PARAMETER_INDEX)));
		END IF;
		IF NOT v_WRF_PARAMETER_IDS(v_PARAMETER_INDEX) = CONSTANTS.NOT_ASSIGNED THEN
			GET_PARAMETER_VALUES(p_CAST_CONTEXT, p_STATION_ID, v_WRF_PARAMETER_IDS(v_PARAMETER_INDEX), v_WRF_PARAMETER);
			IF v_PARAMETER_INDEX = v_WRF_PARAMETER_IDS.FIRST THEN
				p_WRF_OBSERVATIONS.EXTEND(v_WRF_PARAMETER.COUNT);
			END IF;
			v_INDEX := v_WRF_PARAMETER.FIRST;
			WHILE v_INDEX <= v_WRF_PARAMETER.LAST LOOP
				IF v_PARAMETER_INDEX = 1 THEN
					--This assumes that v_WRF_PARAMETER.FIRST is 1, which it will be if
					--the LOAD_PROFILE_WRF_WEATHER table was loaded correctly,
					--with VARIABLE_NBR = 0 for the 1st parameter.  If 1 is incorrectly loaded
					--into VARIABLE_NBR for the 1st parameter thru an interface,
					--you will get a nasty Oracle error 06530 'Reference to uninitialized composite' below!!
					p_WRF_OBSERVATIONS(v_INDEX) := WRF_OBSERVATION_TYPE(NULL, NULL, NULL, v_WRF_PARAMETER(v_INDEX), 0, 0, 0, 0, v_WRF_PARAMETER_IDS.COUNT);
				ELSIF v_PARAMETER_INDEX = 2 THEN
					p_WRF_OBSERVATIONS(v_INDEX).PARAMETER_2 := v_WRF_PARAMETER(v_INDEX);
				ELSIF v_PARAMETER_INDEX = 3 THEN
					p_WRF_OBSERVATIONS(v_INDEX).PARAMETER_3 := v_WRF_PARAMETER(v_INDEX);
				ELSIF v_PARAMETER_INDEX = 4 THEN
					p_WRF_OBSERVATIONS(v_INDEX).PARAMETER_4 := v_WRF_PARAMETER(v_INDEX);
				ELSIF v_PARAMETER_INDEX = 5 THEN
					p_WRF_OBSERVATIONS(v_INDEX).PARAMETER_5 := v_WRF_PARAMETER(v_INDEX);
				END IF;
				v_INDEX := v_WRF_PARAMETER.NEXT(v_INDEX);
			END LOOP;
		END IF;
		v_PARAMETER_INDEX := v_WRF_PARAMETER_IDS.NEXT(v_PARAMETER_INDEX);
	END LOOP;

	IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
		v_INDEX := p_WRF_OBSERVATIONS.FIRST;
		WHILE v_INDEX <= p_WRF_OBSERVATIONS.LAST LOOP
			LOGS.LOG_DEBUG_DETAIL(TO_CHAR(v_INDEX) || ',' || TO_CHAR(p_WRF_OBSERVATIONS(v_INDEX).PARAMETER_1) || ',' || TO_CHAR(p_WRF_OBSERVATIONS(v_INDEX).PARAMETER_2) || ',' || TO_CHAR(p_WRF_OBSERVATIONS(v_INDEX).PARAMETER_3) || ',' || TO_CHAR(p_WRF_OBSERVATIONS(v_INDEX).PARAMETER_4) || ',' || TO_CHAR(p_WRF_OBSERVATIONS(v_INDEX).PARAMETER_5) || ',' || TO_CHAR(p_WRF_OBSERVATIONS(v_INDEX).PARAMETERS));
			v_INDEX := p_WRF_OBSERVATIONS.NEXT(v_INDEX);
		END LOOP;
	END IF;

END WEATHER_FOR_WRF_PROFILE;
----------------------------------------------------------------------------------------------------
FUNCTION WRF_PROFILE_LOOKUP
	(
	p_HOUR_INDEX IN NUMBER,
	p_WRF_OBSERVATION IN WRF_OBSERVATION_TYPE,
	p_PROFILE_MIN IN NUMBER,
	p_PROFILE_MAX IN NUMBER,
	p_WRF_TABLE IN WRF_TABLE,
	p_TRACE_ON IN BOOLEAN
	) RETURN NUMBER IS

-- Lookup the Appropriate WRF Segment To Employ.

v_INDEX BINARY_INTEGER;
v_WRF_INDEX BINARY_INTEGER := 0;
v_LOWER_INDEX BINARY_INTEGER := 0;
v_UPPER_INDEX BINARY_INTEGER := 0;
v_WRF_VAL NUMBER := 0;
v_PARAMETER NUMBER;
v_FLAG CHAR(2) := '#N';

BEGIN

	v_PARAMETER := p_WRF_OBSERVATION.PARAMETER_1;

-- Lookup the segment  for the hour that falls within the first parameter range.
	FOR v_INDEX IN p_WRF_TABLE.FIRST..p_WRF_TABLE.LAST LOOP
		IF p_HOUR_INDEX  = p_WRF_TABLE(v_INDEX).WRF_HOUR THEN
			IF v_PARAMETER > p_WRF_TABLE(v_INDEX).SEGMENT_MIN AND v_PARAMETER <= p_WRF_TABLE(v_INDEX).SEGMENT_MAX THEN
				v_WRF_INDEX := v_INDEX;
				EXIT;
			END IF;
		END IF;
	END LOOP;

-- If an index could not be found within the temperature range for the specific hour  then look in another segemnt for the same hour.
-- Also, initiate the alternate lookup for another segment if the WRF function evaluates to zero.
	IF v_WRF_INDEX = 0 OR (v_WRF_INDEX > 0 AND (p_WRF_TABLE(v_WRF_INDEX).COEFF_0
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_1 * p_WRF_OBSERVATION.PARAMETER_1
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_2 * p_WRF_OBSERVATION.PARAMETER_2
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_3 * p_WRF_OBSERVATION.PARAMETER_3
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_4 * p_WRF_OBSERVATION.PARAMETER_4
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_5 * p_WRF_OBSERVATION.PARAMETER_5) = 0) THEN

-- Search from the front of the list looking for the first segment with an hour match.
		FOR v_INDEX IN p_WRF_TABLE.FIRST..p_WRF_TABLE.LAST LOOP
			IF p_HOUR_INDEX  = p_WRF_TABLE(v_INDEX).WRF_HOUR THEN
				v_LOWER_INDEX := v_INDEX;
				EXIT;
			END IF;
		END LOOP;

-- Search from the end of the list looking for the first segment with an hour match.
		IF v_LOWER_INDEX > 0 THEN
			FOR v_INDEX IN REVERSE p_WRF_TABLE.FIRST..p_WRF_TABLE.LAST LOOP
				IF p_HOUR_INDEX  = p_WRF_TABLE(v_INDEX).WRF_HOUR THEN
					v_UPPER_INDEX := v_INDEX;
					EXIT;
				END IF;
			END LOOP;




-- Determine the closest segment match based on temperature proximity.
			IF v_LOWER_INDEX = v_UPPER_INDEX THEN
				v_WRF_INDEX := v_UPPER_INDEX;
				v_FLAG := '#S';
			ELSE
				-- If we are lower than the lowest segment, use	the lowest segment.
				IF v_PARAMETER <= p_WRF_TABLE(v_LOWER_INDEX).SEGMENT_MIN THEN
					v_WRF_INDEX := v_LOWER_INDEX;
					v_FLAG := '#L';
				-- Else if we are higher than the highest segment, use the highest segment.
				ELSIF v_PARAMETER >= p_WRF_TABLE(v_UPPER_INDEX).SEGMENT_MAX THEN
					v_WRF_INDEX := v_UPPER_INDEX;
					v_FLAG := '#U';
				-- Otherwise, determine whether we are closest to the highest
				-- or lowest segment, and use the appropriate one.
				ELSIF ABS(p_WRF_TABLE(v_LOWER_INDEX).SEGMENT_MAX - v_PARAMETER) <
						ABS(p_WRF_TABLE(v_UPPER_INDEX).SEGMENT_MIN - v_PARAMETER) THEN
					v_WRF_INDEX := v_LOWER_INDEX;
					v_FLAG := '#L';
				ELSE
					v_WRF_INDEX := v_UPPER_INDEX;
					v_FLAG := '#U';
				END IF;
			END IF;
		ELSE
			IF LOGS.IS_DEBUG_ENABLED THEN
				LOGS.LOG_DEBUG('NO WRF SEGMENT WAS FOUND THAT CONTAINS HOUR '  || TO_CHAR(p_HOUR_INDEX));
			END IF;
		END IF;
	END IF;

-- Evaluate the WRF.

	IF v_WRF_INDEX > 0 THEN
		v_WRF_VAL := p_WRF_TABLE(v_WRF_INDEX).COEFF_0
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_1 * p_WRF_OBSERVATION.PARAMETER_1
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_2 * p_WRF_OBSERVATION.PARAMETER_2
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_3 * p_WRF_OBSERVATION.PARAMETER_3
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_4 * p_WRF_OBSERVATION.PARAMETER_4
			+ p_WRF_TABLE(v_WRF_INDEX).COEFF_5 * p_WRF_OBSERVATION.PARAMETER_5;
		v_WRF_VAL := LEAST(GREATEST(v_WRF_VAL, p_PROFILE_MIN), p_PROFILE_MAX);

		IF LOGS.IS_DEBUG_ENABLED THEN
			LOGS.LOG_DEBUG(TO_CHAR(p_WRF_TABLE(v_WRF_INDEX).COEFF_0) ||
				'+' || TO_CHAR(p_WRF_TABLE(v_WRF_INDEX).COEFF_1) || '*' || TO_CHAR(p_WRF_OBSERVATION.PARAMETER_1) ||
				'+' || TO_CHAR(p_WRF_TABLE(v_WRF_INDEX).COEFF_2) || '*' || TO_CHAR(p_WRF_OBSERVATION.PARAMETER_2) ||
				'+' || TO_CHAR(p_WRF_TABLE(v_WRF_INDEX).COEFF_3) || '*' || TO_CHAR(p_WRF_OBSERVATION.PARAMETER_3) ||
				'+' || TO_CHAR(p_WRF_TABLE(v_WRF_INDEX).COEFF_4) || '*' || TO_CHAR(p_WRF_OBSERVATION.PARAMETER_4) ||
				'+' || TO_CHAR(p_WRF_TABLE(v_WRF_INDEX).COEFF_5) || '*' || TO_CHAR(p_WRF_OBSERVATION.PARAMETER_5) ||
			 	'=' || TO_CHAR(v_WRF_VAL) || '@' || TO_CHAR(p_HOUR_INDEX) ||
				':'  || TO_CHAR(p_WRF_TABLE(v_WRF_INDEX).WRF_LINE_NBR) || v_FLAG);
		END IF;
	END IF;

	RETURN v_WRF_VAL;

END WRF_PROFILE_LOOKUP;
----------------------------------------------------------------------------------------------------
PROCEDURE WRF_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROFILE_ID IN NUMBER,
	p_PROFILE_INTERVAL IN NUMBER,
	p_PROFILE_AS_OF_DATE IN DATE,
	p_WRF_OBSERVATIONS IN OUT NOCOPY WRF_OBSERVATION_TABLE,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

-- ANSWER THE WRF PROFILE IN EFFECT FOR THE SPECIFIED FORECAST DATE.

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_INDEX BINARY_INTEGER;
v_WRF_RECORD WRF_RECORD;
v_WRF_TABLE WRF_TABLE;
v_PROFILE_MIN NUMBER;
v_PROFILE_MAX NUMBER;
v_EMPTY_WRF BOOLEAN := TRUE;
v_WRF_OBSERVATION WRF_OBSERVATION_TYPE;
v_DST_SPRING_DATE DATE := NULL;
v_DST_FALL_DATE DATE := NULL;

CURSOR c_WRF IS
	SELECT B.WRF_LINE_NBR,
		DECODE(UPPER(SUBSTR(PROFILE_BREAKPOINT_INTERVAL,1,1)), 'H', C.SEGMENT_MIN, B.SEGMENT_MIN) "SEGMENT_MIN",
		DECODE(UPPER(SUBSTR(PROFILE_BREAKPOINT_INTERVAL,1,1)), 'H', C.SEGMENT_MAX, B.SEGMENT_MAX) "SEGMENT_MAX",
		WRF_HOUR, NVL(C.COEFF_0,0), NVL(C.COEFF_1,0), NVL(C.COEFF_2,0),  NVL(C.COEFF_3,0),  NVL(C.COEFF_4,0),  NVL(C.COEFF_5,0)
	FROM LOAD_PROFILE A, LOAD_PROFILE_WRF B, LOAD_PROFILE_WRF_LINE C
	WHERE A.PROFILE_ID = p_PROFILE_ID
		AND B.PROFILE_ID = A.PROFILE_ID
		AND B.WRF_LINE_NBR > CONSTANTS.NOT_ASSIGNED
		AND B.AS_OF_DATE = p_PROFILE_AS_OF_DATE
		AND C.WRF_ID = B.WRF_ID
		AND NOT (NVL(C.COEFF_0,0) = 0 AND NVL(C.COEFF_1,0) = 0 AND NVL(C.COEFF_2,0) = 0 AND NVL(C.COEFF_3,0) = 0 AND NVL(C.COEFF_4,0) = 0 AND NVL(C.COEFF_5,0) = 0)
	ORDER BY WRF_LINE_NBR, WRF_HOUR;

BEGIN

	UT.CUT_DAY_INTERVAL_RANGE(p_CAST_CONTEXT.MODEL_ID, p_CAST_CONTEXT.PROFILE_DATE, p_CAST_CONTEXT.PROFILE_DATE, STD_TIME_ZONE(LOCAL_TIME_ZONE), v_BEGIN_DATE, v_END_DATE);
	FILL_PROFILE(p_PROFILE_INTERVAL, p_PROFILE);
	GET_PROFILE_MIN_AND_MAX(p_PROFILE_ID, p_PROFILE_AS_OF_DATE, v_PROFILE_MIN, v_PROFILE_MAX);

	IF LOGS.IS_DEBUG_ENABLED() THEN
		LOGS.LOG_DEBUG('WRF_PROFILE');
		LOGS.LOG_DEBUG('PROFILE_ID='  || TO_CHAR(p_PROFILE_ID));
		LOGS.LOG_DEBUG('PROFILE_AS_OF_DATE=' || UT.TRACE_DATE(p_PROFILE_AS_OF_DATE));
		LOGS.LOG_DEBUG('BEGIN_DATE='  || UT.TRACE_DATE(v_BEGIN_DATE));
		LOGS.LOG_DEBUG('END_DATE='  || UT.TRACE_DATE(v_END_DATE));
		LOGS.LOG_DEBUG('PROFILE_MIN='  || TO_CHAR(v_PROFILE_MIN));
		LOGS.LOG_DEBUG('PROFILE_MAX='  || TO_CHAR(v_PROFILE_MAX));
		IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
			LOGS.LOG_DEBUG_DETAIL('WRF_PROFILE_LOOKUP');
			LOGS.LOG_DEBUG_DETAIL('<c0>+<c1>*<t>+<c2>*<x>=<value>@<hour>:<segment>#<flag> (where flag is N-normal lookup, L-lower segment, U-upper segment, S-single segment)');
		END IF;
	END IF;

	v_INDEX := 1;
	OPEN c_WRF;
	LOOP
		FETCH c_WRF INTO v_WRF_RECORD;
		EXIT WHEN c_WRF%NOTFOUND;
		v_WRF_TABLE(v_INDEX) := v_WRF_RECORD;
		v_INDEX := v_INDEX + 1;
		v_EMPTY_WRF := FALSE;
	END LOOP;
	CLOSE c_WRF;

-- Post a message and return if the WRF does not have any non-zero coefficients.

	IF v_EMPTY_WRF THEN
		g_OBJECT_NAME := GET_PROFILE_NAME(p_PROFILE_ID);
		g_EVENT_TEXT := 'WRF Profile Evaluates to Zero for ' || g_OBJECT_NAME || ' on ' || TO_CHAR(p_CAST_CONTEXT.PROFILE_DATE, 'MM/DD/YYYY') || ' in all hours' ;
		LOGS.LOG_ERROR(g_EVENT_TEXT);
		IF LOGS.IS_DEBUG_ENABLED() THEN
			LOGS.LOG_DEBUG('WRF PROFILE DOES NOT CONTAIN ANY NON-ZERO COEFFICIENTS');
		END IF;
		RETURN;
	END IF;

	--If DST is observed, do a check for Spring and Fall boundary days.
	IF UPPER(SUBSTR(LOCAL_TIME_ZONE,2,1)) = 'D' THEN
		v_DST_SPRING_DATE := TRUNC(DST_SPRING_AHEAD_DATE(v_BEGIN_DATE));
		v_DST_FALL_DATE := TRUNC(DST_FALL_BACK_DATE(v_BEGIN_DATE));
	END IF;

-- Compute the wrf profile value based on the index for the time interval.
-- Weather data has 0 based array indexing, profile is 1 based indexing.

 	FOR v_INDEX IN p_PROFILE.FIRST..p_PROFILE.LAST LOOP

		-- HANDLE DST, USE WEATHER FORECAST IN 1ST HOUR 2 FOR DT HOUR 3 PROFILE
		IF TRUNC(v_BEGIN_DATE) = v_DST_SPRING_DATE AND v_INDEX > 2 THEN
			IF p_WRF_OBSERVATIONS.EXISTS(v_INDEX-1) THEN
				v_WRF_OBSERVATION := p_WRF_OBSERVATIONS(v_INDEX-1);
			ELSE
				v_WRF_OBSERVATION :=  WRF_OBSERVATION_TYPE(NULL, NULL, NULL, 0, 0, 0, 0, 0, 0);
			END IF;
		ELSIF TRUNC(v_BEGIN_DATE) = v_DST_FALL_DATE AND v_INDEX >= 2 THEN
			IF p_WRF_OBSERVATIONS.EXISTS(v_INDEX+1) THEN
				v_WRF_OBSERVATION := p_WRF_OBSERVATIONS(v_INDEX+1);
			ELSE
				v_WRF_OBSERVATION :=  WRF_OBSERVATION_TYPE(NULL, NULL, NULL, 0, 0, 0, 0, 0, 0);
			END IF;
		ELSE
			IF p_WRF_OBSERVATIONS.EXISTS(v_INDEX) THEN
				v_WRF_OBSERVATION := p_WRF_OBSERVATIONS(v_INDEX);
			ELSE
				v_WRF_OBSERVATION :=  WRF_OBSERVATION_TYPE(NULL, NULL, NULL, 0, 0, 0, 0, 0, 0);
			END IF;
		END IF;

		p_PROFILE(v_INDEX) := WRF_PROFILE_LOOKUP(v_INDEX, v_WRF_OBSERVATION, v_PROFILE_MIN, v_PROFILE_MAX, v_WRF_TABLE, LOGS.IS_DEBUG_DETAIL_ENABLED());

		IF p_PROFILE(v_INDEX) = 0 THEN
			g_OBJECT_NAME := GET_PROFILE_NAME(p_PROFILE_ID);
			g_EVENT_TEXT := 'WRF Profile Evaluates to Zero for ' || g_OBJECT_NAME || ' on ' || TO_CHAR(p_CAST_CONTEXT.PROFILE_DATE, 'MM/DD/YYYY') || ' in hour ' || TO_CHAR(v_INDEX) ;
			LOGS.LOG_ERROR(g_EVENT_TEXT);
		END IF;

	END LOOP;

END WRF_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE INIT_CUSTOMER_WRF_CACHE
	(
	p_CAST_CONTEXT IN OUT NOCOPY CAST_CONTEXT_TYPE
	) IS

	--INITIALIZE SOME TEMP TABLES THAT WILL BE USED FOR THE ENTIRE DURATION OF THE RUN.

	v_PARAMETER_CODE CHAR(1);
	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
BEGIN

	v_PARAMETER_CODE := p_CAST_CONTEXT.WEATHER_PARAMETER_CODE;

	--Use Begin and End Dates to limit amount of data in cache.  We are getting
	--all the data within about two months of the begin and end date since gathering all
	--the data in the database is not necessary, but we don't need to be exact to the day.
	v_BEGIN_DATE := LEAST(p_CAST_CONTEXT.BEGIN_DATE, p_CAST_CONTEXT.PROFILE_BEGIN_DATE) - 60;
	v_END_DATE := p_CAST_CONTEXT.END_DATE + GREATEST(p_CAST_CONTEXT.PROFILE_BEGIN_DATE - p_CAST_CONTEXT.BEGIN_DATE,0) + 60;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE CUST_WRF_SEASON_CACHE';

	IF GA.VERSION_CUSTOMER_USAGE_WRF THEN
		INSERT INTO CUST_WRF_SEASON_CACHE
		SELECT
			X.AGGREGATE_ID,
			X.CUSTOMER_ID,
			X.COMPOSITE_BEGIN_DATE,
			X.COMPOSITE_END_DATE,
			I.BEGIN_DATE AS SEASON_BEGIN_DATE,
			I.END_DATE AS SEASON_END_DATE,
			F.STATION_ID,
			F.PARAMETER_ID,
			CASE WHEN E.R2 >= 0 THEN
				NVL(E.ALPHA, X.AVG_ALPHA)
			ELSE
				X.AVG_ALPHA
			END AS COMPOSITE_ALPHA,
			CASE WHEN E.R2 >= 0 THEN
				NVL(E.BETA, X.AVG_BETA)
			ELSE
				X.AVG_BETA
			END AS COMPOSITE_BETA,
			NVL(E.Y_LIMIT,0) AS Y_LIMIT
		FROM
			(
			SELECT
				A.AGGREGATE_ID,
				A.CUSTOMER_ID,
				B.WRF_ID,
				GREATEST(A.BEGIN_DATE, B.BEGIN_DATE) AS COMPOSITE_BEGIN_DATE,
				LEAST(NVL(A.END_DATE, g_HIGH_DATE), NVL(B.END_DATE, g_HIGH_DATE)) AS COMPOSITE_END_DATE,
				C.AVG_ALPHA,
				C.AVG_BETA,
				C.TEMPLATE_ID,
				D.SEASON_ID
			FROM
				AGGREGATE_ACCOUNT_CUSTOMER A,
				CUSTOMER_USAGE_WRF B,
				USAGE_WRF_STATISTICS C,
				USAGE_WRF_SEASON D
			WHERE A.CUSTOMER_ID = B.CUSTOMER_ID
				AND B.BEGIN_DATE <= v_END_DATE
				AND B.END_DATE >= v_BEGIN_DATE
				AND NVL(B.END_DATE, g_HIGH_DATE) >= A.BEGIN_DATE
				AND B.BEGIN_DATE <= NVL(A.END_DATE, g_HIGH_DATE)
				AND C.WRF_ID = B.WRF_ID
				AND C.SEGMENT_NBR = 1
				AND C.AS_OF_DATE =
					(SELECT MAX(AS_OF_DATE)
					FROM USAGE_WRF_STATISTICS
					WHERE WRF_ID = C.WRF_ID
						AND TEMPLATE_ID = C.TEMPLATE_ID
						AND SEGMENT_NBR = C.SEGMENT_NBR
						AND AS_OF_DATE <= p_CAST_CONTEXT.INPUT_AS_OF_DATE
						AND LAST_RUN_STATUS = 'Production')
				AND C.LAST_RUN_STATUS = 'Production'
				AND D.WRF_ID = C.WRF_ID
				AND D.TEMPLATE_ID = C.TEMPLATE_ID
				AND D.AS_OF_DATE = g_LOW_DATE
			) X,
			CUSTOMER_USAGE_WRF_LINE E,
			USAGE_WRF F,
			SEASON_DATES I
		WHERE E.CUSTOMER_ID(+) = X.CUSTOMER_ID
			AND E.WRF_ID(+) = X.WRF_ID
			AND E.TEMPLATE_ID(+) = X.TEMPLATE_ID
			AND E.AS_OF_DATE(+) = g_LOW_DATE
			AND E.SEGMENT_NBR(+) = 1
			AND F.WRF_ID = X.WRF_ID
			AND I.SEASON_ID = X.SEASON_ID;
	ELSE --NON-VERSIONED QUERY
		INSERT INTO CUST_WRF_SEASON_CACHE
		SELECT
			X.AGGREGATE_ID,
			X.CUSTOMER_ID,
			X.COMPOSITE_BEGIN_DATE,
			X.COMPOSITE_END_DATE,
			I.BEGIN_DATE AS SEASON_BEGIN_DATE,
			I.END_DATE AS SEASON_END_DATE,
			F.STATION_ID,
			F.PARAMETER_ID,
			CASE WHEN E.R2 >= 0 THEN
				NVL(E.ALPHA, X.AVG_ALPHA)
			ELSE
				X.AVG_ALPHA
			END AS COMPOSITE_ALPHA,
			CASE WHEN E.R2 >= 0 THEN
				NVL(E.BETA, X.AVG_BETA)
			ELSE
				X.AVG_BETA
			END AS COMPOSITE_BETA,
			NVL(E.Y_LIMIT,0) AS Y_LIMIT
		FROM
			(
			SELECT
				A.AGGREGATE_ID,
				A.CUSTOMER_ID,
				B.WRF_ID,
				GREATEST(A.BEGIN_DATE, B.BEGIN_DATE) AS COMPOSITE_BEGIN_DATE,
				LEAST(NVL(A.END_DATE, g_HIGH_DATE), NVL(B.END_DATE, g_HIGH_DATE)) AS COMPOSITE_END_DATE,
				C.AVG_ALPHA,
				C.AVG_BETA,
				C.TEMPLATE_ID,
				D.SEASON_ID
			FROM
				AGGREGATE_ACCOUNT_CUSTOMER A,
				CUSTOMER_USAGE_WRF B,
				USAGE_WRF_STATISTICS C,
				USAGE_WRF_SEASON D
			WHERE A.CUSTOMER_ID = B.CUSTOMER_ID
				AND B.BEGIN_DATE <= v_END_DATE
				AND B.END_DATE >= v_BEGIN_DATE
				AND NVL(B.END_DATE, g_HIGH_DATE) >= A.BEGIN_DATE
				AND B.BEGIN_DATE <= NVL(A.END_DATE, g_HIGH_DATE)
				AND C.WRF_ID = B.WRF_ID
				AND C.SEGMENT_NBR = 1
				AND C.AS_OF_DATE = g_LOW_DATE
				AND C.LAST_RUN_STATUS = 'Production'
				AND D.WRF_ID = C.WRF_ID
				AND D.TEMPLATE_ID = C.TEMPLATE_ID
				AND D.AS_OF_DATE = g_LOW_DATE
			) X,
			CUSTOMER_USAGE_WRF_LINE E,
			USAGE_WRF F,
			SEASON_DATES I
		WHERE E.CUSTOMER_ID(+) = X.CUSTOMER_ID
			AND E.WRF_ID(+) = X.WRF_ID
			AND E.TEMPLATE_ID(+) = X.TEMPLATE_ID
			AND E.AS_OF_DATE(+) = g_LOW_DATE
			AND E.SEGMENT_NBR(+) = 1
			AND F.WRF_ID = X.WRF_ID
			AND I.SEASON_ID = X.SEASON_ID;
	END IF;

	--THIS TEMP TABLE IS ONLY USED TO POPULATE THE VALUE CACHE.
	--THIS METHOD WAS FOUND BY ALEX TO BE THE MOST OPTIMAL WAY OF POPULATION.
	EXECUTE IMMEDIATE 'TRUNCATE TABLE STATION_PARAMETER_INDEX_CACHE';

	INSERT INTO STATION_PARAMETER_INDEX_CACHE
	SELECT DISTINCT STATION_ID, PARAMETER_ID
	FROM CUST_WRF_SEASON_CACHE;

	EXECUTE IMMEDIATE 'TRUNCATE TABLE STATION_PARAMETER_VALUE_CACHE';

	INSERT INTO STATION_PARAMETER_VALUE_CACHE
		(STATION_ID, PARAMETER_ID, PARAMETER_DATE, PARAMETER_VAL)
	SELECT /*+ ORDERED USE_NL(A,B) */
		B.STATION_ID, B.PARAMETER_ID, B.PARAMETER_DATE, B.PARAMETER_VAL
	FROM
		STATION_PARAMETER_INDEX_CACHE A,
		STATION_PARAMETER_VALUE B
	WHERE B.CASE_ID = p_CAST_CONTEXT.WEATHER_CASE_ID
		AND B.PARAMETER_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		AND B.PARAMETER_CODE = v_PARAMETER_CODE
		AND B.STATION_ID = A.STATION_ID
		AND B.PARAMETER_ID = A.PARAMETER_ID;

	COMMIT;

END INIT_CUSTOMER_WRF_CACHE;
----------------------------------------------------------------------------------------------------
-- Log warning messages for any customers with zero enrollment, missing Usage WRFs,
--   or missing weather for each day of a Customer Usage WRF run.  Each of the three
--   types gets one summary warning message for the day if any accounts fall into a given bucket.
--   The full list of accounts is attached in the Event Details, where it does not clog the log.
PROCEDURE CUSTOMER_USAGE_WRF_LOG_MISSING
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE
	) AS

	--Warning messages for customers with Zero Enrollment
	CURSOR c_ZERO_ENROLLMENT IS
		SELECT 'Aggregate Account ' || A.ACCOUNT_NAME || ' has zero enrollment for ' || TEXT_UTIL.TO_CHAR_DATE(p_CAST_CONTEXT.SERVICE_DATE) || '.' AS MSG
		FROM AGGREGATE_ACCOUNT_SERVICE S, AGGREGATE_ACCOUNT_ESP E, ACCOUNT A
			WHERE S.SERVICE_DATE = p_CAST_CONTEXT.SERVICE_DATE
				AND S.SERVICE_ACCOUNTS = 0
				AND E.AGGREGATE_ID = S.AGGREGATE_ID
				AND p_CAST_CONTEXT.SERVICE_DATE BETWEEN E.BEGIN_DATE AND E.END_DATE
				AND A.ACCOUNT_ID = E.ACCOUNT_ID
		ORDER BY 1;

	-- Warning messages for customers with Missing USAGE_WRF
	CURSOR c_MISSING_USAGE_WRF IS
		SELECT 'Customer ' || X.CUSTOMER_NAME || ' (' || X.CUSTOMER_IDENTIFIER || ') does not have a valid Usage WRF for ' || TEXT_UTIL.TO_CHAR_DATE(p_CAST_CONTEXT.SERVICE_DATE) || '.' AS MSG
		FROM CUSTOMER X, AGGREGATE_ACCOUNT_CUSTOMER Y
		WHERE X.CUSTOMER_IS_ACTIVE = 1
			AND Y.CUSTOMER_ID = X.CUSTOMER_ID
			AND p_CAST_CONTEXT.SERVICE_DATE BETWEEN Y.BEGIN_DATE AND Y.END_DATE
			AND NOT EXISTS
				(
				SELECT 1 FROM CUST_WRF_SEASON_CACHE S
				WHERE S.CUSTOMER_ID = X.CUSTOMER_ID
					AND p_CAST_CONTEXT.SERVICE_DATE BETWEEN S.COMPOSITE_BEGIN_DATE AND S.COMPOSITE_END_DATE
					AND p_CAST_CONTEXT.SERVICE_DATE BETWEEN S.SEASON_BEGIN_DATE AND S.SEASON_END_DATE
				)
		ORDER BY 1;

	-- Warning messages for customers with Missing Weather
	CURSOR c_MISSING_WEATHER IS
		SELECT 'Weather is missing for Station=' || B.STATION_NAME || ', Parameter=' || C.PARAMETER_NAME  ||  ' on ' || TEXT_UTIL.TO_CHAR_DATE(p_CAST_CONTEXT.SERVICE_DATE) || '.' AS MSG
		FROM STATION_PARAMETER_INDEX_CACHE A, WEATHER_STATION B, WEATHER_PARAMETER C
		WHERE B.STATION_ID = A.STATION_ID
			AND C.PARAMETER_ID = A.PARAMETER_ID
			AND NOT EXISTS
				(
				SELECT 1 FROM STATION_PARAMETER_VALUE_CACHE X
				WHERE X.STATION_ID = A.STATION_ID
					AND X.PARAMETER_ID = A.PARAMETER_ID
					AND X.PARAMETER_DATE = p_CAST_CONTEXT.SERVICE_DATE
				)
		ORDER BY 1;

	v_CLOB CLOB := NULL;
	v_COUNT PLS_INTEGER;

	--Inner procedure to append a warning onto v_CLOB.
	PROCEDURE APPEND_WARNING(p_STR IN VARCHAR2) IS
	BEGIN
		IF v_CLOB IS NULL THEN
			DBMS_LOB.CREATETEMPORARY(v_CLOB, TRUE);
			DBMS_LOB.OPEN(v_CLOB, DBMS_LOB.LOB_READWRITE);
		END IF;
		DBMS_LOB.WRITEAPPEND(v_CLOB, LENGTH(p_STR||UTL_TCP.CRLF), p_STR||UTL_TCP.CRLF);
	END APPEND_WARNING;

	--Inner procedure to log warnings if there are any accumulated in v_CLOB, and then clear out v_CLOB.
	PROCEDURE LOG_WARNINGS(p_WARNING_MESSAGE IN VARCHAR2) IS
	BEGIN
		IF v_CLOB IS NOT NULL THEN
			DBMS_LOB.CLOSE(v_CLOB);
			LOGS.LOG_WARN(p_WARNING_MESSAGE);
			LOGS.POST_EVENT_DETAILS('Details', CONSTANTS.MIME_TYPE_TEXT, v_CLOB);
			DBMS_LOB.FREETEMPORARY(v_CLOB);
			v_CLOB := NULL;
		END IF;
	END LOG_WARNINGS;
BEGIN
	--Log Warning messages for customers with Zero Enrollment
	v_COUNT := 0;
	FOR v_MSG IN c_ZERO_ENROLLMENT LOOP
		APPEND_WARNING(v_MSG.MSG);
		v_COUNT := v_COUNT + 1;
	END LOOP;
	LOG_WARNINGS(TO_CHAR(v_COUNT) || ' Aggregate accounts have missing enrollment on ' || TEXT_UTIL.TO_CHAR_DATE(p_CAST_CONTEXT.SERVICE_DATE) || '.');

	--Log Warning messages for customers with Missing USAGE_WRF
	v_COUNT := 0;
	FOR v_MSG IN c_MISSING_USAGE_WRF LOOP
		APPEND_WARNING(v_MSG.MSG);
		v_COUNT := v_COUNT + 1;
	END LOOP;
	LOG_WARNINGS(TO_CHAR(v_COUNT) || ' Aggregate accounts have missing Usage WRFs on ' || TEXT_UTIL.TO_CHAR_DATE(p_CAST_CONTEXT.SERVICE_DATE) || '.');

	--Log Warning messages for customers with Missing Weather
	v_COUNT := 0;
	FOR v_MSG IN c_MISSING_WEATHER LOOP
		APPEND_WARNING(v_MSG.MSG);
		v_COUNT := v_COUNT + 1;
	END LOOP;
	LOG_WARNINGS(TO_CHAR(v_COUNT) || ' Stations and Parameters have missing weather data on  ' || TEXT_UTIL.TO_CHAR_DATE(p_CAST_CONTEXT.SERVICE_DATE) || '.');

EXCEPTION
	WHEN OTHERS THEN
		--Close anything that was left open.
		IF DBMS_LOB.ISOPEN(v_CLOB) <> 0 THEN DBMS_LOB.CLOSE(v_CLOB); END IF;

		--Just log a warning and continue since this procedure only logs warnings in the first place.
		ERRS.LOG_AND_CONTINUE('Error attempting to log warnings for missing data.', LOGS.c_LEVEL_WARN);
END CUSTOMER_USAGE_WRF_LOG_MISSING;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_CUSTOMER_USAGE_WRF_DAY
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE
	) AS

-- Cache any Customer Usage WRF Profiles for a Service Date.
	v_AGGREGATE_ID NUMBER(9) := CONSTANTS.NOT_ASSIGNED;
	v_CUMULATIVE NUMBER(14,4) := 0;
	v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
	v_PREV_AGGREGATE_ID INTEGER := -1;
	v_REC_COUNT PLS_INTEGER;
	v_STORE_CUST_SVC_LOAD PLS_INTEGER;

BEGIN

	g_CUST_USAGE_WRF_IDX_START.DELETE;
	g_CUST_USAGE_WRF_IDX_STOP.DELETE;

	IF GA.ENABLE_CUSTOMER_CAST THEN
		IF p_CAST_CONTEXT.SERVICE_CODE = GA.FORECAST_SERVICE THEN
			IF GA.STORE_CUST_SVC_LOAD_FORECAST THEN
				v_STORE_CUST_SVC_LOAD := 1;
			ELSE
				v_STORE_CUST_SVC_LOAD := 0;
			END IF;
		ELSE --IF p_CAST_CONTEXT.SERVICE_CODE = GA.BACKCAST_SERVICE THEN
			IF GA.STORE_CUST_SVC_LOAD_BACKCAST THEN
				v_STORE_CUST_SVC_LOAD := 1;
			ELSE
				v_STORE_CUST_SVC_LOAD := 0;
			END IF;
		END IF;
		--ROLL UP BY AGGREGATE ID AND CUSTOMER
		SELECT A.AGGREGATE_ID, CASE v_STORE_CUST_SVC_LOAD WHEN 1 THEN A.CUSTOMER_ID ELSE CONSTANTS.NOT_ASSIGNED END,
			AVG(GREATEST(A.COMPOSITE_ALPHA + A.COMPOSITE_BETA * G.PARAMETER_VAL, A.Y_LIMIT))
		BULK COLLECT INTO g_CUSTOMER_USAGE_WRF
		FROM CUST_WRF_SEASON_CACHE A, STATION_PARAMETER_VALUE_CACHE G
		WHERE p_CAST_CONTEXT.SERVICE_DATE BETWEEN A.COMPOSITE_BEGIN_DATE AND A.COMPOSITE_END_DATE
			AND p_CAST_CONTEXT.PROFILE_DATE BETWEEN A.SEASON_BEGIN_DATE AND A.SEASON_END_DATE
			AND G.STATION_ID = A.STATION_ID
			AND G.PARAMETER_ID = A.PARAMETER_ID
			AND G.PARAMETER_DATE = p_CAST_CONTEXT.SERVICE_DATE
		GROUP BY A.AGGREGATE_ID, CASE v_STORE_CUST_SVC_LOAD WHEN 1 THEN A.CUSTOMER_ID ELSE CONSTANTS.NOT_ASSIGNED END
		ORDER BY A.AGGREGATE_ID, CASE v_STORE_CUST_SVC_LOAD WHEN 1 THEN A.CUSTOMER_ID ELSE CONSTANTS.NOT_ASSIGNED END;
	ELSE
		--ROLL UP BY AGGREGATE ID
		SELECT A.AGGREGATE_ID, CONSTANTS.NOT_ASSIGNED,
			AVG(GREATEST(A.COMPOSITE_ALPHA + A.COMPOSITE_BETA * G.PARAMETER_VAL, A.Y_LIMIT))
		BULK COLLECT INTO g_CUSTOMER_USAGE_WRF
		FROM CUST_WRF_SEASON_CACHE A, STATION_PARAMETER_VALUE_CACHE G
		WHERE p_CAST_CONTEXT.SERVICE_DATE BETWEEN A.COMPOSITE_BEGIN_DATE AND A.COMPOSITE_END_DATE
			AND p_CAST_CONTEXT.PROFILE_DATE BETWEEN A.SEASON_BEGIN_DATE AND A.SEASON_END_DATE
			AND G.STATION_ID = A.STATION_ID
			AND G.PARAMETER_ID = A.PARAMETER_ID
			AND G.PARAMETER_DATE = p_CAST_CONTEXT.SERVICE_DATE
		GROUP BY A.AGGREGATE_ID
		ORDER BY A.AGGREGATE_ID;
	END IF;

	CUSTOMER_USAGE_WRF_LOG_MISSING(p_CAST_CONTEXT);

	v_REC_COUNT := g_CUSTOMER_USAGE_WRF.COUNT();
	FOR I IN 1..v_REC_COUNT LOOP
		IF g_CUSTOMER_USAGE_WRF(I).AGGREGATE_ID <> v_PREV_AGGREGATE_ID THEN
			IF I > 1 THEN
				g_CUST_USAGE_WRF_IDX_STOP(v_PREV_AGGREGATE_ID) := I-1;
			END IF;
			v_PREV_AGGREGATE_ID := g_CUSTOMER_USAGE_WRF(I).AGGREGATE_ID;
			g_CUST_USAGE_WRF_IDX_START(v_PREV_AGGREGATE_ID) := I;
		END IF;
	END LOOP;
	IF v_REC_COUNT > 0 THEN
		g_CUST_USAGE_WRF_IDX_STOP(g_CUSTOMER_USAGE_WRF(v_REC_COUNT).AGGREGATE_ID) := v_REC_COUNT;
	END IF;

	IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
		LOGS.LOG_DEBUG_DETAIL('CACHE_CUSTOMER_USAGE_WRF_DAY');
		LOGS.LOG_DEBUG_DETAIL('<aggregate id>, <customer id>,<wrf val>,<cumulative>');
		IF g_CUSTOMER_USAGE_WRF.COUNT > 0 THEN
			v_REC_COUNT := g_CUSTOMER_USAGE_WRF.COUNT();
			FOR I IN 1..v_REC_COUNT LOOP
				IF v_AGGREGATE_ID <> g_CUSTOMER_USAGE_WRF(I).AGGREGATE_ID THEN v_CUMULATIVE := 0; END IF;
				v_CUMULATIVE := v_CUMULATIVE + g_CUSTOMER_USAGE_WRF(I).WRF_VAL;
				LOGS.LOG_DEBUG_DETAIL(TO_CHAR(g_CUSTOMER_USAGE_WRF(I).AGGREGATE_ID) || ',' || TO_CHAR(g_CUSTOMER_USAGE_WRF(I).CUSTOMER_ID) || ',' || TO_CHAR(g_CUSTOMER_USAGE_WRF(I).WRF_VAL) || ',' || TO_CHAR(v_CUMULATIVE));
				v_AGGREGATE_ID := g_CUSTOMER_USAGE_WRF(I).AGGREGATE_ID;
			END LOOP;
		END IF;
	END IF;

	IF LOGS.IS_DEBUG_ENABLED() THEN
		LOGS.LOG_DEBUG('CACHE_CUSTOMER_USAGE_WRF_DAY ELAPSED TIME='  || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED) || ', COUNT=' || TO_CHAR(g_CUSTOMER_USAGE_WRF.COUNT));
	END IF;

END CACHE_CUSTOMER_USAGE_WRF_DAY;
----------------------------------------------------------------------------------------------------
PROCEDURE CUSTOMER_USAGE_WRF_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_AGGREGATE_ID IN NUMBER,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

-- Append to the profile a Usage WRF Profile for this service.

v_INDEX PLS_INTEGER;
v_PROFILE_INDEX BINARY_INTEGER;
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;

BEGIN

	p_PROFILE.DELETE;

	IF g_CUST_USAGE_WRF_IDX_START.EXISTS(p_AGGREGATE_ID) THEN
		FOR v_INDEX IN g_CUST_USAGE_WRF_IDX_START(p_AGGREGATE_ID)..g_CUST_USAGE_WRF_IDX_STOP(p_AGGREGATE_ID) LOOP
			IF GA.ENABLE_CUSTOMER_CAST THEN
				v_PROFILE_INDEX := g_CUSTOMER_USAGE_WRF(v_INDEX).CUSTOMER_ID;
			ELSE
				v_PROFILE_INDEX := 1;
			END IF;
			p_PROFILE(v_PROFILE_INDEX) := g_CUSTOMER_USAGE_WRF(v_INDEX).WRF_VAL;
		END LOOP;
	END IF;

	IF LOGS.IS_DEBUG_ENABLED() THEN
		LOGS.LOG_DEBUG('CUSTOMER_USAGE_WRF_PROFILE ELAPSED TIME='  || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED));
	END IF;

END CUSTOMER_USAGE_WRF_PROFILE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PROFILE_ACCOUNT_REF
	(
	p_PROFILE_ID IN NUMBER
	) RETURN NUMBER IS

-- Answer the profile status of the associated profile id.

v_PROFILE_ACCOUNT_REF LOAD_PROFILE.PROFILE_ACCOUNT_REF%TYPE;
v_ACCOUNT_ID NUMBER(9) := 0;

BEGIN

	SELECT PROFILE_ACCOUNT_REF
	INTO v_PROFILE_ACCOUNT_REF
	FROM LOAD_PROFILE
	WHERE PROFILE_ID = p_PROFILE_ID;

	v_ACCOUNT_ID := TO_NUMBER(v_PROFILE_ACCOUNT_REF);
	RETURN v_ACCOUNT_ID;

 	EXCEPTION
 		WHEN OTHERS THEN
			ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
			RETURN 0;

END GET_PROFILE_ACCOUNT_REF;
----------------------------------------------------------------------------------------------------
PROCEDURE USAGE_WRF_PROFILE
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROFILE_ID IN NUMBER,
	p_PROFILE_INTERVAL IN NUMBER,
	p_PROFILE_AS_OF_DATE IN DATE,
	p_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

-- Append to the profile a Usage WRF Profile for this service.
-- Warning: This will only work for daily intervals really.  It will probably blow up for electric.

v_INDEX BINARY_INTEGER;
v_ELAPSED PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_ACCOUNT_ID NUMBER(9);

CURSOR c_USAGE_WRF_VERSIONED IS
	SELECT AVG(GREATEST(E.ALPHA + E.BETA * G.PARAMETER_VAL, NVL(E.Y_LIMIT,0))) "WRF_VAL"
	FROM ACCOUNT_STATUS A,
		 ACCOUNT_STATUS_NAME STATUS_NAME,
         ACCOUNT_USAGE_WRF B,
         USAGE_WRF_STATISTICS C,
         USAGE_WRF_SEASON D,
         ACCOUNT_USAGE_WRF_LINE E,
         USAGE_WRF F,
         STATION_PARAMETER_VALUE G,
         SEASON_DATES I
	WHERE A.ACCOUNT_ID = v_ACCOUNT_ID
		AND p_CAST_CONTEXT.SERVICE_DATE BETWEEN A.BEGIN_DATE AND NVL(A.END_DATE, p_CAST_CONTEXT.SERVICE_DATE)
		AND STATUS_NAME.STATUS_NAME = A.STATUS_NAME
		AND STATUS_NAME.IS_ACTIVE = 1
		AND B.ACCOUNT_ID = A.ACCOUNT_ID
		AND p_CAST_CONTEXT.SERVICE_DATE BETWEEN B.BEGIN_DATE AND NVL(B.END_DATE, p_CAST_CONTEXT.SERVICE_DATE)
		AND C.WRF_ID = B.WRF_ID
		AND C.TEMPLATE_ID = C.TEMPLATE_ID
		AND C.SEGMENT_NBR = 1
		AND C.AS_OF_DATE =
			(SELECT MAX(AS_OF_DATE)
			FROM USAGE_WRF_STATISTICS
			WHERE WRF_ID = C.WRF_ID
				AND TEMPLATE_ID = C.TEMPLATE_ID
				AND SEGMENT_NBR = C.SEGMENT_NBR
				AND AS_OF_DATE <= p_PROFILE_AS_OF_DATE
				AND UPPER(SUBSTR(LAST_RUN_STATUS,1,2)) = 'PR')
		AND D.WRF_ID = C.WRF_ID
		AND D.TEMPLATE_ID = C.TEMPLATE_ID
		AND D.SEASON_ID = I.SEASON_ID --
		AND D.AS_OF_DATE = C.AS_OF_DATE
        AND p_CAST_CONTEXT.PROFILE_DATE  BETWEEN I.BEGIN_DATE AND I.END_DATE  --Replace DATE_IS_WITHIN_SEASON fxn
		AND E.ACCOUNT_ID = B.ACCOUNT_ID
		AND E.WRF_ID = C.WRF_ID
		AND E.TEMPLATE_ID = C.TEMPLATE_ID
		AND E.SEGMENT_NBR = 1
		AND E.AS_OF_DATE = C.AS_OF_DATE
		AND F.WRF_ID = E.WRF_ID
		AND G.CASE_ID = p_CAST_CONTEXT.WEATHER_CASE_ID
		AND G.STATION_ID = F.STATION_ID
		AND G.PARAMETER_ID = F.PARAMETER_ID
		AND G.PARAMETER_CODE = p_CAST_CONTEXT.WEATHER_PARAMETER_CODE
		AND G.PARAMETER_DATE = p_CAST_CONTEXT.SERVICE_DATE
	GROUP BY A.ACCOUNT_ID;

CURSOR c_USAGE_WRF_NON_VERSIONED IS
	SELECT AVG(GREATEST(E.ALPHA + E.BETA * G.PARAMETER_VAL, NVL(E.Y_LIMIT,0))) "WRF_VAL"
	FROM ACCOUNT_STATUS A,
		 ACCOUNT_STATUS_NAME STATUS_NAME,
         ACCOUNT_USAGE_WRF B,
         USAGE_WRF_STATISTICS C,
         USAGE_WRF_SEASON D,
         ACCOUNT_USAGE_WRF_LINE E,
         USAGE_WRF F,
         STATION_PARAMETER_VALUE G,
         SEASON_DATES I
	WHERE A.ACCOUNT_ID = v_ACCOUNT_ID
		AND p_CAST_CONTEXT.SERVICE_DATE BETWEEN A.BEGIN_DATE AND NVL(A.END_DATE, p_CAST_CONTEXT.SERVICE_DATE)
		AND STATUS_NAME.STATUS_NAME = A.STATUS_NAME
		AND STATUS_NAME.IS_ACTIVE = 1
		AND B.ACCOUNT_ID = A.ACCOUNT_ID
		AND p_CAST_CONTEXT.SERVICE_DATE BETWEEN B.BEGIN_DATE AND NVL(B.END_DATE, p_CAST_CONTEXT.SERVICE_DATE)
		AND C.WRF_ID = B.WRF_ID
		AND C.TEMPLATE_ID = C.TEMPLATE_ID
		AND C.SEGMENT_NBR = 1
		AND C.AS_OF_DATE = g_LOW_DATE
		AND D.WRF_ID = C.WRF_ID
		AND D.TEMPLATE_ID = C.TEMPLATE_ID
		AND D.SEASON_ID = I.SEASON_ID
		AND D.AS_OF_DATE = C.AS_OF_DATE
        AND p_CAST_CONTEXT.PROFILE_DATE  BETWEEN I.BEGIN_DATE AND I.END_DATE  --Replace DATE_IS_WITHIN_SEASON fxn
		AND E.ACCOUNT_ID = B.ACCOUNT_ID
		AND E.WRF_ID = C.WRF_ID
		AND E.TEMPLATE_ID = C.TEMPLATE_ID
		AND E.SEGMENT_NBR = 1
		AND E.AS_OF_DATE = C.AS_OF_DATE
		AND F.WRF_ID = E.WRF_ID
		AND G.CASE_ID = p_CAST_CONTEXT.WEATHER_CASE_ID
		AND G.STATION_ID = F.STATION_ID
		AND G.PARAMETER_ID = F.PARAMETER_ID
		AND G.PARAMETER_CODE = p_CAST_CONTEXT.WEATHER_PARAMETER_CODE
		AND G.PARAMETER_DATE = p_CAST_CONTEXT.SERVICE_DATE
	GROUP BY A.ACCOUNT_ID;

BEGIN

	FILL_PROFILE(p_PROFILE_INTERVAL, p_PROFILE);
	v_ACCOUNT_ID := GET_PROFILE_ACCOUNT_REF(p_PROFILE_ID);

	IF LOGS.IS_DEBUG_ENABLED() THEN
		LOGS.LOG_DEBUG('USAGE_WRF_PROFILE');
		LOGS.LOG_DEBUG('PROFILE_ID='  || TO_CHAR(p_PROFILE_ID));
		LOGS.LOG_DEBUG('PROFILE_AS_OF_DATE=' || UT.TRACE_DATE(p_PROFILE_AS_OF_DATE));
		LOGS.LOG_DEBUG('ACCOUNT_REF_ID='  || TO_CHAR(v_ACCOUNT_ID));
	END IF;

	v_INDEX := 1;
	IF GA.VERSION_PROFILE THEN
		FOR v_USAGE_WRF_VERSIONED IN c_USAGE_WRF_VERSIONED LOOP
			 p_PROFILE(v_INDEX) := v_USAGE_WRF_VERSIONED.WRF_VAL;
			 IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
			 	 LOGS.LOG_DEBUG_DETAIL(TO_CHAR(p_PROFILE(v_INDEX)) || '@' || TO_CHAR(v_INDEX));
			 END IF;
			 v_INDEX := v_INDEX + 1;
		END LOOP;
	ELSE
		FOR v_USAGE_WRF_NON_VERSIONED IN c_USAGE_WRF_NON_VERSIONED LOOP
			 p_PROFILE(v_INDEX) := v_USAGE_WRF_NON_VERSIONED.WRF_VAL;
			 IF LOGS.IS_DEBUG_DETAIL_ENABLED() THEN
			 	 LOGS.LOG_DEBUG_DETAIL(TO_CHAR(p_PROFILE(v_INDEX)) || '@' || TO_CHAR(v_INDEX));
			 END IF;
			 v_INDEX := v_INDEX + 1;
		END LOOP;
	END IF;

	IF p_PROFILE.COUNT = 0 THEN
		g_OBJECT_NAME := CS.GET_ACCOUNT_NAME(v_ACCOUNT_ID);
		g_EVENT_TEXT := 'No Usage WRF for Account=' || g_OBJECT_NAME || ', Account Id=' || TO_CHAR(v_ACCOUNT_ID);
		LOGS.LOG_WARN(g_EVENT_TEXT);
		IF LOGS.IS_DEBUG_ENABLED() THEN
			LOGS.LOG_DEBUG(UPPER(g_EVENT_TEXT));
		END IF;
	END IF;

	IF LOGS.IS_DEBUG_ENABLED() THEN
		LOGS.LOG_DEBUG('USAGE_WRF_PROFILE ELAPSED TIME='  || TO_CHAR(DBMS_UTILITY.GET_TIME - v_ELAPSED));
	END IF;

END USAGE_WRF_PROFILE;
----------------------------------------------------------------------------------------------------
PROCEDURE WRF_PROFILE_PROJECTION
	(
	p_CAST_CONTEXT IN CAST_CONTEXT_TYPE,
	p_PROFILE_ID IN NUMBER,
	p_PROJECTION_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_TRACE_ON IN NUMBER,
	p_WRF_VAR_1 IN OUT NOCOPY GA.NUMBER_TABLE,
	p_WRF_VAR_2 IN OUT NOCOPY GA.NUMBER_TABLE,
	p_WRF_PROFILE IN OUT NOCOPY GA.NUMBER_TABLE,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	) AS

v_INDEX BINARY_INTEGER;
v_PROFILE_AS_OF_DATE DATE;
v_PROFILE_INTERVAL NUMBER(2);
v_WRF_VAR_2 NUMBER(8,2);
v_CAST_CONTEXT CAST_CONTEXT_TYPE := p_CAST_CONTEXT;
v_WRF_OBSERVATIONS WRF_OBSERVATION_TABLE := WRF_OBSERVATION_TABLE();

BEGIN

	IF NOT CAN_READ('QUOTE MANAGEMENT') THEN
		ERRS.RAISE_NO_READ_MODULE('QUOTE MANAGEMENT');
	END IF;

	p_STATUS := GA.SUCCESS;
	p_MESSAGE := 'OK';

	IF LOGS.IS_DEBUG_ENABLED THEN
		LOGS.LOG_DEBUG('WRF_PROFILE_PROJECTION');
		LOGS.LOG_DEBUG('PROFILE_ID=' || TO_CHAR(p_PROFILE_ID));
		LOGS.LOG_DEBUG('PROJECTION_DATE=' || TO_CHAR(p_PROJECTION_DATE));
		LOGS.LOG_DEBUG('AS_OF_DATE=' || UT.TRACE_DATE(p_AS_OF_DATE));
	END IF;

	v_PROFILE_AS_OF_DATE := CS.GET_PROFILE_AS_OF_DATE(p_PROFILE_ID, p_AS_OF_DATE);
	v_PROFILE_INTERVAL := p_WRF_VAR_1.COUNT;
	p_WRF_PROFILE.DELETE;
	v_CAST_CONTEXT.PROFILE_DATE := p_PROJECTION_DATE;
	v_CAST_CONTEXT.DAY_TYPE := g_ANY_DAY;

	v_INDEX := p_WRF_VAR_1.FIRST;
	WHILE v_INDEX <= p_WRF_VAR_1.LAST LOOP
		IF v_INDEX = p_WRF_VAR_1.FIRST THEN
			v_WRF_OBSERVATIONS.EXTEND(p_WRF_VAR_1.COUNT);
		END IF;
		IF p_WRF_VAR_2.EXISTS(v_INDEX) THEN
			v_WRF_VAR_2 := p_WRF_VAR_2(v_INDEX);
		ELSE
			v_WRF_VAR_2 := 0;
		END IF;
		--Use p_WRF_VAR_1(v_INDEX) instead of p_WRF_VAR_2(v_INDEX) for PARAMETER_1 -- wjc
		v_WRF_OBSERVATIONS(v_INDEX) := WRF_OBSERVATION_TYPE(NULL, NULL, NULL, p_WRF_VAR_1(v_INDEX), v_WRF_VAR_2, 0, 0, 0, 0);
		v_INDEX := p_WRF_VAR_1.NEXT(v_INDEX);
	END LOOP;

	WRF_PROFILE(v_CAST_CONTEXT, p_PROFILE_ID, v_PROFILE_INTERVAL, v_PROFILE_AS_OF_DATE, v_WRF_OBSERVATIONS, p_WRF_PROFILE);

END WRF_PROFILE_PROJECTION;
--------------------------------------------------------------------------------------------------
END FW;
/
