CREATE OR REPLACE PACKAGE WR AS
--Revision $Revision: 1.44 $

--Weather Reading Package

FUNCTION WHAT_VERSION RETURN VARCHAR;


PROCEDURE STATION_PARAMETER_NAMES
    (
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE STATION_PARAMETER_VALUES
    (
	p_MODEL_ID IN NUMBER,
	p_CASE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN VARCHAR,
	p_PARAMETER_CODE IN CHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE STATION_PARAMETER_READING
	(
	p_STATION_NAME IN VARCHAR,
	p_PARAMETER_NAME IN VARCHAR,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VAL IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE STATION_PARAMETER_READINGS_IMP
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VALS IN OUT NOCOPY GA.NUMBER_TABLE,
	p_SUCCESS IN OUT BOOLEAN
	);

PROCEDURE STATION_PARAMETER_READINGS
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VALS IN OUT NOCOPY GA.NUMBER_TABLE
	);

PROCEDURE STATION_PARAMETER_READINGS
	(
	p_STATION_NAME IN VARCHAR,
	p_PARAMETER_NAME IN VARCHAR,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN VARCHAR,
	p_PARAMETER_VALS IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_STATION_PARAMETER_VALUE
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE PUT_STATION_PARAMETER_VALUES
	(
	p_STATION_ALIAS IN VARCHAR,
	p_PARAMETER_ALIAS IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VALS IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE MARK_PARAMETER_AS_USED
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_DATE IN DATE,
	p_STATUS OUT NUMBER
	);

PROCEDURE STATION_PARAMETER_UPDATE
	(
	p_CASE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN CHAR,
	p_TIME_ZONE IN VARCHAR,
	p_ARGUMENTS IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE STATION_PARAMETER_FILL
	(
    p_CASE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_VALUE IN VARCHAR,
	p_STATUS OUT NUMBER
	);

PROCEDURE POST_STATION_READINGS
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	);

PROCEDURE WEATHER_STATION_PARAMETERS
	(
	p_STATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PUT_STATION_PARAMETER
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE WEATHER_STATION_COMPOSITES
	(
	p_STATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PUT_STATION_COMPOSITE
	(
	p_STATION_ID IN NUMBER,
	p_COMPOSITE_STATION_ID IN NUMBER,
	p_COMPOSITE_PERCENT IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE WEATHER_PARAMETER_COMPOSITES
	(
	p_PARAMETER_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	);

PROCEDURE PUT_PARAMETER_COMPOSITE
	(
	p_PARAMETER_ID IN NUMBER,
	p_COMPOSITE_PARAMETER_ID IN NUMBER,
	p_COMPOSITE_COEFFICIENT IN NUMBER,
	p_STATUS OUT NUMBER
	);

PROCEDURE WEATHER_COPY_REQUEST
	(
	p_STATIONS_AND_PARAMETERS IN VARCHAR2,
	p_SRC_ALL_DATES IN NUMBER,
	p_SRC_BEGIN_DATE IN DATE,
	p_SRC_END_DATE IN DATE,
	p_SRC_CASE_ID IN NUMBER,
	p_SRC_PARAMETER_CODE IN CHAR,
	p_TRG_SAME_TIME_PERIOD IN NUMBER,
	p_TRG_BEGIN_DATE IN DATE,
	p_TRG_ADD_OR_MULT IN CHAR,
	p_TRG_ADJUSTMENT_VAL IN NUMBER,
	p_TRG_CASE_ID IN NUMBER,
	p_TRG_PARAMETER_CODES IN VARCHAR2,
	p_TIME_ZONE IN VARCHAR2,
	p_STATUS OUT NUMBER
	);

PROCEDURE STATION_PARAMETER_TREE
	(
	p_CURSOR OUT GA.REFCURSOR
	);

PROCEDURE WEATHER_DATA
	(
	p_BEGIN_DATE			IN DATE,
	p_END_DATE 				IN DATE,
	p_TIME_ZONE				IN VARCHAR2,
	p_STATION_ID 			IN NUMBER_COLLECTION,
	p_PARAMETER_ID			IN NUMBER_COLLECTION,
	p_INTERVAL				IN VARCHAR2,
	p_CASE_ID				IN NUMBER,
	p_PARAMETER_CODE			IN STRING_COLLECTION,
	p_CURSOR			      OUT GA.REFCURSOR
	);

PROCEDURE PUT_WEATHER_DATA
	(
	p_WEATHER_DATE			IN VARCHAR2,
	p_WEATHER_TIME			IN VARCHAR2,
	p_TIME_ZONE				IN VARCHAR2,
	p_STATION_ID 			IN NUMBER,
	p_PARAMETER_ID			IN NUMBER,
	p_INTERVAL				IN VARCHAR2,
	p_CASE_ID				IN NUMBER,
	p_PARAMETER_CODE		IN VARCHAR2,
	p_PARAMETER_VAL			IN NUMBER
	);

PROCEDURE PARAMETER_DETAILS
	(
	p_BEGIN_DATE			IN DATE,
	p_END_DATE				IN DATE,
	p_STATION_ID 			IN NUMBER,
	p_PARAMETER_ID 			IN NUMBER,
	p_WEATHER_DATE			IN VARCHAR2,
	p_WEATHER_TIME			IN VARCHAR2,
	p_TIME_ZONE				IN VARCHAR2,
	p_INTERVAL				IN VARCHAR2,
	p_CASE_ID				IN NUMBER,
	p_PARAMETER_CODE		IN VARCHAR2,
	p_STATION_NAME 			OUT VARCHAR2,
	p_PARAMETER_NAME		OUT VARCHAR2,
	p_CURSOR			    OUT GA.REFCURSOR
	);

PROCEDURE STATION_HIERARCHY
	(
	p_CURSOR			    OUT GA.REFCURSOR
	);

PROCEDURE PARAMETER_HIERARCHY
	(
	p_ENTITY_ID 			IN NUMBER,
	p_CURSOR			    OUT GA.REFCURSOR
	);


FUNCTION PRODUCT_FROM_STRING
	(
	p_VALS IN VARCHAR2,
	p_DELIM IN CHAR := ','
	) RETURN NUMBER;

PROCEDURE CACHE_COMPOSITE_HIERARCHY
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETERS IN GA.ID_TABLE
	);

PROCEDURE CACHE_COMPOSITE_STATION_COEFFS
	(
	p_STATION_ID IN NUMBER,
	p_CLEAN_CACHE IN BOOLEAN := TRUE
	);

PROCEDURE CACHE_COMPOSITE_PARAM_COEFFS
	(
	p_PARAMETERS IN GA.ID_TABLE
	);
g_DOMAIN_NAME VARCHAR(16) := 'Weather';

END WR;
/
CREATE OR REPLACE PACKAGE BODY WR AS
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.44 $';
END WHAT_VERSION;
----------------------------------------------------------------------------------------------------
FUNCTION GET_PARAMETER_INTERVAL
	(
	p_PARAMETER_ID IN NUMBER
	) RETURN VARCHAR IS

-- Answer the Interval associated with the specified Weather Parameter.

v_INTERVAL VARCHAR(4);

BEGIN

	SELECT GET_INTERVAL_ABBREVIATION(PARAMETER_INTERVAL)
	INTO v_INTERVAL
	FROM WEATHER_PARAMETER
	WHERE PARAMETER_ID = p_PARAMETER_ID;

	RETURN v_INTERVAL;

EXCEPTION
	WHEN OTHERS THEN
		ERRS.LOG_AND_CONTINUE(p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
		RETURN '';
END GET_PARAMETER_INTERVAL;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_WEATHER_STATION
	(
	p_STATION_NAME IN VARCHAR,
	p_STATION_ID OUT NUMBER,
	p_TIME_ZONE OUT VARCHAR
	) AS

-- Answer the Internal Id associated with the specified Weather Station Name

BEGIN

	SELECT STATION_ID, DECODE_TIME_ZONE(TIME_ZONE)
	INTO p_STATION_ID, p_TIME_ZONE
	FROM WEATHER_STATION
	WHERE STATION_NAME = p_STATION_NAME;

END GET_WEATHER_STATION;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_WEATHER_STATION_ALIAS
	(
	p_STATION_ALIAS IN VARCHAR
	) RETURN NUMBER IS

-- Answer the Internal Id associated with the specified Weather Station Alias

v_STATION_ID NUMBER(9);

BEGIN

	SELECT STATION_ID
	INTO v_STATION_ID
	FROM WEATHER_STATION
	WHERE UPPER(STATION_ALIAS) = UPPER(LTRIM(RTRIM(p_STATION_ALIAS)))
	AND ROWNUM = 1;

	RETURN v_STATION_ID;
END ID_FOR_WEATHER_STATION_ALIAS;
----------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_WEATHER_PARAMETER_ALIAS
	(
	p_PARAMETER_ALIAS IN VARCHAR
	) RETURN NUMBER IS

-- Answer the Internal Id associated with the specified Weather Station Alias

v_PARAMETER_ID NUMBER(9);

BEGIN

	SELECT PARAMETER_ID
	INTO v_PARAMETER_ID
	FROM WEATHER_PARAMETER
	WHERE UPPER(PARAMETER_ALIAS) = UPPER(LTRIM(RTRIM(p_PARAMETER_ALIAS)))
	AND ROWNUM = 1;

	RETURN v_PARAMETER_ID;
END ID_FOR_WEATHER_PARAMETER_ALIAS;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_STATION_PARAMETER_VALUE
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

v_PARAMETER_DATE DATE;
v_INTERVAL VARCHAR(4) := GET_PARAMETER_INTERVAL(p_PARAMETER_ID);

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	IF v_INTERVAL = 'DD' THEN
		v_PARAMETER_DATE := TRUNC(p_PARAMETER_DATE);
	ELSE
		IF p_TIME_ZONE IS NOT NULL THEN
			v_PARAMETER_DATE := TO_CUT(p_PARAMETER_DATE, p_TIME_ZONE);
		ELSE
			v_PARAMETER_DATE := p_PARAMETER_DATE;
		END IF;
	END IF;

	UPDATE STATION_PARAMETER_VALUE
	SET	PARAMETER_VAL = p_PARAMETER_VAL
	WHERE CASE_ID = GA.BASE_CASE_ID
		AND STATION_ID = p_STATION_ID
		AND PARAMETER_ID = p_PARAMETER_ID
		AND PARAMETER_CODE = p_PARAMETER_CODE
		AND PARAMETER_DATE = v_PARAMETER_DATE;

	IF SQL%NOTFOUND THEN
		INSERT INTO STATION_PARAMETER_VALUE(
        	CASE_ID,
			STATION_ID,
			PARAMETER_ID,
			PARAMETER_CODE,
			PARAMETER_DATE,
			PARAMETER_VAL)
		VALUES (
	        GA.BASE_CASE_ID,
			p_STATION_ID,
			p_PARAMETER_ID,
			p_PARAMETER_CODE,
			v_PARAMETER_DATE,
			p_PARAMETER_VAL);
	END IF;

	p_STATUS := GA.SUCCESS;
END PUT_STATION_PARAMETER_VALUE;
----------------------------------------------------------------------------------------------------
PROCEDURE UPDATE_STATION_PARAMETER_VALUE
	(
	p_CASE_ID IN NUMBER,
    p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_PARAMETER_VAL IN NUMBER,
	p_STATUS OUT NUMBER
	) AS

	v_INTERVAL_ABBR VARCHAR(2);
BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;


	SELECT DECODE(PARAMETER_INTERVAL,'Hour', 'HH',
			 								   'Day', 'DD', 'MI')
	INTO v_INTERVAL_ABBR
	FROM WEATHER_PARAMETER
	WHERE PARAMETER_ID = p_PARAMETER_ID;

	UPDATE STATION_PARAMETER_VALUE
	SET	PARAMETER_VAL = p_PARAMETER_VAL
	WHERE CASE_ID = p_CASE_ID
    	AND STATION_ID = p_STATION_ID
		AND PARAMETER_ID = p_PARAMETER_ID
		AND PARAMETER_CODE = p_PARAMETER_CODE
		AND PARAMETER_DATE = TRUNC(p_PARAMETER_DATE, v_INTERVAL_ABBR);

	IF SQL%NOTFOUND THEN
		INSERT INTO STATION_PARAMETER_VALUE
			(
            CASE_ID,
			STATION_ID,
			PARAMETER_ID,
			PARAMETER_CODE,
			PARAMETER_DATE,
			PARAMETER_VAL
			)
		VALUES
			(
            p_CASE_ID,
			p_STATION_ID,
			p_PARAMETER_ID,
			p_PARAMETER_CODE,
			TRUNC(p_PARAMETER_DATE, v_INTERVAL_ABBR),
			p_PARAMETER_VAL
			);
	END IF;

	p_STATUS := GA.SUCCESS;
END UPDATE_STATION_PARAMETER_VALUE;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_STATION_PARAMETER_VALUE
	(
	p_CASE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_PARAMETER_VAL IN NUMBER
	) AS

BEGIN

	UPDATE STATION_PARAMETER_VALUE
	SET	PARAMETER_VAL = p_PARAMETER_VAL
	WHERE CASE_ID = p_CASE_ID
		AND STATION_ID = p_STATION_ID
		AND PARAMETER_ID = p_PARAMETER_ID
		AND PARAMETER_CODE = p_PARAMETER_CODE
		AND PARAMETER_DATE = p_PARAMETER_DATE;

	IF SQL%NOTFOUND THEN
		INSERT INTO STATION_PARAMETER_VALUE (
        	CASE_ID,
			STATION_ID,
			PARAMETER_ID,
			PARAMETER_CODE,
			PARAMETER_DATE,
			PARAMETER_VAL)
		VALUES (
	        p_CASE_ID,
			p_STATION_ID,
			p_PARAMETER_ID,
			p_PARAMETER_CODE,
			p_PARAMETER_DATE,
			p_PARAMETER_VAL);
	END IF;

END PUT_STATION_PARAMETER_VALUE;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_STATION_PARAMETER_VALUE
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_PARAMETER_VAL IN NUMBER
	) AS

BEGIN

	PUT_STATION_PARAMETER_VALUE(GA.BASE_CASE_ID, p_STATION_ID, p_PARAMETER_ID, p_PARAMETER_CODE, p_PARAMETER_DATE, p_PARAMETER_VAL);

END PUT_STATION_PARAMETER_VALUE;
----------------------------------------------------------------------------------------------------
PROCEDURE UPDATE_STATION_PARAMETER_PROJN
	(
	p_CASE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_DATE IN DATE,
	p_PARAMETER_MIN IN NUMBER,
	p_PARAMETER_MAX IN NUMBER,
	p_PARAMETER_AVG IN  NUMBER,
	p_STATUS OUT NUMBER
	) AS

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	UPDATE STATION_PARAMETER_PROJECTION
	SET	PARAMETER_MIN = p_PARAMETER_MIN,
			PARAMETER_MAX = p_PARAMETER_MAX,
			PARAMETER_AVG = p_PARAMETER_AVG
	WHERE CASE_ID = p_CASE_ID
		AND STATION_ID = p_STATION_ID
		AND PARAMETER_ID = p_PARAMETER_ID
		AND PARAMETER_DATE = p_PARAMETER_DATE;

	IF SQL%NOTFOUND THEN
		INSERT INTO STATION_PARAMETER_PROJECTION
			(
			CASE_ID,
			STATION_ID,
			PARAMETER_ID,
			PARAMETER_DATE,
			PARAMETER_MIN,
			PARAMETER_MAX,
			PARAMETER_AVG
			)
		VALUES
			(
			p_CASE_ID,
			p_STATION_ID,
			p_PARAMETER_ID,
			p_PARAMETER_DATE,
			p_PARAMETER_MIN,
			p_PARAMETER_MAX,
			p_PARAMETER_AVG
			);
	END IF;

	p_STATUS := GA.SUCCESS;
END UPDATE_STATION_PARAMETER_PROJN;
----------------------------------------------------------------------------------------------------
PROCEDURE NULL_CURSOR
    (
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

BEGIN

	OPEN p_CURSOR FOR
		SELECT NULL FROM DUAL;

END NULL_CURSOR;
----------------------------------------------------------------------------------------------------
PROCEDURE STATION_PARAMETER_NAMES
    (
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the names of weather stations and parameters defined in the database.

BEGIN

	IF NOT CAN_READ('Weather') THEN
		ERRS.RAISE_NO_READ_MODULE('Weather');
	END IF;

    p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR

	    SELECT B.STATION_NAME,
		    B.STATION_ID,
			C.PARAMETER_NAME,
			C.PARAMETER_ALIAS,
			C.PARAMETER_ID,
			C.PARAMETER_CATEGORY,
			C.PARAMETER_INTERVAL,
			C.PARAMETER_MEASUREMENT,
			C.PROJECTION_PERIOD
		FROM WEATHER_STATION_PARAMETER A,
			WEATHER_STATION B,
			WEATHER_PARAMETER C
		WHERE B.STATION_ID = A.STATION_ID
		    AND C.PARAMETER_ID = A.PARAMETER_ID
		UNION
			SELECT DISTINCT B.STATION_NAME,
				B.STATION_ID,
				C.PARAMETER_NAME,
				C.PARAMETER_ALIAS,
				C.PARAMETER_ID,
				C.PARAMETER_CATEGORY,
				C.PARAMETER_INTERVAL,
				C.PARAMETER_MEASUREMENT,
				C.PROJECTION_PERIOD
			FROM WEATHER_STATION_COMPOSITE A,
				WEATHER_STATION B,
				WEATHER_PARAMETER C,
				WEATHER_STATION_PARAMETER D
			WHERE A.STATION_ID = B.STATION_ID
				AND A.COMPOSITE_STATION_ID = D.STATION_ID
				AND C.PARAMETER_ID = D.PARAMETER_ID

		ORDER BY 1,3;


END STATION_PARAMETER_NAMES;
---------------------------------------------------------------------------------------------------
PROCEDURE STATION_PARAMETER_VALUES
    (
	p_MODEL_ID IN NUMBER,
	p_CASE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN VARCHAR,
	p_PARAMETER_CODE IN CHAR,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the weather station parameter data.

v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_INTERVAL VARCHAR(8) := p_INTERVAL;
v_PARAM_INTERVAL VARCHAR(16);
v_MODEL_ID NUMBER(2);
BEGIN

--MAKE SURE USER HAS APPROPRIATE ACCESS

	IF NOT CAN_WRITE('Data Setup') THEN
		ERRS.RAISE_NO_WRITE_MODULE('Data Setup');
	END IF;

    p_STATUS := GA.SUCCESS;

	IF p_PARAMETER_CODE = 'P' THEN -- Projection
		--A projection is always Daily or above.
		v_MODEL_ID := GA.GAS_MODEL;

		UT.CUT_DATE_RANGE(v_MODEL_ID, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, p_INTERVAL, v_BEGIN_DATE, v_END_DATE);
		OPEN p_CURSOR FOR
			 SELECT TO_CHAR(PARAMETER_DATE, 'YYYY-MM-DD ') AS PARAMETER_DATE,
			 		  PARAMETER_MIN AS PARAMETER_MIN,
					  PARAMETER_MAX AS PARAMETER_MAX,
					  PARAMETER_AVG AS PARAMETER_AVG,
					  HISTORICAL_BEGIN_DATE, HISTORICAL_END_DATE,
					  HISTORICAL_MIN, HISTORICAL_MAX, HISTORICAL_AVG,
					  HISTORICAL_SUM, HISTORICAL_CNT, HISTORICAL_FACTOR
			 FROM STATION_PARAMETER_PROJECTION
			 WHERE CASE_ID = p_CASE_ID
			 	  AND STATION_ID = p_STATION_ID
			 	  AND PARAMETER_ID = p_PARAMETER_ID
				  AND PARAMETER_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
			 ORDER BY 1;
	ELSE -- Comparison
		--use the parameter's interval to determine whether to roll up to hour or day
		SELECT PARAMETER_INTERVAL INTO v_PARAM_INTERVAL	FROM WEATHER_PARAMETER WHERE PARAMETER_ID = p_PARAMETER_ID;
		IF UPPER(v_PARAM_INTERVAL) IN ('DAY','WEEK','MONTH','QUARTER','YEAR') THEN
			v_MODEL_ID := GA.GAS_MODEL;
		ELSIF UPPER(v_PARAM_INTERVAL) IN ('15 MINUTE','30 MINUTE','HOUR') THEN
			v_MODEL_ID := GA.ELECTRIC_MODEL;
		ELSE
			v_MODEL_ID := p_MODEL_ID;
		END IF;
		IF v_INTERVAL IS NULL AND v_MODEL_ID = GA.GAS_MODEL THEN v_INTERVAL := 'DD'; END IF;

		UT.CUT_DATE_RANGE(v_MODEL_ID, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_INTERVAL, v_BEGIN_DATE, v_END_DATE);
		OPEN p_CURSOR FOR
		    SELECT FROM_CUT_AS_HED(PARAMETER_DATE, p_TIME_ZONE, v_INTERVAL, v_MODEL_ID) AS PARAMETER_DATE,
			 		  AVG(PARAMETER_VAL) AS PARAMETER_VAL
			FROM STATION_PARAMETER_VALUES -- union of standard and composite values
			WHERE STATION_ID = p_STATION_ID
			    AND CASE_ID = p_CASE_ID
                AND PARAMETER_ID = p_PARAMETER_ID
				AND PARAMETER_CODE = p_PARAMETER_CODE
				AND PARAMETER_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
			GROUP BY FROM_CUT_AS_HED(PARAMETER_DATE, p_TIME_ZONE, v_INTERVAL, v_MODEL_ID)
			ORDER BY 1;
	END IF;


END STATION_PARAMETER_VALUES;
----------------------------------------------------------------------------------------------------

PROCEDURE PUT_STATION_PARAMETER_VALUES
	(
	p_STATION_ALIAS IN VARCHAR,
	p_PARAMETER_ALIAS IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VALS IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Process date, value input from central services

v_STATION_ID NUMBER;
v_PARAMETER_ID NUMBER;
v_PARAMETER_DATE DATE;
v_CUT_PARAMETER_DATE DATE;
v_PARAMETER_VAL NUMBER;
v_PARAMETER_CODE CHAR(1);
v_STRING_TABLE GA.STRING_TABLE;
v_VALUES_TABLE GA.STRING_TABLE;
v_INDEX BINARY_INTEGER;
v_TIME_ZONE VARCHAR(16) := LOCAL_TIME_ZONE;

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	v_STATION_ID := ID_FOR_WEATHER_STATION_ALIAS(p_STATION_ALIAS);

	v_PARAMETER_ID := ID_FOR_WEATHER_PARAMETER_ALIAS(p_PARAMETER_ALIAS);
	IF v_PARAMETER_ID <= 0 THEN
	    p_STATUS := -102;
		RETURN;
	END IF;

	UT.TOKENS_FROM_STRING(p_PARAMETER_VALS,';', v_STRING_TABLE);
	v_INDEX := v_STRING_TABLE.FIRST;
	LOOP
		IF LENGTH(v_STRING_TABLE(v_INDEX)) > 0 THEN
			UT.TOKENS_FROM_STRING(v_STRING_TABLE(v_INDEX), ',', v_VALUES_TABLE);

			v_PARAMETER_CODE := SUBSTR(UPPER(LTRIM(RTRIM(v_VALUES_TABLE(1)))),1,1);
			IF v_PARAMETER_CODE = 'O' THEN v_PARAMETER_CODE := 'A'; END IF;

			v_PARAMETER_DATE := TO_DATE(LTRIM(RTRIM(v_VALUES_TABLE(2))), LTRIM(RTRIM(p_DATE_FORMAT)));

			v_CUT_PARAMETER_DATE := FROM_TZ(CAST(v_PARAMETER_DATE AS TIMESTAMP), RO_TZ_OFFSET(v_TIME_ZONE)) AT TIME ZONE RO_TZ_OFFSET(CUT_TIME_ZONE);

			v_PARAMETER_VAL := TO_NUMBER(v_VALUES_TABLE(3));

			UPDATE_STATION_PARAMETER_VALUE
				(
                GA.BASE_CASE_ID,
				v_STATION_ID,
				v_PARAMETER_ID,
				v_PARAMETER_CODE,
				v_CUT_PARAMETER_DATE,
				v_PARAMETER_VAL,
				p_STATUS
				);
			IF p_STATUS < GA.SUCCESS THEN
				RETURN;
			END IF;
		END IF;
		EXIT WHEN v_INDEX = v_STRING_TABLE.LAST;
		v_INDEX := v_STRING_TABLE.NEXT(v_INDEX);
	END LOOP;

	COMMIT;

END PUT_STATION_PARAMETER_VALUES;
----------------------------------------------------------------------------------------------------
PROCEDURE STATION_PARAMETER_READING
	(
	p_STATION_NAME IN VARCHAR,
	p_PARAMETER_NAME IN VARCHAR,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VAL IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Process single day single-interval reading for a weather station and weather parameter.

v_STATION_ID NUMBER;
v_PARAMETER_ID NUMBER;
v_PARAMETER_DATE DATE;
v_PARAMETER_CODE CHAR(1);

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;


	ID.ID_FOR_WEATHER_STATION(p_STATION_NAME, FALSE, v_STATION_ID);
	IF v_STATION_ID <= 0 THEN
	    p_STATUS := -101;
		RETURN;
	END IF;

	ID.ID_FOR_WEATHER_PARAMETER(p_PARAMETER_NAME, FALSE, v_PARAMETER_ID);
	IF v_PARAMETER_ID <= 0 THEN
	    p_STATUS := -102;
		RETURN;
	END IF;

	v_PARAMETER_CODE := LTRIM(RTRIM(p_PARAMETER_CODE));
	IF v_PARAMETER_CODE NOT IN('A','F') THEN
	    p_STATUS := -103;
		RETURN;
	END IF;

	v_PARAMETER_DATE := TRUNC(TO_DATE(LTRIM(RTRIM(p_PARAMETER_DATE)), LTRIM(RTRIM(p_DATE_FORMAT))));

	UPDATE_STATION_PARAMETER_VALUE
		(
        GA.BASE_CASE_ID,
		v_STATION_ID,
		v_PARAMETER_ID,
		v_PARAMETER_CODE,
		v_PARAMETER_DATE,
		TO_NUMBER(p_PARAMETER_VAL),
		p_STATUS
		);

END STATION_PARAMETER_READING;
----------------------------------------------------------------------------------------------------
PROCEDURE STATION_PARAMETER_READINGS
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VALS IN OUT NOCOPY GA.NUMBER_TABLE
	) AS

	v_SUCCESS BOOLEAN := TRUE;

BEGIN

	STATION_PARAMETER_READINGS_IMP (
		p_STATION_ID,
		p_PARAMETER_ID,
		p_PARAMETER_CODE,
		p_PARAMETER_DATE,
		p_TIME_ZONE,
		p_PARAMETER_VALS,
		v_SUCCESS);

END STATION_PARAMETER_READINGS;
----------------------------------------------------------------------------------------------------
PROCEDURE STATION_PARAMETER_READINGS_IMP
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_PARAMETER_VALS IN OUT NOCOPY GA.NUMBER_TABLE,
	p_SUCCESS IN OUT BOOLEAN
	) AS

-- Process single day multi-interval readings for a weather station and weather parameter.

v_PARAMETER_DATE DATE;
v_MINUTES NUMBER(2) := 60;
v_PARAMETER_CODE CHAR(1);
v_INDEX BINARY_INTEGER;

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	SELECT DECODE(UPPER(SUBSTR(LTRIM(RTRIM(p_PARAMETER_CODE)),1,1)),'A','A','F') INTO v_PARAMETER_CODE FROM DUAL;
	v_PARAMETER_DATE := TO_CUT(p_PARAMETER_DATE, p_TIME_ZONE);

	IF TRUNC(DST_SPRING_AHEAD_DATE(v_PARAMETER_DATE)) = TRUNC(p_PARAMETER_DATE) AND p_PARAMETER_VALS.COUNT = 24 THEN
		IF GA.DST_SPRING_AHEAD_OPTION = 'A' THEN
			p_PARAMETER_VALS.DELETE(2);
		ELSIF GA.DST_SPRING_AHEAD_OPTION = 'B' THEN
			p_PARAMETER_VALS.DELETE(3);
		ELSIF GA.DST_SPRING_AHEAD_OPTION = 'C' THEN
			p_PARAMETER_VALS.DELETE(24);
		END IF;
	ELSIF TRUNC(DST_FALL_BACK_DATE(v_PARAMETER_DATE)) = TRUNC(p_PARAMETER_DATE) AND p_PARAMETER_VALS.COUNT = 24 THEN
		IF GA.DST_FALL_BACK_OPTION = 'A' THEN
			FOR v_INDEX IN REVERSE 3..25 LOOP
				p_PARAMETER_VALS(v_INDEX) := p_PARAMETER_VALS(v_INDEX-1);
			END LOOP;
		ELSIF GA.DST_FALL_BACK_OPTION = 'B' THEN
			p_PARAMETER_VALS(25) := 0;
		END IF;
	END IF;

	IF p_SUCCESS THEN
		FOR v_INDEX IN p_PARAMETER_VALS.FIRST..p_PARAMETER_VALS.LAST LOOP
			IF p_PARAMETER_VALS.EXISTS(v_INDEX) THEN
				PUT_STATION_PARAMETER_VALUE(p_STATION_ID, p_PARAMETER_ID, v_PARAMETER_CODE, v_PARAMETER_DATE, p_PARAMETER_VALS(v_INDEX));
				v_PARAMETER_DATE := ADD_MINUTES_TO_DATE(v_PARAMETER_DATE, v_MINUTES);
			END IF;
		END LOOP;
	END IF;

END STATION_PARAMETER_READINGS_IMP;
----------------------------------------------------------------------------------------------------
PROCEDURE STATION_PARAMETER_READINGS
	(
	p_STATION_NAME IN VARCHAR,
	p_PARAMETER_NAME IN VARCHAR,
	p_PARAMETER_CODE IN VARCHAR,
	p_PARAMETER_DATE IN VARCHAR,
	p_DATE_FORMAT IN VARCHAR,
	p_TIME_ZONE IN VARCHAR,
	p_INTERVAL IN VARCHAR,
	p_PARAMETER_VALS IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

-- Process single day multi-interval readings for a weather station and weather parameter.

v_STATION_ID NUMBER;
v_PARAMETER_ID NUMBER;
v_PARAMETER_DATE DATE;
v_TIME_ZONE VARCHAR(16);
v_INTERVAL NUMBER;
v_PARAMETER_VAL NUMBER;
v_PARAMETER_CODE VARCHAR(16);
v_STRING_TABLE GA.STRING_TABLE;
v_INDEX BINARY_INTEGER;

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	GET_WEATHER_STATION(p_STATION_NAME, v_STATION_ID, v_TIME_ZONE);
	IF v_STATION_ID <= 0 THEN
	    p_STATUS := -101;
		RETURN;
	END IF;

	ID.ID_FOR_WEATHER_PARAMETER(p_PARAMETER_NAME, FALSE, v_PARAMETER_ID);
	IF v_PARAMETER_ID <= 0 THEN
	    p_STATUS := -102;
		RETURN;
	END IF;

	v_INTERVAL := TO_NUMBER(LTRIM(RTRIM(p_INTERVAL)));
	v_PARAMETER_CODE := LTRIM(RTRIM(p_PARAMETER_CODE));

	IF v_PARAMETER_CODE NOT IN('A','F') THEN
	    p_STATUS := -103;
		RETURN;
	END IF;

	v_PARAMETER_DATE := TO_DATE(LTRIM(RTRIM(p_PARAMETER_DATE)), LTRIM(RTRIM(p_DATE_FORMAT)));
	IF p_TIME_ZONE IS NOT NULL THEN
		v_TIME_ZONE := LTRIM(RTRIM(p_TIME_ZONE));
	END IF;
	v_TIME_ZONE := TIME_ZONE_FOR_DAY(v_PARAMETER_DATE, v_TIME_ZONE);

	v_PARAMETER_DATE := FROM_TZ(CAST(v_PARAMETER_DATE AS TIMESTAMP), RO_TZ_OFFSET(v_TIME_ZONE)) AT TIME ZONE RO_TZ_OFFSET(CUT_TIME_ZONE);


	UT.TOKENS_FROM_STRING(p_PARAMETER_VALS,',', v_STRING_TABLE);

	v_INDEX := v_STRING_TABLE.FIRST;

	LOOP
 		v_PARAMETER_VAL := TO_NUMBER(v_STRING_TABLE(v_INDEX));
		UPDATE_STATION_PARAMETER_VALUE
			(
            GA.BASE_CASE_ID,
			v_STATION_ID,
			v_PARAMETER_ID,
			v_PARAMETER_CODE,
			v_PARAMETER_DATE,
			v_PARAMETER_VAL,
			p_STATUS
			);
		IF p_STATUS < GA.SUCCESS THEN
			ROLLBACK;
			RETURN;
		END IF;
		EXIT WHEN v_INDEX = v_STRING_TABLE.LAST;
		v_INDEX := v_STRING_TABLE.NEXT(v_INDEX);
		v_PARAMETER_DATE := ADD_SECONDS_TO_DATE(v_PARAMETER_DATE, v_INTERVAL);
	END LOOP;

	COMMIT;

END STATION_PARAMETER_READINGS;
----------------------------------------------------------------------------------------------------
PROCEDURE MARK_PARAMETER_AS_USED
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_DATE IN DATE,
	p_STATUS OUT NUMBER
	) AS

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	UPDATE STATION_PARAMETER_VALUE
	SET	PARAMETER_CODE = 'U'
	WHERE CASE_ID = GA.BASE_CASE_ID
		AND STATION_ID = p_STATION_ID
		AND PARAMETER_ID = p_PARAMETER_ID
		AND PARAMETER_CODE = 'F'
		AND PARAMETER_DATE = p_PARAMETER_DATE;

	p_STATUS := GA.SUCCESS;
END MARK_PARAMETER_AS_USED;
----------------------------------------------------------------------------------------------------
PROCEDURE STATION_PARAMETER_UPDATE
	(
	p_CASE_ID IN NUMBER,
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN CHAR,
	p_TIME_ZONE IN VARCHAR,
	p_ARGUMENTS IN VARCHAR,
	p_STATUS OUT NUMBER
	)
	AS

v_ARGUMENTS_TABLE GA.STRING_TABLE;
v_VALUES_TABLE GA.STRING_TABLE;
v_INDEX NUMBER;
v_DATE VARCHAR(16);
v_TIME VARCHAR(16);
v_VALUE VARCHAR(16);
v_LOOP_COUNTER NUMBER;
v_PARAMETER_DATE DATE;

v_MIN VARCHAR(32);
v_MAX VARCHAR(32);
v_AVG VARCHAR(32);

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;
	UT.TOKENS_FROM_STRING(p_ARGUMENTS, ';', v_ARGUMENTS_TABLE);
	v_INDEX := v_ARGUMENTS_TABLE.FIRST;
	v_LOOP_COUNTER := 0;

	LOOP
		IF LENGTH(v_ARGUMENTS_TABLE(v_INDEX)) > 0 THEN
			UT.TOKENS_FROM_STRING(v_ARGUMENTS_TABLE(v_INDEX), ',', v_VALUES_TABLE);
			v_DATE := v_VALUES_TABLE(1);
			v_TIME := RTRIM(LTRIM(v_VALUES_TABLE(2)));

			IF p_PARAMETER_CODE = 'P' THEN
				v_MIN := v_VALUES_TABLE(3);
				v_MAX := v_VALUES_TABLE(4);
				v_AVG := v_VALUES_TABLE(5);
			ELSE
				v_VALUE := v_VALUES_TABLE(3);
			END IF;

			IF v_TIME IS NULL OR LENGTH(v_TIME) = 0 THEN
				v_PARAMETER_DATE := TO_DATE(v_DATE, 'YYYY-MM-DD');
			ELSE
				v_PARAMETER_DATE := DATE_TIME_AS_CUT(v_DATE, v_TIME, p_TIME_ZONE);
			END IF;

			IF p_PARAMETER_CODE = 'P' THEN
				UPDATE_STATION_PARAMETER_PROJN(p_CASE_ID, p_STATION_ID, p_PARAMETER_ID,
			   	v_PARAMETER_DATE, v_MIN, v_MAX, v_AVG, p_STATUS);
			ELSE
				UPDATE_STATION_PARAMETER_VALUE(p_CASE_ID, p_STATION_ID, p_PARAMETER_ID, p_PARAMETER_CODE,
			   	v_PARAMETER_DATE, v_VALUE, p_STATUS);
			END IF;
		END IF;
		v_LOOP_COUNTER := v_LOOP_COUNTER + 1;
		IF v_LOOP_COUNTER > 1000 THEN
			ERRS.RAISE(MSGCODES.c_ERR_RUNAWAY_LOOP);
		END IF;
		EXIT WHEN v_INDEX = v_ARGUMENTS_TABLE.LAST;
		v_INDEX := v_ARGUMENTS_TABLE.NEXT(v_INDEX);
	END LOOP;

END STATION_PARAMETER_UPDATE;
----------------------------------------------------------------------------------------------------
PROCEDURE STATION_PARAMETER_FILL
	(
	p_CASE_ID IN NUMBER,
    p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_PARAMETER_CODE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
	p_VALUE IN VARCHAR,
	p_STATUS OUT NUMBER
	) AS

v_DAYLIGHT_SAVINGS BOOLEAN;
v_SPRING_AHEAD_DATE DATE;
v_FALL_BACK_DATE DATE;
v_STD_TIME_ZONE VARCHAR(3);
v_DST_TIME_ZONE VARCHAR(3);
v_VALUE NUMBER;
v_TIME_ZONE VARCHAR(3);
v_CURRENT_TIME_ZONE VARCHAR(3);
v_PARAMETER_DATE DATE;
v_DATE DATE;
v_HOUR_OF_DAY NUMBER(2);
v_SEEN_FALL_BACK_HOUR BOOLEAN := FALSE;
v_INTERVAL VARCHAR(16) := 'HOUR';
v_ADVANCE_DATE BOOLEAN;
v_CUT_DATE DATE;

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	SELECT UPPER(PARAMETER_INTERVAL)
	INTO v_INTERVAL
	FROM WEATHER_PARAMETER
	WHERE PARAMETER_ID = p_PARAMETER_ID;

	v_VALUE := LTRIM(RTRIM(p_VALUE));
	v_PARAMETER_DATE := ADVANCE_DATE(TRUNC(p_BEGIN_DATE), v_INTERVAL);

	IF v_INTERVAL <> 'DAY' THEN
		v_TIME_ZONE := LTRIM(RTRIM(p_TIME_ZONE));
		v_CURRENT_TIME_ZONE := v_TIME_ZONE;
		IF SUBSTR(v_TIME_ZONE,2,1) = 'D' THEN
			v_DAYLIGHT_SAVINGS := TRUE;
			v_SPRING_AHEAD_DATE := TRUNC(DST_SPRING_AHEAD_DATE(v_PARAMETER_DATE));
			v_FALL_BACK_DATE := TRUNC(DST_FALL_BACK_DATE(v_PARAMETER_DATE));
			v_STD_TIME_ZONE := STD_TIME_ZONE(v_TIME_ZONE);
			v_DST_TIME_ZONE := DST_TIME_ZONE(v_TIME_ZONE);
		ELSE
			v_DAYLIGHT_SAVINGS := FALSE;
			v_SPRING_AHEAD_DATE := NULL;
			v_FALL_BACK_DATE := NULL;
			v_STD_TIME_ZONE := NULL;
			v_DST_TIME_ZONE := NULL;
		END IF;
	ELSE
		 v_DAYLIGHT_SAVINGS := FALSE;
	END IF;

-- Loop over the intervals of the specified time period.
	WHILE v_PARAMETER_DATE <= TRUNC(p_END_DATE) + 1 LOOP
-- Determine the proper date and time zone for the parameter date
		v_ADVANCE_DATE := TRUE;
		IF v_DAYLIGHT_SAVINGS THEN
			v_CURRENT_TIME_ZONE := v_STD_TIME_ZONE;
			v_DATE := TRUNC(v_PARAMETER_DATE);
			IF v_DATE BETWEEN v_SPRING_AHEAD_DATE AND v_FALL_BACK_DATE THEN
				v_CURRENT_TIME_ZONE := v_DST_TIME_ZONE;
				IF v_DATE = v_SPRING_AHEAD_DATE THEN
					v_HOUR_OF_DAY := TO_NUMBER(TO_CHAR(v_PARAMETER_DATE,'HH24'));
					IF v_HOUR_OF_DAY < 2 THEN
						v_CURRENT_TIME_ZONE := v_STD_TIME_ZONE;
					ELSE
						IF v_HOUR_OF_DAY = 2 THEN
							v_PARAMETER_DATE := ADVANCE_DATE(v_PARAMETER_DATE, v_INTERVAL);
						END IF;
						v_CURRENT_TIME_ZONE := v_DST_TIME_ZONE;
					END IF;
				ELSIF v_DATE = v_FALL_BACK_DATE THEN
					v_HOUR_OF_DAY := TO_NUMBER(TO_CHAR(v_PARAMETER_DATE,'HH24'));
					v_CURRENT_TIME_ZONE := v_STD_TIME_ZONE;
					IF v_HOUR_OF_DAY <= 2 THEN
						IF v_HOUR_OF_DAY = 2 AND NOT v_SEEN_FALL_BACK_HOUR THEN
								v_ADVANCE_DATE := FALSE;
								v_SEEN_FALL_BACK_HOUR := TRUE;
								v_CURRENT_TIME_ZONE := v_DST_TIME_ZONE;
							END IF;
						IF v_HOUR_OF_DAY < 2 THEN
							v_CURRENT_TIME_ZONE := v_DST_TIME_ZONE;
						END IF;
					END IF;
				END IF;
			END IF;
		END IF;
-- Use CUT date to store to database.
		IF v_INTERVAL <> 'DAY' THEN
			v_CUT_DATE := TO_CUT(v_PARAMETER_DATE, v_CURRENT_TIME_ZONE);
		ELSE
			v_CUT_DATE := TRUNC(v_PARAMETER_DATE) - 1;
		END IF;
-- Update an existing schedule or insert a new schedule.
		UPDATE_STATION_PARAMETER_VALUE(p_CASE_ID, p_STATION_ID, p_PARAMETER_ID, p_PARAMETER_CODE, v_CUT_DATE, v_VALUE, p_STATUS);
		IF p_STATUS < GA.SUCCESS THEN
		    ROLLBACK;
			RETURN;
		END IF;
		IF v_ADVANCE_DATE THEN
		    v_PARAMETER_DATE := ADVANCE_DATE(v_PARAMETER_DATE, v_INTERVAL);
		END IF;
	END LOOP;
END STATION_PARAMETER_FILL;
---------------------------------------------------------------------------------------------------
PROCEDURE POST_STATION_READINGS
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_CODE IN VARCHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE
	) AS

-- Perform any Post Processing required of the Station.

v_PARAMETER_CODE CHAR(1);
v_STATUS NUMBER(9);

CURSOR c_PARAMETERS IS
	SELECT PARAMETER_ID, PARAMETER_CATEGORY
	FROM WEATHER_PARAMETER
	WHERE IS_CALCULATE = 1;

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	v_PARAMETER_CODE := UPPER(LTRIM(RTRIM(p_PARAMETER_CODE)));

	ASSERT(v_PARAMETER_CODE IN('A','F'), 'The given parameter code is not valid(A or F).',
		MSGCODES.c_ERR_ARGUMENT);

	FOR v_PARAMETERS IN c_PARAMETERS LOOP
		XS.CALCULATE_WEATHER_PARAMETER(p_STATION_ID, v_PARAMETERS.PARAMETER_ID, v_PARAMETERS.PARAMETER_CATEGORY, v_PARAMETER_CODE, p_BEGIN_DATE, p_END_DATE, v_STATUS);
		ERRS.VALIDATE_STATUS('XS.CALCULATE_WEATHER_PARAMETER', V_STATUS);
	END LOOP;

END POST_STATION_READINGS;
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
PROCEDURE WEATHER_STATION_PARAMETERS
	(
	p_STATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

-- Answer the WEATHER_STATION_PARAMETERS's for the given STATION.

BEGIN

	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
	    SELECT A.PARAMETER_ID AS ENTITY_ID,
	    	B.PARAMETER_NAME AS ENTITY_NAME,
	    	1 AS IS_SELECTED
		FROM WEATHER_STATION_PARAMETER A, WEATHER_PARAMETER B
		WHERE A.STATION_ID = p_STATION_ID
			AND A.PARAMETER_ID = B.PARAMETER_ID
			AND A.PARAMETER_ID > 0

		UNION

		SELECT PARAMETER_ID AS ENTITY_ID,
			PARAMETER_NAME AS ENTITY_NAME,
			0 AS IS_SELECTED
		FROM WEATHER_PARAMETER
		WHERE NOT PARAMETER_ID IN (SELECT PARAMETER_ID
									FROM WEATHER_STATION_PARAMETER
									WHERE STATION_ID = p_STATION_ID)
			AND PARAMETER_ID > 0

		ORDER BY 3 DESC, 2 ASC;
END WEATHER_STATION_PARAMETERS;
---------------------------------------------------------------------------------------------------


PROCEDURE PUT_STATION_PARAMETER
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

-- UPDATE THE CURRENT ACCOUNT ANCILLARY_SERVICE ASSIGNMENT IF ONE EXISTS

	UPDATE WEATHER_STATION_PARAMETER SET
		PARAMETER_ID = p_PARAMETER_ID
	WHERE STATION_ID = p_STATION_ID
		AND PARAMETER_ID = p_PARAMETER_ID;

-- NO ASSIGNMENT UPDATE FOR THIS ACCOUNT AND ANCILLARY_SERVICE COMBINATION SO INSERT A NEW ASSIGNMENT

	IF SQL%NOTFOUND THEN
		INSERT INTO WEATHER_STATION_PARAMETER
			(
			STATION_ID,
			PARAMETER_ID
			)
		VALUES
			(
			p_STATION_ID,
			p_PARAMETER_ID
			);
	END IF;

END PUT_STATION_PARAMETER;
---------------------------------------------------------------------------------------------------

PROCEDURE WEATHER_STATION_COMPOSITES
	(
	p_STATION_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	)  AS

-- Answer the WEATHER_STATION_COMPOSITE's for the given STATION.

BEGIN

	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
	    SELECT A.COMPOSITE_STATION_ID AS ENTITY_ID,
	    	B.STATION_NAME AS ENTITY_NAME,
	    	A.COMPOSITE_PERCENT,
	    	1 AS IS_SELECTED
		FROM WEATHER_STATION_COMPOSITE A, WEATHER_STATION B
		WHERE A.STATION_ID = p_STATION_ID
			AND A.COMPOSITE_STATION_ID = B.STATION_ID
			AND A.STATION_ID > 0

		UNION

		SELECT STATION_ID AS ENTITY_ID,
			STATION_NAME AS ENTITY_NAME,
			0 AS COMPOSITE_PERCENT,
			0 AS IS_SELECTED
		FROM WEATHER_STATION
		WHERE IS_COMPOSITE = 0
			AND NOT STATION_ID IN (SELECT COMPOSITE_STATION_ID
									FROM WEATHER_STATION_COMPOSITE
									WHERE STATION_ID = p_STATION_ID)
			AND NOT STATION_ID = p_STATION_ID
			AND STATION_ID > 0

		ORDER BY 4 DESC, 2 ASC;
END WEATHER_STATION_COMPOSITES;
---------------------------------------------------------------------------------------------------



PROCEDURE PUT_STATION_COMPOSITE
	(
	p_STATION_ID IN NUMBER,
	p_COMPOSITE_STATION_ID IN NUMBER,
	p_COMPOSITE_PERCENT IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

-- UPDATE THE CURRENT ACCOUNT ANCILLARY_SERVICE ASSIGNMENT IF ONE EXISTS

	UPDATE WEATHER_STATION_COMPOSITE SET
		COMPOSITE_PERCENT = p_COMPOSITE_PERCENT
	WHERE STATION_ID = p_STATION_ID
		AND COMPOSITE_STATION_ID = p_COMPOSITE_STATION_ID;

-- NO ASSIGNMENT UPDATE FOR THIS ACCOUNT AND ANCILLARY_SERVICE COMBINATION SO INSERT A NEW ASSIGNMENT

	IF SQL%NOTFOUND THEN
		INSERT INTO WEATHER_STATION_COMPOSITE
			(
			STATION_ID,
			COMPOSITE_STATION_ID,
			COMPOSITE_PERCENT
			)
		VALUES
			(
			p_STATION_ID,
			p_COMPOSITE_STATION_ID,
			p_COMPOSITE_PERCENT
			);
	END IF;

END PUT_STATION_COMPOSITE;
---------------------------------------------------------------------------------------------------
PROCEDURE WEATHER_PARAMETER_COMPOSITES
	(
	p_PARAMETER_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	)  AS

-- Answer the WEATHER_PARAMETER_COMPOSITE's for the given PARAMETER.

BEGIN

	IF NOT CAN_READ(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_READ_MODULE(g_DOMAIN_NAME);
	END IF;

    p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
	    SELECT A.COMPOSITE_PARAMETER_ID AS ENTITY_ID,
	    	B.PARAMETER_NAME AS ENTITY_NAME,
	    	A.COMPOSITE_COEFFICIENT,
	    	1 AS IS_SELECTED
		FROM WEATHER_PARAMETER_COMPOSITE A, WEATHER_PARAMETER B
		WHERE A.PARAMETER_ID = p_PARAMETER_ID
			AND A.COMPOSITE_PARAMETER_ID = B.PARAMETER_ID
			AND A.PARAMETER_ID > 0

		UNION

		SELECT PARAMETER_ID AS ENTITY_ID,
			PARAMETER_NAME AS ENTITY_NAME,
			0 AS COMPOSITE_COEFFICIENT,
			0 AS IS_SELECTED
		FROM WEATHER_PARAMETER
		WHERE IS_COMPOSITE = 0
			AND NOT PARAMETER_ID IN (SELECT COMPOSITE_PARAMETER_ID
									FROM WEATHER_PARAMETER_COMPOSITE
									WHERE PARAMETER_ID = p_PARAMETER_ID)
			AND NOT PARAMETER_ID = p_PARAMETER_ID
			AND PARAMETER_ID > 0

		ORDER BY 4 DESC, 2 ASC;
END WEATHER_PARAMETER_COMPOSITES;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_PARAMETER_COMPOSITE
	(
	p_PARAMETER_ID IN NUMBER,
	p_COMPOSITE_PARAMETER_ID IN NUMBER,
	p_COMPOSITE_COEFFICIENT IN NUMBER,
	p_STATUS OUT NUMBER
	)
	AS

BEGIN

	IF NOT CAN_WRITE(g_DOMAIN_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(g_DOMAIN_NAME);
	END IF;

	p_STATUS := GA.SUCCESS;

-- UPDATE THE CURRENT ACCOUNT ANCILLARY_SERVICE ASSIGNMENT IF ONE EXISTS

	UPDATE WEATHER_PARAMETER_COMPOSITE SET
		COMPOSITE_COEFFICIENT = p_COMPOSITE_COEFFICIENT
	WHERE PARAMETER_ID = p_PARAMETER_ID
		AND COMPOSITE_PARAMETER_ID = p_COMPOSITE_PARAMETER_ID;

-- NO ASSIGNMENT UPDATE FOR THIS ACCOUNT AND ANCILLARY_SERVICE COMBINATION SO INSERT A NEW ASSIGNMENT

	IF SQL%NOTFOUND THEN
		INSERT INTO WEATHER_PARAMETER_COMPOSITE
			(
			PARAMETER_ID,
			COMPOSITE_PARAMETER_ID,
			COMPOSITE_COEFFICIENT
			)
		VALUES
			(
			p_PARAMETER_ID,
			p_COMPOSITE_PARAMETER_ID,
			p_COMPOSITE_COEFFICIENT
			);
	END IF;

END PUT_PARAMETER_COMPOSITE;
---------------------------------------------------------------------------------------------------
PROCEDURE WEATHER_COPY
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETER_ID IN NUMBER,
	p_SRC_BEGIN_DATE IN DATE,
	p_SRC_END_DATE IN DATE,
	p_SRC_CASE_ID IN NUMBER,
	p_SRC_PARAMETER_CODE IN CHAR,
	p_TRG_DATE_OFFSET IN NUMBER,
	p_TRG_ADDER IN NUMBER,
	p_TRG_MULTIPLIER IN NUMBER,
	p_TRG_CASE_ID IN NUMBER,
	p_TRG_PARAMETER_CODE IN CHAR,
	p_STATUS OUT NUMBER
	) AS

CURSOR c_WEATHER IS
	SELECT PARAMETER_DATE,
		PARAMETER_VAL
	FROM STATION_PARAMETER_VALUE
	WHERE CASE_ID = p_SRC_CASE_ID
		AND STATION_ID = p_STATION_ID
		AND PARAMETER_ID = p_PARAMETER_ID
		AND PARAMETER_CODE = p_SRC_PARAMETER_CODE
		AND PARAMETER_DATE BETWEEN p_SRC_BEGIN_DATE AND p_SRC_END_DATE;

v_TRG_DATE DATE;
v_FIRST BOOLEAN;

BEGIN
	p_STATUS := GA.SUCCESS;


	--If clip/wrap is wanted, just get the logic out of IT.COPY_IT_SCHEDULE.
	FOR v_WEATHER IN c_WEATHER LOOP
		v_TRG_DATE := v_WEATHER.PARAMETER_DATE + p_TRG_DATE_OFFSET;
		PUT_STATION_PARAMETER_VALUE(p_TRG_CASE_ID, p_STATION_ID, p_PARAMETER_ID, p_TRG_PARAMETER_CODE, v_TRG_DATE,
			v_WEATHER.PARAMETER_VAL * p_TRG_MULTIPLIER + p_TRG_ADDER);
		IF p_STATUS < 0 THEN
			ROLLBACK;
			RETURN;
		END IF;
	END LOOP;

EXCEPTION
	WHEN OTHERS THEN
		ERRS.LOG_AND_RAISE();
END WEATHER_COPY;
---------------------------------------------------------------------------------------------------
PROCEDURE WEATHER_COPY_REQUEST
	(
	p_STATIONS_AND_PARAMETERS IN VARCHAR2,
	p_SRC_ALL_DATES IN NUMBER,
	p_SRC_BEGIN_DATE IN DATE,
	p_SRC_END_DATE IN DATE,
	p_SRC_CASE_ID IN NUMBER,
	p_SRC_PARAMETER_CODE IN CHAR,
	p_TRG_SAME_TIME_PERIOD IN NUMBER,
	p_TRG_BEGIN_DATE IN DATE,
	p_TRG_ADD_OR_MULT IN CHAR,
	p_TRG_ADJUSTMENT_VAL IN NUMBER,
	p_TRG_CASE_ID IN NUMBER,
	p_TRG_PARAMETER_CODES IN VARCHAR2,
	p_TIME_ZONE IN VARCHAR2,
	p_STATUS OUT NUMBER
	) AS
v_ID_TABLE GA.STRING_TABLE;
v_INDEX BINARY_INTEGER;
v_IDS GA.STRING_TABLE;
v_SRC_BEGIN_DATE DATE;
v_SRC_END_DATE DATE;
v_DATE_OFFSET NUMBER;
v_ADDER NUMBER := 0;
v_MULTIPLIER NUMBER := 1;
BEGIN
	p_STATUS := GA.SUCCESS;

	UT.TOKENS_FROM_STRING(p_STATIONS_AND_PARAMETERS, ';', v_ID_TABLE);

	--If they are for the same time period, there is no offset.
	IF p_TRG_SAME_TIME_PERIOD = 0 THEN
		v_DATE_OFFSET := TRUNC(p_TRG_BEGIN_DATE) - TRUNC(p_SRC_BEGIN_DATE);
	ELSE
		v_DATE_OFFSET := 0;
	END IF;

	--If this is for all dates, just pass low and high date.
	IF p_SRC_ALL_DATES = 0 THEN
		UT.CUT_DATE_RANGE (p_SRC_BEGIN_DATE, p_SRC_END_DATE, p_TIME_ZONE, v_SRC_BEGIN_DATE, v_SRC_END_DATE);
	ELSE
		v_SRC_BEGIN_DATE := LOW_DATE;
		v_SRC_END_DATE := HIGH_DATE;
	END IF;

	--Set up the adder or multiplier
	IF p_TRG_ADD_OR_MULT = 'A' THEN
		v_ADDER := p_TRG_ADJUSTMENT_VAL;
	ELSE
		v_MULTIPLIER := p_TRG_ADJUSTMENT_VAL;
	END IF;

	FOR v_INDEX IN v_ID_TABLE.FIRST..v_ID_TABLE.LAST LOOP
		UT.TOKENS_FROM_STRING(v_ID_TABLE(v_INDEX), ',', v_IDS);

		--FORECAST TARGET CODE
		IF INSTR(p_TRG_PARAMETER_CODES, 'F') > 0 THEN
			WEATHER_COPY(v_IDS(1), v_IDS(2), v_SRC_BEGIN_DATE, v_SRC_END_DATE,
				p_SRC_CASE_ID, p_SRC_PARAMETER_CODE,
				v_DATE_OFFSET, v_ADDER, v_MULTIPLIER,
				p_TRG_CASE_ID, 'F', p_STATUS);
		END IF;

		IF p_STATUS < 0 THEN RETURN; END IF;

		--ACTUAL TARGET CODE
		IF INSTR(p_TRG_PARAMETER_CODES, 'A') > 0 THEN
			WEATHER_COPY(v_IDS(1), v_IDS(2), v_SRC_BEGIN_DATE, v_SRC_END_DATE,
				p_SRC_CASE_ID, p_SRC_PARAMETER_CODE,
				v_DATE_OFFSET, v_ADDER, v_MULTIPLIER,
				p_TRG_CASE_ID, 'A', p_STATUS);
		END IF;

		IF p_STATUS < 0 THEN RETURN; END IF;
	END LOOP;

EXCEPTION
	WHEN OTHERS THEN
		ERRS.LOG_AND_RAISE();
END WEATHER_COPY_REQUEST;
---------------------------------------------------------------------------------------------------
PROCEDURE CACHE_COMPOSITE_STATION_COEFFS
	(
	p_STATION_ID IN NUMBER,
	p_CLEAN_CACHE IN BOOLEAN := TRUE
	) AS
BEGIN
	IF p_CLEAN_CACHE THEN
		DELETE COMPOSITE_WEATHER_WORK;
	END IF;

	INSERT INTO COMPOSITE_WEATHER_WORK (ROOT_ENTITY_ID, ENTITY_INDEX, ENTITY_ID, COEFFICIENT)
	-- leaves of composite station hierarchy
	SELECT p_STATION_ID,
		0, -- 0 indicates station info
		WSC.COMPOSITE_STATION_ID,
		SUM(PRODUCT_FROM_STRING( SUBSTR(SYS_CONNECT_BY_PATH(WSC.COMPOSITE_PERCENT/100.0,':'),2), ':')) AS COEFF
	FROM WEATHER_STATION WS, WEATHER_STATION_COMPOSITE WSC
	WHERE CONNECT_BY_ISLEAF = 1
	START WITH WS.STATION_ID = p_STATION_ID
		AND WSC.STATION_ID = WS.STATION_ID
		AND WS.IS_COMPOSITE = 1
	CONNECT BY PRIOR WS.IS_COMPOSITE = 1
		AND WS.STATION_ID = PRIOR WSC.COMPOSITE_STATION_ID
		AND WSC.STATION_ID = WS.STATION_ID
	GROUP BY WSC.COMPOSITE_STATION_ID
	UNION ALL
	-- and include this in case this isn't a composite station
	SELECT p_STATION_ID,
		0,
		WS.STATION_ID,
		1.0
	FROM WEATHER_STATION WS
	WHERE WS.STATION_ID = p_STATION_ID
		AND WS.IS_COMPOSITE = 0;

END CACHE_COMPOSITE_STATION_COEFFS;
---------------------------------------------------------------------------------------------------
PROCEDURE CACHE_COMPOSITE_PARAM_COEFFS
	(
	p_PARAMETERS IN GA.ID_TABLE
	) AS
BEGIN

	FOR v_IDX IN 1..p_PARAMETERS.COUNT LOOP

		INSERT INTO COMPOSITE_WEATHER_WORK (ROOT_ENTITY_ID, ENTITY_INDEX, ENTITY_ID, COEFFICIENT)
		-- leaves of composite parameter hierarchy
		SELECT p_PARAMETERS(v_IDX),
			v_IDX, -- index of parameter - value > 0 indicates parameter vs. station
			WPC.COMPOSITE_PARAMETER_ID,
			SUM(PRODUCT_FROM_STRING( SUBSTR(SYS_CONNECT_BY_PATH(WPC.COMPOSITE_COEFFICIENT,':'),2), ':')) AS COEFF
		FROM WEATHER_PARAMETER WP, WEATHER_PARAMETER_COMPOSITE WPC
		WHERE CONNECT_BY_ISLEAF = 1
		START WITH WP.PARAMETER_ID = p_PARAMETERS(v_IDX)
			AND WPC.PARAMETER_ID = WP.PARAMETER_ID
			AND WP.IS_COMPOSITE = 1
		CONNECT BY PRIOR WP.IS_COMPOSITE = 1
			AND WP.PARAMETER_ID = PRIOR WPC.COMPOSITE_PARAMETER_ID
			AND WPC.PARAMETER_ID = WP.PARAMETER_ID
		GROUP BY WPC.COMPOSITE_PARAMETER_ID
		UNION ALL
		-- and include this in case this isn't a composite parameter
		SELECT p_PARAMETERS(v_IDX),
			v_IDX,
			WP.PARAMETER_ID,
			1.0
		FROM WEATHER_PARAMETER WP
		WHERE WP.PARAMETER_ID = p_PARAMETERS(v_IDX)
			AND WP.IS_COMPOSITE = 0;

	END LOOP;

END CACHE_COMPOSITE_PARAM_COEFFS;
---------------------------------------------------------------------------------------------------
PROCEDURE STATION_PARAMETER_TREE
	(
	p_CURSOR OUT GA.REFCURSOR
	) AS
BEGIN

	DELETE COMPOSITE_WEATHER_WORK;

	FOR v_REC IN (SELECT WS.STATION_ID
					FROM WEATHER_STATION WS
					WHERE WS.STATION_ID <> CONSTANTS.NOT_ASSIGNED) LOOP
		CACHE_COMPOSITE_STATION_COEFFS(v_REC.STATION_ID, FALSE);
	END LOOP;

	OPEN p_CURSOR FOR
		SELECT DISTINCT W.STATION_NAME,
			W.STATION_ID,
			P.PARAMETER_NAME,
			P.PARAMETER_ID,
			P.PARAMETER_CATEGORY
		FROM WEATHER_STATION W,
			WEATHER_PARAMETER P,
			WEATHER_STATION_PARAMETER SP,
			COMPOSITE_WEATHER_WORK WRK
		WHERE W.STATION_ID = WRK.ROOT_ENTITY_ID
			AND SP.STATION_ID = WRK.ENTITY_ID
			AND WRK.ENTITY_INDEX = 0
			AND SP.PARAMETER_ID = P.PARAMETER_ID
		ORDER BY STATION_NAME, PARAMETER_NAME;

END	STATION_PARAMETER_TREE;
---------------------------------------------------------------------------------------------------
PROCEDURE STATION_HIERARCHY
	(
	p_CURSOR OUT GA.REFCURSOR
	) AS

v_PARAMETERS GA.ID_TABLE;
BEGIN
	DELETE COMPOSITE_WEATHER_WORK;

	FOR v_REC IN (SELECT DISTINCT WS.STATION_ID
						FROM WEATHER_STATION WS) LOOP
		CACHE_COMPOSITE_STATION_COEFFS(v_REC.STATION_ID,FALSE);

	END LOOP;

	FOR v_REC IN (SELECT DISTINCT WRK.ENTITY_ID
						FROM COMPOSITE_WEATHER_WORK WRK) LOOP
		SELECT DISTINCT WSP.PARAMETER_ID
		BULK COLLECT INTO v_PARAMETERS
		FROM WEATHER_STATION_PARAMETER WSP
		WHERE WSP.STATION_ID = v_REC.ENTITY_ID;

		CACHE_COMPOSITE_PARAM_COEFFS(v_PARAMETERS);

	END LOOP;

	OPEN p_CURSOR FOR
		SELECT DISTINCT WS.STATION_ID,
			   WS.STATION_NAME WEATHER_STATION,
			   WS.IS_COMPOSITE IS_STATION_COMPOSITE,
			   WRK.ENTITY_INDEX,
			   WRK.ENTITY_ID,
			   WS_COMP.STATION_NAME ENTITY_NAME,
			   WRK.COEFFICIENT
		  FROM COMPOSITE_WEATHER_WORK WRK,
			   WEATHER_STATION WS,
			   WEATHER_STATION WS_COMP
		 WHERE WRK.ROOT_ENTITY_ID = WS.STATION_ID
		   AND WRK.ENTITY_ID = WS_COMP.STATION_ID
		   AND WRK.ENTITY_INDEX = 0
		 ORDER BY STATION_ID, ENTITY_INDEX;

END STATION_HIERARCHY;
---------------------------------------------------------------------------------------------------
PROCEDURE PARAMETER_HIERARCHY
	(
	p_ENTITY_ID 			IN NUMBER,
	p_CURSOR			    OUT GA.REFCURSOR
	) AS

BEGIN
	OPEN p_CURSOR FOR
		SELECT DISTINCT WP.PARAMETER_ID,
			   WP.PARAMETER_NAME WEATHER_PARAMETER,
			   WP.IS_COMPOSITE IS_PARAMETER_COMPOSITE,
			   WRK_PARAM.ENTITY_INDEX,
			   WRK_PARAM.ENTITY_ID,
			   WP_COMP.PARAMETER_NAME ENTITY_NAME,
			   WRK_PARAM.COEFFICIENT
		  FROM COMPOSITE_WEATHER_WORK WRK_STATION,
			   COMPOSITE_WEATHER_WORK WRK_PARAM,
			   WEATHER_STATION_PARAMETER WSP,
			   WEATHER_PARAMETER WP,
			   WEATHER_PARAMETER WP_COMP
		 WHERE WRK_STATION.ROOT_ENTITY_ID = p_ENTITY_ID
		   AND WRK_STATION.ENTITY_INDEX = 0

		   AND WSP.STATION_ID = WRK_STATION.ENTITY_ID
		   AND WRK_PARAM.ROOT_ENTITY_ID = WSP.PARAMETER_ID
		   AND WRK_PARAM.ENTITY_ID = WP_COMP.PARAMETER_ID
		   AND WRK_PARAM.ENTITY_INDEX > 0

		   AND WRK_PARAM.ROOT_ENTITY_ID = WP.PARAMETER_ID
		   ORDER BY ENTITY_INDEX, PARAMETER_ID DESC;

END PARAMETER_HIERARCHY;

---------------------------------------------------------------------------------------------------
PROCEDURE PARAMETER_DETAILS
	(
	p_BEGIN_DATE			IN DATE,
	p_END_DATE				IN DATE,
	p_STATION_ID 			IN NUMBER,
	p_PARAMETER_ID 			IN NUMBER,
	p_WEATHER_DATE			IN VARCHAR2,
	p_WEATHER_TIME			IN VARCHAR2,
	p_TIME_ZONE				IN VARCHAR2,
	p_INTERVAL				IN VARCHAR2,
	p_CASE_ID				IN NUMBER,
	p_PARAMETER_CODE		IN VARCHAR2,
	p_STATION_NAME 			OUT VARCHAR2,
	p_PARAMETER_NAME		OUT VARCHAR2,
	p_CURSOR			    OUT GA.REFCURSOR
	) AS


v_PARAMETER_CODE VARCHAR2(1);
v_PARAMETER_INTERVAL VARCHAR2(32);

v_INTERVAL_ABBR VARCHAR2(10);

v_CUT_DATE DATE;
v_BEGIN_DATE DATE;
v_END_DATE DATE;

v_CUT_BEGIN_DATE DATE;
v_CUT_END_DATE DATE;

v_INT_NUM NUMBER(2);
BEGIN
	-- Composite Station
	-- Station Coefficient
	-- Composite Parameter
	-- Parameter Coefficient

	SELECT WS.STATION_NAME, WP.PARAMETER_NAME, WP.PARAMETER_INTERVAL
	INTO p_STATION_NAME, p_PARAMETER_NAME, v_PARAMETER_INTERVAL
	FROM WEATHER_STATION WS,
		WEATHER_PARAMETER WP
	WHERE WS.STATION_ID = p_STATION_ID
		AND WP.PARAMETER_ID = p_PARAMETER_ID;

	UT.CUT_DATE_RANGE(p_BEGIN_DATE,p_END_DATE,p_TIME_ZONE,v_CUT_BEGIN_DATE, v_CUT_END_DATE);

	v_CUT_DATE := DATE_TIME_AS_CUT(p_WEATHER_DATE, p_WEATHER_TIME, p_TIME_ZONE,1);
	DATE_UTIL.GET_DATE_RANGE(v_CUT_DATE,p_INTERVAL,v_BEGIN_DATE,v_END_DATE);

	-- IF display interval is a week, then we need to show only dates that are
	IF v_END_DATE > v_CUT_END_DATE THEN
		v_END_DATE := v_CUT_END_DATE;
	END IF;
	IF v_BEGIN_DATE < v_CUT_BEGIN_DATE THEN
		v_BEGIN_DATE := v_CUT_BEGIN_DATE;
	END IF;

	v_INTERVAL_ABBR := GET_INTERVAL_ABBREVIATION(p_INTERVAL);
	v_INT_NUM := GET_INTERVAL_NUMBER(v_INTERVAL_ABBR);

	IF p_PARAMETER_CODE =  'Forecast' THEN
		v_PARAMETER_CODE := CONSTANTS.CODE_FORECAST;
	ELSIF p_PARAMETER_CODE =  'Actual' THEN
		v_PARAMETER_CODE := CONSTANTS.CODE_ACTUAL;
	ELSE
		v_PARAMETER_CODE := 'U';
	END IF;

	OPEN p_CURSOR FOR
		SELECT DISTINCT WS_COMP.ENTITY_ID STATION_ID,
				WS.STATION_NAME,
				WS_COMP.COEFFICIENT STATION_COEFFICIENT,
				WP_COMP.ENTITY_ID PARAMETER_ID,
				WP.PARAMETER_NAME,
				WP_COMP.COEFFICIENT PARAMETER_COEFFICIENT,
				AVG(SPV.PARAMETER_VAL) PARAMETER_VAL
			FROM COMPOSITE_WEATHER_WORK WS_COMP,
				COMPOSITE_WEATHER_WORK WP_COMP,
				WEATHER_STATION WS,
				WEATHER_PARAMETER WP,
				STATION_PARAMETER_VALUE SPV,
				WEATHER_STATION_PARAMETER WSP
			WHERE WS_COMP.ENTITY_INDEX = 0
				AND WS_COMP.ROOT_ENTITY_ID = p_STATION_ID
				AND WSP.STATION_ID = WS_COMP.ENTITY_ID
				AND WSP.PARAMETER_ID = p_PARAMETER_ID

				AND WP_COMP.ROOT_ENTITY_ID = p_PARAMETER_ID
				AND WP_COMP.ENTITY_INDEX > 0

				AND WS_COMP.ENTITY_ID = WS.STATION_ID
				AND WP_COMP.ENTITY_ID = WP.PARAMETER_ID

				AND SPV.CASE_ID = p_CASE_ID
				AND SPV.STATION_ID = WS_COMP.ENTITY_ID
				AND SPV.PARAMETER_ID = WP_COMP.ENTITY_ID
				AND SPV.PARAMETER_CODE = v_PARAMETER_CODE

				AND ((GET_INTERVAL_NUMBER(WP.PARAMETER_INTERVAL) < v_INT_NUM AND SPV.PARAMETER_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE)
					OR SPV.PARAMETER_DATE = DATE_UTIL.HED_TRUNC(v_CUT_DATE,GET_INTERVAL_ABBREVIATION(WP.PARAMETER_INTERVAL)))

			GROUP BY WS_COMP.ENTITY_ID,
				WS.STATION_NAME,
				WS_COMP.COEFFICIENT,
				WP_COMP.ENTITY_ID,
				WP.PARAMETER_NAME,
				WP_COMP.COEFFICIENT;

END PARAMETER_DETAILS;
---------------------------------------------------------------------------------------------------
PROCEDURE WEATHER_DATA
	(
	p_BEGIN_DATE			IN DATE,
	p_END_DATE 				IN DATE,
	p_TIME_ZONE				IN VARCHAR2,
	p_STATION_ID 			IN NUMBER_COLLECTION,
	p_PARAMETER_ID			IN NUMBER_COLLECTION,
	p_INTERVAL				IN VARCHAR2,
	p_CASE_ID				IN NUMBER,
	p_PARAMETER_CODE		IN STRING_COLLECTION,
	p_CURSOR			    OUT GA.REFCURSOR
	) AS

v_PARAMETERS GA.ID_TABLE;

v_ST_ID NUMBER_COLLECTION;
v_P_ID NUMBER_COLLECTION;

v_INTERVAL_ABBR VARCHAR2(4);
v_INT_NUM NUMBER(9);
v_PARAM_INT_NUM NUMBER(9);
v_PARAMETER_CODE STRING_COLLECTION := STRING_COLLECTION();
v_MIN VARCHAR2(32);
v_WORK_ID NUMBER(9);

v_CUT_BEGIN_DATE DATE;
v_CUT_END_DATE DATE;

BEGIN
	DELETE COMPOSITE_WEATHER_WORK;

	SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);
	UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_CUT_BEGIN_DATE, v_CUT_END_DATE);
	v_INTERVAL_ABBR := GET_INTERVAL_ABBREVIATION(p_INTERVAL);
	v_PARAM_INT_NUM := GET_INTERVAL_NUMBER(v_INTERVAL_ABBR);

	v_PARAMETER_CODE.EXTEND(p_PARAMETER_CODE.COUNT);
	FOR v_IDX IN 1..p_PARAMETER_CODE.COUNT LOOP
		IF p_PARAMETER_CODE(v_IDX) =  'Forecast' THEN
			v_PARAMETER_CODE(v_IDX) := CONSTANTS.CODE_FORECAST;
		ELSIF p_PARAMETER_CODE(v_IDX) =  'Actual' THEN
			v_PARAMETER_CODE(v_IDX) := CONSTANTS.CODE_ACTUAL;
		ELSE
			v_PARAMETER_CODE(v_IDX) := 'U';
		END IF;
	END LOOP;

	-- Populate station hierarchy
	FOR v_REC IN (SELECT DISTINCT COLUMN_VALUE
			  FROM TABLE(CAST(p_STATION_ID AS NUMBER_COLLECTION))) LOOP
		CACHE_COMPOSITE_STATION_COEFFS(v_REC.COLUMN_VALUE,FALSE);
	END LOOP;

	-- Populate Parameter Hierarchy
	IF p_PARAMETER_ID IS NULL THEN

		SELECT DISTINCT P.PARAMETER_ID
		BULK COLLECT INTO v_PARAMETERS
		FROM WEATHER_PARAMETER P,
			WEATHER_STATION_PARAMETER SP,
			COMPOSITE_WEATHER_WORK WRK
		WHERE WRK.ENTITY_INDEX = 0
			AND WRK.ENTITY_ID = SP.STATION_ID
			AND SP.PARAMETER_ID = P.PARAMETER_ID;

		CACHE_COMPOSITE_PARAM_COEFFS(v_PARAMETERS);

		SELECT DISTINCT WRK.ROOT_ENTITY_ID, WSP.PARAMETER_ID
		BULK COLLECT INTO v_ST_ID, v_P_ID
		FROM COMPOSITE_WEATHER_WORK WRK,
			WEATHER_STATION_PARAMETER WSP
		WHERE WRK.ENTITY_INDEX = 0
			AND WSP.STATION_ID = WRK.ENTITY_ID;

	ELSE
		SELECT DISTINCT COLUMN_VALUE
		BULK COLLECT INTO v_PARAMETERS
		FROM TABLE(CAST(p_PARAMETER_ID AS NUMBER_COLLECTION));

		CACHE_COMPOSITE_PARAM_COEFFS(v_PARAMETERS);

		v_ST_ID := p_STATION_ID;
		v_P_ID := p_PARAMETER_ID;

	END IF;

	-- Find minimum interval
	-- Set minimum interval number as the filter interval set by the user
	v_INT_NUM := GET_INTERVAL_NUMBER(v_INTERVAL_ABBR);
	FOR v_REC IN (SELECT DISTINCT WRK.ENTITY_ID
					FROM COMPOSITE_WEATHER_WORK WRK
					WHERE WRK.ENTITY_INDEX > 0) LOOP

		SELECT WP.PARAMETER_INTERVAL
		INTO v_MIN
		FROM WEATHER_PARAMETER WP
		WHERE WP.PARAMETER_ID = v_REC.ENTITY_ID;

		-- if a parameter's interval is lesser than the filter interval
		IF GET_INTERVAL_NUMBER(v_MIN) < v_INT_NUM THEN
			v_INT_NUM := GET_INTERVAL_NUMBER(v_MIN);
		END IF;
	END LOOP;

	-- INsert STation Param Pairs into a work table
	UT.GET_RTO_WORK_ID(v_WORK_ID );
	INSERT INTO RTO_WORK(WORK_ID,WORK_SEQ, WORK_XID)
	SELECT v_WORK_ID,A.COLUMN_VALUE, B.COLUMN_VALUE
	FROM (SELECT ROWNUM as IDX, COLUMN_VALUE
		FROM TABLE(CAST(v_ST_ID AS NUMBER_COLLECTION)) ) A,
		(SELECT ROWNUM as IDX, COLUMN_VALUE
		FROM TABLE(CAST(v_P_ID AS NUMBER_COLLECTION)) ) B
	WHERE A.IDX = B.IDX;

	OPEN p_CURSOR FOR
			SELECT SUBSTR(TRIM(CASE v_INTERVAL_ABBR
					WHEN 'MI15' THEN SDT.MI15_YYYY_MM_DD
					WHEN 'MI30' THEN SDT.MI30_YYYY_MM_DD
					WHEN 'DD' THEN SDT.DAY_YYYY_MM_DD
			 		WHEN 'DY' THEN SDT.WEEK_YYYY_MM_DD
			 		WHEN 'MM' THEN SDT.MONTH_YYYY_MM_DD
			 		WHEN 'Q' THEN SDT.QUARTER_YYYY_MM_DD
					WHEN 'YY' THEN SDT.YEAR_YYYY_MM_DD
					ELSE SDT.HOUR_YYYY_MM_DD
				END), 0,10) WEATHER_DATE,
				SUBSTR(TRIM(CASE v_INTERVAL_ABBR
					WHEN 'MI15' THEN SDT.MI15_YYYY_MM_DD
					WHEN 'MI30' THEN SDT.MI30_YYYY_MM_DD
					WHEN 'DD' THEN SDT.DAY_YYYY_MM_DD
			 		WHEN 'DY' THEN SDT.WEEK_YYYY_MM_DD
			 		WHEN 'MM' THEN SDT.MONTH_YYYY_MM_DD
			 		WHEN 'Q' THEN SDT.QUARTER_YYYY_MM_DD
					WHEN 'YY' THEN SDT.YEAR_YYYY_MM_DD
					ELSE SDT.HOUR_YYYY_MM_DD
				END), 12) WEATHER_TIME,
				SDT.STATION_NAME,
				SDT.STATION_ID,
				SDT.PARAMETER_NAME,
				SDT.PARAMETER_ID,
				SDT.PARAMETER_INTERVAL,
				CASE SDT.PARAMETER_CODE
					WHEN CONSTANTS.CODE_FORECAST THEN 'Forecast'
					WHEN CONSTANTS.CODE_ACTUAL THEN 'Actual'
					WHEN 'U' THEN 'Used'
				END PARAMETER_CODE,
				MAX(SDT.IS_COMPOSITE) IS_COMPOSITE,
				AVG(EACH_VALUE.PARAMETER_VAL) PARAMETER_VAL
			FROM  (SELECT WS_COMP.ROOT_ENTITY_ID STATION_ID,
						WP.PARAMETER_ID,
						WP.PARAMETER_INTERVAL,
						VAL.PARAMETER_CODE,
						VAL.PARAMETER_DATE,
						SUM(VAL.PARAMETER_VAL*WP_COMP.COEFFICIENT*WS_COMP.COEFFICIENT) PARAMETER_VAL
					FROM COMPOSITE_WEATHER_WORK WS_COMP,
						COMPOSITE_WEATHER_WORK WP_COMP,
						STATION_PARAMETER_VALUE VAL,
						WEATHER_PARAMETER WP,
						WEATHER_STATION_PARAMETER WSP,
						TABLE(CAST(v_PARAMETER_CODE AS STRING_COLLECTION)) PC,
						RTO_WORK SPP
					WHERE WS_COMP.ENTITY_INDEX = 0
						AND WP_COMP.ENTITY_INDEX > 0
						AND WS_COMP.ROOT_ENTITY_ID = SPP.WORK_SEQ
						AND WP_COMP.ROOT_ENTITY_ID = SPP.WORK_XID
						AND SPP.WORK_ID = v_WORK_ID
						AND WSP.STATION_ID = WS_COMP.ENTITY_ID
						AND WSP.PARAMETER_ID = WP_COMP.ROOT_ENTITY_ID

						AND VAL.STATION_ID = WS_COMP.ENTITY_ID
						AND VAL.PARAMETER_ID = WP_COMP.ENTITY_ID
						AND VAL.CASE_ID = p_CASE_ID
						AND VAL.PARAMETER_CODE = PC.COLUMN_VALUE
						AND VAL.PARAMETER_DATE >= CASE WHEN  WP.PARAMETER_INTERVAL = 'Day'
														THEN p_BEGIN_DATE
														ELSE v_CUT_BEGIN_DATE END
						AND VAL.PARAMETER_DATE <= v_CUT_END_DATE

						AND WP.PARAMETER_ID = WP_COMP.ROOT_ENTITY_ID
					GROUP BY WS_COMP.ROOT_ENTITY_ID,
						WP.PARAMETER_ID,
						WP.PARAMETER_INTERVAL,
						VAL.PARAMETER_CODE,
						VAL.PARAMETER_DATE) EACH_VALUE,
			(SELECT DATE_UTIL.HED_TRUNC(S.CUT_DATE,GET_INTERVAL_ABBREVIATION(WP.PARAMETER_INTERVAL)) HED_DATE,
				S.MI15_YYYY_MM_DD,
				S.MI30_YYYY_MM_DD,
				S.HOUR_YYYY_MM_DD,
				S.DAY_YYYY_MM_DD,
				S.WEEK_YYYY_MM_DD,
				S.MONTH_YYYY_MM_DD,
				S.QUARTER_YYYY_MM_DD,
				S.YEAR_YYYY_MM_DD,
				WS.STATION_NAME,
				WS.STATION_ID,
				WP.PARAMETER_NAME,
				WP.PARAMETER_ID,
				WP.PARAMETER_INTERVAL,
				PC.COLUMN_VALUE PARAMETER_CODE,
				(WP.IS_COMPOSITE + WS.IS_COMPOSITE) IS_COMPOSITE
			 FROM SYSTEM_DATE_TIME S,
			 	RTO_WORK WK,
				WEATHER_STATION WS,
				WEATHER_PARAMETER WP,
				TABLE(CAST(v_PARAMETER_CODE AS STRING_COLLECTION)) PC
			 WHERE S.TIME_ZONE = p_TIME_ZONE
				AND S.CUT_DATE BETWEEN v_CUT_BEGIN_DATE AND v_CUT_END_DATE
				AND S.DAY_TYPE = 1
				AND S.DATA_INTERVAL_TYPE = 1
				AND S.MINIMUM_INTERVAL_NUMBER >= v_INT_NUM
				AND WK.WORK_ID = v_WORK_ID
				AND WS.STATION_ID = WK.WORK_SEQ
				AND WP.PARAMETER_ID = WK.WORK_XID) SDT
			WHERE SDT.HED_DATE = EACH_VALUE.PARAMETER_DATE (+)
					AND SDT.STATION_ID = EACH_VALUE.STATION_ID (+)
					AND SDT.PARAMETER_ID = EACH_VALUE.PARAMETER_ID (+)
					AND SDT.PARAMETER_CODE = EACH_VALUE.PARAMETER_CODE (+)
			GROUP BY SUBSTR(TRIM(CASE v_INTERVAL_ABBR
					WHEN 'MI15' THEN SDT.MI15_YYYY_MM_DD
					WHEN 'MI30' THEN SDT.MI30_YYYY_MM_DD
					WHEN 'DD' THEN SDT.DAY_YYYY_MM_DD
			 		WHEN 'DY' THEN SDT.WEEK_YYYY_MM_DD
			 		WHEN 'MM' THEN SDT.MONTH_YYYY_MM_DD
			 		WHEN 'Q' THEN SDT.QUARTER_YYYY_MM_DD
					WHEN 'YY' THEN SDT.YEAR_YYYY_MM_DD
					ELSE SDT.HOUR_YYYY_MM_DD
				END), 0,10),
				SUBSTR(TRIM(CASE v_INTERVAL_ABBR
					WHEN 'MI15' THEN SDT.MI15_YYYY_MM_DD
					WHEN 'MI30' THEN SDT.MI30_YYYY_MM_DD
					WHEN 'DD' THEN SDT.DAY_YYYY_MM_DD
			 		WHEN 'DY' THEN SDT.WEEK_YYYY_MM_DD
			 		WHEN 'MM' THEN SDT.MONTH_YYYY_MM_DD
			 		WHEN 'Q' THEN SDT.QUARTER_YYYY_MM_DD
					WHEN 'YY' THEN SDT.YEAR_YYYY_MM_DD
					ELSE SDT.HOUR_YYYY_MM_DD
				END), 12),
				SDT.STATION_NAME,
				SDT.STATION_ID,
				SDT.PARAMETER_NAME,
				SDT.PARAMETER_ID,
				SDT.PARAMETER_INTERVAL,
				CASE SDT.PARAMETER_CODE
					WHEN CONSTANTS.CODE_FORECAST THEN 'Forecast'
					WHEN CONSTANTS.CODE_ACTUAL THEN 'Actual'
					WHEN 'U' THEN 'Used'
				END
		ORDER BY 1,2;

	UT.PURGE_RTO_WORK(v_WORK_ID);

END	WEATHER_DATA;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_WEATHER_DATA
	(
	p_WEATHER_DATE			IN VARCHAR2,
	p_WEATHER_TIME			IN VARCHAR2,
	p_TIME_ZONE				IN VARCHAR2,
	p_STATION_ID 			IN NUMBER,
	p_PARAMETER_ID			IN NUMBER,
	p_INTERVAL				IN VARCHAR2,
	p_CASE_ID				IN NUMBER,
	p_PARAMETER_CODE		IN VARCHAR2,
	p_PARAMETER_VAL			IN NUMBER
	) AS

v_WS_IS_COMPOSITE NUMBER(1);
v_IS_COMPOSITE NUMBER(1);
v_PARAMETER_INTERVAL WEATHER_PARAMETER.PARAMETER_INTERVAL%TYPE;
v_CUT_DATE DATE;
v_PARAMETER_CODE VARCHAR2(1);
BEGIN

	SELECT WS.IS_COMPOSITE, WP.IS_COMPOSITE, WP.PARAMETER_INTERVAL
	INTO v_WS_IS_COMPOSITE,v_IS_COMPOSITE, v_PARAMETER_INTERVAL
	FROM WEATHER_STATION WS,
		WEATHER_PARAMETER WP
	WHERE WS.STATION_ID = p_STATION_ID
		AND WP.PARAMETER_ID = p_PARAMETER_ID;

	v_IS_COMPOSITE := v_IS_COMPOSITE + v_WS_IS_COMPOSITE;

	v_CUT_DATE := DATE_TIME_AS_CUT(p_WEATHER_DATE, p_WEATHER_TIME, p_TIME_ZONE);

	v_PARAMETER_CODE := CASE p_PARAMETER_CODE
						WHEN 'Forecast' THEN CONSTANTS.CODE_FORECAST
						WHEN 'Actual' THEN CONSTANTS.CODE_ACTUAL
						WHEN 'Used' THEN 'U'
					END;
	IF (p_INTERVAL = v_PARAMETER_INTERVAL OR v_IS_COMPOSITE = 0) THEN
		PUT_STATION_PARAMETER_VALUE(p_CASE_ID,p_STATION_ID,p_PARAMETER_ID,v_PARAMETER_CODE,v_CUT_DATE,p_PARAMETER_VAL);
	END IF;


END	PUT_WEATHER_DATA;
----------------------------------------------------------------------------------------------------
-- Take a string of delimited numbers and return their product
FUNCTION PRODUCT_FROM_STRING
	(
	p_VALS IN VARCHAR2,
	p_DELIM IN CHAR := ','
	) RETURN NUMBER IS

  v_RET NUMBER;
  v_TBL GA.NUMBER_TABLE;
  v_IDX BINARY_INTEGER;

BEGIN

	UT.TOKENS_FROM_STRING_TO_NUMBERS(p_VALS, p_DELIM, v_TBL);

	v_IDX := v_TBL.FIRST;
	WHILE v_TBL.EXISTS(v_IDX) LOOP
		v_RET := NVL(v_RET,1.0)*NVL(v_TBL(v_IDX),0.0);
		v_IDX := V_TBL.NEXT(v_IDX);
	END LOOP;

	RETURN v_RET;
END PRODUCT_FROM_STRING;
----------------------------------------------------------------------------------------------------
PROCEDURE CACHE_COMPOSITE_HIERARCHY
	(
	p_STATION_ID IN NUMBER,
	p_PARAMETERS IN GA.ID_TABLE
	) AS

BEGIN
	CACHE_COMPOSITE_STATION_COEFFS(p_STATION_ID, TRUE);
	CACHE_COMPOSITE_PARAM_COEFFS(p_PARAMETERS);

END CACHE_COMPOSITE_HIERARCHY;

END WR;
/
