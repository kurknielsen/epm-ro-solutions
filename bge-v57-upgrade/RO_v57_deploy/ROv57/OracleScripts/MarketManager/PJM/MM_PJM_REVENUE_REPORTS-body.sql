CREATE OR REPLACE PACKAGE BODY MM_PJM_REVENUE_REPORTS IS

g_ALL_DATA CONSTANT NUMBER(9) := SD.g_ALL_DATA_ENTITY_ID;
g_GROUP_UNREG VARCHAR2(16) := 'Unregulated';
g_GROUP_REG VARCHAR2(16) := 'Regulated';
g_ATTR_CONTRACT_GROUP VARCHAR2(32) := 'AYE: Contract Group';
g_LOW_DATE DATE := LOW_DATE;
g_LAST_BEGIN_DATE DATE := SYSDATE;
g_MARGINAL_LOSS_DATE DATE := DATE '2007-06-01';

----------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.1 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
PROCEDURE NULL_CURSOR (p_CURSOR IN OUT REF_CURSOR) AS

BEGIN

	OPEN p_CURSOR FOR
		SELECT NULL FROM DUAL;

END NULL_CURSOR;
--------------------------------------------------------------------------------------------
FUNCTION GET_FTR_MARKET_PRICE_TYPE
	(
	p_POINT_OR_ZONE IN VARCHAR2
	) RETURN VARCHAR2 IS
BEGIN
	--This function is used by the FTR_INFO view in order to avoid serious
	--  refactoring for Marginal Losses.  It does cause a circular dependency
	--  with the view and this package, but that was necessary to know whether
	--  our query date was before or after the Marginal Loss change.
	--If the FTR by Path reports are ever refactored, I think they should
	--  all be combined into one stored procedure (maybe two) rather than having
	--  5 different ones, and then just get rid of the view and paste the
	--  code directly in.  Then you would not need this function -- you would just
	--  put CASE statements right in the stored procedure.
	--You could also get rid of the g_LAST_BEGIN_DATE package variable and just use p_BEGIN_DATE
	--  instead.
	--But I did not have the time to do such a serious refactor at this stage
	--  (and test it),  so I just made it work with Marginal Losses as it was.
	--If a serious refactor is done, it should also include getting rid of the
	--  usage of the "Supply" vs. "MonPower" filters, and instead use Contract
	--  as the filter so that we are not AYE-specific. (MMW 6/14/2007)

	IF p_POINT_OR_ZONE = 'Zone' THEN
		RETURN CASE WHEN g_LAST_BEGIN_DATE >= g_MARGINAL_LOSS_DATE
			THEN 'FTR Zonal Congestion Price' ELSE 'FTR Zonal LMP' END;
	ELSE
		RETURN CASE WHEN g_LAST_BEGIN_DATE >= g_MARGINAL_LOSS_DATE
			THEN 'Marginal Congestion Component' ELSE 'Locational Marginal Price' END;
	END IF;

END GET_FTR_MARKET_PRICE_TYPE;
--------------------------------------------------------------------------------------------

PROCEDURE GET_TRADE_BY_CONTRACT_RPT
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INTERVAL IN VARCHAR2,
	p_TIME_ZONE IN VARCHAR2,
	p_STATEMENT_TYPE IN NUMBER,
	p_PSE_ID IN NUMBER,
	p_CONTRACT_CID IN VARCHAR2,
	p_SOURCE_CURVE_NAME IN VARCHAR2,
	p_BY_ZONE IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS

	v_SC_ID      NUMBER(9) := EI.GET_ID_FROM_IDENTIFIER_EXTSYS('PJM', EC.ED_SC, EC.ES_PJM);
	v_BEGIN_DATE DATE;
	v_END_DATE   DATE;
	v_MIN_INTERVAL_NUMBER NUMBER(2) := GET_INTERVAL_NUMBER('Hour');
	v_CONTRACT_ID INTERCHANGE_CONTRACT.CONTRACT_ID%TYPE;
	v_AS_OF_DATE DATE := LOW_DATE;
BEGIN
	g_LAST_BEGIN_DATE := p_BEGIN_DATE;

	--Make sure we have data in the SYSTEM_DATE_TIME table.  Return an error if not.
	SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);

	UT.CUT_DATE_RANGE(GA.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);
	SELECT CONTRACT_ID INTO v_CONTRACT_ID FROM INTERCHANGE_CONTRACT
	WHERE BILLING_ENTITY_ID = p_PSE_ID;

	OPEN p_CURSOR FOR
	SELECT SCHEDULE_DATE, CONTRACT_CID,
		MAX(TRANSACTION_TYPE) "TRANSACTION_TYPE",
		MAX(CONTRACT_TYPE) "CONTRACT_TYPE",
		MAX(CONTRACT_ID) "CONTRACT_ID",
		MAX(BUYER) "BUYER",
		MAX(SELLER) "SELLER",
		MAX(SOURCE_CURVE_NAME) "SOURCE_CURVE_NAME",
		MAX(SINK_CURVE_NAME) "SINK_CURVE_NAME",
		MIN(LOCAL_DAY_TRUNC_DATE) "SCHEDULE_DATE_DATE",
		SUM(CASE WHEN TRANSACTION_TYPE IN ('Sale','Load') THEN -1 * DA_AMOUNT ELSE NULL END) "DA_PURCH_MW",
		SUM(CASE WHEN TRANSACTION_TYPE IN ('Sale','Load') THEN -1 * DA_SRC_CASH ELSE NULL END) "DA_PURCH_CASH",
		SUM(CASE WHEN TRANSACTION_TYPE IN ('Purchase','Generation') THEN DA_AMOUNT ELSE NULL END) "DA_SALE_MW",
		SUM(CASE WHEN TRANSACTION_TYPE IN ('Purchase','Generation') THEN DA_SNK_CASH ELSE NULL END) "DA_SALE_CASH",
		SUM(CASE WHEN TRANSACTION_TYPE IN ('Sale','Load') THEN -1 * RT_AMOUNT ELSE NULL END) "RT_PURCH_MW",
		SUM(CASE WHEN TRANSACTION_TYPE IN ('Sale','Load') THEN -1 * RT_SRC_CASH ELSE NULL END) "RT_PURCH_CASH",
		SUM(CASE WHEN TRANSACTION_TYPE IN ('Purchase','Generation') THEN RT_AMOUNT ELSE NULL END) "RT_SALE_MW",
		SUM(CASE WHEN TRANSACTION_TYPE IN ('Purchase','Generation') THEN RT_SNK_CASH ELSE NULL END) "RT_SALE_CASH",
		MAX(DA_SRC_LMP) "DA_SRC_LMP",
		MAX(DA_SNK_LMP) "DA_SNK_LMP",
		MAX(RT_SRC_LMP) "RT_SRC_LMP",
		MAX(RT_SNK_LMP) "RT_SNK_LMP"
	FROM
		(
		SELECT CONTRACT_CID, TRANSACTION_TYPE, CONTRACT_TYPE, CONTRACT_ID,
			BUYER, SELLER, SOURCE_CURVE_NAME, SINK_CURVE_NAME,
			LOCAL_DAY_TRUNC_DATE,
			CASE p_INTERVAL WHEN 'Day' THEN DAY_YYYY_MM_DD WHEN 'Total' THEN TO_CHAR(p_BEGIN_DATE,'YYYY-MM-DD') || ' to ' || TO_CHAR(p_END_DATE, 'YYYY-MM-DD') WHEN 'Month' THEN MONTH_YYYY_MM_DD ELSE HOUR_YYYY_MM_DD END SCHEDULE_DATE,
			CASE X.MARKET_TYPE WHEN 'DayAhead' THEN ITS.AMOUNT ELSE 0 END "DA_AMOUNT",
			CASE X.MARKET_TYPE WHEN 'RealTime' THEN ITS.AMOUNT ELSE 0 END
				* CASE IS_VIRTUAL WHEN 1 THEN 0 ELSE 1 END "RT_AMOUNT",
			CASE X.MARKET_TYPE WHEN 'RealTime' THEN ITS.AMOUNT ELSE 0 END "RT_AMOUNT_INCL_VIRTS",
			CASE X.MARKET_TYPE WHEN 'DayAhead' THEN ITS.AMOUNT * MPV_SRC.PRICE ELSE 0 END "DA_SRC_CASH",
			CASE X.MARKET_TYPE WHEN 'DayAhead' THEN ITS.AMOUNT * MPV_SNK.PRICE ELSE 0 END "DA_SNK_CASH",
			CASE X.MARKET_TYPE WHEN 'RealTime' THEN ITS.AMOUNT * MPV_SRC.PRICE ELSE 0 END
				* CASE IS_VIRTUAL WHEN 1 THEN -1 ELSE 1 END "RT_SRC_CASH",
			CASE X.MARKET_TYPE WHEN 'RealTime' THEN ITS.AMOUNT * MPV_SNK.PRICE ELSE 0 END
				* CASE IS_VIRTUAL WHEN 1 THEN -1 ELSE 1 END "RT_SNK_CASH",
			CASE X.MARKET_TYPE WHEN 'DayAhead' THEN MPV_SRC.PRICE ELSE NULL END "DA_SRC_LMP",
			CASE X.MARKET_TYPE WHEN 'DayAhead' THEN MPV_SNK.PRICE ELSE NULL END "DA_SNK_LMP",
			CASE X.MARKET_TYPE WHEN 'RealTime' THEN MPV_SRC.PRICE ELSE NULL END "RT_SRC_LMP",
			CASE X.MARKET_TYPE WHEN 'RealTime' THEN MPV_SNK.PRICE ELSE NULL END "RT_SNK_LMP"
		FROM
			(SELECT TRANSACTION_ID, CONTRACT_CID, TRANSACTION_TYPE, CONTRACT_TYPE, CONTRACT_ID, MARKET_TYPE,
				BUYER, SELLER, SOURCE_CURVE_NAME, SINK_CURVE_NAME,
				SOURCE_MARKET_PRICE_ID, SINK_MARKET_PRICE_ID,
				SDT.CUT_DATE_SCHEDULING, SDT.MONTH_YYYY_MM_DD, SDT.DAY_YYYY_MM_DD, SDT.HOUR_YYYY_MM_DD,
				SDT.LOCAL_DAY_TRUNC_DATE, IS_VIRTUAL
			FROM
				(SELECT
					CASE
						WHEN p_BY_ZONE = 1 THEN SINK.SERVICE_POINT_NAME || '-' || SRC.SERVICE_POINT_NAME
						WHEN T.TRANSACTION_TYPE = 'Generation' THEN 'Inc' || '-' || SINK.SERVICE_POINT_NAME
						WHEN T.TRANSACTION_TYPE = 'Load' THEN 'Dec' || '-' || SINK.SERVICE_POINT_NAME
						WHEN T.TRANSACTION_IDENTIFIER LIKE '%RT'
							THEN SUBSTR(T.TRANSACTION_IDENTIFIER, 1, LENGTH(T.TRANSACTION_IDENTIFIER)-2)
						ELSE T.TRANSACTION_IDENTIFIER
					END "CONTRACT_CID",
					T.TRANSACTION_ID,
					T.TRANSACTION_TYPE,
					T.AGREEMENT_TYPE "CONTRACT_TYPE",
					T.CONTRACT_ID,
					U.MARKET_TYPE,
					BUYER.PSE_NAME "BUYER",
					SELLER.PSE_NAME "SELLER",
					SRC.SERVICE_POINT_NAME "SOURCE_CURVE_NAME",
					SINK.SERVICE_POINT_NAME "SINK_CURVE_NAME",
					MP_SRC.MARKET_PRICE_ID "SOURCE_MARKET_PRICE_ID",
					MP_SNK.MARKET_PRICE_ID "SINK_MARKET_PRICE_ID",
					T.IS_VIRTUAL
				FROM PJM_TXNS_VIRTS_AS_DA_RT T,
		          IT_COMMODITY U,
		          PURCHASING_SELLING_ENTITY BUYER,
		          PURCHASING_SELLING_ENTITY SELLER,
		          SERVICE_POINT SINK, SERVICE_POINT SRC,
		          MARKET_PRICE MP_SNK, MARKET_PRICE MP_SRC
				WHERE T.CONTRACT_ID = v_CONTRACT_ID
					AND T.SC_ID = v_SC_ID
					AND T.TRANSACTION_INTERVAL = 'Hour'
					AND T.BEGIN_DATE <= p_END_DATE
					AND T.END_DATE >= p_BEGIN_DATE
					AND (T.IS_VIRTUAL = 1 OR T.TRANSACTION_TYPE IN ('Purchase','Sale'))
					AND U.COMMODITY_ID = T.COMMODITY_ID
					AND BUYER.PSE_ID = T.PURCHASER_ID
					AND SELLER.PSE_ID = T.SELLER_ID
					AND SINK.SERVICE_POINT_ID = T.POD_ID
					AND SRC.SERVICE_POINT_ID = T.POR_ID
					AND MP_SRC.MARKET_PRICE_TYPE = 'Locational Marginal Price'
					AND MP_SRC.MARKET_TYPE = U.MARKET_TYPE
					AND MP_SRC.POD_ID = T.POR_ID
					AND MP_SRC.SC_ID = T.SC_ID
					AND MP_SNK.MARKET_PRICE_TYPE = 'Locational Marginal Price'
					AND MP_SNK.MARKET_TYPE = U.MARKET_TYPE
					AND MP_SNK.POD_ID = T.POD_ID
					AND MP_SNK.SC_ID = T.SC_ID
				) Z,
				SYSTEM_DATE_TIME SDT
			WHERE (p_CONTRACT_CID = '<ALL>' OR Z.CONTRACT_CID = p_CONTRACT_CID)
				AND (p_SOURCE_CURVE_NAME = '<ALL>' OR Z.SOURCE_CURVE_NAME = p_SOURCE_CURVE_NAME)
				AND SDT.TIME_ZONE = p_TIME_ZONE
				AND SDT.DATA_INTERVAL_TYPE = 1
				AND SDT.DAY_TYPE = '1'
				AND SDT.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
				AND SDT.MINIMUM_INTERVAL_NUMBER >= v_MIN_INTERVAL_NUMBER
			) X,
			IT_SCHEDULE ITS, MARKET_PRICE_VALUE MPV_SRC, MARKET_PRICE_VALUE MPV_SNK
		WHERE ITS.TRANSACTION_ID(+) = X.TRANSACTION_ID
			AND ITS.SCHEDULE_TYPE(+) = p_STATEMENT_TYPE
			AND ITS.SCHEDULE_STATE(+) = 1
			AND ITS.SCHEDULE_DATE(+) = X.CUT_DATE_SCHEDULING
			AND ITS.AS_OF_DATE(+) = v_AS_OF_DATE
			AND MPV_SRC.MARKET_PRICE_ID(+) = X.SOURCE_MARKET_PRICE_ID
			AND MPV_SRC.PRICE_CODE(+) = 'A'
			AND MPV_SRC.PRICE_DATE(+) = X.CUT_DATE_SCHEDULING
			AND MPV_SRC.AS_OF_DATE(+) = v_AS_OF_DATE
			AND MPV_SNK.MARKET_PRICE_ID(+) = X.SINK_MARKET_PRICE_ID
			AND MPV_SNK.PRICE_CODE(+) = 'A'
			AND MPV_SNK.PRICE_DATE(+) = X.CUT_DATE_SCHEDULING
			AND MPV_SNK.AS_OF_DATE(+) = v_AS_OF_DATE
	)
	WHERE (p_CONTRACT_CID <> '<ALL>' OR DA_AMOUNT + RT_AMOUNT_INCL_VIRTS <> 0)
	GROUP BY CONTRACT_CID, SCHEDULE_DATE;

END GET_TRADE_BY_CONTRACT_RPT;
------------------------------------------------------------------------------------------
PROCEDURE GET_GEN_REV_RPT
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_STATEMENT_TYPE IN NUMBER,
	p_ROLLUP_TO IN VARCHAR2 := 'Month',
	p_INCLUDE_SUPPLY IN NUMBER,
	p_INCLUDE_MONPOWER IN NUMBER,
	p_RESOURCE_NAME IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS

	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
	v_MIN_INTERVAL_NUMBER NUMBER(2);
	v_INTERVAL_ABBR VARCHAR2(32);
	v_ALLOWED_TXNS ID_TABLE := SD.GET_ALLOWED_ENTITY_ID_TABLE(SD.g_ACTION_TXN_SELECT);
	v_ALL_TXNS NUMBER(1) := 0;
	v_SUPPLY_CONTRACT_GROUP VARCHAR2(32) := 'DONOTINCLUDE';
	v_MP_CONTRACT_GROUP VARCHAR2(32) := 'DONOTINCLUDE';
	v_CONTRACT_GRP_ATTR_ID NUMBER(9);

BEGIN
	p_STATUS := GA.SUCCESS;
	g_LAST_BEGIN_DATE := p_BEGIN_DATE;
	--Make sure we have data in the SYSTEM_DATE_TIME table.
	SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);

	UT.CUT_DATE_RANGE(GA.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

	v_MIN_INTERVAL_NUMBER := GET_INTERVAL_NUMBER('Hour');
	v_INTERVAL_ABBR := GET_INTERVAL_ABBREVIATION(p_ROLLUP_TO);

	IF v_ALLOWED_TXNS(1).ID = g_ALL_DATA THEN v_ALL_TXNS := 1; END IF;

 	IF p_INCLUDE_SUPPLY = 1 THEN
		v_SUPPLY_CONTRACT_GROUP := g_GROUP_UNREG;
 	END IF;
 	IF p_INCLUDE_MONPOWER = 1 THEN
		v_MP_CONTRACT_GROUP := g_GROUP_REG;
 	END IF;

	ID.ID_FOR_ENTITY_ATTRIBUTE(g_ATTR_CONTRACT_GROUP, 'INTERCHANGE_CONTRACT', 'String', v_CONTRACT_GRP_ATTR_ID);

	OPEN p_CURSOR FOR
		SELECT SCHEDULE_DATE,
			MAX(SCHEDULE_DATE_DATE) SCHEDULE_DATE_DATE,
			RESOURCE_NAME,
			SUM(DA_MW) DA_MW,
			SUM(DA_MW * DA_PRICE) DA_CASH,
			SUM(RT_MW - DA_MW) BAL_MW,
			SUM((RT_MW - DA_MW) * RT_PRICE) BAL_CASH,
			SUM(RT_MW) ACTUAL_MW,
			0 ACTUAL_CASH
		FROM
			--Y: Gather the DA and RT Amounts and prices by Resource, by hour.
			(SELECT X.RESOURCE_NAME,
				X.CUT_DATE_SCHEDULING,
				MAX(CASE v_INTERVAL_ABBR WHEN 'DD' THEN X.DAY_YYYY_MM_DD WHEN 'MM' THEN '<DateRange>' ELSE X.HOUR_YYYY_MM_DD END) "SCHEDULE_DATE",
				MIN(X.LOCAL_DAY_TRUNC_DATE) SCHEDULE_DATE_DATE,
				SUM(CASE X.MARKET_TYPE WHEN 'DayAhead' THEN
					CASE WHEN (ITS.AMOUNT > 0 AND INCLUDE_POS = 1)OR(ITS.AMOUNT < 0 AND INCLUDE_NEG = 1) THEN
						NVL(ITS.AMOUNT,0) ELSE 0 END
					ELSE 0 END *
					CASE WHEN TRANSACTION_TYPE = 'Sale' THEN -1 ELSE 1 END) "DA_MW",
				SUM(CASE X.MARKET_TYPE WHEN 'RealTime' THEN
					CASE WHEN ((ITS.AMOUNT > 0 AND INCLUDE_POS = 1)OR(ITS.AMOUNT < 0 AND INCLUDE_NEG = 1)) THEN
						NVL(ITS.AMOUNT,0) ELSE 0 END
					ELSE 0 END *
					CASE WHEN IS_VIRTUAL = 1 THEN 0 ELSE 1 END *
					CASE WHEN TRANSACTION_TYPE = 'Sale' THEN -1 ELSE 1 END) "RT_MW",
				MAX(CASE X.MARKET_TYPE WHEN 'DayAhead' THEN X.PRICE ELSE NULL END) "DA_PRICE",
				MAX(CASE X.MARKET_TYPE WHEN 'RealTime' THEN X.PRICE ELSE NULL END) "RT_PRICE"
			FROM
				--X: Gather the Transactions and their appropriate ResourceNames.
				(SELECT U.RESOURCE_NAME, SDT.DAY_YYYY_MM_DD, SDT.MONTH_YYYY_MM_DD, SDT.HOUR_YYYY_MM_DD, SDT.LOCAL_DAY_TRUNC_DATE, SDT.CUT_DATE_SCHEDULING,
					U.TRANSACTION_ID,
					U.INCLUDE_POS,
					U.INCLUDE_NEG,
					U.MARKET_TYPE,
					U.MARKET_PRICE_ID,
					U.IS_VIRTUAL,
					U.TRANSACTION_TYPE,
					MPV.PRICE
				FROM PJM_UNIT_REV_BY_SIGN U,
					SYSTEM_DATE_TIME SDT,
					TEMPORAL_ENTITY_ATTRIBUTE GRP, MARKET_PRICE_VALUE MPV
				WHERE (p_RESOURCE_NAME = '<ALL>' OR p_RESOURCE_NAME = U.RESOURCE_NAME)
					AND U.BEGIN_DATE <= p_END_DATE
					AND U.END_DATE >= p_BEGIN_DATE
					AND GRP.OWNER_ENTITY_ID = U.CONTRACT_ID
					AND GRP.ATTRIBUTE_ID = v_CONTRACT_GRP_ATTR_ID
	  				AND GRP.ATTRIBUTE_VAL IN (v_MP_CONTRACT_GROUP, v_SUPPLY_CONTRACT_GROUP)
	  				AND (v_ALL_TXNS = 1
	  					OR U.TRANSACTION_ID IN (SELECT IDS.ID FROM TABLE(v_ALLOWED_TXNS) IDS))
					AND MPV.MARKET_PRICE_ID = U.MARKET_PRICE_ID
					AND MPV.PRICE_CODE = 'A'
					AND MPV.PRICE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
					AND MPV.AS_OF_DATE = g_LOW_DATE
					AND SDT.TIME_ZONE = p_TIME_ZONE
					AND SDT.DAY_TYPE = '1'
					AND SDT.DATA_INTERVAL_TYPE = 1
					AND SDT.CUT_DATE_SCHEDULING = MPV.PRICE_DATE
--					AND SDT.MINIMUM_INTERVAL_NUMBER >= v_MIN_INTERVAL_NUMBER
				) X,
				IT_SCHEDULE ITS
			WHERE ITS.TRANSACTION_ID(+) = X.TRANSACTION_ID
				AND ITS.SCHEDULE_TYPE(+) = p_STATEMENT_TYPE
				AND ITS.SCHEDULE_STATE(+) = GA.INTERNAL_STATE
				AND ITS.SCHEDULE_DATE(+) = X.CUT_DATE_SCHEDULING
				AND ITS.AS_OF_DATE(+) = g_LOW_DATE
			GROUP BY X.CUT_DATE_SCHEDULING, X.RESOURCE_NAME
			) Y
        GROUP BY SCHEDULE_DATE, RESOURCE_NAME
        ORDER BY SCHEDULE_DATE, RESOURCE_NAME
		;

END GET_GEN_REV_RPT;
------------------------------------------------------------------------------------------
PROCEDURE GET_FTR_BY_PATH_RPT
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
	p_STATEMENT_TYPE IN NUMBER,
	p_INCLUDE_SUPPLY IN NUMBER,
	p_INCLUDE_MONPOWER IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS

	v_BEGIN_DATE          DATE;
	v_END_DATE            DATE;
	v_MIN_INTERVAL_NUMBER NUMBER(2) := GET_INTERVAL_NUMBER('Hour');
	v_ALLOWED_TXNS ID_TABLE := SD.GET_ALLOWED_ENTITY_ID_TABLE(SD.g_ACTION_TXN_SELECT);
	v_ALL_TXNS NUMBER(1) := 0;
	v_SUPPLY_CONTRACT_GROUP VARCHAR2(32) := 'DONOTINCLUDE';
	v_MP_CONTRACT_GROUP VARCHAR2(32) := 'DONOTINCLUDE';
	v_CONTRACT_GRP_ATTR_ID NUMBER(9);
	v_SCHEDULE_STATE IT_SCHEDULE.SCHEDULE_STATE%TYPE := GA.INTERNAL_STATE;
BEGIN
	-- NOTE -- IF REFACTORING, PLEASE READ COMMENT ON GET_FTR_MARKET_PRICE_TYPE FUNCTION!

	-- Note that this procedure and the other FTR by Path procedures use
	-- only the FTR Zonal Congestion Price for Zones, instead of using the
	-- DayAhead LMP if it is available and the FTR price is not.
	-- But it is a feature of this report that it works the way it does (never using DA LMP.)
	-- Do not change that, or AYE will not like it.  (MMW 6/14/2007)

	p_STATUS := GA.SUCCESS;
	g_LAST_BEGIN_DATE := p_BEGIN_DATE;

	--Make sure we have data in the SYSTEM_DATE_TIME table.  Return an error if not.
	SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);

	IF v_ALLOWED_TXNS(1).ID = g_ALL_DATA THEN v_ALL_TXNS := 1; END IF;

 	IF p_INCLUDE_SUPPLY = 1 THEN
		v_SUPPLY_CONTRACT_GROUP := g_GROUP_UNREG;
 	END IF;
 	IF p_INCLUDE_MONPOWER = 1 THEN
		v_MP_CONTRACT_GROUP := g_GROUP_REG;
 	END IF;

	ID.ID_FOR_ENTITY_ATTRIBUTE(g_ATTR_CONTRACT_GROUP, 'INTERCHANGE_CONTRACT', 'String', v_CONTRACT_GRP_ATTR_ID);

	UT.CUT_DATE_RANGE(GA.ELECTRIC_MODEL,
					  p_BEGIN_DATE,
					  p_END_DATE,
					  p_TIME_ZONE,
					  v_BEGIN_DATE,
					  v_END_DATE);

	--THE QUERY USES FTR_INFO VIEW
	OPEN p_CURSOR FOR
		SELECT FTR.SOURCE_NAME,
			   FTR.SINK_NAME,
			   FTR.UNIT,
			   FTR.PARTICIPANT,
			   SUM(S.AMOUNT) ALLOCATED_FTR,
			   SUM(ROUND(S.AMOUNT * (MPV_SINK.PRICE - MPV_SRC.PRICE),2)) FTR_CASH
		  FROM FTR_INFO           FTR,
			   IT_SCHEDULE        S,
			   MARKET_PRICE_VALUE MPV_SINK,
			   MARKET_PRICE_VALUE MPV_SRC,
			   SYSTEM_DATE_TIME   SDT,
				 TEMPORAL_ENTITY_ATTRIBUTE GRP
		 WHERE SDT.TIME_ZONE = p_TIME_ZONE
           AND SDT.DAY_TYPE = '1'
           AND SDT.DATA_INTERVAL_TYPE = 1
           AND SDT.CUT_DATE_SCHEDULING BETWEEN v_BEGIN_DATE AND v_END_DATE
           AND SDT.MINIMUM_INTERVAL_NUMBER >= v_MIN_INTERVAL_NUMBER
           AND SDT.CUT_DATE_SCHEDULING = S.SCHEDULE_DATE
           AND SDT.CUT_DATE_SCHEDULING = MPV_SINK.PRICE_DATE
           AND SDT.CUT_DATE_SCHEDULING = MPV_SRC.PRICE_DATE
		 AND FTR.TRANSACTION_ID = S.TRANSACTION_ID
		   AND FTR.DA_SINK_PRICE_ID = MPV_SINK.MARKET_PRICE_ID
		   AND MPV_SINK.PRICE_CODE = 'A'
		   AND FTR.DA_SOURCE_PRICE_ID = MPV_SRC.MARKET_PRICE_ID
		   AND MPV_SRC.PRICE_CODE = 'A'
			 AND GRP.OWNER_ENTITY_ID = FTR.CONTRACT_ID
			 AND GRP.ATTRIBUTE_ID = v_CONTRACT_GRP_ATTR_ID
			 AND GRP.ATTRIBUTE_VAL IN (v_MP_CONTRACT_GROUP, v_SUPPLY_CONTRACT_GROUP)
			 AND (v_ALL_TXNS = 1 OR FTR.TRANSACTION_ID IN (SELECT IDS.ID FROM TABLE(v_ALLOWED_TXNS) IDS))
		   AND S.SCHEDULE_TYPE = p_STATEMENT_TYPE
		   AND S.SCHEDULE_STATE = v_SCHEDULE_STATE
		 GROUP BY FTR.SOURCE_NAME, FTR.SINK_NAME, FTR.UNIT, FTR.PARTICIPANT
		 ORDER BY FTR.PARTICIPANT, FTR.SINK_NAME, FTR.SOURCE_NAME;


END GET_FTR_BY_PATH_RPT;
--------------------------------------------------------------------------------------------
PROCEDURE GET_FTR_BY_PATH_DETAIL_RPT(p_BEGIN_DATE IN DATE,
							  p_END_DATE   IN DATE,
							  p_TIME_ZONE  IN VARCHAR2,
								p_STATEMENT_TYPE IN NUMBER,
								p_ROLLUP_TO IN VARCHAR2 := 'Day',
								p_INCLUDE_SUPPLY IN NUMBER,
								p_INCLUDE_MONPOWER IN NUMBER,
								p_SOURCE_NAME IN VARCHAR2,
								p_SINK_NAME IN VARCHAR2,
								p_PARTICIPANT IN VARCHAR2,
							  p_STATUS     OUT NUMBER,
							  p_CURSOR     IN OUT REF_CURSOR) AS

	v_BEGIN_DATE          DATE;
	v_END_DATE            DATE;
	v_MIN_INTERVAL_NUMBER NUMBER(2);
	v_INTERVAL_ABBR VARCHAR2(32);
	v_ALLOWED_TXNS ID_TABLE := SD.GET_ALLOWED_ENTITY_ID_TABLE(SD.g_ACTION_TXN_SELECT);
	v_ALL_TXNS NUMBER(1) := 0;
	v_SUPPLY_CONTRACT_GROUP VARCHAR2(32) := 'DONOTINCLUDE';
	v_MP_CONTRACT_GROUP VARCHAR2(32) := 'DONOTINCLUDE';
	v_CONTRACT_GRP_ATTR_ID NUMBER(9);

BEGIN
	p_STATUS := GA.SUCCESS;
	g_LAST_BEGIN_DATE := p_BEGIN_DATE;

	--Make sure we have data in the SYSTEM_DATE_TIME table.  Return an error if not.
	SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);

	IF v_ALLOWED_TXNS(1).ID = g_ALL_DATA THEN v_ALL_TXNS := 1; END IF;

	v_MIN_INTERVAL_NUMBER := GET_INTERVAL_NUMBER('Hour');
	v_INTERVAL_ABBR := GET_INTERVAL_ABBREVIATION(p_ROLLUP_TO);

 	IF p_INCLUDE_SUPPLY = 1 THEN
		v_SUPPLY_CONTRACT_GROUP := g_GROUP_UNREG;
 	END IF;
 	IF p_INCLUDE_MONPOWER = 1 THEN
		v_MP_CONTRACT_GROUP := g_GROUP_REG;
 	END IF;

	ID.ID_FOR_ENTITY_ATTRIBUTE(g_ATTR_CONTRACT_GROUP, 'INTERCHANGE_CONTRACT', 'String', v_CONTRACT_GRP_ATTR_ID);

	UT.CUT_DATE_RANGE(GA.ELECTRIC_MODEL,
					  p_BEGIN_DATE,
					  p_END_DATE,
					  p_TIME_ZONE,
					  v_BEGIN_DATE,
					  v_END_DATE);

	--THE QUERY USES FTR_INFO VIEW
	OPEN p_CURSOR FOR
		SELECT SCHEDULE_DATE, PARTICIPANT, MAX(SOURCE_LMP) SOURCE_LMP, MAX(SINK_LMP) SINK_LMP,
			MAX(SINK_LMP-SOURCE_LMP) DIFF_SRC_SINK_LMP, SUM(ALLOCATED_FTR) ALLOCATED_FTR, SUM(FTR_CASH) FTR_CASH FROM (
		SELECT CASE v_INTERVAL_ABBR WHEN 'DD' THEN SDT.DAY_YYYY_MM_DD WHEN 'MM' THEN SDT.MONTH_YYYY_MM_DD ELSE SDT.HOUR_YYYY_MM_DD END SCHEDULE_DATE,
				 FTR.PARTICIPANT,
				 MPV_SRC.PRICE SOURCE_LMP,
				 MPV_SINK.PRICE SINK_LMP,
			   S.AMOUNT ALLOCATED_FTR,
			   ROUND(S.AMOUNT * (MPV_SINK.PRICE - MPV_SRC.PRICE),2) FTR_CASH
		  FROM FTR_INFO           FTR,
			   IT_SCHEDULE        S,
			   MARKET_PRICE_VALUE MPV_SINK,
			   MARKET_PRICE_VALUE MPV_SRC,
			   SYSTEM_DATE_TIME   SDT,
				 TEMPORAL_ENTITY_ATTRIBUTE GRP
		 WHERE SDT.TIME_ZONE = p_TIME_ZONE
           AND SDT.DAY_TYPE = '1'
           AND SDT.DATA_INTERVAL_TYPE = 1
           AND SDT.CUT_DATE_SCHEDULING BETWEEN v_BEGIN_DATE AND v_END_DATE
           AND SDT.MINIMUM_INTERVAL_NUMBER >= v_MIN_INTERVAL_NUMBER
           AND SDT.CUT_DATE_SCHEDULING = S.SCHEDULE_DATE
           AND SDT.CUT_DATE_SCHEDULING = MPV_SINK.PRICE_DATE
           AND SDT.CUT_DATE_SCHEDULING = MPV_SRC.PRICE_DATE
		   AND FTR.SOURCE_NAME = p_SOURCE_NAME
			 AND FTR.SINK_NAME = p_SINK_NAME
			 AND FTR.PARTICIPANT = p_PARTICIPANT
			 AND FTR.TRANSACTION_ID = S.TRANSACTION_ID
		   AND FTR.DA_SINK_PRICE_ID = MPV_SINK.MARKET_PRICE_ID
		   AND MPV_SINK.PRICE_CODE = 'A'
		   AND FTR.DA_SOURCE_PRICE_ID = MPV_SRC.MARKET_PRICE_ID
		   AND MPV_SRC.PRICE_CODE = 'A'
			 AND GRP.OWNER_ENTITY_ID = FTR.CONTRACT_ID
			 AND GRP.ATTRIBUTE_ID = v_CONTRACT_GRP_ATTR_ID
			 AND GRP.ATTRIBUTE_VAL IN (v_MP_CONTRACT_GROUP, v_SUPPLY_CONTRACT_GROUP)
			 AND (v_ALL_TXNS = 1 OR FTR.TRANSACTION_ID IN (SELECT IDS.ID FROM TABLE(v_ALLOWED_TXNS) IDS))
		   AND S.SCHEDULE_TYPE = p_STATEMENT_TYPE
		   AND S.SCHEDULE_STATE = GA.INTERNAL_STATE
		 )
		 GROUP BY SCHEDULE_DATE, PARTICIPANT
		 ORDER BY PARTICIPANT;


END GET_FTR_BY_PATH_DETAIL_RPT;
--------------------------------------------------------------------------------------------
PROCEDURE GET_FTR_BY_ACCT_DAY_RPT(p_BEGIN_DATE IN DATE,
								  p_END_DATE   IN DATE,
								  p_TIME_ZONE  IN VARCHAR2,
                                  p_STATEMENT_TYPE IN NUMBER,
								  p_STATUS     OUT NUMBER,
								  p_CURSOR     IN OUT REF_CURSOR) AS

	v_SC_ID               NUMBER(9) := EI.GET_ID_FROM_IDENTIFIER_EXTSYS('PJM', EC.ED_SC, EC.ES_PJM);
	v_BEGIN_DATE          DATE;
	v_END_DATE            DATE;
	v_MIN_INTERVAL_NUMBER NUMBER(2) := GET_INTERVAL_NUMBER('Hour');
    v_ALLOWED_TXNS ID_TABLE := SD.GET_ALLOWED_ENTITY_ID_TABLE(SD.g_ACTION_TXN_SELECT);
	v_ALL_TXNS NUMBER(1) := 0;

BEGIN
	g_LAST_BEGIN_DATE := p_BEGIN_DATE;

	--Make sure we have data in the SYSTEM_DATE_TIME table.  Return an error if not.
    SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);

	IF p_STATUS < 0 THEN
		NULL_CURSOR(p_CURSOR);
		RETURN;
	END IF;

	UT.CUT_DATE_RANGE(GA.ELECTRIC_MODEL,
					  p_BEGIN_DATE,
					  p_END_DATE,
					  p_TIME_ZONE,
					  v_BEGIN_DATE,
					  v_END_DATE);


    IF v_ALLOWED_TXNS(1).ID = g_ALL_DATA THEN v_ALL_TXNS := 1; END IF;

	OPEN p_CURSOR FOR
		SELECT TRUNC(SDT.CUT_DATE) CURR_DATE,
			   FTR.PARTICIPANT,
			   SUM(S.AMOUNT) ALLOCATED_FTR,
               SUM(ROUND(S.AMOUNT * (MPV_SINK.PRICE - MPV_SRC.PRICE),2)) FTR_CASH
		  FROM FTR_INFO       FTR,
			   IT_SCHEDULE        S,
			   MARKET_PRICE_VALUE MPV_SINK,
			   MARKET_PRICE_VALUE MPV_SRC,
			   SYSTEM_DATE_TIME   SDT
		 WHERE FTR.TRANSACTION_ID = S.TRANSACTION_ID
		   AND FTR.DA_SINK_PRICE_ID = MPV_SINK.MARKET_PRICE_ID
		   AND FTR.SC_ID = v_SC_ID
		   AND MPV_SINK.PRICE_CODE = 'A'
		   AND FTR.DA_SOURCE_PRICE_ID = MPV_SRC.MARKET_PRICE_ID
		   AND MPV_SRC.PRICE_CODE = 'A'
		   AND SDT.TIME_ZONE = p_TIME_ZONE
		   AND SDT.DAY_TYPE = '1'
		   AND SDT.DATA_INTERVAL_TYPE = 1
		   AND SDT.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
		   AND SDT.MINIMUM_INTERVAL_NUMBER >= v_MIN_INTERVAL_NUMBER
		   AND S.SCHEDULE_DATE = SDT.CUT_DATE
		   AND MPV_SINK.PRICE_DATE = SDT.CUT_DATE
		   AND MPV_SRC.PRICE_DATE = SDT.CUT_DATE
		   AND S.SCHEDULE_TYPE = p_STATEMENT_TYPE
		   AND S.SCHEDULE_STATE = GA.INTERNAL_STATE
		   AND (v_ALL_TXNS = 1 OR FTR.TRANSACTION_ID IN (SELECT IDS.ID FROM TABLE(v_ALLOWED_TXNS) IDS))
		 GROUP BY TRUNC(SDT.CUT_DATE), FTR.PARTICIPANT;

END GET_FTR_BY_ACCT_DAY_RPT;
---------------------------------------------------------------------------------------------
PROCEDURE GET_FTR_BY_ACCT_HOUR_RPT(p_TIME_ZONE IN VARCHAR2,
								   p_CURR_DATE IN DATE,
								   p_STATUS    OUT NUMBER,
								   p_CURSOR    IN OUT REF_CURSOR) AS

	v_DATE                DATE;
	v_MIN_INTERVAL_NUMBER NUMBER(2) := GET_INTERVAL_NUMBER('Hour');

BEGIN
	g_LAST_BEGIN_DATE := p_CURR_DATE;

	p_STATUS := GA.SUCCESS;
	v_DATE := TRUNC(p_CURR_DATE);

	OPEN p_CURSOR FOR
		SELECT SDT.CUT_HOUR HB,
			   FTR.PARTICIPANT,
			   SUM(S.AMOUNT) ALLOCATED_FTR,
			   SUM(S.AMOUNT * (MPV_SINK.PRICE - MPV_SRC.PRICE)) FTR_CASH
		  FROM FTR_ACCOUNTS       FTR,
			   IT_SCHEDULE        S,
			   MARKET_PRICE_VALUE MPV_SINK,
			   MARKET_PRICE_VALUE MPV_SRC,
			   SYSTEM_DATE_TIME   SDT
		 WHERE FTR.TRANSACTION_ID = S.TRANSACTION_ID
		   AND FTR.DA_SINK_PRICE_ID = MPV_SINK.MARKET_PRICE_ID
		   AND MPV_SINK.PRICE_CODE = 'A'
		   AND FTR.DA_SOURCE_PRICE_ID = MPV_SRC.MARKET_PRICE_ID
		   AND MPV_SRC.PRICE_CODE = 'A'
		   AND SDT.TIME_ZONE = p_TIME_ZONE
		   AND SDT.DAY_TYPE = '1'
		   AND SDT.DATA_INTERVAL_TYPE = 1
		   AND TRUNC(SDT.CUT_DATE) = v_DATE
		   AND SDT.MINIMUM_INTERVAL_NUMBER >= v_MIN_INTERVAL_NUMBER
		   AND S.SCHEDULE_DATE = SDT.CUT_DATE
		   AND MPV_SINK.PRICE_DATE = SDT.CUT_DATE
		   AND MPV_SRC.PRICE_DATE = SDT.CUT_DATE
		   AND S.SCHEDULE_TYPE = 1
		   AND S.SCHEDULE_STATE = GA.INTERNAL_STATE
		 GROUP BY SDT.CUT_HOUR, FTR.PARTICIPANT
		 ORDER BY SDT.CUT_HOUR;
END GET_FTR_BY_ACCT_HOUR_RPT;
---------------------------------------------------------------------------------------------
PROCEDURE GET_ALLOWED_PJM_ACCTS(p_STATUS OUT NUMBER, p_CURSOR IN OUT REF_CURSOR) AS
	v_ALLOWED_ACCTS ID_TABLE := SD.GET_ALLOWED_ENTITY_ID_TABLE(SD.g_ACTION_PSE_BILL_SELECT);
BEGIN
	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
		SELECT PSE.PSE_NAME, PSE.PSE_ID FROM PSE, TABLE(v_ALLOWED_ACCTS) IDS, INTERCHANGE_CONTRACT C
		WHERE IDS.ID IN (SD.g_ALL_DATA_ENTITY_ID, PSE.PSE_ID)
		AND PSE.PSE_ID=C.BILLING_ENTITY_ID
		ORDER BY PSE.PSE_NAME;
END GET_ALLOWED_PJM_ACCTS;
---------------------------------------------------------------------------------------------

END MM_PJM_REVENUE_REPORTS;
/
