CREATE OR REPLACE PACKAGE BODY MM_OASIS IS
g_INVALID_STATUS CONSTANT VARCHAR2(8) := 'INVALID';
g_CONFIRMED_STATUS CONSTANT VARCHAR2(9) :='CONFIRMED';
g_ACCEPTED_STATUS CONSTANT VARCHAR2(16) := 'ACCEPTED';

------------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.1 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
PROCEDURE MARKET_SUBMIT_TRANSACTION_LIST
	(
	p_BEGIN_DATE 	IN DATE,
	p_END_DATE 		IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR2,
	p_LOG_TYPE		IN NUMBER,
	p_TRACE_ON		IN NUMBER,
	p_STATUS 		OUT NUMBER,
	p_CURSOR 		IN OUT REF_CURSOR) AS

BEGIN
	IF p_EXCHANGE_TYPE = g_ACTION_SUB_TRANSREQUEST THEN
		OPEN p_CURSOR FOR
			SELECT A.TRANSACTION_NAME, A.TRANSACTION_ID
			FROM INTERCHANGE_TRANSACTION A, IT_STATUS B
			WHERE A.AGREEMENT_TYPE = 'OASIS'
				AND A.BEGIN_DATE <= p_END_DATE
				AND A.END_DATE >= p_BEGIN_DATE
				AND B.TRANSACTION_ID = A.TRANSACTION_ID
				AND B.AS_OF_DATE = LOW_DATE
				AND B.TRANSACTION_STATUS_NAME = 'NEW';
	ELSIF p_EXCHANGE_TYPE = g_ACTION_SUB_TRANSCUST_CONF THEN
		OPEN p_CURSOR FOR
			SELECT A.TRANSACTION_NAME, A.TRANSACTION_ID
			FROM INTERCHANGE_TRANSACTION A, IT_STATUS B
			WHERE A.AGREEMENT_TYPE = 'OASIS'
				AND A.BEGIN_DATE <= p_END_DATE
				AND A.END_DATE >= p_BEGIN_DATE
				AND B.TRANSACTION_ID = A.TRANSACTION_ID
				AND B.AS_OF_DATE = LOW_DATE
				AND B.TRANSACTION_STATUS_NAME IN ('ACCEPTED','COUNTEROFFER');
	ELSIF p_EXCHANGE_TYPE = g_ACTION_SUB_TRANSCUST_WITH THEN
		OPEN p_CURSOR FOR
			SELECT A.TRANSACTION_NAME, A.TRANSACTION_ID
			FROM INTERCHANGE_TRANSACTION A, IT_STATUS B
			WHERE A.AGREEMENT_TYPE = 'OASIS'
				AND A.BEGIN_DATE <= p_END_DATE
				AND A.END_DATE >= p_BEGIN_DATE
				AND B.TRANSACTION_ID = A.TRANSACTION_ID
				AND B.AS_OF_DATE = LOW_DATE
				AND B.TRANSACTION_STATUS_NAME IN ('QUEUED','RECEIVED','STUDY','COUNTEROFFER','REBID','ACCEPTED');
	ELSE
		OPEN p_CURSOR FOR
			SELECT NULL FROM DUAL;
	END IF;
END MARKET_SUBMIT_TRANSACTION_LIST;
------------------------------------------------------------------------------------------------------
PROCEDURE UPDATE_TXN_NAME(p_TRANSACTION_ID IN NUMBER, p_OASIS_ID IN VARCHAR2) AS

	v_POS NUMBER(2);
	v_TXN_NAME INTERCHANGE_TRANSACTION.TRANSACTION_NAME%TYPE;


BEGIN

	SELECT TRANSACTION_NAME INTO v_TXN_NAME FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_TRANSACTION_ID;

	--GET THE LAST OCCURRENCE OF ':'
	v_POS := INSTR(v_TXN_NAME, ':', -1);

	UPDATE INTERCHANGE_TRANSACTION
			SET TRANSACTION_NAME = SUBSTR(v_TXN_NAME,1,v_POS) || p_OASIS_ID
			WHERE TRANSACTION_ID = p_TRANSACTION_ID;

END UPDATE_TXN_NAME;
------------------------------------------------------------------------------------------------------
FUNCTION GET_PROVIDER_IDENT(p_PROVIDER_ID IN NUMBER) RETURN VARCHAR2 IS
	v_PROVIDER_IDENT VARCHAR2(32);
BEGIN

	SELECT TP_NAME
	  INTO v_PROVIDER_IDENT
	  FROM TRANSMISSION_PROVIDER
	 WHERE TP_ID = p_PROVIDER_ID;

	RETURN v_PROVIDER_IDENT;

END GET_PROVIDER_IDENT;
-------------------------------------------------------------------------------------------------------
FUNCTION GET_DUNS(P_ENTITY_CODE IN VARCHAR2) RETURN NUMBER IS
	v_DUNS TSIN_ENTITY_REGISTRY.DUNS%TYPE;
BEGIN

	SELECT DUNS
	  INTO v_DUNS
	  FROM TSIN_ENTITY_REGISTRY
	 WHERE ENTITY_CODE = P_ENTITY_CODE;

	RETURN v_DUNS;

END GET_DUNS;
-------------------------------------------------------------------------------------------------------
FUNCTION GET_OASIS_NODE_IDENT(p_PROVIDER_ID IN NUMBER) RETURN VARCHAR2 IS
	v_OASIS_ID NUMBER(9);
BEGIN

	SELECT OASIS_NODE_ID
	  INTO v_OASIS_ID
	  FROM TRANSMISSION_PROVIDER
	 WHERE TP_ID = p_PROVIDER_ID;

	RETURN v_OASIS_ID;

END GET_OASIS_NODE_IDENT;
-----------------------------------------------------------------------------------------------------
FUNCTION GET_OASIS_URL(p_OASIS_ID IN NUMBER) RETURN VARCHAR2 IS
	v_OASIS_URL VARCHAR2(150);
BEGIN

	SELECT URL
	  INTO v_OASIS_URL
	  FROM OASIS_NODE
	 WHERE OASIS_NODE_ID = p_OASIS_ID;

	RETURN v_OASIS_URL;

END GET_OASIS_URL;
---------------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_TXN_EXT_IDENT(p_EXTERNAL_IDENT IN VARCHAR2) RETURN NUMBER IS
	v_TRANSACTION_ID NUMBER(9);

BEGIN

	SELECT A.TRANSACTION_ID
		INTO v_TRANSACTION_ID
		FROM INTERCHANGE_TRANSACTION A
		WHERE TRANSACTION_IDENTIFIER = p_EXTERNAL_IDENT;

	RETURN v_TRANSACTION_ID;

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		v_TRANSACTION_ID := GA.NO_DATA_FOUND;
		RETURN v_TRANSACTION_ID;

END ID_FOR_TXN_EXT_IDENT;
---------------------------------------------------------------------------------------------------------
FUNCTION ID_FOR_PORPOD(p_PORPOD_IDENT        IN VARCHAR2,
					   p_TP_NAME             IN VARCHAR2,
					   p_CREATE_IF_NOT_FOUND IN BOOLEAN) RETURN NUMBER IS

	v_TSIN_PORPOD_ID NUMBER(9);
	v_PORPOD_ID NUMBER(9);

BEGIN

	--Get the POR/POD ID from TSIN database
	SELECT T.PORPODPOINTID
	  INTO v_TSIN_PORPOD_ID
	  FROM TSIN_POR_POD_POINT T, TSIN_TP_REGISTRY D
	 WHERE T.POINTNAME = p_PORPOD_IDENT
	   AND T.TP_ENTITY_ID = D.TAGGING_ENTITY_ID
	   AND D.TAG_CODE = p_TP_NAME;

	ID.ID_FOR_SERVICE_POINT_XID(p_EXTERNAL_IDENTIFIER => v_TSIN_PORPOD_ID,
								p_CREATE_IF_NOT_FOUND => p_CREATE_IF_NOT_FOUND,
								p_SERVICE_POINT_ID    =>v_PORPOD_ID);

	RETURN v_PORPOD_ID;

END ID_FOR_PORPOD;
---------------------------------------------------------------------------------------------------------
FUNCTION GET_TXN_ENTITY_ATTRIBUTE_VAL
	(
	p_TRANSACTION_ID IN NUMBER,
	p_ATTRIBUTE_NAME IN VARCHAR2,
	p_DATE IN DATE
	) RETURN VARCHAR2 IS
	v_VAL TEMPORAL_ENTITY_ATTRIBUTE.ATTRIBUTE_VAL%TYPE;
BEGIN
	SELECT ATTRIBUTE_VAL
	INTO v_VAL
	FROM ENTITY_ATTRIBUTE A, TEMPORAL_ENTITY_ATTRIBUTE B
	WHERE A.ENTITY_DOMAIN_ID = -200
		AND A.ATTRIBUTE_NAME = p_ATTRIBUTE_NAME
		AND B.OWNER_ENTITY_ID = p_TRANSACTION_ID
		AND B.ATTRIBUTE_ID = A.ATTRIBUTE_ID
		AND p_DATE BETWEEN B.BEGIN_DATE AND NVL(B.END_DATE, p_DATE);

	RETURN v_VAL;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END GET_TXN_ENTITY_ATTRIBUTE_VAL;
---------------------------------------------------------------------------------------------------------
FUNCTION GET_PSE_IDENT
	(
	p_PSE_ID IN NUMBER
	) RETURN VARCHAR2 IS
	v_IDENT VARCHAR2(128);
BEGIN
	SELECT PSE_EXTERNAL_IDENTIFIER INTO v_IDENT FROM PURCHASING_SELLING_ENTITY WHERE PSE_ID = p_PSE_ID;
	RETURN v_IDENT;
END GET_PSE_IDENT;
---------------------------------------------------------------------------------------------------------
FUNCTION GET_SERVICE_POINT_IDENT
	(
	p_SERVICE_POINT_ID IN NUMBER
	) RETURN VARCHAR2 IS
	v_IDENT VARCHAR2(128);
BEGIN
	SELECT EXTERNAL_IDENTIFIER INTO v_IDENT FROM SERVICE_POINT WHERE SERVICE_POINT_ID = p_SERVICE_POINT_ID;
	RETURN v_IDENT;
END GET_SERVICE_POINT_IDENT;
---------------------------------------------------------------------------------------------------------
FUNCTION SET_TRANSACTION_STATUS
	(
	p_TRANSACTION_ID IN NUMBER,
	p_TRANSACTION_STATUS IN VARCHAR2
	) RETURN NUMBER IS
	v_IS_ACTIVE NUMBER(1) := 1;
	v_STATUS NUMBER;
BEGIN

	BEGIN
		SELECT TRANSACTION_IS_ACTIVE
		INTO v_IS_ACTIVE
		FROM INTERCHANGE_TRANSACTION_STATUS
		WHERE TRANSACTION_STATUS_NAME = p_TRANSACTION_STATUS;
	EXCEPTION
		WHEN OTHERS THEN
			v_IS_ACTIVE := 1;
	END;

	ITJ.PUT_IT_STATUS(p_TRANSACTION_ID,
					 LOW_DATE,
					 p_TRANSACTION_STATUS,
					 v_IS_ACTIVE,
					 v_STATUS);

	RETURN v_IS_ACTIVE;
END SET_TRANSACTION_STATUS;
---------------------------------------------------------------------------------------------------------
FUNCTION GET_TRANSACTION_STATUS
	(
	p_TRANSACTION_ID IN NUMBER
	) RETURN VARCHAR2 IS
	v_STATUS IT_STATUS.TRANSACTION_STATUS_NAME%TYPE;
BEGIN

	SELECT TRANSACTION_STATUS_NAME
	INTO v_STATUS
	FROM IT_STATUS
	WHERE TRANSACTION_ID = p_TRANSACTION_ID
		AND AS_OF_DATE = (SELECT MAX(AS_OF_DATE) FROM IT_STATUS
						WHERE TRANSACTION_ID = p_TRANSACTION_ID);

	RETURN v_STATUS;
END GET_TRANSACTION_STATUS;
---------------------------------------------------------------------------------------------------------
PROCEDURE CREATE_TXN
	(
	p_TRANSACTION_NAME IN OUT VARCHAR2,
	p_TRANSACTION_IDENT IN VARCHAR2,
	p_DEAL_REF IN OUT VARCHAR2,
	p_SELLER_CODE IN VARCHAR2,
	p_CUSTOMER_CODE IN VARCHAR2,
	p_SOURCE IN VARCHAR2,
	p_SINK IN VARCHAR2,
	p_POD IN VARCHAR2,
	p_POR IN VARCHAR2,
	p_TRANSACTION_INTERVAL IN VARCHAR2,
	p_TP_CODE IN VARCHAR2,
	p_TP_ID	IN NUMBER,
	p_START_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TRANSACTION_ID OUT NUMBER,
	p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER
	) AS

	v_TRANSACTION         INTERCHANGE_TRANSACTION%ROWTYPE;
	v_TRANSACTION_TYPE    INTERCHANGE_TRANSACTION.TRANSACTION_TYPE%TYPE := 'Purchase';
	v_AGREEMENT_TYPE      INTERCHANGE_TRANSACTION.AGREEMENT_TYPE%TYPE := 'OASIS';
	v_TRAIT_CATEGORY	  INTERCHANGE_TRANSACTION.TRAIT_CATEGORY%TYPE :='OASIS';

BEGIN

	v_TRANSACTION.SELLER_ID            := MM_OASIS_UTIL.ID_FOR_PSE_IDENT(p_SELLER_CODE, TRUE);
	v_TRANSACTION.PURCHASER_ID         := MM_OASIS_UTIL.ID_FOR_PSE_IDENT(p_CUSTOMER_CODE, TRUE);


	--CREATE THE TRANSACTION
	v_TRANSACTION.TRANSACTION_NAME     := p_TRANSACTION_NAME;
	v_TRANSACTION.TRANSACTION_ALIAS    := p_DEAL_REF;
	v_TRANSACTION.TRANSACTION_DESC     := 'Generated by Market Manager';
	v_TRANSACTION.TRANSACTION_IDENTIFIER := p_TRANSACTION_IDENT;
	v_TRANSACTION.TRANSACTION_TYPE     := v_TRANSACTION_TYPE;
	v_TRANSACTION.TRANSACTION_INTERVAL := 'Hour';
	v_TRANSACTION.EXTERNAL_INTERVAL    := p_TRANSACTION_INTERVAL;

	v_TRANSACTION.TRANSACTION_ID       := 0;
	v_TRANSACTION.CONTRACT_ID		   := 0;
	v_TRANSACTION.IS_BID_OFFER         := 1;
	v_TRANSACTION.AGREEMENT_TYPE       := v_AGREEMENT_TYPE;
	v_TRANSACTION.IS_DISPATCHABLE      := 1;

	ID.ID_FOR_COMMODITY('Transmission', TRUE, v_TRANSACTION.COMMODITY_ID);
	ID.ID_FOR_SC('OASIS',TRUE,v_TRANSACTION.SC_ID);

	--Check the TSIN tables for the related ids
	--Update Service_Point.External_Identifier with TSIN ids
	/*v_TRANSACTION.POR_ID := ID_FOR_PORPOD(p_POR, p_TP_CODE,TRUE);
	v_TRANSACTION.POD_ID := ID_FOR_PORPOD(p_POD, p_TP_CODE,TRUE);*/
	ID.ID_FOR_SERVICE_POINT_XID(p_POR,TRUE, v_TRANSACTION.POR_ID);
	ID.ID_FOR_SERVICE_POINT_XID(p_POD,TRUE,v_TRANSACTION.POD_ID);

	--Update the Service_Point table with Source and Sink
	--if they don't exist.
	ID.ID_FOR_SERVICE_POINT_XID(p_SOURCE,TRUE, v_TRANSACTION.SOURCE_ID);
	ID.ID_FOR_SERVICE_POINT_XID(p_SINK,TRUE,v_TRANSACTION.SINK_ID);

	v_TRANSACTION.BEGIN_DATE := p_START_DATE;
	v_TRANSACTION.END_DATE := p_END_DATE;
	v_TRANSACTION.TP_ID := p_TP_ID;
	v_TRANSACTION.TRAIT_CATEGORY := v_TRAIT_CATEGORY;

	p_LOGGER.LOG_INFO('Attempting to create the following OASIS transaction. ' || CHR(13)
	|| 'Name: ' || p_TRANSACTION_NAME
	|| ', Alias: ' || p_DEAL_REF
	|| ', Identifier: ' || p_TRANSACTION_IDENT
	|| ', Type: ' || v_TRANSACTION_TYPE
	|| ', TP: ' || p_TP_ID
	|| ', Source: ' || v_TRANSACTION.SOURCE_ID
	|| ', Sink: ' || v_TRANSACTION.SINK_ID);

	MM_UTIL.PUT_TRANSACTION(p_TRANSACTION_ID,
							v_TRANSACTION,
							GA.INTERNAL_STATE,
							'Active');
	--COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		p_LOGGER.LOG_ERROR('Failed to create an OASIS transaction: ' || SQLERRM || CHR(13)
		|| 'Transaction attributes: Name: ' || p_TRANSACTION_NAME
		|| ', Alias: ' || p_DEAL_REF
		|| ', Identifier: ' || p_TRANSACTION_IDENT
		|| ', Type: ' || v_TRANSACTION_TYPE
		|| ', TP: ' || p_TP_ID
		|| ', Source: ' || v_TRANSACTION.SOURCE_ID
		|| ', Sink: ' || v_TRANSACTION.SINK_ID
		|| SQLERRM);
		RAISE;
END CREATE_TXN;
---------------------------------------------------------------------------------------------------------
PROCEDURE UPDATE_IT_SCHEDULE(p_DATE_INCREMENT    IN VARCHAR2,
							 p_TRANSACTION_ID    IN NUMBER,
							 p_SCHEDULE_DATE     IN DATE,
							 p_SCHEDULE_END_DATE IN DATE,
							 p_AMOUNT            IN NUMBER) AS

	v_SCHEDULE_DATE DATE := p_SCHEDULE_DATE;
	v_STATUS NUMBER;
BEGIN

	WHILE v_SCHEDULE_DATE <= p_SCHEDULE_END_DATE LOOP
		ITJ.PUT_IT_SCHEDULE(p_TRANSACTION_ID,
						   g_SCHEDULE_TYPE,
						   GA.INTERNAL_STATE,
						   v_SCHEDULE_DATE,
						   LOW_DATE(),
						   p_AMOUNT,
						   NULL,
						   v_STATUS);

		v_SCHEDULE_DATE := ADVANCE_DATE(V_SCHEDULE_DATE, p_DATE_INCREMENT);

	END LOOP;

END UPDATE_IT_SCHEDULE;
---------------------------------------------------------------------------------------------------------
FUNCTION GET_NOTIFICATION(p_STATUS IN VARCHAR2) RETURN BOOLEAN IS

	v_NOTIFICATION_STATUSES SYSTEM_DICTIONARY.VALUE%TYPE;
	v_POSITION NUMBER(2);
	v_RETURN_VAL BOOLEAN :=FALSE;

BEGIN

	SELECT VALUE
	  INTO v_NOTIFICATION_STATUSES
	  FROM SYSTEM_DICTIONARY
	  WHERE UPPER(SETTING_NAME)='STATUS NOTIFICATION';

	IF v_NOTIFICATION_STATUSES = '<ALL>' THEN
		v_RETURN_VAL := TRUE;
	ELSIF v_NOTIFICATION_STATUSES IS NOT NULL THEN
		v_POSITION := INSTR(v_NOTIFICATION_STATUSES,p_STATUS,1);

		IF v_POSITION >0 THEN
			v_RETURN_VAL:=TRUE;
		END IF;
	END IF;

	RETURN v_RETURN_VAL;



END GET_NOTIFICATION;
---------------------------------------------------------------------------------------------------------
PROCEDURE PUT_TRANSSTATUS_RESULTS(p_RECORDS        IN MEX_OASIS_TRANS,
								  p_SCHEDULE_STATE IN NUMBER,
								  p_TP_ID          IN NUMBER,
								  p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER,
								  p_CREATE_ALERT   IN BOOLEAN DEFAULT FALSE) AS

	v_TRANS          MEX_OASIS_TRANS_DATA_TBL;
	v_TRANS_DATA     MEX_OASIS_TRANS_DATA;
	v_TRANS_PROF     MEX_OASIS_TRANS_PROFILE_TBL;
	v_TRANS_PROF_DAT MEX_OASIS_TRANS_PROFILE;

	v_TP_CODE       VARCHAR2(4);
	v_SELLER_CODE   VARCHAR2(6);
	v_SELLER_DUNS   NUMBER(9);
	v_CUSTOMER_CODE VARCHAR2(6);
	v_CUSTOMER_DUNS NUMBER(9);
	v_SOURCE        VARCHAR2(50);
	v_SINK          VARCHAR2(50);
	v_POD           VARCHAR2(12);
	v_POR           VARCHAR2(12);
	v_PATH          VARCHAR2(50);
	v_INTERVAL      VARCHAR2(8);

	v_PRECONFIRMED       VARCHAR2(3);
	v_TRANSACTION_STATUS VARCHAR2(25);
	v_OASIS_ID           VARCHAR2(12);

	v_TRANSACTION_ID           NUMBER(9);
	v_TRANSACTION_NAME         VARCHAR2(64);
	v_DEAL_REF                 VARCHAR2(32);
	v_TS_CLASS_ATTRIBUTE_ID    NUMBER(9);
	v_TS_TYPE_ATTRIBUTE_ID     NUMBER(9);
	v_TS_PERIOD_ATTRIBUTE_ID   NUMBER(9);
	v_TS_WINDOW_ATTRIBUTE_ID   NUMBER(9);
	v_RELATED_REF_ATTRIBUTE_ID NUMBER(9);
	v_TS_SUBCLASS_ATTRIBUTE_ID  NUMBER(9);

	v_START_DATE DATE;
	v_END_DATE DATE;
	v_TRUNC_START_DATE DATE;
	v_TRUNC_END_DATE DATE;
	v_HOUR_START_DATE DATE;
	v_HOUR_END_DATE DATE;

	v_DATE_INCREMENT VARCHAR2(16);
	v_OLD_STATUS     VARCHAR2(32);
	v_NEED_TO_CREATE_TXN BOOLEAN := FALSE;
	v_IS_FIRST_LOOP_FOR_TXN BOOLEAN := TRUE;
	v_TXN_IS_ACTIVE NUMBER(1);

	i BINARY_INTEGER;
	j BINARY_INTEGER;
	v_STATUS NUMBER;

	PROCEDURE UPDATE_TRAIT
		(
		p_TRAIT_GROUP_ID IN NUMBER,
		p_TRAIT_VAL IN VARCHAR2
		) IS
	BEGIN
		IF NOT p_TRAIT_VAL IS NULL THEN
			TG.PUT_IT_TRAIT_SCHEDULE_SPARSE(v_TRANSACTION_ID,
											p_SCHEDULE_STATE,
											0,
											v_START_DATE,
											v_END_DATE,
											p_TRAIT_GROUP_ID,
											1,
											1,
											p_TRAIT_VAL,
											CUT_TIME_ZONE,
											v_STATUS);
		END IF;
	END UPDATE_TRAIT;

	PROCEDURE UPDATE_ATTRIBUTE
		(
		p_ATTRIBUTE_ID IN NUMBER,
		p_ATTRIBUTE_VAL IN VARCHAR2
		) AS
	BEGIN
		IF NOT v_TRANSACTION_ID IS NULL AND NOT p_ATTRIBUTE_VAL IS NULL THEN
			MM_OASIS_UTIL.PUT_ENTITY_ATTRIBUTES(v_TRANSACTION_ID,
												p_ATTRIBUTE_ID,
												p_ATTRIBUTE_VAL,
												v_TRUNC_START_DATE,
												v_STATUS);
		END IF;
	END UPDATE_ATTRIBUTE;


BEGIN

	--Get the useful information from the header.
	v_TP_CODE := p_RECORDS.PRIMARY_PROVIDER_CODE;
	--v_TP_DUNS := p_RECORDS.PRIMARY_PROVIDER_DUNS;
	v_TRANS := p_RECORDS.DATA_TABLE;

	MM_OASIS_UTIL.GET_ID_FOR_ENTITY_ATTRIBUTE(MM_OASIS_UTIL.g_EA_TS_CLASS,
												  v_TS_CLASS_ATTRIBUTE_ID);
	MM_OASIS_UTIL.GET_ID_FOR_ENTITY_ATTRIBUTE(MM_OASIS_UTIL.g_EA_TS_TYPE,
												  v_TS_TYPE_ATTRIBUTE_ID);
	MM_OASIS_UTIL.GET_ID_FOR_ENTITY_ATTRIBUTE(MM_OASIS_UTIL.g_EA_TS_PERIOD,
												  v_TS_PERIOD_ATTRIBUTE_ID);
	MM_OASIS_UTIL.GET_ID_FOR_ENTITY_ATTRIBUTE(MM_OASIS_UTIL.g_EA_TS_WINDOW,
												  v_TS_WINDOW_ATTRIBUTE_ID);
	MM_OASIS_UTIL.GET_ID_FOR_ENTITY_ATTRIBUTE(MM_OASIS_UTIL.g_EA_RELATED_REF,
												  v_RELATED_REF_ATTRIBUTE_ID);
	MM_OASIS_UTIL.GET_ID_FOR_ENTITY_ATTRIBUTE(MM_OASIS_UTIL.g_EA_TS_SUBCLASS,
												  v_TS_SUBCLASS_ATTRIBUTE_ID);

	--Loop over each transmission transaction
	FOR i IN v_TRANS.FIRST .. v_TRANS.LAST LOOP
		v_TRANS_DATA := v_TRANS(i);

		v_SELLER_CODE   := v_TRANS_DATA.SELLER_CODE;
		v_SELLER_DUNS   := v_TRANS_DATA.SELLER_DUNS;
		v_CUSTOMER_CODE := v_TRANS_DATA.CUSTOMER_CODE;
		v_CUSTOMER_DUNS := v_TRANS_DATA.CUSTOMER_DUNS;

		v_SOURCE             := v_TRANS_DATA.SOURCE;
		v_SINK               := v_TRANS_DATA.SINK;
		v_TRANSACTION_STATUS := NVL(v_TRANS_DATA.STATUS, 'QUEUED');
		v_INTERVAL           := v_TRANS_DATA.SERVICE_INCREMENT;
		v_PRECONFIRMED       := v_TRANS_DATA.PRECONFIRMED;

		v_TRANS_PROF := v_TRANS_DATA.PROFILE_TABLE;

		--Get the OASIS ID from the first record in the profile table.
		v_OASIS_ID := v_TRANS_PROF(v_TRANS_PROF.FIRST).ASSIGNMENT_REF;

		--Check if there is a transaction created for this transmision request
		v_NEED_TO_CREATE_TXN := FALSE;
		v_TRANSACTION_ID := ID_FOR_TXN_EXT_IDENT(v_OASIS_ID);
		IF v_TRANSACTION_ID = GA.NO_DATA_FOUND THEN
			--Check the status of the transmission request
			--we don't import invalid transactions that don't already exist in MM
			--INVALID status means the request has been rejected by the OASIS
			IF v_TRANSACTION_STATUS != g_INVALID_STATUS THEN
				v_NEED_TO_CREATE_TXN := TRUE;
			END IF;
		END IF;

		CASE v_INTERVAL
			WHEN 'HOURLY' THEN v_DATE_INCREMENT := 'HOUR';
			WHEN 'DAILY' THEN v_DATE_INCREMENT := 'DAY';
			WHEN 'WEEKLY' THEN v_DATE_INCREMENT := 'WEEK';
			WHEN 'MONTHLY' THEN v_DATE_INCREMENT := 'MONTH';
			WHEN 'YEARLY' THEN v_DATE_INCREMENT := 'YEAR';
			ELSE v_DATE_INCREMENT := NULL;
		END CASE;

		v_IS_FIRST_LOOP_FOR_TXN := TRUE;
		FOR j IN v_TRANS_PROF.FIRST .. v_TRANS_PROF.LAST LOOP
			v_TRANS_PROF_DAT := v_TRANS_PROF(j);
			v_PATH           := v_TRANS_PROF_DAT.PATH_NAME;
			v_POD            := v_TRANS_PROF_DAT.POINT_OF_DELIVERY;
			v_POR            := v_TRANS_PROF_DAT.POINT_OF_RECEIPT;
			v_START_DATE     := v_TRANS_PROF_DAT.START_TIME;
			v_END_DATE       := v_TRANS_PROF_DAT.STOP_TIME;

			IF v_INTERVAL = 'HOURLY' THEN
				v_HOUR_START_DATE := v_START_DATE;
				v_HOUR_END_DATE := v_END_DATE;
				v_TRUNC_START_DATE := TRUNC(v_START_DATE);
				v_TRUNC_END_DATE := TRUNC(v_END_DATE - 1/86400) + 1;
			ELSE
				UT.CUT_DAY_INTERVAL_RANGE(1, v_START_DATE, v_END_DATE, LOCAL_TIME_ZONE, v_HOUR_START_DATE, v_HOUR_END_DATE);
				v_TRUNC_START_DATE := v_START_DATE;
				v_TRUNC_END_DATE := v_END_DATE;
			END IF;

			IF v_NEED_TO_CREATE_TXN THEN
				--Build a temporary name for the transaction
				v_TRANSACTION_NAME := MM_OASIS_UTIL.BUILD_TXN_NAME(p_TP_ID,v_POR,
							v_POD,v_TRANS_DATA.TS_TYPE,v_DATE_INCREMENT);

				--Create an OASIS transaction
				CREATE_TXN(v_TRANSACTION_NAME,
						   v_OASIS_ID,
						   v_DEAL_REF,
						   v_SELLER_CODE,
						   v_CUSTOMER_CODE,
						   v_SOURCE,
						   v_SINK,
						   v_POD,
						   v_POR,
						   v_DATE_INCREMENT,
						   v_TP_CODE,
						   p_TP_ID,
						   v_TRUNC_START_DATE,
						   v_TRUNC_END_DATE,
						   v_TRANSACTION_ID,
						   p_LOGGER);

				--Create Entity Attributes
				p_LOGGER.LOG_INFO ('Create Entity Attributes for ' || v_TRANSACTION_NAME);
				UPDATE_ATTRIBUTE(v_TS_CLASS_ATTRIBUTE_ID,v_TRANS_DATA.TS_CLASS);
				UPDATE_ATTRIBUTE(v_TS_PERIOD_ATTRIBUTE_ID,v_TRANS_DATA.TS_PERIOD);
				UPDATE_ATTRIBUTE(v_TS_TYPE_ATTRIBUTE_ID,v_TRANS_DATA.TS_TYPE);
				UPDATE_ATTRIBUTE(v_TS_WINDOW_ATTRIBUTE_ID,v_TRANS_DATA.TS_WINDOW);
				UPDATE_ATTRIBUTE(v_RELATED_REF_ATTRIBUTE_ID,v_TRANS_DATA.RELATED_REF);
				UPDATE_ATTRIBUTE(v_TS_SUBCLASS_ATTRIBUTE_ID,v_TRANS_DATA.TS_SUBCLASS);

				--All these transactions received in transstatus response have been already submitted
				--therefore update the transaction's name by replacing the temp ident with oasis id OASIS ID
				IF v_TRANSACTION_ID >0 THEN
					p_LOGGER.LOG_INFO ('Update the transaction name for ' || v_TRANSACTION_NAME || ' (OASIS ID: ' || v_OASIS_ID || ')');
					UPDATE_TXN_NAME(v_TRANSACTION_ID, v_OASIS_ID);
				END IF;

				v_NEED_TO_CREATE_TXN := FALSE;
			END IF;

			-- Do some things only once for a transaction.
			IF v_IS_FIRST_LOOP_FOR_TXN THEN
				--Do it only for transactions with valid IDs
				IF v_TRANSACTION_ID > 0 THEN
					--Transaction exist; update the transaction status
					--Get the original status of the transaction
					p_LOGGER.LOG_INFO ('Update the transaction status from ' || v_OLD_STATUS || ' to ' || v_TRANSACTION_STATUS);
					v_OLD_STATUS    := GET_TRANSACTION_STATUS(v_TRANSACTION_ID);
					v_TXN_IS_ACTIVE := SET_TRANSACTION_STATUS(v_TRANSACTION_ID,
															  v_TRANSACTION_STATUS);

					--Send an Alarm Notification to the user
					IF p_CREATE_ALERT AND v_OLD_STATUS <> v_TRANSACTION_STATUS THEN
						p_LOGGER.LOG_INFO ('Send an Alarm Notification to the user: Transaction ' || v_TRANSACTION_NAME || ' is now ' || v_TRANSACTION_STATUS);
						--Get the Transaction name because we may not have it at theis point.
						SELECT TRANSACTION_NAME INTO v_TRANSACTION_NAME FROM INTERCHANGE_TRANSACTION
							WHERE TRANSACTION_ID = v_TRANSACTION_ID;

						--LD -- I commented out the Alerts during the migration to v4.1 because
						--ALERTS.SEND_ALERT is depricated in v4.1 and the new method ALERTS.TRIGGER_ALERTS
						--needs more parameters TRIGGER_VALUE, TRIGER_LEVEL, etc..
						--CHECK IF v_TRANSACTION_STATUS IS A STATUS THAT GETS A NOTIFICATION
    					/*IF GET_NOTIFICATION(v_TRANSACTION_STATUS) THEN
							ALERTS.SEND_ALERT(g_STATUS_ALERT_NAME,'Transaction ' || v_TRANSACTION_NAME || ' is now ' || v_TRANSACTION_STATUS,v_STATUS,MM_UTIL.g_ALERT_PRIORITY);
    					END IF;*/

					END IF;

	--MMW -- I think the OASIS will mark it as confirmed.  I don't think we should do this step.
					--Update the status to CONFIRMED if it is preconfirmed and accepted.
	-- 				IF UPPER(v_PRECONFIRMED) = 'YES' AND v_TRANSACTION_STATUS = g_ACCEPTED_STATUS THEN
	-- 					IT.PUT_IT_STATUS(v_TRANSACTION_ID, LOW_DATE, g_CONFIRMED_STATUS, v_TXN_IS_ACTIVE, p_STATUS);
	-- 					v_TRANSACTION_STATUS := g_CONFIRMED_STATUS;
	-- 				END IF;

					v_IS_FIRST_LOOP_FOR_TXN := FALSE;
				END IF; --TRANSACTION_ID > 0
			END IF; --IS_FIRST_LOOP_FOR_TXN

			--Add this set of traits for this segment in the profile.
			UPDATE_TRAIT(MM_OASIS_UTIL.g_TG_OFFER_PRICE, v_TRANS_PROF_DAT.OFFER_PRICE);
			UPDATE_TRAIT(MM_OASIS_UTIL.g_TG_OFFER_PRICE, v_TRANS_PROF_DAT.BID_PRICE); --OVERWRITE WITH BID PRICE IF IT EXISTS(??)
			UPDATE_TRAIT(MM_OASIS_UTIL.g_TG_CAP_REQUESTED, v_TRANS_PROF_DAT.CAPACITY_REQUESTED);
			UPDATE_TRAIT(MM_OASIS_UTIL.g_TG_CAP_GRANTED, v_TRANS_PROF_DAT.CAPACITY_GRANTED);
			UPDATE_TRAIT(MM_OASIS_UTIL.g_TG_PRECONFIRMED, v_TRANS_DATA.PRECONFIRMED);
			UPDATE_TRAIT(MM_OASIS_UTIL.g_TG_STATUS_COMMENTS, v_TRANS_DATA.STATUS_COMMENTS);
			UPDATE_TRAIT(MM_OASIS_UTIL.g_TG_CUST_COMMENTS, v_TRANS_PROF_DAT.CUSTOMER_COMMENTS);
			UPDATE_TRAIT(MM_OASIS_UTIL.g_TG_SELLER_COMMENTS, v_TRANS_DATA.SELLER_COMMENTS);

			--If this is a newly confirmed transaction, update its schedule in IT_SCHEDULE.
			IF v_TRANSACTION_STATUS = g_CONFIRMED_STATUS AND NOT v_OLD_STATUS = g_CONFIRMED_STATUS THEN
				UPDATE_IT_SCHEDULE('Hour', v_TRANSACTION_ID, v_HOUR_START_DATE, v_HOUR_END_DATE,
						TO_NUMBER(v_TRANS_PROF_DAT.CAPACITY_GRANTED));
			END IF;

			--If this is the last Profile, update the Transaction's end date.
			IF j = v_TRANS_PROF.LAST THEN
				UPDATE INTERCHANGE_TRANSACTION
				SET END_DATE = v_TRUNC_END_DATE
				WHERE TRANSACTION_ID = v_TRANSACTION_ID;
			END IF;

		END LOOP; -- OVER PROFILE SEGMENTS

		-- Commit for each Transaction.
		COMMIT;

	END LOOP;-- OVER TRANSACTIONS

END PUT_TRANSSTATUS_RESULTS;
------------------------------------------------------------------------------------------------------------------
PROCEDURE QUERY_STATUS
(
    p_PROVIDER_ID    IN NUMBER,
    p_BEGIN_DATE     IN DATE,
    p_END_DATE       IN DATE,
    p_OASIS_STATUS   IN VARCHAR2, --PASS NULL TO GET "ALL"
    p_CUSTOMER_LIST  IN VARCHAR2, --PASS NULL TO GET "ALL"
    p_ASSIGNMENT_REF IN VARCHAR2, --PASS NULL TO GET "ALL"
    p_CRED           IN mex_credentials,
    p_LOGGER         IN OUT NOCOPY MM_LOGGER_ADAPTER,
	p_STATUS         OUT NUMBER
) AS

    v_RECORDS       MEX_OASIS_TRANS;
    v_OASIS_URL     OASIS_NODE.URL%TYPE;
    v_OASIS_NODE_ID TRANSMISSION_PROVIDER.OASIS_NODE_ID%TYPE;
    v_ISO_ACCT_NAME VARCHAR2(32);
    v_PROVIDER_CODE TRANSMISSION_PROVIDER.TP_NAME%TYPE;

BEGIN

    --Each OASIS Node has its own credentials
    v_PROVIDER_CODE := GET_PROVIDER_IDENT(p_PROVIDER_ID);
    v_OASIS_NODE_ID := GET_OASIS_NODE_IDENT(p_PROVIDER_ID);
    v_OASIS_URL     := GET_OASIS_URL(v_OASIS_NODE_ID);

        --For current TP, download the status of all transmission transactions
        MEX_OASIS.FETCH_TRANSSTATUS(p_CRED,
                                    v_PROVIDER_CODE,
                                    v_OASIS_URL,
                                    p_BEGIN_DATE,
                                    p_END_DATE,
                                    v_RECORDS,
                                    p_LOGGER,
                                    p_OASIS_STATUS,
                                    p_CUSTOMER_LIST,
                                    p_ASSIGNMENT_REF,
									p_STATUS);

        ERRS.VALIDATE_STATUS('MEX_OASIS.FETCH_TRANSSTATUS', p_STATUS);
        PUT_TRANSSTATUS_RESULTS(v_RECORDS,
                                GA.EXTERNAL_STATE,
                                p_PROVIDER_ID,
                                p_LOGGER);

END QUERY_STATUS;
------------------------------------------------------------------------------------------------------------------
PROCEDURE IMPORT_OASIS_LIST
(
    p_PROVIDER_ID IN NUMBER,
    p_RECORDS     IN MEX_OASIS_LIST_RES_TBL,
    p_LOGGER      IN OUT NOCOPY MM_LOGGER_ADAPTER
) AS

    v_DATA MEX_OASIS_LIST_RES;
BEGIN
    -- save the content of the list into the TP_OASIS_LIST_RESULT
	p_LOGGER.LOG_INFO ('Attempting to store values in OASIS_LIST_RESULT');

    FOR I IN p_RECORDS.FIRST .. p_RECORDS.LAST LOOP
        v_DATA := p_RECORDS(I);

        --try update
        UPDATE TP_OASIS_LIST_RESULT
        SET OASIS_LIST_ITEM_DESC = v_DATA.LIST_ITEM_DESC
        WHERE TP_ID = p_PROVIDER_ID
        AND UPPER(OASIS_LIST_NAME) = UPPER(v_DATA.LIST_NAME)
        AND UPPER(OASIS_LIST_ITEM) = UPPER(v_DATA.LIST_ITEM);

        IF SQL%NOTFOUND THEN
            INSERT INTO TP_OASIS_LIST_RESULT
                (TP_ID,
                 OASIS_LIST_NAME,
                 OASIS_LIST_ITEM,
                 OASIS_LIST_ITEM_DESC,
                 IS_APPLICABLE,
                 ENTRY_DATE)
            VALUES
                (p_PROVIDER_ID,
                 UPPER(v_DATA.LIST_NAME),
                 UPPER(v_DATA.LIST_ITEM),
                 v_DATA.LIST_ITEM_DESC,
                 1,
                 SYSDATE);
        END IF;

    END LOOP;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
		ERRS.LOG_AND_RAISE('Data => ' || v_DATA.LIST_NAME || ',' || v_DATA.LIST_ITEM || ',' || v_DATA.LIST_ITEM_DESC);

END IMPORT_OASIS_LIST;
------------------------------------------------------------------------------------------------------------------
PROCEDURE QUERY_LIST
(
    p_PROVIDER_ID IN NUMBER,
    p_CRED        IN MEX_CREDENTIALS,
    p_LOGGER      IN OUT NOCOPY MM_LOGGER_ADAPTER,
	p_STATUS      OUT NUMBER
) AS

    --v_CRED          MEX_CREDENTIALS;
    v_OASIS_URL     OASIS_NODE.URL%TYPE;
    v_OASIS_NODE_ID TRANSMISSION_PROVIDER.OASIS_NODE_ID%TYPE;
    v_PROVIDER_CODE TRANSMISSION_PROVIDER.TP_NAME%TYPE;
    v_PROVIDER_DUNS TSIN_ENTITY_REGISTRY.DUNS%TYPE;
    v_RECORDS       MEX_OASIS_LIST_RES_TBL;

BEGIN

    v_RECORDS := MEX_OASIS_LIST_RES_TBL();

    --Each OASIS Node has its own credentials
    v_PROVIDER_CODE := GET_PROVIDER_IDENT(p_PROVIDER_ID);
    v_OASIS_NODE_ID := GET_OASIS_NODE_IDENT(p_PROVIDER_ID);
    v_OASIS_URL     := GET_OASIS_URL(v_OASIS_NODE_ID);
    v_PROVIDER_DUNS := GET_DUNS(v_PROVIDER_CODE);

    /*WHILE TRUE LOOP
        --download the list. The list is TP specific
        IF p_CREDS IS NOT NULL THEN
            EXIT WHEN NOT p_CREDS.HAS_NEXT;
            v_CRED := p_CREDS.GET_NEXT;
        ELSE
            v_CRED := NULL;
        END IF;*/

        MEX_OASIS.FETCH_OASIS_LIST(p_CRED,
                                   v_PROVIDER_CODE,
                                   v_PROVIDER_DUNS,
                                   v_OASIS_URL,
                                   v_RECORDS,
                                   p_LOGGER,
								   p_STATUS);

		ERRS.VALIDATE_STATUS('MEX_OASIS.FETCH_OASIS_LIST', p_STATUS);
        	IMPORT_OASIS_LIST(p_PROVIDER_ID, v_RECORDS, p_LOGGER);


    --END LOOP;

END QUERY_LIST;
  ------------------------------------------------------------------------------------------------------------------
PROCEDURE SUBMIT_TRANSREQUEST
	(
	p_TRANSACTION 	IN INTERCHANGE_TRANSACTION%ROWTYPE,
	p_OASIS_URL   	IN OASIS_NODE.URL%TYPE,
	p_CRED        	IN MEX_CREDENTIALS,
	p_TRANS       	IN OUT MEX_OASIS_TRANS,
	p_LOGGER      	IN OUT NOCOPY MM_LOGGER_ADAPTER,
	p_ERROR_MESSAGE OUT VARCHAR2,
	p_STATUS        OUT NUMBER
	) AS

	v_DATA_TBL 		MEX_OASIS_TRANS_DATA_TBL := MEX_OASIS_TRANS_DATA_TBL();
	v_DATA 			MEX_OASIS_TRANS_DATA;
	v_PROFILE_TBL 	MEX_OASIS_TRANS_PROFILE_TBL := MEX_OASIS_TRANS_PROFILE_TBL();
	v_PROFILE 		MEX_OASIS_TRANS_PROFILE;

	v_STATUS 		NUMBER;
	v_FIRST 		BOOLEAN;
	v_TEMP_MESSAGE 	VARCHAR2(256);

	CURSOR c_SEGMENT IS
		SELECT SCHEDULE_DATE, SCHEDULE_END_DATE,
			MAX(CASE WHEN TRAIT_GROUP_ID = MM_OASIS_UTIL.g_TG_CAP_REQUESTED THEN TRAIT_VAL ELSE NULL END) "CAP_REQUESTED",
			MAX(CASE WHEN TRAIT_GROUP_ID = MM_OASIS_UTIL.g_TG_PRECONFIRMED THEN TRAIT_VAL ELSE NULL END) "PRECONFIRMED",
			MAX(CASE WHEN TRAIT_GROUP_ID = MM_OASIS_UTIL.g_TG_CUST_COMMENTS THEN TRAIT_VAL ELSE NULL END) "CUST_COMMENTS"
		FROM IT_TRAIT_SCHEDULE
		WHERE TRANSACTION_ID = p_TRANSACTION.TRANSACTION_ID
			AND SCHEDULE_STATE = GA.INTERNAL_STATE
			AND STATEMENT_TYPE_ID = 0
		GROUP BY SCHEDULE_DATE, SCHEDULE_END_DATE;
BEGIN

	v_DATA := MEX_OASIS.g_DEFAULT_DATA;
	v_DATA.SERVICE_INCREMENT := CASE UPPER(p_TRANSACTION.EXTERNAL_INTERVAL)
		WHEN 'HOUR' THEN 'HOURLY'
		WHEN 'DAY' THEN 'DAILY'
		WHEN 'WEEK' THEN 'WEEKLY'
		WHEN 'MONTH' THEN 'MONTHLY'
		WHEN 'YEAR' THEN 'YEARLY'
	END;

  	v_DATA.SELLER_CODE := GET_PSE_IDENT(p_TRANSACTION.SELLER_ID);
	v_DATA.SELLER_DUNS := GET_DUNS(v_DATA.SELLER_CODE);
	v_DATA.SOURCE := GET_SERVICE_POINT_IDENT(p_TRANSACTION.SOURCE_ID);
	v_DATA.SINK := GET_SERVICE_POINT_IDENT(p_TRANSACTION.SINK_ID);

	v_DATA.TS_CLASS := GET_TXN_ENTITY_ATTRIBUTE_VAL(p_TRANSACTION.TRANSACTION_ID, g_EA_TS_CLASS, p_TRANSACTION.BEGIN_DATE);
	v_DATA.TS_TYPE := GET_TXN_ENTITY_ATTRIBUTE_VAL(p_TRANSACTION.TRANSACTION_ID, g_EA_TS_TYPE, p_TRANSACTION.BEGIN_DATE);
	v_DATA.TS_PERIOD := GET_TXN_ENTITY_ATTRIBUTE_VAL(p_TRANSACTION.TRANSACTION_ID, g_EA_TS_PERIOD, p_TRANSACTION.BEGIN_DATE);
	v_DATA.TS_WINDOW := GET_TXN_ENTITY_ATTRIBUTE_VAL(p_TRANSACTION.TRANSACTION_ID, g_EA_TS_WINDOW, p_TRANSACTION.BEGIN_DATE);
	v_DATA.TS_SUBCLASS := GET_TXN_ENTITY_ATTRIBUTE_VAL(p_TRANSACTION.TRANSACTION_ID, g_EA_TS_SUBCLASS, p_TRANSACTION.BEGIN_DATE);

	v_DATA.STATUS_NOTIFICATION := GET_DICTIONARY_VALUE('Status Notification URL', 1, 'Market Exchange', 'OASIS');
	v_DATA.DEAL_REF := CASE WHEN p_TRANSACTION.TRANSACTION_ALIAS = '?' THEN NULL ELSE p_TRANSACTION.TRANSACTION_ALIAS END;
	v_DATA.REQUEST_TYPE := 'ORIGINAL';

  	--ADD PROFILE DATA.
	v_FIRST := TRUE;
	FOR v_SEGMENT IN c_SEGMENT LOOP
		v_PROFILE := MEX_OASIS.g_DEFAULT_PROFILE;
		v_PROFILE.START_TIME := v_SEGMENT.SCHEDULE_DATE;
		v_PROFILE.STOP_TIME := v_SEGMENT.SCHEDULE_END_DATE;
		v_PROFILE.POINT_OF_RECEIPT := GET_SERVICE_POINT_IDENT(p_TRANSACTION.POR_ID);
		v_PROFILE.POINT_OF_DELIVERY := GET_SERVICE_POINT_IDENT(p_TRANSACTION.POD_ID);
		v_PROFILE.CAPACITY_REQUESTED := v_SEGMENT.CAP_REQUESTED;
		v_PROFILE.CUSTOMER_COMMENTS := v_SEGMENT.CUST_COMMENTS;
		v_DATA.PRECONFIRMED := v_SEGMENT.PRECONFIRMED;
		IF NOT v_FIRST THEN v_DATA.PROFILE_TABLE.EXTEND(); END IF;
		v_DATA.PROFILE_TABLE(v_DATA.PROFILE_TABLE.LAST) := v_PROFILE;
		v_FIRST := FALSE;
	END LOOP;

	--SUBMIT THE DATA.
	v_DATA_TBL.EXTEND();
	v_DATA_TBL(v_DATA_TBL.FIRST) := v_DATA;
	p_TRANS.DATA_TABLE := v_DATA_TBL;

	MEX_OASIS.SUBMIT_TRANSREQUEST(p_TAB => p_TRANS,
	                              p_CREDENTIALS => p_CRED,
								  p_URL => p_OASIS_URL,
								  p_LOGGER => p_LOGGER,
								  p_STATUS => p_STATUS);

	IF p_STATUS = GA.SUCCESS THEN
		--FIRST UPDATE THE OASIS ID FROM THE RESPONSE.
		v_DATA_TBL := p_TRANS.DATA_TABLE;
		v_DATA := v_DATA_TBL(v_DATA_TBL.FIRST);
		v_PROFILE := v_DATA.PROFILE_TABLE(v_DATA.PROFILE_TABLE.FIRST);
		UPDATE INTERCHANGE_TRANSACTION
			SET TRANSACTION_IDENTIFIER = v_PROFILE.ASSIGNMENT_REF
			WHERE TRANSACTION_ID = p_TRANSACTION.TRANSACTION_ID;

		--DISPLAY A MESSAGE AFTER A SUCCESSFUL TRANSREQUEST THAT
		--INDICATES THE OASIS ID FOR THE TRANSACTION
		p_LOGGER.LOG_INFO('Transmission request ' || p_TRANSACTION.Transaction_Name || ' successfully submitted. Assigned OASIS ID is ' ||  v_PROFILE.ASSIGNMENT_REF);
		v_TEMP_MESSAGE := 'Transmission request ' || p_TRANSACTION.Transaction_Name || ' successfully submitted. Assigned OASIS ID is ' ||  v_PROFILE.ASSIGNMENT_REF;

		--UPDATE ALSO THE TRANSACTION'S NAME BY REPLACING THE TEMP IDENTIFIER WITH OASIS ID
		p_LOGGER.LOG_INFO('Attempting to update transaction' ||'"' || 's name (OASIS ID: ' || v_PROFILE.ASSIGNMENT_REF || ')' );
		UPDATE_TXN_NAME(p_TRANSACTION.TRANSACTION_ID, v_PROFILE.ASSIGNMENT_REF);

		--SAVE THE RESPONSE TO THE EXTERNAL STATE.
		p_LOGGER.LOG_INFO('Save schedules to external state.');
		PUT_TRANSSTATUS_RESULTS(p_TRANS, GA.EXTERNAL_STATE, p_TRANSACTION.TP_ID, p_LOGGER);

		p_ERROR_MESSAGE := v_TEMP_MESSAGE;

	END IF;
EXCEPTION
	WHEN OTHERS THEN
		p_LOGGER.LOG_ERROR('Error in SUBMIT_TRANSREQUEST: ' || SQLERRM);
		RAISE;
END SUBMIT_TRANSREQUEST;
------------------------------------------------------------------------------------------------------------------
PROCEDURE SUBMIT_TRANSCUST
	(
	p_TRANSACTION IN INTERCHANGE_TRANSACTION%ROWTYPE,
	p_OASIS_URL   IN OASIS_NODE.URL%TYPE,
	p_TRANSCUST_STATUS IN VARCHAR2,
	p_CRED        IN OUT MEX_CREDENTIALS,
	p_TRANS       IN OUT MEX_OASIS_TRANS,
	p_LOGGER      IN OUT NOCOPY MM_LOGGER_ADAPTER,
	p_ERROR_MESSAGE OUT VARCHAR2,
	p_STATUS OUT NUMBER
	) AS

	v_DATA_TBL MEX_OASIS_TRANS_DATA_TBL := MEX_OASIS_TRANS_DATA_TBL();
	v_DATA MEX_OASIS_TRANS_DATA;
	v_PROFILE_TBL MEX_OASIS_TRANS_PROFILE_TBL := MEX_OASIS_TRANS_PROFILE_TBL();
	v_PROFILE MEX_OASIS_TRANS_PROFILE;
	v_FIRST BOOLEAN;
	v_TEMP_MESSAGE VARCHAR2(256);

	CURSOR c_SEGMENT IS
		SELECT SCHEDULE_DATE, SCHEDULE_END_DATE,
			MAX(CASE WHEN TRAIT_GROUP_ID = MM_OASIS_UTIL.g_TG_OFFER_PRICE THEN TRAIT_VAL ELSE NULL END) "BID_PRICE",
			MAX(CASE WHEN TRAIT_GROUP_ID = MM_OASIS_UTIL.g_TG_PRECONFIRMED THEN TRAIT_VAL ELSE NULL END) "PRECONFIRMED",
			MAX(CASE WHEN TRAIT_GROUP_ID = MM_OASIS_UTIL.g_TG_CUST_COMMENTS THEN TRAIT_VAL ELSE NULL END) "CUST_COMMENTS",
			MAX(CASE WHEN TRAIT_GROUP_ID = MM_OASIS_UTIL.g_TG_STATUS_COMMENTS THEN TRAIT_VAL ELSE NULL END) "STATUS_COMMENTS"
		FROM IT_TRAIT_SCHEDULE
		WHERE TRANSACTION_ID = p_TRANSACTION.TRANSACTION_ID
			AND SCHEDULE_STATE = GA.INTERNAL_STATE
			AND STATEMENT_TYPE_ID = 0
		GROUP BY SCHEDULE_DATE, SCHEDULE_END_DATE;
BEGIN

  	v_DATA := MEX_OASIS.g_DEFAULT_DATA;
	v_DATA.DEAL_REF := p_TRANSACTION.TRANSACTION_ALIAS;
	v_DATA.STATUS := p_TRANSCUST_STATUS;

  	--ADD PROFILE DATA.
	v_FIRST := TRUE;
	FOR v_SEGMENT IN c_SEGMENT LOOP
		v_PROFILE := MEX_OASIS.g_DEFAULT_PROFILE;
		v_PROFILE.ASSIGNMENT_REF := p_TRANSACTION.TRANSACTION_IDENTIFIER;
		v_PROFILE.START_TIME := v_SEGMENT.SCHEDULE_DATE;
		v_PROFILE.STOP_TIME := v_SEGMENT.SCHEDULE_END_DATE;
		v_PROFILE.BID_PRICE := v_SEGMENT.BID_PRICE;
		v_PROFILE.CUSTOMER_COMMENTS := v_SEGMENT.CUST_COMMENTS;
		v_DATA.PRECONFIRMED := v_SEGMENT.PRECONFIRMED;
		v_DATA.STATUS_COMMENTS := v_SEGMENT.STATUS_COMMENTS;
		IF NOT v_FIRST THEN v_DATA.PROFILE_TABLE.EXTEND(); END IF;
		v_DATA.PROFILE_TABLE(v_DATA.PROFILE_TABLE.LAST) := v_PROFILE;
		v_FIRST := FALSE;
	END LOOP;

	--SUBMIT THE DATA.
	v_DATA_TBL.EXTEND();
	v_DATA_TBL(v_DATA_TBL.FIRST) := v_DATA;
	p_TRANS.DATA_TABLE := v_DATA_TBL;

	MEX_OASIS.SUBMIT_TRANSCUST(p_TAB => p_TRANS,
							p_CREDENTIALS => p_CRED,
							p_URL => p_OASIS_URL,
							p_LOGGER => p_LOGGER,
							p_STATUS => p_STATUS);
	COMMIT;

	IF p_STATUS = GA.SUCCESS THEN

		--DISPLAY A MESSAGE AFTER A SUCCESSFUL CONFIRMATION OR WITHDRAWN
		IF p_TRANSCUST_STATUS = g_TRANSCUST_CONFIRM THEN
			p_LOGGER.LOG_INFO('Transmission purchase ' || p_TRANSACTION.Transaction_Name || ' has been successfully confirmed.');
			v_TEMP_MESSAGE := 'Transmission purchase ' || p_TRANSACTION.Transaction_Name || ' has been successfully confirmed.';
		ELSIF p_TRANSCUST_STATUS = g_TRANSCUST_WITHDRAW THEN
			p_LOGGER.LOG_INFO('Transmission purchase ' || p_TRANSACTION.Transaction_Name || ' has been successfully withdrawn.');
			v_TEMP_MESSAGE := 'Transmission purchase ' || p_TRANSACTION.Transaction_Name || ' has been successfully withdrawn.';
		END IF;

		--Run a transstatus for this Reservation to be sure we have the latest information.
		QUERY_STATUS(p_TRANSACTION.TP_ID,
				p_TRANSACTION.BEGIN_DATE,
				p_TRANSACTION.END_DATE,
				NULL,
				NULL,
				p_TRANSACTION.TRANSACTION_IDENTIFIER,
				p_CRED,
				p_LOGGER,
				p_STATUS);
		IF p_STATUS = GA.SUCCESS THEN p_ERROR_MESSAGE := v_TEMP_MESSAGE; END IF;

	END IF;

END SUBMIT_TRANSCUST;
------------------------------------------------------------------------------------------------------------------
PROCEDURE MARKET_EXCHANGE_ENTITY_LIST
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_ENTITY_LABEL OUT VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT REF_CURSOR
	) AS
  BEGIN

	IF UPPER(p_EXCHANGE_TYPE) NOT LIKE '%DOWNLOAD TSIN DATA%' THEN
	--IF UPPER(p_MKT_APP) LIKE 'OASIS%' AND INSTR(p_MKT_APP,'TSIN',1) = 0 THEN
        --Get the Trasmission Provider list.
        p_ENTITY_LABEL := 'Transmission Providers';
        OPEN p_CURSOR FOR
          SELECT TP_NAME, TP_ID
          FROM TRANSMISSION_PROVIDER
		  WHERE TP_ID>0
          ORDER BY 1;
	ELSE
		OPEN p_CURSOR FOR
			SELECT NULL FROM DUAL;
	END IF;

END MARKET_EXCHANGE_ENTITY_LIST;
------------------------------------------------------------------------------------------------------------------------
PROCEDURE MARKET_EXCHANGE
	(
	p_BEGIN_DATE            	IN DATE,
	p_END_DATE              	IN DATE,
	p_EXCHANGE_TYPE  			IN VARCHAR2,
	p_ENTITY_LIST           	IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER 	IN CHAR,
	p_LOG_TYPE 					IN NUMBER,
	p_TRACE_ON 					IN NUMBER,
	p_STATUS                	OUT NUMBER,
	p_MESSAGE               	OUT VARCHAR2) AS

	v_ENTITY_STRING_TABLE GA.STRING_TABLE;
	v_INDEX               BINARY_INTEGER;
	v_ENTITY_ID           NUMBER(9);
	v_CUSTOMER_LIST 	  VARCHAR2(2000);
	v_STATUS_LIST         VARCHAR2(2000);
	v_CREDS               MM_CREDENTIALS_SET;
	v_CRED                MEX_CREDENTIALS;
	v_ACTION              VARCHAR2(64);
    v_LOGGER              MM_LOGGER_ADAPTER;
	v_DUMMY               VARCHAR2(512);

BEGIN

	MM_UTIL.INIT_MEX(p_EXTERNAL_SYSTEM_ID    =>EC.ES_OASIS,
                     p_PROCESS_NAME          => p_EXCHANGE_TYPE,
                     p_EXCHANGE_NAME         => p_EXCHANGE_TYPE,
                     p_LOG_TYPE              => p_LOG_TYPE,
                     p_TRACE_ON              => p_TRACE_ON,
                     p_CREDENTIALS           => v_CREDS,
                     p_LOGGER                => v_LOGGER);

    MM_UTIL.START_EXCHANGE(FALSE, v_LOGGER);

	-- no credentials? we can proceed w/out if we are in test mode - otherwise, fail
	IF NOT v_CREDS.HAS_NEXT THEN
		p_STATUS := GA.GENERAL_EXCEPTION;
		p_MESSAGE := 'No credentials found for OASIS. Nothing can be downloaded';
		v_LOGGER.LOG_WARN(p_MESSAGE);

		IF NOT MM_SEM_UTIL.g_TEST THEN
			MM_UTIL.STOP_EXCHANGE(v_LOGGER, p_STATUS, p_MESSAGE, v_DUMMY);
			RETURN;
		END IF;
	END IF;

	UT.TOKENS_FROM_STRING(p_ENTITY_LIST,
						  p_ENTITY_LIST_DELIMITER,
						  v_ENTITY_STRING_TABLE);

	v_INDEX := v_ENTITY_STRING_TABLE.FIRST;
	v_ACTION := UPPER(p_EXCHANGE_TYPE);

   IF v_CREDS IS NOT NULL THEN
        IF v_CREDS.HAS_NEXT THEN
  			v_CRED := v_CREDS.GET_NEXT;
		ELSE
  			v_CRED := NULL;
		END IF;
    ELSE
       	v_CRED := NULL;
    END IF;

	--Loop over Primary Provider's list
	LOOP
		IF p_ENTITY_LIST IS NULL THEN
			v_ENTITY_ID := NULL;
		ELSE
			v_ENTITY_ID := TO_NUMBER(v_ENTITY_STRING_TABLE(v_INDEX));
		END IF;

    		IF v_ACTION = UPPER(g_ACTION_QUE_LIST) THEN
       			QUERY_LIST(v_ENTITY_ID, v_CRED, v_LOGGER, p_STATUS);
    	    ELSIF v_ACTION LIKE 'QUERY STATUS%' THEN
    			v_CUSTOMER_LIST := GET_DICTIONARY_VALUE(p_EXCHANGE_TYPE, 1, 'Market Exchange', 'OASIS', 'Input List', 'Customer');
    			v_STATUS_LIST := GET_DICTIONARY_VALUE(p_EXCHANGE_TYPE, 1, 'Market Exchange', 'OASIS', 'Input List', 'Status');
       			QUERY_STATUS(v_ENTITY_ID, p_BEGIN_DATE, p_END_DATE, v_STATUS_LIST, v_CUSTOMER_LIST, NULL, v_CRED, v_LOGGER, p_STATUS);
       		ELSE
    			p_STATUS  := GA.GENERAL_EXCEPTION;
            	p_MESSAGE := 'Exchange Type ' || p_EXCHANGE_TYPE || ' not found.';
            	v_LOGGER.LOG_ERROR(p_MESSAGE);
    		END IF;

		EXIT WHEN v_ENTITY_ID IS NULL OR v_INDEX = v_ENTITY_STRING_TABLE.LAST;
    	v_INDEX := v_ENTITY_STRING_TABLE.NEXT(v_INDEX);
	END LOOP;

	p_STATUS   := GA.SUCCESS;
	p_MESSAGE := v_LOGGER.GET_END_MESSAGE();
    MM_UTIL.STOP_EXCHANGE(v_LOGGER, p_STATUS, p_MESSAGE, p_MESSAGE);

EXCEPTION
	WHEN OTHERS THEN
		p_MESSAGE := SQLERRM;
        p_STATUS  := SQLCODE;
        MM_UTIL.STOP_EXCHANGE(v_LOGGER, p_STATUS, p_MESSAGE, p_MESSAGE);

END MARKET_EXCHANGE;
------------------------------------------------------------------------------------------------------------------------
PROCEDURE MARKET_SUBMIT
	(
	   p_BEGIN_DATE      IN DATE,
       p_END_DATE        IN DATE,
       p_EXCHANGE_TYPE   IN VARCHAR2,
       p_LOG_ONLY	    IN NUMBER,
       p_ENTITY_LIST 	 IN VARCHAR2,
       p_ENTITY_LIST_DELIMITER IN CHAR,
       p_SUBMIT_HOURS    IN VARCHAR2,
       p_TIME_ZONE       IN VARCHAR2,
	   p_LOG_TYPE		 IN NUMBER,
	   p_TRACE_ON		 IN NUMBER,
       p_STATUS          OUT NUMBER,
       p_MESSAGE         OUT VARCHAR2) AS

v_ACTION   VARCHAR2(64);
--v_LOG_ONLY NUMBER(1) := 0;

v_TRANSACTION_IDS VARCHAR2(4000);
v_TRANSACTION_ID_TABLE ID_TABLE := ID_TABLE();
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_CURRENT_DATE DATE := TRUNC(p_BEGIN_DATE);

v_INDEX BINARY_INTEGER;
v_TXN_INDEX BINARY_INTEGER;
v_ALL_HOURS BOOLEAN := FALSE;
v_TRANSACTION_ID NUMBER(9);
v_CUR_MESSAGE VARCHAR2(4000);
v_TXN INTERCHANGE_TRANSACTION%ROWTYPE;
v_TRANS MEX_OASIS_TRANS;
v_OASIS_URL OASIS_NODE.URL%TYPE;
v_OASIS_NODE_ID TRANSMISSION_PROVIDER.OASIS_NODE_ID%TYPE;
v_EXTERNAL_ACCOUNT_NAME EXTERNAL_SYSTEM_IDENTIFIER.EXTERNAL_IDENTIFIER%TYPE;
v_CRED MEX_CREDENTIALS;
v_LOGGER MM_LOGGER_ADAPTER;


	PROCEDURE APPEND_CUR_MESSAGE AS
	v_MESSAGE_LENGTH NUMBER;
	BEGIN
		IF p_MESSAGE IS NULL THEN
			p_MESSAGE := v_CUR_MESSAGE;
		ELSE
			v_MESSAGE_LENGTH := LENGTH(p_MESSAGE) + LENGTH(v_CUR_MESSAGE) + 2;
			IF v_MESSAGE_LENGTH > 4000 THEN
				--do not append if message is too long.
				NULL;
			ELSE
				p_MESSAGE := p_MESSAGE || CHR(13) || CHR(10) || v_CUR_MESSAGE;
			END IF;
		END IF;
	END APPEND_CUR_MESSAGE;
BEGIN
	--v_LOG_ONLY := CASE WHEN MM_OASIS_UTIL.IS_LOG_ONLY_MODE THEN 1 ELSE 0 END;
	v_TRANSACTION_IDS := REPLACE(p_ENTITY_LIST, '''', '');

	UT.ID_TABLE_FROM_STRING(v_TRANSACTION_IDS, p_ENTITY_LIST_DELIMITER, v_TRANSACTION_ID_TABLE);

	--LOOP OVER TRANSACTIONS.
	FOR v_TXN_INDEX IN v_TRANSACTION_ID_TABLE.FIRST .. v_TRANSACTION_ID_TABLE.LAST LOOP

		--GET THE INFO FROM THE TRANSACTION.
		v_TRANSACTION_ID := v_TRANSACTION_ID_TABLE(v_TXN_INDEX).ID;
		SELECT * INTO v_TXN FROM INTERCHANGE_TRANSACTION WHERE TRANSACTION_ID = v_TRANSACTION_ID;

		v_TRANS := MEX_OASIS_TRANS(NULL, NULL, NULL, NULL, NULL);
		v_TRANS.PRIMARY_PROVIDER_CODE := GET_PROVIDER_IDENT(v_TXN.TP_ID);
		v_TRANS.PRIMARY_PROVIDER_DUNS := GET_DUNS(v_TRANS.PRIMARY_PROVIDER_CODE);
		v_OASIS_NODE_ID := GET_OASIS_NODE_IDENT(v_TXN.TP_ID);
		v_OASIS_URL := GET_OASIS_URL(v_OASIS_NODE_ID);
		v_EXTERNAL_ACCOUNT_NAME := EI.GET_ENTITY_IDENTIFIER_EXTSYS(EC.ED_OASIS_NODE, v_OASIS_NODE_ID, EC.ES_OASIS);

		MM_UTIL.INIT_MEX(p_EXTERNAL_SYSTEM_ID => EC.ES_OASIS,
					p_EXTERNAL_ACCOUNT_NAME => v_EXTERNAL_ACCOUNT_NAME,
					p_PROCESS_NAME => p_EXCHANGE_TYPE,
					p_EXCHANGE_NAME => p_EXCHANGE_TYPE,
					p_LOG_TYPE => p_LOG_TYPE,
					p_TRACE_ON => p_TRACE_ON,
					p_CREDENTIALS => v_CRED,
					p_LOGGER => v_LOGGER);

		MM_UTIL.START_EXCHANGE(TRUE, v_LOGGER);

		--Submit purchase request
		IF p_EXCHANGE_TYPE = g_ACTION_SUB_TRANSREQUEST THEN
			v_LOGGER.LOG_INFO('Attempting to submit a purchase request for ' || v_EXTERNAL_ACCOUNT_NAME );
			SUBMIT_TRANSREQUEST(v_TXN, v_OASIS_URL, v_CRED, v_TRANS, v_LOGGER, v_CUR_MESSAGE, p_STATUS);
		--Confirm Purchase
		ELSIF p_EXCHANGE_TYPE = g_ACTION_SUB_TRANSCUST_CONF THEN
			v_LOGGER.LOG_INFO('Attempting to confirm a purchase for ' || v_EXTERNAL_ACCOUNT_NAME );
			SUBMIT_TRANSCUST(v_TXN, v_OASIS_URL, g_TRANSCUST_CONFIRM, v_CRED, v_TRANS, v_LOGGER, v_CUR_MESSAGE, p_STATUS);
		--Withdraw Purchase
		ELSIF p_EXCHANGE_TYPE = g_ACTION_SUB_TRANSCUST_WITH THEN
			v_LOGGER.LOG_INFO('Attempting to withdraw a purchase for ' || v_EXTERNAL_ACCOUNT_NAME );
			SUBMIT_TRANSCUST(v_TXN, v_OASIS_URL, g_TRANSCUST_WITHDRAW, v_CRED, v_TRANS, v_LOGGER, v_CUR_MESSAGE, p_STATUS);
		ELSE
			p_STATUS  := GA.GENERAL_EXCEPTION;
        	p_MESSAGE := 'Exchange Type ' || p_EXCHANGE_TYPE || ' not found.';
        	v_LOGGER.LOG_ERROR(p_MESSAGE);
		END IF;

		IF p_STATUS = GA.SUCCESS THEN
			IF v_CUR_MESSAGE IS NOT NULL THEN
				--AFTER EACH TRANSREQUEST SUBMISSION CONCATENATE
				--THE CURRENT MESSAGE THAT STORES THE OASIS ID FOR
				--CURENT TRANSACTION
    			APPEND_CUR_MESSAGE;
			ELSE
				p_MESSAGE := v_CUR_MESSAGE;
    		END IF;

		ELSIF p_STATUS = MEX_UTIL.g_FAILURE THEN
    		IF v_CUR_MESSAGE IS NOT NULL THEN
				p_MESSAGE := v_CUR_MESSAGE;
    			p_STATUS := GA.GENERAL_EXCEPTION;
    			RETURN;
    		END IF;
		END IF;

	END LOOP; -- OVER TRANSACTIONS

    MM_UTIL.STOP_EXCHANGE(v_LOGGER, p_STATUS, p_MESSAGE, p_MESSAGE);

EXCEPTION
	WHEN OTHERS THEN
		p_MESSAGE := SQLERRM;
        p_STATUS  := SQLCODE;
    MM_UTIL.STOP_EXCHANGE(v_LOGGER, p_STATUS, p_MESSAGE, p_MESSAGE);

END MARKET_SUBMIT;
---------------------------------------------------------------------------------------------------
FUNCTION IS_SUPPORTED_EXCHANGE_TYPE
	(
	p_MKT_APP IN VARCHAR2,
	p_EXCHANGE_TYPE IN VARCHAR2
	) RETURN BOOLEAN IS
BEGIN
	-- @TODO: dispatch based on p_MKT_APP
	RETURN TRUE;
END IS_SUPPORTED_EXCHANGE_TYPE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_BID_OFFER_INTERVAL
	(
	p_TRANSACTION IN INTERCHANGE_TRANSACTION%ROWTYPE
	) RETURN VARCHAR2 IS
	v_INTERVAL VARCHAR2(32);
BEGIN
	-- Use the External Interval.
	v_INTERVAL := NVL(p_TRANSACTION.EXTERNAL_INTERVAL, p_TRANSACTION.TRANSACTION_INTERVAL);
	IF INTERVAL_IS_ATLEAST_DAILY(v_INTERVAL) THEN
		RETURN 'Day';
	ELSE
		RETURN 'Hour';
	END IF;
END GET_BID_OFFER_INTERVAL;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_STATUS_NOTIFICATIONS(p_PROVIDER_CODE IN VARCHAR2,
								   p_LOG_TYPE     IN NUMBER,
    							   p_TRACE_ON     IN NUMBER,
								   p_STATUS        OUT NUMBER,
								   p_MESSAGE       OUT VARCHAR2) AS

	v_CREDS         MM_CREDENTIALS_SET;
    v_CRED          MEX_CREDENTIALS;
	v_LOGGER        MM_LOGGER_ADAPTER;
	v_RESULT        MEX_RESULT;
	v_NO_MESSAGES   BOOLEAN;
	v_RESPONSE_CLOB        CLOB;
	v_RECORDS     MEX_OASIS_TRANS;
	v_PROVIDER_ID NUMBER(9);
	v_DUMMY   VARCHAR2(512);

BEGIN

	MM_UTIL.INIT_MEX(p_EXTERNAL_SYSTEM_ID    =>EC.ES_OASIS,
                     p_PROCESS_NAME          => g_STATUS_MESSAGES,
                     p_EXCHANGE_NAME         => g_STATUS_MESSAGES,
                     p_LOG_TYPE              => p_LOG_TYPE,
                     p_TRACE_ON              => p_TRACE_ON,
                     p_CREDENTIALS           => v_CREDS,
                     p_LOGGER                => v_LOGGER);

    MM_UTIL.START_EXCHANGE(FALSE, v_LOGGER);

	-- no credentials? we can proceed w/out if we are in test mode - otherwise, fail
	IF NOT v_CREDS.HAS_NEXT THEN
		p_STATUS := GA.GENERAL_EXCEPTION;
		p_MESSAGE := 'No credentials found for OASIS. Nothing can be downloaded';
		v_LOGGER.LOG_WARN(p_MESSAGE);

		IF NOT MM_SEM_UTIL.g_TEST THEN
			MM_UTIL.STOP_EXCHANGE(v_LOGGER, p_STATUS, p_MESSAGE, v_DUMMY);
			RETURN;
		END IF;
	END IF;

	SELECT TP_ID
	  INTO v_PROVIDER_ID
	  FROM TRANSMISSION_PROVIDER
	 WHERE TP_NAME = p_PROVIDER_CODE;

	WHILE TRUE LOOP

		IF v_CREDS IS NOT NULL THEN
			EXIT WHEN NOT v_CREDS.HAS_NEXT;
			v_CRED    := v_CREDS.GET_NEXT;
		ELSE
			v_CRED    := NULL;
		END IF;

		v_RESULT := MEX_SWITCHBOARD.DequeueMessage(p_Message_Category => g_STATUS_MESSAGES,
		                                           p_Logger => v_LOGGER,
												   p_Message_Recipient => NULL,
												   p_Cred => v_CRED);

		IF v_RESULT.STATUS_CODE = MEX_Switchboard.c_Status_Success THEN
			v_RESPONSE_CLOB := v_RESULT.RESPONSE;

        ELSIF v_RESULT.STATUS_CODE = MEX_SWITCHBOARD.c_Status_No_More_Messages THEN
			--finished processing the queue.
			v_NO_MESSAGES := TRUE;
			v_RESPONSE_CLOB := NULL;
		ELSE
			v_RESPONSE_CLOB := NULL; -- this indicates failure - MEX_Switchboard.Invoke will have already logged error message
           	v_LOGGER.LOG_ERROR('Failed to retrive a status message');
		   	v_NO_MESSAGES := TRUE;
        END IF;

		v_RESULT := MEX_SWITCHBOARD.DequeueMessage(p_Message_Category => g_STATUS_MESSAGES,
		                                           p_Logger => v_LOGGER,
												   p_Message_Recipient => NULL,
												   p_Cred => v_CRED);

		IF v_RESULT.STATUS_CODE = MEX_Switchboard.c_Status_Success THEN
			v_RESPONSE_CLOB := v_RESULT.RESPONSE;

        ELSIF v_RESULT.STATUS_CODE = MEX_SWITCHBOARD.c_Status_No_More_Messages THEN
			--finished processing the queue.
			v_NO_MESSAGES := TRUE;
			v_RESPONSE_CLOB := NULL;
		ELSE
			v_RESPONSE_CLOB := NULL; -- this indicates failure - MEX_Switchboard.Invoke will have already logged error message
           	v_LOGGER.LOG_ERROR('Failed to retrive a status message');
		   	v_NO_MESSAGES := TRUE;
        END IF;

		EXIT WHEN v_NO_MESSAGES;

		v_RECORDS := MEX_OASIS_TRANS(NULL, NULL, NULL, NULL, NULL);
		--PARSE THE RESPONSE
		MEX_OASIS.PARSE_TRANSSTATUS_RESPONSE(v_RESPONSE_CLOB,
											 v_LOGGER,
											 v_RECORDS);

		--SAVE THE STATUS
			PUT_TRANSSTATUS_RESULTS(v_RECORDS,
									GA.EXTERNAL_STATE,
									v_PROVIDER_ID,
									v_LOGGER,
									TRUE);



	END LOOP;

END GET_STATUS_NOTIFICATIONS;
----------------------------------------------------------------------------------------------------
END MM_OASIS;
/
