CREATE OR REPLACE PACKAGE BODY MM_OASIS_COMPARE IS
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.1 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
PROCEDURE NULL_CURSOR
    (
	p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

	OPEN p_CURSOR FOR
		SELECT NULL FROM DUAL;

END NULL_CURSOR;
---------------------------------------------------------------------------------------------------
PROCEDURE ETAG_TXN_OASIS_LISTING_RPT
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TRANSACTION_FILTER IN VARCHAR2,
	p_OASIS_FILTER IN VARCHAR2,
	p_ETAG_FILTER IN VARCHAR2,
	p_PURCHASER_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS

	v_TRANSACTION_FILTER VARCHAR2(64);
	v_OASIS_FILTER VARCHAR2(64);
	v_ETAG_FILTER VARCHAR2(64);
	c_NO_FILTER VARCHAR(1) := '%';

	FUNCTION GET_CORRECTED_FILTER
		(
		p_FILTER IN VARCHAR2
		) RETURN VARCHAR2 IS
		v_FILTER VARCHAR2(64);
		v_RTN VARCHAR2(64);
	BEGIN

		v_FILTER := REPLACE(p_FILTER,'*','%');

		IF p_FILTER IS NULL THEN
			v_RTN := c_NO_FILTER;
		ELSIF INSTR(v_FILTER,'%') > 0 THEN
			v_RTN := v_FILTER;
		ELSE
			v_RTN := '%' || v_FILTER || '%';
		END IF;

		RETURN v_RTN;

	END GET_CORRECTED_FILTER;
BEGIN

	p_STATUS := GA.SUCCESS;
	v_TRANSACTION_FILTER := GET_CORRECTED_FILTER(p_TRANSACTION_FILTER);
	v_OASIS_FILTER := GET_CORRECTED_FILTER(p_OASIS_FILTER);
	v_ETAG_FILTER := GET_CORRECTED_FILTER(p_ETAG_FILTER);

	--IF AN OASIS FILTER IS SPECIFIED, THEN IT IS THE DRIVER.
	IF v_OASIS_FILTER <> c_NO_FILTER THEN
		OPEN p_CURSOR FOR
			SELECT A.TRANSACTION_NAME "ENERGY_TRANSACTION_NAME",
				C.TAG_IDENT "ETAG_IDENT",
				E.TRANSACTION_NAME "OASIS_IDENT",
				A.TRANSACTION_ID "ENERGY_TRANSACTION_ID",
				C.ETAG_ID,
				E.TRANSACTION_ID "OASIS_TRANSACTION_ID"
			FROM INTERCHANGE_TRANSACTION A,
				ETAG_TRANSACTION B,
				ETAG C,
				IT_ASSIGNMENT D,
				INTERCHANGE_TRANSACTION E
			WHERE E.AGREEMENT_TYPE = 'OASIS'
				AND E.TRANSACTION_NAME LIKE v_OASIS_FILTER
				AND E.BEGIN_DATE <= p_END_DATE
				AND E.END_DATE >= p_BEGIN_DATE
				AND D.FROM_TRANSACTION_ID = E.TRANSACTION_ID
				AND D.ASSIGNMENT_TYPE = g_OASIS_ASSIGNMENT_TYPE
				AND A.TRANSACTION_ID = D.TO_TRANSACTION_ID
				AND B.TRANSACTION_ID(+) = A.TRANSACTION_ID
				AND C.ETAG_ID(+) = B.ETAG_ID
				AND A.TRANSACTION_NAME LIKE v_TRANSACTION_FILTER
				AND C.TAG_IDENT(+) LIKE v_ETAG_FILTER;
	--OTHERWISE, START FROM THE ENERGY TRANSACTION SIDE.
	ELSE
		OPEN p_CURSOR FOR
			SELECT A.TRANSACTION_NAME "ENERGY_TRANSACTION_NAME",
				C.TAG_IDENT "ETAG_IDENT",
				E.TRANSACTION_NAME "OASIS_IDENT",
				A.TRANSACTION_ID "ENERGY_TRANSACTION_ID",
				C.ETAG_ID,
				E.TRANSACTION_ID "OASIS_TRANSACTION_ID"
			FROM INTERCHANGE_TRANSACTION A,
				ETAG_TRANSACTION B,
				ETAG C,
				IT_ASSIGNMENT D,
				INTERCHANGE_TRANSACTION E
			WHERE A.COMMODITY_ID = g_ENERGY_TXN_COMMODITY_ID
				AND A.TRANSACTION_TYPE IN ('Purchase','Sale')
				AND A.BEGIN_DATE <= p_END_DATE
				AND A.END_DATE >= p_BEGIN_DATE
				AND A.TRANSACTION_NAME LIKE v_TRANSACTION_FILTER
				AND C.TAG_IDENT(+) LIKE v_ETAG_FILTER
				AND B.TRANSACTION_ID(+) = A.TRANSACTION_ID
				AND C.ETAG_ID(+) = B.ETAG_ID
				AND D.TO_TRANSACTION_ID = A.TRANSACTION_ID
				AND D.ASSIGNMENT_TYPE = g_OASIS_ASSIGNMENT_TYPE
				AND E.TRANSACTION_ID = D.FROM_TRANSACTION_ID
				AND E.TRANSACTION_NAME LIKE v_OASIS_FILTER;
	END IF;

END ETAG_TXN_OASIS_LISTING_RPT;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_ETAG_TXN_OASIS_LISTING_RPT
	(
	p_ENERGY_TRANSACTION_ID IN NUMBER,
	p_ETAG_IDENT IN VARCHAR2,
	p_OLD_ETAG_ID IN VARCHAR2,
	p_STATUS OUT NUMBER
	) AS
	v_ETAG_ID NUMBER(9);

BEGIN

	--This report will be used to change/add the TRANSACTION_ETAG association.

	--If the etag ident is null, then delete the existing row.
	IF p_ETAG_IDENT IS NULL THEN
		DELETE ETAG_TRANSACTION
		WHERE TRANSACTION_ID = p_ENERGY_TRANSACTION_ID
		AND ETAG_ID = p_OLD_ETAG_ID;
	ELSE
    	--See if the ETAG exists, and create one if it does not.
    	BEGIN
    		SELECT ETAG_ID INTO v_ETAG_ID FROM ETAG WHERE TAG_IDENT = p_ETAG_IDENT;
    	EXCEPTION
    		WHEN NO_DATA_FOUND THEN
    			IO.PUT_ETAG(v_ETAG_ID, p_ETAG_IDENT, NULL, NULL, 0, p_ETAG_IDENT, NULL, NULL, NULL, NULL, p_ETAG_IDENT, 'Active', NULL, NULL, NULL, NULL, NULL);
    	END;

    	--See if the Old ETAG exists.
    	IF p_OLD_ETAG_ID IS NOT NULL AND p_OLD_ETAG_ID > 0 THEN
    		--If it does, do an update.
    		UPDATE ETAG_TRANSACTION
    		SET ETAG_ID = v_ETAG_ID
    		WHERE TRANSACTION_ID = p_ENERGY_TRANSACTION_ID AND ETAG_ID = p_OLD_ETAG_ID;
    	ELSE
    		--If not, just do an insert.
    		INSERT INTO ETAG_TRANSACTION (ETAG_ID, TRANSACTION_ID)
    		VALUES (v_ETAG_ID, p_ENERGY_TRANSACTION_ID);
    	END IF;
	END IF;
END PUT_ETAG_TXN_OASIS_LISTING_RPT;
---------------------------------------------------------------------------------------------------
PROCEDURE ENERGY_BALANCE_RPT_SUMMARY
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_TRANSACTION_STATUS IN VARCHAR2,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS
	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
BEGIN
	p_STATUS := GA.SUCCESS;

	UT.CUT_DATE_RANGE(GA.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

	OPEN p_CURSOR FOR
		SELECT A.TRANSACTION_NAME "ENERGY_TRANSACTION_NAME", A.TRANSACTION_ID "ENERGY_TRANSACTION_ID", D.TAG_IDENT "ETAG_IDENT", B.TRANSACTION_STATUS_NAME,
			A.BEGIN_DATE "TXN_BEGIN_DATE", A.END_DATE "TXN_END_DATE",
			E.SERVICE_POINT_ID "TXN_POR_ID", E.SERVICE_POINT_NAME "POR_NAME", F.SERVICE_POINT_ID "TXN_POD_ID", F.SERVICE_POINT_NAME "POD_NAME",
			SRC.SERVICE_POINT_ID "TXN_SOURCE_ID", SRC.SERVICE_POINT_NAME "SOURCE_NAME",
			(SELECT GREATEST(0, MAX(G.AMOUNT -
				(SELECT NVL(SUM(I.AMOUNT),0)
				FROM IT_ASSIGNMENT H, IT_ASSIGNMENT_SCHEDULE I, INTERCHANGE_TRANSACTION J
				WHERE H.TO_TRANSACTION_ID = A.TRANSACTION_ID
					AND H.ASSIGNMENT_TYPE = g_OASIS_ASSIGNMENT_TYPE
					AND J.AGREEMENT_TYPE = 'OASIS'
					AND J.POR_ID = CASE WHEN p_POR_ID = g_SAME_AS_TXN THEN A.POR_ID ELSE p_POR_ID END
					AND J.POD_ID = CASE WHEN p_POD_ID = g_SAME_AS_TXN THEN A.POD_ID ELSE p_POD_ID END
					AND H.FROM_TRANSACTION_ID = J.TRANSACTION_ID
					AND I.ASSIGNMENT_ID = H.ASSIGNMENT_ID
					AND I.OPTION_ID = 0
					AND I.SCHEDULE_DATE = G.SCHEDULE_DATE
					AND I.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
					AND I.SCHEDULE_STATE = GA.INTERNAL_STATE)))
			FROM IT_SCHEDULE G
			WHERE G.TRANSACTION_ID = A.TRANSACTION_ID
					AND G.SCHEDULE_TYPE = p_SCHEDULE_TYPE
					AND G.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND G.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE) "MAX_IMBALANCE"
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, ETAG_TRANSACTION C, ETAG D, SERVICE_POINT E, SERVICE_POINT F, SERVICE_POINT SRC
		WHERE A.COMMODITY_ID = g_ENERGY_TXN_COMMODITY_ID
			AND A.TRANSACTION_TYPE IN ('Purchase','Sale')
			AND A.BEGIN_DATE <= p_END_DATE
			AND A.END_DATE >= p_BEGIN_DATE
			AND (p_TRANSACTION_STATUS = g_ALL_CHAR OR B.TRANSACTION_STATUS_NAME = p_TRANSACTION_STATUS)
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND C.TRANSACTION_ID(+) = A.TRANSACTION_ID
			AND D.ETAG_ID(+) = C.ETAG_ID
			AND E.SERVICE_POINT_ID = A.POR_ID
			AND F.SERVICE_POINT_ID = A.POD_ID
			AND SRC.SERVICE_POINT_ID = A.SOURCE_ID
		ORDER BY 1;

END ENERGY_BALANCE_RPT_SUMMARY;
---------------------------------------------------------------------------------------------------
PROCEDURE ENERGY_BALANCE_RPT_DETAIL
	(
	p_ENERGY_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
    p_SCHEDULE_TYPE IN NUMBER,
    p_AS_OF_DATE IN DATE,
	p_TP_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_TXN_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_TXN_POD_ID IN NUMBER,
	p_TXN_SOURCE_ID IN NUMBER,
	p_PURCHASER_ID IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT REF_CURSOR
	) AS
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_ENERGY_WORK_ID NUMBER;
v_CAPACITY_WORK_ID NUMBER;
v_TRANSACTION_NAME INTERCHANGE_TRANSACTION.TRANSACTION_NAME%TYPE;
v_CAPACITY_IDs ID_TABLE;
v_INTERVAL_NUMBER NUMBER;
v_POR_ID NUMBER(9) := CASE p_POR_ID WHEN g_SAME_AS_TXN THEN p_TXN_POR_ID ELSE p_POR_ID END;
v_POD_ID NUMBER(9) := CASE p_POD_ID WHEN g_SAME_AS_TXN THEN p_TXN_POD_ID ELSE p_POD_ID END;
v_UPDATE_ENERGY NUMBER(1) := 0;
--v_SCHEDULE_TYPE NUMBER(9) := CASE g_ENABLE_SCHEDULE_TYPES WHEN 1 THEN p_SCHEDULE_TYPE ELSE 0 END;
BEGIN
--------------------
-- CAPACITY == FROM (SUPPLY)
-- ENERGY == TO (DEMAND)
--------------------
	SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);
	IF p_STATUS < 0 THEN
		NULL_CURSOR(p_CURSOR);
		RETURN;
	END IF;

	p_STATUS := GA.SUCCESS;

	UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

	SELECT TRANSACTION_NAME, GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL)
	INTO v_TRANSACTION_NAME, v_INTERVAL_NUMBER
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_ENERGY_TRANSACTION_ID;

	--MATCH THE OASIS RESV TO THE ENERGY RESV BY POD AND POR.
	SELECT ID_TYPE(CAP.TRANSACTION_ID)
	BULK COLLECT INTO v_CAPACITY_IDs
	FROM INTERCHANGE_TRANSACTION CAP, IT_STATUS STAT
	WHERE CAP.AGREEMENT_TYPE = 'OASIS'
		AND CAP.BEGIN_DATE <= p_END_DATE
		AND CAP.END_DATE >= p_BEGIN_DATE
		AND CAP.POR_ID = v_POR_ID
		AND CAP.POD_ID = v_POD_ID
		AND CAP.SOURCE_ID = p_TXN_SOURCE_ID
		AND CAP.PURCHASER_ID = p_PURCHASER_ID
		AND (p_TP_ID = g_ALL OR CAP.TP_ID = p_TP_ID)
		AND STAT.TRANSACTION_STATUS_NAME = g_STATUS_CONFIRMED
		AND STAT.TRANSACTION_ID = CAP.TRANSACTION_ID;

	-- Populate LOAD_BALANCING_DEMAND_WORK
	IA.BUILD_WORK_DATA_TO(p_ENERGY_TRANSACTION_ID, v_BEGIN_DATE, v_END_DATE, p_SCHEDULE_TYPE, FALSE, v_ENERGY_WORK_ID);

	-- Populate LOAD_BALANCING_SUPPLY_WORK
	IA.BUILD_WORK_ASSIGNMENTS_FROM(p_ENERGY_TRANSACTION_ID, v_CAPACITY_IDs, v_BEGIN_DATE, v_END_DATE, p_TIME_ZONE, p_SCHEDULE_TYPE, g_OASIS_ASSIGNMENT_TYPE, FALSE, v_CAPACITY_WORK_ID);

	-- Query
	OPEN p_CURSOR FOR
		SELECT SUBSTR(SDT.NO_ROLLUP_YYYY_MM_DD, 1, 10) "SCHEDULE_DATE",
				SUBSTR(SDT.NO_ROLLUP_YYYY_MM_DD, 12) "SCHEDULE_TIME",
				p_ENERGY_TRANSACTION_ID "ENERGY_TRANSACTION_ID",
				v_TRANSACTION_NAME "ENERGY_TRANSACTION_NAME",
				NVL(L.AMOUNT,0) "ENERGY_AMOUNT_OLD",
				S.TRANSACTION_ID "SUPPLY_TRANSACTION_ID",
				S.TRANSACTION_NAME "CAPACITY_TRANSACTION_NAME",
				S.IS_FIXED,
				CASE WHEN S.IS_FIXED = 1 THEN S.AMOUNT ELSE NULL END "FIXED_SCHEDULED",
				CASE WHEN S.IS_FIXED = 1 THEN NULL ELSE S.TERM_MAX END "DISP_MAX",
				CASE WHEN S.IS_FIXED = 1 THEN NULL ELSE S.TERM_MIN END "DISP_MIN",
				CASE WHEN S.IS_FIXED = 1 THEN S.TOTAL_ASSIGNED ELSE NULL END "FIXED_TOTAL_ASSIGNED_OLD",
				CASE WHEN S.IS_FIXED = 1 THEN NULL ELSE S.AMOUNT END "DISP_SCHEDULED_OLD",
				S.PRICE "SUPPLY_PRICE",
				S.ASSIGNED "ASSIGNED_AMOUNT",
				S.ASSIGNED "ASSIGNED_AMOUNT_OLD",
				v_UPDATE_ENERGY "UPDATE_ENERGY"
		FROM SYSTEM_DATE_TIME SDT,
			IT_ASSIGNMENT_WORK L,
			IT_ASSIGNMENT_WORK S
		WHERE SDT.TIME_ZONE = p_TIME_ZONE
			AND SDT.DATA_INTERVAL_TYPE = 1
			AND SDT.DAY_TYPE = '1'
			AND SDT.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
			AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
			AND L.WORK_ID(+) = v_ENERGY_WORK_ID
			AND L.SCHEDULE_DATE(+) = SDT.CUT_DATE
			AND S.WORK_ID(+) = v_CAPACITY_WORK_ID
			AND S.SCHEDULE_DATE(+) = SDT.CUT_DATE
		ORDER BY SDT.CUT_DATE, S.TRANSACTION_NAME;

	IA.PURGE_WORK(v_ENERGY_WORK_ID, v_CAPACITY_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		IA.PURGE_WORK(v_ENERGY_WORK_ID, v_CAPACITY_WORK_ID);
		NULL_CURSOR(p_CURSOR);
		p_STATUS := SQLCODE;

END ENERGY_BALANCE_RPT_DETAIL;
---------------------------------------------------------------------------------------------------
PROCEDURE CAPACITY_ASSIGN_RPT_SUMMARY
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TP_ID IN NUMBER,
	p_POR_ID IN NUMBER,
	p_POD_ID IN NUMBER,
	p_SOURCE_ID IN NUMBER,
	p_PURCHASER_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS
	v_BEGIN_DATE DATE;
	v_END_DATE DATE;
BEGIN
	p_STATUS := GA.SUCCESS;

	UT.CUT_DATE_RANGE(GA.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

	OPEN p_CURSOR FOR
	SELECT CAPACITY_TRANSACTION_NAME, SUPPLY_TRANSACTION_ID, OASIS_IDENT, TRANSACTION_STATUS_NAME,
		TXN_BEGIN_DATE, TXN_END_DATE, POR_NAME, POD_NAME, SOURCE_NAME,
		NVL(MIN_AVAILABLE, MIN_RESERVED) "MIN_AVAILABLE",
		NVL(MAX_AVAILABLE, MAX_RESERVED) "MAX_AVAILABLE"
	FROM
		(SELECT A.TRANSACTION_NAME "CAPACITY_TRANSACTION_NAME", A.TRANSACTION_ID "SUPPLY_TRANSACTION_ID", A.TRANSACTION_IDENTIFIER "OASIS_IDENT", B.TRANSACTION_STATUS_NAME,
			A.BEGIN_DATE "TXN_BEGIN_DATE", A.END_DATE "TXN_END_DATE",
			E.SERVICE_POINT_NAME "POR_NAME", F.SERVICE_POINT_NAME "POD_NAME", SRC.SERVICE_POINT_NAME "SOURCE_NAME",
			(SELECT MIN(G.AMOUNT - I.AMOUNT)
				FROM IT_SCHEDULE G, IT_ASSIGNMENT H, IT_ASSIGNMENT_SCHEDULE I
				WHERE H.FROM_TRANSACTION_ID = A.TRANSACTION_ID
					AND H.ASSIGNMENT_TYPE = g_OASIS_ASSIGNMENT_TYPE
					AND G.TRANSACTION_ID = A.TRANSACTION_ID
					AND G.SCHEDULE_TYPE = p_SCHEDULE_TYPE
					AND G.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND G.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
					AND I.ASSIGNMENT_ID = H.ASSIGNMENT_ID
					AND I.OPTION_ID = 0
					AND I.SCHEDULE_DATE = G.SCHEDULE_DATE
					AND I.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
					AND I.SCHEDULE_STATE = GA.INTERNAL_STATE ) "MIN_AVAILABLE",
			(SELECT MAX(G.AMOUNT - I.AMOUNT)
				FROM IT_SCHEDULE G, IT_ASSIGNMENT H, IT_ASSIGNMENT_SCHEDULE I
				WHERE H.FROM_TRANSACTION_ID = A.TRANSACTION_ID
					AND H.ASSIGNMENT_TYPE = g_OASIS_ASSIGNMENT_TYPE
					AND G.TRANSACTION_ID = A.TRANSACTION_ID
					AND G.SCHEDULE_TYPE = p_SCHEDULE_TYPE
					AND G.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND G.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
					AND I.ASSIGNMENT_ID = H.ASSIGNMENT_ID
					AND I.OPTION_ID = 0
					AND I.SCHEDULE_DATE = G.SCHEDULE_DATE
					AND I.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
					AND I.SCHEDULE_STATE = GA.INTERNAL_STATE ) "MAX_AVAILABLE",
			(SELECT MIN(G.AMOUNT)
				FROM IT_SCHEDULE G
				WHERE G.TRANSACTION_ID = A.TRANSACTION_ID
					AND G.SCHEDULE_TYPE = p_SCHEDULE_TYPE
					AND G.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND G.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE) "MIN_RESERVED",
			(SELECT MAX(G.AMOUNT)
				FROM IT_SCHEDULE G
				WHERE G.TRANSACTION_ID = A.TRANSACTION_ID
					AND G.SCHEDULE_TYPE = p_SCHEDULE_TYPE
					AND G.SCHEDULE_STATE = GA.INTERNAL_STATE
					AND G.SCHEDULE_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE) "MAX_RESERVED"
		FROM INTERCHANGE_TRANSACTION A, IT_STATUS B, SERVICE_POINT E, SERVICE_POINT F, SERVICE_POINT SRC
		WHERE A.AGREEMENT_TYPE = 'OASIS'
			AND A.PURCHASER_ID = p_PURCHASER_ID
			AND (p_TP_ID = g_ALL OR A.TP_ID = p_TP_ID)
			AND (p_POR_ID = g_ALL OR A.POR_ID = p_POR_ID)
			AND (p_POD_ID = g_ALL OR A.POD_ID = p_POD_ID)
			AND (p_SOURCE_ID = g_ALL OR A.SOURCE_ID = p_SOURCE_ID)
			AND A.BEGIN_DATE <= p_END_DATE
			AND A.END_DATE >= p_BEGIN_DATE
			AND B.TRANSACTION_STATUS_NAME = g_STATUS_CONFIRMED
			AND B.TRANSACTION_ID = A.TRANSACTION_ID
			AND E.SERVICE_POINT_ID = A.POR_ID
			AND F.SERVICE_POINT_ID = A.POD_ID
			AND SRC.SERVICE_POINT_ID = A.SOURCE_ID)
		ORDER BY NVL(MAX_AVAILABLE, MAX_RESERVED) DESC, 1;

END CAPACITY_ASSIGN_RPT_SUMMARY;
---------------------------------------------------------------------------------------------------
PROCEDURE CAPACITY_ASSIGN_RPT_DETAIL
	(
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR2,
    p_SCHEDULE_TYPE IN NUMBER,
    p_AS_OF_DATE IN DATE,
	p_STATUS OUT NUMBER,
	p_CURSOR OUT REF_CURSOR
	) AS
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_ENERGY_WORK_ID NUMBER;
v_CAPACITY_WORK_ID NUMBER;
v_TRANSACTION_NAME INTERCHANGE_TRANSACTION.TRANSACTION_NAME%TYPE;
v_ENERGY_IDs ID_TABLE;
v_INTERVAL_NUMBER NUMBER;
--v_SCHEDULE_TYPE NUMBER(9) := CASE g_ENABLE_SCHEDULE_TYPES WHEN 1 THEN p_SCHEDULE_TYPE ELSE 0 END;
v_POR_ID NUMBER(9);
v_POD_ID NUMBER(9);
BEGIN
--------------------
-- CAPACITY == FROM (SUPPLY)
-- ENERGY == TO (DEMAND)
--------------------
	SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);
	IF p_STATUS < 0 THEN
		NULL_CURSOR(p_CURSOR);
		RETURN;
	END IF;

	p_STATUS := GA.SUCCESS;

	UT.CUT_DATE_RANGE(p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

	SELECT TRANSACTION_NAME, GET_INTERVAL_NUMBER(TRANSACTION_INTERVAL), POR_ID, POD_ID
	INTO v_TRANSACTION_NAME, v_INTERVAL_NUMBER, v_POR_ID, v_POD_ID
	FROM INTERCHANGE_TRANSACTION
	WHERE TRANSACTION_ID = p_SUPPLY_TRANSACTION_ID;

	--GET THE ENERGY TRANSACTIONS ASSIGNED TO THIS OASIS TXN.
	SELECT ID_TYPE(A.TO_TRANSACTION_ID)
	BULK COLLECT INTO v_ENERGY_IDs
	FROM IT_ASSIGNMENT A, INTERCHANGE_TRANSACTION T
	WHERE A.FROM_TRANSACTION_ID = p_SUPPLY_TRANSACTION_ID
		AND A.ASSIGNMENT_TYPE = g_OASIS_ASSIGNMENT_TYPE
		AND T.TRANSACTION_ID = A.TO_TRANSACTION_ID
		AND T.BEGIN_DATE <= p_END_DATE
		AND T.END_DATE >= p_BEGIN_DATE;

	-- Populate LOAD_BALANCING_SUPPLY_WORK
	IA.BUILD_WORK_DATA_FROM(p_SUPPLY_TRANSACTION_ID, v_BEGIN_DATE, v_END_DATE, p_TIME_ZONE, p_SCHEDULE_TYPE, g_OASIS_ASSIGNMENT_TYPE, v_CAPACITY_WORK_ID);

	-- Populate LOAD_BALANCING_DEMAND_WORK
	IA.BUILD_WORK_ASSIGNMENTS_TO(p_SUPPLY_TRANSACTION_ID, v_ENERGY_IDs, v_BEGIN_DATE, v_END_DATE, p_TIME_ZONE, p_SCHEDULE_TYPE, g_OASIS_ASSIGNMENT_TYPE, FALSE, FALSE, v_ENERGY_WORK_ID);

	-- Query
	OPEN p_CURSOR FOR
		SELECT SUBSTR(SDT.NO_ROLLUP_YYYY_MM_DD, 1, 10) "SCHEDULE_DATE",
				SUBSTR(SDT.NO_ROLLUP_YYYY_MM_DD, 12) "SCHEDULE_TIME",
				p_SUPPLY_TRANSACTION_ID "SUPPLY_TRANSACTION_ID",
				v_TRANSACTION_NAME "CAPACITY_TRANSACTION_NAME",
				S.IS_FIXED,
				CASE WHEN S.IS_FIXED = 1 THEN S.AMOUNT ELSE NULL END "FIXED_SCHEDULED",
				CASE WHEN S.IS_FIXED = 1 THEN NULL ELSE S.TERM_MAX END "DISP_MAX",
				CASE WHEN S.IS_FIXED = 1 THEN NULL ELSE S.TERM_MIN END "DISP_MIN",
				CASE WHEN S.IS_FIXED = 1 THEN S.TOTAL_ASSIGNED ELSE NULL END "FIXED_TOTAL_ASSIGNED_OLD",
				CASE WHEN S.IS_FIXED = 1 THEN NULL ELSE S.AMOUNT END "DISP_SCHEDULED_OLD",
				S.PRICE "SUPPLY_PRICE",
				L.TRANSACTION_ID "ENERGY_TRANSACTION_ID",
				L.TRANSACTION_NAME "ENERGY_TRANSACTION_NAME",
				L.AMOUNT "ENERGY_AMOUNT",
				L.ASSIGNED "ASSIGNED_AMOUNT",
				L.ASSIGNED "ASSIGNED_AMOUNT_OLD",
--				L.TOTAL_ASSIGNED "SUPPLY_OLD",
				0 "UPDATE_ENERGY",
				--FIND THE TOTAL ASSIGNED TO THIS ENERGY SCHEDULE FROM AN OASIS RESV WITH THE SAME
				--POR AND POD AS THE ONE WE ARE LOOKING AT.
				(SELECT SUM(I.AMOUNT)
					FROM IT_ASSIGNMENT H, IT_ASSIGNMENT_SCHEDULE I, INTERCHANGE_TRANSACTION J
					WHERE H.TO_TRANSACTION_ID = L.TRANSACTION_ID
						AND J.POR_ID = v_POR_ID
						AND J.POD_ID = v_POD_ID
						AND H.FROM_TRANSACTION_ID = J.TRANSACTION_ID
						AND H.ASSIGNMENT_TYPE = g_OASIS_ASSIGNMENT_TYPE
						AND I.ASSIGNMENT_ID = H.ASSIGNMENT_ID
						AND I.OPTION_ID = 0
						AND I.SCHEDULE_DATE = SDT.CUT_DATE
						AND I.STATEMENT_TYPE_ID = p_SCHEDULE_TYPE
						AND I.SCHEDULE_STATE = GA.INTERNAL_STATE) "SUPPLY_OLD"
		FROM SYSTEM_DATE_TIME SDT,
			IT_ASSIGNMENT_WORK S,
			IT_ASSIGNMENT_WORK L
		WHERE SDT.TIME_ZONE = p_TIME_ZONE
			AND SDT.DATA_INTERVAL_TYPE = 1
			AND SDT.DAY_TYPE = '1'
			AND SDT.CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
			AND SDT.MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUMBER
			AND S.WORK_ID(+) = v_CAPACITY_WORK_ID
			AND S.SCHEDULE_DATE(+) = SDT.CUT_DATE
			AND L.WORK_ID(+) = v_ENERGY_WORK_ID
			AND L.SCHEDULE_DATE(+) = SDT.CUT_DATE
		ORDER BY SDT.CUT_DATE, L.TRANSACTION_NAME;

	IA.PURGE_WORK(v_ENERGY_WORK_ID, v_CAPACITY_WORK_ID);

EXCEPTION
	WHEN OTHERS THEN
		IA.PURGE_WORK(v_ENERGY_WORK_ID, v_CAPACITY_WORK_ID);
		NULL_CURSOR(p_CURSOR);
		p_STATUS := SQLCODE;

END CAPACITY_ASSIGN_RPT_DETAIL;
---------------------------------------------------------------------------------------------------
PROCEDURE PUT_BALANCE_REPORT_DETAIL
	(
	p_SUPPLY_TRANSACTION_ID IN NUMBER,
	p_ENERGY_TRANSACTION_ID IN NUMBER,
	p_SCHEDULE_TYPE IN NUMBER,
	p_AS_OF_DATE IN DATE,
	p_TIME_ZONE IN VARCHAR,
    p_SCHEDULE_DATE IN VARCHAR,
    p_SCHEDULE_TIME IN VARCHAR,
    p_DISP_SCHEDULED IN NUMBER,
    p_ASSIGNED_AMOUNT IN NUMBER,
	p_IS_FIXED IN NUMBER,
	p_UPDATE_ENERGY IN NUMBER,
	p_ENERGY_AMOUNT IN NUMBER,
	p_STATUS OUT NUMBER
	) AS
--v_SCHEDULE_TYPE NUMBER(9) := CASE g_ENABLE_SCHEDULE_TYPES WHEN 1 THEN p_SCHEDULE_TYPE ELSE 0 END;
v_SCHEDULE_TYPE NUMBER(9);
v_AMOUNT NUMBER;
v_ASSIGNMENT_ID NUMBER(9);
BEGIN

	IF NOT CAN_WRITE(ITJ.g_MODULE_NAME) THEN
		ERRS.RAISE_NO_WRITE_MODULE(ITJ.g_MODULE_NAME);
	END IF;

	IF GA.ENABLE_SUPPLY_SCHEDULE_TYPES THEN
		v_SCHEDULE_TYPE := p_SCHEDULE_TYPE;
	ELSE
		v_SCHEDULE_TYPE := 0;
	END IF;

	p_STATUS := GA.SUCCESS;

	-- Make sure there is a row in the IT_ASSIGNMENT table.
	BEGIN
		SELECT ASSIGNMENT_ID
		INTO v_ASSIGNMENT_ID
		FROM IT_ASSIGNMENT
		WHERE TO_TRANSACTION_ID = p_ENERGY_TRANSACTION_ID
			AND FROM_TRANSACTION_ID = p_SUPPLY_TRANSACTION_ID
			AND ASSIGNMENT_TYPE = g_OASIS_ASSIGNMENT_TYPE;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN

			--IF THE RECORD DID NOT ALREADY EXIST, THEN DO NOT ADD A ZERO RECORD.
			IF p_ASSIGNED_AMOUNT = 0 THEN
				RETURN;
			END IF;

			SELECT OID.NEXTVAL INTO v_ASSIGNMENT_ID FROM DUAL;
			INSERT INTO IT_ASSIGNMENT
				(
				ASSIGNMENT_ID,
				TO_TRANSACTION_ID,
				FROM_TRANSACTION_ID,
				ASSIGNMENT_TYPE,
				ENTRY_DATE
				)
			VALUES
				(
				v_ASSIGNMENT_ID,
				p_ENERGY_TRANSACTION_ID,
				p_SUPPLY_TRANSACTION_ID,
				g_OASIS_ASSIGNMENT_TYPE,
				SYSDATE
				);
	END;

    -- no contract terms used? then don't update IT_SCHEDULE.AMOUNT for supply schedules
    IF p_IS_FIXED = 1 THEN
		v_AMOUNT := NULL;
	ELSE
		v_AMOUNT := p_DISP_SCHEDULED;
	END IF;
    ITJ.SCHEDULE_UPDATE(p_SUPPLY_TRANSACTION_ID, v_SCHEDULE_TYPE, GA.INTERNAL_STATE, p_SCHEDULE_DATE, p_SCHEDULE_TIME,
				    p_AS_OF_DATE, p_TIME_ZONE, v_AMOUNT, 0, p_STATUS, TRUE, p_ASSIGNED_AMOUNT, p_ENERGY_TRANSACTION_ID,
					g_OASIS_ASSIGNMENT_TYPE);
    IF p_UPDATE_ENERGY = 1 THEN
	    -- if update demand, then the values table should have an additional entry for
    	-- the demand value
	    ITJ.SCHEDULE_UPDATE(p_ENERGY_TRANSACTION_ID, p_SCHEDULE_TYPE, GA.INTERNAL_STATE, p_SCHEDULE_DATE, p_SCHEDULE_TIME,
						    p_AS_OF_DATE, p_TIME_ZONE, p_ENERGY_AMOUNT, 0, p_STATUS);
    END IF;

EXCEPTION
	WHEN OTHERS THEN
		p_STATUS := SQLCODE;
END PUT_BALANCE_REPORT_DETAIL;
---------------------------------------------------------------------------------------------------
END MM_OASIS_COMPARE;
/
