CREATE OR REPLACE PACKAGE BODY MM_TDIE_INVOICE_UI IS
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.2 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
PROCEDURE TUOS_DET_CODE_MAPPING (p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT D.INV_DET_CODE AS CHARGE_NAME,
			M.RATE_NAME,
			M.QUANTITY_NAME
		FROM (SELECT DISTINCT INV_DET_CODE
		      FROM TDIE_TUOS_INV_CHARGE_DTL
			  WHERE INV_DET_TYPE = 'CHARGES FOR ACCOUNT IN CHARGING INTERVAL') D,
			 TDIE_TUOS_INVOICE_DET_CODE_MAP M
		WHERE D.INV_DET_CODE = M.CHARGE_NAME (+)
		ORDER BY CHARGE_NAME;
END TUOS_DET_CODE_MAPPING;
----------------------------------------------------------------------------------------------------
PROCEDURE RATE_NAME_LIST (p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT DISTINCT INV_DET_CODE AS RATE_NAME
		FROM TDIE_TUOS_INV_CHARGE_DTL
		WHERE INV_DET_TYPE = 'RATES'
		ORDER BY INV_DET_CODE;
END RATE_NAME_LIST;
----------------------------------------------------------------------------------------------------
PROCEDURE QUANTITY_NAME_LIST (p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT DISTINCT INV_DET_CODE  AS QUANTITY_NAME
		FROM TDIE_TUOS_INV_CHARGE_DTL
		WHERE INV_DET_TYPE = 'CHARGING PARAMETERS'
		ORDER BY INV_DET_CODE;
END QUANTITY_NAME_LIST;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_TUOS_DET_CODE_MAPPING
	(
	p_CHARGE_NAME    IN VARCHAR2,
	p_RATE_NAME  	 IN VARCHAR2,
	p_QUANTITY_NAME  IN VARCHAR2
	) AS
BEGIN

	MERGE INTO TDIE_TUOS_INVOICE_DET_CODE_MAP T
	USING (SELECT p_CHARGE_NAME AS CHARGE_NAME,
				  CASE
				  	WHEN p_RATE_NAME = '(None)' THEN
				   		NULL
					ELSE
						p_RATE_NAME
				  END AS RATE_NAME,
				  CASE
				  	WHEN p_QUANTITY_NAME = '(None)' THEN
						NULL
					ELSE
						p_QUANTITY_NAME
				  END AS QUANTITY_NAME FROM DUAL) S
	ON (T.CHARGE_NAME = S.CHARGE_NAME)
	WHEN NOT MATCHED THEN
		INSERT VALUES (S.CHARGE_NAME, S.RATE_NAME, S.QUANTITY_NAME)
	WHEN MATCHED THEN
		UPDATE SET T.RATE_NAME = S.RATE_NAME, T.QUANTITY_NAME = S.QUANTITY_NAME;
END PUT_TUOS_DET_CODE_MAPPING;
----------------------------------------------------------------------------------------------------
PROCEDURE TUOS_SUPPLY_UNIT_MAPPING (p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT *
		FROM TDIE_TUOS_SUPPLY_UNIT_MAP M;
END TUOS_SUPPLY_UNIT_MAPPING;
----------------------------------------------------------------------------------------------------
PROCEDURE TUOS_CODE_LIST (p_CODE_TYPE IN VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT C.CODE_VALUE
		FROM TDIE_TUOS_CODES C
		WHERE C.CODE_TYPE = p_CODE_TYPE
		ORDER BY C.CODE_VALUE;
END TUOS_CODE_LIST;
----------------------------------------------------------------------------------------------------
PROCEDURE ACCOUNT_CODE_LIST (p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
	TUOS_CODE_LIST('ACCOUNT_CODE', p_CURSOR);
END ACCOUNT_CODE_LIST;
----------------------------------------------------------------------------------------------------
PROCEDURE METER_NAME_LIST (p_ACCOUNT_CODE IN VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT DISTINCT D.METER_NAME
		FROM TDIE_TUOS_INVOICE_DETAIL D
		WHERE D.ACCOUNT_CODE = p_ACCOUNT_CODE
		ORDER BY D.METER_NAME;
END METER_NAME_LIST;
----------------------------------------------------------------------------------------------------
PROCEDURE SUPPLY_UNIT_LIST (p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT EI.GET_ENTITY_IDENTIFIER_EXTSYS(EC.ED_SERVICE_POINT, U.POD_ID, EC.ES_SEM) AS SUPPLY_UNIT
		FROM SEM_MP_UNITS U
		WHERE U.JURISDICTION = MM_TDIE_UTIL.c_TDIE_JURISDICTION_ROI
		  AND U.RESOURCE_TYPE = 'SU';
END SUPPLY_UNIT_LIST;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_TUOS_SUPPLY_UNIT_MAPPING
	(
	p_ACCOUNT_CODE     IN VARCHAR2,
	p_OLD_ACCOUNT_CODE IN VARCHAR2,
	p_METER_NAME  	   IN VARCHAR2,
	p_OLD_METER_NAME   IN VARCHAR2,
	p_SUPPLY_UNIT      IN VARCHAR2
	) AS
v_TEST VARCHAR2(128);
BEGIN
	ASSERT(p_ACCOUNT_CODE IS NOT NULL, 'Account Code must be set.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_METER_NAME IS NOT NULL, 'Meter Name must be set.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_SUPPLY_UNIT IS NOT NULL, 'Supply Unit must be set.', MSGCODES.c_ERR_ARGUMENT);

	-- Check to see if we are changing the keys
	IF p_ACCOUNT_CODE <> NVL(p_OLD_ACCOUNT_CODE,CONSTANTS.NOT_ASSIGNED_STRING) AND p_METER_NAME <> NVL(p_OLD_METER_NAME,CONSTANTS.NOT_ASSIGNED_STRING) THEN
		BEGIN
			SELECT M.SUPPLY_UNIT
			INTO v_TEST
			FROM TDIE_TUOS_SUPPLY_UNIT_MAP M
			WHERE ACCOUNT_CODE = p_ACCOUNT_CODE
			  AND METER_NAME = p_METER_NAME;

			IF v_TEST IS NOT NULL THEN
				ERRS.RAISE(MSGCODES.c_ERR_DUP_ENTRY, 'A mapping already exists for ACCOUNT_CODE=' || p_ACCOUNT_CODE || ',METER_NAME=' || p_METER_NAME);
			END IF;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				-- Eat it
				NULL;
		END;
	END IF;

	UPDATE TDIE_TUOS_SUPPLY_UNIT_MAP M
	SET M.ACCOUNT_CODE = p_ACCOUNT_CODE,
	    M.METER_NAME = p_METER_NAME,
		M.SUPPLY_UNIT = p_SUPPLY_UNIT
	WHERE M.ACCOUNT_CODE = p_OLD_ACCOUNT_CODE
	  AND M.METER_NAME = p_OLD_METER_NAME;

	IF SQL%NOTFOUND THEN
		INSERT INTO TDIE_TUOS_SUPPLY_UNIT_MAP
			(
			ACCOUNT_CODE,
	    	METER_NAME,
			SUPPLY_UNIT
			)
		VALUES
			(
			p_ACCOUNT_CODE,
	    	p_METER_NAME,
			p_SUPPLY_UNIT
			);
	END IF;

END PUT_TUOS_SUPPLY_UNIT_MAPPING;
----------------------------------------------------------------------------------------------------
PROCEDURE DEL_TUOS_SUPPLY_UNIT_MAPPING
	(
	p_ACCOUNT_CODE     IN VARCHAR2,
	p_METER_NAME  	   IN VARCHAR2
	) AS
BEGIN
	ASSERT(p_ACCOUNT_CODE IS NOT NULL, 'Account Code must be set.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_METER_NAME IS NOT NULL, 'Meter Name must be set.', MSGCODES.c_ERR_ARGUMENT);

	DELETE FROM TDIE_TUOS_SUPPLY_UNIT_MAP M
	WHERE M.ACCOUNT_CODE = p_ACCOUNT_CODE
	  AND M.METER_NAME = p_METER_NAME;
END DEL_TUOS_SUPPLY_UNIT_MAPPING;
----------------------------------------------------------------------------------------------------
PROCEDURE FINANCIAL_SETTLEMENTS
	(
	p_SENDER_CID    IN VARCHAR2,
	p_RECIPIENT_CID IN VARCHAR2,
	p_BEGIN_DATE    IN DATE,
	p_END_DATE      IN DATE,
	p_CURSOR        OUT GA.REFCURSOR
	) AS
	v_SENDER_CID    VARCHAR2(64) := NVL(p_SENDER_CID, CONSTANTS.ALL_STRING);
	v_RECIPIENT_CID VARCHAR2(64);
BEGIN

    -- RECIPIENT_CID IS EITHER THE ALL STRING OR HAS THE EXT IDENT IN PARANTHESIS
    IF NVL(p_RECIPIENT_CID,CONSTANTS.ALL_STRING) =  CONSTANTS.ALL_STRING THEN
        v_RECIPIENT_CID := CONSTANTS.ALL_STRING;
    ELSE
        v_RECIPIENT_CID := SUBSTR(p_RECIPIENT_CID,INSTR(p_RECIPIENT_CID,'(',-1)+1,
            LENGTH(p_RECIPIENT_CID)-INSTR(p_RECIPIENT_CID,'(',-1)-1);
    END IF;

	OPEN p_CURSOR FOR
		SELECT I.INVOICE_NUMBER,
			   I.INVOICE_DATE,
			   EI.GET_ID_FROM_IDENTIFIER_EXTSYS(I.SENDER_CID, EC.ED_PSE, EC.ES_TDIE, UPPER(GET_INVOICE_TYPE_FROM_SENDER(I.SENDER_CID)), 1) AS SENDER_ID,
			   I.SENDER_CID,
			   EI.GET_ID_FROM_IDENTIFIER_EXTSYS(I.RECIPIENT_CID, EC.ED_PSE, EC.ES_TDIE, UPPER(GET_INVOICE_TYPE_FROM_SENDER(I.SENDER_CID)), 1) AS RECIPIENT_ID,
			   I.RECIPIENT_CID,
			   I.RETAIL_INVOICE_ID,
			   P.PROCESS_START_TIME AS RUN_DATE,
			   LOG_REPORTS.GET_STATUS_LEVEL_STRING(P.PROCESS_STATUS, P.WAS_TERMINATED) AS STATUS,
			   S.STATEMENT_TYPE_NAME,
			   X.TOTAL_EXTERNAL_CHARGES,
			   X.TOTAL_EXTERNAL_VAT,
			   X.TOTAL_EXTERNAL_AMOUNT,
			   X.TOTAL_INTERNAL_CHARGES,
			   X.TOTAL_INTERNAL_VAT,
			   X.TOTAL_INTERNAL_AMOUNT
		FROM RETAIL_INVOICE R,
			 PROCESS_LOG P,
			 STATEMENT_TYPE S,
			 (SELECT RETAIL_INVOICE_ID,
					 SUM(CASE WHEN C.CHARGE_TYPE = 'Tax' THEN 0 ELSE X.TOTAL_EXTERNAL_AMOUNT END) AS TOTAL_EXTERNAL_CHARGES,
					 SUM(CASE WHEN C.CHARGE_TYPE = 'Tax' THEN X.TOTAL_EXTERNAL_AMOUNT ELSE 0 END) AS TOTAL_EXTERNAL_VAT,
					 SUM(X.TOTAL_EXTERNAL_AMOUNT) AS TOTAL_EXTERNAL_AMOUNT,
					 SUM(CASE WHEN C.CHARGE_TYPE = 'Tax' THEN 0 ELSE X.TOTAL_INTERNAL_AMOUNT END) AS TOTAL_INTERNAL_CHARGES,
					 SUM(CASE WHEN C.CHARGE_TYPE = 'Tax' THEN X.TOTAL_INTERNAL_AMOUNT ELSE 0 END) AS TOTAL_INTERNAL_VAT,
					 SUM(X.TOTAL_INTERNAL_AMOUNT) AS TOTAL_INTERNAL_AMOUNT
			  FROM RETAIL_INVOICE_COMPONENT X,
				   COMPONENT C
			  WHERE X.COMPONENT_ID = C.COMPONENT_ID
			  GROUP BY X.RETAIL_INVOICE_ID) X,
			 (SELECT D.INVOICE_NUMBER,
					 D.MARKET_TIMESTAMP AS INVOICE_DATE,
					 D.SENDER_CID,
					 D.RECIPIENT_CID,
					 D.RETAIL_INVOICE_ID
			  FROM TDIE_DUOS_INVOICE D
			  WHERE (v_SENDER_CID = CONSTANTS.ALL_STRING OR v_SENDER_CID = D.SENDER_CID)
					AND (v_RECIPIENT_CID = CONSTANTS.ALL_STRING OR v_RECIPIENT_CID = D.RECIPIENT_CID)
					AND TRUNC(D.MARKET_TIMESTAMP) >= p_BEGIN_DATE
					AND TRUNC(D.MARKET_TIMESTAMP) <= p_END_DATE
			  UNION ALL
			  SELECT U.INVOICE_NUMBER,
					 U.MARKET_TIMESTAMP AS INVOICE_DATE,
					 U.SENDER_CID,
					 U.RECIPIENT_CID,
					 U.RETAIL_INVOICE_ID
			  FROM TDIE_UOS_INVOICE U
			  WHERE (v_SENDER_CID = CONSTANTS.ALL_STRING OR v_SENDER_CID = U.SENDER_CID)
					AND (v_RECIPIENT_CID = CONSTANTS.ALL_STRING OR v_RECIPIENT_CID = U.RECIPIENT_CID)
					AND TRUNC(U.MARKET_TIMESTAMP) >= p_BEGIN_DATE
					AND TRUNC(U.MARKET_TIMESTAMP) <= p_END_DATE
			  UNION ALL
			  SELECT T.INVOICE_NUMBER,
					 T.INVOICE_DATE,
					 MM_TDIE_UTIL.c_TDIE_TUOS_ROI_SENDER AS SENDER_CID,
					 T.CUSTOMER_ID AS RECIPIENT_CID,
					 T.RETAIL_INVOICE_ID
			  FROM TDIE_TUOS_INVOICE T
			  WHERE (v_SENDER_CID = CONSTANTS.ALL_STRING OR v_SENDER_CID = MM_TDIE_UTIL.c_TDIE_TUOS_ROI_SENDER)
					AND (v_RECIPIENT_CID = CONSTANTS.ALL_STRING OR
					v_RECIPIENT_CID = T.CUSTOMER_ID)
					AND T.INVOICE_DATE >= p_BEGIN_DATE
					AND T.INVOICE_DATE <= p_END_DATE
              UNION ALL
              SELECT DN.INVOICE_NUMBER,
                     DN.MARKET_TIMESTAMP,
                     DN.PROVIDER AS SENDER_CID,
                     DN.SUPPLIER AS RECIPIENT_CID,
                     DN.RETAIL_INVOICE_ID
              FROM TDIE_DUOS_NI_INVOICE DN
              WHERE (v_SENDER_CID = CONSTANTS.ALL_STRING OR v_SENDER_CID = DN.PROVIDER)
                    AND (v_RECIPIENT_CID = CONSTANTS.ALL_STRING OR v_RECIPIENT_CID = DN.SUPPLIER)
                    AND TRUNC(DN.MARKET_TIMESTAMP) >= p_BEGIN_DATE
					AND TRUNC(DN.MARKET_TIMESTAMP) <= p_END_DATE) I
		WHERE R.RETAIL_INVOICE_ID(+) = I.RETAIL_INVOICE_ID
			  AND R.PROCESS_ID = P.PROCESS_ID(+)
			  AND R.STATEMENT_TYPE_ID = S.STATEMENT_TYPE_ID(+)
			  AND R.RETAIL_INVOICE_ID = X.RETAIL_INVOICE_ID(+)
		ORDER BY 2, 4, 6, 1;

END FINANCIAL_SETTLEMENTS;
----------------------------------------------------------------------------------------------------
PROCEDURE RECIPIENT_LIST
	(
	p_SENDER_CID IN VARCHAR2,
	p_CURSOR OUT GA.REFCURSOR
	) AS

	v_SENDER_CID VARCHAR2(16) :=
		NVL(p_SENDER_CID, CONSTANTS.ALL_STRING);

BEGIN
	OPEN p_CURSOR FOR
		SELECT (CASE WHEN X.PSE_ID IS NOT NULL THEN EI.GET_ENTITY_NAME(EC.ED_PSE,X.PSE_ID)
            ELSE X.RECIPIENT_CID END) || ' (' || X.RECIPIENT_CID || ')' AS RECIPIENT_CID
		FROM (SELECT D.RECIPIENT_CID,
                EI.GET_ID_FROM_IDENTIFIER_EXTSYS(D.RECIPIENT_CID, EC.ED_PSE, EC.ES_TDIE,
                    MM_TDIE_UTIL.c_TDIE_EXTERNAL_TYPE_DUOS, 1) AS PSE_ID
			  FROM TDIE_DUOS_INVOICE D
				WHERE D.SENDER_CID = v_SENDER_CID
					OR v_SENDER_CID = CONSTANTS.ALL_STRING
			  UNION
			  SELECT U.RECIPIENT_CID,
                EI.GET_ID_FROM_IDENTIFIER_EXTSYS(U.RECIPIENT_CID, EC.ED_PSE, EC.ES_TDIE,
                    MM_TDIE_UTIL.c_TDIE_EXTERNAL_TYPE_UOS, 1) AS PSE_ID
			  FROM TDIE_UOS_INVOICE U
				  WHERE U.SENDER_CID = v_SENDER_CID
				  	OR v_SENDER_CID = CONSTANTS.ALL_STRING
			  UNION
			  SELECT T.CUSTOMER_ID AS RECIPIENT_CID,
                EI.GET_ID_FROM_IDENTIFIER_EXTSYS(T.CUSTOMER_ID, EC.ED_PSE, EC.ES_TDIE,
                    MM_TDIE_UTIL.c_TDIE_EXTERNAL_TYPE_TUOS, 1) AS PSE_ID
			  	FROM TDIE_TUOS_INVOICE T
				WHERE v_SENDER_CID = MM_TDIE_UTIL.c_TDIE_TUOS_ROI_SENDER
					OR v_SENDER_CID = CONSTANTS.ALL_STRING
              UNION
              SELECT DN.SUPPLIER AS RECIPIENT_CID,
                EI.GET_ID_FROM_IDENTIFIER_EXTSYS(DN.SUPPLIER, EC.ED_PSE, EC.ES_TDIE,
                    MM_TDIE_UTIL.c_TDIE_EXTERNAL_TYPE_DUOS_NI, 1) AS PSE_ID      
              FROM TDIE_DUOS_NI_INVOICE DN
                  WHERE DN.PROVIDER = v_SENDER_CID
                    OR v_SENDER_CID = CONSTANTS.ALL_STRING) X
        ORDER BY X.RECIPIENT_CID;

END RECIPIENT_LIST;
----------------------------------------------------------------------------------------------------
PROCEDURE STATEMENT_TYPE_LIST(p_CURSOR OUT GA.REFCURSOR) AS
    v_AVAILABLE_IDS ID_TABLE := SD.GET_ALLOWED_ENTITY_ID_TABLE(SD.g_ACTION_STATEMENT_TYPE_LIST);
BEGIN
	OPEN p_CURSOR FOR
		SELECT DISTINCT B.STATEMENT_TYPE_ID, B.STATEMENT_TYPE_NAME, B.STATEMENT_TYPE_ORDER
		FROM SETTLEMENT_TYPE A, STATEMENT_TYPE B,
            TABLE(CAST(v_AVAILABLE_IDS AS ID_TABLE)) X
		WHERE A.STATEMENT_TYPE_ID = B.STATEMENT_TYPE_ID
            AND X.ID IN (SD.g_ALL_DATA_ENTITY_ID, A.STATEMENT_TYPE_ID)
        ORDER BY B.STATEMENT_TYPE_ORDER, B.STATEMENT_TYPE_NAME;
END STATEMENT_TYPE_LIST;
----------------------------------------------------------------------------------------------------
PROCEDURE ACCOUNT_MPRN_LIST
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SEARCH_BY IN NUMBER, -- 0 By MPRN or 1 By Account
	p_SEARCH_STRING IN VARCHAR2,
	p_INTERVAL_TYPE IN NUMBER, -- 0 Non-Interval or 1 Interval
	p_CURSOR IN OUT GA.REFCURSOR
	) AS
	v_SEARCH_STRING VARCHAR2(1024) := GUI_UTIL.FIX_SEARCH_STRING(p_SEARCH_STRING);
BEGIN
    IF p_SEARCH_STRING IS NULL THEN
        OPEN p_CURSOR FOR
        SELECT NULL
        FROM DUAL;
    ELSE
        OPEN p_CURSOR FOR
			SELECT /*+ ordered index(asl pk_account_service_location)
						use_nl(asl) */
				DISTINCT A.ACCOUNT_ID, ACCOUNT_NAME
            FROM (SELECT /*+ ordered index(esi external_system_ident_ix01) */ ACCOUNT_ID, ACCOUNT_NAME
					FROM EXTERNAL_SYSTEM_IDENTIFIER ESI,
						ACCOUNT A
					WHERE p_SEARCH_BY = 0
						AND ESI.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
						AND ESI.ENTITY_ID = A.ACCOUNT_ID
						AND ESI.EXTERNAL_SYSTEM_ID = EC.ES_TDIE
						AND ESI.IDENTIFIER_TYPE = EI.g_DEFAULT_IDENTIFIER_TYPE
						AND ESI.EXTERNAL_IDENTIFIER LIKE v_SEARCH_STRING
						AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER
					UNION
					SELECT /*+ index(a account_ix02) */ ACCOUNT_ID, ACCOUNT_NAME
					FROM ACCOUNT A
					WHERE p_SEARCH_BY = 0
						AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER
						AND A.ACCOUNT_EXTERNAL_IDENTIFIER LIKE v_SEARCH_STRING
					UNION
					SELECT /*+ index(a account_ix01) */ ACCOUNT_ID, ACCOUNT_NAME
					FROM ACCOUNT A
					WHERE p_SEARCH_BY = 1
						AND A.ACCOUNT_MODEL_OPTION = ACCOUNTS_METERS.c_ACCT_MODEL_OPTION_METER
						AND A.ACCOUNT_NAME LIKE v_SEARCH_STRING
					) A,
                ACCOUNT_SERVICE_LOCATION ASL,
                SERVICE_LOCATION SL,
                SERVICE_LOCATION_METER SLM,
                METER M
            WHERE ASL.ACCOUNT_ID = A.ACCOUNT_ID
                AND ASL.BEGIN_DATE <= p_END_DATE
                AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
                AND SL.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
                AND SLM.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
                AND SLM.BEGIN_DATE <= NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE)
                AND NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE) >= ASL.BEGIN_DATE
                AND M.METER_ID = SLM.METER_ID
                AND ((M.METER_TYPE = ACCOUNTS_METERS.c_METER_TYPE_INTERVAL AND p_INTERVAL_TYPE = 1) OR
                     (M.METER_TYPE = ACCOUNTS_METERS.c_METER_TYPE_PERIOD AND p_INTERVAL_TYPE = 0))
            ORDER BY ACCOUNT_NAME;
    END IF;

END ACCOUNT_MPRN_LIST;
--------------------------------------------------------------------------
PROCEDURE SENDER_LIST
	(
	p_INTERVAL_TYPE IN NUMBER, -- 0-Non-Interval or 1-Interval
	p_CURSOR IN OUT GA.REFCURSOR
	) AS
BEGIN
		OPEN p_CURSOR FOR
			SELECT S.VALUE AS SENDER
			FROM SYSTEM_LABEL S
			WHERE S.MODEL_ID = 0
				AND S.MODULE = 'MarketExchange'
				AND S.KEY1 = 'TDIE'
				AND S.KEY2 = 'SENDER_CID'
				AND S.KEY3 = '?'
				AND S.CODE = (CASE WHEN p_INTERVAL_TYPE = 0 THEN '0' ELSE S.CODE END)
			ORDER BY S.POSITION;
END SENDER_LIST;
--------------------------------------------------------------------------
FUNCTION GET_INVOICE_TYPE_FROM_SENDER
	(
		p_SENDER_CID IN VARCHAR2
	) RETURN VARCHAR2 AS
BEGIN
	RETURN CASE p_SENDER_CID
			WHEN MM_TDIE_UTIL.c_TDIE_TUOS_ROI_SENDER THEN 'TUoS' -- EirGrid
			WHEN MM_TDIE_UTIL.c_TDIE_TUOS_NI_SENDER THEN 'UoS' -- SONI
			WHEN MM_TDIE_UTIL.c_TDIE_DUOS_ROI_SENDER THEN 'DUoS' -- ESBN
			WHEN MM_TDIE_UTIL.c_TDIE_UOS_SENDER THEN 'UoS' -- NIE T&D
            WHEN MM_TDIE_UTIL.c_TDIE_DUOS_NI_SENDER THEN 'DUoS NI' -- TDO
            WHEN MM_TDIE_UTIL.c_TDIE_CCL_SENDER THEN 'CCL' -- CCL
            WHEN MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER THEN 'PSO' -- PSO
            WHEN MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER THEN 'PSO' -- PSO
            WHEN MM_TDIE_UTIL.c_TDIE_SSS_SENDER THEN 'SSS'
		END;
END GET_INVOICE_TYPE_FROM_SENDER;
--------------------------------------------------------------------------
FUNCTION GET_INVOICE_TYPE_FRM_SENDER_ID
	(
		p_SENDER_ID IN VARCHAR2
	) RETURN VARCHAR2 AS
BEGIN
	RETURN CASE p_SENDER_ID
			WHEN MM_TDIE_UTIL.c_TDIE_TUOS_ROI_SENDER_PSE_ID THEN 'TUoS' -- EirGrid
			WHEN MM_TDIE_UTIL.c_TDIE_TUOS_NI_SENDER_PSE_ID THEN 'UoS' -- SONI
			WHEN MM_TDIE_UTIL.c_TDIE_DUOS_ROI_SENDER_PSE_ID THEN 'DUoS' -- ESBN
            WHEN MM_TDIE_UTIL.c_TDIE_UOS_SENDER_PSE_ID THEN 'UoS' -- NIE T&D
            WHEN MM_TDIE_UTIL.c_TDIE_CCL_SENDER_PSE_ID THEN 'CCL' -- CCL
            WHEN MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER_PSE_ID THEN 'PSO' -- PSO
            WHEN MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER_PSE_ID THEN 'PSO' -- PSO
            WHEN MM_TDIE_UTIL.c_TDIE_SSS_SENDER_PSE_ID THEN 'SSS'
		END;
END GET_INVOICE_TYPE_FRM_SENDER_ID;
--------------------------------------------------------------------------
PROCEDURE ACCOUNT_HISTORY
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INTERVAL_TYPE IN NUMBER, -- 0-Non-Interval or 1-Interval
	p_ACCOUNT_ID IN NUMBER,
	p_TIME_ZONE IN VARCHAR2,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS
	v_CUT_BEGIN DATE;
	v_CUT_END DATE;
BEGIN
	SP.CHECK_SYSTEM_DATE_TIME(p_TIME_ZONE,p_BEGIN_DATE,p_END_DATE);

	UT.CUT_DATE_RANGE(CONSTANTS.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE, p_TIME_ZONE,
						v_CUT_BEGIN, v_CUT_END);
	-- Non-Interval
	IF p_INTERVAL_TYPE = 0 THEN
		OPEN p_CURSOR FOR
			SELECT C.BILL_CODE,
				C.BEGIN_DATE,
				C.END_DATE,
				P.PERIOD_NAME,
				NVL(C.METERED_USAGE, C.METERED_DEMAND) AS METERED_USAGE,
				C.UNIT_OF_MEASUREMENT,
				C.BILL_PROCESSED_DATE,
				M.METER_ID,
				M.METER_NAME,
				C.IGNORE_CONSUMPTION
			FROM ACCOUNT_SERVICE ASRV,
				SERVICE S,
				SERVICE_CONSUMPTION C,
				PERIOD P,
				METER M
			WHERE ASRV.ACCOUNT_ID = p_ACCOUNT_ID
				AND S.ACCOUNT_SERVICE_ID = ASRV.ACCOUNT_SERVICE_ID
				AND M.METER_ID (+) = ASRV.METER_ID
				AND S.MODEL_ID = GA.ELECTRIC_MODEL
				AND S.SCENARIO_ID = GA.BASE_SCENARIO_ID
				AND S.AS_OF_DATE = CONSTANTS.LOW_DATE
				AND C.SERVICE_ID = S.SERVICE_ID
				AND C.BEGIN_DATE <= p_END_DATE
				AND NVL(C.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
				AND C.RECEIVED_DATE = CONSTANTS.LOW_DATE
				AND C.CONSUMPTION_CODE = GA.ACTUAL_SERVICE
				AND P.PERIOD_ID(+) = C.PERIOD_ID;
	-- Interval
	ELSIF p_INTERVAL_TYPE = 1 THEN
		OPEN p_CURSOR FOR
			SELECT 	CASE GET_INTERVAL_ABBREVIATION(M.METER_INTERVAL)
					WHEN 'DD' THEN TRIM(SDT.DAY_YYYY_MM_DD)
					WHEN 'MM' THEN TRIM(SDT.MONTH_YYYY_MM_DD)
					WHEN 'MI30' THEN TRIM(SDT.MI30_YYYY_MM_DD)
					WHEN 'MI15' THEN TRIM(SDT.MI15_YYYY_MM_DD)
					ELSE TRIM(SDT.HOUR_YYYY_MM_DD) END as INTVL_ABBR,
				1 AS SORT_BY,
				'Net Usage' AS NET_USAGE_OR_OP_CODE,
				'KWH' AS UOM,
				-- Import Usage - Export Usage
				SUM(CASE WHEN L.SERVICE_CODE = 'A' THEN L.LOAD_VAL ELSE 0 END
					- CASE WHEN L.SERVICE_CODE = 'S' THEN L.LOAD_VAL ELSE 0 END) AS VALUE,
				'Meter' AS DATA_TYPE,
				M.METER_ID,
				M.METER_NAME
			FROM ACCOUNT_SERVICE ASRV,
				SERVICE S,
				SERVICE_LOAD L,
				SYSTEM_DATE_TIME SDT,
				METER M
			WHERE ASRV.ACCOUNT_ID = p_ACCOUNT_ID
				AND S.ACCOUNT_SERVICE_ID = ASRV.ACCOUNT_SERVICE_ID
				AND S.MODEL_ID = GA.ELECTRIC_MODEL
				AND S.SCENARIO_ID = GA.BASE_SCENARIO_ID
				AND S.AS_OF_DATE = CONSTANTS.LOW_DATE
				AND L.SERVICE_ID = S.SERVICE_ID
				AND L.SERVICE_CODE = GA.ACTUAL_SERVICE
				AND L.LOAD_DATE = SDT.CUT_DATE
				AND SDT.TIME_ZONE = p_TIME_ZONE
				AND SDT.DATA_INTERVAL_TYPE = 1
				AND SDT.DAY_TYPE = '1'
				AND SDT.CUT_DATE BETWEEN v_CUT_BEGIN AND v_CUT_END
				AND M.METER_ID = ASRV.METER_ID
			GROUP BY CASE GET_INTERVAL_ABBREVIATION(M.METER_INTERVAL)
					WHEN 'DD' THEN TRIM(SDT.DAY_YYYY_MM_DD)
					WHEN 'MM' THEN TRIM(SDT.MONTH_YYYY_MM_DD)
					WHEN 'MI30' THEN TRIM(SDT.MI30_YYYY_MM_DD)
					WHEN 'MI15' THEN TRIM(SDT.MI15_YYYY_MM_DD)
					ELSE TRIM(SDT.HOUR_YYYY_MM_DD) END,
				M.METER_ID,
				M.METER_NAME
			UNION ALL
			SELECT 	CASE GET_INTERVAL_ABBREVIATION(M.METER_INTERVAL)
					WHEN 'DD' THEN TRIM(SDT.DAY_YYYY_MM_DD)
					WHEN 'MM' THEN TRIM(SDT.MONTH_YYYY_MM_DD)
					WHEN 'MI30' THEN TRIM(SDT.MI30_YYYY_MM_DD)
					WHEN 'MI15' THEN TRIM(SDT.MI15_YYYY_MM_DD)
					ELSE TRIM(SDT.HOUR_YYYY_MM_DD) END as INTVL_ABBR,
				CASE PT.OPERATION_CODE WHEN 'A' THEN 2 WHEN 'S' THEN 3 END AS SORT_BY,
				CASE PT.OPERATION_CODE
						WHEN 'A' THEN 'Import'
						WHEN 'S' THEN 'Export' END AS NET_USAGE_OR_OP_CODE,
				PT.UOM,
				SUM(VAL.METER_VAL) AS VALUE,
				'Channel' AS DATA_TYPE,
				M.METER_ID,
				M.METER_NAME
			FROM ACCOUNT_SERVICE_LOCATION ASL,
				SERVICE_LOCATION SL,
				SERVICE_LOCATION_METER SLM,
				METER M,
				TX_SUB_STATION_METER_POINT PT,
				TX_SUB_STATION_METER_PT_VALUE VAL,
				SYSTEM_DATE_TIME SDT
			WHERE -- Account/Service Location/Meter Heirarchy
				ASL.ACCOUNT_ID(+) = p_ACCOUNT_ID
				AND ASL.BEGIN_DATE(+) <= p_END_DATE
				AND NVL(ASL.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
				AND SL.SERVICE_LOCATION_ID(+) = ASL.SERVICE_LOCATION_ID
				AND SLM.SERVICE_LOCATION_ID(+) = ASL.SERVICE_LOCATION_ID
				AND SLM.BEGIN_DATE(+) <= NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE)
				AND NVL(SLM.END_DATE(+),CONSTANTS.HIGH_DATE) >= ASL.BEGIN_DATE
				AND M.METER_ID(+) = SLM.METER_ID
				AND ((M.METER_TYPE = 'Interval' AND p_INTERVAL_TYPE = 1) OR
					 (M.METER_TYPE = 'Period' AND p_INTERVAL_TYPE = 0))
				-- Channel Data
				AND PT.RETAIL_METER_ID = M.METER_ID
				AND PT.OPERATION_CODE IN ('A', 'S')
				AND PT.BEGIN_DATE <= p_END_DATE
				AND NVL(PT.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
				AND VAL.METER_POINT_ID = PT.METER_POINT_ID
				AND VAL.METER_DATE = SDT.CUT_DATE
				AND SDT.TIME_ZONE = p_TIME_ZONE
				AND SDT.DATA_INTERVAL_TYPE = 1
				AND SDT.DAY_TYPE = '1'
				AND SDT.CUT_DATE BETWEEN v_CUT_BEGIN AND v_CUT_END
			GROUP BY CASE GET_INTERVAL_ABBREVIATION(M.METER_INTERVAL)
					WHEN 'DD' THEN TRIM(SDT.DAY_YYYY_MM_DD)
					WHEN 'MM' THEN TRIM(SDT.MONTH_YYYY_MM_DD)
					WHEN 'MI30' THEN TRIM(SDT.MI30_YYYY_MM_DD)
					WHEN 'MI15' THEN TRIM(SDT.MI15_YYYY_MM_DD)
					ELSE TRIM(SDT.HOUR_YYYY_MM_DD) END,
				CASE PT.OPERATION_CODE WHEN 'A' THEN 2 WHEN 'S' THEN 3 END,
				CASE PT.OPERATION_CODE WHEN 'A' THEN 'Import' WHEN 'S' THEN 'Export' END,
				PT.UOM,
				M.METER_ID,
				M.METER_NAME
		ORDER BY METER_NAME, INTVL_ABBR;
	END IF;

END ACCOUNT_HISTORY;
--------------------------------------------------------------------------
PROCEDURE ACCOUNT_HISTORY_DETAILS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_SENDER_CID IN VARCHAR2,
	p_ACCOUNT_ID IN NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS
	v_MPRN VARCHAR2(256);
	v_INVOICE_TYPE VARCHAR2(32) := 	GET_INVOICE_TYPE_FROM_SENDER(p_SENDER_CID);
BEGIN

	-- THE ACCOUNT_ID FILTER WAS REFRESHED TO BE EMTPY, WHICH LAUNCHED A REPORT REFRESH
	-- JUST RETURN AN EMPTY CURSOR
	IF p_ACCOUNT_ID IS NULL THEN
		OPEN p_CURSOR FOR SELECT NULL FROM DUAL;
		RETURN;
	END IF;

	v_MPRN := EI.GET_ENTITY_IDENTIFIER_EXTSYS(EC.ED_ACCOUNT, p_ACCOUNT_ID,
						EC.ES_TDIE, EI.g_DEFAULT_IDENTIFIER_TYPE, 1);

	IF v_INVOICE_TYPE = 'DUoS' THEN
		OPEN p_CURSOR FOR
			SELECT INVOICE_NUMBER,
			  INVOICE_ITEM_NUMBER,
			  MPRN,
			  ADJUSTED_REFERENCE,
			  INVOICE_TYPE,
			  DUOS_GROUP,
			  BILLING_BEGIN_DATE,
			  BILLING_END_DATE,
			  ENERGY_CONSUMPTION_DAY,
			  ENERGY_CHARGE_DAY,
			  ENERGY_CONSUMPTION_NIGHT,
			  ENERGY_CHARGE_NIGHT,
			  ENERGY_CONSUMPTION_24HR,
			  ENERGY_CHARGE_24HR,
			  STANDING_CHARGE,
			  CAPACITY_CHARGE,
			  MAX_IMPORT_CAPACITY,
			  MAX_KVA,
			  MIC_SURCHARGE,
			  REACTIVE_ENERGY,
			  POWER_FACTOR_SURCHARGE,
			  NET_AMOUNT,
			  GROSS_AMOUNT
			FROM TDIE_DUOS_INVOICE_DETAIL D
			WHERE D.MPRN = v_MPRN
				AND D.BILLING_BEGIN_DATE <= p_END_DATE
				AND D.BILLING_END_DATE >= p_BEGIN_DATE
			ORDER BY D.BILLING_BEGIN_DATE,
			 	D.BILLING_END_DATE;
	ELSIF v_INVOICE_TYPE = 'UoS' THEN
		OPEN p_CURSOR FOR
			SELECT INVOICE_NUMBER,
				SENDER_CID,
				RECORD_TYPE,
				MPRN,
				METER_ID_SERIAL_NUMBER,
				START_DATE,
				END_DATE,
				TIMESLOT_CODE,
				UNIT_OF_MEASURE,
				START_READ,
				START_READ_TYPE,
				END_READ,
				END_READ_TYPE,
				TOTAL_UNITS,
				ESTIMATED_UNITS,
				UOS_TARIFF,
				RATE,
				CHARGE,
				LAST_ACTUAL_READ_VALUE,
				LAST_ACTUAL_READ_DATE
			FROM TDIE_UOS_INVOICE_DETAIL U
			WHERE U.MPRN = v_MPRN
				AND U.START_DATE <= p_END_DATE
				AND U.END_DATE >= p_BEGIN_DATE
			ORDER BY U.START_DATE,
			 	U.END_DATE;
	ELSIF v_INVOICE_TYPE = 'TUoS' THEN
		OPEN p_CURSOR FOR
			SELECT TID.INVOICE_NUMBER,
				TID.ACCOUNT_XID,
				TID.ACCOUNT_CATEGORY,
				TID.ACCOUNT_TYPE,
				TID.ACCOUNT_CODE,
				TID.ACCOUNT_NAME,
				TID.METER_XID,
				TID.METER_CATEGORY,
				TID.METER_TYPE,
				TID.METER_CODE,
				TID.METER_NAME,
				TID.BILL_NAME,
				TID.BILL_CONTACT,
				TID.BILL_ADDRESS1,
				TID.BILL_ADDRESS2,
				TID.BILL_CITY,
				TID.BILL_REGION,
				TID.BILL_COUNTRY,
				TID.BILL_POSTAL_CODE,
				TID.MPRN,
				TID.SUPPLY_UNIT,
				TIC.INV_DET_START_DATE,
				TIC.INV_DET_END_DATE,
				TIC.INV_DET_CATEGORY,
				TIC.INV_DET_TYPE,
				TIC.INV_DET_CODE,
				TIC.INV_DET_CATEGORY2,
				TIC.INV_DET_SEQ,
				TIC.INV_DET_NAME,
				TIC.INV_DET_VALUE,
				TIC.INV_DET_UOM,
				TIC.MULTI_CIP_FLAG,
				TIC.VAT_CHARGE,
				TIC.INV_DET_VALUE_CHARGE,
				TIC.INV_DET_VALUE_CHARGE_NO_VAT,
				TIC.INV_DET_TYPE_SORT,
				TIC.EIR_RPT_INV_DET_ID,
				TIC.BILL_DATE,
				TIC.CIP_DATE,
				TIC.INV_STATUS_DRAFT,
				TIC.INV_NUMBER_RELEASED,
				TIC.INV_DATE_RELEASED,
				TIC.INV_DET_NOTES,
				TIC.INV_DET_NOTE_SORT
			FROM TDIE_TUOS_INVOICE_DETAIL TID,
				TDIE_TUOS_INV_CHARGE_DTL TIC
			WHERE TID.MPRN = v_MPRN
				AND TIC.INVOICE_NUMBER = TID.INVOICE_NUMBER
				AND TIC.ACCOUNT_XID = TID.ACCOUNT_XID
				AND TIC.METER_NAME = TID.METER_NAME
				AND TIC.INV_DET_START_DATE <= p_END_DATE
				AND TIC.INV_DET_END_DATE >= p_BEGIN_DATE
			ORDER BY TIC.INVOICE_NUMBER,
				TIC.INV_DET_START_DATE,
				TIC.INV_DET_END_DATE,
				TIC.INV_DET_CATEGORY,
				TIC.INV_DET_TYPE,
				TIC.INV_DET_CODE,
				TIC.INV_DET_CATEGORY2,
				TIC.INV_DET_SEQ,
				TIC.INV_DET_NOTE_SORT;
	ELSE
		OPEN p_CURSOR FOR
			SELECT NULL FROM DUAL;
	END IF;

END ACCOUNT_HISTORY_DETAILS;
--------------------------------------------------------------------------
PROCEDURE UNSETTLED_ACCOUNTS
	(
	p_DAYS_BACK NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

v_DATE	DATE := TRUNC(SYSDATE-p_DAYS_BACK);

BEGIN

	OPEN p_CURSOR FOR
		-- inline view and outer joins to ENTITY_GROUP_ASSIGNMENT because using a scalar
		-- sub-query to identify the DG group was *killing* performance
		SELECT A.*,
			MAX(G.ENTITY_GROUP_NAME) as ENTITY_GROUP_NAME
		FROM (SELECT NVL(ESI.EXTERNAL_IDENTIFIER,A.ACCOUNT_EXTERNAL_IDENTIFIER) AS MPRN,
					A.ACCOUNT_ID,
					A.ACCOUNT_NAME,
					M.METER_NAME,
					C.BILL_CODE,
					C.BEGIN_DATE,
					C.END_DATE,
					P.PERIOD_NAME,
					C.METERED_USAGE,
					C.UNIT_OF_MEASUREMENT,
					C.ENTRY_DATE,
					C.IGNORE_CONSUMPTION
				FROM SERVICE_CONSUMPTION C,
					SERVICE S,
					ACCOUNT_SERVICE ASRV,
					ACCOUNT A,
					EXTERNAL_SYSTEM_IDENTIFIER ESI,
					METER M,
					PERIOD P
				-- identify which recods have not been settled
				WHERE NVL(C.BILL_PROCESSED_DATE,LOW_DATE) = CONSTANTS.LOW_DATE
					AND C.ENTRY_DATE < v_DATE
					AND S.SERVICE_ID = C.SERVICE_ID
					AND S.MODEL_ID = GA.ELECTRIC_MODEL
					AND S.SCENARIO_ID = GA.BASE_SCENARIO_ID
					AND ASRV.ACCOUNT_SERVICE_ID = S.ACCOUNT_SERVICE_ID
					AND A.ACCOUNT_ID = ASRV.ACCOUNT_ID
					AND A.ACCOUNT_MODEL_OPTION = 'Meter'
					-- joining instead of using EI APIs because this is much faster than function calls
					AND ESI.ENTITY_ID(+) = A.ACCOUNT_ID
					AND ESI.ENTITY_DOMAIN_ID(+) = EC.ED_ACCOUNT
					AND ESI.EXTERNAL_SYSTEM_ID(+) = EC.ES_TDIE
					AND ESI.IDENTIFIER_TYPE(+) = EI.g_DEFAULT_IDENTIFIER_TYPE
					AND M.METER_ID = ASRV.METER_ID
					AND P.PERIOD_ID = C.PERIOD_ID) A,
			ENTITY_GROUP G,
			ENTITY_GROUP_ASSIGNMENT GA
		WHERE GA.ENTITY_ID(+) = A.ACCOUNT_ID
			AND A.END_DATE BETWEEN GA.BEGIN_DATE(+) AND NVL(GA.END_DATE(+),CONSTANTS.HIGH_DATE)
			AND G.ENTITY_GROUP_ID(+) = GA.ENTITY_GROUP_ID
			AND G.GROUP_CATEGORY(+) = 'Distribution Group'
			AND G.ENTITY_DOMAIN_ID(+) = EC.ED_ACCOUNT
		GROUP BY A.MPRN, A.ACCOUNT_ID, A.ACCOUNT_NAME, A.METER_NAME, A.BILL_CODE, A.BEGIN_DATE, A.END_DATE,
			A.PERIOD_NAME, A.METERED_USAGE, A.UNIT_OF_MEASUREMENT, A.ENTRY_DATE, A.IGNORE_CONSUMPTION
		ORDER BY A.MPRN, A.ACCOUNT_NAME, A.METER_NAME, A.BILL_CODE, A.BEGIN_DATE;

END UNSETTLED_ACCOUNTS;
--------------------------------------------------------------------------
PROCEDURE UNMETERED_ACCOUNTS
	(
	p_DAYS_BACK NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS

v_BEGIN_DATE	DATE := TRUNC(SYSDATE-p_DAYS_BACK);
v_END_DATE 		DATE := TRUNC(SYSDATE);

BEGIN

	OPEN p_CURSOR FOR
		-- inline view and outer joins to ENTITY_GROUP_ASSIGNMENT because using a scalar
		-- sub-query to identify the DG group was *killing* performance
		SELECT A.*,
			MAX(G.ENTITY_GROUP_NAME) as ENTITY_GROUP_NAME
		FROM (SELECT NVL(ESI.EXTERNAL_IDENTIFIER,A.ACCOUNT_EXTERNAL_IDENTIFIER) AS MPRN,
					A.ACCOUNT_ID,
					A.ACCOUNT_NAME,
					-- show its enrollment dates
					AE.BEGIN_DATE,
					AE.END_DATE
				FROM TDIE_ACCOUNT TA,
					ACCOUNT A,
					EXTERNAL_SYSTEM_IDENTIFIER ESI,
					ACCOUNT_ESP AE
					-- identify any accounts which have not received meter data
				WHERE TA.LAST_READING_RCV_DATE < v_BEGIN_DATE
					AND A.ACCOUNT_ID = TA.ACCOUNT_ID
					AND A.ACCOUNT_MODEL_OPTION = 'Meter'
					-- then filter to only show accounts that were *active* during the
					-- date range
					AND EXISTS (SELECT 1
								FROM ACCOUNT_STATUS S, ACCOUNT_STATUS_NAME N
								WHERE S.ACCOUNT_ID = A.ACCOUNT_ID
									AND S.BEGIN_DATE <= v_END_DATE
									AND NVL(S.END_DATE,CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE
									AND N.STATUS_NAME = S.STATUS_NAME
									AND N.IS_ACTIVE = 1)
					-- joining instead of using EI APIs because this is much faster than function calls
					AND ESI.ENTITY_ID(+) = A.ACCOUNT_ID
					AND ESI.ENTITY_DOMAIN_ID(+) = EC.ED_ACCOUNT
					AND ESI.EXTERNAL_SYSTEM_ID(+) = EC.ES_TDIE
					AND ESI.IDENTIFIER_TYPE(+) = EI.g_DEFAULT_IDENTIFIER_TYPE
					-- and that had a supplier assignment during that date range
					AND AE.ACCOUNT_ID = A.ACCOUNT_ID
					AND AE.BEGIN_DATE <= v_END_DATE
					AND NVL(AE.END_DATE,CONSTANTS.HIGH_DATE) >= v_BEGIN_DATE) A,
			ENTITY_GROUP G,
			ENTITY_GROUP_ASSIGNMENT GA
		WHERE GA.ENTITY_ID(+) = A.ACCOUNT_ID
			AND NVL(A.END_DATE,v_END_DATE) BETWEEN GA.BEGIN_DATE(+) AND NVL(GA.END_DATE(+),CONSTANTS.HIGH_DATE)
			AND G.ENTITY_GROUP_ID(+) = GA.ENTITY_GROUP_ID
			AND G.GROUP_CATEGORY(+) = 'Distribution Group'
			AND G.ENTITY_DOMAIN_ID(+) = EC.ED_ACCOUNT
		GROUP BY A.MPRN, A.ACCOUNT_ID, A.ACCOUNT_NAME, A.BEGIN_DATE, A.END_DATE
		ORDER BY A.MPRN, A.ACCOUNT_NAME, A.BEGIN_DATE;

END UNMETERED_ACCOUNTS;
--------------------------------------------------------------------------
PROCEDURE UNINVOICED_ACCOUNTS
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_INVOICE_TYPE IN VARCHAR2, -- 'TUOS', 'DUOS' or 'UOS'
	p_RETAIL_INVOICE_ID IN NUMBER,
	p_METER_TYPE IN VARCHAR2, -- 'Interval' or 'Period'
	p_CURSOR IN OUT GA.REFCURSOR,
    p_RETAIL_INVOICE_NAME OUT VARCHAR2
	) AS

	v_EDC_ID EDC.EDC_ID%TYPE;

	v_MIC_ANCILLARY_SERVICE_ID ACCOUNT_ANCILLARY_SERVICE.ANCILLARY_SERVICE_ID%TYPE
		:= EI.GET_ID_FROM_IDENTIFIER_EXTSYS(MM_TDIE_UTIL.c_MIC_ANCILLARY_SERVICE_NAME,
											EC.ED_ANCILLARY_SERVICE,EC.ES_TDIE);

	v_ENTITY_GROUP_CATEGORY ENTITY_GROUP.GROUP_CATEGORY%TYPE;
	v_INVOICE_SENDER_PSE_ID PURCHASING_SELLING_ENTITY.PSE_ID%TYPE;
   v_INVOICE_RECIPIENT_PSE_ID PURCHASING_SELLING_ENTITY.PSE_ID%TYPE;
	v_INVOICE_DATE DATE;

BEGIN

    -- Determine Sender, Recipient and Invoice Label
    SELECT RI.SENDER_PSE_ID,
        RI.RECIPIENT_PSE_ID,
        S.PSE_NAME || ': ' || RI.INVOICE_NUMBER || ' (' ||
			TEXT_UTIL.TO_CHAR_DATE(RI.INVOICE_DATE) || ') ' AS RETAIL_INVOICE_NAME,
        RI.INVOICE_DATE
    INTO v_INVOICE_SENDER_PSE_ID, v_INVOICE_RECIPIENT_PSE_ID, p_RETAIL_INVOICE_NAME, v_INVOICE_DATE
    FROM RETAIL_INVOICE RI, PSE S
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
        AND S.PSE_ID = RI.SENDER_PSE_ID;

	IF p_INVOICE_TYPE = 'TUOS' THEN
		v_ENTITY_GROUP_CATEGORY := MM_TDIE_UTIL.g_EG_TUOS_GROUP;
	ELSIF p_INVOICE_TYPE = 'DUOS' THEN
		v_ENTITY_GROUP_CATEGORY := MM_TDIE_UTIL.g_EG_DUOS_GROUP;
	ELSE
		-- THIS IS AN UOS INVOICE
		-- Determine the ENTITY_GROUP category based on the p_SENDER_CID
		IF MM_TDIE_UTIL.SENDER_PSE_IS_TUOS(v_INVOICE_SENDER_PSE_ID) THEN
			v_ENTITY_GROUP_CATEGORY := MM_TDIE_UTIL.g_EG_TUOS_GROUP;
		ELSIF MM_TDIE_UTIL.SENDER_PSE_IS_DUOS(v_INVOICE_SENDER_PSE_ID) THEN
			v_ENTITY_GROUP_CATEGORY := MM_TDIE_UTIL.g_EG_DUOS_GROUP;
		END IF;
	END IF;

	-- Determine the EDC for the invoice
	IF p_INVOICE_TYPE = 'UOS' THEN
		v_EDC_ID := MM_TDIE_UTIL.g_NIE_EDC_ID;
	ELSIF p_INVOICE_TYPE = 'TUOS' OR p_INVOICE_TYPE = 'DUOS' THEN
		v_EDC_ID := MM_TDIE_UTIL.g_ESBN_EDC_ID;
	END IF;

   -- inline view and outer joins to ENTITY_GROUP_ASSIGNMENT because using a scalar
	-- sub-query to identify the DG group was *killing* performance
	OPEN p_CURSOR FOR
		SELECT TBL.ACCOUNT_ID           AS ACCOUNT_ID,
             TBL.ACCOUNT_NAME         AS ACCOUNT_NAME,
             TBL.BEGIN_DATE           AS BEGIN_DATE,
             TBL.MPRN                 AS MPRN,
             MAX(G.ENTITY_GROUP_NAME) AS INTERNAL_TARIFF_CODE,
             MAX(AAS.SERVICE_VAL)     AS INTERNAL_MIC
        FROM (SELECT A.ACCOUNT_ID                                               AS ACCOUNT_ID,
		             A.ACCOUNT_NAME                                             AS ACCOUNT_NAME,
                     AESP.BEGIN_DATE                                            AS BEGIN_DATE,
                     AESP.END_DATE                                              AS END_DATE,
                     NVL(ESI.EXTERNAL_IDENTIFIER,A.ACCOUNT_EXTERNAL_IDENTIFIER) AS MPRN
                FROM
                    (SELECT DISTINCT A.ACCOUNT_ID
                       FROM ACCOUNT_EDC AEDC,
                            ACCOUNT A,
                            ACCOUNT_SERVICE_LOCATION ASL,
                            SERVICE_LOCATION SL,
                            SERVICE_LOCATION_METER SLM,
                            METER M,
                            ACCOUNT_STATUS S,
                            ACCOUNT_STATUS_NAME N,
                            PSE_ESP PE,
                            ACCOUNT_ESP AESP
                      WHERE -- EDC
                            AEDC.EDC_ID = v_EDC_ID
                        AND AEDC.BEGIN_DATE <= p_END_DATE
                        AND NVL(AEDC.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
                        -- Account, Service Location and Meter Heirarchy
                        AND A.ACCOUNT_ID = AEDC.ACCOUNT_ID
                        AND A.ACCOUNT_MODEL_OPTION = 'Meter'
                        AND ASL.ACCOUNT_ID = A.ACCOUNT_ID
                        AND ASL.BEGIN_DATE <= p_END_DATE
                        AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
                        AND SL.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
                        AND SLM.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
                        AND SLM.BEGIN_DATE <= NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE)
                        AND NVL(SLM.END_DATE,CONSTANTS.HIGH_DATE) >= ASL.BEGIN_DATE
                        AND M.METER_ID = SLM.METER_ID
                        AND M.METER_TYPE = p_METER_TYPE
                        -- Account Status
                        AND S.ACCOUNT_ID = A.ACCOUNT_ID
                        AND S.BEGIN_DATE <= p_END_DATE
                        AND NVL(S.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
                        AND N.STATUS_NAME = S.STATUS_NAME
                        AND N.IS_ACTIVE = 1
                        -- Accounts assigned to invoice recipient PSE
                        AND PE.PSE_ID = v_INVOICE_RECIPIENT_PSE_ID
                        AND PE.BEGIN_DATE <= p_END_DATE
                        AND NVL(PE.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
                        AND AESP.ACCOUNT_ID = A.ACCOUNT_ID
                        AND AESP.ESP_ID = PE.ESP_ID
                        AND AESP.BEGIN_DATE <= p_END_DATE
                        AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
                  MINUS
                     SELECT L.ACCOUNT_ID
                       FROM RETAIL_INVOICE_LINE L
                      WHERE L.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
                          ) ACCT,
                          ACCOUNT_ESP AESP,
                          ACCOUNT A,
                          EXTERNAL_SYSTEM_IDENTIFIER ESI
                    WHERE A.ACCOUNT_ID = ACCT.ACCOUNT_ID
                      AND AESP.ACCOUNT_ID (+) = A.ACCOUNT_ID
                      AND v_INVOICE_DATE BETWEEN AESP.BEGIN_DATE (+) AND NVL(AESP.END_DATE(+), CONSTANTS.HIGH_DATE)
                      -- joining instead of using EI APIs because this is much faster than function calls
                      AND ESI.ENTITY_ID(+) = A.ACCOUNT_ID
                      AND ESI.ENTITY_DOMAIN_ID(+) = EC.ED_ACCOUNT
                      AND ESI.EXTERNAL_SYSTEM_ID(+) = EC.ES_TDIE
                      AND ESI.IDENTIFIER_TYPE(+) = EI.g_DEFAULT_IDENTIFIER_TYPE
              ) TBL,
              ENTITY_GROUP              G,
			     ENTITY_GROUP_ASSIGNMENT   GA,
              ACCOUNT_ANCILLARY_SERVICE AAS
		 WHERE GA.ENTITY_ID(+) = TBL.ACCOUNT_ID
			AND NVL(TBL.END_DATE,p_END_DATE) BETWEEN GA.BEGIN_DATE(+) AND NVL(GA.END_DATE(+),CONSTANTS.HIGH_DATE)
			AND G.ENTITY_GROUP_ID(+) = GA.ENTITY_GROUP_ID
			AND G.GROUP_CATEGORY(+) = v_ENTITY_GROUP_CATEGORY
			AND G.ENTITY_DOMAIN_ID(+) = EC.ED_ACCOUNT
         AND AAS.ACCOUNT_ID(+) = TBL.ACCOUNT_ID
			AND AAS.BEGIN_DATE(+) <= p_END_DATE
			AND NVL(AAS.END_DATE(+), CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
			AND AAS.ANCILLARY_SERVICE_ID(+) = v_MIC_ANCILLARY_SERVICE_ID
		GROUP BY TBL.MPRN, TBL.ACCOUNT_ID, TBL.ACCOUNT_NAME, TBL.BEGIN_DATE
		ORDER BY TBL.MPRN, TBL.ACCOUNT_NAME, TBL.BEGIN_DATE;


END UNINVOICED_ACCOUNTS;
--------------------------------------------------------------------------
PROCEDURE ACCOUNT_VARIANCES
	(
	p_RETAIL_INVOICE_ID NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS
BEGIN
    -- RSA -- 2011-03-10 -- What is a Variance?
	-- (1) If IS_ACTIVE = 0 for accounts -- ignore this field if MPRN = Not Assigned (indicates supplier-unit record)
	-- (2) If IS_VALID = 0
	-- (3) If IS_VALID = 1 AND any ONE of the following is true, then it is a variance
	--                     (1) Mismatch in EDC values
	--                     (2) Mismatch in PSE values
	--                     (3) Mismatch in TARIFF values
	--                     (4) Mismatch in MIC values
	OPEN p_CURSOR FOR
		SELECT  Q.ACCOUNT_ID,
				Q.ACCOUNT_NAME,
				Q.MPRN,
				Q.METER_ID,
				Q.METER_NAME,
				Q.SERIAL_NUMBER,
				Q.INTERNAL_EDC_NAME,
				Q.EXTERNAL_EDC_NAME,
				Q.INTERNAL_PSE_NAME,
				Q.EXTERNAL_PSE_NAME,
				Q.INTERNAL_TARIFF_CODE, Q.EXTERNAL_TARIFF_CODE, Q.INTERNAL_MIC, Q.EXTERNAL_MIC,
            Q.IS_ACTIVE,
            Q.HAS_SERVICE_LOCATION,
			Q.SUPPLY_UNIT,
            Q.SERVICE_POINT_NAME,
            Q.SERVICE_POINT_ID
		 FROM
		 (SELECT
				V.IS_VALID,
				A.ACCOUNT_ID,
				A.ACCOUNT_NAME,
				V.MPRN,
				M.METER_ID,
				M.METER_NAME,
				V.SERIAL_NUMBER,
				INT_EDC.EDC_NAME AS INTERNAL_EDC_NAME,
				EXT_EDC.EDC_NAME AS EXTERNAL_EDC_NAME,
				INT_PSE.PSE_NAME AS INTERNAL_PSE_NAME,
				EXT_PSE.PSE_NAME AS EXTERNAL_PSE_NAME,
				V.INTERNAL_TARIFF_CODE,
				V.EXTERNAL_TARIFF_CODE,
				V.INTERNAL_MIC,
				V.EXTERNAL_MIC,
            V.IS_ACTIVE,
            V.HAS_SERVICE_LOCATION,
            SP.SERVICE_POINT_NAME,
			V.SUPPLY_UNIT,
            V.SERVICE_POINT_ID
	   FROM TDIE_INVOICE_LINE_VALIDATION V,
           SERVICE_POINT SP,
			  ACCOUNT A,
			  METER M,
			  ENERGY_DISTRIBUTION_COMPANY INT_EDC,
			  ENERGY_DISTRIBUTION_COMPANY EXT_EDC,
			  PURCHASING_SELLING_ENTITY INT_PSE,
			  PURCHASING_SELLING_ENTITY EXT_PSE
		 WHERE V.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
            AND SP.SERVICE_POINT_ID (+) = V.SERVICE_POINT_ID
			   AND A.ACCOUNT_ID(+) = V.ACCOUNT_ID
			   AND M.METER_ID(+) = V.METER_ID
			   AND INT_EDC.EDC_ID(+) = V.INTERNAL_EDC_ID
			   AND EXT_EDC.EDC_ID(+) = V.EXTERNAL_EDC_ID
			   AND INT_PSE.PSE_ID(+) = V.INTERNAL_PSE_ID
			   AND EXT_PSE.PSE_ID(+) = V.EXTERNAL_PSE_ID
		 ) Q
		 WHERE ( (NVL(Q.IS_ACTIVE, 0) = 0 AND Q.MPRN <> CONSTANTS.NOT_ASSIGNED_STRING) OR
				  NVL(Q.IS_VALID, 0) = 0 OR (
									 (NVL(Q.IS_VALID, 0) = 1)
								  ) AND
								  (
									 (NVL(Q.INTERNAL_EDC_NAME, CONSTANTS.NOT_ASSIGNED_STRING) <> NVL(Q.EXTERNAL_EDC_NAME, CONSTANTS.NOT_ASSIGNED_STRING)) OR
									 (NVL(Q.INTERNAL_PSE_NAME, CONSTANTS.NOT_ASSIGNED_STRING) <> NVL(Q.EXTERNAL_PSE_NAME, CONSTANTS.NOT_ASSIGNED_STRING)) OR
									 (NVL(Q.INTERNAL_TARIFF_CODE, CONSTANTS.NOT_ASSIGNED_STRING) <> NVL(Q.EXTERNAL_TARIFF_CODE, CONSTANTS.NOT_ASSIGNED_STRING)) OR
									 (NVL(Q.INTERNAL_MIC, CONSTANTS.NOT_ASSIGNED) <> NVL(Q.EXTERNAL_MIC, CONSTANTS.NOT_ASSIGNED))
								  )
			   )
		 ORDER BY 2, 3, 4;
END ACCOUNT_VARIANCES;
--------------------------------------------------------------------------
PROCEDURE METERED_USAGE_VARIANCES
	(
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_RETAIL_INVOICE_ID IN NUMBER,
	p_CURSOR IN OUT GA.REFCURSOR
	) AS
BEGIN
	OPEN p_CURSOR FOR
		SELECT A.ACCOUNT_ID,
			A.ACCOUNT_NAME,
			EI.GET_ENTITY_IDENTIFIER_EXTSYS(EC.ED_ACCOUNT, A.ACCOUNT_ID, EC.ES_TDIE, EI.g_DEFAULT_IDENTIFIER_TYPE, 1) AS MPRN,
			M.METER_ID,
			M.METER_NAME,
			CASE WHEN M.METER_ID IS NOT NULL
				THEN EI.GET_ENTITY_IDENTIFIER_EXTSYS(EC.ED_METER, M.METER_ID, EC.ES_TDIE, EI.g_DEFAULT_IDENTIFIER_TYPE, 1)
				ELSE NULL END AS METER_SERIAL_NUMBER,
			COMP.COMPONENT_NAME,
			C.BEGIN_DATE,
			C.END_DATE,
			P.PERIOD_NAME,
			COMP.QUANTITY_UNIT,
			C.EXTERNAL_QUANTITY,
			CASE C.DETERMINANT_STATUS
				WHEN 1 THEN 'Missing'
				WHEN 2 THEN 'Partial'
			END DETERMINANT_STATUS
		FROM RETAIL_INVOICE_LINE L,
			RETAIL_INVOICE_LINE_COMPONENT C,
			ACCOUNT A,
			METER M,
			COMPONENT COMP,
			PERIOD P
		WHERE L.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
			AND C.RETAIL_INVOICE_LINE_ID = L.RETAIL_INVOICE_LINE_ID
			AND C.DETERMINANT_STATUS IN (1,2) -- Missing or Partial
			AND C.BEGIN_DATE <= p_END_DATE
			AND NVL(C.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
			AND A.ACCOUNT_ID(+) = L.ACCOUNT_ID
			AND M.METER_ID(+) = L.METER_ID
			AND COMP.COMPONENT_ID = C.COMPONENT_ID
			AND P.PERIOD_ID (+) = C.PERIOD_ID
		ORDER BY ACCOUNT_NAME, MPRN, METER_NAME, METER_SERIAL_NUMBER;
END METERED_USAGE_VARIANCES;
--------------------------------------------------------------------------
PROCEDURE PSO_CCL_SSS_SENDER_LIST
    (
    p_CURSOR IN OUT GA.REFCURSOR
    ) AS

BEGIN

    OPEN p_CURSOR FOR
    SELECT PSE.PSE_ID,
        PSE.PSE_NAME
    FROM PURCHASING_SELLING_ENTITY PSE
    WHERE PSE.PSE_ID IN (MM_TDIE_UTIL.c_TDIE_CCL_SENDER_PSE_ID,
        MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER_PSE_ID, MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER_PSE_ID,
        MM_TDIE_UTIL.c_TDIE_SSS_SENDER_PSE_ID)
   ORDER BY PSE.PSE_NAME;

END PSO_CCL_SSS_SENDER_LIST;
--------------------------------------------------------------------------
PROCEDURE PSO_CCL_SSS_RECEPIENT_LIST
    (
    p_SENDER_ID IN NUMBER,
    p_CURSOR IN OUT GA.REFCURSOR
    ) AS

    v_JURISDICTION VARCHAR2(5) := CONSTANTS.ALL_STRING;

BEGIN

    IF p_SENDER_ID IN (MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER_PSE_ID,
        MM_TDIE_UTIL.c_TDIE_SSS_SENDER_PSE_ID, MM_TDIE_UTIL.c_TDIE_CCL_SENDER_PSE_ID) THEN
        v_JURISDICTION := MM_TDIE_UTIL.c_TDIE_JURISDICTION_NI;
    ELSIF p_SENDER_ID = MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER_PSE_ID THEN
        v_JURISDICTION := MM_TDIE_UTIL.c_TDIE_JURISDICTION_ROI;
    END IF;

    OPEN p_CURSOR FOR
    SELECT P.PSE_ID,
        PSE.PSE_NAME
    FROM (SELECT DISTINCT SMU.PSE_ID
            FROM SEM_MP_UNITS SMU
            WHERE SMU.RESOURCE_TYPE = 'SU'
                AND (SMU.JURISDICTION  = v_JURISDICTION OR v_JURISDICTION = CONSTANTS.ALL_STRING)
                AND SMU.JURISDICTION IS NOT NULL) P,
      PURCHASING_SELLING_ENTITY PSE
   WHERE PSE.PSE_ID = P.PSE_ID
   ORDER BY PSE.PSE_NAME;

END PSO_CCL_SSS_RECEPIENT_LIST;
--------------------------------------------------------------------------
PROCEDURE PSO_CCL_SSS_INVOICES
	(
	p_SENDER_ID    IN VARCHAR2,
	p_RECIPIENT_ID IN VARCHAR2,
	p_BEGIN_DATE    IN DATE,
	p_END_DATE      IN DATE,
	p_CURSOR        OUT GA.REFCURSOR
	) AS

BEGIN

	OPEN p_CURSOR FOR
		SELECT R.INVOICE_NUMBER,
			   R.INVOICE_DATE,
			   R.SENDER_PSE_ID AS INVOICE_SENDER_ID,
			   SENDER_PSE.PSE_NAME AS SENDER_NAME,
               RECP_PSE.PSE_NAME AS RECIPIENT_NAME,
			   R.RECIPIENT_PSE_ID AS INVOICE_RECIPIENT_ID,
			   R.RETAIL_INVOICE_ID,
			   P.PROCESS_START_TIME AS RUN_DATE,
               R.PERIOD_BEGIN_DATE AS INVOICE_BEGIN_DATE,
               R.PERIOD_END_DATE AS INVOICE_END_DATE,
			   LOG_REPORTS.GET_STATUS_LEVEL_STRING(P.PROCESS_STATUS, P.WAS_TERMINATED) AS STATUS,
			   S.STATEMENT_TYPE_NAME,
			   X.TOTAL_INTERNAL_CHARGES,
               X.TOTAL_INTERNAL_VAT,
			   X.TOTAL_INTERNAL_AMOUNT
		FROM (SELECT RETAIL_INVOICE_ID,
                     SUM(CASE WHEN C.CHARGE_TYPE = 'Tax' THEN 0 ELSE X.TOTAL_INTERNAL_AMOUNT END) AS TOTAL_INTERNAL_CHARGES,
					 SUM(CASE WHEN C.CHARGE_TYPE = 'Tax' THEN X.TOTAL_INTERNAL_AMOUNT ELSE 0 END) AS TOTAL_INTERNAL_VAT,
					 SUM(X.TOTAL_INTERNAL_AMOUNT) AS TOTAL_INTERNAL_AMOUNT
			  FROM RETAIL_INVOICE_COMPONENT X,
				   COMPONENT C
			  WHERE X.COMPONENT_ID = C.COMPONENT_ID
			  GROUP BY X.RETAIL_INVOICE_ID) X,
             RETAIL_INVOICE R,
			 PROCESS_LOG P,
			 STATEMENT_TYPE S,
             PURCHASING_SELLING_ENTITY SENDER_PSE,
             PURCHASING_SELLING_ENTITY RECP_PSE
		WHERE (R.SENDER_PSE_ID = p_SENDER_ID OR p_SENDER_ID = CONSTANTS.ALL_ID)
            AND (R.RECIPIENT_PSE_ID = p_RECIPIENT_ID OR p_RECIPIENT_ID = CONSTANTS.ALL_ID)
            AND R.INVOICE_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
            AND X.RETAIL_INVOICE_ID (+) = R.RETAIL_INVOICE_ID
            AND P.PROCESS_ID (+) = R.PROCESS_ID
            AND S.STATEMENT_TYPE_ID (+) = R.STATEMENT_TYPE_ID
            AND R.SENDER_PSE_ID IN (MM_TDIE_UTIL.c_TDIE_CCL_SENDER_PSE_ID,
                                        MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER_PSE_ID,
                                        MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER_PSE_ID,
                                        MM_TDIE_UTIL.c_TDIE_SSS_SENDER_PSE_ID)
            AND SENDER_PSE.PSE_ID = R.SENDER_PSE_ID
            AND RECP_PSE.PSE_ID = R.RECIPIENT_PSE_ID
		ORDER BY 2, 4, 6, 1;

END PSO_CCL_SSS_INVOICES;
--------------------------------------------------------------------------
PROCEDURE PSO_CCL_SSS_SENDER_GRID_LIST
    (
    p_SENDER_ID IN NUMBER,
    p_CURSOR IN OUT GA.REFCURSOR
    ) AS

BEGIN

    OPEN p_CURSOR FOR
    SELECT PSE.PSE_ID,
         PSE.PSE_NAME
    FROM PURCHASING_SELLING_ENTITY PSE
    WHERE PSE.PSE_ID = NVL(p_SENDER_ID, CONSTANTS.ALL_ID) OR
        NVL(p_SENDER_ID, CONSTANTS.ALL_ID) = CONSTANTS.ALL_ID
        AND PSE.PSE_ID IN (MM_TDIE_UTIL.c_TDIE_CCL_SENDER_PSE_ID,
            MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER_PSE_ID, MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER_PSE_ID,
            MM_TDIE_UTIL.c_TDIE_SSS_SENDER_PSE_ID)
    ORDER BY PSE.PSE_NAME;

END PSO_CCL_SSS_SENDER_GRID_LIST;
--------------------------------------------------------------------------
PROCEDURE PSO_CCL_SSS_RCPT_GRID_LIST
    (
    p_RECEPIENT_ID IN NUMBER,
    p_INVOICE_SENDER_ID IN NUMBER,
    p_CURSOR IN OUT GA.REFCURSOR
    ) AS

    v_JURISDICTION VARCHAR2(5) := CONSTANTS.ALL_STRING;

BEGIN

    IF p_INVOICE_SENDER_ID IN (MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER_PSE_ID,
        MM_TDIE_UTIL.c_TDIE_SSS_SENDER_PSE_ID, MM_TDIE_UTIL.c_TDIE_CCL_SENDER_PSE_ID) THEN
        v_JURISDICTION := MM_TDIE_UTIL.c_TDIE_JURISDICTION_NI;
    ELSIF p_INVOICE_SENDER_ID = MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER_PSE_ID THEN
        v_JURISDICTION := MM_TDIE_UTIL.c_TDIE_JURISDICTION_ROI;
    END IF;

    OPEN p_CURSOR FOR
    SELECT P.PSE_ID,
        PSE.PSE_NAME
    FROM (SELECT DISTINCT SMU.PSE_ID
            FROM SEM_MP_UNITS SMU
            WHERE SMU.RESOURCE_TYPE = 'SU'
                AND (SMU.JURISDICTION  = v_JURISDICTION OR v_JURISDICTION = CONSTANTS.ALL_STRING)
                AND (SMU.PSE_ID = NVL(p_RECEPIENT_ID, CONSTANTS.ALL_ID) OR
                    NVL(p_RECEPIENT_ID, CONSTANTS.ALL_ID) = CONSTANTS.ALL_ID)
                AND SMU.JURISDICTION IS NOT NULL) P,
         PURCHASING_SELLING_ENTITY PSE
    WHERE PSE.PSE_ID = P.PSE_ID
    ORDER BY PSE.PSE_NAME;

END PSO_CCL_SSS_RCPT_GRID_LIST;
-------------------------------------------------------------------------
PROCEDURE PUT_PSO_CCL_SSS_INVOICE
    (
    p_INVOICE_SENDER_ID IN NUMBER,
    p_INVOICE_RECIPIENT_ID IN NUMBER,
    p_RETAIL_INVOICE_ID IN NUMBER,
    p_INVOICE_NUMBER IN VARCHAR2,
    p_INVOICE_DATE IN DATE,
    p_INVOICE_BEGIN_DATE IN DATE,
    p_INVOICE_END_DATE IN DATE
    ) AS

    v_RETAIL_INVOICE RETAIL_INVOICE%ROWTYPE;

BEGIN

    IF p_RETAIL_INVOICE_ID IS NOT NULL THEN
        -- ONLY THE INVOICE NUMBER OF EXISTING INVOICES CAN BE UPDATED
        UPDATE RETAIL_INVOICE RI
        SET RI.INVOICE_NUMBER = p_INVOICE_NUMBER
        WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID;
        RETURN;
    END IF;

    ASSERT(p_INVOICE_BEGIN_DATE IS NOT NULL AND p_INVOICE_END_DATE IS NOT NULL,
        'A full period must be specified for new invoices.', MSGCODES.c_ERR_ARGUMENT);

    v_RETAIL_INVOICE := RETAIL_SETTLEMENT.NEW_RETAIL_INVOICE(p_INVOICE_SENDER_ID,
                                        p_INVOICE_RECIPIENT_ID,
                                        p_INVOICE_NUMBER,
                                        p_INVOICE_DATE,
                                        p_INVOICE_BEGIN_DATE,
                                        p_INVOICE_END_DATE,
                                        MM_TDIE_UTIL.g_USAGE_FACTOR_TYPE_ACTUAL,
                                        MM_TDIE_UTIL.g_TZ);

END PUT_PSO_CCL_SSS_INVOICE;
--------------------------------------------------------------------------
PROCEDURE REMOVE_PSO_CCL_SSS_INVOICE
    (
    p_RETAIL_INVOICE_ID IN NUMBER
    ) AS

BEGIN

    DELETE FROM RETAIL_INVOICE RI
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID;

END REMOVE_PSO_CCL_SSS_INVOICE;
--------------------------------------------------------------------------
END MM_TDIE_INVOICE_UI;
/
