CREATE OR REPLACE PACKAGE BODY MM_TDIE_INVOICE IS

g_CRLF                     CONSTANT VARCHAR2(10):= UTL_TCP.CRLF;
g_TARIFF_CODE_BC           CONSTANT VARCHAR2(32):= 'BC';
g_KW_TO_KVA_PF		   	   CONSTANT NUMBER(3,2) := 0.95; /* Power Factor between kW and kVA. KW/0.95 = kVA. Document link below. Page 26.*/
							 						 	 /* https://echo.ventyx.com/dept/psoemea/Shared%20Documents/Projects/Bord%20Gáis%20Éireann/2009%20-%20916R3F%20-%20SEM%20Settlements%20System/Tariffs/TUoS_ROI_201010.pdf */

TYPE rec_TDIE_INVOICE_DATA IS RECORD
	(
	DATA TDIE_INVOICE_DATA
	);

TYPE cur_TDIE_INVOICE_DATA_CURSOR IS REF CURSOR RETURN rec_TDIE_INVOICE_DATA;
TYPE METER_POINT_IDS IS RECORD(
	METER_POINT_ID          NUMBER,
  BEGIN_DATE              DATE,
  END_DATE                DATE
);

TYPE METER_POINT_IDS_CURSOR IS REF CURSOR RETURN METER_POINT_IDS;
----------------------------------------------------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR2 IS
BEGIN
    RETURN '$Revision: 1.11 $';
END WHAT_VERSION;
---------------------------------------------------------------------------------------------------
FUNCTION GET_RETAIL_INVOICE
	(
	p_INVOICE_NUMBER IN VARCHAR2,
	p_SENDER_CID     IN VARCHAR2
	) RETURN RETAIL_INVOICE%ROWTYPE AS
PRAGMA AUTONOMOUS_TRANSACTION;
v_RETAIL_INVOICE RETAIL_INVOICE%ROWTYPE;
v_RETAIL_INVOICE_ID RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE;
v_SENDER_PSE_ID PSE.PSE_ID%TYPE;
v_RECIPIENT_PSE_ID PSE.PSE_ID%TYPE;
v_RECIPIENT_CID VARCHAR2(16);
v_INVOICE_DATE DATE;
v_EXTERNAL_SYSTEM_ID_TYPE VARCHAR2(7);
BEGIN
	v_SENDER_PSE_ID := MM_TDIE_UTIL.GET_SENDER_PSE_ID(p_SENDER_CID);

	CASE
		-- TUOS
		WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_TUOS_ROI_SENDER_PSE_ID THEN
			SELECT I.RETAIL_INVOICE_ID, I.CUSTOMER_ID, I.INVOICE_DATE
			INTO v_RETAIL_INVOICE_ID, v_RECIPIENT_CID, v_INVOICE_DATE
			FROM TDIE_TUOS_INVOICE I
			WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER;

			v_EXTERNAL_SYSTEM_ID_TYPE := MM_TDIE_UTIL.c_TDIE_EXTERNAL_TYPE_TUOS;
		-- DUOS
		WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_DUOS_ROI_SENDER_PSE_ID THEN
			SELECT I.RETAIL_INVOICE_ID, I.RECIPIENT_CID, I.MARKET_TIMESTAMP
			INTO v_RETAIL_INVOICE_ID, v_RECIPIENT_CID, v_INVOICE_DATE
			FROM TDIE_DUOS_INVOICE I
			WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER;

			v_EXTERNAL_SYSTEM_ID_TYPE := MM_TDIE_UTIL.c_TDIE_EXTERNAL_TYPE_DUOS;
        --DUOS NI
        WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_DUOS_NI_SENDER_PSE_ID AND p_SENDER_CID = MM_TDIE_UTIL.c_TDIE_DUOS_NI_SENDER THEN
            SELECT I.RETAIL_INVOICE_ID, I.SUPPLIER, I.MARKET_TIMESTAMP
            INTO v_RETAIL_INVOICE_ID, v_RECIPIENT_CID, v_INVOICE_DATE
            FROM TDIE_DUOS_NI_INVOICE I
            WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER
              AND I.PROVIDER = p_SENDER_CID;

            v_EXTERNAL_SYSTEM_ID_TYPE := MM_TDIE_UTIL.c_TDIE_EXTERNAL_TYPE_DUOS_NI;
		-- UOS
		WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_UOS_SENDER_PSE_ID
				OR v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_TUOS_NI_SENDER_PSE_ID THEN
			SELECT I.RETAIL_INVOICE_ID, I.RECIPIENT_CID, I.MARKET_TIMESTAMP
			INTO v_RETAIL_INVOICE_ID, v_RECIPIENT_CID, v_INVOICE_DATE
			FROM TDIE_UOS_INVOICE I
			WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER
			  AND I.SENDER_CID = p_SENDER_CID;

			v_EXTERNAL_SYSTEM_ID_TYPE := MM_TDIE_UTIL.c_TDIE_EXTERNAL_TYPE_UOS;

			/*IF v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_DUOS_NI_SENDER_PSE_ID THEN
				v_EXTERNAL_SYSTEM_ID_TYPE := MM_TDIE_UTIL.c_TDIE_PSE_EXTERNAL_TYPE_DUOS;
			ELSE
				v_EXTERNAL_SYSTEM_ID_TYPE := MM_TDIE_UTIL.c_TDIE_PSE_EXTERNAL_TYPE_TUOS;
			END IF;*/

		ELSE
			ERRS.RAISE_BAD_ARGUMENT('Sender PSE ID', v_SENDER_PSE_ID, 'Unsupported PSE ID');
	END CASE;

	v_RECIPIENT_PSE_ID := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(v_RECIPIENT_CID,EC.ED_PSE,EC.ES_TDIE,v_EXTERNAL_SYSTEM_ID_TYPE);

	IF v_RETAIL_INVOICE_ID IS NOT NULL AND v_RETAIL_INVOICE_ID > 0 THEN
		SELECT *
		INTO v_RETAIL_INVOICE
		FROM RETAIL_INVOICE R
		WHERE R.RETAIL_INVOICE_ID = v_RETAIL_INVOICE_ID;

		v_RETAIL_INVOICE.PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
		v_RETAIL_INVOICE.SENDER_PSE_ID := v_SENDER_PSE_ID;
		v_RETAIL_INVOICE.RECIPIENT_PSE_ID := v_RECIPIENT_PSE_ID;

		-- Update the PROCESS_ID and always make sure the PSE_IDs are up to date with the latest configuration data.
		UPDATE RETAIL_INVOICE I
		SET I.PROCESS_ID = v_RETAIL_INVOICE.PROCESS_ID,
		    I.SENDER_PSE_ID = v_RETAIL_INVOICE.SENDER_PSE_ID,
			I.RECIPIENT_PSE_ID = v_RETAIL_INVOICE.RECIPIENT_PSE_ID
		WHERE I.RETAIL_INVOICE_ID = v_RETAIL_INVOICE_ID;

	ELSE
		-- Create a new RETAIL_INVOICE record
		v_RETAIL_INVOICE := RETAIL_SETTLEMENT.NEW_RETAIL_INVOICE(v_SENDER_PSE_ID,v_RECIPIENT_PSE_ID,p_INVOICE_NUMBER,v_INVOICE_DATE);
		-- Update Backing Sheet Invoice with new id
		CASE
			-- TUOS
			WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_TUOS_ROI_SENDER_PSE_ID THEN
				UPDATE TDIE_TUOS_INVOICE I
				SET I.RETAIL_INVOICE_ID = v_RETAIL_INVOICE.RETAIL_INVOICE_ID
				WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER;
			-- DUOS
			WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_DUOS_ROI_SENDER_PSE_ID THEN
				UPDATE TDIE_DUOS_INVOICE I
				SET I.RETAIL_INVOICE_ID = v_RETAIL_INVOICE.RETAIL_INVOICE_ID
				WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER
				  AND I.SENDER_CID = p_SENDER_CID;
            --DUOS NI
            WHEN p_SENDER_CID = MM_TDIE_UTIL.c_TDIE_DUOS_NI_SENDER THEN
                UPDATE TDIE_DUOS_NI_INVOICE I
                SET I.RETAIL_INVOICE_ID = v_RETAIL_INVOICE.RETAIL_INVOICE_ID
                WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER
                  AND I.PROVIDER = p_SENDER_CID;
			-- UOS
			WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_UOS_SENDER_PSE_ID
					OR v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_TUOS_NI_SENDER_PSE_ID THEN
				UPDATE TDIE_UOS_INVOICE I
				SET I.RETAIL_INVOICE_ID = v_RETAIL_INVOICE.RETAIL_INVOICE_ID
				WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER
				  AND I.SENDER_CID = p_SENDER_CID;
		END CASE;
	END IF;

	-- Need to make sure the Process Id is updated on the Retail_Invoice.
	COMMIT;

	RETURN v_RETAIL_INVOICE;
END GET_RETAIL_INVOICE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_TUOS_TDIE_INVOICE_DATA
	(
	p_INVOICE_NUMBER IN VARCHAR2
	) RETURN TDIE_INVOICE_DATA_TABLE PIPELINED AS
v_TDIE_INVOICE_DATA_ROW 	TDIE_INVOICE_DATA;

CURSOR v_CUR IS
	SELECT C.INVOICE_NUMBER,
		   A.INVOICE_DATE,
		   C.ACCOUNT_XID,
		   C.METER_NAME,
		   B.MPRN,
		   B.SUPPLY_UNIT,
		   CASE
			 WHEN B.SUPPLY_UNIT IS NULL THEN
				'Period'
			 ELSE
				NULL
		   END AS METER_TYPE,
		   C.INV_DET_START_DATE AS BEGIN_DATE,
		   C.INV_DET_END_DATE AS END_DATE,
		   C.INV_DET_CATEGORY AS TARIFF_CODE,
		   C.INV_DET_CODE AS CHARGE_TYPE,
		   C.INVOICE_CATEGORY,
		   C.INV_DET_NOTES,
           C.INV_DET_NOTE_SORT,
		   C.INV_DET_CATEGORY,
		   C.INV_DET_VALUE AS EXTERNAL_AMOUNT,
		   C.VAT_CHARGE,
		  (SELECT Q.INV_DET_VALUE
		   FROM TDIE_TUOS_INV_CHARGE_DTL Q,
				TDIE_TUOS_INVOICE_DET_CODE_MAP X
		   WHERE Q.INVOICE_NUMBER = C.INVOICE_NUMBER
			 AND Q.ACCOUNT_XID = C.ACCOUNT_XID
			 AND Q.METER_NAME = C.METER_NAME
			 AND Q.INV_DET_START_DATE = C.INV_DET_START_DATE
			 AND Q.INV_DET_END_DATE = C.INV_DET_END_DATE
			 AND Q.INV_DET_CATEGORY = C.INV_DET_CATEGORY
			 AND Q.INV_DET_NOTE_SORT = C.INV_DET_NOTE_SORT
			 AND Q.INV_DET_TYPE = 'CHARGING PARAMETERS'
			 AND Q.INV_DET_CODE = X.QUANTITY_NAME
			 AND X.CHARGE_NAME = C.INV_DET_CODE
		   ) AS EXTERNAL_QUANTITY ,
		   (SELECT R.INV_DET_VALUE
		   FROM TDIE_TUOS_INV_CHARGE_DTL R,
				TDIE_TUOS_INVOICE_DET_CODE_MAP Y
		   WHERE R.INVOICE_NUMBER = C.INVOICE_NUMBER
			 AND R.ACCOUNT_XID = C.ACCOUNT_XID
			 AND R.METER_NAME = C.METER_NAME
			 AND R.INV_DET_START_DATE = C.INV_DET_START_DATE
			 AND R.INV_DET_END_DATE = C.INV_DET_END_DATE
			 AND R.INV_DET_CATEGORY = C.INV_DET_CATEGORY
			 AND R.INV_DET_NOTE_SORT = C.INV_DET_NOTE_SORT
			 AND R.INV_DET_TYPE = 'RATES'
			 AND Y.CHARGE_NAME = C.INV_DET_CODE
			 AND Y.RATE_NAME = R.INV_DET_CODE
		   ) AS EXTERNAL_RATE,
		   CASE
			 WHEN B.SUPPLY_UNIT IS NULL THEN
				(SELECT M.INV_DET_VALUE*1000 -- convert from MW to kW
				 FROM TDIE_TUOS_INV_CHARGE_DTL M
				 WHERE M.INVOICE_NUMBER = C.INVOICE_NUMBER
				   AND M.ACCOUNT_XID = C.ACCOUNT_XID
				   AND M.METER_NAME = C.METER_NAME
				   AND M.INV_DET_START_DATE = C.INV_DET_START_DATE
				   AND M.INV_DET_END_DATE = C.INV_DET_END_DATE
				   AND M.INV_DET_CATEGORY = C.INV_DET_CATEGORY
				   AND M.INV_DET_NOTE_SORT = C.INV_DET_NOTE_SORT
				   AND M.INV_DET_TYPE = 'CHARGING PARAMETERS'
				   AND M.INV_DET_CODE = 'Maximum Import Capacity')
			 ELSE
				NULL
		   END AS MIC
	FROM TDIE_TUOS_INVOICE A,
		TDIE_TUOS_INVOICE_DETAIL B,
		TDIE_TUOS_INV_CHARGE_DTL C
	WHERE A.INVOICE_NUMBER = p_INVOICE_NUMBER
	  AND A.INVOICE_NUMBER = B.INVOICE_NUMBER
	  AND B.INVOICE_NUMBER = C.INVOICE_NUMBER
	  AND B.ACCOUNT_XID = C.ACCOUNT_XID
	  AND B.METER_NAME = C.METER_NAME
	  AND C.INV_DET_TYPE = 'CHARGES FOR ACCOUNT IN CHARGING INTERVAL'
	ORDER BY B.MPRN ASC, B.SUPPLY_UNIT;

	-----------------------------------------------------------
	FUNCTION IS_TUOS_ADJUSTMENT(p_TARRIFF_CODE VARCHAR2) RETURN BOOLEAN AS
BEGIN
	RETURN SP.SYSTEM_LABEL_CONTAINS(0,'MarketExchange','TDIE','TUoS','Adjustment Tariff Codes',p_TARRIFF_CODE,TRUE);
	END IS_TUOS_ADJUSTMENT;
	-----------------------------------------------------------
BEGIN
	FOR v_TUOS_INVOICE_DETAIL IN v_CUR LOOP

		-- Initialize Record
		v_TDIE_INVOICE_DATA_ROW := TDIE_INVOICE_DATA();
		v_TDIE_INVOICE_DATA_ROW.MPRN 				:= v_TUOS_INVOICE_DETAIL.MPRN;
		v_TDIE_INVOICE_DATA_ROW.SERIAL_NUMBER 		:= CONSTANTS.NOT_ASSIGNED_STRING;
		v_TDIE_INVOICE_DATA_ROW.SUPPLY_UNIT 		:= v_TUOS_INVOICE_DETAIL.SUPPLY_UNIT;
		v_TDIE_INVOICE_DATA_ROW.METER_TYPE 			:= v_TUOS_INVOICE_DETAIL.METER_TYPE;
		v_TDIE_INVOICE_DATA_ROW.BEGIN_DATE 			:= v_TUOS_INVOICE_DETAIL.BEGIN_DATE;
		v_TDIE_INVOICE_DATA_ROW.END_DATE 			:= v_TUOS_INVOICE_DETAIL.END_DATE;
		v_TDIE_INVOICE_DATA_ROW.TARIFF_CODE 		:= v_TUOS_INVOICE_DETAIL.TARIFF_CODE;
		v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE 		:= v_TUOS_INVOICE_DETAIL.CHARGE_TYPE;
		v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE 		:= NULL;
		v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY 	:= v_TUOS_INVOICE_DETAIL.EXTERNAL_QUANTITY;
		v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT 	:= v_TUOS_INVOICE_DETAIL.EXTERNAL_AMOUNT;
		v_TDIE_INVOICE_DATA_ROW.EXTERNAL_RATE 		:= v_TUOS_INVOICE_DETAIL.EXTERNAL_RATE;
		v_TDIE_INVOICE_DATA_ROW.MIC 				:= v_TUOS_INVOICE_DETAIL.MIC;

		IF v_TUOS_INVOICE_DETAIL.INVOICE_CATEGORY = 'Rebill'
				AND TRIM(UPPER(v_TUOS_INVOICE_DETAIL.INV_DET_NOTES)) = 'CREDIT NOTE' THEN

			-- This could be a cancellation of a VAT Charge
			IF v_TUOS_INVOICE_DETAIL.CHARGE_TYPE = 'VAT Charge' THEN
				v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLED_TAX;
				v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_TUOS_INVOICE_DETAIL.VAT_CHARGE;
			ELSE
				v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLATION;
			END IF;

			-- Since this is a cancellation, make sure we set the EXTERNAL QUANTITY to negative as well to match the AMOUNT
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := -v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY;

			-- Lookup internal invoice data from the latest prior invoice that is not another Cancellation.
			-- Note: We always set the QUANTITY and AMOUNT to negative to match the external side.
			BEGIN
				SELECT -X.INTERNAL_QUANTITY,
					   -X.INTERNAL_AMOUNT,
					   X.INTERNAL_RATE
				INTO v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY,
					 v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT,
					 v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE
                FROM (SELECT A.INVOICE_DATE,
							 CASE WHEN C.INV_DET_CODE = 'VAT Charge' THEN C.VAT_CHARGE ELSE C.INV_DET_VALUE END AS INTERNAL_AMOUNT,
							 (SELECT Q.INV_DET_VALUE
                    		   FROM TDIE_TUOS_INV_CHARGE_DTL Q,
                    				TDIE_TUOS_INVOICE_DET_CODE_MAP X
                    		   WHERE Q.INVOICE_NUMBER = C.INVOICE_NUMBER
                    			 AND Q.ACCOUNT_XID = C.ACCOUNT_XID
                    			 AND Q.METER_NAME = C.METER_NAME
                    			 AND Q.INV_DET_START_DATE = C.INV_DET_START_DATE
                    			 AND Q.INV_DET_END_DATE = C.INV_DET_END_DATE
                    			 AND Q.INV_DET_CATEGORY = C.INV_DET_CATEGORY
								 AND Q.INV_DET_NOTE_SORT = C.INV_DET_NOTE_SORT
                    			 AND Q.INV_DET_TYPE = 'CHARGING PARAMETERS'
                    			 AND Q.INV_DET_CODE = X.QUANTITY_NAME
                    			 AND X.CHARGE_NAME = C.INV_DET_CODE
                    		   ) AS INTERNAL_QUANTITY,
							 (SELECT R.INV_DET_VALUE
                    		   FROM TDIE_TUOS_INV_CHARGE_DTL R,
                    				TDIE_TUOS_INVOICE_DET_CODE_MAP Y
                    		   WHERE R.INVOICE_NUMBER = C.INVOICE_NUMBER
                    			 AND R.ACCOUNT_XID = C.ACCOUNT_XID
                    			 AND R.METER_NAME = C.METER_NAME
                    			 AND R.INV_DET_START_DATE = C.INV_DET_START_DATE
                    			 AND R.INV_DET_END_DATE = C.INV_DET_END_DATE
                    			 AND R.INV_DET_CATEGORY = C.INV_DET_CATEGORY
								 AND R.INV_DET_NOTE_SORT = C.INV_DET_NOTE_SORT
                    			 AND R.INV_DET_TYPE = 'RATES'
                    			 AND Y.CHARGE_NAME = C.INV_DET_CODE
                    			 AND Y.RATE_NAME = R.INV_DET_CODE
                    		   ) AS INTERNAL_RATE
                    FROM TDIE_TUOS_INVOICE A,
                    	 TDIE_TUOS_INVOICE_DETAIL B,
                     	 TDIE_TUOS_INV_CHARGE_DTL C
                    WHERE A.INVOICE_NUMBER <> p_INVOICE_NUMBER
					      AND A.INVOICE_DATE < v_TUOS_INVOICE_DETAIL.INVOICE_DATE
                    	  AND A.INVOICE_NUMBER = B.INVOICE_NUMBER
                    	  AND B.INVOICE_NUMBER = C.INVOICE_NUMBER
                    	  AND B.ACCOUNT_XID = C.ACCOUNT_XID
                    	  AND B.METER_NAME = C.METER_NAME
                    	  AND C.ACCOUNT_XID = v_TUOS_INVOICE_DETAIL.ACCOUNT_XID
                    	  AND C.METER_NAME = v_TUOS_INVOICE_DETAIL.METER_NAME
                    	  AND C.INV_DET_TYPE = 'CHARGES FOR ACCOUNT IN CHARGING INTERVAL'
                    	  AND (C.INV_DET_NOTES IS NULL OR TRIM(UPPER(C.INV_DET_NOTES)) <> 'CREDIT NOTE')
                    	  AND C.INV_DET_CODE = v_TUOS_INVOICE_DETAIL.Charge_Type
                    	  AND C.INV_DET_CATEGORY = v_TUOS_INVOICE_DETAIL.INV_DET_CATEGORY
                    	  AND C.INV_DET_START_DATE = v_TUOS_INVOICE_DETAIL.BEGIN_DATE
                    	  AND C.INV_DET_END_DATE = v_TUOS_INVOICE_DETAIL.END_DATE
                    ORDER BY A.INVOICE_DATE DESC) X
                WHERE ROWNUM = 1;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					ERRS.LOG_AND_CONTINUE('Could not find matching TUOS Invoice data for cancellation.', p_LOG_LEVEL => LOGS.c_LEVEL_NOTICE);
					v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
					v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
					v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := NULL;
			END;
		ELSIF v_TUOS_INVOICE_DETAIL.CHARGE_TYPE = 'VAT Charge' THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_TUOS_INVOICE_DETAIL.VAT_CHARGE;
		ELSIF IS_TUOS_ADJUSTMENT(v_TUOS_INVOICE_DETAIL.TARIFF_CODE) THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_ADJUSTMENT;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := v_TUOS_INVOICE_DETAIL.EXTERNAL_QUANTITY;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_TUOS_INVOICE_DETAIL.EXTERNAL_AMOUNT;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := v_TUOS_INVOICE_DETAIL.EXTERNAL_RATE;
		ELSIF v_TUOS_INVOICE_DETAIL.INVOICE_CATEGORY = 'Rebill'
				AND TRIM(UPPER(v_TUOS_INVOICE_DETAIL.INV_DET_NOTE_SORT)) = 'B' THEN
            v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_REBILL;
		ELSE
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL;
		END IF;

		PIPE ROW(v_TDIE_INVOICE_DATA_ROW);

	END LOOP;

	RETURN;

END GET_TUOS_TDIE_INVOICE_DATA;
----------------------------------------------------------------------------------------------------
PROCEDURE COMPUTE_RATE
	(
	p_INVOICE_ROW	IN OUT NOCOPY TDIE_INVOICE_DATA,
	p_INTERNAL		IN BOOLEAN := FALSE
	) AS

	v_QTY 	NUMBER;
	v_AMT	NUMBER;
	v_RATE	NUMBER;

BEGIN

	v_QTY := CASE WHEN p_INTERNAL THEN p_INVOICE_ROW.INTERNAL_QUANTITY ELSE p_INVOICE_ROW.EXTERNAL_QUANTITY END;
	v_AMT := CASE WHEN p_INTERNAL THEN p_INVOICE_ROW.INTERNAL_AMOUNT ELSE p_INVOICE_ROW.EXTERNAL_AMOUNT END;

	-- Avoid div/zero exception
	v_RATE := CASE v_QTY WHEN 0 THEN NULL ELSE v_AMT / v_QTY END;

	CASE
	WHEN p_INTERNAL THEN
		p_INVOICE_ROW.INTERNAL_RATE := v_RATE;
	ELSE
		p_INVOICE_ROW.EXTERNAL_RATE := v_RATE;
	END CASE;

END COMPUTE_RATE;
----------------------------------------------------------------------------------------------------
FUNCTION GET_DUOS_TDIE_INVOICE_DATA
	(
	p_INVOICE_NUMBER IN VARCHAR2
	) RETURN TDIE_INVOICE_DATA_TABLE PIPELINED AS

v_TDIE_INVOICE_DATA_ROW 	TDIE_INVOICE_DATA;
v_INTERNAL_MULT				NUMBER := NULL;
v_INTERNAL_INVOICE_DETAIL 	TDIE_DUOS_INVOICE_DETAIL%ROWTYPE;
v_LAST_DUOS_INVOICE_DETAIL 	TDIE_DUOS_INVOICE_DETAIL%ROWTYPE;
v_MIN_TAX_BEGIN_DATE		DATE := NULL;
v_MAX_TAX_END_DATE			DATE := NULL;
v_TOTAL_TAX 				NUMBER := 0;

	----------------------------------------------------------
	FUNCTION HANDLE_TAX_CHARGE RETURN TDIE_INVOICE_DATA AS
		v_TDIE_TAX_ROW TDIE_INVOICE_DATA;
	BEGIN
		v_TDIE_TAX_ROW := TDIE_INVOICE_DATA();
		v_TDIE_TAX_ROW.MPRN := v_LAST_DUOS_INVOICE_DETAIL.MPRN;
		v_TDIE_TAX_ROW.SERIAL_NUMBER := CONSTANTS.NOT_ASSIGNED_STRING;
		v_TDIE_TAX_ROW.SUPPLY_UNIT := CONSTANTS.NOT_ASSIGNED_STRING;
		v_TDIE_TAX_ROW.METER_TYPE := NULL;
		v_TDIE_TAX_ROW.BEGIN_DATE := v_MIN_TAX_BEGIN_DATE;
		v_TDIE_TAX_ROW.END_DATE := v_MAX_TAX_END_DATE;
		v_TDIE_TAX_ROW.TARIFF_CODE := v_LAST_DUOS_INVOICE_DETAIL.DUOS_GROUP;
		v_TDIE_TAX_ROW.MIC := v_LAST_DUOS_INVOICE_DETAIL.MAX_IMPORT_CAPACITY;
		v_TDIE_TAX_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX;
		v_TDIE_TAX_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_VAT_CHRG;
		v_TDIE_TAX_ROW.TIMESLOT_CODE := NULL;
		v_TDIE_TAX_ROW.INTERNAL_QUANTITY := NULL;
		v_TDIE_TAX_ROW.INTERNAL_AMOUNT := NULL;
		v_TDIE_TAX_ROW.INTERNAL_RATE := NULL;
		v_TDIE_TAX_ROW.EXTERNAL_QUANTITY := NULL;
		v_TDIE_TAX_ROW.EXTERNAL_AMOUNT := v_TOTAL_TAX;
		v_TDIE_TAX_ROW.EXTERNAL_RATE := NULL;

		RETURN v_TDIE_TAX_ROW;

	END HANDLE_TAX_CHARGE;
	----------------------------------------------------------
BEGIN
	FOR v_DUOS_INVOICE_DETAIL IN (SELECT *
								  FROM TDIE_DUOS_INVOICE_DETAIL D
								  WHERE D.INVOICE_NUMBER = p_INVOICE_NUMBER
								  ORDER BY D.MPRN) LOOP

		IF v_DUOS_INVOICE_DETAIL.MPRN <> v_LAST_DUOS_INVOICE_DETAIL.MPRN THEN
			IF v_LAST_DUOS_INVOICE_DETAIL.MPRN IS NOT NULL THEN
				PIPE ROW(HANDLE_TAX_CHARGE());
				-- Reset
				v_MIN_TAX_BEGIN_DATE := NULL;
				v_MAX_TAX_END_DATE := NULL;
				v_TOTAL_TAX := 0;
			END IF;
		END IF;

		-- Initialize Record
		v_TDIE_INVOICE_DATA_ROW := TDIE_INVOICE_DATA();
		v_TDIE_INVOICE_DATA_ROW.MPRN := v_DUOS_INVOICE_DETAIL.MPRN;
		v_TDIE_INVOICE_DATA_ROW.SERIAL_NUMBER := CONSTANTS.NOT_ASSIGNED_STRING;
		v_TDIE_INVOICE_DATA_ROW.SUPPLY_UNIT := CONSTANTS.NOT_ASSIGNED_STRING;
		v_TDIE_INVOICE_DATA_ROW.METER_TYPE := NULL;
		v_TDIE_INVOICE_DATA_ROW.BEGIN_DATE := v_DUOS_INVOICE_DETAIL.BILLING_BEGIN_DATE;
		v_TDIE_INVOICE_DATA_ROW.END_DATE := v_DUOS_INVOICE_DETAIL.BILLING_END_DATE;
		v_TDIE_INVOICE_DATA_ROW.TARIFF_CODE := v_DUOS_INVOICE_DETAIL.DUOS_GROUP;
		v_TDIE_INVOICE_DATA_ROW.MIC := v_DUOS_INVOICE_DETAIL.MAX_IMPORT_CAPACITY;

		v_INTERNAL_MULT := NULL;
		-- Special Handling for CHARGE_STATE
		IF TO_NUMBER(TRIM(SUBSTR(v_DUOS_INVOICE_DETAIL.Invoice_Type,1,1))) = 2 AND
			UPPER(v_DUOS_INVOICE_DETAIL.INVOICE_TYPE) <> '2C' THEN
			IF v_DUOS_INVOICE_DETAIL.ADJUSTED_REFERENCE	IS NOT NULL THEN
				-- Cancellation
				v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLATION;
				-- Lookup Cancelled record
				BEGIN
					SELECT *
					INTO v_INTERNAL_INVOICE_DETAIL
					FROM TDIE_DUOS_INVOICE_DETAIL D
					WHERE D.INVOICE_ITEM_NUMBER = v_DUOS_INVOICE_DETAIL.ADJUSTED_REFERENCE;
					v_INTERNAL_MULT := -1;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						ERRS.LOG_AND_CONTINUE('Could not find a matching invoice record for this cancellation.' || g_CRLF ||g_CRLF ||
                                        'MPRN = ' || v_DUOS_INVOICE_DETAIL.MPRN || g_CRLF ||
                                        'ADJUSTED_REFERENCE = ' || v_DUOS_INVOICE_DETAIL.ADJUSTED_REFERENCE,
                                        p_LOG_LEVEL => LOGS.c_LEVEL_NOTICE);
				END;
			END IF;
		ELSIF UPPER(TRIM(v_DUOS_INVOICE_DETAIL.INVOICE_TYPE)) IN ('2C', '3D') THEN  -- This is the change as of 2012-11-29
			-- Adjustment
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_ADJUSTMENT;
			v_INTERNAL_INVOICE_DETAIL := v_DUOS_INVOICE_DETAIL;
			v_INTERNAL_MULT := 1;		
	 	ELSIF UPPER(v_DUOS_INVOICE_DETAIL.INVOICE_TYPE) = '3S' THEN
			-- Rebill
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_REBILL;
			-- Handle Total Tax
			v_TOTAL_TAX := v_TOTAL_TAX + v_DUOS_INVOICE_DETAIL.GROSS_AMOUNT - v_DUOS_INVOICE_DETAIL.NET_AMOUNT;
		ELSIF UPPER(v_DUOS_INVOICE_DETAIL.INVOICE_TYPE) = '3C' THEN
   			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLATION;
		ELSE
			-- Normal Charge
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL;

    		-- Handle Total Tax
    		v_TOTAL_TAX := v_TOTAL_TAX + v_DUOS_INVOICE_DETAIL.GROSS_AMOUNT - v_DUOS_INVOICE_DETAIL.NET_AMOUNT;
		END IF;

		-- Handle Begin and End Dates
		v_MIN_TAX_BEGIN_DATE := LEAST(NVL(v_MIN_TAX_BEGIN_DATE,CONSTANTS.HIGH_DATE),v_DUOS_INVOICE_DETAIL.BILLING_BEGIN_DATE);
		v_MAX_TAX_END_DATE := GREATEST(NVL(v_MAX_TAX_END_DATE,CONSTANTS.LOW_DATE),v_DUOS_INVOICE_DETAIL.BILLING_END_DATE);

		-- Day Energy Charge
		IF v_DUOS_INVOICE_DETAIL.ENERGY_CHARGE_DAY IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_DAYNGHT_ENERGY_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_DAY;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_INVOICE_DETAIL.ENERGY_CONSUMPTION_DAY;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_INVOICE_DETAIL.ENERGY_CHARGE_DAY;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.ENERGY_CONSUMPTION_DAY;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.ENERGY_CHARGE_DAY;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- Night Energy Charge
		IF v_DUOS_INVOICE_DETAIL.ENERGY_CHARGE_NIGHT IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_DAYNGHT_ENERGY_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_NIGHT;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_INVOICE_DETAIL.ENERGY_CONSUMPTION_NIGHT;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_INVOICE_DETAIL.ENERGY_CHARGE_NIGHT;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.ENERGY_CONSUMPTION_NIGHT;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.ENERGY_CHARGE_NIGHT;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- 24Hr Energy Charge
		IF v_DUOS_INVOICE_DETAIL.ENERGY_CHARGE_24HR IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_24H_ENERGY_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_24H;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_INVOICE_DETAIL.ENERGY_CONSUMPTION_24HR;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_INVOICE_DETAIL.ENERGY_CHARGE_24HR;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.ENERGY_CONSUMPTION_24HR;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.ENERGY_CHARGE_24HR;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- Standing Charge
		IF v_DUOS_INVOICE_DETAIL.STANDING_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_STANDING_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_INVOICE_DETAIL.STANDING_CHARGE;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_RATE := NULL;

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.STANDING_CHARGE;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := NULL;

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- Capacity Charge
		IF v_DUOS_INVOICE_DETAIL.CAPACITY_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_CAPACITY_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_INVOICE_DETAIL.CAPACITY_CHARGE;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_RATE := NULL;

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.CAPACITY_CHARGE;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := NULL;

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- MIC Surcharge
		IF v_DUOS_INVOICE_DETAIL.MIC_SURCHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_MIC_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := GREATEST(v_DUOS_INVOICE_DETAIL.MAX_KVA -  v_DUOS_INVOICE_DETAIL.MAX_IMPORT_CAPACITY, 0);
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_INVOICE_DETAIL.MIC_SURCHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := v_INTERNAL_MULT*GREATEST(v_DUOS_INVOICE_DETAIL.MAX_KVA -  v_DUOS_INVOICE_DETAIL.MAX_IMPORT_CAPACITY, 0);
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.MIC_SURCHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- Power Factor Surcharge
		IF v_DUOS_INVOICE_DETAIL.POWER_FACTOR_SURCHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_POWER_FACTOR_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_INVOICE_DETAIL.POWER_FACTOR_SURCHARGE;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_RATE := NULL;

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_INTERNAL_MULT*v_INTERNAL_INVOICE_DETAIL.POWER_FACTOR_SURCHARGE;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := NULL;

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- Handle the Cancelled Tax entry if this is a cancellation
		IF v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE = RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLATION THEN
            -- Change the CHARGE STATE to CANCELLED TAX
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLED_TAX;
            v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_VAT_CHRG;
            v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := NULL;
            v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
            v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_DUOS_INVOICE_DETAIL.GROSS_AMOUNT - v_DUOS_INVOICE_DETAIL.NET_AMOUNT;
            v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := NULL;
            v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := NULL;
            v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_INVOICE_DETAIL.GROSS_AMOUNT - v_DUOS_INVOICE_DETAIL.NET_AMOUNT;
            v_TDIE_INVOICE_DATA_ROW.EXTERNAL_RATE := NULL;
			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		v_LAST_DUOS_INVOICE_DETAIL := v_DUOS_INVOICE_DETAIL;
	END LOOP;

	-- Handle Tax Charge for last MPRN
    PIPE ROW(HANDLE_TAX_CHARGE());

	RETURN;

END GET_DUOS_TDIE_INVOICE_DATA;
----------------------------------------------------------------------------------------------------
FUNCTION GET_DUOS_NI_TDIE_INVOICE_DATA
	(
	p_INVOICE_NUMBER IN VARCHAR2
	) RETURN TDIE_INVOICE_DATA_TABLE PIPELINED AS

v_TDIE_INVOICE_DATA_ROW 	TDIE_INVOICE_DATA;
v_LAST_DUOS_NI_INVOICE_DETAIL 	TDIE_DUOS_NI_INVOICE_DETAIL%ROWTYPE;
v_MIN_TAX_BEGIN_DATE		DATE := NULL;
v_MAX_TAX_END_DATE			DATE := NULL;
v_TOTAL_TAX 				NUMBER := 0;

	----------------------------------------------------------
	FUNCTION HANDLE_TAX_CHARGE RETURN TDIE_INVOICE_DATA AS
		v_TDIE_TAX_ROW TDIE_INVOICE_DATA;
	BEGIN
		v_TDIE_TAX_ROW := TDIE_INVOICE_DATA();
		v_TDIE_TAX_ROW.MPRN := v_LAST_DUOS_NI_INVOICE_DETAIL.POD_ID;
		v_TDIE_TAX_ROW.SERIAL_NUMBER := CONSTANTS.NOT_ASSIGNED_STRING;
		v_TDIE_TAX_ROW.SUPPLY_UNIT := CONSTANTS.NOT_ASSIGNED_STRING;
		v_TDIE_TAX_ROW.METER_TYPE := NULL;
		v_TDIE_TAX_ROW.BEGIN_DATE := v_MIN_TAX_BEGIN_DATE;
		v_TDIE_TAX_ROW.END_DATE := v_MAX_TAX_END_DATE;
	    v_TDIE_TAX_ROW.TARIFF_CODE := v_LAST_DUOS_NI_INVOICE_DETAIL.RATE_CATEGORY;
		v_TDIE_TAX_ROW.MIC := v_LAST_DUOS_NI_INVOICE_DETAIL.MIC_VOLUME;
		v_TDIE_TAX_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX;
		v_TDIE_TAX_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_ROI_DUOS_VAT_CHRG;
		v_TDIE_TAX_ROW.TIMESLOT_CODE := NULL;
		v_TDIE_TAX_ROW.INTERNAL_QUANTITY := NULL;
		v_TDIE_TAX_ROW.INTERNAL_AMOUNT := NULL;
		v_TDIE_TAX_ROW.INTERNAL_RATE := NULL;
		v_TDIE_TAX_ROW.EXTERNAL_QUANTITY := NULL;
		v_TDIE_TAX_ROW.EXTERNAL_AMOUNT := v_TOTAL_TAX;
		v_TDIE_TAX_ROW.EXTERNAL_RATE := NULL;

		RETURN v_TDIE_TAX_ROW;

	END HANDLE_TAX_CHARGE;
	----------------------------------------------------------

BEGIN
	FOR v_DUOS_NI_INVOICE_DETAIL IN (SELECT *
								  FROM TDIE_DUOS_NI_INVOICE_DETAIL D
								  WHERE D.INVOICE_NUMBER = p_INVOICE_NUMBER
								  ORDER BY D.POD_ID) LOOP

		   IF v_DUOS_NI_INVOICE_DETAIL.POD_ID <> v_LAST_DUOS_NI_INVOICE_DETAIL.POD_ID THEN
			IF v_LAST_DUOS_NI_INVOICE_DETAIL.POD_ID IS NOT NULL THEN
				PIPE ROW(HANDLE_TAX_CHARGE());
				-- Reset
				v_MIN_TAX_BEGIN_DATE := NULL;
				v_MAX_TAX_END_DATE := NULL;
				v_TOTAL_TAX := 0;
			END IF;
		END IF;

		-- Initialize Record
		v_TDIE_INVOICE_DATA_ROW := TDIE_INVOICE_DATA();
		v_TDIE_INVOICE_DATA_ROW.MPRN := v_DUOS_NI_INVOICE_DETAIL.POD_ID;
		v_TDIE_INVOICE_DATA_ROW.SERIAL_NUMBER := CONSTANTS.NOT_ASSIGNED_STRING;
		v_TDIE_INVOICE_DATA_ROW.SUPPLY_UNIT := CONSTANTS.NOT_ASSIGNED_STRING;
		v_TDIE_INVOICE_DATA_ROW.METER_TYPE := NULL;
		v_TDIE_INVOICE_DATA_ROW.BEGIN_DATE := v_DUOS_NI_INVOICE_DETAIL.BILLING_BEGIN_DATE;
		v_TDIE_INVOICE_DATA_ROW.END_DATE := v_DUOS_NI_INVOICE_DETAIL.BILLING_END_DATE;
		v_TDIE_INVOICE_DATA_ROW.TARIFF_CODE := v_DUOS_NI_INVOICE_DETAIL.RATE_CATEGORY;
		v_TDIE_INVOICE_DATA_ROW.MIC := NULL;

		IF UPPER(v_DUOS_NI_INVOICE_DETAIL.INVOICE_TYPE) = '3S' THEN
			   v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_REBILL ;
		ELSIF UPPER(v_DUOS_NI_INVOICE_DETAIL.INVOICE_TYPE) IN ('2S','2D','3C')  THEN
				v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLATION;
		-- Change as of 2012-11-29
		ELSIF UPPER(v_DUOS_NI_INVOICE_DETAIL.INVOICE_TYPE) IN ('2C','3D')  THEN
				v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_ADJUSTMENT;
		ELSE
		 v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL;
		END IF;
		
		v_TOTAL_TAX := v_TOTAL_TAX + v_DUOS_NI_INVOICE_DETAIL.REVENUE_INC_VAT - v_DUOS_NI_INVOICE_DETAIL.TOTAL_REVENUE;

    
		-- Handle Begin and End Dates
		v_MIN_TAX_BEGIN_DATE := LEAST(NVL(v_MIN_TAX_BEGIN_DATE,CONSTANTS.HIGH_DATE),v_DUOS_NI_INVOICE_DETAIL.BILLING_BEGIN_DATE);
		v_MAX_TAX_END_DATE := GREATEST(NVL(v_MAX_TAX_END_DATE,CONSTANTS.LOW_DATE),v_DUOS_NI_INVOICE_DETAIL.BILLING_END_DATE);
		

		-- Standing Charge
		IF v_DUOS_NI_INVOICE_DETAIL.STAND_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_STANDING_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.STAND_CHARGE;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_RATE := NULL;

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := NULL;

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;
		
		-- UNR Charge
		IF v_DUOS_NI_INVOICE_DETAIL.UNR_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_24H;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.UNR_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.UNR_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- D01 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.D01_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_D01;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.D01_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.D01_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- N01 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.N01_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_N01;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.N01_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.N01_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- D02 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.D02_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_D02;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.D02_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.D02_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- N02 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.N02_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_N02;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.N02_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.N02_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- N03 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.N03_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_N03;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.N03_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.N03_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- N04 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.N04_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_N04;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.N04_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.N04_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- HT1 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.HT1_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_HT1;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.HT1_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.HT1_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- HT2 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.HT2_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_HT2;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.HT2_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.HT2_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- HT3 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.HT3_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_HT3;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.HT3_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.HT3_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- W1 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.W1_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_W01;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.W1_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.W1_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- W2 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.W2_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_W02;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.W2_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.W2_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- FR1 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.FR1_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_FR1;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.FR1_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.FR1_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- FR2 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.FR2_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_FR2;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.FR2_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.FR2_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- FR3 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.FR3_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_FR3;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.FR3_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.FR3_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- FR4 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.FR4_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_FR4;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.FR4_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.FR4_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- KP5 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.KP5_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_KP5;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.KP5_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.KP5_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- KP6 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.KP6_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_KP6;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.KP6_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.KP6_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- KP7 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.KP7_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_KP7;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.KP7_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.KP7_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- KP8 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.KP8_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_KP8;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.KP8_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.KP8_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- R21 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.R21_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_R21;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.R21_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.R21_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- R22 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.R22_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_R22;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.R22_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.R22_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- R23 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.R23_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_R23;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.R23_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.R23_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- R24 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.R24_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_R24;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.R24_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.R24_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- R25 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.R25_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_R25;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.R25_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.R25_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- UNMETERED Charge
		IF v_DUOS_NI_INVOICE_DETAIL.UNMTRD_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_UNMETERED_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_ANY;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.UNMTRD_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.UNMTRD_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- SMO Charge
		IF v_DUOS_NI_INVOICE_DETAIL.SMO_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_SMO;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.SMO_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.SMO_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- NFD Charge
		IF v_DUOS_NI_INVOICE_DETAIL.NFD_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_SNF;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.NFD_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.NFD_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- DJD Charge
		IF v_DUOS_NI_INVOICE_DETAIL.DJD_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_SDJ;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.DJD_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.DJD_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- NKP Charge
		IF v_DUOS_NI_INVOICE_DETAIL.NKP_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_PNF;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.NKP_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.NKP_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- DJPK Charge
		IF v_DUOS_NI_INVOICE_DETAIL.DJPK_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_PDJ;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.DJPK_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.DJPK_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- EW Charge
		IF v_DUOS_NI_INVOICE_DETAIL.EW_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_SEW;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.EW_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.EW_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- NT Charge
		IF v_DUOS_NI_INVOICE_DETAIL.NT_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_SNT;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.NT_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.NT_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- RPC Charge
		IF v_DUOS_NI_INVOICE_DETAIL.RPC_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_REAC_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.RPC_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.RPC_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- CSC Charge
		IF v_DUOS_NI_INVOICE_DETAIL.CSC_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_CSC_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.CSC_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.CSC_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- MIC Charge
		IF v_DUOS_NI_INVOICE_DETAIL.MIC_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_MIC_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := NULL;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.MIC_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.MIC_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;

		-- R26 Charge
		IF v_DUOS_NI_INVOICE_DETAIL.R26_CHARGE IS NOT NULL THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := MM_TDIE_UTIL.c_NI_DUOS_OTHER_CHRG;
			v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := MM_TDIE_UTIL.c_TDIE_TIMESLOT_CODE_R26;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_DUOS_NI_INVOICE_DETAIL.R26_VOLUME;
			v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_DUOS_NI_INVOICE_DETAIL.R26_CHARGE;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW);

			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
			COMPUTE_RATE(v_TDIE_INVOICE_DATA_ROW, TRUE);

			PIPE ROW(v_TDIE_INVOICE_DATA_ROW);
		END IF;
		v_LAST_DUOS_NI_INVOICE_DETAIL := v_DUOS_NI_INVOICE_DETAIL;
	END LOOP;

	-- Handle Tax Charge for last MPRN
	PIPE ROW(HANDLE_TAX_CHARGE());
	RETURN;

END GET_DUOS_NI_TDIE_INVOICE_DATA;
----------------------------------------------------------------------------------------------------
FUNCTION GET_UOS_TDIE_INVOICE_DATA
	(
	p_INVOICE_NUMBER IN VARCHAR2,
	p_SENDER_CID IN VARCHAR2
	) RETURN TDIE_INVOICE_DATA_TABLE PIPELINED AS

v_TDIE_INVOICE_DATA_ROW TDIE_INVOICE_DATA;

BEGIN
	FOR v_UOS_INVOICE_DETAIL IN (SELECT I.MARKET_TIMESTAMP, D.*
								 FROM TDIE_UOS_INVOICE I,
								      TDIE_UOS_INVOICE_DETAIL D
							 	 WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER
								   AND I.INVOICE_NUMBER = D.INVOICE_NUMBER
								   AND D.SENDER_CID = p_SENDER_CID
								 ORDER BY D.MPRN ASC, D.METER_ID_SERIAL_NUMBER ASC) LOOP

		v_TDIE_INVOICE_DATA_ROW := TDIE_INVOICE_DATA();
		v_TDIE_INVOICE_DATA_ROW.MPRN := v_UOS_INVOICE_DETAIL.MPRN;
		v_TDIE_INVOICE_DATA_ROW.SERIAL_NUMBER := v_UOS_INVOICE_DETAIL.METER_ID_SERIAL_NUMBER;
		v_TDIE_INVOICE_DATA_ROW.METER_TYPE := NULL;
		v_TDIE_INVOICE_DATA_ROW.BEGIN_DATE := v_UOS_INVOICE_DETAIL.START_DATE;
		v_TDIE_INVOICE_DATA_ROW.END_DATE := v_UOS_INVOICE_DETAIL.END_DATE;
		v_TDIE_INVOICE_DATA_ROW.TARIFF_CODE := v_UOS_INVOICE_DETAIL.UOS_TARIFF;

		IF SUBSTR(v_UOS_INVOICE_DETAIL.RECORD_TYPE,1,3) = 'CAN' THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := TRIM(SUBSTR(v_UOS_INVOICE_DETAIL.RECORD_TYPE,5));

			-- This could be a cancellation of a VAT Charge
			IF v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE = 'VAT' THEN
				v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLED_TAX;
			ELSE
				v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLATION;
			END IF;

			-- Handle Internal Amounts for Cancellations
         -- 1st Lookup is to look for an exact amount lookup along with the rest of the key set.
         -- Given the order by clause it firsts looks for an exact match within the same invoice,
         -- failing to find one there it proceeds to the older invoices.  If no exact match is found
         -- then it cascades to the next level.
			BEGIN
				SELECT -X.TOTAL_UNITS,
					   X.RATE,
					   -X.CHARGE
			    INTO v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY,
					 v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE,
					 v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT
				FROM (SELECT I.MARKET_TIMESTAMP, D.TOTAL_UNITS, D.RATE, D.CHARGE
    				FROM TDIE_UOS_INVOICE I, TDIE_UOS_INVOICE_DETAIL D
    				WHERE I.INVOICE_NUMBER = D.INVOICE_NUMBER
					  AND I.SENDER_CID = D.SENDER_CID
    				  AND D.MPRN = v_UOS_INVOICE_DETAIL.MPRN
					  AND ((D.METER_ID_SERIAL_NUMBER = v_UOS_INVOICE_DETAIL.METER_ID_SERIAL_NUMBER)
					  		OR (v_UOS_INVOICE_DETAIL.METER_ID_SERIAL_NUMBER IS NULL AND D.METER_ID_SERIAL_NUMBER IS NULL))
    				  AND ((D.TIMESLOT_CODE = v_UOS_INVOICE_DETAIL.TIMESLOT_CODE)
    				  		OR (v_UOS_INVOICE_DETAIL.TIMESLOT_CODE IS NULL AND D.TIMESLOT_CODE IS NULL))
    				  AND D.UOS_TARIFF = v_UOS_INVOICE_DETAIL.UOS_TARIFF
    				  AND D.START_DATE = v_UOS_INVOICE_DETAIL.START_DATE
    				  AND D.END_DATE = v_UOS_INVOICE_DETAIL.END_DATE
    				  AND D.RECORD_TYPE = v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE
                 AND D.CHARGE = -v_UOS_INVOICE_DETAIL.CHARGE
    				ORDER BY I.MARKET_TIMESTAMP, D.INVOICE_NUMBER DESC) X
				WHERE ROWNUM = 1;

         -- If not found above then check the invoices for a key match without an exact match in amount
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
               -- NO DATA FOUND 1
               BEGIN

                  -- This looks for an exact match on everything including the amount.
                  SELECT -X.TOTAL_UNITS,
                         X.RATE,
                         -X.CHARGE
                    INTO v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY,
                         v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE,
                         v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT
                    FROM (SELECT I.MARKET_TIMESTAMP,
                                 D.TOTAL_UNITS,
                                 D.RATE,
                                 D.CHARGE
                            FROM TDIE_UOS_INVOICE I,
                                 TDIE_UOS_INVOICE_DETAIL D
                           WHERE I.INVOICE_NUMBER = D.INVOICE_NUMBER
                             AND I.SENDER_CID = D.SENDER_CID
                             AND D.MPRN = v_UOS_INVOICE_DETAIL.MPRN
                             AND ((D.METER_ID_SERIAL_NUMBER = v_UOS_INVOICE_DETAIL.METER_ID_SERIAL_NUMBER)
                                 OR (v_UOS_INVOICE_DETAIL.METER_ID_SERIAL_NUMBER IS NULL AND D.METER_ID_SERIAL_NUMBER IS NULL))
                             AND ((D.TIMESLOT_CODE = v_UOS_INVOICE_DETAIL.TIMESLOT_CODE)
                                 OR (v_UOS_INVOICE_DETAIL.TIMESLOT_CODE IS NULL AND D.TIMESLOT_CODE IS NULL))
                             AND D.UOS_TARIFF = v_UOS_INVOICE_DETAIL.UOS_TARIFF
                             AND D.START_DATE = v_UOS_INVOICE_DETAIL.START_DATE
                             AND D.END_DATE = v_UOS_INVOICE_DETAIL.END_DATE
                             AND D.RECORD_TYPE = v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE
                           ORDER BY I.MARKET_TIMESTAMP, D.INVOICE_NUMBER DESC) X
                    WHERE ROWNUM = 1;
                EXCEPTION
                   WHEN NO_DATA_FOUND THEN
                      ERRS.LOG_AND_CONTINUE('Could not find a matching invoice record for this cancellation.'|| g_CRLF || g_CRLF ||
                                             'MPRN = ' || v_UOS_INVOICE_DETAIL.MPRN || g_CRLF ||
                                             'TIMESLOT_CODE = ' || v_UOS_INVOICE_DETAIL.TIMESLOT_CODE || g_CRLF ||
                                             'UOS_TARIFF = ' || v_UOS_INVOICE_DETAIL.UOS_TARIFF || g_CRLF ||
                                             'START_DATE = ' || v_UOS_INVOICE_DETAIL.START_DATE || g_CRLF ||
                                             'END_DATE = ' || v_UOS_INVOICE_DETAIL.END_DATE || g_CRLF ||
                                             'RECORD_TYPE = ' || v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE,
                                            p_LOG_LEVEL => LOGS.c_LEVEL_NOTICE);
               END;-- NO DATA FOUND 1
			END;-- Handle Internal Amounts for Cancellations

		ELSIF v_UOS_INVOICE_DETAIL.RECORD_TYPE = 'VAT' THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := 'VAT';
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
    	 	v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := NULL;
    	 	v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
		ELSIF v_UOS_INVOICE_DETAIL.RECORD_TYPE = 'CONSADJ'
				OR v_UOS_INVOICE_DETAIL.RECORD_TYPE = 'TTRE'
		    	OR SUBSTR(v_UOS_INVOICE_DETAIL.RECORD_TYPE,1,3) = 'BC-' THEN
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := v_UOS_INVOICE_DETAIL.RECORD_TYPE;
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_ADJUSTMENT;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := v_UOS_INVOICE_DETAIL.TOTAL_UNITS;
    	 	v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := v_UOS_INVOICE_DETAIL.RATE;
    	 	v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := v_UOS_INVOICE_DETAIL.CHARGE;
		ELSE
			v_TDIE_INVOICE_DATA_ROW.CHARGE_TYPE := v_UOS_INVOICE_DETAIL.RECORD_TYPE;
			v_TDIE_INVOICE_DATA_ROW.CHARGE_STATE := RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL;
			v_TDIE_INVOICE_DATA_ROW.INTERNAL_QUANTITY := NULL;
    	 	v_TDIE_INVOICE_DATA_ROW.INTERNAL_RATE := NULL;
    	 	v_TDIE_INVOICE_DATA_ROW.INTERNAL_AMOUNT := NULL;
		END IF;

		v_TDIE_INVOICE_DATA_ROW.TIMESLOT_CODE := v_UOS_INVOICE_DETAIL.TIMESLOT_CODE;
		v_TDIE_INVOICE_DATA_ROW.EXTERNAL_QUANTITY := v_UOS_INVOICE_DETAIL.TOTAL_UNITS;
		v_TDIE_INVOICE_DATA_ROW.EXTERNAL_RATE := v_UOS_INVOICE_DETAIL.RATE;
		v_TDIE_INVOICE_DATA_ROW.EXTERNAL_AMOUNT := v_UOS_INVOICE_DETAIL.CHARGE;

		PIPE ROW (v_TDIE_INVOICE_DATA_ROW);
	END LOOP;

	RETURN;

END GET_UOS_TDIE_INVOICE_DATA;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_INVOICE_DATA
	(
	p_INVOICE_NUMBER           IN VARCHAR2,
	p_SENDER_CID               IN VARCHAR2,
	p_INVOICED_ENTITY_COUNT    OUT NUMBER,
	p_TDIE_INVOICE_DATA_CURSOR OUT cur_TDIE_INVOICE_DATA_CURSOR
	) AS
v_SENDER_PSE_ID PSE.PSE_ID%TYPE;
BEGIN
	v_SENDER_PSE_ID := MM_TDIE_UTIL.GET_SENDER_PSE_ID(p_SENDER_CID);

	CASE
		-- TUOS
		WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_TUOS_ROI_SENDER_PSE_ID THEN
			-- Update any mapping data in the TDIE
			MM_TDIE_BACKING_SHEETS.MAP_TUOS_SUPPLY_UNITS(p_INVOICE_NUMBER);

			-- Get the MPRN Count from the TUOS Table
			SELECT I.MPRN_COUNT
			INTO p_INVOICED_ENTITY_COUNT
			FROM TDIE_TUOS_INVOICE I
			WHERE I.INVOICE_NUMBER = p_INVOICE_NUMBER;

			-- Get TUOS data using Pipeline function
			OPEN p_TDIE_INVOICE_DATA_CURSOR FOR
				SELECT TDIE_INVOICE_DATA(T.MPRN,T.SERIAL_NUMBER,T.SUPPLY_UNIT,
					   		T.METER_TYPE,T.BEGIN_DATE,T.END_DATE,T.TARIFF_CODE,
							T.CHARGE_TYPE,T.CHARGE_STATE,T.TIMESLOT_CODE,
							T.INTERNAL_QUANTITY,T.INTERNAL_RATE,T.INTERNAL_AMOUNT,
							T.EXTERNAL_QUANTITY,T.EXTERNAL_RATE,T.EXTERNAL_AMOUNT,T.MIC)
				FROM TABLE(CAST(GET_TUOS_TDIE_INVOICE_DATA(p_INVOICE_NUMBER) AS TDIE_INVOICE_DATA_TABLE)) T;
		-- DUOS
		WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_DUOS_ROI_SENDER_PSE_ID THEN
			-- Get the MPRN Count from the DUOS Table
			SELECT COUNT(DISTINCT D.MPRN)
			INTO p_INVOICED_ENTITY_COUNT
			FROM TDIE_DUOS_INVOICE_DETAIL D
			WHERE D.INVOICE_NUMBER = p_INVOICE_NUMBER;

			-- Get DUOS data using Pipeline function
			OPEN p_TDIE_INVOICE_DATA_CURSOR FOR
				SELECT TDIE_INVOICE_DATA(T.MPRN,T.SERIAL_NUMBER,T.SUPPLY_UNIT,
					   		T.METER_TYPE,T.BEGIN_DATE,T.END_DATE,T.TARIFF_CODE,
							T.CHARGE_TYPE,T.CHARGE_STATE,T.TIMESLOT_CODE,
							T.INTERNAL_QUANTITY,T.INTERNAL_RATE,T.INTERNAL_AMOUNT,
							T.EXTERNAL_QUANTITY,T.EXTERNAL_RATE,T.EXTERNAL_AMOUNT,T.MIC)
				FROM TABLE(CAST(GET_DUOS_TDIE_INVOICE_DATA(p_INVOICE_NUMBER) AS TDIE_INVOICE_DATA_TABLE)) T;
		--DUOS NI
        WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_DUOS_NI_SENDER_PSE_ID AND p_SENDER_CID = MM_TDIE_UTIL.c_TDIE_DUOS_NI_SENDER THEN

            -- Get the MPRN Count from the DUOS NI table
			SELECT COUNT(DISTINCT D.POD_ID)
			INTO p_INVOICED_ENTITY_COUNT
			FROM TDIE_DUOS_NI_INVOICE_DETAIL D
			WHERE D.INVOICE_NUMBER = p_INVOICE_NUMBER;

            -- Get DUOS NI data using Pipeline function
			OPEN p_TDIE_INVOICE_DATA_CURSOR FOR
				SELECT TDIE_INVOICE_DATA(T.MPRN,T.SERIAL_NUMBER,T.SUPPLY_UNIT,
					   		T.METER_TYPE,T.BEGIN_DATE,T.END_DATE,T.TARIFF_CODE,
							T.CHARGE_TYPE,T.CHARGE_STATE,T.TIMESLOT_CODE,
							T.INTERNAL_QUANTITY,T.INTERNAL_RATE,T.INTERNAL_AMOUNT,
							T.EXTERNAL_QUANTITY,T.EXTERNAL_RATE,T.EXTERNAL_AMOUNT,T.MIC)
				FROM TABLE(CAST(GET_DUOS_NI_TDIE_INVOICE_DATA(p_INVOICE_NUMBER) AS TDIE_INVOICE_DATA_TABLE)) T;
        -- UOS
		WHEN v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_UOS_SENDER_PSE_ID
				OR v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_TUOS_NI_SENDER_PSE_ID THEN

			-- Get the MPRN/Meter Serial Number Count from the UOS table
			SELECT COUNT(DISTINCT D.MPRN || D.METER_ID_SERIAL_NUMBER)
			INTO p_INVOICED_ENTITY_COUNT
			FROM TDIE_UOS_INVOICE_DETAIL D
			WHERE D.INVOICE_NUMBER = p_INVOICE_NUMBER
			  AND D.SENDER_CID = p_SENDER_CID;

			-- Get UOS data using Pipeline function
			OPEN p_TDIE_INVOICE_DATA_CURSOR FOR
				SELECT TDIE_INVOICE_DATA(T.MPRN,T.SERIAL_NUMBER,T.SUPPLY_UNIT,
					   		T.METER_TYPE,T.BEGIN_DATE,T.END_DATE,T.TARIFF_CODE,
							T.CHARGE_TYPE,T.CHARGE_STATE,T.TIMESLOT_CODE,
							T.INTERNAL_QUANTITY,T.INTERNAL_RATE,T.INTERNAL_AMOUNT,
							T.EXTERNAL_QUANTITY,T.EXTERNAL_RATE,T.EXTERNAL_AMOUNT,T.MIC)
				FROM TABLE(CAST(GET_UOS_TDIE_INVOICE_DATA(p_INVOICE_NUMBER,p_SENDER_CID) AS TDIE_INVOICE_DATA_TABLE)) T;
		ELSE
			ERRS.RAISE_BAD_ARGUMENT('Sender PSE ID', v_SENDER_PSE_ID, 'Unsupported PSE ID');
	END CASE;

END GET_INVOICE_DATA;
----------------------------------------------------------------------------------------------------
PROCEDURE PUT_VALID_INVOICE_DATA
	(
	p_RETAIL_INVOICE             IN RETAIL_INVOICE%ROWTYPE,
	p_TDIE_INVOICE_DATA          IN TDIE_INVOICE_DATA,
	p_BEGIN_DATE                 IN DATE,
	p_END_DATE	                 IN DATE
	) AS
v_JURISDICTION  VARCHAR2(32);
v_ACCOUNT_ID    NUMBER(9);
v_SVC_LOC_ID	NUMBER(9);
v_EDC_ID  		NUMBER(9);
v_ESP_ID  		NUMBER(9);
v_MSG			VARCHAR2(4000);
v_ENTITY_GROUP_CATEGORY VARCHAR2(64);
v_ENTITY_GROUP_ID		NUMBER(9);
v_ANC_SVC_ID			NUMBER(9);

v_ACCOUNT_SERVICE_ID 	NUMBER(9);
v_PROVIDER_SERVICE_ID 	NUMBER(9);
v_SERVICE_DELIVERY_ID 	NUMBER(9);
v_SERVICE_ID 			NUMBER(9);
v_METER_TYPE 			VARCHAR2(64);
v_PERIOD_ID				NUMBER(9);
BEGIN
	IF p_TDIE_INVOICE_DATA.MPRN IS NOT NULL THEN

		v_ACCOUNT_ID := NVL(EI.GET_ID_FROM_NAME('MPRN-' || p_TDIE_INVOICE_DATA.MPRN, EC.ED_ACCOUNT, 1), 0);
		-- Account
		ACCOUNTS_METERS.PUT_ACCOUNT(v_ACCOUNT_ID,
									'MPRN-' || p_TDIE_INVOICE_DATA.MPRN,
									'MPRN-' || p_TDIE_INVOICE_DATA.MPRN,
									'Generated by TDIE Test Script.',
									v_ACCOUNT_ID,
									NULL,
									NULL,
									CASE WHEN p_TDIE_INVOICE_DATA.SERIAL_NUMBER IS NOT NULL THEN 'Meter' ELSE 'Account' END,
									NULL,
									NULL,
									NULL,
									NULL,
									NULL,
									NULL,
									NULL,
									NULL,
									NULL,
									NULL,
									NULL,
									NULL,
                                    0,
									NULL,
									NULL,
									CONSTANTS.ELECTRIC_MODEL);
		-- Account Ext Sys Id
		EI.PUT_EXTERNAL_SYSTEM_IDENTIFIER(EC.ES_TDIE, EC.ED_ACCOUNT, v_ACCOUNT_ID, p_TDIE_INVOICE_DATA.MPRN);
		-- Account Status
		ACCOUNTS_METERS.PUT_ACCOUNT_STATUS(v_ACCOUNT_ID, p_BEGIN_DATE, p_END_DATE, 'Active', p_BEGIN_DATE);
		-- Service Location
		v_SVC_LOC_ID := NVL(EI.GET_ID_FROM_NAME('MPRN-' || p_TDIE_INVOICE_DATA.MPRN, EC.ED_SERVICE_LOCATION, 1), 0);
		ACCOUNTS_METERS.PUT_SERVICE_LOCATION(v_SVC_LOC_ID,
											 v_ACCOUNT_ID,
											 p_BEGIN_DATE,
											 p_BEGIN_DATE,
											 p_END_DATE,
											 'ABC12345',
											 'XYZ12345',
											 'MPRN-' || p_TDIE_INVOICE_DATA.MPRN,
											 'MPRN-' || p_TDIE_INVOICE_DATA.MPRN,
											 'Generated by TDIE Test Script.',
											 v_SVC_LOC_ID,
											 33.65,
											 84.42,
											 'EDT',
											 NULL,
											 NULL,
											 NULL,
											 '214 State Capitol',
											 NULL,
											 'Atlanta',
											 'GA',
											 '30334',
											 'USA',
											 10000,
											 NULL,
											 NULL,
											 NULL,
											 NULL,
											 NULL,
											 NULL,
											 v_MSG);
		EI.PUT_EXTERNAL_SYSTEM_IDENTIFIER(EC.ES_TDIE, EC.ED_SERVICE_LOCATION, v_SVC_LOC_ID, p_TDIE_INVOICE_DATA.MPRN);
		-- Account EDC
		-- First, JURISDICTION
		v_JURISDICTION := MM_TDIE_UTIL.JURISDICTION_FOR_SENDER_PSE(p_RETAIL_INVOICE.SENDER_PSE_ID);
		IF v_JURISDICTION = MM_TDIE_UTIL.c_TDIE_JURISDICTION_ROI THEN
			v_EDC_ID := MM_TDIE_UTIL.g_ESBN_EDC_ID;
		ELSIF v_JURISDICTION = MM_TDIE_UTIL.c_TDIE_JURISDICTION_NI THEN
			v_EDC_ID := MM_TDIE_UTIL.g_NIE_EDC_ID;
		END IF;
		ACCOUNTS_METERS.PUT_ACCOUNT_EDC(v_ACCOUNT_ID,
										v_EDC_ID,
										p_BEGIN_DATE,
										NULL,
										NULL,
										NULL,
										p_END_DATE,
										v_EDC_ID,
										p_BEGIN_DATE);
		-- Account ESP/PSE
		ID.ID_FOR_ESP('TDIE_ESP', TRUE, v_ESP_ID); -- TODO: Not sure about the Entity Name here
		ACCOUNTS_METERS.PUT_ACCOUNT_ESP(v_ACCOUNT_ID,
										v_ESP_ID,
										CONSTANTS.NOT_ASSIGNED,
										p_BEGIN_DATE,
										p_END_DATE,
										NULL,
										v_ESP_ID,
										CONSTANTS.NOT_ASSIGNED,
										p_BEGIN_DATE);
		UT.PUT_TEMPORAL_DATA('PSE_ESP',
								p_BEGIN_DATE,
								p_END_DATE,
								TRUE,
								TRUE,
								'ESP_ID',
								v_ESP_ID,
								TRUE,
								'PSE_ID',
								p_RETAIL_INVOICE.RECIPIENT_PSE_ID,
								TRUE
								);

		-- TARIFF CODE if it is populated
		IF p_TDIE_INVOICE_DATA.TARIFF_CODE IS NOT NULL THEN

			-- Determine the ENTITY_GROUP category based on the p_SENDER_CID
			IF MM_TDIE_UTIL.SENDER_PSE_IS_TUOS(p_RETAIL_INVOICE.SENDER_PSE_ID) THEN
				v_ENTITY_GROUP_CATEGORY := MM_TDIE_UTIL.g_EG_TUOS_GROUP;
			ELSIF MM_TDIE_UTIL.SENDER_PSE_IS_DUOS(p_RETAIL_INVOICE.SENDER_PSE_ID) THEN
				v_ENTITY_GROUP_CATEGORY := MM_TDIE_UTIL.g_EG_DUOS_GROUP;
			END IF;

			v_ENTITY_GROUP_ID := NVL(EI.GET_ID_FROM_NAME(p_TDIE_INVOICE_DATA.TARIFF_CODE, EC.ED_ENTITY_GROUP, 1), 0);

			IO.PUT_ENTITY_GROUP(v_ENTITY_GROUP_ID,
				p_TDIE_INVOICE_DATA.TARIFF_CODE,
				p_TDIE_INVOICE_DATA.TARIFF_CODE,
				'Generated by TDIE Test Script.',
				v_ENTITY_GROUP_ID,
				EC.ED_ACCOUNT,
				NULL,
				0,
				v_ENTITY_GROUP_CATEGORY);

			EM.PUT_GROUP_ASSIGNMENT(v_ENTITY_GROUP_ID,
					v_ACCOUNT_ID,
					p_BEGIN_DATE,
					p_END_DATE,
					v_ENTITY_GROUP_ID,
					p_BEGIN_DATE);
		END IF;

		-- MIC
		IF p_TDIE_INVOICE_DATA.MIC IS NOT NULL THEN

			v_ANC_SVC_ID := NVL(EI.GET_ID_FROM_NAME(MM_TDIE_UTIL.c_MIC_ANCILLARY_SERVICE_NAME, EC.ED_ANCILLARY_SERVICE, 1), 0);

			IO.PUT_ANCILLARY_SERVICE(v_ANC_SVC_ID,
				MM_TDIE_UTIL.c_MIC_ANCILLARY_SERVICE_NAME,
				MM_TDIE_UTIL.c_MIC_ANCILLARY_SERVICE_NAME,
				'Generated by TDIE Test Script.',
				v_ANC_SVC_ID,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL);

			ACCOUNTS_METERS.PUT_ACCOUNT_ANCILLARY_SERVICE(v_ACCOUNT_ID,
				v_ANC_SVC_ID,
				p_BEGIN_DATE,
				p_END_DATE,
				p_TDIE_INVOICE_DATA.MIC,
				v_ANC_SVC_ID,
				p_BEGIN_DATE);

		END IF;

		-- PERIOD
		IF p_TDIE_INVOICE_DATA.TIMESLOT_CODE IS NOT NULL THEN
			v_PERIOD_ID := NVL(EI.GET_ID_FROM_NAME(p_TDIE_INVOICE_DATA.TIMESLOT_CODE, EC.ED_PERIOD, 1), 0);
			IO.PUT_PERIOD(v_PERIOD_ID, p_TDIE_INVOICE_DATA.TIMESLOT_CODE, p_TDIE_INVOICE_DATA.TIMESLOT_CODE, 'Generated', v_PERIOD_ID, 8454143);
		ELSE
			v_PERIOD_ID := -1;
		END IF;

		IF INSTR(UPPER(p_TDIE_INVOICE_DATA.CHARGE_TYPE),'KWH') > 0 THEN
			CS.GET_ACCOUNT_SERVICE_ID(v_ACCOUNT_ID,v_SVC_LOC_ID,CONSTANTS.NOT_ASSIGNED,CONSTANTS.NOT_ASSIGNED,v_ACCOUNT_SERVICE_ID);
			v_PROVIDER_SERVICE_ID := CS.GET_PROVIDER_SERVICE_ID(v_ACCOUNT_SERVICE_ID,p_BEGIN_DATE);
			CS.GET_SERVICE_DELIVERY_ID(v_ACCOUNT_SERVICE_ID, v_PROVIDER_SERVICE_ID, p_BEGIN_DATE, v_SERVICE_DELIVERY_ID);
			v_SERVICE_ID := CS.GET_SERVICE_ID(GA.DEFAULT_MODEL,GA.BASE_SCENARIO_ID,CONSTANTS.LOW_DATE,v_PROVIDER_SERVICE_ID,v_ACCOUNT_SERVICE_ID,v_SERVICE_DELIVERY_ID);
			v_METER_TYPE := CS.GET_METER_TYPE(v_ACCOUNT_ID, NULL);

			BEGIN
				DELETE FROM SERVICE_CONSUMPTION S
				WHERE S.SERVICE_ID = v_SERVICE_ID
				  AND S.BEGIN_DATE = p_BEGIN_DATE
				  AND S.END_DATE = p_END_DATE
				  AND S.BILL_CODE = GA.BILL_CONSUMPTION
				  AND S.CONSUMPTION_CODE = GA.ACTUAL_CONSUMPTION
				  AND S.RECEIVED_DATE = CONSTANTS.LOW_DATE
				  AND S.TEMPLATE_ID = -1
				  AND S.PERIOD_ID = v_PERIOD_ID
				  AND S.UNIT_OF_MEASUREMENT = GA.DEFAULT_UNIT_OF_MEASUREMENT;
				INSERT INTO SERVICE_CONSUMPTION
					(SERVICE_ID,
					BEGIN_DATE,
					END_DATE,
					BILL_CODE,
					CONSUMPTION_CODE,
					RECEIVED_DATE,
					TEMPLATE_ID,
					PERIOD_ID,
					UNIT_OF_MEASUREMENT,
					METER_TYPE,
					BILLED_USAGE,
					BILLED_DEMAND,
					METERED_USAGE,
					METERED_DEMAND,
					ENTRY_DATE)
				VALUES
					(v_SERVICE_ID,
					p_BEGIN_DATE,
					p_END_DATE,
					GA.BILL_CONSUMPTION,
					GA.ACTUAL_CONSUMPTION,
					CONSTANTS.LOW_DATE,
					-1,
					v_PERIOD_ID,
					GA.DEFAULT_UNIT_OF_MEASUREMENT,
					v_METER_TYPE,
					100,
					200,
					300,
					400,
					SYSDATE);
			EXCEPTION
				WHEN OTHERS THEN
					NULL;
			END;
		END IF;
	ELSE
		-- TODO
		-- SERVICE_POINT
		NULL;
	END IF;

END PUT_VALID_INVOICE_DATA;
----------------------------------------------------------------------------------------------------
PROCEDURE VALIDATE_INVOICE_ACCOUNT
	(
	p_RETAIL_INVOICE             IN RETAIL_INVOICE%ROWTYPE,
	p_INVOICE_LINE_VALIDATION_ID IN NUMBER,
	p_TDIE_INVOICE_DATA          IN TDIE_INVOICE_DATA,
	p_BEGIN_DATE                 IN DATE,
	p_END_DATE	                 IN DATE,
	p_IS_VALID			     	 OUT NUMBER,
	p_ERRS			     		 OUT VARCHAR2
	) AS

v_INV_LINE_VALIDATION 		TDIE_INVOICE_LINE_VALIDATION%ROWTYPE;
v_ENTITY_GROUP_CATEGORY 	ENTITY_GROUP.GROUP_CATEGORY%TYPE;
v_MIC_ANCILLARY_SERVICE_ID  ANCILLARY_SERVICE.ANCILLARY_SERVICE_ID%TYPE;
v_COUNT						PLS_INTEGER;
v_EXPECTED					PLS_INTEGER;
v_MIN_ID					NUMBER(9);
v_MAx_ID					NUMBER(9);
v_EXTERNAL_MIC_KVA			NUMBER(14,6);
v_MIC_VALIDATION_RATIO		NUMBER;

v_IS_PUTTING_DATA BOOLEAN := UT.BOOLEAN_FROM_STRING(get_dictionary_value('Put Valid Data',0,'MarketExchange','TDIE','Settings'));

	----------------------------------------------------------
	PROCEDURE APPEND_ERR(p_ERR_MSG VARCHAR2) AS
	BEGIN
		IF p_ERRS IS NULL THEN
			p_ERRS := 'MPRN-' || v_INV_LINE_VALIDATION.MPRN || ' has the following errors: ' || UTL_TCP.CRLF;
		END IF;
		p_ERRS := p_ERRS || '  ' || p_ERR_MSG || UTL_TCP.CRLF;
		v_INV_LINE_VALIDATION.IS_VALID := 0;
	END APPEND_ERR;
	----------------------------------------------------------
BEGIN
	IF v_IS_PUTTING_DATA THEN
		PUT_VALID_INVOICE_DATA(p_RETAIL_INVOICE,p_TDIE_INVOICE_DATA,p_BEGIN_DATE,p_END_DATE);
	END IF;

	-- Get the TDIE_INVOICE_LINE_VALIDATION record from the table
	SELECT *
	INTO v_INV_LINE_VALIDATION
	FROM TDIE_INVOICE_LINE_VALIDATION V
	WHERE V.INVOICE_LINE_VALIDATION_ID = p_INVOICE_LINE_VALIDATION_ID;

	-- Initialize to TRUE
	v_INV_LINE_VALIDATION.IS_VALID := 1;

	-- Set SERVICE_POINT_ID to NA
	v_INV_LINE_VALIDATION.SERVICE_POINT_ID := CONSTANTS.NOT_ASSIGNED;

	-- Set the JURISDICTION
	v_INV_LINE_VALIDATION.JURISDICTION := MM_TDIE_UTIL.JURISDICTION_FOR_SENDER_PSE(p_RETAIL_INVOICE.SENDER_PSE_ID);

	-- Set the EXTERNAL_EDC_ID based on the JURISDICTION
	IF v_INV_LINE_VALIDATION.JURISDICTION = MM_TDIE_UTIL.c_TDIE_JURISDICTION_ROI THEN
		v_INV_LINE_VALIDATION.EXTERNAL_EDC_ID := MM_TDIE_UTIL.g_ESBN_EDC_ID;
	ELSIF v_INV_LINE_VALIDATION.JURISDICTION = MM_TDIE_UTIL.c_TDIE_JURISDICTION_NI THEN
		v_INV_LINE_VALIDATION.EXTERNAL_EDC_ID := MM_TDIE_UTIL.g_NIE_EDC_ID;
	END IF;

	-- Set the EXTERNAL_PSE_ID to the RECIPIENT_PSE_ID from the RETAIL_INVOICE record.
	v_INV_LINE_VALIDATION.EXTERNAL_PSE_ID := p_RETAIL_INVOICE.RECIPIENT_PSE_ID;

	-- Set the EXTERNAL_TARIFF_CODE and MIC from the original input cursor
	v_INV_LINE_VALIDATION.EXTERNAL_TARIFF_CODE := p_TDIE_INVOICE_DATA.TARIFF_CODE;
	v_INV_LINE_VALIDATION.EXTERNAL_MIC := p_TDIE_INVOICE_DATA.MIC;

	-- Validate that we have a ACCOUNT
	BEGIN
		v_INV_LINE_VALIDATION.ACCOUNT_ID := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(v_INV_LINE_VALIDATION.MPRN, EC.ED_ACCOUNT, EC.ES_TDIE);
	EXCEPTION
		WHEN MSGCODES.e_ERR_NO_SUCH_ENTRY THEN
			v_INV_LINE_VALIDATION.IS_VALID := 0;
			APPEND_ERR('No matching ACCOUNT record.');
		WHEN MSGCODES.e_ERR_TOO_MANY_ENTRIES THEN
			v_INV_LINE_VALIDATION.IS_VALID := 0;
			APPEND_ERR('Too many matching ACCOUNT records.');
	END;

	IF v_INV_LINE_VALIDATION.ACCOUNT_ID IS NOT NULL AND v_INV_LINE_VALIDATION.ACCOUNT_ID > 0 THEN

		-- total number of days in this period
		v_EXPECTED := p_END_DATE - p_BEGIN_DATE + 1;

		-- Validate that the status is Active
		SELECT SUM(LEAST(NVL(A.END_DATE,CONSTANTS.HIGH_DATE),p_END_DATE)
					- GREATEST(A.BEGIN_DATE,p_BEGIN_DATE) + 1) -- total span of days
		INTO v_COUNT
			FROM ACCOUNT_STATUS A, ACCOUNT_STATUS_NAME N
			WHERE A.ACCOUNT_ID = v_INV_LINE_VALIDATION.ACCOUNT_ID
			AND A.BEGIN_DATE <= p_END_DATE
			AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
			AND A.STATUS_NAME = N.STATUS_NAME
			AND N.IS_ACTIVE = 1;
		-- active entire period?
		IF MM_TDIE_UTIL.VERIFY_STATIC_DATA_DURATION(v_COUNT,v_EXPECTED) THEN
			v_INV_LINE_VALIDATION.IS_ACTIVE := 1;
		ELSE
			APPEND_ERR('Account Status is not active (' || TEXT_UTIL.TO_CHAR_DATE_RANGE(p_BEGIN_DATE,p_END_DATE) || ').');
				v_INV_LINE_VALIDATION.IS_ACTIVE := 0;
		END IF;

		--	Validate the Accounts SERVICE_LOCATION
		SELECT SUM(LEAST(NVL(A.END_DATE,CONSTANTS.HIGH_DATE),p_END_DATE)
					- GREATEST(A.BEGIN_DATE,p_BEGIN_DATE) + 1) -- total span of days
		INTO v_COUNT
			FROM ACCOUNT_SERVICE_LOCATION A
			WHERE A.ACCOUNT_ID = v_INV_LINE_VALIDATION.ACCOUNT_ID
			AND A.BEGIN_DATE <= p_END_DATE
			AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE;
		-- assigned entire period?
		IF MM_TDIE_UTIL.VERIFY_STATIC_DATA_DURATION(v_COUNT,v_EXPECTED) THEN
			v_INV_LINE_VALIDATION.HAS_SERVICE_LOCATION := 1;
		ELSE
			APPEND_ERR('Account is missing a valid Service Location (' || TEXT_UTIL.TO_CHAR_DATE_RANGE(p_BEGIN_DATE,p_END_DATE) || ').');
				v_INV_LINE_VALIDATION.HAS_SERVICE_LOCATION := 0;
		END IF;

		--	Validate the Account's Meter
		IF v_INV_LINE_VALIDATION.SERIAL_NUMBER <> CONSTANTS.NOT_ASSIGNED_STRING THEN
			-- Validate that we have a METER

			-- External identifier is not unique - so find correct matching meter based on account relationships
			-- and date ranges
			SELECT SUM(LEAST(NVL(A.END_DATE,CONSTANTS.HIGH_DATE),NVL(B.END_DATE,CONSTANTS.HIGH_DATE),p_END_DATE)
						- GREATEST(A.BEGIN_DATE,B.BEGIN_DATE,p_BEGIN_DATE) + 1), -- total span of days
					MIN(B.METER_ID), MAX(B.METER_ID)
			INTO v_COUNT, v_MIN_ID, v_MAX_ID
			FROM ACCOUNT_SERVICE_LOCATION A, SERVICE_LOCATION_METER B
				WHERE A.ACCOUNT_ID = v_INV_LINE_VALIDATION.ACCOUNT_ID
				AND A.BEGIN_DATE <= p_END_DATE
				AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
				AND B.SERVICE_LOCATION_ID = A.SERVICE_LOCATION_ID
				AND B.BEGIN_DATE <= NVL(A.END_DATE, CONSTANTS.HIGH_DATE)
				AND NVL(B.END_DATE, CONSTANTS.HIGH_DATE) >= A.BEGIN_DATE
				-- filter by serial number
				AND EI.GET_ENTITY_IDENTIFIER_EXTSYS(EC.ED_METER, B.METER_ID, EC.ES_TDIE) = v_INV_LINE_VALIDATION.SERIAL_NUMBER;

			-- assigned entire period?
			IF MM_TDIE_UTIL.VERIFY_STATIC_DATA_DURATION(v_COUNT,v_EXPECTED) THEN
				-- make sure there is only one meter found
				IF v_MIN_ID <> v_MAX_ID THEN
					APPEND_ERR('Too many matching METER records for serial number '||v_INV_LINE_VALIDATION.SERIAL_NUMBER
								||' (' || TEXT_UTIL.TO_CHAR_DATE_RANGE(p_BEGIN_DATE,p_END_DATE) || ').');
					v_INV_LINE_VALIDATION.METER_ID := NULL;

				-- Got a good one!
				ELSE
					v_INV_LINE_VALIDATION.METER_ID := v_MIN_ID;
				END IF;

			ELSE
				APPEND_ERR('No matching METER record for serial number '||v_INV_LINE_VALIDATION.SERIAL_NUMBER
							||' (' || TEXT_UTIL.TO_CHAR_DATE_RANGE(p_BEGIN_DATE,p_END_DATE) || ').');
				v_INV_LINE_VALIDATION.METER_ID := NULL;

			END IF;
		END IF;

		-- Validate the Account's EDC
		SELECT SUM(LEAST(NVL(A.END_DATE,CONSTANTS.HIGH_DATE),p_END_DATE)
					- GREATEST(A.BEGIN_DATE,p_BEGIN_DATE) + 1), -- total span of days
				MIN(A.EDC_ID), MAX(A.EDC_ID)
		INTO v_COUNT, v_MIN_ID, v_MAX_ID
			FROM ACCOUNT_EDC A
			WHERE A.ACCOUNT_ID = v_INV_LINE_VALIDATION.ACCOUNT_ID
			AND A.BEGIN_DATE <= p_END_DATE
			AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE;
		-- assigned entire period?
		IF MM_TDIE_UTIL.VERIFY_STATIC_DATA_DURATION(v_COUNT,v_EXPECTED) THEN
			-- save whichever ID of the two does not match expected EDC if either doesn't match
			v_INV_LINE_VALIDATION.INTERNAL_EDC_ID := CASE WHEN v_MIN_ID = v_INV_LINE_VALIDATION.EXTERNAL_EDC_ID
														THEN v_MAX_ID ELSE v_MIN_ID END;
			-- Make sure that they match
			IF v_INV_LINE_VALIDATION.INTERNAL_EDC_ID <> v_INV_LINE_VALIDATION.EXTERNAL_EDC_ID THEN
				APPEND_ERR('Internal Account EDC does not match the External EDC. '
					|| '(INTERNAL_EDC=' || TEXT_UTIL.TO_CHAR_ENTITY(v_INV_LINE_VALIDATION.INTERNAL_EDC_ID, EC.ED_EDC)
					|| ',EXTERNAL_EDC=' || TEXT_UTIL.TO_CHAR_ENTITY(v_INV_LINE_VALIDATION.EXTERNAL_EDC_ID, EC.ED_EDC) || ')');
			END IF;

		ELSE
			APPEND_ERR('Account is missing an EDC relationship (' || TEXT_UTIL.TO_CHAR_DATE_RANGE(p_BEGIN_DATE,p_END_DATE) || ').');
			v_INV_LINE_VALIDATION.INTERNAL_EDC_ID := NULL;

		END IF;

		-- Validate the Accounts PSE
		SELECT SUM(LEAST(NVL(A.END_DATE,CONSTANTS.HIGH_DATE),NVL(B.END_DATE,CONSTANTS.HIGH_DATE),p_END_DATE)
					- GREATEST(A.BEGIN_DATE,B.BEGIN_DATE,p_BEGIN_DATE) + 1), -- total span of days
				MIN(B.PSE_ID), MAX(B.PSE_ID)
		INTO v_COUNT, v_MIN_ID, v_MAX_ID
			FROM ACCOUNT_ESP A, PSE_ESP B
			WHERE A.ACCOUNT_ID = v_INV_LINE_VALIDATION.ACCOUNT_ID
			AND A.BEGIN_DATE <= p_END_DATE
			AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE) >= p_BEGIN_DATE
			AND B.ESP_ID = A.ESP_ID
			AND B.BEGIN_DATE <= NVL(A.END_DATE, CONSTANTS.HIGH_DATE)
			AND NVL(B.END_DATE, CONSTANTS.HIGH_DATE) >= A.BEGIN_DATE;
		-- not assigned entire period?
		IF MM_TDIE_UTIL.VERIFY_STATIC_DATA_DURATION(v_COUNT,v_EXPECTED) THEN
			-- save whichever ID of the two does not match expected PSE if either doesn't match
			v_INV_LINE_VALIDATION.INTERNAL_PSE_ID := CASE WHEN v_MIN_ID = v_INV_LINE_VALIDATION.EXTERNAL_PSE_ID
														THEN v_MAX_ID ELSE v_MIN_ID END;
			-- Make sure that they match
			IF v_INV_LINE_VALIDATION.INTERNAL_PSE_ID <> v_INV_LINE_VALIDATION.EXTERNAL_PSE_ID THEN
				APPEND_ERR('Internal Account PSE does not match the External PSE. '
					|| '(INTERNAL_PSE=' || TEXT_UTIL.TO_CHAR_ENTITY(v_INV_LINE_VALIDATION.INTERNAL_PSE_ID,EC.ED_PSE)
					|| ',EXTERNAL_PSE=' || TEXT_UTIL.TO_CHAR_ENTITY(v_INV_LINE_VALIDATION.EXTERNAL_PSE_ID,EC.ED_PSE) || ')');
			END IF;

		ELSE
			APPEND_ERR('Account is missing an ESP/PSE relationship (' || TEXT_UTIL.TO_CHAR_DATE_RANGE(p_BEGIN_DATE,p_END_DATE) || ').');
			v_INV_LINE_VALIDATION.INTERNAL_PSE_ID := NULL;

		END IF;

		-- Validate the TARIFF CODE if it is populated with anything but BC
		IF p_TDIE_INVOICE_DATA.TARIFF_CODE IS NOT NULL AND
         p_TDIE_INVOICE_DATA.TARIFF_CODE <> g_TARIFF_CODE_BC THEN

			-- Determine the ENTITY_GROUP category based on the p_SENDER_CID
			IF MM_TDIE_UTIL.SENDER_PSE_IS_TUOS(p_RETAIL_INVOICE.SENDER_PSE_ID) THEN
				v_ENTITY_GROUP_CATEGORY := MM_TDIE_UTIL.g_EG_TUOS_GROUP;
			ELSIF MM_TDIE_UTIL.SENDER_PSE_IS_DUOS(p_RETAIL_INVOICE.SENDER_PSE_ID) THEN
				v_ENTITY_GROUP_CATEGORY := MM_TDIE_UTIL.g_EG_DUOS_GROUP;
			END IF;

			-- Validate ENTITY_GROUP for this Account for the BEGIN_DATE and END_DATE
			BEGIN
				-- Note: This query can return more than one row if the Account
				-- is improperly assigned to more than one group.
				-- Also, we only use the End_Date in the query in case the Account
				-- is assigned to more than one group over the date range (last one wins).
				SELECT G.ENTITY_GROUP_NAME
				INTO v_INV_LINE_VALIDATION.INTERNAL_TARIFF_CODE
				FROM ENTITY_GROUP G,
					 ENTITY_GROUP_ASSIGNMENT A
				WHERE A.ENTITY_GROUP_ID = G.ENTITY_GROUP_ID
				  AND G.GROUP_CATEGORY = v_ENTITY_GROUP_CATEGORY
				  AND p_END_DATE BETWEEN A.BEGIN_DATE AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE)
				  AND A.ENTITY_ID = v_INV_LINE_VALIDATION.ACCOUNT_ID;

				-- Validate that the 2 values match
				IF v_INV_LINE_VALIDATION.INTERNAL_TARIFF_CODE <> v_INV_LINE_VALIDATION.EXTERNAL_TARIFF_CODE THEN
					APPEND_ERR('Internal Account Entity Group does not correspond to External Tariff Code.'
						|| '(INTERNAL_TARIFF_CODE=' || v_INV_LINE_VALIDATION.INTERNAL_TARIFF_CODE
						|| ',EXTERNAL_TARIFF_CODE=' || v_INV_LINE_VALIDATION.EXTERNAL_TARIFF_CODE || ')');
				END IF;

			EXCEPTION
				WHEN TOO_MANY_ROWS THEN
					APPEND_ERR('Account is assigned to more than one Entity Group with GROUP_CATEGORY = ' || v_ENTITY_GROUP_CATEGORY || '.');
				WHEN NO_DATA_FOUND THEN
					APPEND_ERR('Account is not assigned to an Entity Group with GROUP_CATEGORY = ' || v_ENTITY_GROUP_CATEGORY  || '.');
			END;
		END IF;

		-- Validate the MIC if it is populated
		IF p_TDIE_INVOICE_DATA.MIC IS NOT NULL THEN

			v_MIC_ANCILLARY_SERVICE_ID := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(MM_TDIE_UTIL.c_MIC_ANCILLARY_SERVICE_NAME,EC.ED_ANCILLARY_SERVICE,EC.ES_TDIE);

			BEGIN
				-- Determine the internal MIC by looking up the Ancillary Service value for the Account.
				-- Just look at the MIC effective on the period end date.
				SELECT A.SERVICE_VAL
				INTO v_INV_LINE_VALIDATION.INTERNAL_MIC
				FROM ACCOUNT_ANCILLARY_SERVICE A
				WHERE A.ACCOUNT_ID = v_INV_LINE_VALIDATION.ACCOUNT_ID
				  AND A.ANCILLARY_SERVICE_ID = v_MIC_ANCILLARY_SERVICE_ID
				  AND p_END_DATE BETWEEN A.BEGIN_DATE AND NVL(A.END_DATE, CONSTANTS.HIGH_DATE);

				/* While calculating the ratio, we need to get check if Internal MIC is NULL or Zero to handle divide by zero/NULL scenario. */
				v_MIC_VALIDATION_RATIO := CASE NVL(v_INV_LINE_VALIDATION.INTERNAL_MIC, 0)
										  WHEN 0 THEN
											0
										  ELSE
											(v_INV_LINE_VALIDATION.EXTERNAL_MIC/v_INV_LINE_VALIDATION.INTERNAL_MIC)
										  END;

				-- Make sure that they match
				IF v_MIC_VALIDATION_RATIO <> g_KW_TO_KVA_PF THEN
					v_EXTERNAL_MIC_KVA := v_INV_LINE_VALIDATION.EXTERNAL_MIC/g_KW_TO_KVA_PF;

					APPEND_ERR('Internal MIC does not match the External MIC.'
						|| '(Internal MIC=' || NVL(TO_CHAR(v_INV_LINE_VALIDATION.INTERNAL_MIC), 'NULL') || 'kVA'
					    || ',External MIC=' || v_EXTERNAL_MIC_KVA || 'kVA'
						|| '[' || v_INV_LINE_VALIDATION.EXTERNAL_MIC/1000 ||'MW])');
				END IF;

			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					APPEND_ERR('Account is missing the MIC Ancillary Service relationship (' || TEXT_UTIL.TO_CHAR_DATE_RANGE(p_BEGIN_DATE,p_END_DATE) || ').');
			END;
		END IF;

		-- Update the record in the TDIE_INVOICE_LINE_VALIDATION table.
		UPDATE TDIE_INVOICE_LINE_VALIDATION V
		SET ROW = v_INV_LINE_VALIDATION WHERE V.INVOICE_LINE_VALIDATION_ID = p_INVOICE_LINE_VALIDATION_ID;

	END IF;

	p_IS_VALID :=  v_INV_LINE_VALIDATION.IS_VALID;

END VALIDATE_INVOICE_ACCOUNT;
----------------------------------------------------------------------------------------------------
FUNCTION VALIDATE_INVOICE
	(
	p_INVOICE_NUMBER IN VARCHAR2,
	p_SENDER_CID     IN VARCHAR2
	) RETURN NUMBER AS
v_IDENTIFIER_TYPE          VARCHAR2(16) := 'Default';
v_RETAIL_INVOICE 			 	RETAIL_INVOICE%ROWTYPE;
v_CURSOR_RECORD				 	rec_TDIE_INVOICE_DATA;
v_CUR_INVOICE_DATA		 		TDIE_INVOICE_DATA;
v_LAST_INVOICE_DATA	 			TDIE_INVOICE_DATA;
v_CUR_INVOICE_ENTITY_STRING		VARCHAR2(64);
v_LAST_INVOICE_ENTITY_STRING	VARCHAR2(64);
v_TDIE_INVOICE_DATA_CURSOR	 	cur_TDIE_INVOICE_DATA_CURSOR;
v_ENTITY_COUNT				 	NUMBER;
v_PROGRESS_IDX		 	        NUMBER(9);
v_INVALID_LINE_COUNT			NUMBER(9) := 0;
v_LINE_COUNT 				 	NUMBER(9) := 0;
v_INV_LINE_VALIDATION_ID 		NUMBER(9);
v_MIN_BEGIN_DATE			 	DATE;
v_MAX_END_DATE				 	DATE;
v_SERVICE_POINT_ID				SERVICE_POINT.SERVICE_POINT_ID%TYPE;
v_COMPONENT_NAME				VARCHAR2(64);
v_COMPONENT_ID					COMPONENT.COMPONENT_ID%TYPE;
v_PRODUCT_ID					PRODUCT.PRODUCT_ID%TYPE;
v_PERIOD_ID						PERIOD.PERIOD_ID%TYPE;
v_IS_VALID					 	NUMBER := 1;
v_COMPONENT_IS_VALID			NUMBER := 1;
v_INVALID_LINE_ERRS_CLOB		CLOB := '';
v_ERRS						 	VARCHAR2(32000) := '';

TYPE t_STRING_SET IS TABLE OF VARCHAR2(64) INDEX BY VARCHAR2(64);

v_COMPONENT_ERRS	t_STRING_SET;
v_PRODUCT_ERRS		t_STRING_SET;
v_PERIOD_ERRS		t_STRING_SET;

v_ERR_IDX VARCHAR2(64);
v_ERR_MSG VARCHAR2(4000);

TYPE t_STATIC_DATA_MAP IS TABLE OF t_STRING_SET INDEX BY VARCHAR2(64);

v_STATIC_DATA_MAP t_STATIC_DATA_MAP;

BEGIN
	-- Check security
	SD.VERIFY_ACTION_IS_ALLOWED(MM_TDIE_UTIL.c_ACTION_RUN_ANY_VALIDATION);

	LOGS.LOG_INFO('Begin validating Invoice: ' || p_INVOICE_NUMBER || ', Sender: ' || p_SENDER_CID);

	v_RETAIL_INVOICE := GET_RETAIL_INVOICE(p_INVOICE_NUMBER, p_SENDER_CID);

	GET_INVOICE_DATA(p_INVOICE_NUMBER, p_SENDER_CID, v_ENTITY_COUNT, v_TDIE_INVOICE_DATA_CURSOR);
    v_IDENTIFIER_TYPE := MM_TDIE_UTIL.GET_TYPE_FOR_SENDER_CID(p_SENDER_CID);

	LOGS.INIT_PROCESS_PROGRESS('Processing...', v_ENTITY_COUNT, 'MPRNs');

	LOGS.LOG_INFO('Validating ' || v_ENTITY_COUNT || ' MPRNs/Serial Numbers/SUs.');

	v_PROGRESS_IDX := LOGS.PUSH_PROGRESS_RANGE(v_ENTITY_COUNT);

	-- Delete all existing Validation Data for this RETAIL_INVOICE
	DELETE FROM TDIE_INVOICE_COMP_VALIDATION V WHERE V.RETAIL_INVOICE_ID = v_RETAIL_INVOICE.RETAIL_INVOICE_ID;
	DELETE FROM TDIE_INVOICE_LINE_VALIDATION V WHERE V.RETAIL_INVOICE_ID = v_RETAIL_INVOICE.RETAIL_INVOICE_ID;

	LOOP
		FETCH v_TDIE_INVOICE_DATA_CURSOR
			INTO v_CURSOR_RECORD;

		EXIT WHEN v_TDIE_INVOICE_DATA_CURSOR%NOTFOUND;

		v_CUR_INVOICE_DATA := v_CURSOR_RECORD.DATA;

		ASSERT(v_CUR_INVOICE_DATA.MPRN IS NOT NULL OR v_CUR_INVOICE_DATA.SUPPLY_UNIT IS NOT NULL,'Invalid Invoice Data. Either the MPRN or Supply Unit must be non-null.');

		-- Determine if this is an MPRN/Meter Serial Number or SU
		IF v_CUR_INVOICE_DATA.MPRN <> CONSTANTS.NOT_ASSIGNED_STRING THEN
			v_CUR_INVOICE_ENTITY_STRING := v_CUR_INVOICE_DATA.MPRN || v_CUR_INVOICE_DATA.SERIAL_NUMBER;
		ELSE
			v_CUR_INVOICE_ENTITY_STRING := v_CUR_INVOICE_DATA.SUPPLY_UNIT;
		END IF;

		-- Check to see if this is a 'NEW' MPRN/Meter Serial Number or SU
		IF v_LAST_INVOICE_ENTITY_STRING IS NULL OR v_CUR_INVOICE_ENTITY_STRING <> v_LAST_INVOICE_ENTITY_STRING THEN
			IF v_LAST_INVOICE_ENTITY_STRING IS NOT NULL THEN
				-- This is not the first record. Increment the Progress and Line Count
				LOGS.INCREMENT_PROCESS_PROGRESS();
				v_LINE_COUNT := v_LINE_COUNT + 1;
				-- If the last record was an MPRN, then validate the Account
				IF v_LAST_INVOICE_DATA.MPRN IS NOT NULL THEN
					VALIDATE_INVOICE_ACCOUNT(v_RETAIL_INVOICE,
                                        v_INV_LINE_VALIDATION_ID,
                                        v_LAST_INVOICE_DATA,
                                        v_MIN_BEGIN_DATE,
                                        v_MAX_END_DATE,
                                        v_IS_VALID,
                                        v_ERRS);
					IF v_IS_VALID = 0 THEN
						v_INVALID_LINE_COUNT := v_INVALID_LINE_COUNT + 1;
						v_INVALID_LINE_ERRS_CLOB := v_INVALID_LINE_ERRS_CLOB || v_ERRS;
					END IF;
				END IF;
			END IF;

			LOGS.LOG_DEBUG('New MPRN/Serial Number/SU found.');

			v_IS_VALID := 1;
			v_MIN_BEGIN_DATE := NULL;
			v_MAX_END_DATE := NULL;

			-- Set up new TDIE_INVOICE_LINE_VALIDATION record
			SELECT TDIE_VALIDATION_ID.NEXTVAL INTO v_INV_LINE_VALIDATION_ID FROM DUAL;

			-- If the current record is a SUPPLY_UNIT, then validate it to determine the Service Point
			v_SERVICE_POINT_ID := CONSTANTS.NOT_ASSIGNED;
			IF v_CUR_INVOICE_DATA.SUPPLY_UNIT IS NOT NULL AND v_CUR_INVOICE_DATA.SUPPLY_UNIT <> CONSTANTS.NOT_ASSIGNED_STRING THEN
				BEGIN
					v_SERVICE_POINT_ID := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(v_CUR_INVOICE_DATA.SUPPLY_UNIT,EC.ED_SERVICE_POINT,EC.ES_SEM);
				EXCEPTION
					WHEN MSGCODES.e_ERR_NO_SUCH_ENTRY THEN
						v_IS_VALID := 0;
						v_INVALID_LINE_COUNT := v_INVALID_LINE_COUNT + 1;
						v_INVALID_LINE_ERRS_CLOB := v_INVALID_LINE_ERRS_CLOB || 'Supply Unit: ' || v_CUR_INVOICE_DATA.SUPPLY_UNIT || UTL_TCP.CRLF;
						v_INVALID_LINE_ERRS_CLOB := v_INVALID_LINE_ERRS_CLOB || 'No Service Point Found.' || UTL_TCP.CRLF;
				END;
			END IF;

			INSERT INTO TDIE_INVOICE_LINE_VALIDATION
			   (INVOICE_LINE_VALIDATION_ID,
				RETAIL_INVOICE_ID,
				MPRN,
				SERIAL_NUMBER,
				SUPPLY_UNIT,
				IS_VALID,
				SERVICE_POINT_ID,
				ACCOUNT_ID,
				METER_ID)
			VALUES
			   (v_INV_LINE_VALIDATION_ID,
				v_RETAIL_INVOICE.RETAIL_INVOICE_ID,
				NVL(v_CUR_INVOICE_DATA.MPRN, CONSTANTS.NOT_ASSIGNED_STRING),
				NVL(v_CUR_INVOICE_DATA.SERIAL_NUMBER, CONSTANTS.NOT_ASSIGNED_STRING),
				NVL(v_CUR_INVOICE_DATA.SUPPLY_UNIT, CONSTANTS.NOT_ASSIGNED_STRING),
				v_IS_VALID,
				NVL(v_SERVICE_POINT_ID, CONSTANTS.NOT_ASSIGNED),
				CONSTANTS.NOT_ASSIGNED,
				CONSTANTS.NOT_ASSIGNED);
		END IF;

		v_MIN_BEGIN_DATE := LEAST(NVL(v_MIN_BEGIN_DATE,CONSTANTS.HIGH_DATE),v_CUR_INVOICE_DATA.BEGIN_DATE);
		v_MAX_END_DATE := GREATEST(NVL(v_MIN_BEGIN_DATE,CONSTANTS.LOW_DATE),v_CUR_INVOICE_DATA.END_DATE);

		v_COMPONENT_IS_VALID := 1;

		-- Validate Product
		v_STATIC_DATA_MAP('PRODUCT')(v_CUR_INVOICE_DATA.TARIFF_CODE) := v_CUR_INVOICE_DATA.TARIFF_CODE;
		BEGIN
			v_PRODUCT_ID := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(v_CUR_INVOICE_DATA.TARIFF_CODE,EC.ED_PRODUCT,EC.ES_TDIE,v_IDENTIFIER_TYPE);
		EXCEPTION
			WHEN MSGCODES.e_ERR_NO_SUCH_ENTRY THEN
				v_COMPONENT_IS_VALID := 0;
				v_PRODUCT_ERRS(v_CUR_INVOICE_DATA.TARIFF_CODE) := v_CUR_INVOICE_DATA.TARIFF_CODE;
		END;

		-- Validate Component
		IF v_CUR_INVOICE_DATA.CHARGE_STATE = RETAIL_SETTLEMENT.c_CHARGE_STATE_TAX OR
		   v_CUR_INVOICE_DATA.CHARGE_STATE = RETAIL_SETTLEMENT.c_CHARGE_STATE_CANCELLED_TAX THEN
			IF MM_TDIE_UTIL.SENDER_CID_IS_TUOS(p_SENDER_CID) THEN
				v_COMPONENT_NAME := MM_TDIE_UTIL.c_ROI_TUOS_VAT_CHRG;
			ELSE
				v_COMPONENT_NAME := MM_TDIE_UTIL.c_ROI_DUOS_VAT_CHRG;
			END IF;
		ELSE
         -- If the UOS Tariff code is BC then it was NULL on import and assumed to be BC
         -- therefore the components already have the tariff code prefix and do not need
         -- it added here like the other components.
         IF v_CUR_INVOICE_DATA.TARIFF_CODE = g_TARIFF_CODE_BC THEN
           v_COMPONENT_NAME := v_CUR_INVOICE_DATA.CHARGE_TYPE;
			ELSE
           v_COMPONENT_NAME := v_CUR_INVOICE_DATA.TARIFF_CODE || '-' || v_CUR_INVOICE_DATA.CHARGE_TYPE;
         END IF;
		END IF;

		v_STATIC_DATA_MAP('COMPONENT')(v_COMPONENT_NAME) := v_COMPONENT_NAME;

		BEGIN
			v_COMPONENT_ID := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(v_COMPONENT_NAME,EC.ED_COMPONENT,EC.ES_TDIE,MM_TDIE_UTIL.GET_TYPE_FOR_SENDER_CID(p_SENDER_CID));
		EXCEPTION
			WHEN MSGCODES.e_ERR_NO_SUCH_ENTRY THEN
				v_COMPONENT_IS_VALID := 0;
				v_COMPONENT_ERRS(v_COMPONENT_NAME) := v_COMPONENT_NAME;
		END;

		-- Validate Period
		IF v_CUR_INVOICE_DATA.TIMESLOT_CODE IS NOT NULL THEN
			v_STATIC_DATA_MAP('PERIOD')(v_CUR_INVOICE_DATA.TIMESLOT_CODE) := v_CUR_INVOICE_DATA.TIMESLOT_CODE;
			BEGIN
				v_PERIOD_ID := EI.GET_ID_FROM_ALIAS(v_CUR_INVOICE_DATA.TIMESLOT_CODE,EC.ED_PERIOD);
			EXCEPTION
				WHEN MSGCODES.e_ERR_NO_SUCH_ENTRY THEN
					v_COMPONENT_IS_VALID := 0;
					v_PERIOD_ERRS(v_CUR_INVOICE_DATA.TIMESLOT_CODE) := v_CUR_INVOICE_DATA.TIMESLOT_CODE;
			END;
		ELSE
			v_PERIOD_ID := NULL;
		END IF;

		LOGS.LOG_DEBUG('Inserting RESULTS for: ' || g_CRLF ||
                'MPRN=' || NVL(v_CUR_INVOICE_DATA.MPRN, CONSTANTS.NOT_ASSIGNED_STRING) || g_CRLF ||
                ',SERIAL_NUMBER=' || NVL(v_CUR_INVOICE_DATA.SERIAL_NUMBER, CONSTANTS.NOT_ASSIGNED_STRING) || g_CRLF ||
                ',SUPPLY_UNIT=' || NVL(v_CUR_INVOICE_DATA.SUPPLY_UNIT, CONSTANTS.NOT_ASSIGNED_STRING) || g_CRLF ||
                ',TARIFF_CODE=' || v_CUR_INVOICE_DATA.TARIFF_CODE || g_CRLF ||
                ',CHARGE_TYPE=' ||  v_CUR_INVOICE_DATA.CHARGE_TYPE || g_CRLF ||
                ',TIMESLOT_CODE=' ||  v_CUR_INVOICE_DATA.TIMESLOT_CODE || g_CRLF ||
                ',CHARGE_STATE=' ||  v_CUR_INVOICE_DATA.CHARGE_STATE || g_CRLF ||
                ',BEGIN_DATE=' ||  v_CUR_INVOICE_DATA.BEGIN_DATE || g_CRLF ||
                ',END_DATE=' || v_CUR_INVOICE_DATA.END_DATE || g_CRLF ||
                ',IS_VALID=' || v_COMPONENT_IS_VALID || g_CRLF ||
                ',PRODUCT_ID=' || v_PRODUCT_ID || g_CRLF ||
                ',COMPONENT_ID=' || v_COMPONENT_ID || g_CRLF ||
                ',PERIOD_ID=' || v_PERIOD_ID || g_CRLF ||
                ',INTERNAL_QUANTITY=' || v_CUR_INVOICE_DATA.INTERNAL_QUANTITY || g_CRLF ||
                ',INTERNAL_RATE=' || v_CUR_INVOICE_DATA.INTERNAL_RATE || g_CRLF ||
                ',INTERNAL_AMOUNT=' || v_CUR_INVOICE_DATA.INTERNAL_AMOUNT || g_CRLF ||
                ',EXTERNAL_QUANTITY=' || v_CUR_INVOICE_DATA.EXTERNAL_QUANTITY || g_CRLF ||
                ',EXTERNAL_RATE=' || v_CUR_INVOICE_DATA.EXTERNAL_RATE || g_CRLF ||
                ',EXTERNAL_AMOUNT=' || v_CUR_INVOICE_DATA.EXTERNAL_AMOUNT);

        INSERT INTO TDIE_INVOICE_COMP_VALIDATION
           (INVOICE_COMP_VALIDATION_ID,
           RETAIL_INVOICE_ID,
           MPRN,
           SERIAL_NUMBER,
           SUPPLY_UNIT,
           TARIFF_CODE,
           CHARGE_TYPE,
           TIMESLOT_CODE,
           CHARGE_STATE,
           BEGIN_DATE,
           END_DATE,
           IS_VALID,
           PRODUCT_ID,
           COMPONENT_ID,
           PERIOD_ID,
           INTERNAL_QUANTITY,
           INTERNAL_RATE,
           INTERNAL_AMOUNT,
           EXTERNAL_QUANTITY,
           EXTERNAL_RATE,
           EXTERNAL_AMOUNT)
        VALUES
           (TDIE_VALIDATION_ID.NEXTVAL,
            v_RETAIL_INVOICE.RETAIL_INVOICE_ID,
            NVL(v_CUR_INVOICE_DATA.MPRN, CONSTANTS.NOT_ASSIGNED_STRING),
            NVL(v_CUR_INVOICE_DATA.SERIAL_NUMBER, CONSTANTS.NOT_ASSIGNED_STRING),
            NVL(v_CUR_INVOICE_DATA.SUPPLY_UNIT, CONSTANTS.NOT_ASSIGNED_STRING),
            v_CUR_INVOICE_DATA.TARIFF_CODE ,
            v_CUR_INVOICE_DATA.CHARGE_TYPE,
            v_CUR_INVOICE_DATA.TIMESLOT_CODE,
            v_CUR_INVOICE_DATA.CHARGE_STATE,
            v_CUR_INVOICE_DATA.BEGIN_DATE,
            v_CUR_INVOICE_DATA.END_DATE,
            v_COMPONENT_IS_VALID,
            v_PRODUCT_ID,
            v_COMPONENT_ID,
            v_PERIOD_ID,
            v_CUR_INVOICE_DATA.INTERNAL_QUANTITY,
            v_CUR_INVOICE_DATA.INTERNAL_RATE,
            v_CUR_INVOICE_DATA.INTERNAL_AMOUNT,
            v_CUR_INVOICE_DATA.EXTERNAL_QUANTITY,
            v_CUR_INVOICE_DATA.EXTERNAL_RATE,
            v_CUR_INVOICE_DATA.EXTERNAL_AMOUNT);

		v_LAST_INVOICE_DATA := v_CUR_INVOICE_DATA;
		v_LAST_INVOICE_ENTITY_STRING := v_CUR_INVOICE_ENTITY_STRING;
	END LOOP;

	-- Validate the last MRPN Account
	IF v_LAST_INVOICE_DATA.MPRN IS NOT NULL AND v_LAST_INVOICE_DATA.MPRN <> CONSTANTS.NOT_ASSIGNED_STRING THEN
		VALIDATE_INVOICE_ACCOUNT(v_RETAIL_INVOICE,
			v_INV_LINE_VALIDATION_ID,
			v_LAST_INVOICE_DATA,
			v_MIN_BEGIN_DATE,
			v_MAX_END_DATE,
			v_IS_VALID,
			v_ERRS);

		v_LINE_COUNT := v_LINE_COUNT + 1;

		IF v_IS_VALID = 0 THEN
			v_INVALID_LINE_COUNT := v_INVALID_LINE_COUNT + 1;
			v_INVALID_LINE_ERRS_CLOB := v_INVALID_LINE_ERRS_CLOB || v_ERRS;
		END IF;

	END IF;

	LOGS.POP_PROGRESS_RANGE(v_PROGRESS_IDX);

	-- Log any MPRN/Serial Number/SU validation errors
	IF v_INVALID_LINE_COUNT > 0 THEN
		LOGS.LOG_ERROR('The Invoice Validation encountered ' || v_INVALID_LINE_COUNT
		 || '/' || v_LINE_COUNT
		 || ' MPRN/Serial Number/SU errors (see attachement for details).');
		LOGS.POST_EVENT_DETAILS('MPRN/Serial Number/SU errors',CONSTANTS.MIME_TYPE_TEXT,v_INVALID_LINE_ERRS_CLOB);
	ELSE
		LOGS.LOG_INFO('All ' || v_LINE_COUNT || ' MPRNs/Serial Numbers/Supply Units are valid');
	END IF;

	-- Log any PRODUCT validation errors.
	IF v_PRODUCT_ERRS.COUNT > 0 THEN
		v_ERR_MSG := 'The Invoice Validation encountered ' || v_PRODUCT_ERRS.COUNT
			|| '/' || v_STATIC_DATA_MAP('PRODUCT').COUNT
			|| ' Product validation errors: ' || UTL_TCP.CRLF;
		v_ERR_IDX := v_PRODUCT_ERRS.FIRST;
		WHILE v_PRODUCT_ERRS.EXISTS(v_ERR_IDX) LOOP
			v_ERR_MSG := v_ERR_MSG || v_PRODUCT_ERRS(v_ERR_IDX) || UTL_TCP.CRLF;
			v_ERR_IDX := v_PRODUCT_ERRS.NEXT(v_ERR_IDX);
		END LOOP;
		LOGS.LOG_ERROR(v_ERR_MSG);
	ELSE
		IF v_STATIC_DATA_MAP.EXISTS('PRODUCT') THEN
			LOGS.LOG_INFO('All ' || v_STATIC_DATA_MAP('PRODUCT').COUNT || ' Products are valid');
		ELSE
			LOGS.LOG_INFO('No Product static data required.');
		END IF;
	END IF;

	-- Log any COMPONENT validation errors.
	IF v_COMPONENT_ERRS.COUNT > 0 THEN
		v_ERR_MSG := 'The Invoice Validation encountered ' || v_COMPONENT_ERRS.COUNT
			|| '/' || v_STATIC_DATA_MAP('COMPONENT').COUNT
			|| ' Component validation errors: ' || UTL_TCP.CRLF;
		v_ERR_IDX := v_COMPONENT_ERRS.FIRST;
		WHILE v_COMPONENT_ERRS.EXISTS(v_ERR_IDX) LOOP
			v_ERR_MSG := v_ERR_MSG || v_COMPONENT_ERRS(v_ERR_IDX) || UTL_TCP.CRLF;
			v_ERR_IDX := v_COMPONENT_ERRS.NEXT(v_ERR_IDX);
		END LOOP;
		LOGS.LOG_ERROR(v_ERR_MSG);
	ELSE
		IF v_STATIC_DATA_MAP.EXISTS('COMPONENT') THEN
			LOGS.LOG_INFO('All ' || v_STATIC_DATA_MAP('COMPONENT').COUNT || ' Components are valid');
		ELSE
			LOGS.LOG_INFO('No Component static data required.');
		END IF;
	END IF;

	-- Log any PERIOD validation errors.
	IF v_PERIOD_ERRS.COUNT > 0 THEN
		v_ERR_MSG := 'The Invoice Validation encountered ' || v_PERIOD_ERRS.COUNT
			|| '/' || v_STATIC_DATA_MAP('PERIOD').COUNT
			|| ' Period validation errors: ' || UTL_TCP.CRLF;
		v_ERR_IDX := v_PERIOD_ERRS.FIRST;
		WHILE v_PERIOD_ERRS.EXISTS(v_ERR_IDX) LOOP
			v_ERR_MSG := v_ERR_MSG || v_PERIOD_ERRS(v_ERR_IDX) || UTL_TCP.CRLF;
			v_ERR_IDX := v_PERIOD_ERRS.NEXT(v_ERR_IDX);
		END LOOP;
		LOGS.LOG_ERROR(v_ERR_MSG);
	ELSE
		IF v_STATIC_DATA_MAP.EXISTS('PERIOD') THEN
			LOGS.LOG_INFO('All ' || v_STATIC_DATA_MAP('PERIOD').COUNT || ' Periods are valid');
		ELSE
			LOGS.LOG_INFO('No Period static data required.');
		END IF;
	END IF;

	CLOSE v_TDIE_INVOICE_DATA_CURSOR;

	LOGS.LOG_INFO('End validating invoice...');

	RETURN v_RETAIL_INVOICE.RETAIL_INVOICE_ID;

EXCEPTION
	WHEN OTHERS THEN
		-- Handle cursor exceptions
		BEGIN
			IF v_TDIE_INVOICE_DATA_CURSOR%ISOPEN THEN CLOSE v_TDIE_INVOICE_DATA_CURSOR; END IF;
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE('Exception attempting to close v_TDIE_INVOICE_DATA_CURSOR');
		END;
		ERRS.LOG_AND_RAISE;
END VALIDATE_INVOICE;
----------------------------------------------------------------------------------------------------
PROCEDURE RUN_ACCOUNT_VALIDATION
	(
	p_INVOICE_NUMBER IN VARCHAR2,
	p_SENDER_CID     IN VARCHAR2,
	p_PROCESS_ID 	 OUT VARCHAR2,
	p_PROCESS_STATUS OUT NUMBER,
	p_MESSAGE 		 OUT VARCHAR2,
	p_TRACE_ON       IN NUMBER := 0
	) AS
v_RETAIL_INVOICE_ID RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE;
BEGIN
    LOGS.START_PROCESS('Single IE T&D Invoice Validation',p_TRACE_ON => p_TRACE_ON);
	p_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
    LOGS.SET_PROCESS_TARGET_PARAMETER('Invoice Number',	p_INVOICE_NUMBER);
    LOGS.SET_PROCESS_TARGET_PARAMETER('Sender CID',	p_SENDER_CID);
    v_RETAIL_INVOICE_ID := VALIDATE_INVOICE(p_INVOICE_NUMBER, p_SENDER_CID);
    LOGS.LOG_DEBUG('Validated Invoice for RETAIL_INVOICE_ID = ' || v_RETAIL_INVOICE_ID);
	LOGS.STOP_PROCESS(p_MESSAGE, p_PROCESS_STATUS);
    COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		ERRS.ABORT_PROCESS();
END RUN_ACCOUNT_VALIDATION;
----------------------------------------------------------------------------------------------------
PROCEDURE RUN_ACCOUNT_VALIDATIONS
	(
	p_INVOICE_NUMBERS IN STRING_COLLECTION,
	p_SENDER_CIDS     IN STRING_COLLECTION,
	p_PROCESS_ID 	  OUT VARCHAR2,
	p_PROCESS_STATUS  OUT NUMBER,
	p_MESSAGE 		  OUT VARCHAR2,
	p_TRACE_ON        IN NUMBER := 0
	) AS
v_PROCESS_ID 		NUMBER;
v_PROCESS_STATUS 	NUMBER(9);
v_MESSAGE 			VARCHAR2(4000);
BEGIN
	LOGS.START_PROCESS('IE T&D Invoice Validations',p_TRACE_ON => p_TRACE_ON);
	p_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
	LOGS.SET_PROCESS_TARGET_PARAMETER('Invoice Numbers', TEXT_UTIL.TO_CHAR_STRING_LIST(p_INVOICE_NUMBERS));
	LOGS.SET_PROCESS_TARGET_PARAMETER('Sender CIDs', TEXT_UTIL.TO_CHAR_STRING_LIST(p_SENDER_CIDS));

	-- Check security
	SD.VERIFY_ACTION_IS_ALLOWED(MM_TDIE_UTIL.c_ACTION_RUN_ANY_VALIDATION);

	-- Check params
	ASSERT(p_INVOICE_NUMBERS IS NOT NULL, 'The list of Invoice Numbers must not be null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_SENDER_CIDS IS NOT NULL, 'The list of Sender IDs must not be null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_INVOICE_NUMBERS.COUNT = p_SENDER_CIDS.COUNT,
		'The list of Invoice Numbers and Sender Ids must be the same size.', MSGCODES.c_ERR_ARGUMENT);

	FOR v_IDX IN p_INVOICE_NUMBERS.FIRST..p_INVOICE_NUMBERS.LAST LOOP
		BEGIN
			LOGS.LOG_INFO('Processing Invoice: ' || p_INVOICE_NUMBERS(v_IDX));
			RUN_ACCOUNT_VALIDATION(p_INVOICE_NUMBERS(v_IDX), p_SENDER_CIDS(v_IDX), v_PROCESS_ID, v_PROCESS_STATUS, v_MESSAGE, p_TRACE_ON);
			LOGS.LOG_INFO('Invoice processed with status = ' || LOG_REPORTS.GET_STATUS_LEVEL_STRING(v_PROCESS_STATUS)  || '.');
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE('Error occurred while processing Invoice: ' || p_INVOICE_NUMBERS(v_IDX) || '.', LOGS.c_LEVEL_FATAL);
		END;
	END LOOP;

	LOGS.STOP_PROCESS(p_MESSAGE, p_PROCESS_STATUS);
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		ERRS.ABORT_PROCESS();
END RUN_ACCOUNT_VALIDATIONS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_RETAIL_SETTLEMENT_INPUTS
	(
	p_RETAIL_INVOICE_ID IN RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE,
	p_RETAIL_SETTLEMENT_INPUT OUT RETAIL_SETTLEMENT.RETAIL_SETTLEMENT_INPUT_CURSOR,
	p_COUNT OUT NUMBER
	) AS
BEGIN
	SELECT COUNT(1)
		INTO p_COUNT
	FROM TDIE_INVOICE_COMP_VALIDATION C
	WHERE C.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID;

	IF p_COUNT > 0 THEN
		OPEN p_RETAIL_SETTLEMENT_INPUT FOR
			SELECT L.ACCOUNT_ID,
				   L.METER_ID,
				   L.SERVICE_POINT_ID,
				   'Period',
				   C.BEGIN_DATE,
				   C.END_DATE,
				   C.PRODUCT_ID,
				   C.COMPONENT_ID,
				   C.PERIOD_ID,
				   C.CHARGE_STATE,
				   C.INTERNAL_QUANTITY,
				   C.INTERNAL_RATE,
				   C.INTERNAL_AMOUNT,
				   C.EXTERNAL_QUANTITY,
				   C.EXTERNAL_RATE,
				   C.EXTERNAL_AMOUNT,
       			   NULL AS CREDIT_REFERENCE_ID,
                   NULL
			FROM TDIE_INVOICE_LINE_VALIDATION L,
				 TDIE_INVOICE_COMP_VALIDATION C
			WHERE L.RETAIL_INVOICE_ID = C.RETAIL_INVOICE_ID
			  AND L.MPRN = C.MPRN
			  AND L.SUPPLY_UNIT = C.SUPPLY_UNIT
			  AND L.SERIAL_NUMBER = C.SERIAL_NUMBER
			  AND L.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
			  -- Must at least have an Account_Id or Service_Point Id
				-- and if Account and Serial Number exist then we must have Meter Id
			  AND ((L.ACCOUNT_ID <> CONSTANTS.NOT_ASSIGNED AND (L.SERIAL_NUMBER = CONSTANTS.NOT_ASSIGNED_STRING OR L.METER_ID <> CONSTANTS.NOT_ASSIGNED)) OR
                    (L.SERVICE_POINT_ID <> CONSTANTS.NOT_ASSIGNED))
			  AND C.IS_VALID = 1
			ORDER BY L.ACCOUNT_ID ASC, L.METER_ID ASC, L.SERVICE_POINT_ID ASC, C.BEGIN_DATE ASC, C.CHARGE_STATE ASC;
	END IF;

END GET_RETAIL_SETTLEMENT_INPUTS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_METER_POINT_IDS
	(
	p_RETAIL_INVOICE_ID IN RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE,
  p_METER_IDS OUT GA.REFCURSOR
	) AS
  v_COUNT NUMBER;
BEGIN
	SELECT COUNT(1)
		INTO v_COUNT
	FROM TDIE_INVOICE_COMP_VALIDATION C
	WHERE C.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID;
  
	IF v_COUNT > 0 THEN
      OPEN p_METER_IDS FOR
			SELECT DISTINCT TMP.METER_POINT_ID,
             C.BEGIN_DATE,
             C.END_DATE
			FROM TDIE_INVOICE_LINE_VALIDATION L,
				 TDIE_INVOICE_COMP_VALIDATION C, 
         ACCOUNT A, 
         ACCOUNT_SERVICE_LOCATION ASL, 
         SERVICE_LOCATION_METER SLM, 
         TX_SUB_STATION_METER_POINT TMP
			WHERE L.RETAIL_INVOICE_ID = C.RETAIL_INVOICE_ID
			  AND L.MPRN = C.MPRN
			  AND L.SUPPLY_UNIT = C.SUPPLY_UNIT
			  AND L.SERIAL_NUMBER = C.SERIAL_NUMBER
			  AND L.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
			  -- Must at least have an Account_Id or Service_Point Id
				-- and if Account and Serial Number exist then we must have Meter Id
			  AND ((L.ACCOUNT_ID <> CONSTANTS.NOT_ASSIGNED AND (L.SERIAL_NUMBER = CONSTANTS.NOT_ASSIGNED_STRING OR L.METER_ID <> CONSTANTS.NOT_ASSIGNED)) OR
                    (L.SERVICE_POINT_ID <> CONSTANTS.NOT_ASSIGNED))
			  AND C.IS_VALID = 1
        AND A.ACCOUNT_ID=L.ACCOUNT_ID
             AND A.ACCOUNT_ID = ASL.ACCOUNT_ID 
             AND ASL.SERVICE_LOCATION_ID = SLM.SERVICE_LOCATION_ID
			 AND ASL.BEGIN_DATE <= C.END_DATE
			 AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE)>= C.BEGIN_DATE
			 AND SLM.BEGIN_DATE <= C.END_DATE
			 AND NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE)>= C.BEGIN_DATE
             AND SLM.METER_ID = TMP.RETAIL_METER_ID
             AND TMP.METER_POINT_NAME = 50;
	END IF;
  
  EXCEPTION
   WHEN OTHERS THEN
		      ERRS.LOG_AND_CONTINUE(p_EXTRA_MESSAGE => 'Unable to locate meter points for invoice ' || p_RETAIL_INVOICE_ID,
                               p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);

END GET_METER_POINT_IDS;
------------------------------------------------------------------------------------------------------
PROCEDURE APPLY_DX_LOSSES_TO_MTR_POINT(
          p_BEGIN_DATE DATE,
          p_END_DATE DATE,
          p_METER_POINT_ID NUMBER
) AS

    v_BEGIN_DATE DATE;
    v_END_DATE DATE;
   	v_INTERVAL_NUM NUMBER(9) := GET_INTERVAL_NUMBER(CONSTANTS.INTERVAL_15_MINUTE);
    
    CURSOR c_PATTERNS IS
        -- Find the loss factor pattern for a given meter point id and date range
        SELECT M.PATTERN_ID
        FROM TX_SUB_STATION_METER_POINT MP, METER_LOSS_FACTOR LF, LOSS_FACTOR_MODEL M
        WHERE MP.METER_POINT_ID = p_METER_POINT_ID
            AND MP.BEGIN_DATE <= p_END_DATE
            AND NVL(MP.END_DATE, p_END_DATE) >= p_BEGIN_DATE 
            AND LF.METER_ID = MP.RETAIL_METER_ID
            AND LF.CASE_ID = GA.BASE_CASE_ID
            AND LF.BEGIN_DATE <= p_END_DATE
            AND NVL(LF.END_DATE, p_END_DATE) >= p_BEGIN_DATE
            AND M.LOSS_FACTOR_ID = LF.LOSS_FACTOR_ID
            AND M.BEGIN_DATE <= p_END_DATE
            AND NVL(M.END_DATE, p_END_DATE) >= p_BEGIN_DATE
            AND M.LOSS_TYPE = 'Distribution'
            AND M.MODEL_TYPE = CONSTANTS.LOSS_FACTOR_MODEL_PATTERN
            AND M.FACTOR_TYPE = CONSTANTS.LOSS_FACTOR_EXPANSION
			AND M.INTERVAL = CONSTANTS.INTERVAL_15_MINUTE; 
            
     CURSOR c_LOSSES(v_PATTERN_ID IN LOSS_FACTOR_PATTERN.PATTERN_ID%TYPE)  IS
        -- Get the losses for a given pattern and date range
      SELECT  p_METER_POINT_ID, CUT_DATE, EXPANSION_VAL
      FROM (SELECT CUT_DATE, Y.EXPANSION_VAL
          FROM
               (SELECT ROW_NUMBER() OVER(PARTITION BY local_day_trunc_date ORDER BY cut_date) as ROW_NUM,
                       CUT_DATE,
                       LOCAL_DATE,
                       IS_DST_FALL_BACK_DAY,
                       IS_DST_SPRING_AHEAD_DAY
                FROM SYSTEM_DATE_TIME SDT
                WHERE TIME_ZONE = GA.LOCAL_TIME_ZONE
                    AND DATA_INTERVAL_TYPE = 1
                    AND DAY_TYPE = '1'
                    AND CUT_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE
                    AND MINIMUM_INTERVAL_NUMBER >= v_INTERVAL_NUM) SDT,
               (-- Get the loss pattern for regular day, spring ahead and fall back day
                -- 96, 92 and 100 values respectively
                WITH LOSS_PATTERNS as
                    (select PATTERN_ID,
                           PATTERN_DATE,
                           EXPANSION_VAL,
                           ROW_NUMBER() OVER(ORDER BY PATTERN_DATE) as ORDER_NUM
                    from LOSS_FACTOR_PATTERN
                    where PATTERN_ID = v_PATTERN_ID)
                        -- Regular day
                        SELECT ROW_NUMBER() OVER(ORDER BY PATTERN_DATE) AS ROW_NUM,
                               PATTERN_ID,
                               PATTERN_DATE,
                               EXPANSION_VAL,
                               0 AS IS_DST_FALL_BACK_DAY,
                               0 AS IS_DST_SPRING_AHEAD_DAY
                        FROM LOSS_PATTERNS L
                        -- Fall back day
                        UNION ALL
                        SELECT ROW_NUMBER() OVER(ORDER BY PATTERN_ID) AS ROW_NUM, X.* FROM
                        (SELECT L.PATTERN_ID,
                               L.PATTERN_DATE,
                               L.EXPANSION_VAL,
                               1 AS IS_DST_FALL_BACK_DAY,
                               0 AS IS_DST_SPRING_AHEAD_DAY
                        FROM LOSS_PATTERNS L
                        WHERE ORDER_NUM BETWEEN 1 AND 8
                        UNION ALL
                        SELECT L.PATTERN_ID,
                               L.PATTERN_DATE + 1/86400,
                               L.EXPANSION_VAL,
                               1 AS IS_DST_FALL_BACK_DAY,
                               0 AS IS_DST_SPRING_AHEAD_DAY
                        FROM LOSS_PATTERNS L
                        WHERE ORDER_NUM BETWEEN 5 AND 8
                        UNION ALL
                        SELECT L.PATTERN_ID,
                               L.PATTERN_DATE,
                               L.EXPANSION_VAL,
                               1 AS IS_DST_FALL_BACK_DAY,
                               0 AS IS_DST_SPRING_AHEAD_DAY
                        FROM LOSS_PATTERNS L
                        WHERE ORDER_NUM BETWEEN 9 AND 96) X
                        -- Spring ahead
                        UNION ALL
                        SELECT ROW_NUMBER() OVER(ORDER BY PATTERN_DATE) AS ROW_NUM,
                               L.PATTERN_ID,
                               L.PATTERN_DATE,
                               L.EXPANSION_VAL,
                               0 AS IS_DST_FALL_BACK_DAY,
                               1 AS IS_DST_SPRING_AHEAD_DAY
                        FROM LOSS_PATTERNS L
                        WHERE NOT ORDER_NUM BETWEEN 4 AND 7) Y
               WHERE Y.ROW_NUM = SDT.ROW_NUM
                     AND Y.IS_DST_FALL_BACK_DAY = SDT.IS_DST_FALL_BACK_DAY
                     AND Y.IS_DST_SPRING_AHEAD_DAY = SDT.IS_DST_SPRING_AHEAD_DAY) PATTERNS,
                TX_SUB_STATION_METER_PT_VALUE VAL
           WHERE VAL.METER_POINT_ID = p_METER_POINT_ID
                 AND VAL.METER_DATE = PATTERNS.CUT_DATE;
BEGIN
      SP.CHECK_SYSTEM_DATE_TIME(GA.LOCAL_TIME_ZONE, p_BEGIN_DATE, p_END_DATE);

	     UT.CUT_DATE_RANGE(CONSTANTS.ELECTRIC_MODEL, p_BEGIN_DATE, p_END_DATE,
		                                                GA.LOCAL_TIME_ZONE, v_BEGIN_DATE, v_END_DATE);

    	FOR v_PATTERN IN c_PATTERNS LOOP
         LOGS.LOG_DEBUG('Processing Loss Factor Pattern id - ' || v_PATTERN.PATTERN_ID ||
                        ' and Meter Point - ' || EI.GET_ENTITY_NAME(EC.ED_SUB_STATION_METER_POINT, p_METER_POINT_ID));
         
         -- Update DX Expansion losses
         FOR v_MTR_PT_LOSS IN c_LOSSES(v_PATTERN.PATTERN_ID) LOOP
             LOGS.LOG_DEBUG('Updating TX_SUB_STATION_MTR_POINT_VAL table for: ' || g_CRLF ||
                             ',METER POINT =' || EI.GET_ENTITY_NAME(EC.ED_SUB_STATION_METER_POINT, p_METER_POINT_ID) || g_CRLF ||
                             ',METER DATE=' ||  v_MTR_PT_LOSS.CUT_DATE || g_CRLF ||
                             ',LOSS VAL=' || v_MTR_PT_LOSS.EXPANSION_VAL);
             
             UPDATE TX_SUB_STATION_METER_PT_VALUE V 
             SET V.LOSS_VAL = NVL(v_MTR_PT_LOSS.EXPANSION_VAL,0)* V.METER_VAL
             WHERE V.METER_POINT_ID = p_METER_POINT_ID
                   AND V.MEASUREMENT_SOURCE_ID = 0
                   AND V.METER_CODE = 'A'
                   AND V.METER_DATE = v_MTR_PT_LOSS.CUT_DATE;             
         END LOOP; 
     END LOOP;
EXCEPTION
   WHEN OTHERS THEN
		      ERRS.LOG_AND_CONTINUE(p_EXTRA_MESSAGE => 'Unable to process DX Losses for Meter Point - ' || EI.GET_ENTITY_NAME(EC.ED_SUB_STATION_METER_POINT, p_METER_POINT_ID),
                               p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
        
END APPLY_DX_LOSSES_TO_MTR_POINT;
----------------------------------------------------------------------------------------------------
PROCEDURE RUN_FINANCIAL_SETTLEMENT
	(
	p_INVOICE_NUMBER 	IN VARCHAR2,
	p_SENDER_CID     	IN VARCHAR2,
	p_STATEMENT_TYPE_ID IN NUMBER,
	p_PROCESS_ID 	 	OUT VARCHAR2,
	p_PROCESS_STATUS 	OUT NUMBER,
	p_MESSAGE 		 	OUT VARCHAR2,
	p_TRACE_ON       	IN NUMBER := 0
	) AS
v_RETAIL_INVOICE_ID 		    RETAIL_INVOICE.RETAIL_INVOICE_ID%TYPE;
v_PROGRESS_IDX				      NUMBER(9);
cur_RETAIL_SETTLEMENT_INPUT RETAIL_SETTLEMENT.RETAIL_SETTLEMENT_INPUT_CURSOR;
cur_METER_POINT_IDS         METER_POINT_IDS_CURSOR;
v_INPUT_COUNT 				      NUMBER(9);
v_METER_POINT_IDS           METER_POINT_IDS;
BEGIN
	LOGS.START_PROCESS('Single IE T&D Financial Settlement',p_TRACE_ON => p_TRACE_ON);
	p_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
    LOGS.SET_PROCESS_TARGET_PARAMETER('Invoice Number',	p_INVOICE_NUMBER);
	LOGS.SET_PROCESS_TARGET_PARAMETER('Sender CID',	p_SENDER_CID);
	LOGS.SET_PROCESS_TARGET_PARAMETER('Statement Type ID',	p_STATEMENT_TYPE_ID);
	v_PROGRESS_IDX := LOGS.PUSH_PROGRESS_RANGE(2);

	-- Check security
	SD.VERIFY_ACTION_IS_ALLOWED(MM_TDIE_UTIL.c_ACTION_RUN_ANY_SETTLEMENT);

	v_RETAIL_INVOICE_ID := VALIDATE_INVOICE(p_INVOICE_NUMBER, p_SENDER_CID);
	LOGS.INCREMENT_PROCESS_PROGRESS();

	GET_RETAIL_SETTLEMENT_INPUTS(v_RETAIL_INVOICE_ID, cur_RETAIL_SETTLEMENT_INPUT, v_INPUT_COUNT);

	IF v_INPUT_COUNT > 0 THEN
		IF (MM_TDIE_UTIL.GET_SENDER_PSE_ID(p_SENDER_CID) = MM_TDIE_UTIL.c_TDIE_TUOS_ROI_SENDER_PSE_ID) THEN
			--Loop though inputs and apply losses
      	BEGIN
      		GET_METER_POINT_IDS(v_RETAIL_INVOICE_ID, cur_METER_POINT_IDS);
      		LOOP
				FETCH cur_METER_POINT_IDS
				INTO v_METER_POINT_IDS;
				EXIT WHEN cur_METER_POINT_IDS%NOTFOUND; 
             	APPLY_DX_LOSSES_TO_MTR_POINT(v_METER_POINT_IDS.BEGIN_DATE, v_METER_POINT_IDS.END_DATE, v_METER_POINT_IDS.METER_POINT_ID);
            END LOOP;
      		--Done with this cursor so need to close it
			CLOSE cur_METER_POINT_IDS;
			COMMIT;
      	EXCEPTION
        	WHEN OTHERS THEN
		      ERRS.LOG_AND_CONTINUE(p_EXTRA_MESSAGE => 'Unable to apply losses for invoice ' || v_RETAIL_INVOICE_ID,
                               p_LOG_LEVEL => LOGS.c_LEVEL_DEBUG);
      	END;				
	END IF;


		RETAIL_SETTLEMENT.RUN_RETAIL_SETTLEMENT(v_RETAIL_INVOICE_ID,
			cur_RETAIL_SETTLEMENT_INPUT,
			p_STATEMENT_TYPE_ID,
			MM_TDIE_UTIL.g_TZ,
			CONSTANTS.CODE_ACTUAL,
			p_INPUT_COUNT => v_INPUT_COUNT);
		LOGS.INCREMENT_PROCESS_PROGRESS();
	ELSE
		LOGS.LOG_ERROR('There are no valid records for the Financial Settlement engine.');
	END IF;
	LOGS.POP_PROGRESS_RANGE(v_PROGRESS_IDX);

	LOGS.STOP_PROCESS(p_MESSAGE, p_PROCESS_STATUS);
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		ERRS.ABORT_PROCESS();
END RUN_FINANCIAL_SETTLEMENT;
----------------------------------------------------------------------------------------------------
PROCEDURE RUN_FINANCIAL_SETTLEMENTS
	(
	p_INVOICE_NUMBERS 	IN STRING_COLLECTION,
	p_SENDER_CIDS     	IN STRING_COLLECTION,
	p_STATEMENT_TYPE_ID IN NUMBER,
	p_PROCESS_ID 	  	OUT VARCHAR2,
	p_PROCESS_STATUS  	OUT NUMBER,
	p_MESSAGE 		  	OUT VARCHAR2,
	p_TRACE_ON        	IN NUMBER := 0
	) AS
v_PROCESS_ID 		NUMBER;
v_PROCESS_STATUS 	NUMBER(9);
v_MESSAGE 			VARCHAR2(4000);
BEGIN
	LOGS.START_PROCESS('IE T&D Financial Settlements',p_TRACE_ON => p_TRACE_ON);
	p_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
	LOGS.SET_PROCESS_TARGET_PARAMETER('Invoice Numbers', TEXT_UTIL.TO_CHAR_STRING_LIST(p_INVOICE_NUMBERS));
	LOGS.SET_PROCESS_TARGET_PARAMETER('Sender CIDs', TEXT_UTIL.TO_CHAR_STRING_LIST(p_SENDER_CIDS));

	-- Check security
	SD.VERIFY_ACTION_IS_ALLOWED(MM_TDIE_UTIL.c_ACTION_RUN_ANY_SETTLEMENT);

	-- Check params
	ASSERT(p_INVOICE_NUMBERS IS NOT NULL, 'The list of Invoice Numbers must not be null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_SENDER_CIDS IS NOT NULL, 'The list of Sender IDs must not be null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_INVOICE_NUMBERS.COUNT = p_SENDER_CIDS.COUNT,
		'The list of Invoice Numbers and Sender Ids must be the same size.', MSGCODES.c_ERR_ARGUMENT);

	FOR v_IDX IN p_INVOICE_NUMBERS.FIRST..p_INVOICE_NUMBERS.LAST LOOP
		BEGIN
			LOGS.LOG_INFO('Processing Invoice: ' || p_INVOICE_NUMBERS(v_IDX));
			RUN_FINANCIAL_SETTLEMENT(p_INVOICE_NUMBERS(v_IDX), p_SENDER_CIDS(v_IDX), p_STATEMENT_TYPE_ID, v_PROCESS_ID, v_PROCESS_STATUS, v_MESSAGE, p_TRACE_ON);
			LOGS.LOG_INFO('Invoice processed with status = ' || LOG_REPORTS.GET_STATUS_LEVEL_STRING(v_PROCESS_STATUS)  || '.');
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE('Error occurred while processing Invoice: ' || p_INVOICE_NUMBERS(v_IDX) || '.',
					p_LOG_LEVEL => LOGS.c_LEVEL_FATAL);
		END;
	END LOOP;

	LOGS.STOP_PROCESS(p_MESSAGE, p_PROCESS_STATUS);
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		ERRS.ABORT_PROCESS();
END RUN_FINANCIAL_SETTLEMENTS;
----------------------------------------------------------------------------------------------------
PROCEDURE UPDATE_RETAIL_INVOICE_PROCESS
    (
    p_RETAIL_INVOICE_ID IN NUMBER,
    p_STATEMENT_TYPE_ID IN NUMBER
    )  AS

    PRAGMA AUTONOMOUS_TRANSACTION;

BEGIN

    UPDATE RETAIL_INVOICE RI
    SET RI.PROCESS_ID = LOGS.CURRENT_PROCESS_ID,
        RI.STATEMENT_TYPE_ID = p_STATEMENT_TYPE_ID
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID;

    COMMIT;

END UPDATE_RETAIL_INVOICE_PROCESS;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_SSS_PSO_NI_CURSOR
    (
    p_RETAIL_INVOICE_ID     IN NUMBER,
    p_INVOICE_ABBREVIATION  IN VARCHAR2,
    p_CURSOR                IN OUT RETAIL_SETTLEMENT.RETAIL_SETTLEMENT_INPUT_CURSOR
    ) AS

    v_PRODUCT_ID NUMBER(9) := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(p_INVOICE_ABBREVIATION,
                                                    EC.ED_PRODUCT, EC.ES_TDIE);

    v_TAXED_COMPONENT_ID NUMBER(9);

BEGIN

    SELECT MAX(C.COMPONENT_ID)
    INTO v_TAXED_COMPONENT_ID
    FROM PRODUCT_COMPONENT PC,
        COMPONENT C,
        RETAIL_INVOICE RI
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
        AND PC.PRODUCT_ID = v_PRODUCT_ID
        AND PC.BEGIN_DATE <= RI.PERIOD_BEGIN_DATE
        AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= RI.PERIOD_END_DATE
        AND C.COMPONENT_ID = PC.COMPONENT_ID
        AND C.CHARGE_TYPE = 'Tax';

    OPEN p_CURSOR FOR
    SELECT AEDC.ACCOUNT_ID,
        CONSTANTS.NOT_ASSIGNED AS METER_ID,
        CONSTANTS.NOT_ASSIGNED AS SERVICE_LOCATION_ID,
        NULL AS METER_TYPE,
        LEAST(RI.PERIOD_BEGIN_DATE, NVL(PERIOD_DATES.PERIOD_BEGIN, RI.PERIOD_BEGIN_DATE)) AS BEGIN_DATE,
        GREATEST(RI.PERIOD_END_DATE, NVL(PERIOD_DATES.PERIOD_END, RI.PERIOD_END_DATE)) AS END_DATE,
        v_PRODUCT_ID AS PRODUCT_ID,
        -- USE THE CARTESIAN JOIN TABLE TO MAKE SURE EVERY ACCOUNT WHICH HAS AN ACCOUNT
        -- HAS A TAXED COMPONENT AS ITS LAST COMPONENT
        CASE WHEN CART.LVL = 1 THEN
            COMPS.COMPONENT_ID
        ELSE
            v_TAXED_COMPONENT_ID
        END AS COMPONENT_ID,
        NULL AS PERIOD_ID,
        RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL AS CHARGE_STATE,
        NULL AS INTERNAL_QUANTITY,
        NULL AS INTERNAL_RATE,
        NULL AS INTERNAL_AMOUNT,
        NULL AS EXTERNAL_QUANTITY,
        NULL AS EXTERNAL_RATE,
        NULL AS EXTERNAL_AMOUNT,
        NULL AS CREDIT_REFERENCE_ID,
        NULL AS ESP_ID
    FROM RETAIL_INVOICE RI,
        ACCOUNT_EDC AEDC,
        ACCOUNT_ESP AESP,
        PSE_ESP PESP,
        ENTITY_GROUP_ASSIGNMENT EGA,
        ENTITY_GROUP EG,
        ENTITY_GROUP PARENT_EG,
        -- PERIOD METERS SHOULDN'T START OR STOP THEIR CALCULATION IN THE MIDDLE
        -- OF A SERVICE CONSUMPTION RECORD, SO EXPAND THEIR DATE RANGE TO INCLUDE
        -- ANY THAT START BEFORE OR END AFTER AND EXTEND INTO THE INVOICE RANGE
        (SELECT ASL.ACCOUNT_ID, MIN(SC.BEGIN_DATE) AS PERIOD_BEGIN, MAX(SC.END_DATE) AS PERIOD_END
            FROM RETAIL_INVOICE RI,
                ACCOUNT_SERVICE_LOCATION ASL,
                SERVICE_LOCATION_METER SLM,
                METER M,
                SERVICE_CONSUMPTION SC,
                ACCOUNT_SERVICE ASERV,
                PROVIDER_SERVICE PS,
                SERVICE S
            WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
                AND ASL.BEGIN_DATE <= RI.PERIOD_END_DATE
                AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE) >= RI.PERIOD_BEGIN_DATE
                AND SLM.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
                AND SLM.BEGIN_DATE <= RI.PERIOD_END_DATE
                AND NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE) >= RI.PERIOD_BEGIN_DATE
                AND M.METER_ID = SLM.METER_ID
                AND M.METER_TYPE = 'Period'
                AND ASERV.ACCOUNT_ID = ASL.ACCOUNT_ID
                AND ASERV.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
                AND ASERV.METER_ID = M.METER_ID
                AND ASERV.AGGREGATE_ID = CONSTANTS.NOT_ASSIGNED
                AND PS.EDC_ID = MM_TDIE_UTIL.g_NIE_EDC_ID
                AND S.ACCOUNT_SERVICE_ID = ASERV.ACCOUNT_SERVICE_ID
                AND S.PROVIDER_SERVICE_ID = PS.PROVIDER_SERVICE_ID
                AND SC.SERVICE_ID = S.SERVICE_ID
                AND SC.BEGIN_DATE <= RI.PERIOD_END_DATE
                AND SC.END_DATE >= RI.PERIOD_BEGIN_DATE
            GROUP BY ASL.ACCOUNT_ID) PERIOD_DATES,
         (SELECT C.COMPONENT_ID,
                EI.GET_ENTITY_IDENTIFIER_EXTSYS(EC.ED_COMPONENT, C.COMPONENT_ID, EC.ES_TDIE) AS EXT_SYS_IDENT
            FROM PRODUCT_COMPONENT PC,
                COMPONENT C,
                RETAIL_INVOICE RI
            WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
                AND PC.PRODUCT_ID = v_PRODUCT_ID
                   -- ONLY INCLUDE COMPONENTS WHICH ARE PRESENT FOR THE ENTIRE
                   -- INVOICE DATE RANGE
                AND PC.BEGIN_DATE <= RI.PERIOD_BEGIN_DATE
                AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= RI.PERIOD_END_DATE
                AND C.COMPONENT_ID = PC.COMPONENT_ID) COMPS,
          -- WE ONLY USE THE CARTESIAN INNER VIEW TO GET THE TAX COMPONENT
          (SELECT LEVEL AS LVL
            FROM DUAL
            CONNECT BY LEVEL <= (CASE WHEN v_TAXED_COMPONENT_ID IS NULL THEN 1 ELSE 2 END)) CART
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
        AND EG.GROUP_CATEGORY = MM_TDIE_UTIL.g_EG_DUOS_GROUP
        AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
        AND EGA.ENTITY_GROUP_ID = EG.ENTITY_GROUP_ID
        AND EGA.ENTITY_ID = AEDC.ACCOUNT_ID
        AND RI.PERIOD_END_DATE BETWEEN EGA.BEGIN_DATE AND NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE)
        AND AEDC.EDC_ID = MM_TDIE_UTIL.g_NIE_EDC_ID
        AND RI.PERIOD_END_DATE BETWEEN AEDC.BEGIN_DATE AND NVL(AEDC.END_DATE, CONSTANTS.HIGH_DATE)
        AND PERIOD_DATES.ACCOUNT_ID (+) = AEDC.ACCOUNT_ID
        AND PARENT_EG.ENTITY_GROUP_ID = EG.PARENT_GROUP_ID
        -- THE EXTERNAL IDENTIFIER FOR THE COMPONENT MATCHES THE EXTERNAL IDENTIFIER FOR THE PARENT
        -- ENTITY GROUP FOR THE ACCOUNT'S DISTRIBUTION GROUP
        AND COMPS.EXT_SYS_IDENT = p_INVOICE_ABBREVIATION || '-' ||
                EI.GET_ENTITY_IDENTIFIER_EXTSYS(EC.ED_ENTITY_GROUP, PARENT_EG.ENTITY_GROUP_ID, EC.ES_TDIE)
        -- VERIFY THAT THE ACCOUNT IS ASSIGNED TO THE INVOICE RECEPIENT
        AND AESP.ACCOUNT_ID = AEDC.ACCOUNT_ID
        AND RI.PERIOD_END_DATE BETWEEN AESP.BEGIN_DATE AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE)
        AND PESP.ESP_ID = AESP.ESP_ID
        AND RI.PERIOD_END_DATE BETWEEN PESP.BEGIN_DATE AND NVL(PESP.END_DATE, CONSTANTS.HIGH_DATE)
        AND PESP.PSE_ID = RI.RECIPIENT_PSE_ID
      -- ORDER BY IS_TAXED ASCENDING SO THAT THE TAX COMPONENTS WILL ALWAYS COME LAST
     ORDER BY AEDC.ACCOUNT_ID, CART.LVL ASC;

END GET_SSS_PSO_NI_CURSOR;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_PSO_NI_RETAIL_STLMNT_CUR
    (
    p_RETAIL_INVOICE_ID IN NUMBER,
    p_CURSOR OUT RETAIL_SETTLEMENT.RETAIL_SETTLEMENT_INPUT_CURSOR
    ) AS

    v_SENDER_PSE_ID NUMBER(9);

BEGIN

    SELECT RI.SENDER_PSE_ID
    INTO v_SENDER_PSE_ID
    FROM RETAIL_INVOICE RI
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID;

    ASSERT(v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER_PSE_ID,
        'The supplied Retail Invoice was not a PSO (NI).', MSGCODES.c_ERR_ARGUMENT);

    GET_SSS_PSO_NI_CURSOR(p_RETAIL_INVOICE_ID, MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER, p_CURSOR);

END GET_PSO_NI_RETAIL_STLMNT_CUR;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_PSO_ROI_RETAIL_STLMNT_CUR
    (
    p_RETAIL_INVOICE_ID IN NUMBER,
    p_CURSOR OUT RETAIL_SETTLEMENT.RETAIL_SETTLEMENT_INPUT_CURSOR
    ) AS

    v_PRODUCT_ID NUMBER(9) := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER,
                                                    EC.ED_PRODUCT, EC.ES_TDIE);

    v_SENDER_PSE_ID NUMBER(9);

BEGIN

    SELECT RI.SENDER_PSE_ID
    INTO v_SENDER_PSE_ID
    FROM RETAIL_INVOICE RI
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID;

    ASSERT(v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER_PSE_ID,
        'The supplied Retail Invoice was not a PSO (ROI) invoice.', MSGCODES.c_ERR_ARGUMENT);

    OPEN p_CURSOR FOR
    -- DON'T SUPPLY ANY ACCOUNTS FOR PSO (ROI) INVOICES, BUT DO SUPPLY ALL COMPONENTS ASSIGNED TO
    -- THE PSO(ROI) PRODUCT
    SELECT CONSTANTS.NOT_ASSIGNED AS ACCOUNT_ID,
        CONSTANTS.NOT_ASSIGNED AS METER_ID,
        CONSTANTS.NOT_ASSIGNED AS SERVICE_LOCATION_ID,
        NULL AS METER_TYPE,
        RI.PERIOD_BEGIN_DATE AS BEGIN_DATE,
        RI.PERIOD_END_DATE AS END_DATE,
        v_PRODUCT_ID AS PRODUCT_ID,
        C.COMPONENT_ID AS COMPONENT_ID,
        NULL AS PERIOD_ID,
        RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL AS CHARGE_STATE,
        NULL AS INTERNAL_QUANTITY,
        NULL AS INTERNAL_RATE,
        NULL AS INTERNAL_AMOUNT,
        NULL AS EXTERNAL_QUANTITY,
        NULL AS EXTERNAL_RATE,
        NULL AS EXTERNAL_AMOUNT,
        NULL AS CREDIT_REFERENCE_ID,
        NULL AS ESP_ID
    FROM RETAIL_INVOICE RI,
        PRODUCT_COMPONENT PC,
        COMPONENT C
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
        AND PC.PRODUCT_ID = v_PRODUCT_ID
        AND PC.BEGIN_DATE <= RI.PERIOD_BEGIN_DATE
        AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= RI.PERIOD_END_DATE
        AND C.COMPONENT_ID = PC.COMPONENT_ID
            -- FORCE THE TAX COMPONENT TO THE END
    ORDER BY (CASE WHEN C.CHARGE_TYPE = 'Tax' THEN 1 ELSE 0 END) ASC;

END GET_PSO_ROI_RETAIL_STLMNT_CUR;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_CCL_RETAIL_SETTLEMENT_CUR
    (
    p_RETAIL_INVOICE_ID IN NUMBER,
    p_CURSOR OUT RETAIL_SETTLEMENT.RETAIL_SETTLEMENT_INPUT_CURSOR
    ) AS

    v_PRODUCT_ID NUMBER(9) := EI.GET_ID_FROM_IDENTIFIER_EXTSYS(MM_TDIE_UTIL.c_TDIE_CCL_SENDER,
                                                    EC.ED_PRODUCT, EC.ES_TDIE);

    v_SENDER_PSE_ID NUMBER(9);

BEGIN

    SELECT RI.SENDER_PSE_ID
    INTO v_SENDER_PSE_ID
    FROM RETAIL_INVOICE RI
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID;

    ASSERT(v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_CCL_SENDER_PSE_ID,
        'The supplied Retail Invoice was not a CCL invoice.', MSGCODES.c_ERR_ARGUMENT);

    OPEN p_CURSOR FOR
    SELECT AEDC.ACCOUNT_ID,
        CONSTANTS.NOT_ASSIGNED AS METER_ID,
        CONSTANTS.NOT_ASSIGNED AS SERVICE_LOCATION_ID,
        NULL AS METER_TYPE,
        LEAST(RI.PERIOD_BEGIN_DATE, NVL(PERIOD_DATES.PERIOD_BEGIN, RI.PERIOD_BEGIN_DATE)) AS BEGIN_DATE,
        GREATEST(RI.PERIOD_END_DATE, NVL(PERIOD_DATES.PERIOD_END, RI.PERIOD_END_DATE)) AS END_DATE,
        PC.PRODUCT_ID,
        PC.COMPONENT_ID,
        NULL AS PERIOD_ID,
        RETAIL_SETTLEMENT.c_CHARGE_STATE_NORMAL AS CHARGE_STATE,
        NULL AS INTERNAL_QUANTITY,
        NULL AS INTERNAL_RATE,
        NULL AS INTERNAL_AMOUNT,
        NULL AS EXTERNAL_QUANTITY,
        NULL AS EXTERNAL_RATE,
        NULL AS EXTERNAL_AMOUNT,
        NULL AS CREDIT_REFERENCE_ID,
        NULL AS ESP_ID
    FROM RETAIL_INVOICE RI,
        ACCOUNT_EDC AEDC,
        ACCOUNT_ESP AESP,
        PSE_ESP PESP,
        ENTITY_GROUP_ASSIGNMENT EGA,
        ENTITY_GROUP EG,
        ENTITY_GROUP P_EG,
        ENTITY_ATTRIBUTE EA,
        TEMPORAL_ENTITY_ATTRIBUTE TEA,
        PRODUCT_COMPONENT PC,
        -- PERIOD METERS SHOULDN'T START OR STOP THEIR CALCULATION IN THE MIDDLE
        -- OF A SERVICE CONSUMPTION RECORD, SO EXPAND THEIR DATE RANGE TO INCLUDE
        -- ANY THAT START BEFORE OR END AFTER AND EXTEND INTO THE INVOICE RANGE
        (SELECT ASL.ACCOUNT_ID, MIN(SC.BEGIN_DATE) AS PERIOD_BEGIN, MAX(SC.END_DATE) AS PERIOD_END
            FROM RETAIL_INVOICE RI,
                ACCOUNT_SERVICE_LOCATION ASL,
                SERVICE_LOCATION_METER SLM,
                METER M,
                SERVICE_CONSUMPTION SC,
                ACCOUNT_SERVICE ASERV,
                PROVIDER_SERVICE PS,
                SERVICE S
            WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
                AND ASL.BEGIN_DATE <= RI.PERIOD_END_DATE
                AND NVL(ASL.END_DATE, CONSTANTS.HIGH_DATE) >= RI.PERIOD_BEGIN_DATE
                AND SLM.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
                AND SLM.BEGIN_DATE <= RI.PERIOD_END_DATE
                AND NVL(SLM.END_DATE, CONSTANTS.HIGH_DATE) >= RI.PERIOD_BEGIN_DATE
                AND M.METER_ID = SLM.METER_ID
                AND M.METER_TYPE = 'Period'
                AND ASERV.ACCOUNT_ID = ASL.ACCOUNT_ID
                AND ASERV.SERVICE_LOCATION_ID = ASL.SERVICE_LOCATION_ID
                AND ASERV.METER_ID = M.METER_ID
                AND ASERV.AGGREGATE_ID = CONSTANTS.NOT_ASSIGNED
                AND PS.EDC_ID = MM_TDIE_UTIL.g_NIE_EDC_ID
                AND S.ACCOUNT_SERVICE_ID = ASERV.ACCOUNT_SERVICE_ID
                AND S.PROVIDER_SERVICE_ID = PS.PROVIDER_SERVICE_ID
                AND SC.SERVICE_ID = S.SERVICE_ID
                AND SC.BEGIN_DATE <= RI.PERIOD_END_DATE
                AND SC.END_DATE >= RI.PERIOD_BEGIN_DATE
            GROUP BY ASL.ACCOUNT_ID) PERIOD_DATES
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID
        AND EG.GROUP_CATEGORY = MM_TDIE_UTIL.g_EG_DUOS_GROUP
        AND EG.ENTITY_DOMAIN_ID = EC.ED_ACCOUNT
        AND EGA.ENTITY_GROUP_ID = EG.ENTITY_GROUP_ID
        AND EGA.ENTITY_ID = AEDC.ACCOUNT_ID
        AND P_EG.ENTITY_GROUP_ID = EG.PARENT_GROUP_ID
        AND RI.PERIOD_END_DATE BETWEEN EGA.BEGIN_DATE AND NVL(EGA.END_DATE, CONSTANTS.HIGH_DATE)
        AND AEDC.EDC_ID = MM_TDIE_UTIL.g_NIE_EDC_ID
        AND RI.PERIOD_END_DATE BETWEEN AEDC.BEGIN_DATE AND NVL(AEDC.END_DATE, CONSTANTS.HIGH_DATE)
        AND PERIOD_DATES.ACCOUNT_ID (+) = AEDC.ACCOUNT_ID
        AND EA.ENTITY_DOMAIN_ID = EC.ED_ENTITY_GROUP
        AND EA.ATTRIBUTE_NAME = 'Subject to CCL'
        AND EA.ATTRIBUTE_TYPE = 'Boolean'
        AND TEA.ATTRIBUTE_ID = EA.ATTRIBUTE_ID
        AND TEA.OWNER_ENTITY_ID = P_EG.ENTITY_GROUP_ID
        -- ONLY ACCOUNTS BELONGING TO A TARIFF CATEGORY WHICH IS "SUBJECT TO CCL" SHOULD
        -- BE PROCESSED FOR THE CCL INVOICE
        AND TEA.ATTRIBUTE_VAL = '1'
        AND RI.PERIOD_END_DATE BETWEEN TEA.BEGIN_DATE AND NVL(TEA.END_DATE, CONSTANTS.HIGH_DATE)
        -- VERIFY THAT THE ACCOUNT IS ASSIGNED TO THE INVOICE RECEPIENT
        AND AESP.ACCOUNT_ID = AEDC.ACCOUNT_ID
        AND RI.PERIOD_END_DATE BETWEEN AESP.BEGIN_DATE AND NVL(AESP.END_DATE, CONSTANTS.HIGH_DATE)
        AND PESP.ESP_ID = AESP.ESP_ID
        AND RI.PERIOD_END_DATE BETWEEN PESP.BEGIN_DATE AND NVL(PESP.END_DATE, CONSTANTS.HIGH_DATE)
        AND PESP.PSE_ID = RI.RECIPIENT_PSE_ID
        AND PC.PRODUCT_ID = v_PRODUCT_ID
        AND PC.BEGIN_DATE <= RI.PERIOD_BEGIN_DATE
        AND NVL(PC.END_DATE, CONSTANTS.HIGH_DATE) >= RI.PERIOD_END_DATE
    ORDER BY AEDC.ACCOUNT_ID, PC.PRODUCT_ID, PC.COMPONENT_ID;

END GET_CCL_RETAIL_SETTLEMENT_CUR;
----------------------------------------------------------------------------------------------------
PROCEDURE GET_SSS_RETAIL_SETTLEMENT_CUR
    (
    p_RETAIL_INVOICE_ID IN NUMBER,
    p_CURSOR OUT RETAIL_SETTLEMENT.RETAIL_SETTLEMENT_INPUT_CURSOR
    ) AS

    v_SENDER_PSE_ID NUMBER(9);

BEGIN

    SELECT RI.SENDER_PSE_ID
    INTO v_SENDER_PSE_ID
    FROM RETAIL_INVOICE RI
    WHERE RI.RETAIL_INVOICE_ID = p_RETAIL_INVOICE_ID;

    ASSERT(v_SENDER_PSE_ID = MM_TDIE_UTIL.c_TDIE_SSS_SENDER_PSE_ID,
        'The supplied Retail Invoice was not a SSS invoice.', MSGCODES.c_ERR_ARGUMENT);

    GET_SSS_PSO_NI_CURSOR(p_RETAIL_INVOICE_ID, MM_TDIE_UTIL.c_TDIE_SSS_SENDER, p_CURSOR);

 END GET_SSS_RETAIL_SETTLEMENT_CUR;
----------------------------------------------------------------------------------------------------
PROCEDURE RUN_PSO_CCL_SSS_INVOICE
    (
    p_RETAIL_INVOICE_ID         IN NUMBER,
    p_SENDER_ID                 IN NUMBER,
    p_INVOICE_STATEMENT_TYPE_ID IN NUMBER,
    p_PROCESS_ID                OUT VARCHAR2,
    p_PROCESS_STATUS            OUT NUMBER,
    p_MESSAGE                   OUT VARCHAR2,
    p_TRACE_ON                  IN NUMBER := 0
    ) AS

    cur_RETAIL_SETTLEMENT_INPUT RETAIL_SETTLEMENT.RETAIL_SETTLEMENT_INPUT_CURSOR;

BEGIN

    LOGS.START_PROCESS('Single Invoice Settlement',p_TRACE_ON => p_TRACE_ON);
	p_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
    LOGS.SET_PROCESS_TARGET_PARAMETER('Retail Invoice ID',	p_RETAIL_INVOICE_ID);
	LOGS.SET_PROCESS_TARGET_PARAMETER('Statement Type',	TEXT_UTIL.TO_CHAR_ENTITY(p_INVOICE_STATEMENT_TYPE_ID, EC.ED_STATEMENT_TYPE));

	-- Check security
    UPDATE_RETAIL_INVOICE_PROCESS(p_RETAIL_INVOICE_ID, nvl(p_INVOICE_STATEMENT_TYPE_ID, CONSTANTS.NOT_ASSIGNED));
	SD.VERIFY_ACTION_IS_ALLOWED(MM_TDIE_UTIL.c_ACTION_RUN_ANY_SETTLEMENT);

    IF p_SENDER_ID = MM_TDIE_UTIL.c_TDIE_CCL_SENDER_PSE_ID THEN
        LOGS.SET_PROCESS_TARGET_PARAMETER('Invoice Type', 'CCC');
        GET_CCL_RETAIL_SETTLEMENT_CUR(p_RETAIL_INVOICE_ID,
                                 cur_RETAIL_SETTLEMENT_INPUT);
    ELSIF p_SENDER_ID = MM_TDIE_UTIL.c_TDIE_PSO_NI_SENDER_PSE_ID THEN
        LOGS.SET_PROCESS_TARGET_PARAMETER('Invoice Type', 'PSO (NI)');
        GET_PSO_NI_RETAIL_STLMNT_CUR(p_RETAIL_INVOICE_ID, cur_RETAIL_SETTLEMENT_INPUT);
    ELSIF p_SENDER_ID = MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER_PSE_ID THEN
        LOGS.SET_PROCESS_TARGET_PARAMETER('Invoice Type', 'PSO (ROI)');
        GET_PSO_ROI_RETAIL_STLMNT_CUR(p_RETAIL_INVOICE_ID, cur_RETAIL_SETTLEMENT_INPUT);
    ELSIF p_SENDER_ID = MM_TDIE_UTIL.c_TDIE_SSS_SENDER_PSE_ID THEN
        LOGS.SET_PROCESS_TARGET_PARAMETER('Invoice Type', 'SSS');
        GET_SSS_RETAIL_SETTLEMENT_CUR(p_RETAIL_INVOICE_ID, cur_RETAIL_SETTLEMENT_INPUT);
    ELSE
        LOGS.LOG_ERROR('Unrecognized Sender: ' || TEXT_UTIL.TO_CHAR_ENTITY(p_SENDER_ID, EC.ED_PSE) || ' For Invoice: '
            || p_RETAIL_INVOICE_ID);
        LOGS.STOP_PROCESS(p_MESSAGE, p_PROCESS_STATUS);
        RETURN;
    END IF;

    RETAIL_SETTLEMENT.RUN_RETAIL_SETTLEMENT(p_RETAIL_INVOICE_ID,
        cur_RETAIL_SETTLEMENT_INPUT,
        p_INVOICE_STATEMENT_TYPE_ID,
        MM_TDIE_UTIL.g_TZ,
        CONSTANTS.CODE_ACTUAL,
        -- PSO (ROI) INVOICES MUST ALLOW RECORDS WITH NO ACCOUNTS OR SERVICE POINTS
        p_ALLOW_NO_ACCOUNTS_SPS => CASE WHEN p_SENDER_ID = MM_TDIE_UTIL.c_TDIE_PSO_ROI_SENDER_PSE_ID
                                        THEN TRUE
                                       ELSE FALSE END,
        -- CCL/ PSO / SSS Invoices don't mark consumption as processed
        p_MARK_CONSUMPTION => FALSE );

     LOGS.STOP_PROCESS(p_MESSAGE, p_PROCESS_STATUS);
     COMMIT;

EXCEPTION
	WHEN OTHERS THEN
		ERRS.ABORT_PROCESS();
END RUN_PSO_CCL_SSS_INVOICE;
----------------------------------------------------------------------------------------------------
PROCEDURE RUN_PSO_CCL_SSS_INVOICES
	(
	p_RETAIL_INVOICE_IDs        IN NUMBER_COLLECTION,
	p_SENDER_IDs     	        IN NUMBER_COLLECTION,
	p_INVOICE_STATEMENT_TYPE_ID IN NUMBER,
	p_PROCESS_ID 	  	        OUT VARCHAR2,
	p_PROCESS_STATUS  	        OUT NUMBER,
	p_MESSAGE 		  	        OUT VARCHAR2,
	p_TRACE_ON        	        IN NUMBER := 0
	) AS
v_PROCESS_ID 		NUMBER;
v_PROCESS_STATUS 	NUMBER(9);
v_MESSAGE 			VARCHAR2(4000);
BEGIN
	LOGS.START_PROCESS('PSO/CCL/SSS Invoices',p_TRACE_ON => p_TRACE_ON);
	p_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
	LOGS.SET_PROCESS_TARGET_PARAMETER('Invoice IDs', TEXT_UTIL.TO_CHAR_NUMBER_LIST(p_RETAIL_INVOICE_IDs));
	LOGS.SET_PROCESS_TARGET_PARAMETER('Senders', TEXT_UTIL.TO_CHAR_ENTITY_LIST(p_SENDER_IDs, EC.ED_PSE));

	-- Check security
	SD.VERIFY_ACTION_IS_ALLOWED(MM_TDIE_UTIL.c_ACTION_RUN_ANY_SETTLEMENT);

	-- Check params
	ASSERT(p_RETAIL_INVOICE_IDs IS NOT NULL, 'The list of Invoice Numbers must not be null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_SENDER_IDs IS NOT NULL, 'The list of Sender IDs must not be null.', MSGCODES.c_ERR_ARGUMENT);
	ASSERT(p_RETAIL_INVOICE_IDs.COUNT = p_SENDER_IDs.COUNT,
		'The list of Invoice Numbers and Sender Ids must be the same size.', MSGCODES.c_ERR_ARGUMENT);

	FOR v_IDX IN p_RETAIL_INVOICE_IDs.FIRST..p_RETAIL_INVOICE_IDs.LAST LOOP
		BEGIN
            RUN_PSO_CCL_SSS_INVOICE(p_RETAIL_INVOICE_IDs(v_IDX),
                                    p_SENDER_IDs(v_IDX),
                                    NVL(p_INVOICE_STATEMENT_TYPE_ID, CONSTANTS.NOT_ASSIGNED),
                                    v_PROCESS_ID,
                                    v_PROCESS_STATUS,
                                    v_MESSAGE,
                                    p_TRACE_ON);
            LOGS.LOG_INFO('Invoice processed with status = ' || LOG_REPORTS.GET_STATUS_LEVEL_STRING(v_PROCESS_STATUS)  || '.');
		EXCEPTION
			WHEN OTHERS THEN
				ERRS.LOG_AND_CONTINUE('Error occurred while processing Invoice: ' || p_RETAIL_INVOICE_IDs(v_IDX) || '.',
					p_LOG_LEVEL => LOGS.c_LEVEL_FATAL);
		END;
	END LOOP;

	LOGS.STOP_PROCESS(p_MESSAGE, p_PROCESS_STATUS);
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		ERRS.ABORT_PROCESS();
END RUN_PSO_CCL_SSS_INVOICES;
----------------------------------------------------------------------------------------------------
END MM_TDIE_INVOICE;
/
