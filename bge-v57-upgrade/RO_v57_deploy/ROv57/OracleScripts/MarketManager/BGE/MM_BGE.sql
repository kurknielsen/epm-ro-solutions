CREATE OR REPLACE PACKAGE MM_BGE is

TYPE REF_CURSOR IS REF CURSOR;

PROCEDURE IMPORT_BGE_WRFS
	(
	p_CSV_CLOB IN CLOB,
	p_ERROR_MESSAGE OUT VARCHAR2
	);

PROCEDURE DATA_IMPORT
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN CHAR,
	p_RECORD_DELIMITER IN CHAR,
	p_RECORDS IN VARCHAR,
	p_FILE_PATH IN VARCHAR,
	p_LAST_TIME IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	);
	
	
g_LOW_DATE DATE := LOW_DATE;
g_TRACE_ON BOOLEAN := TRUE;
g_PROFILE_NZ_MIN NUMBER := -99999999;
g_PROFILE_MAX NUMBER := 99999999;

TYPE t_WRF_CONTEXT IS RECORD
	(
	PREV_PROFILE VARCHAR2(64),
	PREV_SEASON VARCHAR2(64),
	PREV_DAYTYPE VARCHAR2(64),
	PREV_HOUR NUMBER,
	PROFILE_ID NUMBER(9),
	SEASON_ID NUMBER(9),
	TEMPLATE_ID NUMBER(9),
	WRF_LINE_NBR NUMBER(4)
	);	
END MM_BGE;
/
CREATE OR REPLACE PACKAGE BODY MM_BGE IS
	c_DELIM CHAR(1) := ',';
	
-------------------------------------------------------------------------------------
PROCEDURE GET_WRF_PROFILE_ID
	(
	p_PROFILE IN VARCHAR2,
	p_SEASON IN VARCHAR2,
	p_DAYTYPE IN VARCHAR2,
	p_WRF_PROFILE_ID OUT NUMBER,
	p_ERROR_MESSAGE OUT VARCHAR2
	) AS
	v_PROFILE_LIBRARY_NAME LOAD_PROFILE_LIBRARY.PROFILE_LIBRARY_NAME%TYPE;
	v_PROFILE_LIBRARY_ID NUMBER(9);
	v_PROFILE_NAME LOAD_PROFILE.PROFILE_NAME%TYPE;
	v_TEMPLATE_NAME TEMPLATE.TEMPLATE_NAME%TYPE;
	v_TEMPLATE_ID NUMBER(9);
	v_CALENDAR_ID NUMBER(9);
	v_PROFILE_SEASON LOAD_PROFILE.PROFILE_SEASON%TYPE;
	v_CORRECTED_DAYTYPE VARCHAR2(16) := CASE WHEN p_PROFILE IN ('G','GS') AND p_DAYTYPE = 'Weekday' THEN 'Tue_Thur' ELSE p_DAYTYPE END;
	v_STATUS NUMBER;
	v_PARAMETER_ID NUMBER(9);
BEGIN
	p_WRF_PROFILE_ID := 0;
	v_PROFILE_LIBRARY_NAME := 'BGE ' || p_PROFILE;
	ID.ID_FOR_LOAD_PROFILE_LIBRARY(v_PROFILE_LIBRARY_NAME, TRUE, v_PROFILE_LIBRARY_ID);
	
	v_PROFILE_NAME := 'BGE ' || p_PROFILE || ' ' || p_SEASON || ' ' || p_DAYTYPE;
	BEGIN
		SELECT PROFILE_ID INTO p_WRF_PROFILE_ID FROM LOAD_PROFILE 
		WHERE PROFILE_LIBRARY_ID = v_PROFILE_LIBRARY_ID
			AND PROFILE_NAME = v_PROFILE_NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		
			--GET THE TEMPLATE_ID
			v_TEMPLATE_NAME := 'BGE ' || p_SEASON || ' ' || v_CORRECTED_DAYTYPE;
			BEGIN
				SELECT TEMPLATE_ID INTO v_TEMPLATE_ID FROM TEMPLATE WHERE TEMPLATE_NAME = v_TEMPLATE_NAME;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					p_ERROR_MESSAGE := 'Template not found: ' || v_TEMPLATE_NAME;
					RETURN;
			END; 
			
			--GET THE PROFILE_SEASON
			v_PROFILE_SEASON := v_TEMPLATE_NAME; 
			
			--STORE THE PROFILE RECORD
			IO.PUT_LOAD_PROFILE
				    (
					p_WRF_PROFILE_ID,
					v_PROFILE_LIBRARY_ID,
					v_PROFILE_NAME,
					GA.UNDEFINED_ATTRIBUTE, -- ALIAS
					GA.UNDEFINED_ATTRIBUTE, -- DESC
					0,
					'WRF', -- TYPE
					GA.UNDEFINED_ATTRIBUTE, -- OPERATION
					GA.UNDEFINED_ATTRIBUTE, -- ORIGIN
					GA.UNDEFINED_ATTRIBUTE, -- RATE CLASS
					GA.UNDEFINED_ATTRIBUTE, -- DAY TYPE
					GA.UNDEFINED_ATTRIBUTE, -- ACCOUNT REF
					GA.UNDEFINED_ATTRIBUTE, -- METER REF
					GA.UNDEFINED_ATTRIBUTE, -- SIC CODE
					v_PROFILE_SEASON, 				-- SEASON
					GA.UNDEFINED_ATTRIBUTE, -- SYSTEM LOAD
					GA.UNDEFINED_ATTRIBUTE,	-- PROFILE ADJUSTMENT OPTION
					0,					-- STATION ID
					v_TEMPLATE_ID,					-- TEMPLATE ID
					NULL,			-- SOURCE BEGIN DATE
					NULL,			-- SOURCE END DATE
					0,					-- SOURCE ID
					24,					-- INTERVAL
					LOW_DATE, -- SOURCE_VERSION
					'Hour',			-- BREAKPOINT INTERVAL
                    0			-- IS_EXTERNAL_PROFILE
					);

			--ASSIGN THE LIBRARY TO A CALENDAR.
			ID.ID_FOR_CALENDAR(v_PROFILE_LIBRARY_NAME, TRUE, v_CALENDAR_ID);
			CA.PUT_CALENDAR_PROFILE_LIBRARY(v_CALENDAR_ID, v_PROFILE_LIBRARY_ID, '1-JAN-1980', '31-DEC-2020', v_PROFILE_LIBRARY_ID, '1-JAN-1980', v_STATUS);
			
			--ADD A RECORD TO THE LOAD_PROFILE_WRF_WEATHER TABLE.
			--THE FORECASTING LOGIC SEEMS TO JUST DO A LOOKUP BY CATEGORY, SO THAT SHOULD BE GOOD ENOUGH HERE.
			BEGIN
				SELECT PARAMETER_ID INTO v_PARAMETER_ID FROM WEATHER_PARAMETER
				WHERE PARAMETER_CATEGORY = 'Temperature';

				INSERT INTO LOAD_PROFILE_WRF_WEATHER(PROFILE_ID, VARIABLE_NBR, PARAMETER_ID)
				VALUES(p_WRF_PROFILE_ID, 0, v_PARAMETER_ID); 

			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					p_ERROR_MESSAGE := 'No Weather Parameter with Category = Temperature was found.';
					RETURN;
				WHEN TOO_MANY_ROWS THEN
					p_ERROR_MESSAGE := 'More than one Weather Parameter with Category = Temperature was found.';
					RETURN;
				WHEN DUP_VAL_ON_INDEX THEN
					NULL; --It's okay if this record already exists.
			END;
			
	END;	

END GET_WRF_PROFILE_ID;
-------------------------------------------------------------------------------------
PROCEDURE GET_WRF_ID
	(
	p_PROFILE_ID IN NUMBER,
	p_WRF_LINE_NBR IN NUMBER,
	p_WRF_ID OUT NUMBER
	) AS
BEGIN
	SELECT WRF_ID INTO p_WRF_ID FROM LOAD_PROFILE_WRF WHERE PROFILE_ID = p_PROFILE_ID AND WRF_LINE_NBR = p_WRF_LINE_NBR AND AS_OF_DATE = g_LOW_DATE;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		SELECT OID.NEXTVAL INTO p_WRF_ID FROM DUAL;
		INSERT INTO LOAD_PROFILE_WRF(PROFILE_ID, WRF_LINE_NBR, AS_OF_DATE, SEGMENT_MIN, SEGMENT_MAX, WRF_ID)
		VALUES (p_PROFILE_ID, p_WRF_LINE_NBR, g_LOW_DATE, 0, 0, p_WRF_ID);
END GET_WRF_ID;
-------------------------------------------------------------------------------------
PROCEDURE PUT_LOAD_PROFILE_WRF_LINE
	(
	p_WRF_ID IN NUMBER,
	p_HOUR IN NUMBER,
	p_CONSTANT IN NUMBER,
	p_COEFFICIENT IN NUMBER,
	p_R_SQUARED IN NUMBER,
	p_LRANGE IN NUMBER,
	p_HRANGE IN NUMBER
	) AS
BEGIN
	IF g_TRACE_ON THEN
		UT.DEBUG_TRACE('MM_BGE.PUT_LOAD_PROFILE_WRF_LINE WRF_ID=' || p_WRF_ID || ' HOUR=' || p_HOUR || ' CONSTANT=' || p_CONSTANT || ' COEFF=' || p_COEFFICIENT);
	END IF;
	
	INSERT INTO LOAD_PROFILE_WRF_LINE
		(
		WRF_ID, 
		WRF_HOUR, 
		COEFF_0, COEFF_1, COEFF_2, COEFF_3, COEFF_4, COEFF_5, 
		TSTAT_0, TSTAT_1, TSTAT_2, TSTAT_3, TSTAT_4, TSTAT_5, 
		NUM_VARS, 
		R_SQUARED, 
		TSTAT_CRITICAL,
		SEGMENT_MIN, 
		SEGMENT_MAX
		)
	VALUES
		(
		p_WRF_ID,
		p_HOUR,
		p_CONSTANT,	p_COEFFICIENT, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0,
		NULL,
		p_R_SQUARED,
		0,
		p_LRANGE,
		p_HRANGE
		);
END PUT_LOAD_PROFILE_WRF_LINE;
-------------------------------------------------------------------------------------
PROCEDURE PUT_WRF_STATISTICS
	(
	p_PROFILE_ID IN NUMBER,
	p_ERROR_MESSAGE OUT VARCHAR2
	) AS
	v_BEGIN_DATE DATE := '1-JAN-1980';
	v_END_DATE DATE := '31-DEC-2020';
	v_COUNT NUMBER;
	v_R2MIN NUMBER;
	v_R2MAX NUMBER;
	v_STATUS NUMBER;
BEGIN

	SELECT COUNT(B.WRF_ID),
		MIN(B.R_SQUARED),
		MAX(B.R_SQUARED)
	INTO v_COUNT, v_R2MIN, v_R2MAX
	FROM LOAD_PROFILE_WRF A, LOAD_PROFILE_WRF_LINE B
	WHERE A.PROFILE_ID = p_PROFILE_ID
		AND B.WRF_ID = A.WRF_ID;

	PF.PUT_LOAD_PROFILE_STATISTICS (
		p_PROFILE_ID, -110, g_LOW_DATE, v_BEGIN_DATE, v_END_DATE,
		v_COUNT, 0, g_PROFILE_NZ_MIN, g_PROFILE_NZ_MIN, g_PROFILE_MAX, 
		0, 0, 0, 0, v_R2MIN, v_R2MAX, 0, 0, 0, 0, 'Production', v_STATUS);
	
	IF v_STATUS <> GA.SUCCESS THEN
		p_ERROR_MESSAGE := 'Error ' || v_STATUS || ' saving statistics for PROFILE_ID=' || p_PROFILE_ID;
	END IF;

END PUT_WRF_STATISTICS;
-------------------------------------------------------------------------------------
PROCEDURE STORE_BGE_WRF
	(
	p_WRF_CONTEXT IN OUT NOCOPY t_WRF_CONTEXT,
	p_PROFILE IN VARCHAR2,
	p_SEASON IN VARCHAR2,
	p_DAYTYPE IN VARCHAR2,
	p_HOUR IN NUMBER,
	p_R_SQUARED IN NUMBER,
	p_CONSTANT IN NUMBER,
	p_COEFFICIENT IN NUMBER,
	p_LRANGE IN NUMBER,
	p_HRANGE IN NUMBER,
	p_ERROR_MESSAGE OUT VARCHAR2
	) AS
	v_WRF_ID NUMBER(9);
	v_STATUS NUMBER;
BEGIN

	--Get new IDs if this is a new profile/season/daytype.
	IF p_SEASON <> p_WRF_CONTEXT.PREV_SEASON OR p_DAYTYPE <> p_WRF_CONTEXT.PREV_DAYTYPE OR p_PROFILE <> p_WRF_CONTEXT.PREV_PROFILE THEN
		--Save statistics for the last profile.
		IF p_WRF_CONTEXT.PROFILE_ID > 0 THEN PUT_WRF_STATISTICS(p_WRF_CONTEXT.PROFILE_ID, p_ERROR_MESSAGE); END IF;
		IF p_ERROR_MESSAGE IS NOT NULL THEN RETURN; END IF;
		
		--Get the Profile ID from the LOAD_PROFILE table, or create it if it does not exist.
		--If this is a new Profile, add a record in the LOAD_PROFILE_WRF_WEATHER table as well.
		GET_WRF_PROFILE_ID(p_PROFILE, p_SEASON, p_DAYTYPE, p_WRF_CONTEXT.PROFILE_ID, p_ERROR_MESSAGE);
		
		IF p_ERROR_MESSAGE IS NOT NULL THEN RETURN; END IF;
		
		--Clear out all the existing data.
		DELETE LOAD_PROFILE_WRF WHERE PROFILE_ID = p_WRF_CONTEXT.PROFILE_ID;
		
		p_WRF_CONTEXT.PREV_PROFILE := p_PROFILE;
		p_WRF_CONTEXT.PREV_SEASON := p_SEASON;
		p_WRF_CONTEXT.PREV_DAYTYPE := p_DAYTYPE;
	END IF;

	--Reset the Line number if this is a new hour, or increment the line number if it is the same hour.
	IF p_HOUR <> p_WRF_CONTEXT.PREV_HOUR THEN
		p_WRF_CONTEXT.WRF_LINE_NBR := 1;
		p_WRF_CONTEXT.PREV_HOUR := p_HOUR;
	ELSE
		p_WRF_CONTEXT.WRF_LINE_NBR := p_WRF_CONTEXT.WRF_LINE_NBR + 1;
	END IF;
	
	--Get the WRF ID from the LOAD_PROFILE_WRF table, and create a record if one does not exist.
	GET_WRF_ID(p_WRF_CONTEXT.PROFILE_ID, p_WRF_CONTEXT.WRF_LINE_NBR, v_WRF_ID);
	
	--Store a record in the LOAD_PROFILE_WRF_LINE table.
	PUT_LOAD_PROFILE_WRF_LINE(v_WRF_ID, p_HOUR, p_CONSTANT, p_COEFFICIENT, p_R_SQUARED, p_LRANGE, p_HRANGE);

END STORE_BGE_WRF;
-------------------------------------------------------------------------------------
PROCEDURE IMPORT_BGE_WRFS
	(
	p_CSV_CLOB IN CLOB,
	p_ERROR_MESSAGE OUT VARCHAR2
	) AS
	v_LINES PARSE_UTIL.BIG_STRING_TABLE;
	v_TOKENS PARSE_UTIL.STRING_TABLE;
	v_COUNT BINARY_INTEGER;
	v_PROFILE VARCHAR2(64);
	v_SEASON VARCHAR2(64);
	v_DAYTYPE VARCHAR2(64);
	v_HOUR NUMBER(2);
	v_R_SQUARED NUMBER;
	v_CONSTANT NUMBER;
	v_COEFFICIENT NUMBER;
	v_LRANGE2 NUMBER;
	v_HRANGE2 NUMBER;
	v_WRF_CONTEXT t_WRF_CONTEXT;
	v_STATUS NUMBER;
BEGIN

	PARSE_UTIL.PARSE_CLOB_INTO_LINES(p_CSV_CLOB, v_LINES);
	v_COUNT := v_LINES.COUNT;
	IF v_COUNT > 2 THEN
		
		--Set up some initial values
		v_WRF_CONTEXT.PREV_PROFILE := 'INITVAL';
		v_WRF_CONTEXT.PREV_SEASON := 'INITVAL';
		v_WRF_CONTEXT.PREV_DAYTYPE := 'INITVAL';
		v_WRF_CONTEXT.PREV_HOUR := -1;
		v_WRF_CONTEXT.PROFILE_ID := -1;
		v_WRF_CONTEXT.SEASON_ID := -1;
		v_WRF_CONTEXT.TEMPLATE_ID := -1;
		v_WRF_CONTEXT.WRF_LINE_NBR := -1;
		
		--First row is name of profile.
		PARSE_UTIL.PARSE_DELIMITED_STRING(v_LINES(1), c_DELIM, v_TOKENS);
		v_PROFILE := TRIM(REPLACE(v_TOKENS(1), 'Profile:', ''));
		
		--Skip second row.  It's just headers.
		
		--Third row and beyond is data.
		FOR i IN 3 .. v_COUNT LOOP
			PARSE_UTIL.PARSE_DELIMITED_STRING(v_LINES(i), c_DELIM, v_TOKENS);
			v_SEASON := v_TOKENS(1);
			v_DAYTYPE := v_TOKENS(2);
			v_HOUR := TO_NUMBER(v_TOKENS(3));
			v_R_SQUARED := TO_NUMBER(v_TOKENS(4));
			--COLUMN 5 IS L-Range (NOT USED)
			--COLUMN 6 IS H-Range (NOT USED)
			v_CONSTANT := TO_NUMBER(v_TOKENS(7));
			v_COEFFICIENT := TO_NUMBER(v_TOKENS(8));
			--COLUMN 9 IS FIRST FLAG (NOT USED)
			--COLUMN 10 IS LAST FLAG (NOT USED)
			v_LRANGE2 := TO_NUMBER(v_TOKENS(11));
			v_HRANGE2 := TO_NUMBER(v_TOKENS(12));
			
			STORE_BGE_WRF(v_WRF_CONTEXT, v_PROFILE, v_SEASON, v_DAYTYPE, v_HOUR, v_R_SQUARED, v_CONSTANT, v_COEFFICIENT, v_LRANGE2, v_HRANGE2, p_ERROR_MESSAGE);
			IF p_ERROR_MESSAGE IS NOT NULL THEN RETURN; END IF;
		END LOOP;
		
		--Save statistics for the last profile.
		IF v_WRF_CONTEXT.PROFILE_ID > 0 THEN PUT_WRF_STATISTICS(v_WRF_CONTEXT.PROFILE_ID, p_ERROR_MESSAGE); END IF;

	ELSE
		p_ERROR_MESSAGE := 'No lines of data were found in file.';
	END IF;

END IMPORT_BGE_WRFS;
-------------------------------------------------------------------------------------
PROCEDURE DATA_IMPORT
	(
	p_REQUEST_TYPE IN CHAR,
	p_BEGIN_DATE IN DATE,
	p_END_DATE IN DATE,
	p_AS_OF_DATE IN DATE,
	p_EXCHANGE_TYPE IN VARCHAR,
	p_MODULE_NAME IN VARCHAR,
	p_ENTITY_LIST IN VARCHAR2,
	p_ENTITY_LIST_DELIMITER IN CHAR,
	p_RECORD_DELIMITER IN CHAR,
	p_RECORDS IN VARCHAR,
--	p_REQUEST_CLOB IN CLOB,
	p_FILE_PATH IN VARCHAR,
	p_LAST_TIME IN NUMBER,
	p_STATUS OUT NUMBER,
	p_MESSAGE OUT VARCHAR
	) AS
	v_CLOB_LOC CLOB;
BEGIN
	--p_SOMETHING_DONE := TRUE;


	PARSE_UTIL.APPEND_UNTIL_FINISHED_CLOB(p_RECORD_DELIMITER, p_RECORDS, p_FILE_PATH, p_LAST_TIME,	v_CLOB_LOC);
	
	-- file not finished? then return and let caller send more pieces of the file
 	IF v_CLOB_LOC IS NULL THEN
 		--p_SOMETHING_DONE := TRUE;
 		COMMIT;
 		RETURN;
 	END IF;
	
	IF UPPER(p_EXCHANGE_TYPE) = 'IMPORT BGE WRFS' THEN
		IMPORT_BGE_WRFS(v_CLOB_LOC, p_MESSAGE);
		IF p_MESSAGE IS NOT NULL THEN p_STATUS := 2; END IF;
-- 	ELSE
-- 		p_SOMETHING_DONE := FALSE;
	END IF;
END DATA_IMPORT;
-------------------------------------------------------------------------------------
END MM_BGE;
/
