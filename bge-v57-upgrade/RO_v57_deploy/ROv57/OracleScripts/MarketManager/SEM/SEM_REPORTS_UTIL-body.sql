CREATE OR REPLACE PACKAGE BODY SEM_REPORTS_UTIL IS
	g_ALL NUMBER(9) := -1;
	g_ALL_STRING VARCHAR2(8) := '<ALL>';
----------------------------------------------------------
FUNCTION WHAT_VERSION RETURN VARCHAR IS
BEGIN
    RETURN '$Revision: 1.11 $';
END WHAT_VERSION;
-----------------------------------------
PROCEDURE GET_RESOURCE
	(
	p_STATUS OUT NUMBER,
    p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

    p_STATUS := GA.SUCCESS;

    OPEN p_CURSOR FOR
		SELECT DISTINCT S.SERVICE_POINT_NAME, S.SERVICE_POINT_ID
		FROM SERVICE_POINT S
		WHERE S.SERVICE_POINT_ID > 0
		UNION ALL
		SELECT g_ALL_STRING, -1 FROM DUAL
		ORDER BY 1;

END GET_RESOURCE;
----------------------------------------------------------
PROCEDURE GET_IC_RESOURCE
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT S.SERVICE_POINT_NAME, S.SERVICE_POINT_ID
		FROM SERVICE_POINT S, TEMPORAL_ENTITY_ATTRIBUTE T
		WHERE S.SERVICE_POINT_ID = T.OWNER_ENTITY_ID
		AND T.ENTITY_DOMAIN_ID = -210 --EC.ED_SERVICE_POINT
		AND T.ATTRIBUTE_NAME = 'Resource Type'
		AND T.ATTRIBUTE_VAL = 'I';

END GET_IC_RESOURCE;
----------------------------------------------------------
PROCEDURE GET_IC_RESOURCE_OFF_CAP
	(
	p_INCLUDE_ALL IN NUMBER,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN
	p_STATUS := GA.SUCCESS;
	
  OPEN p_CURSOR FOR
      SELECT  CONSTANTS.ALL_STRING  AS SERVICE_POINT_NAME,
              CONSTANTS.ALL_ID      AS SERVICE_POINT_ID
	   FROM DUAL
       WHERE NVL(p_INCLUDE_ALL,1) = 1

 	   UNION ALL	
   
		SELECT S.SERVICE_POINT_NAME, S.SERVICE_POINT_ID
		FROM SERVICE_POINT S, TEMPORAL_ENTITY_ATTRIBUTE T
		WHERE S.SERVICE_POINT_ID = T.OWNER_ENTITY_ID
		AND T.ENTITY_DOMAIN_ID = EC.ED_SERVICE_POINT
		AND T.ATTRIBUTE_NAME = 'Resource Type'
		AND T.ATTRIBUTE_VAL = 'I';

END GET_IC_RESOURCE_OFF_CAP;
----------------------------------------------------------
PROCEDURE GET_RESOURCE_TYPE
	(
	p_RESOURCE_ID VARCHAR2,
	p_STATUS OUT NUMBER,
    p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN

    p_STATUS := GA.SUCCESS;

	IF INSTR(p_RESOURCE_ID, g_ALL) > 0 THEN
		OPEN p_CURSOR FOR
			SELECT DISTINCT A.ATTRIBUTE_VAL
			FROM TEMPORAL_ENTITY_ATTRIBUTE A, SERVICE_POINT B
			WHERE A.ENTITY_DOMAIN_ID = -210 --EC.ED_SERVICE_POINT
				AND A.ATTRIBUTE_NAME = 'Resource Type'
				AND A.OWNER_ENTITY_ID = B.SERVICE_POINT_ID
			UNION ALL
			  SELECT g_ALL_STRING FROM DUAL
			ORDER BY 1;
	ELSE
		OPEN p_CURSOR FOR
			SELECT g_ALL_STRING FROM DUAL;
	END IF;

END GET_RESOURCE_TYPE;
----------------------------------------------------------
PROCEDURE GET_FUEL_TYPE
	(
	p_RESOURCE_ID VARCHAR2,
	p_STATUS OUT NUMBER,
    p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN

    p_STATUS := GA.SUCCESS;

	IF INSTR(p_RESOURCE_ID, g_ALL) > 0 THEN
		OPEN p_CURSOR FOR
			SELECT g_ALL_STRING FROM DUAL
			ORDER BY 1;
	ELSE
		OPEN p_CURSOR FOR
			SELECT g_ALL_STRING FROM DUAL;
	END IF;

END GET_FUEL_TYPE;
----------------------------------------------------------
PROCEDURE GET_UNDER_TEST
	(
	p_RESOURCE_ID VARCHAR2,
	p_STATUS OUT NUMBER,
    p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN
    p_STATUS := GA.SUCCESS;

	IF INSTR(p_RESOURCE_ID, g_ALL) > 0 THEN
		OPEN p_CURSOR FOR
			SELECT g_ALL_STRING FROM DUAL
			UNION ALL
			SELECT 'Y' FROM DUAL
			UNION ALL
			SELECT 'N' FROM DUAL;
	ELSE
		OPEN p_CURSOR FOR
			SELECT g_ALL_STRING FROM DUAL;
	END IF;

END GET_UNDER_TEST;
----------------------------------------------------------
PROCEDURE GET_SCHEDULE_TYPE
	(
	p_RESOURCE_ID VARCHAR2,
	p_STATUS OUT NUMBER,
    p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

    p_STATUS := GA.SUCCESS;

	IF INSTR(p_RESOURCE_ID, g_ALL) > 0 THEN
    	OPEN p_CURSOR FOR
			SELECT g_ALL_STRING, -1 FROM DUAL
			UNION ALL
			SELECT a.STATEMENT_TYPE_NAME,
				a.STATEMENT_TYPE_ID
			FROM STATEMENT_TYPE a
			--WHERE LENGTH(TO_CHAR(a.STATEMENT_TYPE_ID)) = 1
			WHERE a.STATEMENT_TYPE_ALIAS IN ('Ex-Ante', 'Indicative', 'Initial')
			ORDER BY 1;
	ELSE
		OPEN p_CURSOR FOR
			SELECT g_ALL_STRING, -1 FROM DUAL;
	END IF;

END GET_SCHEDULE_TYPE;
----------------------------------------------------------
PROCEDURE GET_IDT_CHG_SCHED_TYPE
	(
	p_RESOURCE_ID VARCHAR2,
	p_STATUS OUT NUMBER,
    p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

    p_STATUS := GA.SUCCESS;

	IF INSTR(p_RESOURCE_ID, g_ALL) > 0 THEN
   OPEN p_CURSOR FOR
     SELECT g_ALL_STRING, -1 FROM DUAL
     UNION ALL
     SELECT a.STATEMENT_TYPE_NAME,
            a.STATEMENT_TYPE_ID
     FROM STATEMENT_TYPE a
     --WHERE LENGTH(TO_CHAR(a.STATEMENT_TYPE_ID)) = 1
     WHERE a.STATEMENT_TYPE_ALIAS IN ('Ex-Ante', 'Indicative', 'Initial', 'EA2', 'WD1')
			ORDER BY 1;
	ELSE
		OPEN p_CURSOR FOR
			SELECT g_ALL_STRING, -1 FROM DUAL;
	END IF;

END GET_IDT_CHG_SCHED_TYPE;
----------------------------------------------------------
PROCEDURE GET_IDT_SCHEDULE_AS_RUN_TYPE
	(
   p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN
   OPEN p_CURSOR FOR
     SELECT g_ALL_STRING AS STATEMENT_TYPE_NAME, 
            CONSTANTS.ALL_ID AS STATEMENT_TYPE_ID
     FROM DUAL
     UNION ALL
     SELECT *
     FROM (SELECT ESI.EXTERNAL_IDENTIFIER AS STATEMENT_TYPE_NAME,
              ST.STATEMENT_TYPE_ID
       FROM STATEMENT_TYPE ST,
            EXTERNAL_SYSTEM_IDENTIFIER ESI
       WHERE ESI.EXTERNAL_SYSTEM_ID = EC.ES_SEM
             AND ESI.ENTITY_DOMAIN_ID = EC.ED_STATEMENT_TYPE
             AND ESI.ENTITY_ID = ST.STATEMENT_TYPE_ID
             AND ESI.IDENTIFIER_TYPE = MM_SEM_UTIL.g_STATEMENT_TYPE_RUN_TYPE
       ORDER BY STATEMENT_TYPE_ORDER);
END GET_IDT_SCHEDULE_AS_RUN_TYPE;
----------------------------------------------------------
PROCEDURE GET_GATE_WINDOW_TYPE
	(
  p_INCLUDE_ALL IN NUMBER,
  p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN

   OPEN p_CURSOR FOR
      SELECT  CONSTANTS.ALL_STRING  AS GATE_WINDOW_NAME,
              CONSTANTS.ALL_ID      AS GATE_WINDOW_ID,
              CONSTANTS.ALL_ID      AS STATEMENT_TYPE_ORDER
	    FROM DUAL
      WHERE NVL(p_INCLUDE_ALL,1) = 1

	  UNION ALL

			SELECT  I.EXTERNAL_IDENTIFIER AS GATE_WINDOW_NAME,
			        S.STATEMENT_TYPE_ID   AS GATE_WINDOW_ID,
              S.STATEMENT_TYPE_ORDER AS STATEMENT_TYPE_ORDER
      FROM  STATEMENT_TYPE S,
            EXTERNAL_SYSTEM_IDENTIFIER I
      WHERE I.ENTITY_ID = S.STATEMENT_TYPE_ID
      AND   I.IDENTIFIER_TYPE = MM_SEM_UTIL.g_STATEMENT_TYPE_GATE_WINDOW
      AND   I.ENTITY_DOMAIN_ID = EC.ED_STATEMENT_TYPE
      AND   I.EXTERNAL_SYSTEM_ID = EC.ES_SEM
      ORDER BY STATEMENT_TYPE_ORDER;
END GET_GATE_WINDOW_TYPE;
----------------------------------------------------------
PROCEDURE GET_GATE_WINDOW_TYPE_OFF_CAP
	(
  p_INCLUDE_ALL IN NUMBER,
  p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN

   OPEN p_CURSOR FOR
      SELECT  CONSTANTS.ALL_STRING  AS GATE_WINDOW_NAME,
              CONSTANTS.ALL_ID      AS GATE_WINDOW_ID,
              CONSTANTS.ALL_ID      AS STATEMENT_TYPE_ORDER
	    FROM DUAL
      WHERE NVL(p_INCLUDE_ALL,1) = 1

	 UNION ALL

	 SELECT  I.EXTERNAL_IDENTIFIER AS GATE_WINDOW_NAME,
			        S.STATEMENT_TYPE_ID   AS GATE_WINDOW_ID,
              S.STATEMENT_TYPE_ORDER AS STATEMENT_TYPE_ORDER
      FROM  STATEMENT_TYPE S,
            EXTERNAL_SYSTEM_IDENTIFIER I
      WHERE I.ENTITY_ID = S.STATEMENT_TYPE_ID
      AND   I.IDENTIFIER_TYPE = MM_SEM_UTIL.g_STATEMENT_TYPE_GATE_WINDOW
      AND   I.ENTITY_DOMAIN_ID = EC.ED_STATEMENT_TYPE
      AND   I.EXTERNAL_SYSTEM_ID = EC.ES_SEM
	  AND 	I.EXTERNAL_IDENTIFIER LIKE 'EA%'
      ORDER BY STATEMENT_TYPE_ORDER;
	  
END GET_GATE_WINDOW_TYPE_OFF_CAP;	  
----------------------------------------------------------
PROCEDURE GET_GEN_IT_TRAIT_OFFER
	(
  p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

    OPEN p_CURSOR FOR
	SELECT  CONSTANTS.ALL_STRING  AS GENERATOR_NAME,
              CONSTANTS.ALL_ID      AS GENERATOR_ID
      FROM DUAL
    UNION ALL
	SELECT  DISTINCT  ESI.EXTERNAL_IDENTIFIER AS GENERATOR_NAME,
                  SVC.SERVICE_POINT_ID    AS GENERATOR_ID
      FROM    SERVICE_POINT SVC,
              INTERCHANGE_TRANSACTION IT,
              SCHEDULE_COORDINATOR SC,
              INTERCHANGE_CONTRACT IC,
              IT_COMMODITY ITC,
              EXTERNAL_SYSTEM_IDENTIFIER ESI
      WHERE   SVC.SERVICE_POINT_ID = IT.POD_ID
        AND   IT.IS_BID_OFFER = 1
        AND   IT.TRANSACTION_TYPE = MM_SEM_UTIL.c_TXN_TYPE_GENERATION
        AND   (IT.AGREEMENT_TYPE IS NOT NULL AND IT.AGREEMENT_TYPE <> CONSTANTS.UNDEFINED_ATTRIBUTE)
        AND   IT.SC_ID = SC.SC_ID
        AND   SC.SC_NAME = 'SEM'
        AND   IT.COMMODITY_ID = ITC.COMMODITY_ID
        AND   ITC.COMMODITY_ALIAS = MM_SEM_UTIL.c_COMMODITY_ENERGY
        AND   IT.TRANSACTION_INTERVAL = DATE_UTIL.c_NAME_30MIN
        AND   EXISTS(SELECT NULL
                    FROM EXTERNAL_SYSTEM_IDENTIFIER E
                    WHERE IC.CONTRACT_ID = E.ENTITY_ID
                    AND E.EXTERNAL_SYSTEM_ID = EC.ES_SEM
                    AND E.ENTITY_DOMAIN_ID = EC.ED_INTERCHANGE_CONTRACT
                    AND E.EXTERNAL_IDENTIFIER IS NOT NULL)
        AND   SVC.SERVICE_POINT_ID = ESI.ENTITY_ID
        AND   ESI.ENTITY_DOMAIN_ID = EC.ED_SERVICE_POINT
        AND   ESI.EXTERNAL_SYSTEM_ID = EC.ES_SEM
		AND	  ESI.EXTERNAL_IDENTIFIER LIKE 'GU_%'
      ORDER BY 1;
END GET_GEN_IT_TRAIT_OFFER;
----------------------------------------------------------
PROCEDURE GET_IU_IT_TRAIT_OFFER
	(
  p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN

    OPEN p_CURSOR FOR
	SELECT  CONSTANTS.ALL_STRING  AS INTERCONNECTOR_NAME,
              CONSTANTS.ALL_ID      AS INTERCONNECTOR_IDS
      FROM DUAL
    UNION ALL
	SELECT  DISTINCT  (ESI_IC.EXTERNAL_IDENTIFIER || ' : ' || ESI_POD.EXTERNAL_IDENTIFIER) AS INTERCONNECTOR_NAME,
                  SVC.SERVICE_POINT_ID    AS INTERCONNECTOR_IDS
      FROM    SERVICE_POINT SVC,
              INTERCHANGE_TRANSACTION IT,
              SCHEDULE_COORDINATOR SC,
              INTERCHANGE_CONTRACT IC,
              IT_COMMODITY ITC,
              EXTERNAL_SYSTEM_IDENTIFIER ESI_POD,
			  EXTERNAL_SYSTEM_IDENTIFIER ESI_IC
      WHERE   SVC.SERVICE_POINT_ID = IT.POD_ID
        AND   IT.IS_BID_OFFER = 1
        AND   IT.TRANSACTION_TYPE = MM_SEM_UTIL.c_TXN_TYPE_NOMINATION
        AND   (IT.AGREEMENT_TYPE IS NOT NULL AND IT.AGREEMENT_TYPE <> CONSTANTS.UNDEFINED_ATTRIBUTE)
        AND   IT.SC_ID = SC.SC_ID
        AND   SC.SC_NAME = 'SEM'
        AND   IT.COMMODITY_ID = ITC.COMMODITY_ID
        AND   ITC.COMMODITY_ALIAS = MM_SEM_UTIL.c_COMMODITY_ENERGY
        AND   IT.TRANSACTION_INTERVAL = DATE_UTIL.c_NAME_30MIN
		AND   IC.CONTRACT_ID = IT.CONTRACT_ID
        AND   IC.CONTRACT_ID = ESI_IC.ENTITY_ID
		AND	  ESI_IC.EXTERNAL_SYSTEM_ID = EC.ES_SEM
		AND	  ESI_IC.ENTITY_DOMAIN_ID = EC.ED_INTERCHANGE_CONTRACT
		AND	  ESI_IC.EXTERNAL_IDENTIFIER IS NOT NULL
        AND   SVC.SERVICE_POINT_ID = ESI_POD.ENTITY_ID
        AND   ESI_POD.ENTITY_DOMAIN_ID = EC.ED_SERVICE_POINT
        AND   ESI_POD.EXTERNAL_SYSTEM_ID = EC.ES_SEM
		AND	  ESI_POD.EXTERNAL_IDENTIFIER LIKE 'I_%'
      ORDER BY 1;
END GET_IU_IT_TRAIT_OFFER;
----------------------------------------------------------
PROCEDURE GET_PSE
	(
	p_STATUS OUT NUMBER,
    p_CURSOR IN OUT REF_CURSOR
	) AS

BEGIN
    p_STATUS := GA.SUCCESS;

    OPEN p_CURSOR FOR
		SELECT g_ALL_STRING, -1 FROM DUAL
		UNION ALL
		SELECT * FROM
			(SELECT DISTINCT P.PSE_NAME, P.PSE_ID
			FROM PURCHASING_SELLING_ENTITY P
			WHERE P.PSE_ID > 0
			ORDER BY 1);

END GET_PSE;
----------------------------------------------------------
PROCEDURE GET_PSE_IC_NOMS(p_STATUS OUT NUMBER, p_CURSOR IN OUT REF_CURSOR) AS

BEGIN
	p_STATUS := GA.SUCCESS;

	OPEN p_CURSOR FOR
		SELECT g_ALL_STRING, g_ALL
		FROM DUAL
		UNION ALL
		SELECT *
		FROM (SELECT PSE.PSE_NAME, PSE.PSE_ID
			  FROM PSE, (SELECT DISTINCT PSE_ID FROM SEM_IC_NOMINATIONS) A
			  WHERE PSE.PSE_ID = A.PSE_ID
			  ORDER BY PSE.PSE_NAME);

END GET_PSE_IC_NOMS;
----------------------------------------------------------
PROCEDURE GP_VARIABLE_TYPES
	(
	p_REPORT_TYPE IN VARCHAR2,
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
		SELECT g_ALL_STRING FROM DUAL
		UNION ALL
		SELECT VARIABLE_TYPE
			FROM SEM_GP_SETTLEMENT_SUMM_VAR
			WHERE (REPORT_TYPE = p_REPORT_TYPE OR UPPER(p_REPORT_TYPE) = 'SUMMARY')
			ORDER BY 1;
END GP_VARIABLE_TYPES;
----------------------------------------------------------
PROCEDURE GP_RESOURCE_NAMES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
		SELECT g_ALL_STRING FROM DUAL
		UNION ALL
		SELECT RESOURCE_NAME
			FROM SEM_GP_SETTLEMENT_SUMM_RES
			ORDER BY 1;
END GP_RESOURCE_NAMES;
----------------------------------------------------------
PROCEDURE SETTLEMENT_REPORT_TYPES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
		SELECT g_ALL_STRING FROM DUAL
		UNION ALL
		SELECT CODE FROM
	  (SELECT CASE CODE WHEN 'INV' THEN 'Invoice' WHEN 'STMNT' THEN 'Statement' ELSE CODE END CODE
	  FROM SYSTEM_LABEL S
	  WHERE S.MODEL_ID = 0
		  AND UPPER(S.KEY1) = UPPER('SEM')
		  AND UPPER(S.KEY2) = UPPER('Settlement')
		  AND UPPER(S.KEY3) = UPPER('Reports Map')
		  AND UPPER(S.MODULE) = UPPER('MarketExchange')
	  ORDER BY S.POSITION);
END SETTLEMENT_REPORT_TYPES;
----------------------------------------------------------
PROCEDURE SETTLEMENT_MARKET_TYPES
	(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
	) AS
BEGIN
	p_STATUS := GA.SUCCESS;
	OPEN p_CURSOR FOR
		SELECT g_ALL_STRING FROM DUAL
		UNION ALL
	  SELECT S.SETTING_NAME
	  FROM SYSTEM_DICTIONARY S
	  WHERE S.MODEL_ID = 0
		  AND UPPER(S.KEY1) = UPPER('SEM')
		  AND UPPER(S.KEY2) = UPPER('Settlement')
		  AND UPPER(S.KEY3) = UPPER('Invoice Markets')
		  AND UPPER(S.MODULE) = UPPER('MarketExchange')
	  ORDER BY 1;
END SETTLEMENT_MARKET_TYPES;
----------------------------------------------------------
PROCEDURE STATEMENT_IDENTIFIERS(p_GET_PIR_ONLY IN NUMBER,
								p_STATUS OUT NUMBER,
								p_CURSOR IN OUT REF_CURSOR) AS
	v_REGEXP VARCHAR2(32);
BEGIN
	p_STATUS := GA.SUCCESS;
	v_REGEXP := '^F\([0-9]+\)'; -- this picks up all the F(n) statement types
	IF p_GET_PIR_ONLY = 0 THEN
		v_REGEXP := '^P$|^F$|' || v_REGEXP; -- this adds in the P and F statement types
	END IF;
	v_REGEXP := '(' || v_REGEXP || ')'; -- make sure we enclose everything in parens

	IF p_GET_PIR_ONLY = 0 THEN
		-- get all the statement identifiers
		OPEN p_CURSOR FOR
			SELECT g_ALL_STRING, g_ALL
			FROM DUAL
			UNION ALL
			SELECT EXTERNAL_IDENTIFIER, STATEMENT_TYPE_ID FROM
			(
				SELECT EXTERNAL_IDENTIFIER, STATEMENT_TYPE_ID
				FROM EXTERNAL_SYSTEM_IDENTIFIER, STATEMENT_TYPE
				WHERE EXTERNAL_SYSTEM_ID = EC.ES_SEM
				AND ENTITY_DOMAIN_ID = EC.ED_STATEMENT_TYPE
				AND IDENTIFIER_TYPE = MM_SEM_UTIL.g_STATEMENT_TYPE_SETTLEMENT
				AND REGEXP_LIKE(EXTERNAL_IDENTIFIER, v_REGEXP)
				AND EXTERNAL_SYSTEM_IDENTIFIER.ENTITY_ID = STATEMENT_TYPE.STATEMENT_TYPE_ID
				ORDER BY STATEMENT_TYPE_ORDER
			);
	ELSE
		-- just get the revision identifiers
		OPEN p_CURSOR FOR
			SELECT 'N/A'
			FROM DUAL
			UNION ALL
			SELECT EXTERNAL_IDENTIFIER FROM
			(
				SELECT EXTERNAL_IDENTIFIER
				FROM EXTERNAL_SYSTEM_IDENTIFIER, STATEMENT_TYPE
				WHERE EXTERNAL_SYSTEM_ID = EC.ES_SEM
				AND ENTITY_DOMAIN_ID = EC.ED_STATEMENT_TYPE
				AND IDENTIFIER_TYPE = MM_SEM_UTIL.g_STATEMENT_TYPE_SETTLEMENT
				AND REGEXP_LIKE(EXTERNAL_IDENTIFIER, v_REGEXP)
				AND EXTERNAL_SYSTEM_IDENTIFIER.ENTITY_ID = STATEMENT_TYPE.STATEMENT_TYPE_ID
				ORDER BY STATEMENT_TYPE_ORDER
			);
	END IF;
END STATEMENT_IDENTIFIERS;
----------------------------------------------------------
PROCEDURE INTERCONNECTOR_DETAILS_GET_PSE
(
	p_STATUS OUT NUMBER,
	p_CURSOR IN OUT REF_CURSOR
) AS

BEGIN
	p_STATUS := GA.SUCCESS;
OPEN p_CURSOR FOR
	SELECT g_ALL_STRING, -1 FROM DUAL
	UNION ALL
	SELECT * FROM
		(SELECT DISTINCT P.PSE_NAME, P.PSE_ID
		FROM PURCHASING_SELLING_ENTITY P, SEM_IC_DATA B
		WHERE P.PSE_ID > 0
		AND P.PSE_ID = B.PSE_ID
		ORDER BY 1);

END INTERCONNECTOR_DETAILS_GET_PSE;
---------------------------------------------------------------------------------
END SEM_REPORTS_UTIL;
/
