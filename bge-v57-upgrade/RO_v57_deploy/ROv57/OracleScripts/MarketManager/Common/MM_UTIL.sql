CREATE OR REPLACE PACKAGE MM_UTIL AS

--Market Manager Utility package
--These procedures are called by other MarketManager procedures, but not by the GUI.
--This package should not reference other MarketManager packages.

TYPE REF_CURSOR IS REF CURSOR;

PROCEDURE APPEND_UNTIL_FINISHED_CLOB
	(
	p_RECORD_DELIMITER IN CHAR,
	p_RECORDS IN VARCHAR,
	p_FILE_PATH IN VARCHAR,
	p_LAST_TIME IN NUMBER,
	p_CLOB_LOC OUT NOCOPY CLOB
	);

PROCEDURE PURGE_CLOB_STAGING_TABLE;

PROCEDURE APPEND_UNTIL_FINISHED_XML
	(
	p_RECORD_DELIMITER IN CHAR,
	p_RECORDS IN VARCHAR,
	p_FILE_PATH IN VARCHAR,
	p_LAST_TIME IN NUMBER,
	p_XML OUT XMLTYPE
	);

PROCEDURE PUT_TRANSACTION
	(
	o_OID OUT NUMBER,
	p_INTERCHANGE_TRANSACTION INTERCHANGE_TRANSACTION%ROWTYPE,
	p_SCHEDULE_STATE IN NUMBER,
	p_TRANSACTION_STATUS IN VARCHAR2 --JUST PASS NULL FOR EXTERNAL (WILL BE IGNORED)
	);

PROCEDURE PUT_MARKET_PRICE_VALUE
	(
	p_MARKET_PRICE_ID IN NUMBER,
	p_PRICE_DATE      IN DATE,
	p_PRICE_CODE      IN CHAR,
	p_PRICE           IN NUMBER,
	p_PRICE_BASIS     IN NUMBER,
	p_STATUS          OUT NUMBER,
	p_ERROR_MESSAGE   OUT VARCHAR2
	);

PROCEDURE POST_UNCONFIRMED_SCHED_ALARM(p_MARKET IN VARCHAR2, p_TRANSACTION_ID IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE, p_DATE IN DATE);

PROCEDURE POST_PART_CLEARED_DEMAND_ALERT
	(
	p_TXN_ID      IN INTERCHANGE_TRANSACTION.TRANSACTION_ID%TYPE,
	p_MAX_BID_QTY IN NUMBER,
	p_CLEARED_QTY IN NUMBER,
	p_MARKET_NAME IN VARCHAR2
	);

FUNCTION GET_MAX_PS_DEMAND
	(
	p_TXN_ID IN NUMBER,
	p_SCHEDULE_DATE IN DATE
	) RETURN NUMBER;

FUNCTION GET_LOGGER
	(
	p_EXTERNAL_SYSTEM_ID IN NUMBER,
	p_EXTERNAL_ACCOUNT_NAME IN VARCHAR2,
	p_PROCESS_NAME IN VARCHAR2,
	p_EXCHANGE_NAME IN VARCHAR2,
	p_LOG_TYPE IN NUMBER,
	p_TRACE_ON IN NUMBER
	) RETURN MM_LOGGER_ADAPTER;

PROCEDURE INIT_MEX
	(
	p_EXTERNAL_SYSTEM_ID IN NUMBER,
	p_EXTERNAL_ACCOUNT_NAME IN VARCHAR2,
	p_PROCESS_NAME IN VARCHAR2,
	p_EXCHANGE_NAME IN VARCHAR2,
	p_LOG_TYPE IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_CREDENTIALS OUT MEX_CREDENTIALS,
	p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER,
	p_IS_PUBLIC	IN BOOLEAN := FALSE
	);

PROCEDURE INIT_MEX
	(
	p_EXTERNAL_SYSTEM_ID IN NUMBER,
	p_PROCESS_NAME IN VARCHAR2,
	p_EXCHANGE_NAME IN VARCHAR2,
	p_LOG_TYPE IN NUMBER,
	p_TRACE_ON IN NUMBER,
	p_CREDENTIALS OUT MM_CREDENTIALS_SET,
	p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER,
	p_IS_PUBLIC	IN BOOLEAN := FALSE
	);

FUNCTION GET_EXT_ACCOUNT_FOR_TXN
	(
	p_TRANSACTION_ID IN NUMBER,
	p_EXTERNAL_SYSTEM_ID IN NUMBER
	) RETURN VARCHAR2;

PROCEDURE START_EXCHANGE
	(
	p_IS_IMPORT IN BOOLEAN,
	p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER
	);

PROCEDURE STOP_EXCHANGE
	(
	p_LOGGER IN OUT NOCOPY MM_LOGGER_ADAPTER,
	p_IN_STATUS IN NUMBER,
	p_IN_MESSAGE IN VARCHAR2,
	p_RETURN_MESSAGE OUT VARCHAR2
	);
	
FUNCTION DETERMINE_STATEMENT_TYPE
	(
	   p_REPORT_STATEMENT_TYPE IN VARCHAR2,
       p_VERSION_NUMBER IN VARCHAR,
	   p_EXTERNAL_SYSTEM_ID IN NUMBER,
	   p_EXTERNAL_SYS_IDENTIFIER_TYPE IN VARCHAR2 := EI.g_DEFAULT_IDENTIFIER_TYPE,
	   p_STATEMENT_TYPE_NAME_PREFIX IN VARCHAR2 := NULL
	) RETURN NUMBER;

--Bilateral Contract Statuses
g_BILAT_REQUIRES_APPROVAL CONSTANT VARCHAR2(16) := 'Requires Apvl';
g_BILAT_APPROVED CONSTANT VARCHAR2(16) := 'Approved';
g_BILAT_PENDING_CP_APPROVAL CONSTANT VARCHAR2(16) := 'Pending CP Apvl';
g_BILAT_REJECTED CONSTANT VARCHAR2(16) := 'Rejected';

g_UNCONFIRMED_BILAT_SCHEDULE CONSTANT VARCHAR2(32) := 'Unconfirmed Bilateral Schedule';

g_ALERT_PRIORITY CONSTANT VARCHAR2(16) := '3';

END MM_UTIL;
/