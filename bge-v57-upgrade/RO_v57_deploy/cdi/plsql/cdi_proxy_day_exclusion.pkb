CREATE OR REPLACE PACKAGE BODY CDI_PROXY_DAY_EXCLUSION AS

c_IMP_PROXY_DAY_EXCLUDE_FILE   CONSTANT VARCHAR2(64) := 'CDI: Import Proxy Day Exclusion File';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'MM/DD/YYYY';
c_COMMA                        CONSTANT CHAR(1)      := ',';

PROCEDURE GET_PROXY_DAY_EXCLUSIONS
   (
   p_SEARCH_BY     IN VARCHAR2,
   p_SEARCH_STRING IN VARCHAR2,
   p_BEGIN_DATE    IN DATE,
   p_END_DATE      IN DATE,
   p_CURSOR       OUT GA.REFCURSOR
   ) AS
v_SEARCH_STRING VARCHAR2(2000);
BEGIN
   IF p_SEARCH_STRING IS NULL THEN
    v_SEARCH_STRING := '%';
   ELSE
    v_SEARCH_STRING := p_SEARCH_STRING || '%';
   END IF;
   OPEN p_CURSOR FOR
      SELECT (CASE WHEN PDE.ACCOUNT_ID = 0 THEN 1 ELSE 2 END) AS SORT_ORDER, -- SORT ALL ACCOUNT ENTRIES FIRST
         (CASE WHEN PDE.ACCOUNT_ID = 0 THEN 1 ELSE 0 END) AS ALL_ACCOUNTS, -- RETURN CHECK BOX CHECKED FOR ALL ACCOUNTS
         PDE.ACCOUNT_ID, 
         (CASE WHEN PDE.ACCOUNT_ID = 0 THEN NULL ELSE ACCOUNT_NAME END) AS ACCOUNT_NAME, -- NULL ACCOUNT NAME FIELD FOR ALL ACCOUNTS
         (CASE WHEN PDE.ACCOUNT_ID = 0 THEN NULL ELSE ACCOUNT_EXTERNAL_IDENTIFIER END) AS ACCOUNT_EXTERNAL_IDENTIFIER, 
         BEGIN_DATE AS EXCLUSION_BEGIN_DATE, 
         END_DATE AS EXCLUSION_END_DATE, 
         BEGIN_DATE AS OLD_START,
         USER_COMMENT AS NOTE,
         PDE.ENTRY_DATE
     FROM PROXY_DAY_EXCLUSION PDE, ACCOUNT A
     WHERE PDE.ACCOUNT_ID = A.ACCOUNT_ID
        AND ((p_SEARCH_BY = 'Account Name' AND A.ACCOUNT_NAME LIKE v_SEARCH_STRING) OR (p_SEARCH_BY = 'External Id' AND A.ACCOUNT_EXTERNAL_IDENTIFIER LIKE v_SEARCH_STRING))
        AND BEGIN_DATE <= p_END_DATE
        AND NVL(END_DATE,BEGIN_DATE) >= p_BEGIN_DATE
     ORDER BY SORT_ORDER, ACCOUNT_NAME, BEGIN_DATE, END_DATE;
END GET_PROXY_DAY_EXCLUSIONS;

PROCEDURE PUT_PROXY_DAY_EXCLUSION
   (
   p_ALL_ACCOUNTS                IN NUMBER,
   p_ACCOUNT_ID                  IN ACCOUNT.ACCOUNT_ID%TYPE,
   p_ACCOUNT_NAME                IN ACCOUNT.ACCOUNT_NAME%TYPE,
   p_ACCOUNT_EXTERNAL_IDENTIFIER IN ACCOUNT.ACCOUNT_EXTERNAL_IDENTIFIER%TYPE,
   p_EXCLUSION_BEGIN_DATE        IN DATE,
   p_EXCLUSION_END_DATE          IN DATE,
   p_NOTE                        IN PROXY_DAY_EXCLUSION.USER_COMMENT%TYPE,
   p_OLD_START                   IN DATE,
   p_STATUS                     OUT NUMBER,
   p_MESSAGE                    OUT VARCHAR2
   ) AS
v_ACCOUNT_ID ACCOUNT.ACCOUNT_ID%TYPE;
v_IDENTIFIER_FIELD VARCHAR2(32);
v_IDENTIFIER ACCOUNT.ACCOUNT_NAME%TYPE;
v_OLD_BEGIN_DATE DATE;
BEGIN
    IF p_ACCOUNT_ID IS NULL THEN -- NEW ENTRY
       IF p_ALL_ACCOUNTS = 1 THEN -- CHECK IF ALL CHECK BOX IS SET AND SET ACCT ID TO 0
          v_ACCOUNT_ID := 0;
       ELSE -- LOOK UP ACCOUNT ID BASED ON NAME OR ACCT EXTERNAL ID
          BEGIN
            SELECT ACCOUNT_ID INTO v_ACCOUNT_ID FROM ACCOUNT WHERE (ACCOUNT_NAME = p_ACCOUNT_NAME OR ACCOUNT_EXTERNAL_IDENTIFIER = p_ACCOUNT_EXTERNAL_IDENTIFIER);
          EXCEPTION
             WHEN NO_DATA_FOUND THEN -- RAISE ERROR IS NO ACCOUNT FOUND       
                IF p_ACCOUNT_NAME IS NULL THEN
                   v_IDENTIFIER_FIELD := 'external id';
                   v_IDENTIFIER := p_ACCOUNT_EXTERNAL_IDENTIFIER;
                ELSE
                   v_IDENTIFIER_FIELD := 'name';
                   v_IDENTIFIER := p_ACCOUNT_NAME;
                END IF;          
                p_STATUS := GA.NO_DATA_FOUND;
                p_MESSAGE := 'No account found with ' || v_IDENTIFIER_FIELD || ' : '|| v_IDENTIFIER;
             WHEN TOO_MANY_ROWS THEN
                p_STATUS := GA.NO_DATA_FOUND;
                p_MESSAGE := 'Account Name and External Id do not match for ' || p_ACCOUNT_NAME || ' and '|| p_ACCOUNT_EXTERNAL_IDENTIFIER;
          END;
       END IF; 
       v_OLD_BEGIN_DATE := p_EXCLUSION_BEGIN_DATE; -- SET OLD BEGIN/END DATE FOR NEW RECORD TO SUPPORT INSERT UPDATE 
    ELSE
       v_ACCOUNT_ID := p_ACCOUNT_ID;
    END IF;
    
   IF v_ACCOUNT_ID IS NOT NULL THEN  -- ACCT ID WILL BE NULL IF NO ACCOUNT FOUND FOR USER SPECIFIED NAME OR EXT ID
      BEGIN
         INSERT INTO PROXY_DAY_EXCLUSION (ACCOUNT_ID, BEGIN_DATE, END_DATE, USER_COMMENT, ENTRY_DATE)
         VALUES (v_ACCOUNT_ID, p_EXCLUSION_BEGIN_DATE, p_EXCLUSION_END_DATE, p_NOTE, SYSDATE);
      EXCEPTION   
         WHEN DUP_VAL_ON_INDEX THEN
            UPDATE PROXY_DAY_EXCLUSION SET END_DATE = p_EXCLUSION_END_DATE, USER_COMMENT = p_NOTE, ENTRY_DATE = SYSDATE
         WHERE ACCOUNT_ID = v_ACCOUNT_ID
            AND BEGIN_DATE = p_EXCLUSION_BEGIN_DATE;       
      END; 
      COMMIT;
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      p_STATUS := SQLCODE;
      p_MESSAGE := SQLERRM;
END PUT_PROXY_DAY_EXCLUSION;

PROCEDURE DELETE_PROXY_DAY_EXCLUSION
   (
   p_ACCOUNT_ID        IN ACCOUNT.ACCOUNT_ID%TYPE,
   p_ACCOUNT_NAME      IN ACCOUNT.ACCOUNT_NAME%TYPE,
   p_EXCLUSION_BEGIN_DATE IN DATE,
   p_EXCLUSION_END_DATE   IN DATE,
   p_STATUS           OUT NUMBER,
   p_MESSAGE          OUT VARCHAR2
   ) AS
BEGIN
    DELETE FROM PROXY_DAY_EXCLUSION WHERE
    ACCOUNT_ID = p_ACCOUNT_ID AND
    BEGIN_DATE = p_EXCLUSION_BEGIN_DATE;
    COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_STATUS := SQLCODE;
      p_MESSAGE := SQLERRM;
END DELETE_PROXY_DAY_EXCLUSION;   

PROCEDURE IMPORT_PROXY_DAY_EXCLUDE_FILE
   (
   p_IMPORT_FILE      IN CLOB,
   p_IMPORT_FILE_PATH IN VARCHAR2,
   p_STATUS          OUT NUMBER,
   p_MESSAGE         OUT VARCHAR2
   ) AS
v_DATE_STRING   VARCHAR2(32);
v_ACCOUNT_NAME  VARCHAR2(128);
v_ACCOUNT_ID    PLS_INTEGER;   
v_VALID_COUNT   PLS_INTEGER := 0;
v_INVALID_COUNT PLS_INTEGER := 0;
v_ERROR_COUNT   PLS_INTEGER := 0;
v_DATE DATE;
v_CONTAINER PARSE_UTIL.BIG_STRING_TABLE_MP;
v_TOKENS    PARSE_UTIL.STRING_TABLE;
v_PROXY_DAY_EXCLUSION PROXY_DAY_EXCLUSION%ROWTYPE;
   FUNCTION TO_DATE_FROM_STRING(p_DATE_STRING IN VARCHAR2) RETURN DATE AS
   BEGIN
      RETURN TO_DATE(p_DATE_STRING, c_DATE_FORMAT);
   EXCEPTION
      WHEN OTHERS THEN
         RETURN NULL;
   END TO_DATE_FROM_STRING;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_IMP_PROXY_DAY_EXCLUDE_FILE);
   p_MESSAGE := '';
   p_STATUS := 0;
-- Parse The File Into Records --   
   PARSE_UTIL.PARSE_CLOB_INTO_LINES(p_IMPORT_FILE, v_CONTAINER);
   LOGS.LOG_INFO('Number Of Input Records: ' || TO_CHAR(v_CONTAINER.COUNT));
-- Process Each Line --
   FOR v_INDEX IN v_CONTAINER.FIRST..v_CONTAINER.LAST LOOP
      PARSE_UTIL.PARSE_DELIMITED_STRING(v_CONTAINER(v_INDEX), c_COMMA, v_TOKENS);
      IF v_TOKENS.COUNT = 4 THEN
         v_ERROR_COUNT := 0;
         v_ACCOUNT_NAME := TRIM(v_TOKENS(1));
         IF INITCAP(v_ACCOUNT_NAME) = CONSTANTS.ALL_STRING THEN
            v_PROXY_DAY_EXCLUSION.ACCOUNT_ID := CONSTANTS.NOT_ASSIGNED;
         ELSE
            SELECT MAX(ACCOUNT_ID) INTO v_ACCOUNT_ID FROM ACCOUNT WHERE ACCOUNT_NAME = v_ACCOUNT_NAME;
            IF v_ACCOUNT_ID IS NULL THEN
               LOGS.LOG_ERROR('Account "' || v_ACCOUNT_NAME || '" Is Not Defined.');
               v_ERROR_COUNT := v_ERROR_COUNT + 1;
            ELSE
               v_PROXY_DAY_EXCLUSION.ACCOUNT_ID := v_ACCOUNT_ID;
            END IF;
         END IF;
         v_DATE_STRING := TRIM(v_TOKENS(2));
         v_DATE := TO_DATE_FROM_STRING(v_DATE_STRING);
         IF v_DATE IS NULL THEN
            LOGS.LOG_ERROR('Invalid Begin Date Format: ' || v_DATE_STRING);
            v_ERROR_COUNT := v_ERROR_COUNT + 1;
         ELSE
            v_PROXY_DAY_EXCLUSION.BEGIN_DATE := v_DATE;
         END IF;
         v_DATE_STRING := TRIM(v_TOKENS(3));
         IF v_DATE_STRING IS NOT NULL THEN
            v_DATE := TO_DATE_FROM_STRING(v_DATE_STRING);
            IF v_DATE IS NULL THEN
               LOGS.LOG_ERROR('Invalid End Date Format: ' || v_DATE_STRING);
               v_ERROR_COUNT := v_ERROR_COUNT + 1;
            ELSE
               v_PROXY_DAY_EXCLUSION.END_DATE := v_DATE;
            END IF;
         ELSE
            v_PROXY_DAY_EXCLUSION.END_DATE := NULL;
         END IF;
         v_PROXY_DAY_EXCLUSION.USER_COMMENT := TRIM(v_TOKENS(4));
         v_PROXY_DAY_EXCLUSION.ENTRY_DATE := CURRENT_DATE;
         IF v_ERROR_COUNT = 0 THEN
            INSERT INTO PROXY_DAY_EXCLUSION VALUES v_PROXY_DAY_EXCLUSION;
            v_VALID_COUNT := v_VALID_COUNT + 1;
         ELSE   
            v_INVALID_COUNT := v_INVALID_COUNT + 1;
         END IF;
      ELSE
         LOGS.LOG_ERROR('Invalid Field Count For Record: ' || v_CONTAINER(v_INDEX));
         v_INVALID_COUNT := v_INVALID_COUNT + 1;
      END IF;
   END LOOP;
   p_MESSAGE := 'Valid Records In File: ' || TO_CHAR(v_VALID_COUNT) || ', Invalid Records In File: ' || TO_CHAR(v_INVALID_COUNT);
   LOGS.LOG_INFO(p_MESSAGE);
-- Stop The Process Log --
   LOGS.LOG_INFO(c_IMP_PROXY_DAY_EXCLUDE_FILE || ' Complete.');
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ERRS.ABORT_PROCESS;
END IMPORT_PROXY_DAY_EXCLUDE_FILE;

END CDI_PROXY_DAY_EXCLUSION;
/
