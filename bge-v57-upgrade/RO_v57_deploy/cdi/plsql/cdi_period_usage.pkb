CREATE OR REPLACE PACKAGE BODY CDI_PERIOD_USAGE AS

c_PACKAGE_NAME                 CONSTANT VARCHAR2(32) := 'CDI_PERIOD_USAGE';
c_IMPORT_PERIOD_USAGE          CONSTANT VARCHAR2(32) := 'CDI: Import Period Usage';
c_LOAD_PERIOD_USAGE            CONSTANT VARCHAR2(32) := 'CDI: Load Period Usage';
c_LOAD_PERIOD_USAGE_FILE       CONSTANT VARCHAR2(32) := 'CDI: Load Period Usage File';
c_LOAD_PERIOD_USAGE_CORRECTED  CONSTANT VARCHAR2(32) := 'CDI: Load Period Usage Corrected';
c_DELETE_CANCELS_AFTER_CLOSE   CONSTANT VARCHAR2(32) := 'CDI: Delete Cancels After Close';
c_REPOST_USAGE_FACTOR          CONSTANT VARCHAR2(32) := 'CDI: Repost Usage Factor';
c_POST_MODE                    CONSTANT VARCHAR2(16) := 'Post';
c_REPOST_MODE                  CONSTANT VARCHAR2(16) := 'Repost';
c_TIMESTAMP_FORMAT             CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH24:MI:SS.FF';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'MM/DD/YYYY';
c_USAGE_DATE_FORMAT            CONSTANT VARCHAR2(16) := 'DD-MON-YYYY';
c_ANYTIME_TEMPLATE_NAME        CONSTANT VARCHAR2(16) := 'Anytime';
c_ANYTIME_PERIOD_NAME          CONSTANT VARCHAR2(16) := 'Anytime';
c_PROFILE_TIME_ZONE            CONSTANT VARCHAR2(4)  := GA.CUT_TIME_ZONE; 
c_DEFAULT_PLC_BAND             CONSTANT CHAR(1)      := 'Z';
c_COMMA                        CONSTANT CHAR(1)      := ',';
c_ALL                          CONSTANT CHAR(3)      := 'ALL';
c_ANYTIME_TOU_TEMPLATE_ID      CONSTANT NUMBER(1)    := 5;
c_ANYTIME_TEMPLATE_ID          CONSTANT NUMBER(1)    := 1;
c_ANYTIME_PERIOD_ID            CONSTANT NUMBER(1)    := 1;
c_NO_USAGE_FACTOR              CONSTANT NUMBER(8,6)  := 0;
c_INVALID_USAGE_FACTOR         CONSTANT NUMBER(8,6)  := NULL;
c_FLASH_CALENDAR_CACHE         CONSTANT BOOLEAN      := TRUE;
c_DBMS_INFO_INIT               CONSTANT V$SESSION.ACTION%TYPE := 'Initializing';
c_DBMS_INFO_CLIENT             CONSTANT V$SESSION.CLIENT_INFO%TYPE := SUBSTR(SECURITY_CONTROLS.CURRENT_USER || '@' || SYS_CONTEXT('USERENV','HOST'), 1, 64);

PROCEDURE GATHER_TABLE_STATS(p_TABLE_NAME IN VARCHAR2) IS
BEGIN
   DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => USER, TABNAME => p_TABLE_NAME, ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, BLOCK_SAMPLE => TRUE, DEGREE => NULL, CASCADE => TRUE);
END GATHER_TABLE_STATS;

FUNCTION CAN_PROCESS_RUN RETURN BOOLEAN AS
v_PROCEDURE_NAME VARCHAR2(30) := 'CAN_PROCESS_RUN';
v_COUNT PLS_INTEGER;
BEGIN
-- Check To See If There Is A Background Job Or A Foreground Process Currently Running -- 
   SELECT COUNT(*) INTO v_COUNT FROM USER_SCHEDULER_RUNNING_JOBS WHERE JOB_NAME = c_IMPORT_PERIOD_USAGE;
   IF v_COUNT <> 0 THEN
      LOGS.LOG_ERROR('The Period Usage Filter Is Currently Executing In A Background Job', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      RETURN FALSE;
   END IF;
   SELECT COUNT(*) INTO v_COUNT FROM V$SESSION WHERE MODULE = c_IMPORT_PERIOD_USAGE;
   IF v_COUNT <> 0 THEN
      LOGS.LOG_ERROR('The Period Usage Filter Is Currently Executing In A Foreground Session', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      RETURN FALSE;
   END IF;
-- Post The Process To The Session --
   DBMS_APPLICATION_INFO.SET_MODULE(MODULE_NAME => c_IMPORT_PERIOD_USAGE, ACTION_NAME => c_DBMS_INFO_INIT);
   DBMS_APPLICATION_INFO.SET_CLIENT_INFO(CLIENT_INFO => c_DBMS_INFO_CLIENT);
   RETURN TRUE;
END CAN_PROCESS_RUN;

PROCEDURE REMOVE_DUPLICATE_RECORDS AS
v_PROCEDURE_NAME VARCHAR2(30) := 'REMOVE_DUPLICATE_RECORDS';
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   DELETE CDI_USAGE_STAGING X
   WHERE EXISTS
      (SELECT NULL
      FROM CDI_USAGE_STAGING S
      WHERE X.BILL_ACCOUNT                            = S.BILL_ACCOUNT
         AND X.SERVICE_POINT                          = S.SERVICE_POINT
         AND UPPER(NVL(TRIM(X.TIME_PERIOD),'X'))      = UPPER(NVL(TRIM(S.TIME_PERIOD),'X'))
         AND NVL(X.USAGE_KWH,0)                       = NVL(S.USAGE_KWH,0)
         AND NVL(X.DEMAND_KW ,0)                      = NVL(S.DEMAND_KW,0)
         AND X.BILL_CODE                              = S.BILL_CODE
         AND NVL(X.BGE_END_DATE, CONSTANTS.HIGH_DATE) = NVL(S.BGE_END_DATE, CONSTANTS.HIGH_DATE)
         AND NVL(X.BEGIN_DATE, CONSTANTS.HIGH_DATE)   = NVL(S.BEGIN_DATE, CONSTANTS.HIGH_DATE)
         AND NVL(X.END_DATE, CONSTANTS.HIGH_DATE)     = NVL(S.END_DATE, CONSTANTS.HIGH_DATE)
      )
         AND X.ROWID <>
            (SELECT MAX(ROWID)
            FROM CDI_USAGE_STAGING
            WHERE BILL_ACCOUNT                              = X.BILL_ACCOUNT
               AND SERVICE_POINT                            = X.SERVICE_POINT
               AND UPPER(NVL(TRIM(TIME_PERIOD),'X'))        = UPPER(NVL(TRIM(X.TIME_PERIOD),'X'))
               AND NVL(USAGE_KWH,0)                         = NVL(X.USAGE_KWH,0)
               AND NVL(DEMAND_KW ,0)                        = NVL(X.DEMAND_KW,0)
               AND BILL_CODE                                = X.BILL_CODE
               AND NVL(BGE_BEGIN_DATE, CONSTANTS.HIGH_DATE) = NVL(X.BGE_BEGIN_DATE, CONSTANTS.HIGH_DATE)
               AND NVL(BGE_END_DATE, CONSTANTS.HIGH_DATE)   = NVL(X.BGE_END_DATE, CONSTANTS.HIGH_DATE)
               AND NVL(BEGIN_DATE, CONSTANTS.HIGH_DATE)     = NVL(X.BEGIN_DATE, CONSTANTS.HIGH_DATE)
               AND NVL(END_DATE, CONSTANTS.HIGH_DATE)       = NVL(X.END_DATE, CONSTANTS.HIGH_DATE)
            );
   LOGS.LOG_INFO('Number Of Records Deleted From The CDI_USAGE_STAGING Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Delete Staging Duplicates', c_PACKAGE_NAME);
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END REMOVE_DUPLICATE_RECORDS;

PROCEDURE POST_INVALID_RECORDS AS
v_PROCEDURE_NAME VARCHAR2(30) := 'POST_INVALID_RECORDS';
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   INSERT INTO CDI_ENERGY_INVALID_DATA(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, TIME_PERIOD, BGE_TIMESTAMP, PROCESS_CODE, ERROR_MESSAGE, PROCESS_DATE, OSUSER, BGE_BEGIN_DATE, BGE_END_DATE)
   WITH SERVICE_PERIOD AS
      (SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.IDR_STATUS, MIN(A.EFFECTIVE_DATE) "EFFECTIVE_DATE", MAX(A.TERMINATION_DATE) "TERMINATION_DATE"
      FROM BGE_MASTER_ACCOUNT A
         JOIN CDI_USAGE_STAGING B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT
      GROUP BY A.BILL_ACCOUNT, A.SERVICE_POINT, A.IDR_STATUS) 
   SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.BEGIN_DATE, A.END_DATE, A.USAGE_KWH "BILLED_USAGE", A.DEMAND_KW "BILLED_KW", A.BILL_CODE "READ_CODE", A.TIME_PERIOD, A.REC_TS "BGE_TIMESTAMP", 'ERROR' "PROCESS_CODE",
      RTRIM(SUBSTR(
      CASE WHEN A.BEGIN_DATE > A.END_DATE     THEN 'Begin Date Is Greater Than End Date, ' END ||
      CASE WHEN A.BEGIN_DATE IS NULL          THEN 'Begin Date Is Null, '                  END ||
      CASE WHEN A.END_DATE IS NULL            THEN 'End Date Is Null, '                    END ||
      CASE WHEN A.BEGIN_DATE > SYSDATE        THEN 'Begin Date Is Greater Than Sysdate, '  END ||
      CASE WHEN A.BILL_ACCOUNT <= 0           THEN 'Bill Account Is Less Than Zero, '      END || 
      CASE WHEN (A.BILL_ACCOUNT IS NULL)      THEN 'Bill Account Does Not Exist, '         END ||
      CASE WHEN UPPER(A.TIME_PERIOD) <> c_ALL THEN 'Invalid Time Period, '                 END ||
      CASE WHEN UPPER(B.IDR_STATUS) = 'Y' AND A.BILL_ACCOUNT IS NOT NULL THEN 'Usage Data Is For An Interval Account' END, 1, 4000),', ') "ERROR_MESSAGE",
      SYSDATE "PROCESS_DATE", SECURITY_CONTROLS.CURRENT_USER "OSUSER", BGE_BEGIN_DATE, BGE_END_DATE
   FROM CDI_USAGE_STAGING A
      LEFT JOIN SERVICE_PERIOD B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND A.BEGIN_DATE BETWEEN B.EFFECTIVE_DATE AND B.TERMINATION_DATE AND A.END_DATE-CASE WHEN A.BEGIN_DATE = A.END_DATE THEN 0 ELSE 1 END BETWEEN B.EFFECTIVE_DATE AND B.TERMINATION_DATE
   WHERE
      CASE WHEN A.BEGIN_DATE > A.END_DATE     THEN 1 ELSE 0 END +
      CASE WHEN A.BEGIN_DATE IS NULL          THEN 1 ELSE 0 END +
      CASE WHEN A.END_DATE IS NULL            THEN 1 ELSE 0 END +
      CASE WHEN A.BEGIN_DATE > SYSDATE        THEN 1 ELSE 0 END +
      CASE WHEN A.BILL_ACCOUNT <= 0           THEN 1 ELSE 0 END +
      CASE WHEN (A.BILL_ACCOUNT IS NULL)      THEN 1 ELSE 0 END +
      CASE WHEN UPPER(A.TIME_PERIOD) <> c_ALL THEN 1 ELSE 0 END +
      CASE WHEN UPPER(B.IDR_STATUS) = 'Y' AND A.BILL_ACCOUNT IS NOT NULL THEN 1 ELSE 0 END > 0;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_ENERGY_INVALID_DATA Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Invalid Records', c_PACKAGE_NAME);
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END POST_INVALID_RECORDS;

PROCEDURE POST_VALID_RECORDS(p_RECORDS_POSTED IN OUT PLS_INTEGER) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'POST_VALID_RECORDS';
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   INSERT INTO CDI_ENERGY_STAGING(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BGE_BEGIN_DATE, BGE_END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, TIME_PERIOD, BGE_TIMESTAMP, PROCESS_CODE, ERROR_MESSAGE, PROCESS_DATE)
   WITH SERVICE_PERIOD AS
      (SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.IDR_STATUS, MIN(A.EFFECTIVE_DATE) "EFFECTIVE_DATE", MAX(A.TERMINATION_DATE) "TERMINATION_DATE"
      FROM BGE_MASTER_ACCOUNT A
         JOIN CDI_USAGE_STAGING B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT
      GROUP BY A.BILL_ACCOUNT, A.SERVICE_POINT, A.IDR_STATUS)
--@@Backup The End Date To The Prior Day But No Earlier Than The Begin Date --       
   SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.BEGIN_DATE, GREATEST(A.END_DATE-1,A.BEGIN_DATE), A.BGE_BEGIN_DATE, A.BGE_END_DATE, A.USAGE_KWH "BILLED_USAGE", A.DEMAND_KW "BILLED_KW", A.BILL_CODE "READ_CODE", A.TIME_PERIOD, A.REC_TS "BGE_TIMESTAMP", 'VALID' "PROCESS_CODE", 'NEW' "ERROR_MESSAGE", SYSDATE
   FROM CDI_USAGE_STAGING A
      LEFT JOIN SERVICE_PERIOD B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND A.BEGIN_DATE BETWEEN B.EFFECTIVE_DATE AND B.TERMINATION_DATE AND A.END_DATE-CASE WHEN A.BEGIN_DATE = A.END_DATE THEN 0 ELSE 1 END BETWEEN B.EFFECTIVE_DATE AND B.TERMINATION_DATE
   WHERE
      CASE WHEN A.BEGIN_DATE > A.END_DATE     THEN 1 ELSE 0 END +
      CASE WHEN A.BEGIN_DATE IS NULL          THEN 1 ELSE 0 END +
      CASE WHEN A.END_DATE IS NULL            THEN 1 ELSE 0 END +
      CASE WHEN A.BEGIN_DATE > SYSDATE        THEN 1 ELSE 0 END +
      CASE WHEN A.BILL_ACCOUNT <= 0           THEN 1 ELSE 0 END +
      CASE WHEN (A.BILL_ACCOUNT IS NULL)      THEN 1 ELSE 0 END +
      CASE WHEN UPPER(A.TIME_PERIOD) <> c_ALL THEN 1 ELSE 0 END +
      CASE WHEN UPPER(B.IDR_STATUS) = 'Y' AND A.BILL_ACCOUNT IS NOT NULL THEN 1 ELSE 0 END = 0;
   p_RECORDS_POSTED := SQL%ROWCOUNT;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_ENERGY_STAGING Table: ' || TO_CHAR(p_RECORDS_POSTED), v_PROCEDURE_NAME, 'Valid Records', c_PACKAGE_NAME);
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END POST_VALID_RECORDS;

PROCEDURE CACHE_CALENDAR_PROFILE AS
v_PROCEDURE_NAME VARCHAR2(30) := 'CACHE_CALENDAR_PROFILE';
TYPE t_CALENDAR_PROFILE_VALUE IS TABLE OF CALENDAR_PROFILE_VALUE%ROWTYPE;
CURSOR c_SELECT IS
   SELECT EDC_ID, STATION_ID, CALENDAR_ID, MIN(BEGIN_DATE) "BEGIN_DATE", MAX(END_DATE) "END_DATE", COUNT(*) "ENTRY_COUNT"
   FROM CDI_MONTHLY_USAGE_FACTOR
   GROUP BY EDC_ID, STATION_ID, CALENDAR_ID;
v_CALENDAR_NAME VARCHAR2(64);
v_PROFILE_DATE DATE;
v_PROFILE_VALUE NUMBER;
v_PROFILE GA.NUMBER_TABLE;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_CALENDAR_PROFILE_VALUE t_CALENDAR_PROFILE_VALUE := t_CALENDAR_PROFILE_VALUE();
BEGIN
   LOGS.LOG_INFO('Cache Calendar Profile', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CALENDAR_PROFILE_VALUE';
   FOR v_SELECT IN c_SELECT LOOP
      SELECT MAX(CALENDAR_NAME) INTO v_CALENDAR_NAME FROM CALENDAR WHERE CALENDAR_ID = v_SELECT.CALENDAR_ID;
      LOGS.LOG_INFO_DETAIL('Calendar Name: ' || v_CALENDAR_NAME || ', Calendar Id: ' || TO_CHAR(v_SELECT.CALENDAR_ID) || ', Begin Date: ' || TO_CHAR(v_SELECT.BEGIN_DATE, c_DATE_FORMAT) || ', End DATE: ' || TO_CHAR(v_SELECT.END_DATE, c_DATE_FORMAT) || ', Count: ' || TO_CHAR(v_SELECT.ENTRY_COUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      v_PROFILE_DATE := v_SELECT.BEGIN_DATE;
      WHILE v_PROFILE_DATE <= v_SELECT.END_DATE LOOP
         v_PROFILE.DELETE;
         FS.COMPOSITE_PROFILE_FOR_CALENDAR(v_SELECT.STATION_ID, v_SELECT.CALENDAR_ID, v_SELECT.EDC_ID, v_PROFILE_DATE, v_PROFILE, FALSE, CONSTANTS.CODE_FORECAST);
         v_PROFILE_VALUE := 0;
         FOR v_INDEX IN v_PROFILE.FIRST..v_PROFILE.LAST LOOP
            v_PROFILE_VALUE := v_PROFILE_VALUE + v_PROFILE(v_INDEX);
         END LOOP;
         v_CALENDAR_PROFILE_VALUE.EXTEND;
         v_CALENDAR_PROFILE_VALUE(v_CALENDAR_PROFILE_VALUE.LAST).WEATHER_STATION_ID := v_SELECT.STATION_ID;
         v_CALENDAR_PROFILE_VALUE(v_CALENDAR_PROFILE_VALUE.LAST).CALENDAR_ID := v_SELECT.CALENDAR_ID;
         v_CALENDAR_PROFILE_VALUE(v_CALENDAR_PROFILE_VALUE.LAST).EDC_ID := v_SELECT.EDC_ID;
         v_CALENDAR_PROFILE_VALUE(v_CALENDAR_PROFILE_VALUE.LAST).PROFILE_DATE := v_PROFILE_DATE;
         v_CALENDAR_PROFILE_VALUE(v_CALENDAR_PROFILE_VALUE.LAST).PROFILE_VALUE := v_PROFILE_VALUE;
         v_PROFILE_DATE := v_PROFILE_DATE + 1;
      END LOOP;
   END LOOP;
   FORALL v_INDEX IN 1..v_CALENDAR_PROFILE_VALUE.COUNT
      INSERT INTO CALENDAR_PROFILE_VALUE VALUES v_CALENDAR_PROFILE_VALUE(v_INDEX);
   COMMIT;
   GATHER_TABLE_STATS('CALENDAR_PROFILE_VALUE');
   LOGS.LOG_INFO('Cache Calendar Profile Complete. Records Posted: ' || TO_CHAR(v_CALENDAR_PROFILE_VALUE.COUNT) || ', Total Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END CACHE_CALENDAR_PROFILE;

PROCEDURE FLASH_CACHE_CALENDAR_PROFILE AS
v_PROCEDURE_NAME VARCHAR2(30) := 'FLASH_CACHE_CALENDAR_PROFILE';
TYPE t_CALENDAR_PROFILE_MAP IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;
CURSOR c_CHECK IS SELECT DISTINCT CALENDAR_ID FROM CDI_MONTHLY_USAGE_FACTOR;
CURSOR c_SELECT IS
   SELECT EDC_ID, STATION_ID, CALENDAR_ID, MIN(BEGIN_DATE) "BEGIN_DATE", MAX(END_DATE)+1 "END_DATE", COUNT(*) "ENTRY_COUNT"
   FROM CDI_MONTHLY_USAGE_FACTOR
   GROUP BY EDC_ID, STATION_ID, CALENDAR_ID, CALENDAR_ID;
v_CALENDAR_NAME VARCHAR2(64);
v_PROFILE_NAME  VARCHAR2(64);
v_PROFILE_ID NUMBER(9);
v_CUT_BEGIN_DATE DATE;
v_CUT_END_DATE DATE;
v_COUNT PLS_INTEGER := 0;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_CALENDAR_PROFILE_MAP t_CALENDAR_PROFILE_MAP;
BEGIN
   LOGS.LOG_INFO('Flash Cache Calendar Profile', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CALENDAR_PROFILE_VALUE';
   LOGS.LOG_INFO('Calendar To Profile Map', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   FOR v_CHECK IN c_CHECK LOOP
      SELECT MAX(CALENDAR_NAME) INTO v_CALENDAR_NAME FROM CALENDAR WHERE CALENDAR_ID = v_CHECK.CALENDAR_ID;
      SELECT MAX(C.PROFILE_ID), MAX(C.PROFILE_NAME) INTO v_PROFILE_ID, v_PROFILE_NAME
      FROM CALENDAR A
         LEFT JOIN CALENDAR_PROFILE B ON B.CALENDAR_ID = A.CALENDAR_ID
         LEFT JOIN LOAD_PROFILE C ON C.PROFILE_ID = B.PROFILE_ID AND C.PROFILE_TYPE = 'Historical'
      WHERE A.CALENDAR_ID = v_CHECK.CALENDAR_ID;
      ASSERT(v_PROFILE_ID IS NOT NULL, 'Load Profile Not Found For Calendar "' || v_CALENDAR_NAME || '"');
      v_CALENDAR_PROFILE_MAP(v_CHECK.CALENDAR_ID) := v_PROFILE_ID;
      LOGS.LOG_DEBUG(v_CALENDAR_NAME || ' => ' || v_PROFILE_NAME, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   END LOOP;
   FOR v_SELECT IN c_SELECT LOOP
      LOGS.LOG_INFO_DETAIL('Calendar Name: ' || v_CALENDAR_NAME || ', Calendar Id: ' || TO_CHAR(v_SELECT.CALENDAR_ID) || ', Begin Date: ' || TO_CHAR(v_SELECT.BEGIN_DATE, c_DATE_FORMAT) || ', End DATE: ' || TO_CHAR(v_SELECT.END_DATE, c_DATE_FORMAT) || ', Count: ' || TO_CHAR(v_SELECT.ENTRY_COUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      v_PROFILE_ID := v_CALENDAR_PROFILE_MAP(v_SELECT.CALENDAR_ID);
      UT.CUT_DATE_RANGE(v_SELECT.BEGIN_DATE, v_SELECT.END_DATE, c_PROFILE_TIME_ZONE, v_CUT_BEGIN_DATE, v_CUT_END_DATE);
      INSERT INTO CALENDAR_PROFILE_VALUE(WEATHER_STATION_ID, CALENDAR_ID, EDC_ID, PROFILE_DATE, PROFILE_VALUE)
      SELECT v_SELECT.STATION_ID, v_SELECT.CALENDAR_ID, v_SELECT.EDC_ID, POINT_DATE, POINT_VAL
      FROM LOAD_PROFILE_POINT
      WHERE PROFILE_ID = v_PROFILE_ID
         AND POINT_DATE BETWEEN v_CUT_BEGIN_DATE AND v_SELECT.END_DATE;
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
      COMMIT;
   END LOOP;
   COMMIT;
   GATHER_TABLE_STATS('CALENDAR_PROFILE_VALUE');
   LOGS.LOG_INFO('Flash Cache Calendar Profile Complete. Records Posted: ' || TO_CHAR(v_COUNT) || ', Total Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END FLASH_CACHE_CALENDAR_PROFILE;

PROCEDURE POST_MONTHLY_USAGE_FACTOR(p_PROCESS_MODE IN VARCHAR2) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'POST_MONTHLY_USAGE_FACTOR';
v_EDC_ID        NUMBER(9);
v_STATION_ID    NUMBER(9);
v_UF_PROCESS_ID NUMBER(12) := LOGS.CURRENT_PROCESS_ID;
v_COUNT         PLS_INTEGER;
v_MARK_TIME     PLS_INTEGER := DBMS_UTILITY.GET_TIME;
CURSOR c_SELECT_DUPLICATE IS
   SELECT BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BGE_TIMESTAMP, COUNT(*) "ENTRY_COUNT"
   FROM CDI_MONTHLY_USAGE_FACTOR
   GROUP BY BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BGE_TIMESTAMP HAVING COUNT(*) > 1
   ORDER BY BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BGE_TIMESTAMP;
BEGIN
   SELECT MAX(EDC_ID) INTO v_EDC_ID FROM ENERGY_DISTRIBUTION_COMPANY WHERE EDC_EXTERNAL_IDENTIFIER = 'BGE';
   SELECT MAX(STATION_ID) INTO v_STATION_ID FROM WEATHER_STATION WHERE STATION_NAME = 'BWI';
   ASSERT(v_EDC_ID IS NOT NULL, 'Energy Distribution Company "BGE" Is Not Defined.');
   ASSERT(v_STATION_ID IS NOT NULL, 'Weather Station "BWI" Is Not Defined.');
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_MONTHLY_USAGE_FACTOR';
   IF p_PROCESS_MODE = c_REPOST_MODE THEN
-- Cache Repost Monthly Usage Records That Intersect A Time Range -- 
      INSERT INTO CDI_MONTHLY_USAGE_FACTOR(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, EDC_ID, STATION_ID, CALENDAR_ID, BILLED_USAGE, BGE_TIMESTAMP)
      SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.BEGIN_DATE, A.END_DATE, v_EDC_ID, v_STATION_ID, C.CALENDAR_ID, A.BILLED_USAGE, A.BGE_TIMESTAMP
      FROM CDI_MONTHLY_USAGE_CACHE A
         JOIN BGE_MASTER_ACCOUNT   B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND A.BEGIN_DATE BETWEEN B.EFFECTIVE_DATE AND B.TERMINATION_DATE
         JOIN CALENDAR             C ON C.CALENDAR_NAME = B.AGGR_IDENTIFIER || '_Settlement';
   ELSIF p_PROCESS_MODE = c_POST_MODE THEN
-- Cache Any New Or Updated Monthly Usage Records Originating From The Monthly Usage Import Process  -- 
      INSERT INTO CDI_MONTHLY_USAGE_FACTOR(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, EDC_ID, STATION_ID, CALENDAR_ID, BILLED_USAGE, BGE_TIMESTAMP)
      SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.BEGIN_DATE, A.END_DATE, v_EDC_ID, v_STATION_ID, C.CALENDAR_ID, A.BILLED_USAGE, A.BGE_TIMESTAMP
      FROM BGE_RTO_MONTHLY_USAGE A
         JOIN BGE_MASTER_ACCOUNT B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND A.BEGIN_DATE BETWEEN B.EFFECTIVE_DATE AND B.TERMINATION_DATE
         JOIN CALENDAR           C ON C.CALENDAR_NAME = B.AGGR_IDENTIFIER || '_Settlement'
      WHERE A.PROCESS_CODE  = 'VALID'
         AND A.ERROR_MESSAGE = 'NEW';
   END IF;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_MONTHLY_USAGE_FACTOR Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   COMMIT;
-- Check For Duplicates --   
   FOR v_SELECT IN c_SELECT_DUPLICATE LOOP
      LOGS.LOG_WARN('Duplicate: ' || v_SELECT.BILL_ACCOUNT || ', ' || v_SELECT.SERVICE_POINT || ', ' || TO_CHAR(v_SELECT.BEGIN_DATE, c_DATE_FORMAT) || ', ' || TO_CHAR(v_SELECT.END_DATE, c_DATE_FORMAT) || ', ' || TO_CHAR(v_SELECT.BGE_TIMESTAMP, c_TIMESTAMP_FORMAT) || ', ' || TO_CHAR(v_SELECT.ENTRY_COUNT));
      v_COUNT := v_COUNT + 1;
   END LOOP;
   IF v_COUNT > 0 THEN
      RETURN;
   END IF;
-- Cache The Profile Usage For The Set Of Profiles In The Monthly Usage Factor Cache --
   IF c_FLASH_CALENDAR_CACHE THEN
      FLASH_CACHE_CALENDAR_PROFILE;
   ELSE
      CACHE_CALENDAR_PROFILE;
   END IF;
-- Capture The Profiled Usage Associated With Each Billed Usage Record -- --
   UPDATE CDI_MONTHLY_USAGE_FACTOR X SET USAGE_DAYS = ((END_DATE-BEGIN_DATE)+1), (PROFILED_USAGE, PROFILED_DAYS) = (SELECT SUM(PROFILE_VALUE), COUNT(*)/24 FROM CALENDAR_PROFILE_VALUE WHERE CALENDAR_ID = X.CALENDAR_ID AND PROFILE_DATE BETWEEN X.BEGIN_DATE+1/24 AND X.END_DATE+1);
   LOGS.LOG_INFO('Number Of Records Updated With Profiled Usage: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
-- Calculate The Usage Factor --    
   UPDATE CDI_MONTHLY_USAGE_FACTOR SET USAGE_FACTOR = CASE WHEN PROFILED_DAYS <> USAGE_DAYS THEN c_INVALID_USAGE_FACTOR ELSE CASE WHEN NVL(PROFILED_USAGE,0) = 0 OR BILLED_USAGE = 0 THEN c_NO_USAGE_FACTOR ELSE BILLED_USAGE / PROFILED_USAGE END END;
   LOGS.LOG_INFO('Number Of Records Updated With Usage Factor: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   COMMIT;
-- Store The Usage Factor Back To The Monthly Usage Table --
   MERGE INTO BGE_RTO_MONTHLY_USAGE T
   USING
      (SELECT BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BGE_TIMESTAMP, MIN(PROFILED_USAGE) "PROFILED_USAGE", MIN(USAGE_FACTOR) "USAGE_FACTOR", MIN(PROFILED_DAYS * 24 * CASE WHEN PROFILED_DAYS >= USAGE_DAYS THEN 1 ELSE -1 END) "USAGE_INTERVALS"
      FROM CDI_MONTHLY_USAGE_FACTOR
      GROUP BY BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BGE_TIMESTAMP) S
   ON (T.BILL_ACCOUNT = S.BILL_ACCOUNT AND T.SERVICE_POINT = S.SERVICE_POINT AND T.BEGIN_DATE = S.BEGIN_DATE AND T.END_DATE = S.END_DATE AND T.BGE_TIMESTAMP = S.BGE_TIMESTAMP)
   WHEN MATCHED THEN
      UPDATE SET T.PROFILED_USAGE = S.PROFILED_USAGE, T.USAGE_FACTOR = S.USAGE_FACTOR, T.USAGE_INTERVALS = S.USAGE_INTERVALS, T.UF_PROCESS_ID = v_UF_PROCESS_ID; 
   LOGS.LOG_INFO('Number Of BGE_RTO_MONTHLY_USAGE Records Updated With Profiled Usage And Usage Factor: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   COMMIT;
   LOGS.LOG_INFO('Post Monthly Usage Factors Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END POST_MONTHLY_USAGE_FACTOR;

PROCEDURE VALIDATE_PERIOD_USAGE AS
v_PROCEDURE_NAME VARCHAR2(30) := 'VALIDATE_PERIOD_USAGE';
v_COUNT     PLS_INTEGER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_CI_ROWID STRING_TABLE;
BEGIN
   REMOVE_DUPLICATE_RECORDS;
   POST_INVALID_RECORDS;
   POST_VALID_RECORDS(v_COUNT);
   IF v_COUNT > 0 THEN
      GATHER_TABLE_STATS('CDI_ENERGY_STAGING');
      SELECT STRING_TYPE(B.ROWID)
      BULK COLLECT INTO v_CI_ROWID
      FROM CDI_ENERGY_STAGING A
         JOIN BGE_RTO_MONTHLY_USAGE B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT
            AND B.SERVICE_POINT = A.SERVICE_POINT
            AND A.BGE_TIMESTAMP >= B.BGE_TIMESTAMP
            AND B.BEGIN_DATE <= NVL(A.END_DATE, CONSTANTS.HIGH_DATE)
            AND NVL(B.END_DATE, CONSTANTS.HIGH_DATE)  >= A.BEGIN_DATE
            AND B.PROCESS_CODE  <> 'VALID'
            AND B.ERROR_MESSAGE <> 'NEW'
            AND UPPER(NVL(TRIM(B.TIME_PERIOD),'X')) = UPPER(NVL(TRIM(A.TIME_PERIOD),'X'))
      WHERE SUBSTR(TRIM(A.READ_CODE),2,1) <> 'X'
         AND NOT EXISTS
            (SELECT NULL
            FROM CDI_ENERGY_INVALID_DATA
            WHERE BILL_ACCOUNT                            = A.BILL_ACCOUNT
               AND SERVICE_POINT                          = A.SERVICE_POINT
               AND BGE_TIMESTAMP                          = A.BGE_TIMESTAMP
               AND SUBSTR(TRIM(READ_CODE),2,1)            = SUBSTR(TRIM(A.READ_CODE),2,1)
               AND UPPER(NVL(TRIM(TIME_PERIOD),'X'))      = UPPER(NVL(TRIM(A.TIME_PERIOD),'X'))
               AND NVL(BILLED_USAGE,0)                    = NVL(A.BILLED_USAGE,0)
               AND NVL(BILLED_KW ,0)                      = NVL(A.BILLED_KW,0)
               AND BGE_BEGIN_DATE                         = A.BGE_BEGIN_DATE
               AND NVL(BGE_END_DATE, CONSTANTS.HIGH_DATE) = NVL(A.BGE_END_DATE, CONSTANTS.HIGH_DATE));
      LOGS.LOG_INFO('Number Of Records Posted To The ROWID Collector: ' || TO_CHAR(v_CI_ROWID.COUNT), v_PROCEDURE_NAME, 'Collect Invalid Record ROWIDS', c_PACKAGE_NAME);

      INSERT INTO CDI_ENERGY_INVALID_DATA(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, BGE_TIMESTAMP, PROCESS_CODE, ERROR_MESSAGE, PROCESS_DATE, BGE_BEGIN_DATE, BGE_END_DATE, TIME_PERIOD)
      SELECT BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, BGE_TIMESTAMP, 'INVALID', 'OVERLAP ROW', SYSDATE, BGE_BEGIN_DATE, BGE_END_DATE, TIME_PERIOD
      FROM BGE_RTO_MONTHLY_USAGE A
         JOIN TABLE(CAST(v_CI_ROWID AS STRING_TABLE)) B ON B.STRING_VAL = A.ROWID;
      LOGS.LOG_INFO('Number Of Records Posted To The CDI_ENERGY_INVALID_DATA Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Period Overlap', c_PACKAGE_NAME);

      DELETE BGE_RTO_MONTHLY_USAGE X
      WHERE EXISTS (SELECT NULL FROM TABLE(CAST(V_CI_ROWID AS STRING_TABLE)) WHERE STRING_VAL = X.ROWID);
      LOGS.LOG_INFO('Number Of Records Deleted From The BGE_RTO_MONTHLY_USAGE Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Delete Invalid', c_PACKAGE_NAME);

      INSERT INTO BGE_RTO_MONTHLY_USAGE(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, TIME_PERIOD, BGE_TIMESTAMP, PROCESS_CODE, ERROR_MESSAGE, PROCESS_DATE, OSUSER, TEMPLATE_ID, PERIOD_ID, TEMPLATE_NAME, PERIOD_NAME, BGE_BEGIN_DATE, BGE_END_DATE, IS_ALM, STAGING_ROWID)
      SELECT BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, TIME_PERIOD, BGE_TIMESTAMP, 'VALID', 'NEW', SYSDATE, OSUSER, c_ANYTIME_TEMPLATE_ID, c_ANYTIME_PERIOD_ID, c_ANYTIME_TEMPLATE_NAME, c_ANYTIME_PERIOD_NAME, BGE_BEGIN_DATE, BGE_END_DATE, 0, NULL
      FROM CDI_ENERGY_STAGING X
      WHERE NOT EXISTS
         (SELECT NULL
         FROM BGE_RTO_MONTHLY_USAGE
         WHERE BILL_ACCOUNT                              = X.BILL_ACCOUNT
            AND SERVICE_POINT                            = X.SERVICE_POINT
            AND UPPER(NVL(TRIM(TIME_PERIOD),'X'))        = UPPER(NVL(TRIM(X.TIME_PERIOD),'X'))
            AND NVL(BILLED_USAGE,0)                      = NVL(X.BILLED_USAGE,0)
            AND NVL(BILLED_KW,0)                         = NVL(X.BILLED_KW,0)
            AND NVL(READ_CODE,'X')                       = NVL(X.READ_CODE,'X')
            AND NVL(BGE_BEGIN_DATE, CONSTANTS.HIGH_DATE) = NVL(X.BGE_BEGIN_DATE, CONSTANTS.HIGH_DATE)
            AND NVL(BGE_END_DATE, CONSTANTS.HIGH_DATE)   = NVL(X.BGE_END_DATE, CONSTANTS.HIGH_DATE));
      LOGS.LOG_INFO('Number Of Records Posted To The BGE_RTO_MONTHLY_USAGE Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Valid Staged To Master', c_PACKAGE_NAME);

      INSERT INTO CDI_ENERGY_INVALID_DATA(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, TIME_PERIOD, BGE_TIMESTAMP, PROCESS_CODE, ERROR_MESSAGE, PROCESS_DATE, BGE_BEGIN_DATE, BGE_END_DATE)
      SELECT BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, TIME_PERIOD, BGE_TIMESTAMP, 'CANCEL', 'READ CANCEL ROW', SYSDATE, BGE_BEGIN_DATE, BGE_END_DATE
      FROM BGE_RTO_MONTHLY_USAGE X
      WHERE SUBSTR(TRIM(READ_CODE),2,1) <> 'X'
         AND EXISTS
            (SELECT NULL
            FROM CDI_ENERGY_STAGING
            WHERE BILL_ACCOUNT                       = X.BILL_ACCOUNT
               AND SERVICE_POINT                     = X.SERVICE_POINT
               AND BGE_BEGIN_DATE                    = X.BGE_BEGIN_DATE
               AND BGE_END_DATE                      = X.BGE_END_DATE
               AND NVL(BILLED_USAGE,0)               =  NVL(X.BILLED_USAGE,0)
               AND NVL(BILLED_KW ,0)                 =  NVL(X.BILLED_KW,0)
               AND SUBSTR(TRIM(READ_CODE),1,1)       = SUBSTR(TRIM(X.READ_CODE),1,1) -- is this a VALID CASE
               AND SUBSTR(TRIM(READ_CODE),2,1)       = 'X');
      LOGS.LOG_INFO('Number Of Records Posted To The CDI_ENERGY_INVALID_DATA Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Read Cancel', c_PACKAGE_NAME);

      INSERT INTO CDI_ENERGY_INVALID_DATA(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, BGE_TIMESTAMP, PROCESS_CODE, ERROR_MESSAGE, PROCESS_DATE, BGE_BEGIN_DATE, BGE_END_DATE, TIME_PERIOD)
      SELECT BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, BGE_TIMESTAMP, 'CANCEL', 'SENT CANCEL', SYSDATE, BGE_BEGIN_DATE, BGE_END_DATE, TIME_PERIOD
      FROM CDI_ENERGY_STAGING X
      WHERE SUBSTR(TRIM(READ_CODE),2,1) = 'X'
         AND EXISTS
            (SELECT NULL
            FROM BGE_RTO_MONTHLY_USAGE
            WHERE BILL_ACCOUNT                       = X.BILL_ACCOUNT
               AND SERVICE_POINT                     = X.SERVICE_POINT
               AND BGE_BEGIN_DATE                    = X.BGE_BEGIN_DATE
               AND BGE_END_DATE                      = X.BGE_END_DATE
               AND NVL(BILLED_USAGE,0)               = NVL(X.BILLED_USAGE,0)
               AND NVL(BILLED_KW ,0)                 = NVL(X.BILLED_KW,0)
               AND UPPER(NVL(TRIM(TIME_PERIOD),'X')) = UPPER(NVL(TRIM(X.TIME_PERIOD),'X'))
               AND SUBSTR(TRIM(READ_CODE),1,1)       = SUBSTR(TRIM(X.READ_CODE),1,1)
               AND SUBSTR(TRIM(READ_CODE),2,1)       <> 'X'
               AND X.BGE_TIMESTAMP                   > BGE_TIMESTAMP);
      LOGS.LOG_INFO('Number Of Records Posted To The CDI_ENERGY_INVALID_DATA Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Move Cancel', c_PACKAGE_NAME);

      INSERT INTO CDI_ENERGY_INVALID_DATA(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, BGE_TIMESTAMP, PROCESS_CODE, ERROR_MESSAGE, PROCESS_DATE, BGE_BEGIN_DATE, BGE_END_DATE, TIME_PERIOD)
      SELECT BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, BGE_TIMESTAMP, 'INVALID', 'COULD NOT FIND MATCH TO CANCEL ROW', SYSDATE, BGE_BEGIN_DATE, BGE_END_DATE, TIME_PERIOD
      FROM CDI_ENERGY_STAGING X
      WHERE SUBSTR(TRIM(READ_CODE),2,1) = 'X'
         AND NOT EXISTS
            (SELECT NULL
            FROM BGE_RTO_MONTHLY_USAGE
            WHERE BILL_ACCOUNT                       = X.BILL_ACCOUNT
               AND SERVICE_POINT                     = X.SERVICE_POINT
               AND BGE_BEGIN_DATE                    = X.BGE_BEGIN_DATE
               AND BGE_END_DATE                      = X.BGE_END_DATE
               AND NVL(BILLED_USAGE,0)               =  NVL(X.BILLED_USAGE,0)
               AND NVL(BILLED_KW ,0)                 =  NVL(X.BILLED_KW,0)
               AND UPPER(NVL(TRIM(TIME_PERIOD),'X')) = UPPER(NVL(TRIM(X.TIME_PERIOD),'X'))
               AND SUBSTR(TRIM(READ_CODE),1,1)       = SUBSTR(TRIM(X.READ_CODE),1,1)
               AND SUBSTR(TRIM(READ_CODE),2,1)       <> 'X');
      LOGS.LOG_INFO('Number Of Records Posted To The CDI_ENERGY_INVALID_DATA Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Cancel Not Found', c_PACKAGE_NAME);

      DELETE BGE_RTO_MONTHLY_USAGE
      WHERE ROWID IN
         (SELECT B.ROWID
         FROM CDI_ENERGY_STAGING A
            JOIN BGE_RTO_MONTHLY_USAGE B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND B.BGE_BEGIN_DATE = A.BGE_BEGIN_DATE AND B.BGE_END_DATE = A.BGE_END_DATE
         WHERE NVL(B.BILLED_USAGE,0) = NVL(A.BILLED_USAGE,0) AND NVL(B.BILLED_KW ,0) = NVL(A.BILLED_KW,0)
            AND UPPER(NVL(TRIM(B.TIME_PERIOD),'X')) = UPPER(NVL(TRIM(A.TIME_PERIOD),'X'))
            AND SUBSTR(TRIM(B.READ_CODE),1,1)       = SUBSTR(TRIM(A.READ_CODE),1,1)
            AND SUBSTR(TRIM(B.READ_CODE),2,1)      <> 'X'
            AND SUBSTR(TRIM(A.READ_CODE),2,1)       = 'X'
            AND SUBSTR(TRIM(B.READ_CODE),2,1)      <> 'X'
            AND A.BGE_TIMESTAMP                     > B.BGE_TIMESTAMP);
      LOGS.LOG_INFO('Number Of Records Deleted From The BGE_RTO_MONTHLY_USAGE Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Delete Cancels In Master', c_PACKAGE_NAME);

      DELETE BGE_RTO_MONTHLY_USAGE WHERE SUBSTR(TRIM(READ_CODE),2,1) = 'X';
      LOGS.LOG_INFO('Number Of Records Deleted From The BGE_RTO_MONTHLY_USAGE Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Delete "X" Read Codes In Master', c_PACKAGE_NAME);

      DELETE CDI_ENERGY_INVALID_DATA X
      WHERE EXISTS
         (SELECT NULL
         FROM CDI_ENERGY_INVALID_DATA
         WHERE BILL_ACCOUNT                            = X.BILL_ACCOUNT
            AND SERVICE_POINT                          = X.SERVICE_POINT
            AND UPPER(NVL(TRIM(TIME_PERIOD),'X'))      = UPPER(NVL(TRIM(X.TIME_PERIOD),'X'))
            AND NVL(BILLED_USAGE,0)                    = NVL(X.BILLED_USAGE,0)
            AND NVL(BILLED_KW ,0)                      = NVL(X.BILLED_KW,0)
            AND READ_CODE                              = X.READ_CODE
            AND X.BGE_TIMESTAMP                       >= BGE_TIMESTAMP
            AND NVL(BGE_END_DATE, CONSTANTS.HIGH_DATE) = NVL(X.BGE_END_DATE, CONSTANTS.HIGH_DATE)
            AND NVL(BEGIN_DATE, CONSTANTS.HIGH_DATE)   = NVL(X.BEGIN_DATE , CONSTANTS.HIGH_DATE)
            AND NVL(END_DATE, CONSTANTS.HIGH_DATE)     = NVL(X.END_DATE, CONSTANTS.HIGH_DATE))
         AND ROWID <>
            (SELECT MAX(ROWID)
            FROM CDI_ENERGY_INVALID_DATA 
            WHERE BILL_ACCOUNT                              = X.BILL_ACCOUNT
               AND SERVICE_POINT                            = X.SERVICE_POINT
               AND UPPER(NVL(TRIM(TIME_PERIOD),'X'))        = UPPER(NVL(TRIM(X.TIME_PERIOD),'X'))
               AND NVL(BILLED_USAGE,0)                      = NVL(X.BILLED_USAGE,0)
               AND NVL(BILLED_KW ,0)                        = NVL(X.BILLED_KW,0)
               AND READ_CODE                                = X.READ_CODE
               AND NVL(BGE_BEGIN_DATE, CONSTANTS.HIGH_DATE) = NVL(X.BGE_BEGIN_DATE, CONSTANTS.HIGH_DATE)
               AND NVL(BGE_END_DATE, CONSTANTS.HIGH_DATE)   = NVL(X.BGE_END_DATE, CONSTANTS.HIGH_DATE)
               AND NVL(BEGIN_DATE, CONSTANTS.HIGH_DATE)     = NVL(X.BEGIN_DATE, CONSTANTS.HIGH_DATE)
               AND NVL(END_DATE, CONSTANTS.HIGH_DATE)       = NVL(X.END_DATE, CONSTANTS.HIGH_DATE));
      LOGS.LOG_INFO('Number Of Records Deleted From The CDI_ENERGY_INVALID_DATA Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Delete Invalid Duplicates', c_PACKAGE_NAME);
      
      POST_MONTHLY_USAGE_FACTOR(c_POST_MODE);
      
      UPDATE BGE_RTO_MONTHLY_USAGE SET ERROR_MESSAGE = NULL, PROCESS_DATE = SYSDATE WHERE  PROCESS_CODE  = 'VALID' AND ERROR_MESSAGE = 'NEW';
      LOGS.LOG_INFO('Number Of Records Updated In The BGE_RTO_MONTHLY_USAGE Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Clear Error Message For New Valid Records', c_PACKAGE_NAME);
      DBMS_APPLICATION_INFO.SET_MODULE(MODULE_NAME => NULL, ACTION_NAME => NULL);
   END IF;
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
END VALIDATE_PERIOD_USAGE;

PROCEDURE LOAD_PERIOD_USAGE(p_STATUS OUT NUMBER, p_MESSAGE OUT VARCHAR2) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'LOAD_PERIOD_USAGE';
v_TIMESTAMP TIMESTAMP := SYSTIMESTAMP;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.START_PROCESS(c_LOAD_PERIOD_USAGE);
   LOGS.LOG_INFO(c_LOAD_PERIOD_USAGE, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   IF NOT CAN_PROCESS_RUN THEN
      ERRS.LOG_AND_RAISE('The ' || c_LOAD_PERIOD_USAGE || ' Process Cannot Run At This Time');
   END IF;
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_ENERGY_STAGING';
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_USAGE_STAGING';
   INSERT /*APPEND*/ INTO CDI_USAGE_STAGING(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, USAGE_KWH, DEMAND_KW, BILL_CODE, TIME_PERIOD, REC_TS, BGE_BEGIN_DATE, BGE_END_DATE)
   SELECT BILL_ACCOUNT, SERVICE_POINT, READ_BEGIN_DATE, READ_END_DATE, BILLED_USAGE, BILLED_KW, UPPER(READ_CODE), UPPER(TRIM(TIME_PERIOD)), REC_TS, READ_BEGIN_DATE, READ_END_DATE
   FROM MONTHLY_ENERGY_STAGING
   WHERE REC_TS < v_TIMESTAMP;
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_USAGE_STAGING Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, 'Step ?', c_PACKAGE_NAME);
   COMMIT;
   GATHER_TABLE_STATS('CDI_USAGE_STAGING');
   VALIDATE_PERIOD_USAGE;
   DELETE MONTHLY_ENERGY_STAGING WHERE REC_TS < v_TIMESTAMP;
   COMMIT;
   LOGS.LOG_INFO(c_LOAD_PERIOD_USAGE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      LOGS.LOG_ERROR(SQLERRM);
      DBMS_APPLICATION_INFO.SET_MODULE(MODULE_NAME => NULL, ACTION_NAME => NULL);
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ROLLBACK;
      ERRS.ABORT_PROCESS;
END LOAD_PERIOD_USAGE;

PROCEDURE LOAD_PERIOD_USAGE_CORRECTED AS
v_PROCEDURE_NAME VARCHAR2(30) := 'LOAD_CORRECTED_PERIOD_USAGE';
v_TIMESTAMP TIMESTAMP := SYSTIMESTAMP;
v_MESSAGE VARCHAR2(1000);
v_STATUS NUMBER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   LOGS.START_PROCESS(c_LOAD_PERIOD_USAGE_CORRECTED);
   LOGS.LOG_INFO(c_LOAD_PERIOD_USAGE_CORRECTED, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   IF NOT CAN_PROCESS_RUN THEN
      ERRS.LOG_AND_RAISE('The ' || c_LOAD_PERIOD_USAGE_CORRECTED || ' Process Cannot Run At This Time');
   END IF;
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_ENERGY_STAGING';
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_USAGE_STAGING';
   INSERT /*APPEND*/ INTO CDI_USAGE_STAGING(BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, USAGE_KWH, DEMAND_KW, BILL_CODE, TIME_PERIOD, REC_TS, BGE_BEGIN_DATE, BGE_END_DATE)
   SELECT BILL_ACCOUNT, SERVICE_POINT, BGE_BEGIN_DATE, BGE_END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, TIME_PERIOD, BGE_TIMESTAMP, BGE_BEGIN_DATE, BGE_END_DATE
   FROM CDI_ENERGY_INVALID_DATA
   WHERE PROCESS_CODE = 'CORRECTED';
   LOGS.LOG_INFO('Number Of Records Posted To The CDI_USAGE_STAGING Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   COMMIT;
   GATHER_TABLE_STATS('CDI_USAGE_STAGING');
   VALIDATE_PERIOD_USAGE;
   DELETE CDI_ENERGY_INVALID_DATA WHERE PROCESS_CODE = 'CORRECTED';
   LOGS.LOG_INFO('Number Of "Corrected" Records Deleted From The CDI_ENERGY_INVALID_DATA Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   COMMIT;
   LOGS.LOG_INFO(c_LOAD_PERIOD_USAGE_CORRECTED || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(v_MESSAGE, v_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      DBMS_APPLICATION_INFO.SET_MODULE(MODULE_NAME => NULL, ACTION_NAME => NULL);
      ROLLBACK;
      ERRS.ABORT_PROCESS;
END LOAD_PERIOD_USAGE_CORRECTED;

PROCEDURE IMPORT_PERIOD_USAGE
   (
   p_BEGIN_DATE IN DATE,
   p_END_DATE   IN DATE,
   p_STATUS    OUT NUMBER,
   p_MESSAGE   OUT VARCHAR2
   ) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'IMPORT_PERIOD_USAGE';
CURSOR c_SELECT IS
   SELECT M.RTO_ACCOUNT_ID "ACCOUNT_EXTERNAL_ID", M.SUPPLIER "SUPPLIER_EXTERNAL_ID", 'BGE' "EDC_EXTERNAL_ID", S.ESP_ID, U.BEGIN_DATE, U.END_DATE, TRIM(M.TARIFF_CODE) || '_' || TRIM(M.POLR_TYPE) || '_' || c_DEFAULT_PLC_BAND "POOL_NAME", U.PERIOD_ID, U.PERIOD_NAME, U.TEMPLATE_ID, U.TEMPLATE_NAME, COUNT(*) "METERS_READ", SUM(U.BILLED_USAGE) "USAGE_VAL", CONSTANTS.LOW_DATE "MS_DATE"
   FROM CDI_MONTHLY_USAGE_CACHE    U
      JOIN BGE_MASTER_ACCOUNT      M ON M.BILL_ACCOUNT = U.BILL_ACCOUNT AND M.SERVICE_POINT = U.SERVICE_POINT AND U.BEGIN_DATE BETWEEN M.EFFECTIVE_DATE AND M.TERMINATION_DATE
      JOIN ENERGY_SERVICE_PROVIDER S ON S.ESP_EXTERNAL_IDENTIFIER = M.SUPPLIER
   WHERE U.BEGIN_DATE <= p_END_DATE
      AND U.END_DATE >= p_BEGIN_DATE
      AND NVL(U.PROCESS_CODE,'VALID') NOT IN ('ERROR','CANCEL')
--@@Exclude Monthly Metered Consumption Periods That Are Within An AMI Certified Period --
      AND NVL(U.AMI_CHECK,'XXX') <> 'AMI'
   GROUP BY M.RTO_ACCOUNT_ID, M.SUPPLIER, S.ESP_ID, TRIM(M.TARIFF_CODE) || '_' || TRIM(M.POLR_TYPE) || '_' || c_DEFAULT_PLC_BAND, U.PERIOD_ID, U.PERIOD_NAME, U.TEMPLATE_ID, U.TEMPLATE_NAME, U.BEGIN_DATE, U.END_DATE
   ORDER BY 1,2,3,4,7,8,10,5;
v_WORK_COUNT   PLS_INTEGER;
v_RECORD_COUNT PLS_INTEGER := 0;
v_POST_COUNT   PLS_INTEGER := 0;
v_ERROR_COUNT  PLS_INTEGER := 0;
v_STATUS  NUMBER;
v_MESSAGE VARCHAR2(4000);
v_RECORD  VARCHAR2(1000);
v_PSE_EXTERNAL_IDENT  PURCHASING_SELLING_ENTITY.PSE_EXTERNAL_IDENTIFIER%TYPE;
v_POOL_EXTERNAL_IDENT POOL.POOL_EXTERNAL_IDENTIFIER%TYPE;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   IF NOT SD.GET_ENTITY_IS_ALLOWED('Select Settlement User Reports',1) THEN
      p_STATUS := GA.INSUFFICIENT_PRIVILEGES;
      RETURN;
   END IF;
   LOGS.START_PROCESS(c_IMPORT_PERIOD_USAGE);
   LOGS.LOG_INFO(c_IMPORT_PERIOD_USAGE, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   EXECUTE IMMEDIATE 'TRUNCATE TABLE SERVICE_CONSUMPTION';
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_IMPORT_CONSUMPTION';
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_MONTHLY_USAGE_CACHE';
   GATHER_TABLE_STATS('BGE_RTO_MONTHLY_USAGE');
   GATHER_TABLE_STATS('BGE_MASTER_ACCOUNT');
   INSERT /*APPEND*/ INTO CDI_MONTHLY_USAGE_CACHE
   SELECT BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, TIME_PERIOD, BGE_TIMESTAMP, PROCESS_CODE, ERROR_MESSAGE, PROCESS_DATE, OSUSER, TEMPLATE_ID, PERIOD_ID, TEMPLATE_NAME, PERIOD_NAME, BGE_BEGIN_DATE, BGE_END_DATE, IS_ALM, STAGING_ROWID, AMI_CHECK
   FROM BGE_RTO_MONTHLY_USAGE WHERE BEGIN_DATE <= p_END_DATE AND END_DATE >= p_BEGIN_DATE AND NVL(PROCESS_CODE,'VALID') NOT IN ('ERROR','CANCEL');
   LOGS.LOG_INFO('Number Of Records Cached: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   COMMIT;
   GATHER_TABLE_STATS('CDI_MONTHLY_USAGE_CACHE');
-- Get The Number Of Records That Represent The Amount Of Work --
   WITH WORK_COUNT AS
      (SELECT M.RTO_ACCOUNT_ID "ACCOUNT_EXTERNAL_ID", M.SUPPLIER "SUPPLIER_EXTERNAL_ID", 'BGE' "EDC_EXTERNAL_ID", S.ESP_ID, U.BEGIN_DATE, U.END_DATE, TRIM(M.TARIFF_CODE) || '_' || TRIM(M.POLR_TYPE) || '_' || c_DEFAULT_PLC_BAND "POOL_NAME", U.PERIOD_ID, U.PERIOD_NAME, U.TEMPLATE_ID, U.TEMPLATE_NAME, COUNT(*) "METERS_READ", SUM(U.BILLED_USAGE) "USAGE_VAL", CONSTANTS.LOW_DATE "MS_DATE"
      FROM CDI_MONTHLY_USAGE_CACHE    U
         JOIN BGE_MASTER_ACCOUNT      M ON M.BILL_ACCOUNT = U.BILL_ACCOUNT AND M.SERVICE_POINT = U.SERVICE_POINT AND U.BEGIN_DATE BETWEEN M.EFFECTIVE_DATE AND M.TERMINATION_DATE
         JOIN ENERGY_SERVICE_PROVIDER S ON S.ESP_EXTERNAL_IDENTIFIER = M.SUPPLIER
      WHERE U.BEGIN_DATE <= p_END_DATE
         AND U.END_DATE >= p_BEGIN_DATE
         AND NVL(U.PROCESS_CODE,'VALID') NOT IN ('ERROR','CANCEL')
         AND NVL(U.AMI_CHECK,'XXX') <> 'AMI'
      GROUP BY M.RTO_ACCOUNT_ID, M.SUPPLIER, S.ESP_ID, TRIM(M.TARIFF_CODE) || '_' || TRIM(M.POLR_TYPE) || '_' || c_DEFAULT_PLC_BAND, U.PERIOD_ID, U.PERIOD_NAME, U.TEMPLATE_ID, U.TEMPLATE_NAME, U.BEGIN_DATE, U.END_DATE)
   SELECT COUNT(*) INTO v_WORK_COUNT
   FROM WORK_COUNT;
   LOGS.LOG_INFO('Process Work Count: ' || TO_CHAR(v_WORK_COUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.INIT_PROCESS_PROGRESS('Supplier Assigned Monthly Usage', v_WORK_COUNT, 'Meter Read');
   FOR v_SELECT IN c_SELECT LOOP
      LOGS.INCREMENT_PROCESS_PROGRESS;
      v_RECORD_COUNT := v_RECORD_COUNT + 1;
      v_RECORD := 'Account: '|| v_SELECT.ACCOUNT_EXTERNAL_ID || ', Begin Date: ' || TO_CHAR(v_SELECT.BEGIN_DATE, c_DATE_FORMAT) || ', End Date: '|| TO_CHAR(v_SELECT.END_DATE,c_DATE_FORMAT) || ', ESP: ' || v_SELECT.SUPPLIER_EXTERNAL_ID || ', ESP ID: ' || TO_CHAR(v_SELECT.ESP_ID) || ', Pool: ' || v_SELECT.POOL_NAME || ', Usage: ' || v_SELECT.USAGE_VAL || ', Entry: ' || TO_CHAR(v_RECORD_COUNT);
      BEGIN
         SELECT MAX(D.PSE_EXTERNAL_IDENTIFIER), MAX(E.POOL_EXTERNAL_IDENTIFIER) INTO v_PSE_EXTERNAL_IDENT, v_POOL_EXTERNAL_IDENT
         FROM ACCOUNT                      A
            JOIN AGGREGATE_ACCOUNT_ESP     B ON B.ACCOUNT_ID = A.ACCOUNT_ID AND B.ESP_ID = v_SELECT.ESP_ID AND B.BEGIN_DATE <= v_SELECT.END_DATE AND NVL(B.END_DATE, CONSTANTS.HIGH_DATE) >= v_SELECT.BEGIN_DATE
            JOIN PSE_ESP                   C ON C.ESP_ID = B.ESP_ID AND C.BEGIN_DATE <= v_SELECT.END_DATE AND NVL(C.END_DATE, CONSTANTS.HIGH_DATE) >= v_SELECT.BEGIN_DATE AND C.BEGIN_DATE <= NVL(B.END_DATE, CONSTANTS.HIGH_DATE) AND NVL(C.END_DATE, CONSTANTS.HIGH_DATE) >= B.BEGIN_DATE
            JOIN PURCHASING_SELLING_ENTITY D ON D.PSE_ID = C.PSE_ID
            JOIN POOL                      E ON E.POOL_ID = B.POOL_ID --@@ AND E.POOL_NAME = v_SELECT.POOL_NAME
         WHERE A.ACCOUNT_EXTERNAL_IDENTIFIER = v_SELECT.ACCOUNT_EXTERNAL_ID;
         IF v_PSE_EXTERNAL_IDENT IS NULL THEN
            LOGS.LOG_ERROR('Account/ESP/PSE/Pool Relationship Check. Record: ' || v_RECORD);
            INSERT INTO CDI_IMPORT_CONSUMPTION(ROW_COUNT, ACCOUNT_EXTERNAL_IDENTIFIER, EDC_EXTERNAL_IDENTIFIER, ESP_EXTERNAL_IDENTIFIER, PSE_EXTERNAL_IDENTIFIER, POOL_EXTERNAL_IDENTIFIER, BEGIN_DATE, END_DATE, ERROR_MESSAGE)
            VALUES(v_RECORD_COUNT, v_SELECT.ACCOUNT_EXTERNAL_ID, v_SELECT.EDC_EXTERNAL_ID, v_SELECT.SUPPLIER_EXTERNAL_ID, v_PSE_EXTERNAL_IDENT, v_POOL_EXTERNAL_IDENT, v_SELECT.BEGIN_DATE, v_SELECT.END_DATE, 'Account/ESP/PSE/Pool Relationship Check');
         ELSE
            MS.IMPORT_PROVIDER_CONSUMPTION(
               p_ACCOUNT_EXTERNAL_IDENTIFIER => v_SELECT.ACCOUNT_EXTERNAL_ID,
               p_EDC_EXTERNAL_IDENTIFIER     => v_SELECT.EDC_EXTERNAL_ID,
               p_ESP_EXTERNAL_IDENTIFIER     => v_SELECT.SUPPLIER_EXTERNAL_ID,
               p_PSE_EXTERNAL_IDENTIFIER     => v_PSE_EXTERNAL_IDENT,
               p_POOL_EXTERNAL_IDENTIFIER    => v_POOL_EXTERNAL_IDENT,
               p_BEGIN_DATE                  => TO_CHAR(v_SELECT.BEGIN_DATE, c_USAGE_DATE_FORMAT),
               p_END_DATE                    => TO_CHAR(v_SELECT.END_DATE, c_USAGE_DATE_FORMAT),
               p_DATE_FORMAT                 => c_USAGE_DATE_FORMAT,
               p_BILLED_USAGE                => v_SELECT.USAGE_VAL,
               p_METERS_READ                 => v_SELECT.METERS_READ,
               p_METERED_USAGE               => v_SELECT.USAGE_VAL,
               p_PERIOD_ID                   => c_ANYTIME_PERIOD_ID,
               p_TEMPLATE_ID                 => c_ANYTIME_TOU_TEMPLATE_ID,
               p_RECEIVED_DATE               => v_SELECT.MS_DATE,
               p_TRACE_ON                    => 1,
               p_STATUS                      => v_STATUS,
               p_MESSAGE                     => v_MESSAGE);
            IF MOD(v_POST_COUNT,1000) = 0 THEN
               COMMIT;
            END IF; 
            IF v_STATUS <> GA.SUCCESS THEN
               v_ERROR_COUNT := v_ERROR_COUNT + 1; 
               LOGS.LOG_DEBUG(v_MESSAGE || '. Record: ' || v_RECORD, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
               INSERT INTO CDI_IMPORT_CONSUMPTION(ROW_COUNT, ACCOUNT_EXTERNAL_IDENTIFIER, EDC_EXTERNAL_IDENTIFIER, ESP_EXTERNAL_IDENTIFIER, PSE_EXTERNAL_IDENTIFIER, POOL_EXTERNAL_IDENTIFIER, BEGIN_DATE, END_DATE, ERROR_MESSAGE)
               VALUES(v_RECORD_COUNT, v_SELECT.ACCOUNT_EXTERNAL_ID, v_SELECT.EDC_EXTERNAL_ID, v_SELECT.SUPPLIER_EXTERNAL_ID, v_PSE_EXTERNAL_IDENT, v_POOL_EXTERNAL_IDENT, v_SELECT.BEGIN_DATE, v_SELECT.END_DATE, SUBSTR('Period Usage Import Failed With The Message: ' || v_MESSAGE, 1, 500));
            ELSE
               v_POST_COUNT := v_POST_COUNT + 1;
            END IF;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
            ERRS.LOG_AND_CONTINUE('Exception Processing Record: ' || v_RECORD);
      END;
   END LOOP;
   COMMIT;
   p_MESSAGE := 'Records Processed: ' || TO_CHAR(v_RECORD_COUNT) || ', Records Posted To The SERVICE_CONSUMPTION Table: ' || TO_CHAR(v_POST_COUNT);
   p_STATUS := GA.SUCCESS;
   IF v_ERROR_COUNT > 0 THEN
      LOGS.LOG_ERROR('Number Of Errors Detected: ' || TO_CHAR(v_ERROR_COUNT) || '. Enable Debug Mode To Log Records With Errors.', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   END IF;
   LOGS.LOG_INFO(p_MESSAGE, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.LOG_INFO(c_IMPORT_PERIOD_USAGE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
   p_STATUS := GA.SUCCESS;
EXCEPTION
   WHEN OTHERS THEN
      LOGS.LOG_ERROR(SQLERRM);
      ERRS.ABORT_PROCESS;
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
END IMPORT_PERIOD_USAGE;

PROCEDURE LOAD_PERIOD_USAGE_FILE
   (
   p_IMPORT_FILE      IN CLOB,
   p_IMPORT_FILE_PATH IN VARCHAR2,
   p_STATUS          OUT NUMBER,
   p_MESSAGE         OUT VARCHAR2
   ) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'LOAD_PERIOD_USAGE_FILE';
v_VALID_COUNT PLS_INTEGER := 0;   
v_ERROR_COUNT PLS_INTEGER := 0;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_ERROR_MESSAGE VARCHAR2(1000);   
v_CONTAINER PARSE_UTIL.BIG_STRING_TABLE_MP;
v_TOKENS PARSE_UTIL.STRING_TABLE;
v_USAGE_STAGING CDI_USAGE_STAGING%ROWTYPE;
BEGIN
   IF NOT CAN_PROCESS_RUN THEN
      p_MESSAGE := 'The ' || c_LOAD_PERIOD_USAGE_FILE || ' Process Cannot Run At This Time';
      RETURN;
   END IF;

-- Start The Process Log --
   LOGS.START_PROCESS(c_LOAD_PERIOD_USAGE_FILE);
   p_MESSAGE := '';
   p_STATUS := 0;

   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_ENERGY_STAGING';
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_USAGE_STAGING';
   
-- Parse The File Into Records --   
   PARSE_UTIL.PARSE_CLOB_INTO_LINES(p_IMPORT_FILE, v_CONTAINER);
   LOGS.LOG_INFO('Number Of Input Records: ' || TO_CHAR(v_CONTAINER.COUNT));
-- Process Each Line --
   FOR v_INDEX IN v_CONTAINER.FIRST..v_CONTAINER.LAST LOOP
      v_ERROR_MESSAGE := NULL;
      PARSE_UTIL.PARSE_DELIMITED_STRING(v_CONTAINER(v_INDEX), c_COMMA, v_TOKENS);
      IF v_TOKENS.COUNT = 9 THEN
         BEGIN
            v_USAGE_STAGING.BILL_ACCOUNT   := v_TOKENS(1);
            v_USAGE_STAGING.SERVICE_POINT  := v_TOKENS(2);
            v_USAGE_STAGING.BEGIN_DATE     := TO_DATE(v_TOKENS(3), c_DATE_FORMAT);
            v_USAGE_STAGING.END_DATE       := TO_DATE(v_TOKENS(4), c_DATE_FORMAT);
            v_USAGE_STAGING.USAGE_KWH      := v_TOKENS(5);
            v_USAGE_STAGING.DEMAND_KW      := v_TOKENS(6);
            v_USAGE_STAGING.BILL_CODE      := v_TOKENS(7);
            v_USAGE_STAGING.TIME_PERIOD    := NVL(INITCAP(TRIM(v_TOKENS(8))), c_ALL);
            v_USAGE_STAGING.REC_TS         := TO_TIMESTAMP(v_TOKENS(9), c_TIMESTAMP_FORMAT);
            v_USAGE_STAGING.BGE_BEGIN_DATE := v_USAGE_STAGING.BEGIN_DATE;
            v_USAGE_STAGING.BGE_END_DATE   := v_USAGE_STAGING.END_DATE;
            INSERT INTO CDI_USAGE_STAGING VALUES v_USAGE_STAGING;
            v_VALID_COUNT := v_VALID_COUNT + 1;
         EXCEPTION
            WHEN OTHERS THEN
               v_ERROR_MESSAGE := SQLERRM;
         END;
      ELSE
         v_ERROR_MESSAGE := 'Invalid Record Format';
      END IF;
      IF v_ERROR_MESSAGE IS NOT NULL THEN
         v_ERROR_COUNT := v_ERROR_COUNT + 1;
         LOGS.LOG_ERROR('Record ' || TO_CHAR(v_INDEX) || ': ' || v_CONTAINER(v_INDEX) || ', Error: ' || v_ERROR_MESSAGE );
      ELSE
         LOGS.LOG_DEBUG('Record ' || TO_CHAR(v_INDEX) || ': ' || v_CONTAINER(v_INDEX));
      END IF;   
   END LOOP;
   p_MESSAGE := 'Number Of Valid Records Read From File: ' || TO_CHAR(v_VALID_COUNT) || ', Number With Errors: ' || TO_CHAR(v_ERROR_COUNT);
   LOGS.LOG_INFO(p_MESSAGE);
   IF v_VALID_COUNT > 0 THEN
      VALIDATE_PERIOD_USAGE;
   END IF;
   
   DBMS_APPLICATION_INFO.SET_MODULE(MODULE_NAME => NULL, ACTION_NAME => NULL);
-- Stop The Process Log --
   LOGS.LOG_INFO(c_LOAD_PERIOD_USAGE_FILE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      DBMS_APPLICATION_INFO.SET_MODULE(MODULE_NAME => NULL, ACTION_NAME => NULL);
      ERRS.ABORT_PROCESS;
END LOAD_PERIOD_USAGE_FILE;

PROCEDURE DELETE_CANCELS_AFTER_CLOSE(p_STATUS OUT NUMBER, p_MESSAGE OUT VARCHAR2) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'DELETE_CANCELS_AFTER_CLOSE';
v_MESSAGE VARCHAR2(1000);
v_STATUS NUMBER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_DELETE_CANCELS_AFTER_CLOSE);
   DELETE CDI_ENERGY_INVALID_DATA
   WHERE BILL_ACCOUNT IN
      (SELECT DISTINCT MA.BILL_ACCOUNT
      FROM BGE_MASTER_ACCOUNT MA
         JOIN CDI_ENERGY_INVALID_DATA IV ON IV.BILL_ACCOUNT = MA.BILL_ACCOUNT AND IV.SERVICE_POINT = MA.SERVICE_POINT AND IV.PROCESS_CODE = 'ERROR' AND IV.ERROR_MESSAGE LIKE '%ACCOUNT DOES NOT EXIST%' AND IV.READ_CODE LIKE '%X')
      AND BILL_ACCOUNT NOT IN
         (SELECT DISTINCT BILL_ACCOUNT
         FROM
            (SELECT MA.BILL_ACCOUNT, MA.SERVICE_POINT, MAX(MA.TERMINATION_DATE) AS ACCTEND, MAX(IV.END_DATE) AS READEND
            FROM BGE_MASTER_ACCOUNT MA
               JOIN CDI_ENERGY_INVALID_DATA IV ON IV.BILL_ACCOUNT = MA.BILL_ACCOUNT AND IV.SERVICE_POINT = MA.SERVICE_POINT AND IV.PROCESS_CODE = 'ERROR' AND IV.ERROR_MESSAGE LIKE '%ACCOUNT DOES NOT EXIST%' AND IV.READ_CODE LIKE '%X'
            GROUP BY MA.BILL_ACCOUNT, MA.SERVICE_POINT)
         WHERE ACCTEND > READEND)
      AND PROCESS_CODE = 'ERROR'
      AND ERROR_MESSAGE LIKE '%ACCOUNT DOES NOT EXIST%'
      AND READ_CODE LIKE '%X';
   LOGS.LOG_INFO('Records Deleted From The CDI_ENERGY_INVALID_DATA Table: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   COMMIT;
-- Stop The Process Log --
   LOGS.LOG_INFO(c_DELETE_CANCELS_AFTER_CLOSE || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(v_MESSAGE, v_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      ERRS.ABORT_PROCESS;
END DELETE_CANCELS_AFTER_CLOSE;

PROCEDURE LOAD_AND_IMPORT_PERIOD_USAGE
   (
   p_BEGIN_DATE IN DATE,
   p_END_DATE   IN DATE,
   p_STATUS    OUT NUMBER,
   p_MESSAGE   OUT VARCHAR2
   ) AS
BEGIN
   LOAD_PERIOD_USAGE(p_STATUS, p_MESSAGE);
   IF p_STATUS = GA.SUCCESS THEN
      IMPORT_PERIOD_USAGE(p_BEGIN_DATE, p_END_DATE, p_STATUS, p_MESSAGE);
   END IF;
END LOAD_AND_IMPORT_PERIOD_USAGE;

PROCEDURE REPOST_USAGE_FACTOR
   (
   p_BEGIN_DATE IN DATE,
   p_END_DATE   IN DATE,
   p_STATUS    OUT NUMBER,
   p_MESSAGE   OUT VARCHAR2
   ) AS
v_PROCEDURE_NAME VARCHAR2(30) := 'REPOST_MONTHLY_USAGE_FACTOR';
v_BEGIN_DATE     DATE := TRUNC(p_BEGIN_DATE);
v_END_DATE       DATE := TRUNC(p_END_DATE);
v_SERVICE_DATE   DATE := v_BEGIN_DATE;
v_PROCESS_ID     NUMBER(12);
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_REPOST_USAGE_FACTOR);
   v_PROCESS_ID := LOGS.CURRENT_PROCESS_ID;
   LOGS.LOG_INFO(c_REPOST_USAGE_FACTOR || ', Begin Date: ' || TO_CHAR(v_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(v_END_DATE, c_DATE_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   WHILE v_SERVICE_DATE <= v_END_DATE LOOP
      LOGS.LOG_INFO('Processing Service Date: ' || TO_CHAR(v_SERVICE_DATE, c_DATE_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_MONTHLY_USAGE_CACHE';
      INSERT /*APPEND*/ INTO CDI_MONTHLY_USAGE_CACHE
      SELECT DISTINCT BILL_ACCOUNT, SERVICE_POINT, BEGIN_DATE, END_DATE, BILLED_USAGE, BILLED_KW, READ_CODE, TIME_PERIOD, BGE_TIMESTAMP, PROCESS_CODE, ERROR_MESSAGE, PROCESS_DATE, OSUSER, TEMPLATE_ID, PERIOD_ID, TEMPLATE_NAME, PERIOD_NAME, BGE_BEGIN_DATE, BGE_END_DATE, IS_ALM, STAGING_ROWID, AMI_CHECK
      FROM BGE_RTO_MONTHLY_USAGE
      WHERE v_SERVICE_DATE BETWEEN BEGIN_DATE AND END_DATE
         AND NVL(PROCESS_CODE,'VALID') NOT IN ('ERROR','CANCEL')
         AND NVL(UF_PROCESS_ID,0) < v_PROCESS_ID;
      LOGS.LOG_INFO('Number Of Records Cached: ' || TO_CHAR(SQL%ROWCOUNT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      COMMIT;
      GATHER_TABLE_STATS('CDI_MONTHLY_USAGE_CACHE');
-- Process The Selected Usage Records And Calculate An Associated Usage Factor --
      POST_MONTHLY_USAGE_FACTOR(c_REPOST_MODE);
      v_SERVICE_DATE := v_SERVICE_DATE + 1;
   END LOOP;
-- Stop The Process Log --
   LOGS.LOG_INFO(c_REPOST_USAGE_FACTOR || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      ERRS.ABORT_PROCESS;
END REPOST_USAGE_FACTOR;

END CDI_PERIOD_USAGE;
/
