CREATE OR REPLACE PACKAGE BODY CDI_SERVICE AS

-- Package Constants --

c_DATE_FORMAT                  CONSTANT VARCHAR2(32) := 'MM/DD/YYYY';
c_DATE_TIME_FORMAT             CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH24:MI:SS';
c_STATUS_SUCCESS               CONSTANT VARCHAR2(16) := 'Success';
c_STATUS_ERROR                 CONSTANT VARCHAR2(16) := 'Error';
c_STATUS_WARNING               CONSTANT VARCHAR2(16) := 'Warning';

PROCEDURE GATHER_TABLE_STATS(p_TABLE_NAME IN VARCHAR2) AS
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => USER, TABNAME => p_TABLE_NAME, ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, BLOCK_SAMPLE => TRUE, DEGREE => NULL, CASCADE => TRUE);
   LOGS.LOG_DEBUG('Gather Table Statistics On ' || p_TABLE_NAME || ', Total Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
END;

PROCEDURE ENSURE_ACCOUNT_SERVICE AS
v_COUNT PLS_INTEGER;
BEGIN
   LOGS.LOG_DEBUG('Ensure Account Service');
   MERGE INTO ACCOUNT_SERVICE T
   USING (SELECT DISTINCT ACCOUNT_ID, SERVICE_LOCATION_ID, METER_ID, AGGREGATE_ID FROM CDI_SERVICE_IDENTITY WHERE STAGING_STATUS = c_STATUS_SUCCESS AND NVL(ACCOUNT_SERVICE_ID,0) = 0) S
   ON (T.ACCOUNT_ID = S.ACCOUNT_ID AND T.SERVICE_LOCATION_ID = S.SERVICE_LOCATION_ID AND T.METER_ID = S.METER_ID AND T.AGGREGATE_ID = S.AGGREGATE_ID)
   WHEN NOT MATCHED THEN
      INSERT(ACCOUNT_SERVICE_ID, ACCOUNT_ID, SERVICE_LOCATION_ID, METER_ID, AGGREGATE_ID, ENTRY_DATE)
      VALUES(OID.NEXTVAL, S.ACCOUNT_ID, S.SERVICE_LOCATION_ID, S.METER_ID, S.AGGREGATE_ID, CURRENT_DATE);
   v_COUNT := SQL%ROWCOUNT;
   IF v_COUNT > 0 THEN 
      LOGS.LOG_DEBUG('Account Service New Records: ' || TO_CHAR(v_COUNT));
      MERGE INTO CDI_SERVICE_IDENTITY T
      USING (SELECT X.IDENTITY_ID, A.ACCOUNT_SERVICE_ID FROM CDI_SERVICE_IDENTITY X JOIN ACCOUNT_SERVICE A ON A.ACCOUNT_ID = X.ACCOUNT_ID AND A.SERVICE_LOCATION_ID = X.SERVICE_LOCATION_ID AND A.METER_ID = X.METER_ID AND A.AGGREGATE_ID = X.AGGREGATE_ID WHERE X.STAGING_STATUS = c_STATUS_SUCCESS AND NVL(X.ACCOUNT_SERVICE_ID,0) = 0) S
      ON (T.IDENTITY_ID = S.IDENTITY_ID)
      WHEN MATCHED THEN UPDATE SET T.ACCOUNT_SERVICE_ID = S.ACCOUNT_SERVICE_ID;
      LOGS.LOG_DEBUG('Account Service New Assignments: ' || TO_CHAR(SQL%ROWCOUNT));
      COMMIT;
   END IF;
END ENSURE_ACCOUNT_SERVICE;

PROCEDURE ENSURE_PROVIDER_SERVICE AS
v_COUNT PLS_INTEGER;
BEGIN
   LOGS.LOG_DEBUG('Ensure Provider Service');
   MERGE INTO PROVIDER_SERVICE T
   USING (SELECT DISTINCT EDC_ID, ESP_ID, PSE_ID FROM CDI_SERVICE_IDENTITY WHERE STAGING_STATUS = c_STATUS_SUCCESS AND NVL(PROVIDER_SERVICE_ID,0) = 0) S
   ON (T.EDC_ID = S.EDC_ID AND T.ESP_ID = S.ESP_ID AND T.PSE_ID = S.PSE_ID)
   WHEN NOT MATCHED THEN
      INSERT(PROVIDER_SERVICE_ID, EDC_ID, ESP_ID, PSE_ID, ENTRY_DATE)
      VALUES(OID.NEXTVAL, S.EDC_ID, S.ESP_ID, S.PSE_ID, CURRENT_DATE); 
   v_COUNT := SQL%ROWCOUNT;
   IF v_COUNT > 0 THEN 
      LOGS.LOG_DEBUG('Provider Service New Records: ' || TO_CHAR(v_COUNT));
      MERGE INTO CDI_SERVICE_IDENTITY T
      USING (SELECT X.IDENTITY_ID, A.PROVIDER_SERVICE_ID FROM CDI_SERVICE_IDENTITY X JOIN PROVIDER_SERVICE A ON A.EDC_ID = X.EDC_ID AND A.ESP_ID = X.ESP_ID AND A.PSE_ID = X.PSE_ID WHERE X.STAGING_STATUS = c_STATUS_SUCCESS AND NVL(X.PROVIDER_SERVICE_ID,0) = 0) S
      ON (T.IDENTITY_ID = S.IDENTITY_ID)
      WHEN MATCHED THEN UPDATE SET T.PROVIDER_SERVICE_ID = S.PROVIDER_SERVICE_ID;
      LOGS.LOG_DEBUG('Provider Service New Assignments: ' || TO_CHAR(SQL%ROWCOUNT));
      COMMIT;
   END IF;
END ENSURE_PROVIDER_SERVICE;

PROCEDURE ENSURE_SERVICE_DELIVERY AS
v_COUNT PLS_INTEGER;
BEGIN
   LOGS.LOG_DEBUG('Ensure Service Delivery');
   MERGE INTO SERVICE_DELIVERY T
   USING(SELECT DISTINCT POOL_ID, SERVICE_POINT_ID, SERVICE_ZONE_ID, SCHEDULE_GROUP_ID, SC_ID, SUPPLY_TYPE, IS_BUG, IS_WHOLESALE, IS_AGGREGATE_POOL FROM CDI_SERVICE_IDENTITY WHERE STAGING_STATUS = c_STATUS_SUCCESS AND NVL(SERVICE_DELIVERY_ID,0) = 0) S
   ON (T.POOL_ID = S.POOL_ID AND T.SERVICE_POINT_ID = S.SERVICE_POINT_ID AND T.SERVICE_ZONE_ID = S.SERVICE_ZONE_ID AND T.SCHEDULE_GROUP_ID = S.SCHEDULE_GROUP_ID AND T.SC_ID = S.SC_ID AND T.SUPPLY_TYPE = S.SUPPLY_TYPE AND T.IS_BUG = S.IS_BUG AND T.IS_WHOLESALE = S.IS_WHOLESALE AND T.IS_AGGREGATE_POOL = S.IS_AGGREGATE_POOL)
   WHEN NOT MATCHED THEN
      INSERT(SERVICE_DELIVERY_ID, POOL_ID, SERVICE_POINT_ID, SERVICE_ZONE_ID, SCHEDULE_GROUP_ID, SC_ID, SUPPLY_TYPE, IS_BUG, IS_WHOLESALE, IS_AGGREGATE_POOL, ENTRY_DATE)
      VALUES(OID.NEXTVAL, S.POOL_ID, S.SERVICE_POINT_ID, S.SERVICE_ZONE_ID, S.SCHEDULE_GROUP_ID, S.SC_ID, S.SUPPLY_TYPE, S.IS_BUG, S.IS_WHOLESALE, S.IS_AGGREGATE_POOL, CURRENT_DATE);
   v_COUNT := SQL%ROWCOUNT;
   IF v_COUNT > 0 THEN 
      COMMIT; 
      LOGS.LOG_DEBUG('Service Delivery New Records: ' || TO_CHAR(v_COUNT));
      MERGE INTO CDI_SERVICE_IDENTITY T
      USING(SELECT X.IDENTITY_ID, A.SERVICE_DELIVERY_ID FROM CDI_SERVICE_IDENTITY X JOIN SERVICE_DELIVERY A ON A.POOL_ID = X.POOL_ID AND A.SERVICE_POINT_ID = X.SERVICE_POINT_ID AND A.SERVICE_ZONE_ID = X.SERVICE_ZONE_ID AND A.SCHEDULE_GROUP_ID = X.SCHEDULE_GROUP_ID AND A.SC_ID = X.SC_ID AND A.SUPPLY_TYPE = X.SUPPLY_TYPE AND A.IS_BUG = X.IS_BUG AND A.IS_WHOLESALE = X.IS_WHOLESALE WHERE X.STAGING_STATUS = c_STATUS_SUCCESS AND NVL(X.SERVICE_DELIVERY_ID,0) = 0) S
      ON (T.IDENTITY_ID = S.IDENTITY_ID)
      WHEN MATCHED THEN UPDATE SET T.SERVICE_DELIVERY_ID = S.SERVICE_DELIVERY_ID;
      LOGS.LOG_DEBUG('Service Delivery New Assignments: ' || TO_CHAR(SQL%ROWCOUNT));
      COMMIT;
   END IF;
END ENSURE_SERVICE_DELIVERY;

PROCEDURE ENSURE_SERVICE(p_CAST_CONTEXT IN CAST_CONTEXT_TYPE) AS
v_COUNT PLS_INTEGER;
BEGIN
   LOGS.LOG_DEBUG('Ensure Service');
   MERGE INTO SERVICE T
   USING (SELECT DISTINCT PROVIDER_SERVICE_ID, ACCOUNT_SERVICE_ID, SERVICE_DELIVERY_ID FROM CDI_SERVICE_IDENTITY WHERE STAGING_STATUS = c_STATUS_SUCCESS AND NVL(SERVICE_ID,0) = 0) S
   ON (T.MODEL_ID = GA.DEFAULT_MODEL AND T.SCENARIO_ID = GA.BASE_SCENARIO_ID AND T.AS_OF_DATE = CONSTANTS.LOW_DATE AND T.PROVIDER_SERVICE_ID = S.PROVIDER_SERVICE_ID AND T.ACCOUNT_SERVICE_ID = S.ACCOUNT_SERVICE_ID AND T.SERVICE_DELIVERY_ID = S.SERVICE_DELIVERY_ID)
   WHEN NOT MATCHED THEN
      INSERT(SERVICE_ID, MODEL_ID, SCENARIO_ID, AS_OF_DATE, PROVIDER_SERVICE_ID, ACCOUNT_SERVICE_ID, SERVICE_DELIVERY_ID, ENTRY_DATE)
      VALUES(SID.NEXTVAL, GA.DEFAULT_MODEL, GA.BASE_SCENARIO_ID, CONSTANTS.LOW_DATE, S.PROVIDER_SERVICE_ID, S.ACCOUNT_SERVICE_ID, S.SERVICE_DELIVERY_ID, CURRENT_DATE);
   v_COUNT := SQL%ROWCOUNT;
   IF v_COUNT > 0 THEN 
      COMMIT;
      LOGS.LOG_DEBUG('Service New Records: ' || TO_CHAR(v_COUNT));
      MERGE INTO CDI_SERVICE_IDENTITY T
      USING(SELECT X.IDENTITY_ID, A.SERVICE_ID FROM CDI_SERVICE_IDENTITY X JOIN SERVICE A ON A.MODEL_ID = GA.DEFAULT_MODEL AND A.SCENARIO_ID = GA.BASE_SCENARIO_ID AND A.AS_OF_DATE = CONSTANTS.LOW_DATE AND A.PROVIDER_SERVICE_ID = X.PROVIDER_SERVICE_ID AND A.ACCOUNT_SERVICE_ID = X.ACCOUNT_SERVICE_ID AND A.SERVICE_DELIVERY_ID = X.SERVICE_DELIVERY_ID WHERE X.STAGING_STATUS = c_STATUS_SUCCESS AND NVL(X.SERVICE_ID,0) = 0) S
      ON (T.IDENTITY_ID = S.IDENTITY_ID)
      WHEN MATCHED THEN UPDATE SET T.SERVICE_ID = S.SERVICE_ID, T.STAGING_MESSAGE = 'New Service Assignment';
      LOGS.LOG_DEBUG('Service New Assignments: ' || TO_CHAR(SQL%ROWCOUNT));
      COMMIT;
   END IF;
END ENSURE_SERVICE;

PROCEDURE SET_LOSS_FACTOR(p_SERVICE_DATE IN DATE) AS
CURSOR c_SELECT IS SELECT DISTINCT LOSS_FACTOR_ID FROM CDI_SERVICE_IDENTITY WHERE STAGING_STATUS = c_STATUS_SUCCESS AND LOSS_FACTOR_ID IS NOT NULL;
v_DX_EXPANSION_FACTOR NUMBER(8,6);
v_TX_EXPANSION_FACTOR NUMBER(8,6);
v_COUNT     PLS_INTEGER := 0;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      v_DX_EXPANSION_FACTOR := CALC_UTIL.GET_LOSS_FACTOR(v_SELECT.LOSS_FACTOR_ID, p_SERVICE_DATE, p_LOSS_TYPE => CALC_UTIL.c_LOSS_TYPE_DISTRIBUTION, p_FACTOR_TYPE => CALC_UTIL.c_FACTOR_TYPE_EXPANSION);
      v_TX_EXPANSION_FACTOR := CALC_UTIL.GET_LOSS_FACTOR(v_SELECT.LOSS_FACTOR_ID, p_SERVICE_DATE, p_LOSS_TYPE => CALC_UTIL.c_LOSS_TYPE_TRANSMISSION, p_FACTOR_TYPE => CALC_UTIL.c_FACTOR_TYPE_EXPANSION);
      UPDATE CDI_SERVICE_IDENTITY SET DX_EXPANSION_FACTOR = v_DX_EXPANSION_FACTOR, TX_EXPANSION_FACTOR = v_TX_EXPANSION_FACTOR
      WHERE LOSS_FACTOR_ID = v_SELECT.LOSS_FACTOR_ID;
      v_COUNT := v_COUNT + SQL%ROWCOUNT; 
   END LOOP;
   COMMIT;
   LOGS.LOG_DEBUG('Number Of Loss Factors Set: ' || TO_CHAR(SQL%ROWCOUNT));
   LOGS.LOG_DEBUG('Set Loss Factor Complete. Total Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
END SET_LOSS_FACTOR;

PROCEDURE ENSURE_SERVICE_IDENTITY AS
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_CAST_CONTEXT CAST_CONTEXT_TYPE := CAST_CONTEXT_TYPE(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
BEGIN
   v_CAST_CONTEXT.MODEL_ID := GA.ELECTRIC_MODEL;
   v_CAST_CONTEXT.SCENARIO_ID := GA.BASE_SCENARIO_ID;
   v_CAST_CONTEXT.OUTPUT_AS_OF_DATE := CONSTANTS.LOW_DATE;
   ENSURE_ACCOUNT_SERVICE;
   ENSURE_PROVIDER_SERVICE;
   ENSURE_SERVICE_DELIVERY;
   ENSURE_SERVICE(v_CAST_CONTEXT);
   GATHER_TABLE_STATS('ACCOUNT_SERVICE');
   GATHER_TABLE_STATS('PROVIDER_SERVICE');
   GATHER_TABLE_STATS('SERVICE_DELIVERY');
   GATHER_TABLE_STATS('SERVICE');
   LOGS.LOG_INFO('Ensure Service Identity Complete. Total Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
END ENSURE_SERVICE_IDENTITY;

END CDI_SERVICE;
/
