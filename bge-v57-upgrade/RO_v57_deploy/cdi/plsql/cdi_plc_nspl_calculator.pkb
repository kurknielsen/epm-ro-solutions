CREATE OR REPLACE PACKAGE BODY CDI_PLC_NSPL_CALCULATOR AS

c_PACKAGE_NAME                 CONSTANT VARCHAR2(32) := 'CDI_PLC_NSPL_CALCULATOR'; 
c_IMPORT_ALM_ADD_BACK_FILE     CONSTANT VARCHAR2(64) := 'CDI: Import ALM Add Back File';
c_COMPUTE_ANNUAL_PLC_NSPL      CONSTANT VARCHAR2(64) := 'CDI: Compute Annual PLC/NSPL';
c_ACCEPT_PLC_NSPL_TICKETS      CONSTANT VARCHAR2(64) := 'CDI: Accept PLC/NSPL Tickets';
c_CALCULATE_PLC_NSPL_TICKETS   CONSTANT VARCHAR2(64) := 'CDI: Calculate PLC/NSPL Tickets';
c_ASSIGN_DEFAULT_PLC_TAG       CONSTANT VARCHAR2(64) := 'CDI: Assign Default PLC Tag';
c_LIBRARY_NAME                 CONSTANT VARCHAR2(32) := 'ALM Impact Profiles';
c_CALENDAR_TYPE                CONSTANT VARCHAR2(32) := 'Settlement';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'MM/DD/YYYY';
c_DATE_TIME_FORMAT             CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH24:MI:SS';
c_DATE_TIME_FORMAT_HH          CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH24';
c_DATE_TIME_FORMAT_HH_MI       CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH24:MI';
c_PLC_NAME                     CONSTANT VARCHAR2(16) := 'ICAP';
c_NSPL_NAME                    CONSTANT VARCHAR2(16) := 'Network Service';
c_MAX_DATE_RANGE               CONSTANT VARCHAR2(16) := NVL(GET_DICTIONARY_VALUE('MAX_DATE_RANGE_IN_DAYS', GA.GLOBAL_MODEL, 'PROFILING', 'TOU USAGE FACTOR'),'30');
c_MAX_USAGE_DAYS               CONSTANT NUMBER(2)    := 95;
c_CRLF                         CONSTANT CHAR(2)      := UTL_TCP.CRLF;
c_COMMA                        CONSTANT CHAR(1)      := ',';

l_PLC_ID                       PLS_INTEGER;
l_NSPL_ID                      PLS_INTEGER;
l_ANYTIME_TEMPLATE_ID          PLS_INTEGER := 1;
l_ANYTIME_PERIOD_ID            PLS_INTEGER := 1;
l_ALL_TEMPLATE_ID              PLS_INTEGER := 1;
l_ALL_PERIOD_ID                PLS_INTEGER := 1;
l_MESSAGE                      VARCHAR2(1000);
l_STATUS                       NUMBER;
l_IS_CACHED                    BOOLEAN := FALSE;

PROCEDURE TRUNCATE_PLC_TABLES IS
BEGIN
   LOGS.LOG_INFO('Truncate PLC Tables: CDI_TOU_USAGE_FACTORS_SHORT, CDI_PLC_ICAP_DETAIL, CDI_PLC_ICAP_INT_DETAIL');
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_TOU_USAGE_FACTORS_SHORT';
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_ICAP_DETAIL';
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_ICAP_INT_DETAIL';
END TRUNCATE_PLC_TABLES;

PROCEDURE TRUNCATE_NSPL_TABLES IS
BEGIN
  LOGS.LOG_INFO('Truncate NSPL Tables: CDI_TOU_USAGE_FACTORS_SHORT, CDI_PLC_TX_DETAIL, CDI_PLC_TX_INT_DETAIL');
  EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_TOU_USAGE_FACTORS_SHORT';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_TX_DETAIL';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_TX_INT_DETAIL';
END TRUNCATE_NSPL_TABLES;

PROCEDURE CACHE_ANCILLARY_SERVICE_ID AS
BEGIN
   IF NOT l_IS_CACHED THEN
      SELECT NVL(MAX(ANCILLARY_SERVICE_ID), CONSTANTS.NOT_ASSIGNED) INTO l_PLC_ID  FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_PLC_NAME;
      ASSERT(l_PLC_ID <> CONSTANTS.NOT_ASSIGNED, 'Ancillary Service Not Defined For: ' || c_PLC_NAME);
      SELECT MAX(ANCILLARY_SERVICE_ID) INTO l_NSPL_ID FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME = c_NSPL_NAME;
      ASSERT(l_NSPL_ID <> CONSTANTS.NOT_ASSIGNED, 'Ancillary Service Not Defined For: ' || c_NSPL_NAME);
      l_IS_CACHED := TRUE;
   END IF;
   LOGS.LOG_INFO(c_PLC_NAME || ' Ancillary Service Id: ' || TO_CHAR(l_PLC_ID));
   LOGS.LOG_INFO(c_NSPL_NAME || ' Ancillary Service Id: ' || TO_CHAR(l_NSPL_ID));
END CACHE_ANCILLARY_SERVICE_ID;

PROCEDURE POPULATE_PLC_INTERVAL_DETAIL(p_PEAK_DATE IN DATE) AS
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   INSERT INTO CDI_PLC_ICAP_INT_DETAIL(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_ID, PROFILE_NAME, PEAK_DATE, POINT_VAL, ALM_VAL, AV_LOSS_FACTOR, USAGE_FACTOR, DEMAND_KW, CREATE_DTS, LAST_UPDATE_DTS, OBLIGATION_FACTOR, HOURLY_PLC)
   SELECT /*+ ORDERED FULL(A) */
      A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, A.IDR_STATUS, A.RATE_CLASS, A.VOLTAGE_LEVEL, NULL, NULL, E.LOAD_DATE, E.LOAD_VAL, NULL, NULL, NULL, NULL, SYSDATE, SYSDATE, 1, NULL
   FROM BGE_MASTER_ACCOUNT A
      JOIN ACCOUNT         B ON B.ACCOUNT_METER_EXT_IDENTIFIER = A.STUDY_ID 
      JOIN ACCOUNT_SERVICE C ON C.ACCOUNT_ID = B.ACCOUNT_ID AND C.METER_ID = CONSTANTS.NOT_ASSIGNED AND C.AGGREGATE_ID = CONSTANTS.NOT_ASSIGNED 
      JOIN SERVICE         D ON D.ACCOUNT_SERVICE_ID = C.ACCOUNT_SERVICE_ID AND D.MODEL_ID = GA.ELECTRIC_MODEL AND D.SCENARIO_ID = GA.BASE_SCENARIO_ID AND D.AS_OF_DATE = CONSTANTS.LOW_DATE 
      JOIN SERVICE_LOAD    E ON E.SERVICE_ID = D.SERVICE_ID AND E.SERVICE_CODE = CONSTANTS.CODE_ACTUAL AND E.LOAD_DATE = p_PEAK_DATE
   WHERE TRUNC(p_PEAK_DATE) BETWEEN A.EFFECTIVE_DATE AND NVL(A.TERMINATION_DATE, CONSTANTS.HIGH_DATE)
      AND A.IDR_STATUS = 'Y';
   COMMIT;
   LOGS.LOG_INFO('Populate PLC Interval Detail Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
END POPULATE_PLC_INTERVAL_DETAIL;

PROCEDURE POPULATE_NSPL_INTERVAL_DETAIL(p_PEAK_DATE IN DATE) AS
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   INSERT INTO CDI_PLC_TX_INT_DETAIL(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_ID, PROFILE_NAME, PEAK_DATE, POINT_VAL, ALM_VAL, AV_LOSS_FACTOR, USAGE_FACTOR, DEMAND_KW, CREATE_DTS, LAST_UPDATE_DTS, OBLIGATION_FACTOR, HOURLY_PLC)
   SELECT /*+ ORDERED FULL(A) */
      A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, A.IDR_STATUS, A.RATE_CLASS, A.VOLTAGE_LEVEL, NULL, NULL, E.LOAD_DATE, E.LOAD_VAL, NULL, NULL, NULL, NULL, SYSDATE, SYSDATE, 1, NULL
   FROM BGE_MASTER_ACCOUNT A
      JOIN ACCOUNT         B ON B.ACCOUNT_METER_EXT_IDENTIFIER = A.STUDY_ID 
      JOIN ACCOUNT_SERVICE C ON C.ACCOUNT_ID = B.ACCOUNT_ID AND C.METER_ID = CONSTANTS.NOT_ASSIGNED AND C.AGGREGATE_ID = CONSTANTS.NOT_ASSIGNED 
      JOIN SERVICE         D ON D.ACCOUNT_SERVICE_ID = C.ACCOUNT_SERVICE_ID AND D.MODEL_ID = GA.ELECTRIC_MODEL AND D.SCENARIO_ID = GA.BASE_SCENARIO_ID AND D.AS_OF_DATE = CONSTANTS.LOW_DATE 
      JOIN SERVICE_LOAD    E ON E.SERVICE_ID = D.SERVICE_ID AND E.SERVICE_CODE = CONSTANTS.CODE_ACTUAL AND E.LOAD_DATE = p_PEAK_DATE
   WHERE TRUNC(p_PEAK_DATE) BETWEEN A.EFFECTIVE_DATE AND NVL(A.TERMINATION_DATE, CONSTANTS.HIGH_DATE)
      AND A.IDR_STATUS = 'Y';
   COMMIT;
   LOGS.LOG_INFO('Populate NSPL Interval Detail Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
END POPULATE_NSPL_INTERVAL_DETAIL;

PROCEDURE UPDATE_ALM_PLC_INTERVAL(p_PEAK_DATE IN DATE) AS
v_HOUR NUMBER(2) := TO_NUMBER(TO_CHAR(p_PEAK_DATE, 'HH24')) ;
v_COUNT PLS_INTEGER;
CURSOR c_SELECT IS
   SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, DECODE(v_HOUR,1,HOUR_1,2,HOUR_2,3,HOUR_3,4,HOUR_4,5,HOUR_5,6,HOUR_6,7,HOUR_7,8,HOUR_8,9,HOUR_9,10,HOUR_10,11,HOUR_11,12,HOUR_12,13,HOUR_13,14,HOUR_14,15,HOUR_15,16,HOUR_16,17,HOUR_17,18,HOUR_18,19,HOUR_19,20,HOUR_20,21,HOUR_21,22,HOUR_22,23,HOUR_23,24,HOUR_24,HOUR_1) "ALM_VAL"
   FROM CDI_PLC_ALMBACKS
   WHERE ADD_DATE = TRUNC(p_PEAK_DATE);
BEGIN
   SELECT COUNT(*) INTO v_COUNT FROM CDI_PLC_ALMBACKS WHERE ADD_DATE = TRUNC(p_PEAK_DATE);
   IF v_COUNT = 0 THEN
      LOGS.LOG_WARN('No ALM AddBacks Found For ' || TO_CHAR(p_PEAK_DATE, c_DATE_TIME_FORMAT_HH));
   ELSE
      v_COUNT := 0;
      FOR v_SELECT IN c_SELECT LOOP
         UPDATE CDI_PLC_ICAP_INT_DETAIL SET ALM_VAL = v_SELECT.ALM_VAL
         WHERE BILL_ACCOUNT = v_SELECT.BILL_ACCOUNT
            AND SERVICE_POINT = v_SELECT.SERVICE_POINT
            AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER
            AND PEAK_DATE = p_PEAK_DATE;
         v_COUNT := v_COUNT + 1;
         IF MOD(v_COUNT, 5000) = 0 THEN
            COMMIT;
            LOGS.LOG_INFO('ALM Updates On ' || TO_CHAR(SYSDATE, c_DATE_TIME_FORMAT) || ', Count: ' || TO_CHAR(v_COUNT));
          END IF;
      END LOOP;
      COMMIT;
   END IF;
END UPDATE_ALM_PLC_INTERVAL ;

PROCEDURE POPULATE_PLC_DETAIL(p_PEAK_DATE IN DATE) AS --, p_TEMPLATE_ID IN NUMBER, p_PERIOD_ID IN NUMBER) AS
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
  INSERT INTO CDI_PLC_ICAP_DETAIL(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_ID, PROFILE_NAME, PEAK_DATE, POINT_VAL, ALM_VAL, AV_LOSS_FACTOR, USAGE_FACTOR, DEMAND_KW, CREATE_DTS, LAST_UPDATE_DTS, OBLIGATION_FACTOR, HOURLY_PLC)
  SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_ID, PROFILE_NAME, POINT_DATE, POINT_VAL, NULL, NULL, USAGE_FACTOR, BILLED_KW, SYSDATE, SYSDATE, NULL, NULL
  FROM
     (SELECT /*+ ORDERED PARALLEL(X,8) FULL(A) USE_HASH(X,A) USE_HASH(A,B) USE_HASH(B,C) USE_HASH(C,D) USE_HASH(D,E)  USE_HASH(E,F) */
        A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, A.IDR_STATUS, A.RATE_CLASS, A.VOLTAGE_LEVEL, B.PROFILE_ID, B.PROFILE_NAME, C.POINT_DATE,C.POINT_VAL, X.BILLED_KW, X.USAGE_FACTOR, ROW_NUMBER() OVER(PARTITION BY A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, A.IDR_STATUS, A.RATE_CLASS, A.VOLTAGE_LEVEL, B.PROFILE_ID, B.PROFILE_NAME, C.POINT_DATE, C.POINT_VAL, X.BILLED_KW ORDER BY X.BILLED_KW) AS RN
      FROM BGE_RTO_MONTHLY_USAGE X
         JOIN BGE_MASTER_ACCOUNT    A ON A.BILL_ACCOUNT = X.BILL_ACCOUNT AND A.SERVICE_POINT = X.SERVICE_POINT AND TRUNC(p_PEAK_DATE) BETWEEN A.EFFECTIVE_DATE AND NVL(A.TERMINATION_DATE, CONSTANTS.HIGH_DATE) AND A.IDR_STATUS = 'N'
         JOIN LOAD_PROFILE          B ON B.PROFILE_NAME = A.RATE_CLASS
         JOIN LOAD_PROFILE_POINT    C ON C.PROFILE_ID = B.PROFILE_ID AND C.POINT_DATE = p_PEAK_DATE
      WHERE SUBSTR(TRIM(X.READ_CODE),2,1) <> 'X'
         AND SUBSTR(TRIM(X.READ_CODE),1,2) <> 'AL'
         AND TRUNC(p_PEAK_DATE) BETWEEN X.BEGIN_DATE AND NVL(X.END_DATE, CONSTANTS.HIGH_DATE)
         AND X.END_DATE - X.BEGIN_DATE <= c_MAX_USAGE_DAYS
         AND UPPER(NVL(X.PROCESS_CODE,'X')) NOT IN ('CANCEL', 'ERROR'))
   WHERE RN = 1;
   COMMIT;
   LOGS.LOG_INFO('POPULATE_PLC_DETAIL Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
END POPULATE_PLC_DETAIL;

PROCEDURE POPULATE_NSPL_DETAIL(p_PEAK_DATE IN DATE) AS -- p_TEMPLATE_ID IN NUMBER, p_PERIOD_ID IN NUMBER) AS
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   INSERT INTO CDI_PLC_TX_DETAIL(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_ID, PROFILE_NAME, PEAK_DATE, POINT_VAL, ALM_VAL, AV_LOSS_FACTOR, PEAK_LOSS_FACTOR, USAGE_FACTOR, DEMAND_KW, CREATE_DTS, LAST_UPDATE_DTS, OBLIGATION_FACTOR, HOURLY_PLC)
   SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_ID, PROFILE_NAME, POINT_DATE, POINT_VAL, NULL, NULL, NULL, USAGE_FACTOR, BILLED_KW, SYSDATE, SYSDATE, NULL, NULL
   FROM
      (SELECT /*+ ORDERED PARALLEL(Z,8) FULL(A) USE_HASH(Z,A) USE_HASH(A,B) USE_HASH(B,C) USE_HASH(C,D) USE_HASH(D,E)  USE_HASH(E,F) */
         A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, A.IDR_STATUS, A.RATE_CLASS, A.VOLTAGE_LEVEL, B.PROFILE_ID, B.PROFILE_NAME, C.POINT_DATE, C.POINT_VAL, X.BILLED_KW, X.USAGE_FACTOR, ROW_NUMBER() OVER(PARTITION BY A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, A.IDR_STATUS, A.RATE_CLASS, A.VOLTAGE_LEVEL, B.PROFILE_ID, B.PROFILE_NAME, C.POINT_DATE, C.POINT_VAL, X.BILLED_KW ORDER BY X.BILLED_KW) AS RN
      FROM BGE_RTO_MONTHLY_USAGE X
         JOIN BGE_MASTER_ACCOUNT    A ON A.BILL_ACCOUNT = X.BILL_ACCOUNT AND A.SERVICE_POINT = X.SERVICE_POINT AND TRUNC(p_PEAK_DATE) BETWEEN A.EFFECTIVE_DATE AND NVL(A.TERMINATION_DATE, CONSTANTS.HIGH_DATE) AND A.IDR_STATUS = 'N'
         JOIN LOAD_PROFILE          B ON B.PROFILE_NAME = A.RATE_CLASS
         JOIN LOAD_PROFILE_POINT    C ON C.PROFILE_ID = B.PROFILE_ID AND C.POINT_DATE = p_PEAK_DATE
      WHERE SUBSTR(TRIM(X.READ_CODE),2,1) <> 'X'
         AND SUBSTR(TRIM(X.READ_CODE),1,2) <> 'AL'
         AND TRUNC(p_PEAK_DATE) BETWEEN X.BEGIN_DATE AND NVL(X.END_DATE, CONSTANTS.HIGH_DATE)
         AND X.END_DATE - X.BEGIN_DATE <= c_MAX_USAGE_DAYS
         AND UPPER(NVL(X.PROCESS_CODE,' ')) NOT IN ('CANCEL', 'ERROR'))
   WHERE RN=1;
   COMMIT;
   LOGS.LOG_INFO('Populate NSPL Detail Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
END POPULATE_NSPL_DETAIL;

PROCEDURE GENERATE_PLC_BUILDUPS(p_PLAN_YEAR IN DATE) AS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_ICAP_BUILDUPS';
   INSERT INTO CDI_PLC_ICAP_BUILDUPS(PEAK_DATE, GROUP_NAME, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_SUM, ALM_VAL, LOSS_FACTOR, USAGE_FACTOR_SUM, DEMAND_SUM, BOTTOM_SUM, PJM_LOAD, LAST_UPDATE_DTS, SCALING_FACTOR, OBLIGATION_FACTOR)
   WITH PEAK_DATES AS (SELECT FROM_CUT(PEAK_DATE, GA.LOCAL_TIME_ZONE) PEAK_DATE, PEAK_VAL FROM ANCILLARY_SERVICE_AREA_PEAK WHERE ANCILLARY_SERVICE_ID = l_PLC_ID AND p_PLAN_YEAR BETWEEN BEGIN_DATE AND END_DATE)
   SELECT A.PEAK_DATE, 'PROFILE_LOAD', 'N', RATE_CLASS, VOLTAGE_LEVEL, POINT_VAL, NULL, AV_LOSS_FACTOR, SUM(USAGE_FACTOR), SUM(DEMAND_KW), POINT_VAL*SUM(USAGE_FACTOR)*AV_LOSS_FACTOR "BOTTOM_SUM", P.PEAK_VAL, SYSDATE, NULL, NULL
   FROM CDI_PLC_ICAP_DETAIL A
      JOIN PEAK_DATES P ON P.PEAK_DATE = A.PEAK_DATE
   WHERE DEMAND_KW = 0
--      AND  A. RATE_CLASS <> 'GL'
      AND  A.PEAK_DATE =  P.PEAK_DATE
   GROUP BY A.PEAK_DATE, RATE_CLASS, VOLTAGE_LEVEL, POINT_VAL, AV_LOSS_FACTOR, P.PEAK_VAL
--   UNION ALL
--   SELECT A.PEAK_DATE, 'PROFILE_DEMAND', 'N', RATE_CLASS, VOLTAGE_LEVEL, POINT_VAL, NULL, AV_LOSS_FACTOR, SUM(USAGE_FACTOR), SUM(DEMAND_KW),  POINT_VAL*SUM(USAGE_FACTOR)*AV_LOSS_FACTOR "BOTTOM_SUM" , P.PEAK_VAL, SYSDATE, NULL, NULL
--   FROM CDI_PLC_ICAP_DETAIL A
--      JOIN PEAK_DATES P ON P.PEAK_DATE = A.PEAK_DATE
--   WHERE (DEMAND_KW > 0 OR RATE_CLASS = 'GL')
--   GROUP BY A.PEAK_DATE, RATE_CLASS, VOLTAGE_LEVEL, POINT_VAL, AV_LOSS_FACTOR, P.PEAK_VAL
   UNION ALL
   SELECT A.PEAK_DATE, 'INTERVAL', 'Y', RATE_CLASS, VOLTAGE_LEVEL, SUM(POINT_VAL), SUM(NVL(ALM_VAL,0)), AV_LOSS_FACTOR, 1, NULL, (SUM(POINT_VAL+NVL(ALM_VAL,0))*AVG(AV_LOSS_FACTOR)) "BOTTOM_SUM" , P.PEAK_VAL, SYSDATE, NULL, 1
   FROM CDI_PLC_ICAP_INT_DETAIL A
      JOIN PEAK_DATES P ON P.PEAK_DATE = A.PEAK_DATE
   GROUP BY A.PEAK_DATE, RATE_CLASS, VOLTAGE_LEVEL, AV_LOSS_FACTOR, P.PEAK_VAL;
   COMMIT;
END GENERATE_PLC_BUILDUPS;

PROCEDURE GENERATE_NSPL_BUILDUPS(p_PLAN_YEAR IN DATE) AS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_TX_BUILDUPS';
   INSERT INTO CDI_PLC_TX_BUILDUPS(PEAK_DATE, GROUP_NAME, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_SUM, ALM_VAL, AV_LOSS_FACTOR, PEAK_LOSS_FACTOR, USAGE_FACTOR_SUM, DEMAND_SUM, BOTTOM_SUM, ALM_WITH_LOSSES, PJM_LOAD, LAST_UPDATE_DTS, SCALING_FACTOR, OBLIGATION_FACTOR)
   WITH PEAK_DATES AS (SELECT FROM_CUT(PEAK_DATE, GA.LOCAL_TIME_ZONE) PEAK_DATE, PEAK_VAL FROM ANCILLARY_SERVICE_AREA_PEAK WHERE ANCILLARY_SERVICE_ID = l_NSPL_ID AND p_PLAN_YEAR BETWEEN BEGIN_DATE AND END_DATE)
   SELECT A.PEAK_DATE, 'PROFILE_LOAD', 'N', RATE_CLASS, VOLTAGE_LEVEL, POINT_VAL, SUM(ALM_VAL), AV_LOSS_FACTOR, PEAK_LOSS_FACTOR, SUM(USAGE_FACTOR), SUM(DEMAND_KW), ((POINT_VAL*SUM(USAGE_FACTOR))-(NVL(SUM(ALM_VAL),0)))*AV_LOSS_FACTOR "BOTTOM_SUM", NVL(SUM(ALM_VAL),0)*PEAK_LOSS_FACTOR, P.PEAK_VAL, SYSDATE, NULL, NULL
   FROM CDI_PLC_TX_DETAIL A
      JOIN PEAK_DATES P ON P.PEAK_DATE = A.PEAK_DATE
   WHERE A.DEMAND_KW = 0
--      AND  A. RATE_CLASS <> 'GL'
   GROUP BY A.PEAK_DATE, RATE_CLASS, VOLTAGE_LEVEL, POINT_VAL, AV_LOSS_FACTOR, PEAK_LOSS_FACTOR, P.PEAK_VAL
--   UNION ALL
--   SELECT A.PEAK_DATE, 'PROFILE_DEMAND', 'N',RATE_CLASS, VOLTAGE_LEVEL, POINT_VAL, SUM(ALM_VAL), AV_LOSS_FACTOR, PEAK_LOSS_FACTOR, SUM(USAGE_FACTOR), SUM(DEMAND_KW), ((POINT_VAL*SUM(USAGE_FACTOR))- NVL(SUM(ALM_VAL),0))*AV_LOSS_FACTOR "BOTTOM_SUM", NVL(SUM(ALM_VAL),0)*PEAK_LOSS_FACTOR, P.PEAK_VAL, SYSDATE, NULL, NULL
--   FROM CDI_PLC_TX_DETAIL A
--      JOIN PEAK_DATES P ON P.PEAK_DATE = A.PEAK_DATE
--   WHERE (DEMAND_KW > 0 OR RATE_CLASS = 'GL')
--   GROUP BY A.PEAK_DATE, RATE_CLASS, VOLTAGE_LEVEL, POINT_VAL,  AV_LOSS_FACTOR, PEAK_LOSS_FACTOR, P.PEAK_VAL
   UNION ALL
   SELECT A.PEAK_DATE, 'INTERVAL', 'Y', RATE_CLASS, VOLTAGE_LEVEL, SUM(POINT_VAL), SUM(ALM_VAL), AV_LOSS_FACTOR, PEAK_LOSS_FACTOR, 1, SUM(DEMAND_KW), ((SUM(POINT_VAL)*1)-SUM(NVL(ALM_VAL,0)))*AV_LOSS_FACTOR "BOTTOM_SUM", SUM(NVL(ALM_VAL,0))*PEAK_LOSS_FACTOR, P.PEAK_VAL, SYSDATE, NULL, 1
   FROM CDI_PLC_TX_INT_DETAIL A
      JOIN PEAK_DATES P ON P.PEAK_DATE = A.PEAK_DATE
   GROUP BY A.PEAK_DATE, RATE_CLASS, VOLTAGE_LEVEL, AV_LOSS_FACTOR, PEAK_LOSS_FACTOR, P.PEAK_VAL;
   COMMIT;
END GENERATE_NSPL_BUILDUPS;

PROCEDURE CALCULATE_PLC_SCALE_FACTOR AS
CURSOR c_SELECT IS SELECT PEAK_DATE, ROUND((AVG(PJM_LOAD)*1000/SUM(BOTTOM_SUM)),7) "SCALING_FACTOR" FROM CDI_PLC_ICAP_BUILDUPS GROUP BY PEAK_DATE;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_ICAP_BUILDUPS SET SCALING_FACTOR = v_SELECT.SCALING_FACTOR WHERE PEAK_DATE = v_SELECT.PEAK_DATE;
   END LOOP;
   COMMIT;
END CALCULATE_PLC_SCALE_FACTOR;

PROCEDURE CALCULATE_NSPL_SCALE_FACTOR AS
CURSOR c_SELECT IS SELECT PEAK_DATE, ROUND((AVG(PJM_LOAD)*1000/SUM(BOTTOM_SUM)),7) "SCALING_FACTOR" FROM  CDI_PLC_TX_BUILDUPS GROUP BY PEAK_DATE;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_TX_BUILDUPS SET SCALING_FACTOR = v_SELECT.SCALING_FACTOR  WHERE PEAK_DATE = v_SELECT.PEAK_DATE;
   END LOOP;
   COMMIT;
END CALCULATE_NSPL_SCALE_FACTOR;

PROCEDURE CALCULATE_PLC_OBLIGATION_FAC AS
CURSOR c_SELECT(p_GROUP_NAME IN VARCHAR2) IS
   SELECT PEAK_DATE, RATE_CLASS, VOLTAGE_LEVEL, SUM(BOTTOM_SUM)*SCALING_FACTOR "BOTTOM", SUM(BOTTOM_SUM)*AVG(SCALING_FACTOR) "BOTTOM_AVG", SUM(USAGE_FACTOR_SUM) "USAGE_FACTOR", SUM(DEMAND_SUM) "DEMAND"
   FROM CDI_PLC_ICAP_BUILDUPS
   WHERE GROUP_NAME = p_GROUP_NAME
   GROUP BY PEAK_DATE,GROUP_NAME, RATE_CLASS, VOLTAGE_LEVEL, SCALING_FACTOR;
BEGIN
   FOR v_SELECT IN c_SELECT('PROFILE_LOAD') LOOP
      IF NVL(v_SELECT.USAGE_FACTOR, 0) <> 0 THEN
         UPDATE CDI_PLC_ICAP_BUILDUPS SET OBLIGATION_FACTOR = v_SELECT.BOTTOM / v_SELECT.USAGE_FACTOR
         WHERE PEAK_DATE = v_SELECT.PEAK_DATE
            AND GROUP_NAME = 'PROFILE_LOAD'
            AND RATE_CLASS = v_SELECT.RATE_CLASS
            AND VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      END IF;
   END LOOP;
   COMMIT;
   FOR v_SELECT IN c_SELECT('PROFILE_DEMAND') LOOP
      IF NVL(v_SELECT.DEMAND, 0) <> 0 THEN
         UPDATE CDI_PLC_ICAP_BUILDUPS SET OBLIGATION_FACTOR = v_SELECT.BOTTOM_AVG / v_SELECT.DEMAND
         WHERE PEAK_DATE = v_SELECT.PEAK_DATE
            AND GROUP_NAME = 'PROFILE_DEMAND'
            AND RATE_CLASS = v_SELECT.RATE_CLASS
            AND VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      END IF;
   END LOOP;
   COMMIT;
END CALCULATE_PLC_OBLIGATION_FAC;

PROCEDURE CALCULATE_NSPL_OBLIGATION_FAC AS
CURSOR c_SELECT(p_GROUP_NAME IN VARCHAR2) IS
   SELECT PEAK_DATE, RATE_CLASS, VOLTAGE_LEVEL, (SUM(BOTTOM_SUM)*AVG(SCALING_FACTOR)+SUM(ALM_WITH_LOSSES)) "BOTTOM", SUM(USAGE_FACTOR_SUM) "USAGE_FACTOR", SUM(DEMAND_SUM) "DEMAND"
   FROM CDI_PLC_TX_BUILDUPS
   WHERE GROUP_NAME = p_GROUP_NAME
   GROUP BY PEAK_DATE,GROUP_NAME, RATE_CLASS, VOLTAGE_LEVEL, SCALING_FACTOR;
BEGIN
   FOR v_SELECT IN c_SELECT('PROFILE_LOAD') LOOP
      IF NVL(v_SELECT.USAGE_FACTOR, 0) <> 0 THEN
         UPDATE CDI_PLC_TX_BUILDUPS SET OBLIGATION_FACTOR = v_SELECT.BOTTOM / v_SELECT.USAGE_FACTOR
         WHERE PEAK_DATE = v_SELECT.PEAK_DATE
            AND GROUP_NAME = 'PROFILE_LOAD'
            AND RATE_CLASS = v_SELECT.RATE_CLASS
            AND VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      END IF;
   END LOOP;
   COMMIT;
   FOR v_SELECT IN c_SELECT('PROFILE_DEMAND') LOOP
      IF NVL(v_SELECT.DEMAND, 0) <> 0 THEN
         UPDATE CDI_PLC_TX_BUILDUPS SET OBLIGATION_FACTOR = v_SELECT.BOTTOM / v_SELECT.DEMAND
         WHERE PEAK_DATE = v_SELECT.PEAK_DATE
            AND GROUP_NAME = 'PROFILE_DEMAND'
            AND RATE_CLASS = v_SELECT.RATE_CLASS
            AND VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      END IF;
   END LOOP;
   COMMIT;
END CALCULATE_NSPL_OBLIGATION_FAC;

PROCEDURE UPDATE_PLC_DETAIL AS
CURSOR c_SELECT IS
   SELECT DISTINCT PEAK_DATE, GROUP_NAME, RATE_CLASS, VOLTAGE_LEVEL, OBLIGATION_FACTOR
   FROM  CDI_PLC_ICAP_BUILDUPS
   WHERE GROUP_NAME <> 'INTERVAL'
      AND SCALING_FACTOR IS NOT NULL
   ORDER BY PEAK_DATE;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      IF v_SELECT.GROUP_NAME = 'PROFILE_LOAD'  THEN
         UPDATE CDI_PLC_ICAP_DETAIL SET OBLIGATION_FACTOR = v_SELECT.OBLIGATION_FACTOR, HOURLY_PLC = v_SELECT.OBLIGATION_FACTOR*USAGE_FACTOR
         WHERE PEAK_DATE = v_SELECT.PEAK_DATE
            AND DEMAND_KW = 0
            AND RATE_CLASS =  v_SELECT.RATE_CLASS
            AND VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      ELSE
         UPDATE CDI_PLC_ICAP_DETAIL SET OBLIGATION_FACTOR = v_SELECT.OBLIGATION_FACTOR, HOURLY_PLC = v_SELECT.OBLIGATION_FACTOR*DEMAND_KW
         WHERE PEAK_DATE = v_SELECT.PEAK_DATE
            AND DEMAND_KW >= 0
            AND RATE_CLASS = v_SELECT.RATE_CLASS
            AND VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      END IF;
   END LOOP;
   COMMIT;
END UPDATE_PLC_DETAIL;

PROCEDURE UPDATE_NSPL_DETAIL AS
CURSOR c_SELECT IS
   SELECT DISTINCT PEAK_DATE, GROUP_NAME, RATE_CLASS, VOLTAGE_LEVEL, OBLIGATION_FACTOR
   FROM  CDI_PLC_TX_BUILDUPS
   WHERE GROUP_NAME <> 'INTERVAL'
      AND SCALING_FACTOR IS NOT NULL
   ORDER BY PEAK_DATE;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      IF v_SELECT.GROUP_NAME = 'PROFILE_LOAD'  THEN
         UPDATE CDI_PLC_TX_DETAIL SET OBLIGATION_FACTOR = v_SELECT.OBLIGATION_FACTOR, HOURLY_PLC = CASE WHEN (v_SELECT.OBLIGATION_FACTOR*USAGE_FACTOR - NVL(ALM_VAL,0)*PEAK_LOSS_FACTOR ) <= 0 THEN 0 ELSE (v_SELECT.OBLIGATION_FACTOR*USAGE_FACTOR - NVL(ALM_VAL,0)*PEAK_LOSS_FACTOR) END
         WHERE PEAK_DATE = v_SELECT.PEAK_DATE
            AND DEMAND_KW = 0
            AND RATE_CLASS =  v_SELECT.RATE_CLASS
            AND VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      ELSE
         UPDATE CDI_PLC_TX_DETAIL SET OBLIGATION_FACTOR = v_SELECT.OBLIGATION_FACTOR, HOURLY_PLC = CASE WHEN (v_SELECT.OBLIGATION_FACTOR*DEMAND_KW - NVL(ALM_VAL,0)*PEAK_LOSS_FACTOR ) <= 0 THEN 0 ELSE (v_SELECT.OBLIGATION_FACTOR*DEMAND_KW - NVL(ALM_VAL,0)*PEAK_LOSS_FACTOR) END
         WHERE PEAK_DATE = v_SELECT.PEAK_DATE
            AND DEMAND_KW >= 0
            AND RATE_CLASS =  v_SELECT.RATE_CLASS
            AND VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      END IF;
   END LOOP;
   COMMIT;
END UPDATE_NSPL_DETAIL;

PROCEDURE UPDATE_NSPL_INTERVAL_DETAIL AS
CURSOR c_SELECT IS SELECT DISTINCT PEAK_DATE, SCALING_FACTOR FROM  CDI_PLC_TX_BUILDUPS WHERE GROUP_NAME = 'INTERVAL' AND SCALING_FACTOR IS NOT NULL ORDER BY PEAK_DATE;
BEGIN
   UPDATE CDI_PLC_TX_INT_DETAIL SET OBLIGATION_FACTOR = 1 ;
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_TX_INT_DETAIL SET HOURLY_PLC = CASE WHEN (POINT_VAL - NVL(ALM_VAL,0)*AV_LOSS_FACTOR ) <= 0 THEN 0 ELSE ((POINT_VAL - NVL(ALM_VAL,0))*AV_LOSS_FACTOR)*v_SELECT.SCALING_FACTOR END
      WHERE PEAK_DATE = v_SELECT.PEAK_DATE;
   END LOOP;
   COMMIT;
END UPDATE_NSPL_INTERVAL_DETAIL;

PROCEDURE UPDATE_INTERVAL_LOSS_FACTOR AS
CURSOR c_SELECT IS SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_ICAP_INT_DETAIL;
v_COUNT PLS_INTEGER := 0;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_ICAP_INT_DETAIL
      SET AV_LOSS_FACTOR = 1.0 +
         (SELECT MAX(C.LOSS_VAL)
         FROM LOSS_FACTOR A
            JOIN LOSS_FACTOR_MODEL B ON B.LOSS_FACTOR_ID = A.LOSS_FACTOR_ID
            JOIN LOSS_FACTOR_PATTERN C ON C.PATTERN_ID = B.PATTERN_ID
         WHERE A.LOSS_FACTOR_NAME = v_SELECT.VOLTAGE_LEVEL)
      WHERE VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
   END LOOP;
   LOGS.LOG_INFO('Update PLC Loss Factor Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100))|| ' Number Of Records Updated: ' || TO_CHAR(v_COUNT));
   COMMIT;
END UPDATE_INTERVAL_LOSS_FACTOR;

PROCEDURE UPDATE_PLC_INTERVAL_DETAIL AS
CURSOR c_SELECT IS SELECT DISTINCT PEAK_DATE, SCALING_FACTOR FROM CDI_PLC_ICAP_BUILDUPS WHERE GROUP_NAME = 'INTERVAL' AND SCALING_FACTOR IS NOT NULL ORDER BY PEAK_DATE;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_ICAP_INT_DETAIL SET HOURLY_PLC= ((POINT_VAL+ NVL(ALM_VAL,0.0))*AV_LOSS_FACTOR*v_SELECT.SCALING_FACTOR) WHERE PEAK_DATE = v_SELECT.PEAK_DATE;
   END LOOP;
   COMMIT;
END UPDATE_PLC_INTERVAL_DETAIL;

PROCEDURE UPDATE_PLC_INTERVAL_DTL_NEW AS
v_MAX_DATE DATE;
CURSOR c_SELECT IS
   SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, OLD_BILL_ACCOUNT, OLD_SERVICE_POINT, OLD_RATE_CLASS, OLD_VOLTAGE_LEVEL
   FROM BGE_MASTER_ACCOUNT A
      JOIN CDI_METER_CHANGE_CROSSREF C ON C.BILL_ACCOUNT = A.BILL_ACCOUNT
   WHERE A.EFFECTIVE_DATE > v_MAX_DATE
      AND A.METER_TYPE = 'I'
      AND NOT EXISTS (SELECT NULL FROM CDI_PLC_ICAP_INT_DETAIL WHERE BILL_ACCOUNT = A.BILL_ACCOUNT);
BEGIN
   SELECT MAX(PEAK_DATE) INTO v_MAX_DATE FROM CDI_PLC_ICAP_INT_DETAIL;
   IF v_MAX_DATE IS NULL THEN
      RETURN;
   END IF;
   FOR v_SELECT IN c_SELECT LOOP
      INSERT INTO CDI_PLC_ICAP_INT_DETAIL(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_ID, PROFILE_NAME, PEAK_DATE, POINT_VAL, ALM_VAL, AV_LOSS_FACTOR, USAGE_FACTOR, DEMAND_KW, CREATE_DTS, LAST_UPDATE_DTS, OBLIGATION_FACTOR, HOURLY_PLC)
      SELECT v_SELECT.BILL_ACCOUNT, v_SELECT.SERVICE_POINT, v_SELECT.PREMISE_NUMBER, 'Y', RATE_CLASS, VOLTAGE_LEVEL, PROFILE_ID, PROFILE_NAME, PEAK_DATE, POINT_VAL, NULL, NULL, USAGE_FACTOR, DEMAND_KW, SYSDATE, SYSDATE, OBLIGATION_FACTOR, HOURLY_PLC
      FROM CDI_PLC_ICAP_DETAIL
      WHERE BILL_ACCOUNT = v_SELECT.OLD_BILL_ACCOUNT
         AND SERVICE_POINT = v_SELECT.OLD_SERVICE_POINT
         AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER;
   END LOOP;
   COMMIT;
END UPDATE_PLC_INTERVAL_DTL_NEW;

PROCEDURE UPDATE_NSPL_INTERVAL_DTL_NEW AS
v_MAX_DATE DATE;
CURSOR c_SELECT IS
   SELECT A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, OLD_BILL_ACCOUNT, OLD_SERVICE_POINT
   FROM BGE_MASTER_ACCOUNT A
      JOIN CDI_METER_CHANGE_CROSSREF C ON C.BILL_ACCOUNT = A.BILL_ACCOUNT
   WHERE A.EFFECTIVE_DATE > v_MAX_DATE
      AND A.METER_TYPE = 'I'
      AND NOT EXISTS (SELECT * FROM CDI_PLC_TX_INT_DETAIL WHERE BILL_ACCOUNT = A.BILL_ACCOUNT);
BEGIN
   SELECT MAX(PEAK_DATE) INTO v_MAX_DATE FROM CDI_PLC_TX_INT_DETAIL;
   IF v_MAX_DATE IS NULL THEN
      RETURN;
   END IF;
   FOR v_SELECT IN c_SELECT LOOP
      INSERT INTO CDI_PLC_TX_INT_DETAIL
      SELECT v_SELECT.BILL_ACCOUNT, v_SELECT.SERVICE_POINT, v_SELECT.PREMISE_NUMBER, 'Y', RATE_CLASS, VOLTAGE_LEVEL, PROFILE_ID, PROFILE_NAME, PEAK_DATE, POINT_VAL, NULL, NULL, PEAK_LOSS_FACTOR, USAGE_FACTOR, DEMAND_KW, SYSDATE, SYSDATE, OBLIGATION_FACTOR, HOURLY_PLC
      FROM CDI_PLC_TX_DETAIL
      WHERE BILL_ACCOUNT = v_SELECT.OLD_BILL_ACCOUNT
         AND SERVICE_POINT = v_SELECT.OLD_SERVICE_POINT
         AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER;
   END LOOP;
   COMMIT;
END UPDATE_NSPL_INTERVAL_DTL_NEW;

PROCEDURE UPDATE_NSPL_INT_LOSS_FACTOR AS
CURSOR c_SELECT IS SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_TX_INT_DETAIL;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_TX_INT_DETAIL SET
         AV_LOSS_FACTOR = 1.0 +
            (SELECT MAX(C.LOSS_VAL)
            FROM LOSS_FACTOR A
               JOIN LOSS_FACTOR_MODEL   B ON B.LOSS_FACTOR_ID = A.LOSS_FACTOR_ID
               JOIN LOSS_FACTOR_PATTERN C ON C.PATTERN_ID = B.PATTERN_ID
            WHERE A.LOSS_FACTOR_NAME = v_SELECT.VOLTAGE_LEVEL),
         PEAK_LOSS_FACTOR = 1.0 +
            (SELECT MAX(C.LOSS_VAL)
            FROM LOSS_FACTOR A
               JOIN LOSS_FACTOR_MODEL   B ON B.LOSS_FACTOR_ID = A.LOSS_FACTOR_ID
               JOIN LOSS_FACTOR_PATTERN C ON C.PATTERN_ID = B.PATTERN_ID
            WHERE A.LOSS_FACTOR_NAME = v_SELECT.VOLTAGE_LEVEL || ' ALM Peak Uplift')
      WHERE VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
   END LOOP;
   COMMIT;
END UPDATE_NSPL_INT_LOSS_FACTOR;

PROCEDURE UPDATE_NSPL_LOSS_FACTOR AS
CURSOR c_SELECT IS SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_TX_DETAIL;
v_COUNT PLS_INTEGER := 0;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_TX_DETAIL SET
         AV_LOSS_FACTOR = 1.0 +
            (SELECT MAX(C.LOSS_VAL)
            FROM LOSS_FACTOR A
               JOIN LOSS_FACTOR_MODEL   B ON B.LOSS_FACTOR_ID = A.LOSS_FACTOR_ID
               JOIN LOSS_FACTOR_PATTERN C ON C.PATTERN_ID = B.PATTERN_ID
            WHERE A.LOSS_FACTOR_NAME = v_SELECT.VOLTAGE_LEVEL),
          PEAK_LOSS_FACTOR = 1.0 +
            (SELECT MAX(C.LOSS_VAL)
            FROM LOSS_FACTOR A
               JOIN LOSS_FACTOR_MODEL   B ON B.LOSS_FACTOR_ID = A.LOSS_FACTOR_ID
               JOIN LOSS_FACTOR_PATTERN C ON C.PATTERN_ID = B.PATTERN_ID
            WHERE A.LOSS_FACTOR_NAME = v_SELECT.VOLTAGE_LEVEL || ' ALM Peak Uplift')
      WHERE VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
   END LOOP;
   LOGS.LOG_INFO('Update NSPL Loss Factor Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100))|| ' Number Of Records Updated: ' || TO_CHAR(v_COUNT));
   COMMIT;
END UPDATE_NSPL_LOSS_FACTOR;

PROCEDURE UPDATE_PLC_LOSS_FACTOR AS
CURSOR c_SELECT IS SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_ICAP_DETAIL;
v_COUNT PLS_INTEGER := 0;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_ICAP_DETAIL SET
        AV_LOSS_FACTOR = 1.0 +
            (SELECT MAX(C.LOSS_VAL)
            FROM LOSS_FACTOR A
               JOIN LOSS_FACTOR_MODEL   B ON B.LOSS_FACTOR_ID = A.LOSS_FACTOR_ID
               JOIN LOSS_FACTOR_PATTERN C ON C.PATTERN_ID = B.PATTERN_ID
            WHERE A.LOSS_FACTOR_NAME = v_SELECT.VOLTAGE_LEVEL)
      WHERE VOLTAGE_LEVEL = v_SELECT.VOLTAGE_LEVEL;
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
   END LOOP;
   LOGS.LOG_INFO('Update PLC Loss Factor Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100))|| ' Number Of Records Updated: ' || TO_CHAR(v_COUNT));
   COMMIT;
END UPDATE_PLC_LOSS_FACTOR;

PROCEDURE UPDATE_ALM_MONTHLY(p_PEAK_HOUR IN DATE) AS
v_PEAK_DATE VARCHAR2(16) := TO_CHAR(p_PEAK_HOUR,'MM/DD/YYYY HH24:MI');
v_COUNT     PLS_INTEGER := 0;
v_PROFILE_LIBRARY_ID NUMBER(9);
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
CURSOR c_SELECT IS
   SELECT DISTINCT A.BILL_ACCOUNT BILL_ACCOUNT , A.SERVICE_POINT SERVICE_POINT, A.PREMISE_NUMBER, SUM(B.SWITCH_NO * P.POINT_VAL) "POINT_VAL"
   FROM CDI_PLC_TX_DETAIL     A
      JOIN CDI_ALM_ACCOUNT    B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND B.PREMISE_NUMBER = A.PREMISE_NUMBER AND TRUNC(p_PEAK_HOUR) BETWEEN B.BEGIN_DATE AND B.END_DATE
      JOIN LOAD_PROFILE       L ON L.PROFILE_LIBRARY_ID = v_PROFILE_LIBRARY_ID AND L.PROFILE_NAME LIKE 'ALM' || B.RIDER || '%' AND L.PROFILE_NAME NOT LIKE '%Forecast%'
      JOIN LOAD_PROFILE_POINT P ON P.PROFILE_ID = L.PROFILE_ID AND P.POINT_DATE = (p_PEAK_HOUR) AND P.POINT_VAL <> 0
   WHERE A.PEAK_DATE = p_PEAK_HOUR
   GROUP BY A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER
   ORDER BY 1,2,3;
BEGIN
   SELECT MAX(PROFILE_LIBRARY_ID) INTO v_PROFILE_LIBRARY_ID FROM LOAD_PROFILE_LIBRARY WHERE PROFILE_LIBRARY_NAME = c_LIBRARY_NAME;
   ASSERT(v_PROFILE_LIBRARY_ID IS NOT NULL, 'Profile Library "' || c_LIBRARY_NAME || '" Is Not Defined');
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_TX_DETAIL
       SET ALM_VAL = -1 * v_SELECT.POINT_VAL
       WHERE BILL_ACCOUNT = v_SELECT.BILL_ACCOUNT
          AND SERVICE_POINT = v_SELECT.SERVICE_POINT
          AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER
          AND PEAK_DATE = p_PEAK_HOUR;
         v_COUNT := v_COUNT + 1;
         IF MOD(v_COUNT, 5000) = 0 THEN
            COMMIT;
         END IF;
   END LOOP;
   LOGS.LOG_INFO('ALM Monthly Update Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100))|| ' Number Of Records Updated: ' || TO_CHAR(v_COUNT));
   COMMIT;
END UPDATE_ALM_MONTHLY;

PROCEDURE PREPARE_WORK(p_PEAK_HOUR IN DATE) AS
CURSOR c_SELECT IS
   SELECT LP.PROFILE_ID, LP.PROFILE_NAME, LENGTH(LP.PROFILE_NAME) LEN, LPP.POINT_VAL POINT_VAL
   FROM LOAD_PROFILE LP
      JOIN LOAD_PROFILE_POINT LPP ON LPP.PROFILE_ID = LP.PROFILE_ID AND LPP.POINT_DATE = p_PEAK_HOUR AND LPP.POINT_VAL <> 0
   WHERE PROFILE_NAME LIKE 'ALM%_BWI'
      AND (PROFILE_NAME LIKE '%Economic%' OR PROFILE_NAME LIKE '%Reliability%');
v_NAME LOAD_PROFILE.PROFILE_NAME%TYPE;
v_SEG NUMBER;
v_TRUNC_PEAK DATE := TRUNC(p_PEAK_HOUR);
BEGIN
   LOGS.LOG_INFO('Insert Into CDI_ALM_PROFILE Table For Peak Hour: ' || TO_CHAR(p_PEAK_HOUR, c_DATE_TIME_FORMAT));
   INSERT INTO CDI_ALM_PROFILE(PREMISE_NUMBER, BEGIN_DATE, END_DATE, SEQ, PROFILE_ID, RIDER, SWITCH_NO, POINT_VAL, VAL, PEAK_HOUR)
   WITH
      AA AS
         (SELECT /*+ USE_HASH(A,B) */ DISTINCT B.PREMISE_NUMBER, B.EFFECTIVE_DATE BEGIN_DATE, B.TERMINATION_DATE END_DATE, A.RIDER, A.SWITCH_NO
         FROM  CDI_ALM_ACCOUNT A
            JOIN BGE_MASTER_ACCOUNT B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND B.PREMISE_NUMBER = A.PREMISE_NUMBER AND v_TRUNC_PEAK BETWEEN B.EFFECTIVE_DATE AND B.TERMINATION_DATE
         WHERE A.SWITCH_NO <> 0
         AND v_TRUNC_PEAK BETWEEN A.BEGIN_DATE AND A.END_DATE),
      AA2 AS
         (SELECT DISTINCT B.PREMISE_NUMBER, B.EFFECTIVE_DATE BEGIN_DATE, B.TERMINATION_DATE END_DATE, A.RIDER, A.SWITCH_NO, C.SUBSTATION_FEEDER
         FROM  CDI_ALM_ACCOUNT A
            JOIN BGE_MASTER_ACCOUNT B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND B.PREMISE_NUMBER = A.PREMISE_NUMBER AND v_TRUNC_PEAK BETWEEN B.EFFECTIVE_DATE AND B.TERMINATION_DATE
            JOIN CDI_PREMISE_SUBSTATION_FEEDER C ON C.PREMISE_NUMBER = A.PREMISE_NUMBER AND v_TRUNC_PEAK BETWEEN C.BEGIN_DATE AND C.END_DATE
         WHERE A.SWITCH_NO <> 0
            AND v_TRUNC_PEAK BETWEEN A.BEGIN_DATE AND A.END_DATE),
      P AS
         (SELECT PROGRAM, SUBSTATION_FEEDER, SEQ
         FROM
            (SELECT DISTINCT PROGRAM, EVENT_TYPE, SUBSTATION_FEEDER, DENSE_RANK() OVER (PARTITION BY PROGRAM, v_TRUNC_PEAK ORDER BY BEGIN_DATE) SEQ
            FROM BGE_ALM_INPUT
            WHERE p_PEAK_HOUR BETWEEN  BEGIN_DATE  AND END_DATE + 1
               AND BEGIN_DATE >= TRUNC(p_PEAK_HOUR)
               AND ENABLE_EVENT = 1
               AND PROCESS_EVENT = 1
               AND EVENT_TYPE <> 'Forecast' )
            WHERE UPPER(SUBSTATION_FEEDER) IN ('ALL','NONE'))
   SELECT /*+ USE_HASH(AA,P) */ AA.PREMISE_NUMBER, AA.BEGIN_DATE, AA.END_DATE, P.SEQ, NULL, AA.RIDER, AA.SWITCH_NO, NULL, NULL, p_PEAK_HOUR "PEAK_HOUR"
   FROM AA
      JOIN P ON AA.RIDER IN (P.PROGRAM || 'R', P.PROGRAM || 'C') 
   UNION
   SELECT /*+ USE_HASH(AA2,P) */ AA2.PREMISE_NUMBER, AA2.BEGIN_DATE, AA2.END_DATE, P.SEQ, NULL, AA2.RIDER, AA2.SWITCH_NO, NULL, NULL, p_PEAK_HOUR
   FROM AA2
      JOIN P ON AA2.RIDER IN (P.PROGRAM || 'R', P.PROGRAM || 'C') ;
   COMMIT;
   LOGS.LOG_INFO('Begin The Update Loop For Peak Hour: ' || TO_CHAR(p_PEAK_HOUR, c_DATE_TIME_FORMAT));
   FOR v_SELECT IN c_SELECT LOOP
      v_NAME := v_SELECT.PROFILE_NAME;
      v_NAME := SUBSTR(v_NAME,4,32);
      v_NAME := SUBSTR(v_NAME,1,(INSTR(v_NAME,'_')-1));
      v_SEG := TO_NUMBER(SUBSTR(v_SELECT.PROFILE_NAME, (v_SELECT.LEN-4),1));
      UPDATE CDI_ALM_PROFILE SET PROFILE_ID = v_SELECT.PROFILE_ID, POINT_VAL = v_SELECT.POINT_VAL, VAL = -1 * SWITCH_NO * v_SELECT.POINT_VAL
      WHERE RIDER = v_NAME
         AND SEQ = v_SEG
         AND PEAK_HOUR = p_PEAK_HOUR;
      LOGS.LOG_INFO('Update CDI_ALM_PROFILE For ' || v_NAME);
   END LOOP;
   COMMIT;
   LOGS.LOG_INFO('Delete From The CDI_ALM_PROFILE Table For Peak Hour: ' || TO_CHAR(p_PEAK_HOUR,c_DATE_TIME_FORMAT));
   DELETE FROM CDI_ALM_PROFILE WHERE PROFILE_ID IS NULL;
   LOGS.LOG_INFO('Insert Into The CDI_ALM_VAL Table For Peak Hour: ' || TO_CHAR(p_PEAK_HOUR,c_DATE_TIME_FORMAT));
   INSERT INTO CDI_ALM_VAL
   SELECT PREMISE_NUMBER, SUM(VAL), PEAK_HOUR
   FROM CDI_ALM_PROFILE
   GROUP BY PREMISE_NUMBER, PEAK_HOUR;
   LOGS.LOG_INFO('Population Of CDI_ALM Tables Complete For Peak Hour: ' || TO_CHAR(p_PEAK_HOUR,c_DATE_TIME_FORMAT));
   COMMIT;
END PREPARE_WORK;

PROCEDURE UPDATE_ALM_MONTHLY_VALUE(p_PEAK_HOUR IN DATE) AS
v_COUNT PLS_INTEGER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   PREPARE_WORK(p_PEAK_HOUR);
   SELECT COUNT(*) INTO v_COUNT FROM CDI_ALM_PROFILE;
   IF v_COUNT > 0 THEN
      LOGS.LOG_INFO('Merge Monthly ALM Updates');
      MERGE INTO CDI_PLC_TX_DETAIL T
      USING (SELECT DISTINCT  PREMISE_NUMBER,  VAL, PEAK_HOUR FROM CDI_ALM_VAL WHERE PEAK_HOUR = p_PEAK_HOUR ) S
      ON (T.PREMISE_NUMBER = S.PREMISE_NUMBER AND T.PEAK_DATE = S.PEAK_HOUR AND T.RATE_CLASS NOT IN ('PL', 'SL'))
      WHEN MATCHED THEN
         UPDATE SET T.ALM_VAL = S.VAL, T.LAST_UPDATE_DTS = SYSDATE;
     LOGS.LOG_INFO('Monthly ALM Updates Complete');
     COMMIT;
   END IF;
END UPDATE_ALM_MONTHLY_VALUE;

PROCEDURE UPDATE_ALM_INTERVAL(p_PEAK_HOUR IN DATE) AS
v_COUNT PLS_INTEGER := 0;
v_PROFILE_LIBRARY_ID NUMBER(9);
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
CURSOR c_SELECT IS
   SELECT DISTINCT A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, SUM(B.SWITCH_NO * D.POINT_VAL) "POINT_VAL"
   FROM CDI_PLC_TX_INT_DETAIL A
      JOIN CDI_ALM_ACCOUNT    B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND B.PREMISE_NUMBER = A.PREMISE_NUMBER AND TRUNC(p_PEAK_HOUR) BETWEEN B.BEGIN_DATE AND B.END_DATE
      JOIN LOAD_PROFILE       C ON C.PROFILE_LIBRARY_ID = v_PROFILE_LIBRARY_ID AND C.PROFILE_NAME LIKE 'ALM' || B.RIDER || '%' AND C.PROFILE_NAME NOT LIKE '%Forecast%' 
      JOIN LOAD_PROFILE_POINT D ON D.PROFILE_ID = C.PROFILE_ID AND D.POINT_DATE = p_PEAK_HOUR AND D.POINT_VAL <> 0
   WHERE A.PEAK_DATE  = p_PEAK_HOUR
   GROUP BY A.BILL_ACCOUNT, A.SERVICE_POINT,  A.PREMISE_NUMBER
   ORDER BY 1,2,3;
BEGIN
   SELECT MAX(PROFILE_LIBRARY_ID) INTO v_PROFILE_LIBRARY_ID FROM LOAD_PROFILE_LIBRARY WHERE PROFILE_LIBRARY_NAME = c_LIBRARY_NAME;
   ASSERT(v_PROFILE_LIBRARY_ID IS NOT NULL, 'Profile Library "' || c_LIBRARY_NAME || '" Is Not Defined');
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_TX_INT_DETAIL SET ALM_VAL = -1 * v_SELECT.POINT_VAL
      WHERE BILL_ACCOUNT = v_SELECT.BILL_ACCOUNT
         AND SERVICE_POINT = v_SELECT.SERVICE_POINT
         AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER
         AND PEAK_DATE = p_PEAK_HOUR;
      v_COUNT := v_COUNT + 1;
      IF MOD(v_COUNT, 5000) = 0 THEN
         LOGS.LOG_INFO_DETAIL('ALM Updates At ' || TO_CHAR(SYSDATE,c_DATE_TIME_FORMAT)|| ', Cumulative Count: ' || TO_CHAR(v_COUNT));
         COMMIT;
      END IF;
   END LOOP;
   LOGS.LOG_INFO('ALM Interval Update Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100))|| ' Number Of Records Updated: ' || TO_CHAR(v_COUNT));
   COMMIT;
END UPDATE_ALM_INTERVAL;

PROCEDURE UPDATE_ALM_INTERVAL_VALUE(p_PEAK_HOUR IN DATE) AS
CURSOR c_SELECT IS
   SELECT DISTINCT B.PREMISE_NUMBER, VAL, B.PEAK_HOUR
   FROM CDI_PLC_TX_INT_DETAIL A
      JOIN CDI_ALM_VAL B ON B.PREMISE_NUMBER = A.PREMISE_NUMBER AND B.PEAK_HOUR = A.PEAK_DATE
   WHERE A.PEAK_DATE = p_PEAK_HOUR
   ORDER BY B.PREMISE_NUMBER;
v_COUNT PLS_INTEGER := 0;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
   FOR v_SELECT IN c_SELECT LOOP
      UPDATE CDI_PLC_TX_INT_DETAIL SET ALM_VAL = v_SELECT.VAL WHERE PEAK_DATE = p_PEAK_HOUR AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER;
      IF MOD(v_COUNT, 5000) = 0 THEN
         LOGS.LOG_INFO_DETAIL('ALM Updates At ' || TO_CHAR(SYSDATE,c_DATE_TIME_FORMAT)|| ', Cumulative Count: ' || TO_CHAR(v_COUNT));
         COMMIT;
      END IF;
   END LOOP;
   LOGS.LOG_INFO('ALM Interval Value Update Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100))|| ' Number Of Records Updated: ' || TO_CHAR(v_COUNT));
   COMMIT;
END UPDATE_ALM_INTERVAL_VALUE;

PROCEDURE GENERATE_PLC_TICKETS(p_PLAN_YEAR IN DATE) AS
v_TAG        VARCHAR2(16) := TO_CHAR(p_PLAN_YEAR + 370, 'YYYY');
v_TAG_NEXT   VARCHAR2(16) := TO_CHAR(p_PLAN_YEAR + 740, 'YYYY');
v_BEGIN_DATE DATE := TO_DATE('06/01/' || v_TAG, c_DATE_FORMAT);
v_END_DATE   DATE := TO_DATE('05/31/' || v_TAG_NEXT, c_DATE_FORMAT);
BEGIN
   SELECT MAX(PLC_BEGIN_DATE), MAX(PLC_END_DATE) INTO v_BEGIN_DATE, v_END_DATE FROM CDI_POLR_TO_PLC_MAP WHERE PLC_BEGIN_DATE BETWEEN (p_PLAN_YEAR + 365) AND (p_PLAN_YEAR + 700);
   ASSERT(v_BEGIN_DATE IS NOT NULL, 'No Dates Found In The CDI_POLR_TO_PLC_MAP Table For The Selected Year');
   v_TAG := TO_CHAR((v_BEGIN_DATE), 'YYYY') || 'C';
   DELETE CDI_PLC_TICKETS WHERE TAG_ID LIKE '%C';
   INSERT INTO CDI_PLC_TICKETS(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL)
   SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, v_TAG, v_BEGIN_DATE, v_END_DATE, AVG(HOURLY_PLC) FROM CDI_PLC_ICAP_DETAIL WHERE HOURLY_PLC IS NOT NULL GROUP BY BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER
   UNION ALL
   SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, v_TAG, v_BEGIN_DATE, v_END_DATE, AVG(HOURLY_PLC) FROM CDI_PLC_ICAP_INT_DETAIL WHERE HOURLY_PLC IS NOT NULL GROUP BY BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER;
   COMMIT;
END GENERATE_PLC_TICKETS;

PROCEDURE GENERATE_NSPL_TICKETS(p_PLAN_YEAR IN DATE) AS
v_TAG        VARCHAR2(16) := TO_CHAR(p_PLAN_YEAR + 370, 'YYYY');
v_BEGIN_DATE DATE := TO_DATE('01/01/' || v_TAG, c_DATE_FORMAT);
v_END_DATE   DATE := TO_DATE('12/31/' || v_TAG, c_DATE_FORMAT);
BEGIN
   v_TAG := v_TAG || 'T';
   ASSERT(v_BEGIN_DATE IS NOT NULL, 'Error Setting The Begin Date For Tag: ' || v_TAG);
   DELETE CDI_PLC_TICKETS WHERE TAG_ID LIKE '%T';
   INSERT INTO CDI_PLC_TICKETS(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL)
   SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, v_TAG, v_BEGIN_DATE, v_END_DATE, AVG(HOURLY_PLC) FROM CDI_PLC_TX_DETAIL WHERE HOURLY_PLC IS NOT NULL GROUP BY BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER
   UNION ALL
   SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, v_TAG, v_BEGIN_DATE, v_END_DATE, AVG(HOURLY_PLC) FROM CDI_PLC_TX_INT_DETAIL WHERE HOURLY_PLC IS NOT NULL GROUP BY BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER;
   COMMIT;
END GENERATE_NSPL_TICKETS;

PROCEDURE POST_ANNUAL_PLC(p_PLAN_YEAR IN DATE) AS
v_PROCEDURE_NAME VARCHAR2(32) := 'POST_ANNUAL_PLC'; 
v_ANCILLARY_SERVICE_ID NUMBER(9);
v_MIN_DATE    DATE;
v_MAX_DATE    DATE;
v_TEMPLATE_ID NUMBER(9);
v_PERIOD_ID   NUMBER(9);
v_PEAK_YEAR   CHAR(4) := TO_CHAR(TO_NUMBER(TO_CHAR(p_PLAN_YEAR,'YYYY')) - 1);
v_BEGIN_DATE  DATE := TO_DATE('01/01/'  || v_PEAK_YEAR, c_DATE_FORMAT);
v_END_DATE    DATE := TO_DATE('12/31/'  || v_PEAK_YEAR, c_DATE_FORMAT);
v_COUNT       PLS_INTEGER;
CURSOR c_SELECT IS
   SELECT FROM_CUT(PEAK_DATE, GA.LOCAL_TIME_ZONE) "PEAK_HOUR", PEAK_DATE "CUT_PEAK"
   FROM ANCILLARY_SERVICE_AREA_PEAK
   WHERE ANCILLARY_SERVICE_ID = l_PLC_ID
      AND PEAK_DATE BETWEEN v_BEGIN_DATE AND END_DATE
   ORDER BY PEAK_DATE;
BEGIN
   LOGS.LOG_INFO('Plan Year: ' || TO_CHAR(p_PLAN_YEAR,'YYYY') || ', Begin Date: ' || TO_CHAR(v_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(v_END_DATE, c_DATE_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.LOG_INFO('Get PLC Peak Dates From The ANCILLARY_SERVICE_AREA_PEAK Table For Plan Year: ' || TO_CHAR(p_PLAN_YEAR, 'YYYY'), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   SELECT TRUNC(MIN(PEAK_DATE)), TRUNC(MAX(PEAK_DATE)), COUNT(*) INTO v_MIN_DATE, v_MAX_DATE, v_COUNT
   FROM ANCILLARY_SERVICE_AREA_PEAK
   WHERE ANCILLARY_SERVICE_ID = l_PLC_ID
      AND PEAK_DATE BETWEEN v_BEGIN_DATE AND END_DATE;
   ASSERT(v_COUNT <> 0, 'PLC Peak Dates Not Found For Plan Year: ' || TO_CHAR(p_PLAN_YEAR,'YYYY'));
   FOR v_SELECT IN c_SELECT LOOP
      LOGS.LOG_INFO('Populate CDI_PLC_ICAP_DETAIL For ' || TO_CHAR(v_SELECT.PEAK_HOUR, c_DATE_TIME_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      POPULATE_PLC_DETAIL(v_SELECT.PEAK_HOUR); --, v_TEMPLATE_ID, v_PERIOD_ID);
      LOGS.LOG_INFO('Populate CDI_PLC_ICAP_INT_DETAIL For Peak Hour: ' || TO_CHAR(v_SELECT.PEAK_HOUR, c_DATE_TIME_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
      POPULATE_PLC_INTERVAL_DETAIL(v_SELECT.PEAK_HOUR);
   END LOOP;
   LOGS.LOG_INFO('Update CDI_PLC_ICAP_DETAIL For Loss Factor', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   UPDATE_PLC_LOSS_FACTOR;
   LOGS.LOG_INFO('Update CDI_PLC_ICAP_INT_DETAIL For Loss Factor', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   UPDATE_INTERVAL_LOSS_FACTOR;
END POST_ANNUAL_PLC;

PROCEDURE POST_ANNUAL_NSPL(p_PLAN_YEAR IN DATE) AS
v_PROCEDURE_NAME VARCHAR2(32) := 'POST_ANNUAL_NSPL'; 
CURSOR c_SELECT_LOAD_DATE(p_MIN_DATE IN DATE, p_MAX_DATE IN DATE) IS SELECT DISTINCT LOAD_DATE FROM CDI_ALM_IMPACT_DETAILS WHERE LOAD_DATE BETWEEN p_MIN_DATE-1 AND p_MAX_DATE+2 ORDER BY 1 DESC;
CURSOR c_SELECT_PEAK_HOUR(p_BEGIN_DATE IN DATE, p_END_DATE IN DATE) IS
   SELECT FROM_CUT(PEAK_DATE, GA.LOCAL_TIME_ZONE) "PEAK_HOUR", "PEAK_DATE"
   FROM ANCILLARY_SERVICE_AREA_PEAK
   WHERE ANCILLARY_SERVICE_ID = l_NSPL_ID
   AND PEAK_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
   ORDER BY PEAK_DATE;
v_CURRENT_DATE DATE;
v_ANCILLARY_SERVICE_ID NUMBER(9);
v_MIN_DATE    DATE := CONSTANTS.HIGH_DATE;
v_MAX_DATE    DATE := CONSTANTS.LOW_DATE;
v_PEAK_YEAR   CHAR(4) := TO_CHAR(TO_NUMBER(TO_CHAR(p_PLAN_YEAR,'YYYY')) - 1);
v_BEGIN_DATE  DATE := TO_DATE('01/01/' || v_PEAK_YEAR, c_DATE_FORMAT);
v_END_DATE    DATE := TO_DATE('12/31/' || v_PEAK_YEAR, c_DATE_FORMAT);
v_TEMPLATE_ID NUMBER(9);
v_PERIOD_ID   NUMBER(9);
v_COUNT       PLS_INTEGER;
TYPE t_ALM_DAYS_TBL IS TABLE OF CHAR(1) INDEX BY VARCHAR2(10);
v_ALM_DAYS t_ALM_DAYS_TBL;
   FUNCTION IS_ALM_DAY (p_DAY IN DATE) RETURN BOOLEAN AS
   BEGIN
      RETURN v_ALM_DAYS.EXISTS(TO_CHAR(p_DAY,'YYYYMMDDHH24'));
  END IS_ALM_DAY;
BEGIN
   LOGS.LOG_INFO('Plan Year: ' || TO_CHAR(p_PLAN_YEAR,'YYYY') || ', Begin Date: ' || TO_CHAR(v_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(v_END_DATE, c_DATE_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   LOGS.LOG_INFO('Get NSPL Peak Dates From The ANCILLARY_SERVICE_AREA_PEAK Table For Plan Year: ' || TO_CHAR(p_PLAN_YEAR, c_DATE_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME);
   SELECT TRUNC(MIN(PEAK_DATE)), TRUNC(MAX(PEAK_DATE)), COUNT(*) INTO v_MIN_DATE, v_MAX_DATE, v_COUNT FROM ANCILLARY_SERVICE_AREA_PEAK WHERE ANCILLARY_SERVICE_ID = l_NSPL_ID AND PEAK_DATE BETWEEN v_BEGIN_DATE AND v_END_DATE;
   ASSERT(v_COUNT <> 0, 'No NSPL Peak Dates Defined In The ANCILLARY_SERVICE_AREA_PEAK Table For Plan Year: ' || TO_CHAR(p_PLAN_YEAR, c_DATE_FORMAT));
   LOGS.LOG_INFO('Get All Possible ALM Days', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
   FOR v_SELECT IN c_SELECT_LOAD_DATE(v_MIN_DATE, v_MAX_DATE) LOOP
      v_ALM_DAYS(TO_CHAR(v_SELECT.LOAD_DATE,'YYYYMMDDHH24')) := 'Y';
   END LOOP;
   FOR v_SELECT IN c_SELECT_PEAK_HOUR(v_BEGIN_DATE, v_END_DATE) LOOP
      LOGS.LOG_INFO('Populate CDI_PLC_TX_DETAIL Table', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      POPULATE_NSPL_DETAIL(v_SELECT.PEAK_HOUR); --, v_TEMPLATE_ID, v_PERIOD_ID);
      SELECT COUNT(*) INTO v_COUNT FROM CDI_PLC_TX_DETAIL;
      IF v_COUNT = 0 THEN
         LOGS.LOG_INFO('CDI_PLC_TX_DETAIL Table Is Empty', v_PROCEDURE_NAME, p_SOURCE_NAME =>  c_PACKAGE_NAME); 
      ELSE
         UPDATE_NSPL_LOSS_FACTOR;
         LOGS.LOG_INFO('Populate NSPL Content To The CDI_PLC_TX_INT_DETAIL Table For Peak Hour: ' || TO_CHAR(v_SELECT.PEAK_HOUR, c_DATE_TIME_FORMAT), v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
         POPULATE_NSPL_INTERVAL_DETAIL(v_SELECT.PEAK_HOUR);
         IF IS_ALM_DAY(v_SELECT.PEAK_HOUR) THEN
            LOGS.LOG_INFO('Update ALM Monthly', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
            UPDATE_ALM_MONTHLY_VALUE(v_SELECT.PEAK_HOUR);
            LOGS.LOG_INFO('Update ALM Interval', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
            UPDATE_ALM_INTERVAL_VALUE(v_SELECT.PEAK_HOUR);
         END IF;
      END IF;
   END LOOP;
   LOGS.LOG_INFO('Update CDI_PLC_TX_DETAIL For Loss Factor', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
   UPDATE_NSPL_LOSS_FACTOR;
   LOGS.LOG_INFO('Update CDI_PLC_TX_INT_DETAIL For Loss Factor', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
   UPDATE_NSPL_INT_LOSS_FACTOR;
END POST_ANNUAL_NSPL;

PROCEDURE TRANSLATE_AMI_TO_INTERVAL AS
BEGIN
-- Translate Customers With Available AMI Data As An Interval Metered Customer --  
   INSERT INTO CDI_PLC_ICAP_INT_DETAIL
   WITH CANDIDATES AS
      (SELECT * FROM (SELECT A.*, ROW_NUMBER() OVER (PARTITION BY BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, PEAK_DATE ORDER BY NULL) AS RN FROM CDI_PLC_ICAP_DETAIL A) WHERE RN = 1) 
   SELECT C.BILL_ACCOUNT, C.SERVICE_POINT, C.PREMISE_NUMBER, 'Y' AS IDR_STATUS, C.RATE_CLASS, C.VOLTAGE_LEVEL, C.PROFILE_ID, C.PROFILE_NAME, C.PEAK_DATE, V.POINT_VAL, C.ALM_VAL, C.AV_LOSS_FACTOR, NULL AS USAGE_FACTOR, NULL AS DEMAND_KW, SYSDATE AS CREATE_DTS, SYSDATE AS LAST_UPDATE_DTS, 1 AS OBLIGATION_FACTOR, NULL AS HOURLY_PLC
   FROM CANDIDATES C
      JOIN PLC_ICAP_INT_VALUE V ON V.BILL_ACCOUNT = C.BILL_ACCOUNT AND V.SERVICE_POINT = C.SERVICE_POINT AND V.PREMISE_NUMBER = C.PREMISE_NUMBER AND V.PEAK_DATE = C.PEAK_DATE;
-- Delete Monthly Records That Became Interval --
   DELETE CDI_PLC_ICAP_DETAIL
   WHERE (BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER) IN (SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER FROM CDI_PLC_ICAP_INT_DETAIL);
-- Capacity Calculation Requires ALM Addbacks To Be Posted To Interval Table --
-- At The Time Of Detail Generation Step, Only MV90 Customers Appeared On The Icap Interval Table For Automatic Assignment --
   MERGE /*+ USE_HASH(A,B) */ INTO CDI_PLC_ICAP_DETAIL T
   USING CDI_PLC_ALMBACKS S
   ON (T.BILL_ACCOUNT = S.BILL_ACCOUNT AND T.SERVICE_POINT = S.SERVICE_POINT AND T.PREMISE_NUMBER = S.PREMISE_NUMBER AND TRUNC(T.PEAK_DATE) = S.ADD_DATE)
   WHEN MATCHED THEN
      UPDATE SET T.ALM_VAL = S.HOUR_1 + S.HOUR_2 + S.HOUR_3 + S.HOUR_4 + S.HOUR_5 + S.HOUR_6 + S.HOUR_7 + S.HOUR_8 + S.HOUR_9 + S.HOUR_10 + S.HOUR_11 + S.HOUR_12 + S.HOUR_13 + S.HOUR_14 + S.HOUR_15 + S.HOUR_16 + S.HOUR_17 + S.HOUR_18 + S.HOUR_19 + S.HOUR_20 + S.HOUR_21 + S.HOUR_22 + S.HOUR_23 + S.HOUR_24;
END TRANSLATE_AMI_TO_INTERVAL;

PROCEDURE COMPUTE_ANNUAL_PLC_NSPL(p_ANCILLARY_SERVICE_ID IN NUMBER, p_PLAN_YEAR IN VARCHAR2) AS
v_PLAN_YEAR DATE := TO_DATE(p_PLAN_YEAR, 'YYYY');
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_COMPUTE_ANNUAL_PLC_NSPL || ': Plan Detail Generation');
   LOGS.LOG_INFO('Ancillary Service Id: ' || TO_CHAR(p_ANCILLARY_SERVICE_ID) || ', Plan Year: ' || TO_CHAR(v_PLAN_YEAR, c_DATE_FORMAT));
   CACHE_ANCILLARY_SERVICE_ID;
   IF p_ANCILLARY_SERVICE_ID = l_PLC_ID THEN
      TRUNCATE_PLC_TABLES;
      POST_ANNUAL_PLC(v_PLAN_YEAR);
   ELSE
      TRUNCATE_NSPL_TABLES;
      POST_ANNUAL_NSPL(v_PLAN_YEAR);
   END IF;
-- Stop The Process Log --
   LOGS.LOG_INFO(c_COMPUTE_ANNUAL_PLC_NSPL || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
   LOGS.STOP_PROCESS(l_MESSAGE, l_STATUS);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ERRS.ABORT_PROCESS;
END COMPUTE_ANNUAL_PLC_NSPL;

PROCEDURE SUBMIT_BACKGROUND_JOB(p_TASK_NAME IN VARCHAR2, p_ANCILLARY_SERVICE_ID IN NUMBER, p_PLAN_YEAR IN VARCHAR2, p_MESSAGE OUT VARCHAR2) AS
v_PLSQL_BLOCK VARCHAR2(1000) := 'BEGIN CDI_PLC_NSPL_CALCULATOR.' || p_TASK_NAME ||'(' || TO_CHAR(p_ANCILLARY_SERVICE_ID) || ', ' || p_PLAN_YEAR || '); END;';
v_JOB_NAME VARCHAR2(64) := p_TASK_NAME;
v_TASK_NAME VARCHAR2(64) := CASE WHEN p_TASK_NAME = 'COMPUTE_ANNUAL_PLC_NSPL' THEN 'Compute Annual PLC/NSPL' ELSE '?' END;
v_COUNT PLS_INTEGER;
BEGIN
   IF LOGS.CURRENT_LOG_LEVEL <= LOGS.c_LEVEL_DEBUG THEN
      p_MESSAGE := 'Debug Mode - PLSQL Block: ' || v_PLSQL_BLOCK;
      RETURN;
   END IF;
-- Check To See If There Is A Job Currently Running --
   SELECT COUNT(*) INTO v_COUNT FROM USER_SCHEDULER_JOBS WHERE JOB_NAME = v_JOB_NAME AND STATE = 'RUNNING';
   IF v_COUNT = 0 THEN
      DBMS_SCHEDULER.CREATE_JOB(v_JOB_NAME, 'PLSQL_BLOCK', v_PLSQL_BLOCK, START_DATE => NULL, ENABLED => TRUE, AUTO_DROP => TRUE, COMMENTS => 'Job Initiated By ' || USER);
      p_MESSAGE := v_TASK_NAME || ' Job Submitted.' || c_CRLF || 'Check Process Log For Execution Details.';
   ELSE
      p_MESSAGE := v_TASK_NAME || ' Job Is Currently Running.' || c_CRLF || 'Only One Job Should Be Active At A Time.';
   END IF;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := 'Exception: ' || SQLERRM;
END SUBMIT_BACKGROUND_JOB;

PROCEDURE APPLY_WEATHER_NORMAL_FACTOR(p_PLAN_YEAR IN VARCHAR2) AS
-- BGE Calculates A Rate Class/Voltage Level Specific Weather Normalization Factor To Be Applied To Capacity PLC Tickets --
-- For The ICAP Tickets In The CDI_PLC_TICKETS Table Perform The Following: --
--   Lookup The Rate Class/Voltage Level Of The Associated Customer In The BGE_MASTER_ACCOUNT Table --
--   Multiply The Current PLC Ticket Value By The Associated Factor --
--   Update The CDI_PLC_TICKETS Table With The Normalized Value --
BEGIN
   MERGE INTO CDI_PLC_TICKETS T
   USING
      (SELECT A.ROWID "ENTRY_ROWID", C.FACTOR * A.TAG_VAL "TAG_VAL"
      FROM CDI_PLC_TICKETS                  A
         JOIN BGE_MASTER_ACCOUNT            B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND B.PREMISE_NUMBER = A.PREMISE_NUMBER
         JOIN CDI_PLC_WEATHER_NORMAL_FACTOR C ON C.RATE_CLASS = B.RATE_CLASS AND C.VOLTAGE_LEVEL = B.VOLTAGE_LEVEL
      WHERE TAG_ID = p_PLAN_YEAR || 'C') S
   ON (T.ROWID = S.ENTRY_ROWID)
   WHEN MATCHED THEN
      UPDATE SET T.TAG_VAL = S.TAG_VAL;   
   LOGS.LOG_INFO('Number Of PLC Tickets Updated By Weather Normal Factor:' || TO_CHAR(SQL%ROWCOUNT), 'APPLY_WEATHER_NORMAL_FACTOR', p_SOURCE_NAME => c_PACKAGE_NAME); 
   COMMIT;
END APPLY_WEATHER_NORMAL_FACTOR;

PROCEDURE CALCULATE_TICKETS
   (
   p_ANCILLARY_SERVICE_ID IN NUMBER,
   p_PLAN_YEAR            IN VARCHAR2,
   p_STATUS              OUT NUMBER,
   p_MESSAGE             OUT VARCHAR2
   ) IS
v_PLAN_YEAR      DATE := TO_DATE('1/1/' || p_PLAN_YEAR, c_DATE_FORMAT);
v_PROCEDURE_NAME VARCHAR2(32) := 'CALCULATE_TICKETS';
v_MARK_TIME      PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_CALCULATE_PLC_NSPL_TICKETS);
   CACHE_ANCILLARY_SERVICE_ID;
   IF p_ANCILLARY_SERVICE_ID = l_PLC_ID THEN
      LOGS.LOG_INFO('Generate PLC Buildups For Plan Year:' || p_PLAN_YEAR, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      GENERATE_PLC_BUILDUPS(v_PLAN_YEAR);
      LOGS.LOG_INFO('Calculate PLC Scale Factors', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      CALCULATE_PLC_SCALE_FACTOR;
      LOGS.LOG_INFO('Calculate PLC Obligation Factors', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      CALCULATE_PLC_OBLIGATION_FAC;
      LOGS.LOG_INFO('Update PLC Details', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      UPDATE_PLC_DETAIL;
      LOGS.LOG_INFO('Update Interval PLC Details', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      UPDATE_PLC_INTERVAL_DETAIL;
      LOGS.LOG_INFO('Update New Interval PLC Details', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      UPDATE_PLC_INTERVAL_DTL_NEW;
      LOGS.LOG_INFO('Generate PLC Tickets', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      GENERATE_PLC_TICKETS(v_PLAN_YEAR);
   ELSE
      LOGS.LOG_INFO('Generate NSPL Buildups For Plan Year:' || p_PLAN_YEAR, v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      GENERATE_NSPL_BUILDUPS(v_PLAN_YEAR);
      LOGS.LOG_INFO('Calculate NSPL Scale Factors', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      CALCULATE_NSPL_SCALE_FACTOR;
      LOGS.LOG_INFO('Calculate NSPL Obligation Factors', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      CALCULATE_NSPL_OBLIGATION_FAC;
      LOGS.LOG_INFO('Update NSPL Details', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      UPDATE_NSPL_DETAIL;
      LOGS.LOG_INFO('Update Interval NSPL Details', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      UPDATE_NSPL_INTERVAL_DETAIL;
      LOGS.LOG_INFO('Update New Interval NSPL Details', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      UPDATE_NSPL_INTERVAL_DTL_NEW;
      LOGS.LOG_INFO('Generate NSPL Tickets', v_PROCEDURE_NAME, p_SOURCE_NAME => c_PACKAGE_NAME); 
      GENERATE_NSPL_TICKETS(v_PLAN_YEAR);
   END IF;
-- Stop The Process Log --
   LOGS.LOG_INFO(c_CALCULATE_PLC_NSPL_TICKETS || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ERRS.ABORT_PROCESS;
END CALCULATE_TICKETS;

PROCEDURE GET_SELECTION_FILTER
   (
   p_BEGIN_DATE     IN DATE,
   p_END_DATE       IN DATE,
   p_SELECTION_TYPE IN NUMBER,
   p_CURSOR        OUT GA.REFCURSOR
   ) AS
BEGIN
   IF p_SELECTION_TYPE = 1 THEN
      OPEN p_CURSOR FOR
         SELECT DISTINCT TO_NUMBER(TARIFF_CODE)
         FROM BGE_MASTER_ACCOUNT
         WHERE EFFECTIVE_DATE <= p_END_DATE
            AND TERMINATION_DATE  >= p_END_DATE
         ORDER  BY 1;
   ELSE
      OPEN p_CURSOR FOR
         SELECT UNIQUE RATE_CLASS
         FROM BGE_MASTER_ACCOUNT
         WHERE EFFECTIVE_DATE <= p_END_DATE
            AND TERMINATION_DATE  >= p_END_DATE
            AND RATE_CLASS NOT IN ('NR','IS','P')
         ORDER BY RATE_CLASS;
   END IF;
END GET_SELECTION_FILTER;

PROCEDURE GET_ANCILLARY_SERVICE_FILTER(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR SELECT ANCILLARY_SERVICE_NAME, ANCILLARY_SERVICE_ID FROM ANCILLARY_SERVICE ORDER BY ANCILLARY_SERVICE_NAME;
END GET_ANCILLARY_SERVICE_FILTER ;

PROCEDURE GET_TAG_FILTER(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR SELECT DISTINCT TAG_ID FROM CDI_PLC_TICKETS ORDER BY TAG_ID;
END GET_TAG_FILTER;

PROCEDURE GET_PLAN_YEARS(p_ANCILLARY_SERVICE_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT DISTINCT TO_CHAR(BEGIN_DATE,'YYYY') "PLAN_YEAR"
      FROM ANCILLARY_SERVICE_AREA_PEAK
      WHERE ANCILLARY_SERVICE_ID = p_ANCILLARY_SERVICE_ID
      UNION SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-24),'YYYY') FROM DUAL
      UNION SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-12),'YYYY') FROM DUAL
      UNION SELECT TO_CHAR(SYSDATE,'YYYY') FROM DUAL
      UNION SELECT TO_CHAR(ADD_MONTHS(SYSDATE,12),'YYYY') FROM DUAL
      UNION SELECT TO_CHAR(ADD_MONTHS(SYSDATE,24),'YYYY') FROM DUAL
      ORDER BY 1;
END GET_PLAN_YEARS;

PROCEDURE GET_PLC_NSPL_PEAK(p_ANCILLARY_SERVICE_ID IN NUMBER, p_PLAN_YEAR IN VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
v_BEGIN_DATE DATE := TO_DATE('1/1/' || p_PLAN_YEAR, c_DATE_FORMAT);
BEGIN
   CACHE_ANCILLARY_SERVICE_ID;
   OPEN p_CURSOR FOR
      SELECT ANCILLARY_SERVICE_ID, AREA_ID, BEGIN_DATE, END_DATE, TRUNC(FROM_CUT(PEAK_DATE,GA.LOCAL_TIME_ZONE)) "PEAK_DAY", TO_CHAR(FROM_CUT(PEAK_DATE, GA.LOCAL_TIME_ZONE),'HH24') "PEAK_HOUR", PEAK_VAL "PEAK_VALUE"
      FROM ANCILLARY_SERVICE_AREA_PEAK
      WHERE ANCILLARY_SERVICE_ID = p_ANCILLARY_SERVICE_ID
         AND BEGIN_DATE = v_BEGIN_DATE
      ORDER BY BEGIN_DATE;
END GET_PLC_NSPL_PEAK;

PROCEDURE PUT_PLC_NSPL_PEAK
   (
   p_ANCILLARY_SERVICE_ID IN NUMBER,
   p_PLAN_YEAR            IN VARCHAR2,
   p_AREA_ID              IN NUMBER,
   p_PEAK_DAY             IN DATE,
   p_PEAK_HOUR            IN SMALLINT,
   p_PEAK_VALUE           IN NUMBER,
   p_ENTRY_ROWID          IN VARCHAR2
   ) AS
v_PEAK_DATE DATE := TO_CUT(TRUNC(p_PEAK_DAY)+(p_PEAK_HOUR/24), GA.LOCAL_TIME_ZONE);   
v_BEGIN_DATE DATE := TO_DATE('1/1/' || p_PLAN_YEAR, c_DATE_FORMAT);
v_END_DATE DATE := TO_DATE('12/31/' || p_PLAN_YEAR, c_DATE_FORMAT);
BEGIN
   CACHE_ANCILLARY_SERVICE_ID;
   IF p_ENTRY_ROWID IS NOT NULL THEN
      UPDATE ANCILLARY_SERVICE_AREA_PEAK SET
         AREA_ID = p_AREA_ID,
         BEGIN_DATE = v_BEGIN_DATE,
         END_DATE = v_END_DATE,
         PEAK_DATE = v_PEAK_DATE,
         PEAK_VAL = p_PEAK_VALUE
      WHERE ROWID = p_ENTRY_ROWID;
   ELSE
      INSERT INTO ANCILLARY_SERVICE_AREA_PEAK(ANCILLARY_SERVICE_ID, AREA_ID, BEGIN_DATE, END_DATE, PEAK_DATE, PEAK_VAL)
      VALUES(p_ANCILLARY_SERVICE_ID, p_AREA_ID, v_BEGIN_DATE, v_END_DATE, v_PEAK_DATE, p_PEAK_VALUE);
   END IF;
   COMMIT;
END PUT_PLC_NSPL_PEAK;

PROCEDURE CUT_PLC_NSPL_PEAK
   (
   p_ANCILLARY_SERVICE_ID IN NUMBER,
   p_AREA_ID              IN NUMBER,
   p_BEGIN_DATE           IN DATE,
   p_END_DATE             IN DATE,
   p_PEAK_DAY             IN DATE,
   p_PEAK_HOUR            IN SMALLINT
   ) AS
v_PEAK_DATE DATE := TO_CUT(TRUNC(p_PEAK_DAY)+(p_PEAK_HOUR/24), GA.LOCAL_TIME_ZONE);   
BEGIN
   DELETE ANCILLARY_SERVICE_AREA_PEAK
   WHERE ANCILLARY_SERVICE_ID = p_ANCILLARY_SERVICE_ID
      AND AREA_ID = p_AREA_ID
      AND BEGIN_DATE = p_BEGIN_DATE
      AND END_DATE = p_END_DATE
      AND PEAK_DATE = v_PEAK_DATE;
   COMMIT;
END CUT_PLC_NSPL_PEAK;

PROCEDURE GET_TICKETS(p_FILTER_TAG IN VARCHAR2, p_FILTER_CUSTOMER IN VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
v_BILL_ACCOUNT VARCHAR2(64) := CASE WHEN UPPER(p_FILTER_CUSTOMER) LIKE '%ALL%' THEN NULL ELSE p_FILTER_CUSTOMER END;
BEGIN
   OPEN p_CURSOR FOR
      SELECT TO_CHAR(BILL_ACCOUNT) "BILL_ACCOUNT", TO_CHAR(SERVICE_POINT) "SERVICE_POINT", TO_CHAR(PREMISE_NUMBER) "PREMISE_NUMBER", TAG_ID, TO_CHAR(BEGIN_DATE, c_DATE_FORMAT) "BEGIN_DATE", TO_CHAR(END_DATE, c_DATE_FORMAT) "END_DATE", TO_CHAR(TAG_VAL) "TAG_VAL"
      FROM CDI_PLC_TICKETS
      WHERE BILL_ACCOUNT LIKE '%' || TRIM(v_BILL_ACCOUNT) || '%'
         AND TAG_ID = p_FILTER_TAG
      ORDER BY 1, 2, 3;
END GET_TICKETS ;

PROCEDURE ACCEPT_TICKETS(p_FILTER_TAG IN VARCHAR2) AS
v_COUNT     PLS_INTEGER;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_ACCEPT_PLC_NSPL_TICKETS);
   SELECT COUNT(*) INTO v_COUNT FROM CDI_PLC_TICKETS WHERE TAG_ID = p_FILTER_TAG;
   IF v_COUNT > 0 THEN
      DELETE CDI_PLC_ICAP_TX WHERE TAG_ID = p_FILTER_TAG;
      LOGS.LOG_INFO( 'Number Of Records Deleted From The CDI_PLC_ICAP_TX Table For Tag ' || p_FILTER_TAG || ': ' || TO_CHAR(SQL%ROWCOUNT));
      INSERT INTO CDI_PLC_ICAP_TX
      SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TAG_ID, BEGIN_DATE, END_DATE, ROUND(TAG_VAL,6)
      FROM CDI_PLC_TICKETS
      WHERE TAG_ID = p_FILTER_TAG
         AND TAG_VAL IS NOT NULL;
      LOGS.LOG_INFO('Number Of Records Inserted Into The CDI_PLC_ICAP_TX Table For Tag ' || p_FILTER_TAG || ': ' || TO_CHAR(SQL%ROWCOUNT));
      COMMIT;
   ELSE
      LOGS.LOG_ERROR('No Content To Accept For Tag ' || p_FILTER_TAG);
  END IF;
-- Stop The Process Log --
   LOGS.LOG_INFO(c_ACCEPT_PLC_NSPL_TICKETS || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
   LOGS.STOP_PROCESS(l_MESSAGE, l_STATUS);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ERRS.ABORT_PROCESS;
END ACCEPT_TICKETS;

PROCEDURE GET_PLC_BUILDUPS(p_CURSOR IN OUT GA.REFCURSOR) AS --GET_ICAP_BUILDUPS
BEGIN
   OPEN p_CURSOR FOR
      SELECT TO_CHAR(PEAK_DATE, c_DATE_TIME_FORMAT_HH_MI) "PEAK_DATE", GROUP_NAME, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_SUM, ALM_VAL, LOSS_FACTOR, USAGE_FACTOR_SUM, DEMAND_SUM, BOTTOM_SUM, PJM_LOAD, SCALING_FACTOR, OBLIGATION_FACTOR
      FROM CDI_PLC_ICAP_BUILDUPS
      ORDER BY PEAK_DATE, GROUP_NAME, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL;
END GET_PLC_BUILDUPS;

PROCEDURE GET_NSPL_BUILDUPS(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT TO_CHAR(PEAK_DATE, c_DATE_TIME_FORMAT_HH_MI) "PEAK_DATE", GROUP_NAME, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL, PROFILE_SUM, ALM_VAL, AV_LOSS_FACTOR "AVERAGE LOSS FACTOR", PEAK_LOSS_FACTOR "PEAK LOSS FACTOR", USAGE_FACTOR_SUM, DEMAND_SUM, BOTTOM_SUM, ALM_WITH_LOSSES, PJM_LOAD, SCALING_FACTOR, OBLIGATION_FACTOR
      FROM CDI_PLC_TX_BUILDUPS
      ORDER BY PEAK_DATE, GROUP_NAME, IDR_STATUS, RATE_CLASS, VOLTAGE_LEVEL;
END GET_NSPL_BUILDUPS;

PROCEDURE GET_TOLERANCE_FILTER(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT TO_NUMBER(VALUE) FROM SYSTEM_DICTIONARY WHERE MODULE = 'Scheduling' AND KEY1 = 'Tolerance' ORDER BY 1;
END GET_TOLERANCE_FILTER;

PROCEDURE GET_RATE_CLASS_FILTER(p_ANCILLARY_SERVICE_ID IN NUMBER, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   CACHE_ANCILLARY_SERVICE_ID;
   IF p_ANCILLARY_SERVICE_ID = l_PLC_ID THEN
      OPEN p_CURSOR FOR
         SELECT CONSTANTS.ALL_STRING FROM DUAL UNION
         SELECT DISTINCT RATE_CLASS FROM CDI_PLC_ICAP_DETAIL UNION
         SELECT DISTINCT RATE_CLASS FROM CDI_PLC_ICAP_INT_DETAIL
         ORDER BY 1;
   ELSE
      OPEN p_CURSOR FOR
         SELECT DISTINCT RATE_CLASS FROM CDI_PLC_TX_DETAIL UNION
         SELECT DISTINCT RATE_CLASS FROM CDI_PLC_TX_INT_DETAIL
       ORDER BY 1;
  END IF;
END GET_RATE_CLASS_FILTER;

PROCEDURE GET_VOLTAGE_FILTER(p_ANCILLARY_SERVICE_ID IN NUMBER, p_RATE_CLASS IN VARCHAR2, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   CACHE_ANCILLARY_SERVICE_ID;
   IF p_ANCILLARY_SERVICE_ID = l_PLC_ID THEN
      IF p_RATE_CLASS = CONSTANTS.ALL_STRING THEN
         OPEN p_CURSOR FOR
            SELECT CONSTANTS.ALL_STRING FROM DUAL
            UNION
            SELECT DISTINCT VOLTAGE_LEVEL FROM (SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_ICAP_DETAIL UNION SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_ICAP_INT_DETAIL)
            ORDER BY 1;
      ELSE
         OPEN p_CURSOR FOR
            SELECT DISTINCT VOLTAGE_LEVEL FROM (SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_ICAP_DETAIL WHERE RATE_CLASS = p_RATE_CLASS UNION SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_ICAP_INT_DETAIL WHERE RATE_CLASS = p_RATE_CLASS)
            ORDER BY 1;
      END IF;
   ELSE
      IF p_RATE_CLASS = CONSTANTS.ALL_STRING THEN
         OPEN p_CURSOR FOR
            SELECT CONSTANTS.ALL_STRING FROM DUAL
            UNION
            SELECT DISTINCT VOLTAGE_LEVEL FROM (SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_TX_DETAIL UNION SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_TX_INT_DETAIL)
            ORDER BY 1;
      ELSE
         OPEN p_CURSOR FOR
            SELECT DISTINCT VOLTAGE_LEVEL FROM (SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_TX_DETAIL WHERE RATE_CLASS = p_RATE_CLASS UNION SELECT DISTINCT VOLTAGE_LEVEL FROM CDI_PLC_TX_INT_DETAIL WHERE RATE_CLASS = p_RATE_CLASS)
            ORDER BY 1;
      END IF;
   END IF;
END GET_VOLTAGE_FILTER ;

FUNCTION GET_TAG_ID(p_TYPE IN VARCHAR2) RETURN VARCHAR2 AS
v_TAG_ID CDI_PLC_TICKETS.TAG_ID%TYPE;
BEGIN
   SELECT MAX(TAG_ID) INTO v_TAG_ID FROM CDI_PLC_TICKETS WHERE TAG_ID LIKE '%' || p_TYPE;
   RETURN v_TAG_ID; 
END GET_TAG_ID;

PROCEDURE CALCULATE_PLC_STATISTICS
   (
   p_TAG_ID        IN VARCHAR2,
   p_RATE_CLASS    IN VARCHAR2,
   p_VOLTAGE_LEVEL IN VARCHAR2,
   p_TOLERANCE     IN NUMBER,
   p_STATUS       OUT NUMBER,
   p_MESSAGE      OUT VARCHAR2
   ) AS
v_AVG NUMBER;
v_MIN NUMBER;
v_MAX NUMBER;
v_DEV NUMBER;
v_CNT_ZERO  PLS_INTEGER;
v_CNT_ABOVE PLS_INTEGER;
BEGIN
-- Get Basic Distribution Statistics For The Specified Tag --
   WITH ACCOUNTS AS
      (SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER "ACCOUNT"
      FROM CDI_PLC_ICAP_DETAIL
      WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
         AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END
      UNION
      SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER
      FROM CDI_PLC_ICAP_INT_DETAIL
      WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
         AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END)
   SELECT ROUND(MIN(TAG_VAL),4), ROUND(MAX(TAG_VAL),4), ROUND(AVG(TAG_VAL),3), ROUND(STDDEV(TAG_VAL),3), SUM(CASE WHEN NVL(TAG_VAL,0) = 0 THEN 1 ELSE 0 END) INTO v_MIN, v_MAX, v_AVG, v_DEV, v_CNT_ZERO
   FROM CDI_PLC_TICKETS
   WHERE TAG_ID = p_TAG_ID
      AND BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER IN (SELECT ACCOUNT FROM ACCOUNTS);
-- Get The Count Of Observations That Exceed The User Specified Tolerance --
   WITH ACCOUNTS AS
      (SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER "ACCOUNT"
      FROM CDI_PLC_ICAP_DETAIL
      WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
         AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END
      UNION
      SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER
      FROM CDI_PLC_ICAP_INT_DETAIL
      WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
         AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END)
   SELECT COUNT(*) INTO v_CNT_ABOVE
   FROM CDI_PLC_TICKETS
   WHERE TAG_ID = p_TAG_ID
      AND BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER  IN (SELECT ACCOUNT FROM ACCOUNTS)
      AND (TAG_VAL > (v_AVG + p_TOLERANCE * v_DEV) OR TAG_VAL < (v_AVG - p_TOLERANCE * v_DEV));
-- Store The Result --
   INSERT INTO CDI_PLC_STATISTICS(TAG_ID, PLC_YEAR, RATE_CLASS, VOLTAGE_LEVEL, MINIMUM, MAXIMUM, AVERAGE, DEVIATION, NUM_OF_ZEROS, NUM_OF_ABOVE)
   VALUES(p_TAG_ID, NULL, p_RATE_CLASS, p_VOLTAGE_LEVEL, v_MIN, v_MAX, v_AVG, v_DEV, v_CNT_ZERO, v_CNT_ABOVE);
   COMMIT;
END CALCULATE_PLC_STATISTICS;

PROCEDURE CALCULATE_NSPL_STATISTICS
   (
   p_TAG_ID        IN VARCHAR2,
   p_RATE_CLASS    IN VARCHAR2,
   p_VOLTAGE_LEVEL IN VARCHAR2,
   p_TOLERANCE     IN NUMBER,
   p_STATUS       OUT NUMBER,
   p_MESSAGE      OUT VARCHAR2
   ) AS
v_AVG NUMBER;
v_MIN NUMBER;
v_MAX NUMBER;
v_DEV NUMBER;
v_CNT_ZERO  PLS_INTEGER;
v_CNT_ABOVE PLS_INTEGER;
BEGIN
-- Get Basic Distribution Statistics For The Specified Tag --
   WITH ACCOUNTS AS
      (SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER "ACCOUNT"
      FROM CDI_PLC_TX_DETAIL
      WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
         AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END
      UNION
      SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER
      FROM CDI_PLC_TX_INT_DETAIL
      WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
         AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END)
   SELECT ROUND(MIN(TAG_VAL),4), ROUND(MAX(TAG_VAL),4), ROUND(AVG(TAG_VAL),3), ROUND(STDDEV(TAG_VAL),3), SUM(CASE WHEN NVL(TAG_VAL,0) = 0 THEN 1 ELSE 0 END) INTO v_MIN, v_MAX, v_AVG, v_DEV, v_CNT_ZERO
   FROM CDI_PLC_TICKETS
   WHERE TAG_ID = p_TAG_ID
      AND BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER IN (SELECT ACCOUNT FROM ACCOUNTS);
-- Get The Count Of Observations That Exceed The User Specified Tolerance --
   WITH ACCOUNTS AS
      (SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER "ACCOUNT"
      FROM CDI_PLC_TX_DETAIL
      WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
         AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END
      UNION
      SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER
      FROM CDI_PLC_TX_INT_DETAIL
      WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
         AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END)
   SELECT COUNT(*) INTO v_CNT_ABOVE
   FROM CDI_PLC_TICKETS
   WHERE TAG_ID = p_TAG_ID
      AND BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER IN (SELECT ACCOUNT FROM ACCOUNTS)
      AND (TAG_VAL > (v_AVG + p_TOLERANCE * v_DEV) OR TAG_VAL < (v_AVG - p_TOLERANCE * v_DEV));
-- Store The Result --
   INSERT INTO CDI_PLC_STATISTICS(TAG_ID, PLC_YEAR, RATE_CLASS, VOLTAGE_LEVEL, MINIMUM, MAXIMUM, AVERAGE, DEVIATION, NUM_OF_ZEROS, NUM_OF_ABOVE)
   VALUES(p_TAG_ID, NULL, p_RATE_CLASS, p_VOLTAGE_LEVEL, v_MIN, v_MAX, v_AVG, v_DEV, v_CNT_ZERO, v_CNT_ABOVE);
   COMMIT;
END CALCULATE_NSPL_STATISTICS;

PROCEDURE GET_STATISTICS
   (
   p_ANCILLARY_SERVICE_ID IN NUMBER,
   p_RATE_CLASS           IN VARCHAR2,
   p_VOLTAGE_LEVEL        IN VARCHAR2,
   p_TOLERANCE            IN NUMBER,
   p_STATUS              OUT NUMBER,
   p_MESSAGE             OUT VARCHAR2,
   p_CURSOR              OUT GA.REFCURSOR
   ) AS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_STATISTICS';
   CACHE_ANCILLARY_SERVICE_ID;
   IF p_ANCILLARY_SERVICE_ID = l_PLC_ID THEN
      CALCULATE_PLC_STATISTICS(GET_TAG_ID('C'), p_RATE_CLASS, p_VOLTAGE_LEVEL, p_TOLERANCE, p_STATUS, p_MESSAGE);
   ELSIF p_ANCILLARY_SERVICE_ID = l_NSPL_ID THEN
      CALCULATE_NSPL_STATISTICS(GET_TAG_ID('T'), p_RATE_CLASS, p_VOLTAGE_LEVEL, p_TOLERANCE, p_STATUS, p_MESSAGE);
   END IF;
   COMMIT;
   OPEN p_CURSOR FOR
      SELECT * FROM CDI_PLC_STATISTICS ORDER BY 1,2;
END GET_STATISTICS;

PROCEDURE GET_STATISTICS_DETAIL
   (
   p_ANCILLARY_SERVICE_ID IN NUMBER,
   p_RATE_CLASS           IN VARCHAR2,
   p_VOLTAGE_LEVEL        IN VARCHAR2,
   p_TOLERANCE            IN NUMBER,
   p_STATUS              OUT NUMBER,
   p_MESSAGE             OUT VARCHAR2,
   p_CURSOR              OUT GA.REFCURSOR
   ) AS
v_AVERAGE   NUMBER;
v_DEVIATION NUMBER;
v_TAG_ID VARCHAR2(16) := GET_TAG_ID(CASE WHEN p_ANCILLARY_SERVICE_ID = l_PLC_ID THEN 'C' ELSE 'T' END);
BEGIN
   SELECT AVERAGE, DEVIATION INTO v_AVERAGE, v_DEVIATION FROM CDI_PLC_STATISTICS WHERE ROWNUM = 1;
   IF p_ANCILLARY_SERVICE_ID = l_PLC_ID THEN
      OPEN p_CURSOR FOR
         WITH ACCOUNTS AS
            (SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER "ACCOUNT"
            FROM CDI_PLC_ICAP_DETAIL
            WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
               AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END
            UNION
            SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER
            FROM CDI_PLC_ICAP_INT_DETAIL
            WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
               AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END)
         SELECT TO_CHAR(BILL_ACCOUNT) BILL_ACCOUNT, TO_CHAR(SERVICE_POINT) "SERVICE_POINT", TO_CHAR(PREMISE_NUMBER) "PREMISE_NUMBER", TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL
         FROM CDI_PLC_TICKETS A
         WHERE TAG_ID = v_TAG_ID
            AND BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER IN (SELECT ACCOUNT FROM ACCOUNTS) 
            AND (TAG_VAL > (v_AVERAGE + p_TOLERANCE * v_DEVIATION) OR TAG_VAL < (v_AVERAGE - p_TOLERANCE * v_DEVIATION))
       ORDER BY TAG_VAL DESC;
   ELSIF p_ANCILLARY_SERVICE_ID = l_NSPL_ID THEN
      OPEN p_CURSOR FOR
         WITH ACCOUNTS AS
            (SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER "ACCOUNT"
            FROM CDI_PLC_TX_DETAIL
            WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
               AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END
            UNION
            SELECT DISTINCT BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER
            FROM CDI_PLC_TX_INT_DETAIL
            WHERE RATE_CLASS LIKE CASE WHEN p_RATE_CLASS = 'ALL' THEN '%' ELSE p_RATE_CLASS END
               AND VOLTAGE_LEVEL LIKE CASE WHEN p_VOLTAGE_LEVEL = 'ALL' THEN '%' ELSE p_VOLTAGE_LEVEL END)
         SELECT TO_CHAR(BILL_ACCOUNT) BILL_ACCOUNT, TO_CHAR(SERVICE_POINT) "SERVICE_POINT", TO_CHAR(PREMISE_NUMBER) "PREMISE_NUMBER", TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL
         FROM CDI_PLC_TICKETS A
         WHERE TAG_ID = v_TAG_ID
            AND BILL_ACCOUNT || SERVICE_POINT || PREMISE_NUMBER IN (SELECT ACCOUNT FROM ACCOUNTS) 
            AND (TAG_VAL > (v_AVERAGE + p_TOLERANCE * v_DEVIATION) OR TAG_VAL < (v_AVERAGE - p_TOLERANCE * v_DEVIATION))
         ORDER BY TAG_VAL DESC;
   END IF;
END GET_STATISTICS_DETAIL;

PROCEDURE IMPORT_ALM_ADD_BACK_FILE
   (
   p_IMPORT_FILE      IN CLOB,
   p_IMPORT_FILE_PATH IN VARCHAR2,
   p_STATUS          OUT NUMBER,
   p_MESSAGE         OUT VARCHAR2
   ) AS
v_CONTAINER PARSE_UTIL.BIG_STRING_TABLE_MP;
v_TOKENS PARSE_UTIL.STRING_TABLE;
v_COUNT PLS_INTEGER := 0;
v_ERROR_COUNT PLS_INTEGER := 0;
v_CDI_PLC_ALMBACKS CDI_PLC_ALMBACKS%ROWTYPE;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_IMPORT_ALM_ADD_BACK_FILE);
-- Clear Target Table Prior To Loading --
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_PLC_ALMBACKS';
-- Parse The File Into Records --   
   PARSE_UTIL.PARSE_CLOB_INTO_LINES(p_IMPORT_FILE, v_CONTAINER);
   LOGS.LOG_INFO('Input File Container Count: ' || TO_CHAR(v_CONTAINER.COUNT));
-- Process Each Line --
   FOR v_INDEX IN v_CONTAINER.FIRST..v_CONTAINER.LAST LOOP
      BEGIN
         PARSE_UTIL.PARSE_DELIMITED_STRING(v_CONTAINER(v_INDEX), c_COMMA, v_TOKENS);
         IF v_TOKENS.COUNT = 28 THEN
            v_CDI_PLC_ALMBACKS.BILL_ACCOUNT   := TRIM(v_TOKENS(1));
            v_CDI_PLC_ALMBACKS.SERVICE_POINT  := TRIM(v_TOKENS(2));
            v_CDI_PLC_ALMBACKS.PREMISE_NUMBER := TRIM(v_TOKENS(3));
            v_CDI_PLC_ALMBACKS.ADD_DATE       := TO_DATE(TRIM(v_TOKENS(4)), c_DATE_FORMAT);
            v_CDI_PLC_ALMBACKS.HOUR_1  := TRIM(v_TOKENS(5));
            v_CDI_PLC_ALMBACKS.HOUR_2  := TRIM(v_TOKENS(6));
            v_CDI_PLC_ALMBACKS.HOUR_3  := TRIM(v_TOKENS(7));
            v_CDI_PLC_ALMBACKS.HOUR_4  := TRIM(v_TOKENS(8));
            v_CDI_PLC_ALMBACKS.HOUR_5  := TRIM(v_TOKENS(9));
            v_CDI_PLC_ALMBACKS.HOUR_6  := TRIM(v_TOKENS(10));
            v_CDI_PLC_ALMBACKS.HOUR_7  := TRIM(v_TOKENS(11));
            v_CDI_PLC_ALMBACKS.HOUR_8  := TRIM(v_TOKENS(12));
            v_CDI_PLC_ALMBACKS.HOUR_9  := TRIM(v_TOKENS(13));
            v_CDI_PLC_ALMBACKS.HOUR_10 := TRIM(v_TOKENS(14));
            v_CDI_PLC_ALMBACKS.HOUR_11 := TRIM(v_TOKENS(15));
            v_CDI_PLC_ALMBACKS.HOUR_12 := TRIM(v_TOKENS(16));
            v_CDI_PLC_ALMBACKS.HOUR_13 := TRIM(v_TOKENS(17));
            v_CDI_PLC_ALMBACKS.HOUR_14 := TRIM(v_TOKENS(18));
            v_CDI_PLC_ALMBACKS.HOUR_15 := TRIM(v_TOKENS(19));
            v_CDI_PLC_ALMBACKS.HOUR_16 := TRIM(v_TOKENS(20));
            v_CDI_PLC_ALMBACKS.HOUR_17 := TRIM(v_TOKENS(21));
            v_CDI_PLC_ALMBACKS.HOUR_18 := TRIM(v_TOKENS(22));
            v_CDI_PLC_ALMBACKS.HOUR_19 := TRIM(v_TOKENS(23));
            v_CDI_PLC_ALMBACKS.HOUR_20 := TRIM(v_TOKENS(24));
            v_CDI_PLC_ALMBACKS.HOUR_21 := TRIM(v_TOKENS(25));
            v_CDI_PLC_ALMBACKS.HOUR_22 := TRIM(v_TOKENS(26));
            v_CDI_PLC_ALMBACKS.HOUR_23 := TRIM(v_TOKENS(27));
            v_CDI_PLC_ALMBACKS.HOUR_24 := TRIM(v_TOKENS(28));
            INSERT INTO CDI_PLC_ALMBACKS VALUES v_CDI_PLC_ALMBACKS;
            v_COUNT := v_COUNT + 1;
         ELSE
            LOGS.LOG_ERROR('Invalid Field Count, Expected: 28, Observed: ' || TO_CHAR(v_TOKENS.COUNT) || ', Record: ' || v_CONTAINER(v_INDEX));
            v_ERROR_COUNT := v_ERROR_COUNT + 1;
         END IF;
      EXCEPTION
         WHEN OTHERS THEN
            LOGS.LOG_ERROR('Record: ' || v_CONTAINER(v_INDEX) || ', SQLERRM: ' || SQLERRM);
            v_ERROR_COUNT := v_ERROR_COUNT + 1;
      END;
   END LOOP;
   p_STATUS := 0;
   p_MESSAGE := 'Import Complete. Records Posted To Target Table: ' || TO_CHAR(v_COUNT) || ', Errors Detected: ' || TO_CHAR(v_ERROR_COUNT);
   LOGS.LOG_INFO(p_MESSAGE);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      p_STATUS := SQLCODE;
      p_MESSAGE := SQLERRM;
      ERRS.ABORT_PROCESS;
END IMPORT_ALM_ADD_BACK_FILE;

PROCEDURE GET_ALM_ADD_BACKS(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT
         TO_CHAR(BILL_ACCOUNT)  BILL_ACCOUNT,
         TO_CHAR(SERVICE_POINT) SERVICE_POINT,
         TO_CHAR(PREMISE_NUMBER) PREMISE_NUMBER,
         TO_CHAR(ADD_DATE, c_DATE_FORMAT) ADD_DATE,
         TO_CHAR(HOUR_1) HOUR1,TO_CHAR(HOUR_2) HOUR2,TO_CHAR(HOUR_3) HOUR3, TO_CHAR(HOUR_4) HOUR4,
         TO_CHAR(HOUR_5) HOUR5,TO_CHAR(HOUR_6) HOUR6,TO_CHAR(HOUR_7) HOUR7, TO_CHAR(HOUR_8) HOUR8,
         TO_CHAR(HOUR_9) HOUR9,TO_CHAR(HOUR_10) HOUR10,TO_CHAR(HOUR_11) HOUR11, TO_CHAR(HOUR_12) HOUR12,
         TO_CHAR(HOUR_13) HOUR13,TO_CHAR(HOUR_14) HOUR14,TO_CHAR(HOUR_15) HOUR15, TO_CHAR(HOUR_16) HOUR16,
         TO_CHAR(HOUR_17) HOUR17,TO_CHAR(HOUR_18) HOUR18,TO_CHAR(HOUR_19) HOUR19, TO_CHAR(HOUR_20) HOUR20,
         TO_CHAR(HOUR_21) HOUR21,TO_CHAR(HOUR_22) HOUR22,TO_CHAR(HOUR_23) HOUR23, TO_CHAR(HOUR_24) HOUR24
      FROM CDI_PLC_ALMBACKS
      ORDER BY 1,2,3,4;
END GET_ALM_ADD_BACKS;

PROCEDURE GET_POLR_TO_PLC_MAP(p_BEGIN_DATE IN DATE, p_END_DATE IN DATE, p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT PLC_BEGIN_DATE, PLC_END_DATE, POLR_BEGIN_DATE, POLR_END_DATE, ROWID "ENTRY_ROWID" 
      FROM CDI_POLR_TO_PLC_MAP
      WHERE PLC_BEGIN_DATE BETWEEN p_BEGIN_DATE AND p_END_DATE
      ORDER BY PLC_BEGIN_DATE;
END GET_POLR_TO_PLC_MAP;

PROCEDURE PUT_POLR_TO_PLC_MAP
   (
   p_PLC_BEGIN_DATE  IN DATE,
   p_PLC_END_DATE    IN DATE,
   p_POLR_BEGIN_DATE IN DATE,
   p_POLR_END_DATE   IN DATE,
   p_ENTRY_ROWID     IN VARCHAR2
   ) AS
BEGIN
   IF p_ENTRY_ROWID IS NULL THEN
      INSERT INTO CDI_POLR_TO_PLC_MAP(PLC_BEGIN_DATE, PLC_END_DATE, POLR_BEGIN_DATE, POLR_END_DATE)
      VALUES(p_PLC_BEGIN_DATE, p_PLC_END_DATE, p_POLR_BEGIN_DATE, p_POLR_END_DATE);
   ELSE
      UPDATE CDI_POLR_TO_PLC_MAP SET PLC_BEGIN_DATE = p_PLC_BEGIN_DATE, PLC_END_DATE = p_PLC_END_DATE, POLR_BEGIN_DATE = p_POLR_BEGIN_DATE, POLR_END_DATE = p_POLR_END_DATE
      WHERE ROWID = p_ENTRY_ROWID;
   END IF;
   COMMIT; 
END PUT_POLR_TO_PLC_MAP;

PROCEDURE CUT_POLR_TO_PLC_MAP(p_ENTRY_ROWID IN VARCHAR2) AS
BEGIN
   DELETE CDI_POLR_TO_PLC_MAP WHERE ROWID = p_ENTRY_ROWID;
   COMMIT;
END CUT_POLR_TO_PLC_MAP;

PROCEDURE GET_PLC_WEATHER_NORMAL_FACTOR(p_CURSOR OUT GA.REFCURSOR) AS
BEGIN
   OPEN p_CURSOR FOR
      SELECT RATE_CLASS, VOLTAGE_LEVEL, FACTOR, ROWID "ENTRY_ROWID" 
      FROM CDI_PLC_WEATHER_NORMAL_FACTOR
      ORDER BY RATE_CLASS, VOLTAGE_LEVEL;
END GET_PLC_WEATHER_NORMAL_FACTOR;

PROCEDURE PUT_PLC_WEATHER_NORMAL_FACTOR
   (
   p_RATE_CLASS    IN VARCHAR2,
   p_VOLTAGE_LEVEL IN VARCHAR2,
   p_FACTOR        IN NUMBER,
   p_ENTRY_ROWID   IN VARCHAR2
   ) AS
BEGIN
   IF p_ENTRY_ROWID IS NULL THEN
      INSERT INTO CDI_PLC_WEATHER_NORMAL_FACTOR(RATE_CLASS, VOLTAGE_LEVEL, FACTOR)
      VALUES(p_RATE_CLASS, p_VOLTAGE_LEVEL, p_FACTOR);
   ELSE
      UPDATE CDI_PLC_WEATHER_NORMAL_FACTOR SET RATE_CLASS = p_RATE_CLASS, VOLTAGE_LEVEL = p_VOLTAGE_LEVEL, FACTOR = p_FACTOR
      WHERE ROWID = p_ENTRY_ROWID;
   END IF;
   COMMIT; 
END PUT_PLC_WEATHER_NORMAL_FACTOR;

PROCEDURE CUT_PLC_WEATHER_NORMAL_FACTOR(p_ENTRY_ROWID IN VARCHAR2) AS
BEGIN
   DELETE CDI_PLC_WEATHER_NORMAL_FACTOR WHERE ROWID = p_ENTRY_ROWID;
   COMMIT;
END CUT_PLC_WEATHER_NORMAL_FACTOR;

PROCEDURE ASSIGN_DEFAULT_PLC_TAG(p_BEGIN_DATE IN DATE) AS
v_PROCEDURE_NAME VARCHAR2(32) := 'ASSIGN_DEFAULT_PLC_TAG';
v_TAG_ID VARCHAR2(16);
v_PLAN_YEAR NUMBER(4) := TO_NUMBER(TO_CHAR(p_BEGIN_DATE,'YYYY'));
v_BEGIN_DATE DATE;
v_END_DATE DATE;
v_COUNT PLS_INTEGER := 0;
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
CURSOR c_SELECT IS SELECT ANCILLARY_SERVICE_ID, ANCILLARY_SERVICE_NAME, CASE ANCILLARY_SERVICE_NAME WHEN 'ICAP' THEN 'C' WHEN 'Network Service' THEN 'T' ELSE '?' END  ANCILLARY_SERVICE_TYPE FROM ANCILLARY_SERVICE WHERE ANCILLARY_SERVICE_NAME IN ('ICAP','Network Service');
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_ASSIGN_DEFAULT_PLC_TAG);
   LOGS.LOG_INFO('Plan Year Date: ' || TO_CHAR(TRUNC(p_BEGIN_DATE),'YEAR', c_DATE_FORMAT));
   FOR v_SELECT IN c_SELECT LOOP 
-- Utilize Premise Inheritance To Assign The Default Plc/Nspl Value --
      v_TAG_ID := v_PLAN_YEAR || v_SELECT.ANCILLARY_SERVICE_TYPE;
      v_BEGIN_DATE := CASE WHEN v_SELECT.ANCILLARY_SERVICE_TYPE = 'C' THEN TO_DATE('06/01/' || TO_CHAR(v_PLAN_YEAR),   c_DATE_FORMAT) ELSE TO_DATE('01/01/' || TO_CHAR(v_PLAN_YEAR), c_DATE_FORMAT) END;
      v_END_DATE   := CASE WHEN v_SELECT.ANCILLARY_SERVICE_TYPE = 'C' THEN TO_DATE('05/31/' || TO_CHAR(v_PLAN_YEAR+1), c_DATE_FORMAT) ELSE TO_DATE('12/31/' || TO_CHAR(v_PLAN_YEAR), c_DATE_FORMAT) END; 
      LOGS.LOG_INFO('Ancillary Service: ' || v_SELECT.ANCILLARY_SERVICE_NAME || ', Plan Year Begin Date: ' || TO_CHAR(v_BEGIN_DATE, c_DATE_FORMAT) || ', End Date: ' || TO_CHAR(v_END_DATE, c_DATE_FORMAT));
      INSERT INTO CDI_PLC_ICAP_TX(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL)
      SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, v_TAG_ID "TAG_ID", EFFECTIVE_DATE "BEGIN_DATE", TERMINATION_DATE "END_DATE",
         (SELECT MAX(TAG_VAL)
         FROM CDI_PLC_ICAP_TX X
         WHERE X.PREMISE_NUMBER = A.PREMISE_NUMBER
            AND X.TAG_ID = (SELECT MAX(TO_NUMBER(SUBSTR(TAG_ID,1,4))) FROM CDI_PLC_ICAP_TX WHERE PREMISE_NUMBER = X.PREMISE_NUMBER AND TO_NUMBER(SUBSTR(TAG_ID,1,4)) <= v_PLAN_YEAR)) "TAG_VAL"  
      FROM BGE_MASTER_ACCOUNT A
      WHERE A.TERMINATION_DATE >= p_BEGIN_DATE
         AND NOT EXISTS (SELECT NULL FROM CDI_PLC_ICAP_TX WHERE BILL_ACCOUNT = A.BILL_ACCOUNT AND SERVICE_POINT = A.SERVICE_POINT AND PREMISE_NUMBER = A.PREMISE_NUMBER);
      LOGS.LOG_INFO('Number Of "' || v_SELECT.ANCILLARY_SERVICE_NAME || '" Premise Inheritance Default Assignments: ' || TO_CHAR(SQL%ROWCOUNT));
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
-- For Any Default Account Without A Premise Inheritance Assignment Use Rate Class/Voltage Assignment --
      INSERT INTO CDI_PLC_ICAP_TX(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL)
      SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, v_TAG_ID "TAG_ID", EFFECTIVE_DATE "BEGIN_DATE", TERMINATION_DATE "END_DATE", DEFAULT_VAL
      FROM BGE_MASTER_ACCOUNT A
         JOIN ANCILLARY_SERVICE_ALLOCATION B ON B.ALLOCATION_NAME =  A.RATE_CLASS || '-' || A.VOLTAGE_LEVEL AND B.BEGIN_DATE = v_BEGIN_DATE AND B.END_DATE = v_END_DATE
      WHERE A.TERMINATION_DATE >= p_BEGIN_DATE
         AND NOT EXISTS (SELECT NULL FROM CDI_PLC_ICAP_TX WHERE BILL_ACCOUNT = A.BILL_ACCOUNT AND SERVICE_POINT = A.SERVICE_POINT AND PREMISE_NUMBER = A.PREMISE_NUMBER);
      LOGS.LOG_INFO('Number Of "' || v_SELECT.ANCILLARY_SERVICE_NAME || '" Ancillary Service Allocation Default Assignments: ' || TO_CHAR(SQL%ROWCOUNT));
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
   END LOOP;
-- Stop The Process Log --
   LOGS.LOG_INFO(c_ASSIGN_DEFAULT_PLC_TAG || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
   LOGS.STOP_PROCESS(l_MESSAGE, l_STATUS);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ERRS.ABORT_PROCESS;
END ASSIGN_DEFAULT_PLC_TAG;

END CDI_PLC_NSPL_CALCULATOR;
/
