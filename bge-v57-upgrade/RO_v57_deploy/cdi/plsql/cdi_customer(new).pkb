CREATE OR REPLACE PACKAGE BODY CDI_CUSTOMER AS

c_PACKAGE_NAME                 CONSTANT VARCHAR2(32) := 'CDI_CUSTOMER';
c_LOAD_CUSTOMER_INFORMATION    CONSTANT VARCHAR2(64) := 'CDI: Load Customer Information File';
c_FILTER_CUSTOMER_INFORMATION  CONSTANT VARCHAR2(64) := 'CDI: Filter Customer Information';
c_CI_VALIDATE_AND_POST         CONSTANT VARCHAR2(64) := 'CDI: Customer Information Validate And Post';
c_SELECT_SETTLEMENT_REPORT     CONSTANT VARCHAR2(64) := 'Select Settlement User Reports';
c_INSUFFICIENT_PRIVILEGES      CONSTANT VARCHAR2(64) := 'Insufficient Privileges To View Or Modify Content';
c_DATE_FORMAT                  CONSTANT VARCHAR2(16) := 'MM/DD/YYYY';
c_DEFAULT_SUPPLIER             CONSTANT VARCHAR2(16) := 'DEFAULT';
c_TIMESTAMP_FORMAT             CONSTANT VARCHAR2(32) := 'MM/DD/YYYY HH:MI:SS.FF AM';
c_INITIAL_ERROR_MESSAGE        CONSTANT VARCHAR2(16) := 'NEW RECORD';
c_COMMA                        CONSTANT CHAR(1)      := ',';
c_DEFAULT_PLC_BAND             CONSTANT CHAR(1)      := 'Z';

FUNCTION VALIDATE_DATE(p_DATE_STRING IN VARCHAR2, p_STATUS OUT NUMBER) RETURN DATE AS
BEGIN
   p_STATUS := GA.SUCCESS;
   RETURN TO_DATE(p_DATE_STRING, c_DATE_FORMAT);
EXCEPTION
   WHEN OTHERS THEN
      p_STATUS := GA.NO_SYSTEM_DATE_TIME;
      RETURN NULL;
END VALIDATE_DATE;

FUNCTION VALIDATE_TIMESTAMP(p_TIMESTAMP_STRING IN VARCHAR2, p_STATUS OUT NUMBER) RETURN DATE AS
BEGIN
   p_STATUS := GA.SUCCESS;
   RETURN TO_TIMESTAMP(p_TIMESTAMP_STRING, c_TIMESTAMP_FORMAT);
EXCEPTION
   WHEN OTHERS THEN
      p_STATUS := GA.NO_SYSTEM_DATE_TIME;
      RETURN NULL;
END VALIDATE_TIMESTAMP;

PROCEDURE ASSIGN_PLC_NSPL_TAG AS
v_TAG_TYPE CHAR(1);
v_COUNT PLS_INTEGER := 0;
v_MESSAGE VARCHAR2(1000);
v_MARK_TIME PLS_INTEGER := DBMS_UTILITY.GET_TIME;
CURSOR c_PLC_NSPL IS
   SELECT ANCILLARY_SERVICE_ID, ANCILLARY_SERVICE_NAME, CASE ANCILLARY_SERVICE_NAME WHEN 'ICAP' THEN 'C' WHEN 'Network Service' THEN 'T' ELSE '?' END "TAG_TYPE"
   FROM ANCILLARY_SERVICE
   WHERE ANCILLARY_SERVICE_NAME IN ('ICAP','Network Service');
CURSOR c_DEFAULT(p_ANCILLARY_SERVICE_ID IN NUMBER, p_TAG_TYPE IN CHAR) IS
   SELECT DISTINCT A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, TO_CHAR(B.BEGIN_DATE,'YYYY') || p_TAG_TYPE "TAG_ID", B.BEGIN_DATE, B.END_DATE, B.DEFAULT_VAL,
      TO_CHAR(A.BILL_ACCOUNT)||','||TO_CHAR(A.SERVICE_POINT)||','||TO_CHAR(A.PREMISE_NUMBER)||','||TO_CHAR(B.BEGIN_DATE,'YYYY')||p_TAG_TYPE||','||TO_CHAR(B.BEGIN_DATE,c_DATE_FORMAT)||','||TO_CHAR(B.END_DATE,c_DATE_FORMAT)||','||TO_CHAR(B.DEFAULT_VAL) "RECORD"
   FROM CDI_MISSING_PLC_NSPL_TAG_CACHE A
      JOIN ANCILLARY_SERVICE_ALLOCATION B ON B.ANCILLARY_SERVICE_ID = p_ANCILLARY_SERVICE_ID AND B.ALLOCATION_NAME =  A.RATE_CLASS || '-' || A.VOLTAGE_LEVEL AND B.END_DATE >= A.EFFECTIVE_DATE
   WHERE A.TAG_TYPE = p_TAG_TYPE
      AND A.SOURCE_BILL_ACCOUNT IS NULL
      AND A.EFFECTIVE_DATE <> A.TERMINATION_DATE
      AND A.RATE_CLASS IS NOT NULL
      AND A.VOLTAGE_LEVEL IS NOT NULL
   ORDER BY A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, B.BEGIN_DATE;     
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_MISSING_PLC_NSPL_TAG_CACHE';
   FOR v_PLC_NSPL IN c_PLC_NSPL LOOP 
      v_COUNT := 0;
      LOGS.LOG_INFO('Assign New Account Defaults For Ancillary Service: ' || v_PLC_NSPL.ANCILLARY_SERVICE_NAME);
      v_TAG_TYPE := v_PLC_NSPL.TAG_TYPE;
-- Cache Accounts Without An Assignment --
      INSERT INTO CDI_MISSING_PLC_NSPL_TAG_CACHE(TAG_TYPE, BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, EFFECTIVE_DATE, TERMINATION_DATE, RATE_CLASS, VOLTAGE_LEVEL)
      SELECT DISTINCT v_TAG_TYPE, BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, EFFECTIVE_DATE, TERMINATION_DATE, RATE_CLASS, VOLTAGE_LEVEL
      FROM BGE_CI_STAGING V
      WHERE V.EFFECTIVE_DATE <> V.TERMINATION_DATE
         AND NOT EXISTS (SELECT NULL FROM CDI_PLC_ICAP_TX WHERE BILL_ACCOUNT = V.BILL_ACCOUNT AND SERVICE_POINT = V.SERVICE_POINT AND PREMISE_NUMBER = V.PREMISE_NUMBER AND SUBSTR(TAG_ID,5,1) = v_TAG_TYPE AND TO_NUMBER(SUBSTR(TAG_ID,1,4)) = TO_NUMBER(TO_CHAR(V.EFFECTIVE_DATE,'YYYY')));
      LOGS.LOG_INFO('Number Of "' || v_PLC_NSPL.ANCILLARY_SERVICE_NAME || '" Ancillary Service Accounts Missing An Assignment: ' || TO_CHAR(SQL%ROWCOUNT));
-- Select A Source Bill Account/Service Point Candidate Based On Premise Inheritance --      
      MERGE INTO CDI_MISSING_PLC_NSPL_TAG_CACHE T
      USING
         (SELECT * 
         FROM
            (SELECT A.TAG_TYPE, A.BILL_ACCOUNT, A.SERVICE_POINT, B.BILL_ACCOUNT "SOURCE_BILL_ACCOUNT", A.PREMISE_NUMBER, B.SERVICE_POINT "SOURCE_SERVICE_POINT", ROW_NUMBER() OVER(PARTITION BY B.PREMISE_NUMBER ORDER BY B.PREMISE_NUMBER, B.BEGIN_DATE DESC) "TARGET_ROW"
            FROM CDI_MISSING_PLC_NSPL_TAG_CACHE A
               JOIN CDI_PLC_ICAP_TX B ON B.BILL_ACCOUNT <> A.BILL_ACCOUNT AND B.SERVICE_POINT <> A.SERVICE_POINT AND B.PREMISE_NUMBER = A.PREMISE_NUMBER AND SUBSTR(B.TAG_ID,5,1) = v_TAG_TYPE AND TO_NUMBER(SUBSTR(B.TAG_ID,1,4)) <= TO_NUMBER(TO_CHAR(A.EFFECTIVE_DATE,'YYYY'))
            WHERE TAG_TYPE = v_TAG_TYPE
               AND NVL(A.RATE_CLASS,'X') NOT IN ('PL','SL'))
         WHERE TARGET_ROW = 1) S
      ON (T.TAG_TYPE = S.TAG_TYPE AND T.BILL_ACCOUNT = S.BILL_ACCOUNT AND T.SERVICE_POINT = S.SERVICE_POINT AND T.PREMISE_NUMBER = S.PREMISE_NUMBER)
      WHEN MATCHED THEN
         UPDATE SET T.SOURCE_BILL_ACCOUNT = S.SOURCE_BILL_ACCOUNT, T.SOURCE_SERVICE_POINT = S.SOURCE_SERVICE_POINT;
      LOGS.LOG_INFO('Number Of "' || v_PLC_NSPL.ANCILLARY_SERVICE_NAME || '" Premise Inheritance Source Candidates: ' || TO_CHAR(SQL%ROWCOUNT));
-- Utilize Premise Inheritance To Assign The Default PLC/NSPL Value --
      MERGE INTO CDI_PLC_ICAP_TX T
      USING
         (SELECT DISTINCT A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, B.TAG_ID, B.BEGIN_DATE, B.END_DATE, B.TAG_VAL
         FROM CDI_MISSING_PLC_NSPL_TAG_CACHE A
            JOIN CDI_PLC_ICAP_TX B ON B.BILL_ACCOUNT = A.SOURCE_BILL_ACCOUNT AND B.SERVICE_POINT = A.SOURCE_SERVICE_POINT AND B.PREMISE_NUMBER = A.PREMISE_NUMBER AND SUBSTR(B.TAG_ID,5,1) = v_TAG_TYPE AND TO_NUMBER(SUBSTR(B.TAG_ID,1,4)) >= TO_NUMBER(TO_CHAR(EFFECTIVE_DATE,'YYYY'))
         WHERE A.TAG_TYPE = v_TAG_TYPE) S
      ON (T.BILL_ACCOUNT = S.BILL_ACCOUNT AND T.SERVICE_POINT = S.SERVICE_POINT AND T.PREMISE_NUMBER = S.PREMISE_NUMBER AND T.TAG_ID = S.TAG_ID)
      WHEN NOT MATCHED THEN
         INSERT(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL)
         VALUES(S.BILL_ACCOUNT, S.SERVICE_POINT, S.PREMISE_NUMBER, S.TAG_ID, S.BEGIN_DATE, S.END_DATE, S.TAG_VAL);
      LOGS.LOG_INFO('Number Of "' || v_PLC_NSPL.ANCILLARY_SERVICE_NAME || '" Premise Inheritance Assignment Records: ' || TO_CHAR(SQL%ROWCOUNT));
-- For Any Default Account Without A Premise Inheritance Assignment Use Rate Class/Voltage Lookup Assignment --
      v_COUNT := 0;
      FOR v_DEFAULT IN c_DEFAULT(v_PLC_NSPL.ANCILLARY_SERVICE_ID, v_TAG_TYPE) LOOP
         BEGIN
            LOGS.LOG_DEBUG(v_PLC_NSPL.ANCILLARY_SERVICE_NAME || ' Default Assignment: ' || v_DEFAULT.RECORD);
            MERGE INTO CDI_PLC_ICAP_TX T
            USING (SELECT v_DEFAULT.BILL_ACCOUNT "BILL_ACCOUNT", v_DEFAULT.SERVICE_POINT "SERVICE_POINT", v_DEFAULT.PREMISE_NUMBER "PREMISE_NUMBER", v_DEFAULT.TAG_ID "TAG_ID", v_DEFAULT.BEGIN_DATE "BEGIN_DATE", v_DEFAULT.END_DATE "END_DATE", v_DEFAULT.DEFAULT_VAL "TAG_VAL" FROM DUAL) S
            ON (T.BILL_ACCOUNT = S.BILL_ACCOUNT AND T.SERVICE_POINT = S.SERVICE_POINT AND T.PREMISE_NUMBER = S.PREMISE_NUMBER AND T.TAG_ID = S.TAG_ID)
            WHEN NOT MATCHED THEN
               INSERT(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TAG_ID, BEGIN_DATE, END_DATE, TAG_VAL)
               VALUES(S.BILL_ACCOUNT, S.SERVICE_POINT, S.PREMISE_NUMBER, S.TAG_ID, S.BEGIN_DATE, S.END_DATE, S.TAG_VAL);
            v_COUNT := v_COUNT + SQL%ROWCOUNT;
         EXCEPTION
            WHEN OTHERS THEN
               v_MESSAGE := SQLERRM;
               LOGS.LOG_DEBUG(v_MESSAGE);
               ERRS.LOG_AND_CONTINUE('Error In Default ' || v_PLC_NSPL.ANCILLARY_SERVICE_NAME || ' Assignment: ' || v_DEFAULT.RECORD);
         END;
      END LOOP;
      LOGS.LOG_INFO('Number Of "' || v_PLC_NSPL.ANCILLARY_SERVICE_NAME || '" Default Assignment Records: ' || TO_CHAR(v_COUNT));
   END LOOP;
   LOGS.LOG_INFO('Assign Default PLC/NSPL Tag Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     ERRS.LOG_AND_CONTINUE('Exception In Assignment Of Default PLC Tags.');
END ASSIGN_PLC_NSPL_TAG;

PROCEDURE VALIDATE_AND_POST(p_VALID_COUNT OUT PLS_INTEGER, p_INVALID_COUNT OUT PLS_INTEGER) AS
CURSOR c_SELECT_DELETE IS
   SELECT DISTINCT A.BILL_ACCOUNT, A.SERVICE_POINT, A.PREMISE_NUMBER, A.BILL_ACCOUNT || '-' || A.SERVICE_POINT || '-' || A.PREMISE_NUMBER "CUSTOMER_IDENT"
   FROM CDI_BGE_CI_VALIDATE A
      JOIN BGE_IGNORE_ACCOUNT B ON B.BILL_ACCOUNT = A.BILL_ACCOUNT AND B.SERVICE_POINT = A.SERVICE_POINT AND B.PREMISE_NUMBER = A.PREMISE_NUMBER;
CURSOR c_SELECT_CANDIDATES IS
   SELECT X.BILL_ACCOUNT || '-' || X.SERVICE_POINT || '-' || X.PREMISE_NUMBER "CUSTOMER_IDENT", X.*
   FROM CDI_BGE_CI_VALIDATE X
   WHERE NOT EXISTS (SELECT NULL FROM BGE_IGNORE_ACCOUNT WHERE BILL_ACCOUNT = X.BILL_ACCOUNT AND SERVICE_POINT = X.SERVICE_POINT AND PREMISE_NUMBER = X.PREMISE_NUMBER)
   ORDER BY BGE_TIMESTAMP, EFFECTIVE_DATE, BILL_ACCOUNT, PREMISE_NUMBER, SERVICE_POINT;
CURSOR c_SELECT_FAILED IS
   SELECT S.ROWID "REC_ROWID", M.ROWID  "BGE_ROWID", M.BILL_ACCOUNT, M.PREMISE_NUMBER, M.SERVICE_POINT, M.FILTER_SEQUENCE
   FROM BGE_CI_STAGING S
      JOIN CDI_BGE_CI_VALIDATE V ON V.BILL_ACCOUNT = S.BILL_ACCOUNT AND V.PREMISE_NUMBER = S.PREMISE_NUMBER AND V.SERVICE_POINT = S.SERVICE_POINT AND V.REC_ROWID = S.ROWID
      JOIN BGE_MASTER_ACCOUNT  M ON M.BILL_ACCOUNT = S.BILL_ACCOUNT AND M.PREMISE_NUMBER = S.PREMISE_NUMBER AND M.SERVICE_POINT = S.SERVICE_POINT AND M.CI_ROWID = V.REC_ROWID
   WHERE S.PROCESS_ROW <> 'E'
      AND EXISTS (SELECT NULL FROM BGE_CI_STAGING WHERE BILL_ACCOUNT = S.BILL_ACCOUNT AND PREMISE_NUMBER = S.PREMISE_NUMBER AND SERVICE_POINT = S.SERVICE_POINT AND PROCESS_ROW = 'E');
v_TOU_DESC          VARCHAR2(64);
v_REPORTED_SEGMENT  VARCHAR2(64);
v_POLR_CODE         VARCHAR2(64);
v_RATE_CLASS        VARCHAR2(64);
v_RATE_CLASS_CHK    VARCHAR2(64);
v_VOLTAGE_LEVEL     VARCHAR2(64);
v_ESP_IDENT         VARCHAR2(256);
v_RECORD            VARCHAR2(1000);
v_MESSAGE           VARCHAR2(256);
v_WEATHER_STATION   VARCHAR2(64);
v_IS_IDR            CHAR(1);
v_POLR_ID           PLS_INTEGER;
v_COUNT             PLS_INTEGER;
v_ESP_ID            PLS_INTEGER;
v_STUDY_ID          PBS_CUSTOMER_LOOKUP_VIEW.STUDY_ID%TYPE;
v_MARK_TIME         PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_INVALID_COUNT     PLS_INTEGER := 0;
v_VALID_COUNT       PLS_INTEGER := 0;
v_HAVE_VALID_RECORD BOOLEAN := TRUE;

   PROCEDURE POST_INVALID_MESSAGE(p_MESSAGE IN VARCHAR2, p_RECORD IN VARCHAR2, p_REC_ROWID IN ROWID, p_ENABLE_COUNT BOOLEAN DEFAULT FALSE) AS
   BEGIN
      UPDATE BGE_CI_STAGING SET ERROR_MESSAGE = SUBSTR(LTRIM(CASE WHEN ERROR_MESSAGE = c_INITIAL_ERROR_MESSAGE THEN p_MESSAGE ELSE ERROR_MESSAGE || ', ' || p_MESSAGE END,', '),1,4000), PROCESS_ROW = 'E' WHERE ROWID = p_REC_ROWID;
      LOGS.LOG_ERROR(p_MESSAGE || ' - ' || p_RECORD, 'POST_ERROR_MESSAGE');
      v_HAVE_VALID_RECORD := FALSE;
      IF p_ENABLE_COUNT THEN
         v_INVALID_COUNT := v_INVALID_COUNT + 1;
      END IF;
   END POST_INVALID_MESSAGE;

BEGIN

   EXECUTE IMMEDIATE 'TRUNCATE TABLE CDI_BGE_CI_VALIDATE';   
   INSERT INTO CDI_BGE_CI_VALIDATE(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_ID, TARIFF_CODE, NODE, POLR_ID, POLR_TYPE, SUPPLIER, CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, SPECIAL_NOTATION, STATUS_INDICATION, BGE_TIMESTAMP, IDR_STATUS, RTO_POOL_ID, PLC_BAND, RTO_ACCOUNT_ID, ESP_ID, METER_TYPE, VOLTAGE_LEVEL, RATE_CLASS, PROCESS_ROW, ERROR_MESSAGE, AGGR_IDENTIFIER, REC_ROWID)
   SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_CODE, TARIFF_CODE, NODE, POLR_ID, POLR_TYPE, TRIM(SUPPLIER), CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, TRIM(SPECIAL_NOTATION), STATUS_INDICATION, REC_TS, CASE WHEN NVL(TRIM(IDR_STATUS),'N') = 'Y' THEN 'Y' ELSE 'N' END, NULL, NULL, NULL, NULL, CASE WHEN NVL(TRIM(IDR_STATUS),'N') = 'Y' THEN 'I' ELSE 'P' END, NULL, NULL, NULL, NULL, NULL, ROWID
   FROM BGE_CI_STAGING;
   LOGS.LOG_INFO('Number Of Records Inserted In The CDI_BGE_CI_VALIDATE Table: ' || TO_CHAR(SQL%ROWCOUNT));

   UPDATE BGE_MASTER_ACCOUNT SET CI_ROWID = NULL WHERE CI_ROWID IS NOT NULL;
   COMMIT;

   v_COUNT := 0;
   FOR v_SELECT IN c_SELECT_DELETE LOOP
      DELETE BGE_CI_STAGING WHERE BILL_ACCOUNT = v_SELECT.BILL_ACCOUNT AND SERVICE_POINT = v_SELECT.SERVICE_POINT AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER;
      v_COUNT := v_COUNT + SQL%ROWCOUNT;
   END LOOP;
   IF v_COUNT > 0 THEN
      LOGS.LOG_INFO('Records Deleted From The BGE_CI_STAGING Table That Have An Account That Exists In The Ignore List.');
   END IF;

   SELECT COUNT(*) INTO v_COUNT FROM CDI_BGE_CI_VALIDATE;
   LOGS.INIT_PROCESS_PROGRESS(p_TOTAL_WORK => v_COUNT, p_WORK_UNITS => 'Customers');

   FOR v_SELECT IN c_SELECT_CANDIDATES LOOP
      v_HAVE_VALID_RECORD := TRUE;
      UPDATE BGE_CI_STAGING SET ERROR_MESSAGE = NULL, PROCESS_ROW = NULL WHERE ROWID = v_SELECT.REC_ROWID;
      IF v_SELECT.STATUS_INDICATION = 'D' THEN
         DELETE BGE_MASTER_ACCOUNT WHERE BILL_ACCOUNT = v_SELECT.BILL_ACCOUNT AND SERVICE_POINT = v_SELECT.SERVICE_POINT AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER;
         IF SQL%ROWCOUNT > 0 THEN
            LOGS.LOG_INFO(v_SELECT.CUSTOMER_IDENT || ' Record Has A Status Of "D", Deleted ' || SQL%ROWCOUNT || ' Records');
         END IF;
      ELSE
         v_RECORD :=  v_SELECT.BILL_ACCOUNT ||','|| v_SELECT.SERVICE_POINT ||','|| v_SELECT.PREMISE_NUMBER ||','|| v_SELECT.TARIFF_CODE  ||','|| v_SELECT.NODE ||','|| v_SELECT.POLR_ID ||',' || v_SELECT.SUPPLIER ||','|| v_SELECT.CITY_COUNTY_CODE ||','|| TO_CHAR(v_SELECT.EFFECTIVE_DATE,c_DATE_FORMAT) ||','|| TO_CHAR(v_SELECT.TERMINATION_DATE,c_DATE_FORMAT) ||','|| v_SELECT.SPECIAL_NOTATION  ||','|| v_SELECT.STATUS_INDICATION;
         LOGS.LOG_DEBUG_DETAIL(v_RECORD);
         IF TRIM(v_SELECT.EFFECTIVE_DATE) IS NULL THEN
            POST_INVALID_MESSAGE('Effective Date Is Null', v_RECORD, v_SELECT.REC_ROWID);
         END IF;

         IF TRIM(v_SELECT.TERMINATION_DATE) IS NULL THEN
            POST_INVALID_MESSAGE('Termination Date Is Null', v_RECORD, v_SELECT.REC_ROWID);
         END IF;

         IF v_SELECT.EFFECTIVE_DATE > v_SELECT.TERMINATION_DATE THEN
            POST_INVALID_MESSAGE('Effective Date Greater Than Termination Date', v_RECORD, v_SELECT.REC_ROWID);
         END IF;

         DELETE BGE_MASTER_ACCOUNT WHERE BILL_ACCOUNT = v_SELECT.BILL_ACCOUNT AND SERVICE_POINT = v_SELECT.SERVICE_POINT AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER AND EFFECTIVE_DATE >= v_SELECT.EFFECTIVE_DATE;

-- Update CI Master Previous Termination Date With Effective Date - 1 --
         UPDATE BGE_MASTER_ACCOUNT X SET TERMINATION_DATE = v_SELECT.EFFECTIVE_DATE - 1
         WHERE BILL_ACCOUNT = v_SELECT.BILL_ACCOUNT
            AND SERVICE_POINT = v_SELECT.SERVICE_POINT
            AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER
            AND EFFECTIVE_DATE = (SELECT MAX(EFFECTIVE_DATE) FROM BGE_MASTER_ACCOUNT WHERE BILL_ACCOUNT = X.BILL_ACCOUNT AND SERVICE_POINT = X.SERVICE_POINT AND PREMISE_NUMBER = X.PREMISE_NUMBER AND EFFECTIVE_DATE < X.EFFECTIVE_DATE);

         IF v_SELECT.BILL_ACCOUNT <= 0 THEN
            POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Less Than Or Equal To Zero', v_RECORD, v_SELECT.REC_ROWID);
         END IF;

         IF v_SELECT.SERVICE_POINT IS NULL THEN
            POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Service Point Is Null', v_RECORD, v_SELECT.REC_ROWID);
         END IF;

         IF v_SELECT.EFFECTIVE_DATE > ADD_MONTHS(SYSDATE,600) THEN
            POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Has A Date Greater Than The Current Date Plus 50 Years', v_RECORD, v_SELECT.REC_ROWID);
         END IF;

         IF  v_SELECT.VOLTAGE_LEVEL <> 'SEC' AND v_SELECT.IDR_STATUS <> 'I' AND v_SELECT.TARIFF_CODE NOT IN (53,153) THEN
            POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Loss Class Is Higher Secondary But Is A Non-IDR Account', v_RECORD, v_SELECT.REC_ROWID);
         END IF;

         SELECT MAX(WEATHER_STATION) INTO v_WEATHER_STATION FROM BGE_CITY_COUNTY_CODES WHERE CITY_COUNTY_CODE = v_SELECT.CITY_COUNTY_CODE;
         IF v_WEATHER_STATION IS NULL THEN
            POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Has An Invalid Weather Station Assignment', v_RECORD, v_SELECT.REC_ROWID);
         ELSE
            UPDATE BGE_CI_STAGING SET WEATHER_STATION = v_WEATHER_STATION WHERE v_SELECT.REC_ROWID = ROWID;
         END IF;
         
         SELECT MAX(ESP_ID), MAX(ESP_EXTERNAL_IDENTIFIER) INTO v_ESP_ID, v_ESP_IDENT FROM ENERGY_SERVICE_PROVIDER WHERE UPPER(ESP_EXTERNAL_IDENTIFIER) = NVL(TRIM(v_SELECT.SUPPLIER), c_DEFAULT_SUPPLIER);
         IF v_ESP_ID IS NULL THEN
            POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Has An Invalid Supplier Assignment', v_RECORD, v_SELECT.REC_ROWID);
         END IF;

         v_MESSAGE := '';
         BEGIN
            v_MESSAGE := 'Select Voltage Level, Rate Class, POLR Code, Reported Segment, Profile From RTO_BGE_TARIFF_CODES Exception';
            SELECT DISTINCT VOLTAGE_CLASS "VOLTAGE_LEVEL", TRIM(REPLACE(UPPER(PROFILE),UPPER('or interval'))) "RATE_CLASS", TRIM(CASE WHEN (SUBSTR(UPPER(PROFILE),1,1) = 'R' OR SUBSTR(UPPER(PROFILE),1,2) = 'PL') THEN POLR_TYPE ELSE TO_CHAR(v_SELECT.POLR_ID) END) "POLR_CODE", TRIM(METER_TYPE) "TOU_DESC", TRIM(REPORTED_SEGMENT) "REPORTED_SEGMENT", PROFILE "RATE_CLASS_CHK"
            INTO v_VOLTAGE_LEVEL, v_RATE_CLASS, v_POLR_CODE, v_TOU_DESC, v_REPORTED_SEGMENT, v_RATE_CLASS_CHK
            FROM RTO_BGE_TARIFF_CODES
            WHERE CASE WHEN TO_NUMBER(v_SELECT.TARIFF_CODE) < 100 THEN TO_CHAR(SOS) WHEN TO_NUMBER(v_SELECT.TARIFF_CODE) >= 100 AND TO_NUMBER(v_SELECT.TARIFF_CODE) < 200 THEN TO_CHAR(DELIVERY_SERVICE) ELSE TO_CHAR(HOURLY_SERVICE) END = TO_CHAR(v_SELECT.TARIFF_CODE)
               AND NVL(SPECIAL_NOTATION,'X') = NVL(v_SELECT.SPECIAL_NOTATION,'X');
            LOGS.LOG_DEBUG_DETAIL('Voltage Level: ' || v_VOLTAGE_LEVEL || ', Rate Class: ' || v_RATE_CLASS || ', POLR Code: ' || v_POLR_CODE || ', Reported Segment: ' || v_REPORTED_SEGMENT || ', Rate Class Check: ' || v_RATE_CLASS_CHK);

            v_POLR_ID := v_SELECT.POLR_ID;
            IF NOT(v_RATE_CLASS LIKE 'R%' OR v_RATE_CLASS LIKE 'PL%') THEN
               SELECT MAX(POLR_TYPE) INTO v_POLR_CODE FROM BGE_POLR_TYPES WHERE POLR_ID = v_SELECT.POLR_ID;
               IF v_POLR_CODE IS NULL THEN
                  POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Has An Invalid POLR Type', v_RECORD, v_SELECT.REC_ROWID);
               END IF;
            END IF;
             
            IF v_SELECT.VOLTAGE_LEVEL IS NOT NULL THEN
               SELECT MAX(EXTERNAL_IDENTIFIER) INTO v_RATE_CLASS FROM LOSS_FACTOR WHERE EXTERNAL_IDENTIFIER  = v_SELECT.VOLTAGE_LEVEL;
               IF v_RATE_CLASS IS NULL THEN
                  POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Has An Invalid Loss Factor/Voltage Level', v_RECORD, v_SELECT.REC_ROWID);
               END IF;
            END IF;

            SELECT MAX(STUDY_ID) INTO v_STUDY_ID FROM PBS_CUSTOMER_LOOKUP_VIEW WHERE BILL_ACCOUNT = v_SELECT.BILL_ACCOUNT AND SERVICE_POINT = v_SELECT.SERVICE_POINT AND TRIM(v_RATE_CLASS) <> 'PL' AND EFFECTIVE_DATE <= v_SELECT.TERMINATION_DATE AND TERMINATION_DATE - 1 >= v_SELECT.EFFECTIVE_DATE;
            v_IS_IDR := CASE WHEN v_STUDY_ID IS NULL THEN 'N' ELSE 'Y' END;
            IF (UPPER(v_RATE_CLASS) = 'INTERVAL' AND v_STUDY_ID IS NULL) OR (UPPER(v_RATE_CLASS_CHK) NOT LIKE '%INTERVAL%' AND v_STUDY_ID IS NOT NULL) THEN
               POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Has An Interval Meter Not Defined In The PBS View', v_RECORD, v_SELECT.REC_ROWID);
            END IF;

--@@SPEC-3.1.1.b: Flag An Error For Special Notation Values Of "PBS" And A Null Study Id --
            IF v_STUDY_ID IS NULL AND UPPER(TRIM(v_SELECT.SPECIAL_NOTATION)) = 'PBS' THEN
               POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" With Special Notation Assignment "PBS" And Rate Class "' || v_RATE_CLASS || '" Is Not Defined In The PBS View', v_RECORD, v_SELECT.REC_ROWID);
            END IF;
            
            v_RATE_CLASS :=  CASE WHEN UPPER(v_RATE_CLASS) = 'INTERVAL' THEN SUBSTR(REPLACE(UPPER(v_REPORTED_SEGMENT),'X'),1,2) ELSE v_RATE_CLASS END;
            LOGS.LOG_DEBUG_DETAIL('Coerce Rate Class: ' || v_RATE_CLASS);
            IF (v_RATE_CLASS NOT LIKE 'R%' AND v_RATE_CLASS NOT LIKE 'PL%') AND (v_SELECT.POLR_ID < 1 OR v_SELECT.POLR_ID IS NULL) THEN
               POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Is Non-Residential And Does Not Reflect POLR Type', v_RECORD, v_SELECT.REC_ROWID);
            END IF;

--@@SPEC-3.1.1.c: "G" Class With Special Notation Of "Cable Device" Should Become "GF" Upon Import, And A Reported Segment Of "GFXX" --
            IF UPPER(TRIM(v_SELECT.SPECIAL_NOTATION)) = 'CABLE DEVICE' THEN
               v_RATE_CLASS := 'GF';
               v_REPORTED_SEGMENT := 'GFXX';
            END IF;

--@@SPEC-3.1.1.d: All Other Special Notations Can Be Ignored Upon Import, And/Or Will Be Removed During Another Exelon Initiative Underway (Fusion Project).
            IF NVL(UPPER(TRIM(v_SELECT.SPECIAL_NOTATION)),'?') NOT IN ('?', 'PBS', 'CABLE DEVICE') THEN
               POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" With Special Notation Assignment "' || UPPER(TRIM(v_SELECT.SPECIAL_NOTATION)) || '" Is Invalid.', v_RECORD, v_SELECT.REC_ROWID);
            END IF;            

-- An Account With An "SL" Tariff Should Post An Error If Its POLR Type Is Not "Pl1" --
            IF v_RATE_CLASS = 'SL' AND v_POLR_CODE <> 'PL1' THEN              
               POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" With Rate Class "SL" And POLR Type "' || v_POLR_CODE || '" Is Invalid.', v_RECORD, v_SELECT.REC_ROWID);
            END IF;            

-- An Account With A "GL" Tariff Should Post An Error If Its POLR Type Is "Pl1" --
            IF v_RATE_CLASS = 'GL' AND v_POLR_CODE = 'PL1' THEN              
               POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" With Rate Class "GL" And POLR Type "' || v_POLR_CODE || '" Is Invalid.', v_RECORD, v_SELECT.REC_ROWID);
            END IF;            

            UPDATE BGE_CI_STAGING X SET
               WEATHER_STATION = v_WEATHER_STATION,
               POLR_ID         = v_POLR_ID,
               POLR_TYPE       = v_POLR_CODE,
               ESP_ID          = v_ESP_ID,
               SUPPLIER        = NVL(v_SELECT.SUPPLIER, v_ESP_IDENT),
               RATE_CLASS      = NVL(v_RATE_CLASS, RATE_CLASS),
               VOLTAGE_LEVEL   = v_VOLTAGE_LEVEL,
               IDR_STATUS      = v_IS_IDR,
               STUDY_ID        = v_STUDY_ID
            WHERE v_SELECT.REC_ROWID = X.ROWID;
         EXCEPTION
            WHEN OTHERS THEN
               POST_INVALID_MESSAGE(v_MESSAGE, v_RECORD, v_SELECT.REC_ROWID);
               ERRS.LOG_AND_CONTINUE(v_MESSAGE);
               v_MESSAGE := '';
         END;
      END IF;

      IF v_HAVE_VALID_RECORD THEN
         INSERT INTO BGE_MASTER_ACCOUNT(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_ID,   TARIFF_CODE, NODE, POLR_ID, POLR_TYPE, SUPPLIER, CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, SPECIAL_NOTATION, STATUS_INDICATION, BGE_TIMESTAMP, IDR_STATUS,          RTO_POOL_ID,                     RTO_ACCOUNT_ID,                                                                                                                                ESP_ID, METER_TYPE,                                       VOLTAGE_LEVEL, RATE_CLASS,          PROCESS_ROW, ERROR_MESSAGE, AGGR_IDENTIFIER,                                                                                                                               OSUSER,                         TOU_DESC,   CI_ROWID,           STUDY_ID, REPORTED_SEGMENT,   FILTER_SEQUENCE)
         SELECT                         BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_CODE, TARIFF_CODE, NODE, POLR_ID, POLR_TYPE, SUPPLIER, CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, NULL,             STATUS_INDICATION, REC_TS,        NVL(IDR_STATUS,'N'), TARIFF_CODE || '_' || POLR_TYPE, CASE WHEN IDR_STATUS = 'I' THEN BILL_ACCOUNT  || '_' ||  SERVICE_POINT || '_' || PREMISE_NUMBER ELSE RATE_CLASS || '_' || WEATHER_STATION END, ESP_ID, CASE WHEN IDR_STATUS = 'Y' THEN 'I' ELSE 'P' END, VOLTAGE_LEVEL, NVL(RATE_CLASS,'P'), PROCESS_ROW, ERROR_MESSAGE, CASE WHEN IDR_STATUS = 'Y' THEN BILL_ACCOUNT  || '_' ||  SERVICE_POINT || '_' || PREMISE_NUMBER ELSE RATE_CLASS || '_' || WEATHER_STATION END, SECURITY_CONTROLS.CURRENT_USER, v_TOU_DESC, v_SELECT.REC_ROWID, STUDY_ID, v_REPORTED_SEGMENT, FILTER_SEQUENCE
         FROM BGE_CI_STAGING
         WHERE ROWID = v_SELECT.REC_ROWID;
         IF SQL%ROWCOUNT = 0 THEN
            POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Encountered An Error Attempting To Insert The Entry In The Master Table', v_RECORD, v_SELECT.REC_ROWID, p_ENABLE_COUNT => TRUE);
         ELSE
-- Mark Record From BGE_CI_STAGING As Moved To The Master Table --
            UPDATE BGE_CI_STAGING SET PROCESS_ROW = 'M' WHERE ROWID = v_SELECT.REC_ROWID;
            IF SQL%ROWCOUNT = 0 THEN
               POST_INVALID_MESSAGE('Bill Account "' || v_SELECT.BILL_ACCOUNT || '" Encountered An Error Attempting To Mark The Entry As Moved To The Master Table', v_RECORD, v_SELECT.REC_ROWID, p_ENABLE_COUNT => TRUE);
            END IF;
         END IF;
         COMMIT;
         v_VALID_COUNT := v_VALID_COUNT + 1;
      ELSE
         v_INVALID_COUNT := v_INVALID_COUNT + 1;
      END IF;
      LOGS.INCREMENT_PROCESS_PROGRESS;
   END LOOP;

   FOR v_SELECT IN c_SELECT_FAILED LOOP
      DELETE BGE_MASTER_ACCOUNT
      WHERE BILL_ACCOUNT = v_SELECT.BILL_ACCOUNT
         AND PREMISE_NUMBER = v_SELECT.PREMISE_NUMBER
         AND SERVICE_POINT = v_SELECT.SERVICE_POINT
         AND FILTER_SEQUENCE =  v_SELECT.FILTER_SEQUENCE
         AND ROWID = v_SELECT.BGE_ROWID;
      POST_INVALID_MESSAGE('Another Record For The Same Account Failed The Validation', v_RECORD, v_SELECT.REC_ROWID, p_ENABLE_COUNT => TRUE);
   END LOOP;

-- Assign Any New Acccouts A Default PLC/NSPL Tag Based On Premise Inheritance --
   ASSIGN_PLC_NSPL_TAG;

   DELETE BGE_CI_STAGING X
   WHERE EFFECTIVE_DATE <= (SELECT MAX(EFFECTIVE_DATE) FROM BGE_CI_STAGING WHERE BILL_ACCOUNT = X.BILL_ACCOUNT AND PREMISE_NUMBER = X.PREMISE_NUMBER AND SERVICE_POINT = X.SERVICE_POINT AND STATUS_INDICATION = 'D');
   DELETE BGE_MASTER_ACCOUNT WHERE STATUS_INDICATION = 'D';
   DELETE BGE_CI_STAGING WHERE STATUS_INDICATION = 'D' OR PROCESS_ROW = 'M';
   DELETE BGE_CI_STAGING WHERE PROCESS_ROW = 'M';
   COMMIT;

   p_VALID_COUNT := v_VALID_COUNT;
   p_INVALID_COUNT := v_INVALID_COUNT;
   LOGS.LOG_INFO('Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
END VALIDATE_AND_POST;

PROCEDURE COERCE_ACCOUNT_DATE_RANGE(p_BILL_ACCOUNT IN NUMBER, p_SERVICE_POINT IN NUMBER, p_PREMISE_NUMBER IN NUMBER) AS
CURSOR c_SELECT IS
   SELECT ROWID "THIS_ROWID", EFFECTIVE_DATE, TERMINATION_DATE, LEAD(EFFECTIVE_DATE, 1) OVER (ORDER BY EFFECTIVE_DATE) AS "NEXT_EFFECTIVE_DATE" 
   FROM BGE_MASTER_ACCOUNT
   WHERE BILL_ACCOUNT = p_BILL_ACCOUNT
      AND SERVICE_POINT = p_SERVICE_POINT
      AND PREMISE_NUMBER = p_PREMISE_NUMBER
   ORDER BY EFFECTIVE_DATE;
v_EFFECTIVE_DATE DATE;
v_TERMINATION_DATE DATE;
BEGIN
   LOGS.LOG_DEBUG_DETAIL('Coerce Account Date Range: ' || TO_CHAR(p_BILL_ACCOUNT) || '_' || TO_CHAR(p_SERVICE_POINT) || '_' || TO_CHAR(p_PREMISE_NUMBER));
   FOR v_SELECT IN c_SELECT LOOP
      LOGS.LOG_DEBUG_DETAIL('Effective Date: ' || TO_CHAR(v_SELECT.EFFECTIVE_DATE, c_DATE_FORMAT) || ', Termination Date: ' || TO_CHAR(v_SELECT.TERMINATION_DATE, c_DATE_FORMAT) || ', Next Effective Date: ' || TO_CHAR(v_SELECT.NEXT_EFFECTIVE_DATE, c_DATE_FORMAT));
      IF v_SELECT.TERMINATION_DATE <> v_SELECT.NEXT_EFFECTIVE_DATE - 1 THEN
         v_TERMINATION_DATE := v_SELECT.NEXT_EFFECTIVE_DATE - 1;
         v_EFFECTIVE_DATE := CASE WHEN v_SELECT.EFFECTIVE_DATE > v_TERMINATION_DATE THEN v_TERMINATION_DATE ELSE v_SELECT.EFFECTIVE_DATE end; 
         LOGS.LOG_DEBUG_DETAIL('Coerce Effective Date: ' || TO_CHAR(v_EFFECTIVE_DATE, c_DATE_FORMAT) || ', Termination Date: ' || TO_CHAR(v_TERMINATION_DATE, c_DATE_FORMAT));
         UPDATE BGE_MASTER_ACCOUNT SET EFFECTIVE_DATE = v_EFFECTIVE_DATE, TERMINATION_DATE = v_TERMINATION_DATE WHERE ROWID = v_SELECT.THIS_ROWID;
      END IF;
   END LOOP;
END COERCE_ACCOUNT_DATE_RANGE;

PROCEDURE RUN_CI_FILTER AS
CURSOR c_SELECT IS
   SELECT DISTINCT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER
   FROM CDI_BGE_CI_VALIDATE
   ORDER BY BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER;
v_TIMESTAMP       TIMESTAMP := CURRENT_TIMESTAMP;
v_VALID_COUNT     PLS_INTEGER := 0;
v_INVALID_COUNT   PLS_INTEGER := 0;
v_FILTER_SEQUENCE PLS_INTEGER := CI_FILTER_SEQ.NEXTVAL;
v_MARK_TIME       PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_STATUS          NUMBER;
v_MESSAGE         VARCHAR2(64);
BEGIN
   LOGS.START_PROCESS(c_FILTER_CUSTOMER_INFORMATION);
   LOGS.LOG_INFO(c_FILTER_CUSTOMER_INFORMATION);
   LOGS.LOG_DEBUG('Filter Sequence: ' || TO_CHAR(v_FILTER_SEQUENCE));
   LOGS.LOG_DEBUG('Current Timestamp: ' || TO_CHAR(v_TIMESTAMP, c_TIMESTAMP_FORMAT));
   IF NOT SD.GET_ENTITY_IS_ALLOWED(c_SELECT_SETTLEMENT_REPORT,1) THEN
      LOGS.LOG_ERROR(c_INSUFFICIENT_PRIVILEGES);
   ELSE
      INSERT INTO CI_FILTER_BACKUP(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_CODE, NODE, POLR_TYPE, SUPPLIER, CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, SPECIAL_NOTATION, STATUS_INDICATION, REC_TS)
      SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_CODE, NODE, POLR_TYPE, SUPPLIER, CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, SPECIAL_NOTATION, STATUS_INDICATION, REC_TS
      FROM CUSTOMER_INFO_STAGING
      WHERE REC_TS < v_TIMESTAMP;
      LOGS.LOG_INFO('Number Of Records Inserted In The CI_FILTER_BACKUP Table: ' || TO_CHAR(SQL%ROWCOUNT));
      COMMIT;
      UPDATE BGE_CI_STAGING SET PROCESS_ROW = '', ERROR_MESSAGE = '';
      INSERT INTO BGE_CI_STAGING(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_CODE, NODE,  POLR_TYPE, SUPPLIER, CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, SPECIAL_NOTATION, STATUS_INDICATION, REC_TS, PROCESS_ROW, ERROR_MESSAGE, OSUSER, PROCESS_DATE, RTO_ACCOUNT_ID, IDR_STATUS, RTO_POOL_ID, ESP_ID, METER_TYPE, VOLTAGE_LEVEL, RATE_CLASS, AGGR_IDENTIFIER, WEATHER_STATION, POLR_ID,STUDY_ID, FILTER_SEQUENCE)
      SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_CODE, NODE, POLR_TYPE, SUPPLIER, CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, TRIM(SPECIAL_NOTATION), STATUS_INDICATION, REC_TS, 'J', c_INITIAL_ERROR_MESSAGE, USER, SYSDATE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, POLR_TYPE, NULL, v_FILTER_SEQUENCE
      FROM CUSTOMER_INFO_STAGING CI
      WHERE REC_TS < v_TIMESTAMP;
      LOGS.LOG_INFO('Number Of Records Inserted In The BGE_CI_STAGING Table: ' || TO_CHAR(SQL%ROWCOUNT));
      UPDATE BGE_CI_STAGING X
      SET FILTER_SEQUENCE = v_FILTER_SEQUENCE
      WHERE FILTER_SEQUENCE <> v_FILTER_SEQUENCE
         AND EXISTS
            (SELECT NULL
               FROM BGE_CI_STAGING
               WHERE BILL_ACCOUNT = X.BILL_ACCOUNT
                  AND SERVICE_POINT  = X.SERVICE_POINT
                  AND PREMISE_NUMBER = X.PREMISE_NUMBER
                  AND FILTER_SEQUENCE = v_FILTER_SEQUENCE);
      LOGS.LOG_INFO('Number Of Filter Sequence Records Updated In The BGE_CI_STAGING Table: ' || TO_CHAR(SQL%ROWCOUNT));
-- Validate And Post Entries --
      VALIDATE_AND_POST(v_VALID_COUNT, v_INVALID_COUNT);
      LOGS.LOG_INFO('Number Of Valid Records Posted To The BGE_MASTER_ACCOUNT Table: ' || TO_CHAR(v_VALID_COUNT));
      LOGS.LOG_INFO('Number Of Records Flagged As Invalid In The BGE_CI_STAGING Table: ' || TO_CHAR(v_INVALID_COUNT));
      DELETE CUSTOMER_INFO_STAGING WHERE REC_TS < v_TIMESTAMP;
      LOGS.LOG_INFO('Number Of Records Deleted From The CUSTOMER_INFO_STAGING Table: ' || TO_CHAR(SQL%ROWCOUNT));
-- Coerce The Effective/Termination Date Range To Be Continuous Non-Overlapping For Any Entries That Have Changed --      
      FOR v_SELECT IN c_SELECT LOOP
         COERCE_ACCOUNT_DATE_RANGE(v_SELECT.BILL_ACCOUNT, v_SELECT.SERVICE_POINT, v_SELECT.PREMISE_NUMBER);
      END LOOP;
-- Mark Staging Records That Have A Future Timestamp Greater Than The Current Timestamp --      
      INSERT INTO BGE_CI_STAGING(BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_CODE, NODE,  POLR_TYPE, SUPPLIER, CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, SPECIAL_NOTATION, STATUS_INDICATION, REC_TS, PROCESS_ROW, ERROR_MESSAGE, OSUSER, PROCESS_DATE, RTO_ACCOUNT_ID, IDR_STATUS, RTO_POOL_ID, ESP_ID, METER_TYPE, VOLTAGE_LEVEL, RATE_CLASS, AGGR_IDENTIFIER, WEATHER_STATION, POLR_ID,STUDY_ID, FILTER_SEQUENCE)
      SELECT BILL_ACCOUNT, SERVICE_POINT, PREMISE_NUMBER, TARIFF_CODE, NODE, POLR_TYPE, SUPPLIER, CITY_COUNTY_CODE, EFFECTIVE_DATE, TERMINATION_DATE, TRIM(SPECIAL_NOTATION), STATUS_INDICATION, REC_TS, 'E', 'Timestamp Greater Than '  || TO_CHAR(v_TIMESTAMP, c_TIMESTAMP_FORMAT), USER, SYSDATE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, POLR_TYPE, NULL, v_FILTER_SEQUENCE
      FROM CUSTOMER_INFO_STAGING CI
      WHERE REC_TS >= v_TIMESTAMP;
      LOGS.LOG_INFO('Number Of Records With A Timestamp Greater Than The Current Timestamp Flagged As An Error In The BGE_CI_STAGING Table: ' || TO_CHAR(SQL%ROWCOUNT));
      DELETE CUSTOMER_INFO_STAGING WHERE REC_TS >= v_TIMESTAMP;
      LOGS.LOG_INFO('Number Of Records With A Timestamp Greater Than The Current Timestamp Deleted From The CUSTOMER_INFO_STAGING Table: ' || TO_CHAR(SQL%ROWCOUNT));
   END IF;
   LOGS.LOG_INFO(c_FILTER_CUSTOMER_INFORMATION || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
   LOGS.STOP_PROCESS(v_MESSAGE, v_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      ERRS.ABORT_PROCESS;
END RUN_CI_FILTER;

PROCEDURE POST_BGE_CI_STAGING_ERROR(p_CI_STAGING IN CUSTOMER_INFO_STAGING%ROWTYPE, p_ERROR_MESSAGE IN VARCHAR2) AS
v_BGE_CI_STAGING BGE_CI_STAGING%ROWTYPE;
BEGIN
   v_BGE_CI_STAGING.BILL_ACCOUNT      := p_CI_STAGING.BILL_ACCOUNT;
   v_BGE_CI_STAGING.SERVICE_POINT     := p_CI_STAGING.SERVICE_POINT;
   v_BGE_CI_STAGING.PREMISE_NUMBER    := p_CI_STAGING.PREMISE_NUMBER;
   v_BGE_CI_STAGING.TARIFF_CODE       := p_CI_STAGING.TARIFF_CODE;
   v_BGE_CI_STAGING.NODE              := p_CI_STAGING.NODE;
   v_BGE_CI_STAGING.POLR_TYPE         := p_CI_STAGING.POLR_TYPE;
   v_BGE_CI_STAGING.SUPPLIER          := p_CI_STAGING.SUPPLIER;
   v_BGE_CI_STAGING.CITY_COUNTY_CODE  := p_CI_STAGING.CITY_COUNTY_CODE;
   v_BGE_CI_STAGING.EFFECTIVE_DATE    := p_CI_STAGING.EFFECTIVE_DATE;
   v_BGE_CI_STAGING.TERMINATION_DATE  := p_CI_STAGING.TERMINATION_DATE;
   v_BGE_CI_STAGING.SPECIAL_NOTATION  := p_CI_STAGING.SPECIAL_NOTATION;
   v_BGE_CI_STAGING.STATUS_INDICATION := p_CI_STAGING.STATUS_INDICATION;
   v_BGE_CI_STAGING.REC_TS            := p_CI_STAGING.REC_TS;
   v_BGE_CI_STAGING.ERROR_MESSAGE     := p_ERROR_MESSAGE;
   v_BGE_CI_STAGING.OSUSER            := SECURITY_CONTROLS.CURRENT_USER;
   v_BGE_CI_STAGING.PROCESS_DATE      := CURRENT_DATE;
   v_BGE_CI_STAGING.RTO_ACCOUNT_ID    := p_CI_STAGING.BILL_ACCOUNT ||'_'||p_CI_STAGING.SERVICE_POINT||'_'||p_CI_STAGING.PREMISE_NUMBER;
   v_BGE_CI_STAGING.PLC_BAND          := 'Z';
   v_BGE_CI_STAGING.FILTER_SEQUENCE   :=  CI_FILTER_SEQ.NEXTVAL;
   INSERT INTO BGE_CI_STAGING VALUES v_BGE_CI_STAGING;
END POST_BGE_CI_STAGING_ERROR;

PROCEDURE LOAD_CI_FILE_AND_RUN_FILTER
   (
   p_IMPORT_FILE      IN CLOB,
   p_IMPORT_FILE_PATH IN VARCHAR2,
   p_STATUS          OUT NUMBER,
   p_MESSAGE         OUT VARCHAR2
   ) AS
v_ERROR_MESSAGE   VARCHAR2(1000);   
v_VALID_COUNT     PLS_INTEGER := 0;
v_ERROR_COUNT     PLS_INTEGER := 0;
v_STATUS          PLS_INTEGER;
v_MARK_TIME       PLS_INTEGER := DBMS_UTILITY.GET_TIME;
v_HAVE_ERROR      BOOLEAN;
v_CONTAINER       PARSE_UTIL.BIG_STRING_TABLE_MP;
v_TOKENS          PARSE_UTIL.STRING_TABLE;
v_CI_STAGING      CUSTOMER_INFO_STAGING%ROWTYPE;
BEGIN
   IF NOT SD.GET_ENTITY_IS_ALLOWED(c_SELECT_SETTLEMENT_REPORT,1) THEN
      p_STATUS := GA.INSUFFICIENT_PRIVILEGES;
      p_MESSAGE := c_INSUFFICIENT_PRIVILEGES;
      RETURN;
   END IF;
-- Start The Process Log --
   LOGS.START_PROCESS(c_LOAD_CUSTOMER_INFORMATION);
   p_MESSAGE := '';
   p_STATUS := GA.SUCCESS;
-- Parse The File Into Records --   
   PARSE_UTIL.PARSE_CLOB_INTO_LINES(p_IMPORT_FILE, v_CONTAINER);
   LOGS.LOG_INFO('Number Of Input Records: ' || TO_CHAR(v_CONTAINER.COUNT));
-- Process Each Line --
   FOR v_INDEX IN v_CONTAINER.FIRST..v_CONTAINER.LAST LOOP
      v_ERROR_MESSAGE := '';
      v_HAVE_ERROR := FALSE;
      PARSE_UTIL.PARSE_DELIMITED_STRING(v_CONTAINER(v_INDEX), c_COMMA, v_TOKENS);
      IF v_TOKENS.COUNT = 13 THEN
         BEGIN
            v_CI_STAGING.BILL_ACCOUNT      := TRIM(v_TOKENS(1));
            v_CI_STAGING.SERVICE_POINT     := TRIM(v_TOKENS(2));
            v_CI_STAGING.PREMISE_NUMBER    := TRIM(v_TOKENS(3));
            v_CI_STAGING.TARIFF_CODE       := TRIM(v_TOKENS(4));
            v_CI_STAGING.NODE              := TRIM(v_TOKENS(5));
            v_CI_STAGING.POLR_TYPE         := TRIM(v_TOKENS(6));
            v_CI_STAGING.SUPPLIER          := NVL(v_TOKENS(7),c_DEFAULT_SUPPLIER);
            v_CI_STAGING.CITY_COUNTY_CODE  := TRIM(v_TOKENS(8));
            v_CI_STAGING.EFFECTIVE_DATE    := VALIDATE_DATE(v_TOKENS(9), v_STATUS);
            IF v_STATUS <> GA.SUCCESS THEN
               v_ERROR_MESSAGE := v_ERROR_MESSAGE || 'Invalid Effective Date, ';
               v_HAVE_ERROR := TRUE;
            END IF; 
            v_CI_STAGING.TERMINATION_DATE  := VALIDATE_DATE(v_TOKENS(10), v_STATUS);
            IF v_STATUS <> GA.SUCCESS THEN
               v_ERROR_MESSAGE := v_ERROR_MESSAGE || 'Invalid Termination Date, ';
               v_HAVE_ERROR := TRUE;
            END IF; 
            v_CI_STAGING.SPECIAL_NOTATION  := TRIM(v_TOKENS(11));
            v_CI_STAGING.STATUS_INDICATION := TRIM(v_TOKENS(12));
            v_CI_STAGING.REC_TS            := VALIDATE_TIMESTAMP(v_TOKENS(13), v_STATUS);
            IF v_STATUS <> GA.SUCCESS THEN
               v_ERROR_MESSAGE := v_ERROR_MESSAGE || 'Invalid Timestamp Date, ';
               v_HAVE_ERROR := TRUE;
            END IF; 
            IF v_HAVE_ERROR THEN 
               POST_BGE_CI_STAGING_ERROR(v_CI_STAGING, RTRIM(v_ERROR_MESSAGE,', '));
            ELSE
               INSERT INTO CUSTOMER_INFO_STAGING VALUES v_CI_STAGING;
               v_VALID_COUNT := v_VALID_COUNT + 1;
            END IF;
         EXCEPTION
            WHEN OTHERS THEN
               v_ERROR_MESSAGE := SQLERRM;
               v_HAVE_ERROR := TRUE;
         END;
      ELSE
         v_ERROR_MESSAGE := 'Invalid Record Format.  Record Contained ' || TO_CHAR(v_TOKENS.COUNT) || ' Fields, Expected 13.';
         v_HAVE_ERROR := TRUE;
      END IF;
      IF v_HAVE_ERROR THEN
         v_ERROR_COUNT := v_ERROR_COUNT + 1;
         LOGS.LOG_ERROR('Record ' || TO_CHAR(v_INDEX) || ': ' || v_CONTAINER(v_INDEX) || ', Error: ' || v_ERROR_MESSAGE);
         LOGS.LOG_DEBUG('Record ' || TO_CHAR(v_INDEX) || ': ' || v_CONTAINER(v_INDEX));
      ELSE
         LOGS.LOG_DEBUG('Record ' || TO_CHAR(v_INDEX) || ': ' || v_CONTAINER(v_INDEX));
      END IF;   
   END LOOP;
   IF v_VALID_COUNT > 0 THEN
      LOGS.LOG_INFO('Valid Records Were Loaded. The Customer Information Filter Process Will Run.');
   ELSE
      LOGS.LOG_ERROR('No Valid Records Were Loaded. The Customer Information Filter Process Will Not Run.');
   END IF;
   p_MESSAGE := 'Valid Records In File: ' || TO_CHAR(v_VALID_COUNT) || ', Invalid Records In File: ' || TO_CHAR(v_ERROR_COUNT) || '.';
   LOGS.LOG_INFO(p_MESSAGE);
-- Stop The Process Log --
   LOGS.LOG_INFO(c_LOAD_CUSTOMER_INFORMATION || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100)));
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
   IF v_VALID_COUNT > 0 THEN
      RUN_CI_FILTER;
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ERRS.ABORT_PROCESS;
END LOAD_CI_FILE_AND_RUN_FILTER;

PROCEDURE CI_VALIDATE_AND_POST(p_STATUS OUT NUMBER, p_MESSAGE OUT VARCHAR2) AS
v_MARK_TIME       PLS_INTEGER := DBMS_UTILITY.GET_TIME;
BEGIN
-- Start The Process Log --
   LOGS.START_PROCESS(c_CI_VALIDATE_AND_POST);
   p_MESSAGE := '';
   p_STATUS := 0;
   RUN_CI_FILTER;
-- Stop The Process Log --
   p_MESSAGE := c_CI_VALIDATE_AND_POST || ' Complete. Elapsed Seconds: ' || TO_CHAR(ROUND((DBMS_UTILITY.GET_TIME-v_MARK_TIME)/100));
   LOGS.LOG_INFO(p_MESSAGE);
   LOGS.STOP_PROCESS(p_MESSAGE, p_STATUS);
EXCEPTION
   WHEN OTHERS THEN
      p_MESSAGE := SQLERRM;
      p_STATUS := SQLCODE;
      ERRS.ABORT_PROCESS;
END CI_VALIDATE_AND_POST;

PROCEDURE IMPORT_CI_FILE
   (
   p_IMPORT_FILE      IN CLOB,
   p_IMPORT_FILE_PATH IN VARCHAR2,
   p_STATUS          OUT NUMBER,
   p_MESSAGE         OUT VARCHAR2
   ) AS
BEGIN
   LOAD_CI_FILE_AND_RUN_FILTER(p_IMPORT_FILE, p_IMPORT_FILE_PATH, p_STATUS, p_MESSAGE);
END IMPORT_CI_FILE;
 
END CDI_CUSTOMER;
/
